/*! For license information please see main.js.LICENSE.txt */
(()=>{var e={"./app/components/ContactMe.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>a});var r=n("./app/containers/AppEvents.js"),i=n("./node_modules/gsap/index.js"),s=(n("./app/constants/colors.js"),n("./node_modules/@studiometa/js-toolkit/helpers/getInstanceFromElement.js")),o=n("./app/components/Title.js");class a extends r.default{static config={...r.default.config,name:"ContactMe",refs:[...r.default.config.refs,"content","button","mail","socialLinks[]"],options:{isOpen:{type:Boolean,default:!1}}};targetClipPath=null;title=null;isFirstOpen=!0;mounted(){super.mounted(),this.title=(0,s.default)(this.$refs.mail,o.default),this.calculateTargetClipPath(),i.default.set(this.$refs.content,{clipPath:this.targetClipPath})}onSocialLinksMouseenter(e,t){const n=this.$refs.socialLinks[t].querySelector(".component-contactMe-socialLinkBar");i.default.to(n,{scaleX:1,ease:"expo.out",onStart:()=>{i.default.set(n,{transformOrigin:"left"})}})}onSocialLinksMouseleave(e,t){const n=this.$refs.socialLinks[t].querySelector(".component-contactMe-socialLinkBar");i.default.to(n,{scaleX:0,ease:"expo.out",onStart:()=>{i.default.set(n,{transformOrigin:"right"})}})}onContentClick(){this.toggleOpen()}onButtonClick(){this.toggleOpen()}toggleOpen(){this.$options.isOpen=!this.$options.isOpen,this.calculateTargetClipPath(this.isFirstOpen),this.$options.isOpen?this.open():this.close(),this.isFirstOpen=!1}calculateTargetClipPath(e=!1){const t=this.$refs.button.getBoundingClientRect(),n={x:t.left+t.width/2,y:t.top+t.height/2},r=Math.hypot(n.x,n.y);this.targetClipPath=this.$options.isOpen?`circle(${r}px at ${n.x}px ${n.y}px)`:`circle(0px at ${n.x}px ${n.y}px)`,e&&i.default.set(this.$refs.content,{clipPath:`circle(0px at ${n.x}px ${n.y}px)`})}open(){i.default.killTweensOf([this.$refs.content,this.$refs.button,this.$refs.socialLinks]),i.default.timeline().to(this.$refs.content,{clipPath:this.targetClipPath,duration:1,ease:"expo.out"},0).fromTo(this.$refs.button,{opacity:1},{opacity:0,scale:0,duration:.1},.05).add((()=>this.title.animateIn()),0).fromTo(this.$refs.socialLinks,{yPercent:100},{yPercent:0,duration:1,ease:"expo.out",stagger:.07},.3)}close(){i.default.killTweensOf([this.$refs.content,this.$refs.button,this.$refs.socialLinks]),i.default.timeline().to(this.$refs.content,{clipPath:this.targetClipPath,duration:.8,ease:"power4.out"},0).fromTo(this.$refs.button,{scale:3},{opacity:1,scale:1,ease:"elastic.out(1, 0.4)",duration:1.1},"=-0.52").add((()=>this.title.animateOut()),0).to(this.$refs.socialLinks,{yPercent:-100,duration:.6,ease:"expo.out"},"0")}}},"./app/components/Cursor.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>a});var r=n("./node_modules/@studiometa/js-toolkit/decorators/withBreakpointObserver.js"),i=n("./node_modules/@studiometa/js-toolkit/Base/index.js"),s=n("./node_modules/@studiometa/js-toolkit/utils/css/classes.js"),o=n("./node_modules/@studiometa/js-toolkit/utils/css/getOffsetSizes.js");class a extends((0,r.withBreakpointObserver)(i.Base)){static config={name:"Cursor",refs:["inner"],log:!0};isOnLink=!1;isOnSlider=!1;isListening=!0;position={x:0,y:0};color=null;sticky={isActive:!1,side:null,enable:!1};currentTarget={element:null,box:null,type:null};moved({x:e,y:t,last:n,isDown:r,delta:i}){(0,s.toggle)(this.$el,"is-down",r),this.sticky.enable&&this.sticky.isActive||(this.position={x:e,y:t},this.setVariables({translateX:this.position.x,translateY:this.position.y,skewX:0,skewY:0}))}setColor(e){e?e!==this.color&&((0,s.remove)(this.$el,`is-${this.color}`),this.color=e,(0,s.add)(this.$el,`is-${this.color}`)):((0,s.remove)(this.$el,`is-${this.color}`),this.color=null)}setSticky(e,t,n="center"){if(this.sticky.enable)if(void 0===t||!1===t)this.sticky.isActive=!1;else{this.sticky.isActive=!0,this.sticky.side=n;const t=(e.querySelector("[data-cursor-target]")??e).getBoundingClientRect(),r=(0,o.default)(this.$refs.inner),i="right"===n?t.width/2+r.width/4:"left"===n?-t.width/2:0,s=t.x+t.width/2-r.width/2+i,a=t.y+t.height/2-r.height/2+6;this.setVariables({translateX:s,translateY:a,skewX:0,skewY:0})}}onEnterLink({target:e}){if(!this.isListening)return;this.isOnLink=!0,e.style.cursor="none",this.currentTarget.element=e,this.currentTarget.box=e.getBoundingClientRect(),this.currentTarget.type="link";const{cursorColor:t,cursorSticky:n,cursorStickySide:r}=this.currentTarget.element.dataset;this.setColor(t),this.setSticky(e,n,r),(0,s.add)(this.$el,"on-link")}onLeaveLink({target:e}){this.isOnLink=!1,e&&(e.style.cursor=""),this.currentTarget.element=null,this.currentTarget.box=null,this.currentTarget.type=null,this.setSticky(e,!1),(0,s.remove)(this.$el,"on-link")}onEnterSlider({target:e}){this.isListening&&(this.isOnSlider=!0,e.style.cursor="none",this.currentTarget.element=e,this.currentTarget.box=e.getBoundingClientRect(),this.currentTarget.type="slider",this.setColor(e),(0,s.add)(this.$el,"on-slider"))}onLeaveSlider({target:e}){this.isOnSlider=!1,e&&(e.style.cursor=""),this.currentTarget.element=null,this.currentTarget.box=null,this.currentTarget.type=null,(0,s.remove)(this.$el,"on-slider")}setVariables({translateX:e,translateY:t,skewX:n,skewY:r}){this.$el.style.setProperty("--translateX",`${e}px`),this.$el.style.setProperty("--translateY",`${t}px`),this.$el.style.setProperty("--skewX",`${n}deg`),this.$el.style.setProperty("--skewY",`${r}deg`)}removeStates(){this.isListening=!1,this.onLeaveLink({target:this.currentTarget.element}),this.onLeaveSlider({target:this.currentTarget.element})}enable(){if(this.isListening=!0,this.isOnSlider&&(this.setColor(target),(0,s.add)(this.$el,"on-slider")),this.isOnLink){const{cursorColor:e,cursorSticky:t,cursorStickySide:n}=this.currentTarget.element.dataset;this.setColor(e),this.setSticky(this.currentTarget.element,t,n),(0,s.add)(this.$el,"on-link")}}set isListening(e){this.isListening=e}}},"./app/components/Divider.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>a});var r=n("./node_modules/@studiometa/js-toolkit/decorators/withIntersectionObserver.js"),i=n("./node_modules/@studiometa/js-toolkit/Base/index.js"),s=n("./node_modules/gsap/index.js"),o=n("./app/constants/animations.js");class a extends((0,r.withIntersectionObserver)(i.Base,{...o.ANIMATIONS.intersectionObserver})){static config={name:"Divider",options:{direction:{type:String,default:"horizontal"},delay:Number}};animateInTriggered=!1;mounted(){s.default.set(this.$el,{["horizontal"===this.$options.direction?"scaleX":"scaleY"]:0,"transform-origin":"horizontal"===this.$options.direction?"left":"top"})}intersected([{isIntersecting:e}]){e&&!this.animateInTriggered&&this.animateIn()}animateIn(){this.animateInTriggered=!0,s.default.to(this.$el,{["horizontal"===this.$options.direction?"scaleX":"scaleY"]:1,duration:1,delay:this.$options.delay,ease:"cubic.inOut"})}}},"./app/components/Footer.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>a});var r=n("./app/containers/AppEvents.js"),i=n("./node_modules/@studiometa/js-toolkit/decorators/withScrolledInView.js"),s=n("./app/components/SVGReveal.js"),o=n("./node_modules/@studiometa/js-toolkit/utils/math/ease.js");class a extends((0,i.withScrolledInView)(r.default,{rootMargin:"100%"})){static config={...r.default.config,name:"Footer",refs:[...r.default.config.refs,"mask","wrapper","title"],components:{SVGReveal:s.default}};wordsPerLine=null;width=window.innerWidth;height=window.innerHeight;scrollProgressY=0;mounted(){super.mounted(),this.width=this.$refs.wrapper.offsetWidth,this.height=this.$refs.wrapper.offsetHeight}scrolledInView({current:e,start:t}){const n=t.y+this.height;this.scrollProgressY=(e.y-t.y)/(n-t.y)}ticked(){this.scrollProgressY,this.height;const e=this.getPolygonPath(this.scrollProgressY);return()=>{this.$refs.mask.style.clipPath=`polygon(${e})`;for(const e of this.$children.SVGReveal)e.progressDraw(1-(0,o.easeInExpo)(this.scrollProgressY))}}getPolygonPath(e){let t="100% 100%, 0% 100%, ";const n=Math.ceil(this.width/80),r=100*(1-e),i=.016*this.width*Math.sin(e*Math.PI);t+=`0% ${r}%, `;for(let e=0;e<=n;e++){t+=`${80*e/this.width*100}% ${r-Math.sin(80*e/this.width*Math.PI)*i}%, `}return t.slice(0,-2)}}},"./app/components/HomeHeader.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>k});var r=n("./app/containers/AppEvents.js"),i=n("./node_modules/matter-js/build/matter.js"),s=n.n(i),o=n("./node_modules/@studiometa/js-toolkit/decorators/withIntersectionObserver.js"),a=n("./node_modules/@studiometa/js-toolkit/decorators/withFreezedOptions.js"),l=n("./app/constants/colors.js"),c=n("./node_modules/@studiometa/js-toolkit/utils/math/map.js"),u=n("./node_modules/@studiometa/js-toolkit/utils/math/clamp.js"),d=n("./node_modules/gsap/index.js"),h=n("./app/constants/animations.js"),p=n("./node_modules/gsap/CustomEase.js");const f=s().Engine,m=s().Render,g=s().Runner,v=s().Bodies,y=s().World,b=s().MouseConstraint,w=(s().Events,s().Mouse),_=s().Query,x=s().Body,S=s().Composite;class k extends((0,o.withIntersectionObserver)((0,a.withFreezedOptions)(r.default),{...h.ANIMATIONS.intersectionObserver})){static config={...r.default.config,name:"HomeHeader",refs:[...r.default.config.refs,"canvas","content","titleChunks[]"],options:{width:{type:Number,default:window.innerWidth},height:{type:Number,default:window.innerHeight},bubbleImages:{type:Array},numberOfBubbles:{type:Number,default:8},colors:{type:Array,default:()=>[l.COLORS.brownLight,l.COLORS.brownLight,l.COLORS.orange,l.COLORS.orange,l.COLORS.beige,l.COLORS.brownLight,l.COLORS.orange,l.COLORS.brownLight]},positions:{type:Array,default:()=>[k.calculatePosition(127,332,window.innerWidth,window.innerHeight),k.calculatePosition(262,376,window.innerWidth,window.innerHeight),k.calculatePosition(511,393,window.innerWidth,window.innerHeight),k.calculatePosition(587,128,window.innerWidth,window.innerHeight),k.calculatePosition(595,337,window.innerWidth,window.innerHeight),k.calculatePosition(920,68,window.innerWidth,window.innerHeight),k.calculatePosition(1041,133,window.innerWidth,window.innerHeight),k.calculatePosition(1122,372,window.innerWidth,window.innerHeight)]}}};revealed=!1;bubblesCreated=!1;engine=null;render=null;bubbles=[];circleProperties={density:10,restitution:1,speed:.6,friction:.5,frictionAir:.002,render:{fillStyle:l.COLORS.beige}};sprites=[];scrollProgressY=0;maxTranslateX=0;maxTranslateY=0;maxRotate=-8;progressOutOfView=0;static calculatePosition(e,t,n,r){return{x:(0,c.default)(e+54,0,1440,0,n),y:(0,c.default)(t+54,0,735,0,r)}}mounted(){this.animateIn=this.animateIn.bind(this),this.maxTranslateX=this.$el.offsetWidth-this.$refs.content.getBoundingClientRect().right,this.sprites=this.$options.bubbleImages;for(let e=0;e<this.$options.numberOfBubbles;e++)this.sprites[e]||(this.sprites[e]="");this.sprites=this.sprites.sort((()=>.5-Math.random())),this.bubblesCreated||(this.createWorldBubbles(),this.applyRandomForces(window.innerWidth<700?60:120),this.bubbles.forEach(((e,t)=>{x.setPosition(e,{x:this.$options.positions[t].x,y:-(window.innerWidth<700?72:108)})}))),this.titleTween=d.default.from(this.$refs.titleChunks,{yPercent:100,duration:1.4,stagger:.07,ease:p.default.create("custom","M0,0 C0.046,0.498 0.077,0.805 0.226,0.904 0.356,0.99 0.504,1 1,1 "),paused:!0})}animateIn(e=!1,t=.07){this.bubbles.forEach(((n,r)=>{d.default.to(n,{duration:1,ease:window.innerWidth>700?"elastic.out(1, 0.4)":"elastic.out(1, 0.7)",onUpdate:function(t){const i=(0,c.default)(this.ratio,0,1,window.innerHeight*(e?-1:1),t[r].y);x.setPosition(n,{x:t[r].x,y:i})},onUpdateParams:[this.$options.positions],delay:t*r})})),this.titleTween.play(0)}scrolled({y:e,progress:t,max:n}){this.scrollProgressY=t.y,this.progressOutOfView=(0,u.default)(e/window.innerHeight,0,1),this.maxTranslateY=n.y-window.innerHeight-window.innerHeight/10}ticked(){return()=>{this.engine.gravity.y=this.progressOutOfView,d.default.set(this.$refs.content,{x:this.maxTranslateX*this.scrollProgressY,y:this.maxTranslateY*this.scrollProgressY,opacity:1-this.progressOutOfView+.1,rotate:this.maxRotate*this.scrollProgressY+"deg"})}}createWorldBubbles(){this.bubblesCreated=!0,this.engine=f.create({gravity:{x:0,y:.01}}),this.render=m.create({element:this.$refs.canvas,engine:this.engine,options:{width:this.$options.width,height:this.$options.height,element:this.$el,engine:this.engine,hasBounds:!0,wireframes:!1,background:"",wireframeBackground:"",showBounds:!1}}),this.setupEvents(),this.createWalls(this.$options.numberOfBubbles),this.createBubbles(this.$options.numberOfBubbles),this.applyRandomForces(),S.add(this.engine.world,this.bubbles),m.run(this.render),this.runner=g.create(),g.run(this.runner,this.engine)}createWalls({wallThickness:e=100}={wallThickness:100}){const t={isStatic:!0,render:{fillStyle:"transparent",strokeStyle:"transparent",lineWidth:0,frictionStatic:0}};S.add(this.engine.world,[v.rectangle(this.$options.width/2,0-e/2,this.$options.width,e,t),v.rectangle(this.$options.width+e/2,this.$options.height/2,e,this.$options.height,t),v.rectangle(this.$options.width/2,this.$options.height+e/2,this.$options.width,e,t),v.rectangle(0-e/2,this.$options.height/2,e,this.$options.height,t)])}createBubbles(e){const t=window.innerWidth<700?36:54,n=window.innerWidth<700?.666:1;for(let r=0;r<e;r++){const e={...this.circleProperties,render:{sprite:{texture:this.sprites[r],xScale:n,yScale:n},fillStyle:this.$options.colors[r]}};this.bubbles.push(v.circle(this.$options.positions[r].x,this.$options.positions[r].y,t,e))}}applyRandomForces(e=10){for(const t of this.bubbles)s().Body.applyForce(t,{x:0,y:0},{x:(Math.random()-.5)*e,y:(Math.random()-.5)*e})}setupEvents(){const e=w.create(this.$refs.canvas),t=b.create(this.engine,{mouse:e,constraint:{render:{visible:!1}}});y.add(this.engine.world,t)}handleMouseMove(e){const t=_.point(this.bubbles,e.mouse.position),[n]=t;n&&(n.force.x=2*(Math.random()-.5),n.force.y=2*(Math.random()-.5))}}},"./app/components/HorizontalTextImage.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>a});var r=n("./app/containers/AppEvents.js"),i=n("./node_modules/@studiometa/js-toolkit/decorators/withResponsiveOptions.js"),s=n("./node_modules/@studiometa/js-toolkit/decorators/withScrolledInView.js"),o=n("./node_modules/gsap/index.js");class a extends((0,i.withResponsiveOptions)((0,s.withScrolledInView)(r.default,{rootMargin:"100%"}))){static config={...r.default.config,name:"HorizontalTextImage",refs:[...r.default.config.refs,"text","image"],options:{parallaxAmount:{type:Number,default:100,responsive:!0},label:{type:String,responsive:!0}}};scrolledInView({progress:e}){o.default.set(this.$refs.image,{y:-this.$options.parallaxAmount*(e.y-.5)})}}},"./app/components/Image.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>c});var r=n("./node_modules/@studiometa/js-toolkit/decorators/withFreezedOptions.js"),i=n("./node_modules/@studiometa/js-toolkit/decorators/withIntersectionObserver.js"),s=n("./node_modules/@studiometa/js-toolkit/Base/index.js"),o=n("./node_modules/gsap/index.js"),a=n("./app/constants/animations.js"),l=n("./node_modules/gsap/CustomEase.js");class c extends((0,r.withFreezedOptions)((0,i.withIntersectionObserver)(s.Base,{...a.ANIMATIONS.intersectionObserver}))){static config={name:"Image",options:{auto:{type:Boolean,default:!0},delay:Number,duration:{type:Number,default:1.2},clipPath:{type:String,default:"inset(100% 0% 0% 0%)"}}};hasBeenReveal=!1;mounted(){this.hasBeenReveal||o.default.set(this.$el,{clipPath:this.$options.clipPath})}intersected([{isIntersecting:e}]){e&&this.$options.auto&&!this.hasBeenReveal&&(this.hasBeenReveal=!0,this.animateIn())}animateIn(){o.default.fromTo(this.$el,{clipPath:this.$options.clipPath},{clipPath:"inset(0% 0% 0% 0%)",duration:this.$options.duration,delay:this.$options.delay,ease:l.default.create("custom","M0,0 C0.046,0.498 0.077,0.805 0.226,0.904 0.356,0.99 0.504,1 1,1 ")})}animateOut(){o.default.fromTo(this.$el,{clipPath:"inset(0% 0% 0% 0%)"},{clipPath:"inset(0% 0% 100% 0%)",duration:1,ease:"cubic.out"})}}},"./app/components/Navigation.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>a});var r=n("./node_modules/@studiometa/js-toolkit/Base/index.js"),i=n("./node_modules/gsap/index.js"),s=n("./app/components/SVGReveal.js"),o=n("./node_modules/gsap/CustomEase.js");class a extends r.Base{static config={name:"Navigation",refs:["logo","entries[]"],components:{SVGReveal:s.default}};tweenIn=null;mounted(){[this.logo]=this.$children.SVGReveal,this.setAnim()}setAnim(){this.tweenIn=i.default.fromTo(this.$refs.entries,{opacity:0,translateY:18},{opacity:1,translateY:0,duration:.8,paused:!0}),this.logo.hideShapes()}animateIn(){i.default.timeline().add(this.tweenIn.play(0)).call((()=>{this.logo.drawStrokes({duration:2.3,ease:o.default.create("custom","M0,0 C0.046,0.498 0.077,0.805 0.226,0.904 0.356,0.99 0.504,1 1,1 "),delay:0})}),[],.1)}}},"./app/components/NextProject.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>u});var r=n("./app/containers/AppEvents.js"),i=n("./app/components/SVGReveal.js"),s=n("./node_modules/split-type/dist/index.js"),o=n("./node_modules/gsap/index.js"),a=n("./node_modules/@studiometa/js-toolkit/decorators/withScrolledInView.js"),l=n("./node_modules/@studiometa/js-toolkit/utils/math/clamp.js"),c=n("./node_modules/@studiometa/js-toolkit/utils/math/ease.js");class u extends((0,a.withScrolledInView)(r.default,{rootMargin:"100%"})){static config={...r.default.config,name:"NextProject",refs:[...r.default.config.refs,"container","content","titleParts[]"],components:{SVGReveal:i.default}};reachEnd=!1;splitTitle=null;wordsDistance=0;scrollProgressY=0;mounted(){super.mounted(),this.splitTitle=new s.default(this.$refs.titleParts,{type:"words"}),this.wordsDistance=this.splitTitle.words[1].getBoundingClientRect().left-this.splitTitle.words[0].getBoundingClientRect().right}scrolledInView({current:e,start:t,end:n}){const r=n.y-this.$refs.container.offsetHeight,i=t.y+this.$refs.container.offsetHeight;this.scrollProgressY=(0,l.default)((e.y-i)/(r-i),0,1),this.scrollProgressYEased=(0,c.easeInCubic)(this.scrollProgressY),this.reachEnd||Math.round(100*this.scrollProgressYEased)/100!=1||(this.reachEnd=!0,this.$refs.content.click())}ticked(){const e=(0,c.easeInExpo)(this.scrollProgressY);return this.reachEnd&&this.$services.disable("ticked"),()=>{o.default.set(this.splitTitle.words,{translateX:t=>(t%2==0?1:-1)*(this.wordsDistance/2-10)*(1-e)});for(const e of this.$children.SVGReveal)e.progressDraw(this.scrollProgressYEased);o.default.set(this.$refs.content,{clipPath:`inset(0 ${4.1*(1-this.scrollProgressYEased)}% 0 ${4.1*(1-this.scrollProgressYEased)}%)`})}}}},"./app/components/OverlayTransition.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>u});var r=n("./node_modules/@studiometa/js-toolkit/Base/index.js"),i=n("./node_modules/@studiometa/js-toolkit/helpers/getInstanceFromElement.js"),s=n("./node_modules/gsap/index.js"),o=n("./node_modules/@studiometa/js-toolkit/utils/css/classes.js"),a=n("./app/constants/colors.js"),l=n("./app/components/HomeHeader.js"),c=n("./app/components/Navigation.js");class u extends r.Base{static config={name:"Preloader",refs:["wrapper","logoFrames[]","name","scribblePath","nameWord","overlay"],options:{name:{type:String,default:"cassandre"}}};mounted(){this.logoFramesAnimation=null,this.overlay={context:this.$refs.overlay.getContext("2d"),width:window.innerWidth*window.devicePixelRatio,height:window.innerHeight*window.devicePixelRatio},this.$refs.overlay.width=this.overlay.width,this.$refs.overlay.height=this.overlay.height}async animateIn(){return new Promise((e=>{s.default.timeline({onStart:()=>{(0,o.remove)(this.$el,"is-hidden"),s.default.set(this.$refs.logoFrames,{autoAlpha:0});const e=this.$refs.scribblePath.getTotalLength();s.default.set(this.$refs.scribblePath,{strokeDasharray:`${e} ${e}`})}}).timeScale(1.4).add(this.animateLogoFrames().repeat(5)).set(this.$refs.name,{autoAlpha:1}).to(this.$refs.nameWord,{duration:.45,ease:`step(${this.$options.name.length})`,onUpdate:function(e,t){e.innerText=t.slice(0,Math.round(this.progress()*t.length))},onUpdateParams:[this.$refs.nameWord,this.$options.name]}).to(this.$refs.nameWord,{delay:1.3,duration:.15,ease:`step(${this.$options.name.length})`,onUpdate:function(e,t){e.innerText=t.slice(0,Math.round((1-this.progress())*t.length))},onUpdateParams:[this.$refs.nameWord,this.$options.name]}).fromTo(this.$refs.scribblePath,{strokeDashoffset:this.$refs.scribblePath.getTotalLength()},{strokeDashoffset:1-this.$refs.scribblePath.getTotalLength(),duration:2.3,ease:"quart.out"},">+=0.1").set(this.$refs.overlay,{autoAlpha:1}).call(e,[],">-=0.9")}))}async animateOut(){const e=document.querySelector('[data-component="HomeHeader"]');return e&&(this.header=(0,i.default)(e,l.default)),this.navigation=(0,i.default)(document.querySelector('[data-component="Navigation"]'),c.default),new Promise((e=>{s.default.timeline({onComplete:()=>{s.default.set(this.$el,{autoAlpha:0}),document.querySelector("[data-taxi]").style.transform="",e()}}).add(s.default.to(this.overlay,{duration:1,ease:"expo.in",onUpdate:this.animateOverlay,onUpdateParams:[this.overlay,this.overlay.height,"#FF6C3C"]})).add(s.default.to(this.overlay,{onStart:()=>{s.default.set(this.$refs.wrapper,{autoAlpha:0})},duration:1,ease:"expo.out",onUpdate:this.animateOverlay,onUpdateParams:[this.overlay,0,"#FF6C3C"]})).call((()=>{this.header&&this.header.animateIn()}),null,"-=0.9").call((()=>{this.navigation.animateIn()}),null,"-=0.5")}))}animatePageTransitionIn({onComplete:e}){return s.default.timeline({onStart:()=>{s.default.set(this.$refs.logoFrames,{autoAlpha:0}),s.default.set(this.$el,{autoAlpha:1}),s.default.set(this.$refs.wrapper,{autoAlpha:1,backgroundColor:a.COLORS.blackDark}),s.default.set(this.$refs.name,{autoAlpha:0})},onComplete:e}).from(this.$el,{clipPath:"inset(0 0 100% 0)",duration:1,ease:"expo.inOut",onComplete:()=>{this.logoFramesAnimation=this.animateLogoFrames().repeat(-1).timeScale(1.4)}})}animatePageTransitionOut({onComplete:e}){return s.default.timeline({delay:1,onComplete:()=>{e()}}).to(this.$el,{clipPath:"inset(100% 0 0 0)",duration:1,ease:"expo.inOut",clearProps:"clipPath",onComplete:()=>{window.lenis.scrollTo(1),s.default.set(this.$el,{autoAlpha:0}),this.logoFramesAnimation.kill()}})}animateLogoFrames(){return this.logoFramesAnimation&&this.logoFramesAnimation.kill(),s.default.to(this.$refs.logoFrames,{onStart:()=>{s.default.set(this.$refs.logoFrames,{autoAlpha:0})},keyframes:[{autoAlpha:0,duration:0},{autoAlpha:1,duration:0,delay:.04},{autoAlpha:0,duration:0,delay:.08}],stagger:.081})}animateOverlay(e,t,n){e.context.clearRect(0,0,e.width,e.height),e.context.save(),e.context.beginPath(),e.context.moveTo(e.width,t),e.context.lineTo(0,t);const r=Math.ceil(e.width/40),i=(1-this.ratio)*e.height,s=200*Math.sin(this.ratio*Math.PI);e.context.lineTo(0,i);for(let t=0;t<=r;t++){const n=40*t,r=i-Math.sin(n/e.width*Math.PI)*s;e.context.lineTo(n,r)}e.context.fillStyle=n,e.context.fill(),e.context.restore()}}},"./app/components/Paragraph.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>l});var r=n("./node_modules/@studiometa/js-toolkit/decorators/withIntersectionObserver.js"),i=n("./node_modules/@studiometa/js-toolkit/Base/index.js"),s=n("./node_modules/gsap/index.js"),o=n("./node_modules/split-type/dist/index.js"),a=n("./app/constants/animations.js");class l extends((0,r.withIntersectionObserver)(i.Base,{...a.ANIMATIONS.intersectionObserver})){static config={name:"Paragraph",options:{auto:{type:Boolean,default:!0},delay:Number,opacity:Boolean,staggerLines:Boolean}};splitText=null;wordsPerLine=null;animateInTriggered=!1;mounted(){this.animateInTriggered||(this.animateIn=this.animateIn.bind(this),this.setup())}setup(){this.split(),s.default.set(this.splitText.words,{yPercent:100,opacity:this.$options.opacity?0:1})}intersected([{isIntersecting:e}]){e&&this.$options.auto&&!this.animateInTriggered&&this.animateIn()}split(){this.$el.style.fontKerning="none",this.splitText=new o.default(this.$el,{types:"lines, words",tagName:"span"}),this.wordsPerLine=this.splitText.lines.map((e=>[e.querySelectorAll(".word")]))}revertSplit(){this.$el.style.fontKerning="",this.splitText.revert()}animateIn(){this.animateInTriggered=!0,this.wordsPerLine.forEach(((e,t)=>{s.default.to(e,{yPercent:0,opacity:1,duration:1.3,ease:"power3.out",delay:this.$options.delay+(this.$options.staggerLines?.12*t:0)})}))}animateOut(){this.wordsPerLine.forEach((e=>{s.default.to(e,{yPercent:-100,duration:.3})}))}}},"./app/components/Parallax.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o});var r=n("./node_modules/@studiometa/js-toolkit/decorators/withFreezedOptions.js"),i=n("./node_modules/@studiometa/js-toolkit/decorators/withScrolledInView.js"),s=n("./node_modules/@studiometa/js-toolkit/Base/index.js");class o extends((0,r.withFreezedOptions)((0,i.withScrolledInView)(s.Base))){static config={name:"Parallax",options:{percent:{type:Number,default:10},reverse:{type:Boolean,default:!1}},refs:["image"]};scrollProgressY=0;mounted(){this.$refs.image.style.willChange="transform",this.$options.reverse?this.$refs.image.style.top="0":this.$refs.image.style.bottom="0",this.$refs.image.style.height=`${100+this.$options.percent}%`}scrolledInView({progress:e}){this.scrollProgressY=e.y}ticked(){const e=this.scrollProgressY*this.$options.percent*(this.$options.reverse?-1:1);return()=>{this.$refs.image.style.transform=`translateY(${e}%)`}}}},"./app/components/SVGReveal.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o});var r=n("./node_modules/@studiometa/js-toolkit/Base/index.js"),i=n("./node_modules/gsap/index.js"),s=n("./app/utils/Svg.js");class o extends r.Base{static config={name:"SVGReveal",refs:["svg"],log:!0,options:{reverse:Boolean}};shapes=[];drawn=!1;mounted(){this.drawn||(this.shapes=s.default.getShapes(this.$refs.svg).map((e=>e.el)),this.hideShapes())}hideShapes(){this.drawn=!1,i.default.set(this.shapes,{strokeDasharray:(e,t)=>`${t.getTotalLength()} ${t.getTotalLength()}`,strokeDashoffset:(e,t)=>""+(this.$options.reverse?-1:1)*t.getTotalLength()})}drawStrokes({duration:e=1.3,delay:t=.6,ease:n="power3.out"}={duration:1.3,delay:.6,ease:"power3.out"}){this.drawn||(this.drawn=!0,i.default.fromTo(this.shapes,{strokeDashoffset:(e,t)=>`${t.getTotalLength()}`},{strokeDashoffset:0,duration:e,delay:t,ease:n,clearProps:"all"}))}progressDraw(e){i.default.set(this.shapes,{strokeDashoffset:(t,n)=>""+((this.$options.reverse?-n.getTotalLength():0)+n.getTotalLength()*e)})}}},"./app/components/ScribbleLink.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>c});var r=n("./node_modules/@studiometa/js-toolkit/Base/index.js"),i=n("./app/utils/Svg.js"),s=n("./node_modules/@studiometa/js-toolkit/utils/css/styles.js"),o=n("./node_modules/@studiometa/js-toolkit/utils/tween.js"),a=n("./node_modules/@studiometa/js-toolkit/utils/math/map.js"),l=n("./node_modules/@studiometa/js-toolkit/utils/math/ease.js");class c extends r.Base{shapes;tweenIn;tweenOut;static config={name:"ScribbleLink",refs:["scribble","link"]};mounted(){this.shapes=i.default.getShapes(this.$refs.scribble),i.default.setInitialAttributesShapes(this.shapes),this.setupTweens(),(0,s.add)(this.$refs.scribble,{visibility:"visible"})}onLinkMouseenter(){this.tweenOut.finish(),1===this.tweenIn.progress()&&this.tweenIn.progress(0),this.tweenIn.play()}onLinkMouseleave(){this.tweenIn.finish(),1===this.tweenOut.progress()&&this.tweenOut.progress(0),this.tweenOut.play()}setupTweens(){this.tweenIn=(0,o.tween)((e=>{const t=(0,a.default)(e,0,1,1,0);this.setStrokeDashOffsetShapes(t)}),{duration:.7,easing:l.easeOutQuad}),this.tweenOut=(0,o.tween)((e=>this.setStrokeDashOffsetShapes(-e)),{duration:.3,easing:l.easeOutQuad,onFinish:()=>this.setStrokeDashOffsetShapes(1)}),this.tweenIn.pause(),this.tweenOut.pause()}setStrokeDashOffsetShapes(e){for(const t of this.shapes)t.el.setAttribute("stroke-dashoffset",""+t.length*e)}}},"./app/components/Slider.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>h});var r=n("./app/containers/AppEvents.js"),i=n("./node_modules/gsap/index.js"),s=n("./node_modules/@studiometa/js-toolkit/utils/math/clamp.js"),o=n("./node_modules/@studiometa/js-toolkit/utils/math/damp.js"),a=n("./node_modules/@studiometa/js-toolkit/decorators/withIntersectionObserver.js"),l=n("./node_modules/@studiometa/js-toolkit/decorators/withDrag.js"),c=n("./node_modules/@studiometa/js-toolkit/decorators/withFreezedOptions.js"),u=n("./app/utils/detector.js"),d=n("./app/utils/dom.js");class h extends((0,a.withIntersectionObserver)((0,l.withDrag)((0,c.withFreezedOptions)(r.default),{target:e=>e.$refs.wrapper}))){static config={...r.default.config,name:"Slider",refs:[...r.default.config.refs,"wrapper","slides[]","images[]"],options:{infinite:{type:Boolean,default:!1},centered:{type:Boolean,default:!0},speed:{type:Number,default:.08},lerp:{type:Number,default:.04},scaleOnPress:{type:Number,default:.97}}};state={isEnabled:!0,isPressed:!1,forward:null,baseTranslateX:null,targetTranslateX:0,currentTranslateX:0,minTranslateX:null,maxTranslateX:null};hasBeenReveal=!1;lerp=1.3;raf=null;mounted(){super.mounted(),this.lerp=(0,u.isTouchDevice)()?.08:this.$options.lerp,this.init=this.init.bind(this),(0,d.imagesRendererObserver)(this.$el).then(this.init)}destroyed(){cancelAnimationFrame(this.raq)}handleResize(){this.state={isEnabled:!0,isPressed:!1,forward:null,baseTranslateX:null,targetTranslateX:0,currentTranslateX:0,minTranslateX:null,maxTranslateX:null},this.calculateBounds()}init(){this.calculateBounds(),this.state.isEnabled&&(this.$options.infinite&&this.cloneSlides(),this.addEvents(),this.raq=requestAnimationFrame(this.update.bind(this)))}cloneSlides(){this.$refs.wrapper.childNodes.forEach((e=>this.$refs.wrapper.appendChild(e.cloneNode(!0)))),this.$update()}calculateBounds(){const e=this.$el.getBoundingClientRect(),t=this.$refs.wrapper.getBoundingClientRect(),n=e.width-t.width;if(n>=0)return this.state.isEnabled=!1,void this.setDisableStyle();this.state.minTranslateX=n,this.$options.infinite&&(this.state.minTranslateX-=t.width,this.state.baseTranslateX=-t.width),this.state.maxTranslateX=0,this.$options.centered&&(this.state.currentTranslateX=this.state.minTranslateX/2,this.state.targetTranslateX=this.state.minTranslateX/2)}intersected([{isIntersecting:e}]){e&&!this.hasBeenReveal&&(this.hasBeenReveal=!0,this.animateIn())}animateIn(){i.default.fromTo(this.$el.querySelectorAll('[data-ref="slides[]"]'),{opacity:0},{opacity:1,duration:1.2,stagger:{each:.1,from:"center",grid:"auto"}})}dragged({mode:e,distance:t}){"start"===e&&window.lenis.stop(),"drop"===e&&window.lenis.start(),this.state.forward=t.x<0;const n=(0,s.default)(t.x,-400,400);this.state.targetTranslateX+=n*this.$options.speed}addEvents(){this.$refs.wrapper.addEventListener("mousedown",this.onMouseDown.bind(this)),this.$refs.wrapper.addEventListener("mouseup",this.onMouseUp.bind(this))}onMouseDown(){this.state.isPressed=!0,i.default.killTweensOf([this.$refs.slides,this.$refs.images],"scale"),i.default.to(this.$refs.slides,{scale:this.$options.scaleOnPress,duration:.7,ease:"power4.out"}),i.default.to(this.$refs.images,{scale:1.1,duration:1,ease:"power4.out"})}onMouseUp(){this.state.isPressed=!1,i.default.killTweensOf([this.$refs.slides,this.$refs.images],"scale"),i.default.to(this.$refs.slides,{scale:1,duration:.5,ease:"power4.out"}),i.default.to(this.$refs.images,{scale:1,duration:.5,ease:"power4.out"})}update(){this.$options.infinite&&this.state.forward&&this.state.currentTranslateX<=this.state.baseTranslateX?(this.state.targetTranslateX=this.state.maxTranslateX+this.state.targetTranslateX-this.state.currentTranslateX,this.state.currentTranslateX=this.state.maxTranslateX):this.$options.infinite&&!this.state.forward&&this.state.targetTranslateX>=this.state.maxTranslateX?(this.state.targetTranslateX=this.state.baseTranslateX+this.state.targetTranslateX-this.state.currentTranslateX,this.state.currentTranslateX=this.state.baseTranslateX+this.state.currentTranslateX):(this.state.targetTranslateX=(0,s.default)(this.state.targetTranslateX,this.state.minTranslateX,this.state.maxTranslateX),this.state.currentTranslateX=(0,o.default)(this.state.targetTranslateX,this.state.currentTranslateX,this.lerp,.01)),i.default.set(this.$refs.wrapper,{x:this.state.currentTranslateX}),this.raq=requestAnimationFrame(this.update.bind(this))}setDisableStyle(){this.$refs.wrapper.style.width="100%",this.$refs.wrapper.style.justifyContent="center",this.$refs.wrapper.style.cursor="default"}}},"./app/components/Title.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>l});var r=n("./node_modules/@studiometa/js-toolkit/decorators/withIntersectionObserver.js"),i=n("./node_modules/@studiometa/js-toolkit/Base/index.js"),s=n("./node_modules/gsap/index.js"),o=n("./node_modules/split-type/dist/index.js"),a=n("./app/constants/animations.js");class l extends((0,r.withIntersectionObserver)(i.Base,{...a.ANIMATIONS.intersectionObserver})){static config={name:"Title",options:{auto:{type:Boolean,default:!0},repeat:{type:Boolean,default:!1},delay:Number}};splitText=null;animateInTriggered=!1;onAnimateInStart=null;onAnimateInComplete=null;mounted(){this.animateInTriggered&&!this.$options.repeat||(this.split(),s.default.set(this.splitText.chars,{yPercent:100}))}intersected([{isIntersecting:e}]){e&&this.$options.auto&&(!this.animateInTriggered||this.$options.repeat)&&this.animateIn()}split(){this.$el.style.fontKerning="none",this.splitText=new o.default(this.$el,{types:"words, chars",tagName:"span"})}revertSplit(){this.$el.style.fontKerning="",this.splitText.revert()}animateIn(){this.animateInTriggered=!0,s.default.killTweensOf(this.splitText.chars),s.default.fromTo(this.splitText.chars,{yPercent:100},{yPercent:0,duration:e=>.6+.018*(this.splitText.chars.length-e),ease:"power2.out",delay:this.$options.delay,stagger:.018,onStart:()=>{this.onAnimateInStart&&this.onAnimateInStart()},onComplete:()=>{this.revertSplit(),this.onAnimateInComplete&&this.onAnimateInComplete()}})}animateOut(){this.animateInTriggered=!1,s.default.killTweensOf(this.splitText.chars),s.default.to(this.splitText.chars,{yPercent:-100,duration:.3})}}},"./app/components/Work.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>g});var r=n("./node_modules/@studiometa/js-toolkit/decorators/withResponsiveOptions.js"),i=n("./node_modules/@studiometa/js-toolkit/decorators/withScrolledInView.js"),s=n("./node_modules/@studiometa/js-toolkit/decorators/withIntersectionObserver.js"),o=n("./node_modules/@studiometa/js-toolkit/helpers/getInstanceFromElement.js"),a=n("./app/containers/AppEvents.js"),l=n("./app/components/SVGReveal.js"),c=n("./node_modules/@studiometa/js-toolkit/utils/css/classes.js"),u=n("./node_modules/@studiometa/js-toolkit/utils/css/transform.js"),d=n("./app/components/Paragraph.js"),h=n("./app/components/Title.js"),p=n("./node_modules/gsap/index.js"),f=n("./node_modules/gsap/CustomEase.js"),m=n("./app/constants/animations.js");class g extends((0,r.withResponsiveOptions)((0,i.withScrolledInView)((0,s.withIntersectionObserver)(a.default,{...m.ANIMATIONS.intersectionObserver}),{rootMargin:"100%"}))){static config={...a.default.config,name:"Work",refs:[...a.default.config.refs,"cover","text","index"],options:{rotate:{type:Number,default:5},translateY:{type:Number,default:-250,responsive:!0}},components:{Title:h.default,Paragraph:d.default,SVGReveal:l.default}};titleTitleComponent=null;isVisible=!1;scrollProgressY=0;textEase=f.default.create("custom","M0,0 C0,0.134 -0.018,0.502 0.28,0.502 0.392,0.502 0.358,0.502 0.498,0.502 0.626,0.502 0.574,0.502 0.688,0.502 0.994,0.502 0.83,1 1,1");mounted(){super.mounted(),[this.titleTitleComponent]=this.$children.Title,this.indexParagraphComponent=(0,o.default)(this.$refs.index,d.default),this.titleTitleComponent.onAnimateInComplete=this.indexParagraphComponent.animateIn}intersected([{isIntersecting:e}]){if(e&&!this.isVisible){this.isVisible=!0,(0,c.add)(this.$el,"is-visible");for(const e of this.$children.SVGReveal)e.drawStrokes()}}scrolledInView({progress:e}){this.scrollProgressY=e.y}ticked(){const e=(this.scrollProgressY-.5)*this.$options.rotate,t=(this.scrollProgressY-.5)*this.$options.translateY;return()=>{(0,u.default)(this.$refs.cover,{rotate:e}),p.default.set(this.$refs.text,{translateY:t,ease:this.textEase})}}}},"./app/constants/animations.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{ANIMATIONS:()=>r});const r={intersectionObserver:{rootMargin:"0px 0px 0px 0px"}}},"./app/constants/colors.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{COLORS:()=>r});const r={black:"#1C1B1A",blackDark:"#141313",grey:"#ABB0B4",white:"#FFFFFF",brown:"#686158",brownLight:"#DACAB5",beige:"#F5EDE2",beigeLight:"#F9F4ED",blue:"#4185F4",blueLight:"#CCDCF7",green:"#E6FFF5",pink:"#F5DADA",orange:"#FF6C3C"}},"./app/constants/lenis.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{createLenis:()=>i});var r=n("./node_modules/@studio-freight/lenis/dist/lenis.modern.mjs");const i=()=>window.lenis=new r.default({duration:1.2,easing:e=>1===e?1:1-Math.pow(2,-10*e),direction:"vertical",smooth:!0,smoothTouch:!1,touchMultiplier:2})},"./app/containers/AppEvents.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o});var r=n("./node_modules/@studiometa/js-toolkit/Base/index.js"),i=n("./node_modules/@studiometa/js-toolkit/helpers/getInstanceFromElement.js"),s=n("./app/components/Cursor.js");class o extends r.Base{static config={refs:["cursorLink[]","cursorSlider[]"],log:!0};cursor;mounted(){const e=document.querySelector('[data-component="Cursor"]');this.cursor=(0,i.default)(e,s.default)}destroyed(){}onCursorLinkMouseenter(e){this.cursor&&this.cursor.$isMounted&&this.cursor.onEnterLink(e)}onCursorLinkMouseleave(e){this.cursor&&this.cursor.$isMounted&&this.cursor.onLeaveLink(e)}onCursorSliderMouseenter(e){this.cursor&&this.cursor.$isMounted&&this.cursor.onEnterSlider(e)}onCursorSliderMouseleave(e){this.cursor&&this.cursor.$isMounted&&this.cursor.onLeaveSlider(e)}}},"./app/containers/Page.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>s});var r=n("./app/containers/AppEvents.js"),i=n("./node_modules/gsap/index.js");class s extends r.default{static config={...r.default.config,refs:[...r.default.config.refs]};async mounted(){super.mounted(),this.cursor&&this.cursor.enable()}destroyed(){super.destroyed(),this.cursor&&this.cursor.disable()}animateIn(){return new Promise((e=>{i.default.timeline({onComplete:e})}))}animateOut(){return new Promise((e=>{i.default.timeline({onComplete:e})}))}}},"./app/pages/About.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>a});var r=n("./app/containers/Page.js"),i=n("./app/components/ContactMe.js"),s=n("./app/components/Title.js"),o=n("./app/components/SVGReveal.js");class a extends r.default{static config={...r.default.config,name:"About",refs:[...r.default.config.refs],components:{Title:s.default,SVGReveal:o.default,ContactMe:i.default}};title=null;scribble=null;mounted(){[this.title]=this.$children.Title,[this.scribble]=this.$children.SVGReveal,this.title.onAnimateInStart=this.onTitleAnimateInStart.bind(this),this.title.onAnimateInComplete=this.onTitleAnimateInComplete.bind(this)}onTitleAnimateInStart(){const e=this.title.splitText.words[this.title.splitText.words.length-1].getBoundingClientRect(),t=this.scribble.$el.getBoundingClientRect();this.scribble.$el.style.top=e.bottom-t.height/2-10+"px",this.scribble.$el.style.left=e.left-20+"px"}onTitleAnimateInComplete(){this.scribble.drawStrokes({ease:"cubic.out",delay:0})}}},"./app/pages/Home.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>a});var r=n("./app/containers/Page.js"),i=n("./app/components/Work.js"),s=n("./app/components/Footer.js"),o=n("./app/components/HomeHeader.js");class a extends r.default{static config={...r.default.config,name:"Home",refs:[...r.default.config.refs],components:{HomeHeader:o.default,Work:i.default,Footer:s.default}};mounted(){super.mounted()}}},"./app/pages/Project.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>a});var r=n("./app/containers/Page.js"),i=n("./app/components/HorizontalTextImage.js"),s=n("./app/components/Slider.js"),o=n("./app/components/NextProject.js");class a extends r.default{static config={...r.default.config,name:"Project",refs:[...r.default.config.refs,"divider"],components:{Slider:s.default,HorizontalTextImage:i.default,NextProject:o.default}}}},"./app/pages/Projects.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>s});var r=n("./app/containers/Page.js"),i=n("./app/components/Footer.js");n("./app/components/Paragraph.js"),n("./app/components/Title.js");class s extends r.default{static config={...r.default.config,name:"Projects",refs:[...r.default.config.refs],components:{Footer:i.default}}}},"./app/pages/Ui.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>i});var r=n("./app/containers/Page.js");class i extends r.default{static config={...r.default.config,name:"Ui",refs:[...r.default.config.refs]}}},"./app/renderers/DefaultRenderer.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>s});var r=n("./node_modules/@unseenco/taxi/src/taxi.js"),i=n("./app/constants/lenis.js");n("./app/components/Navigation.js");class s extends r.Renderer{initialLoad(){this.wrapper.style.transform="translate3d(0, 101vh, 0)",(0,i.createLenis)()}onEnter(){}onEnterCompleted(){this.wrapper.style.transform=""}onLeave(){}onLeaveCompleted(){this.wrapper.style.transform="translate3d(0, 101vh, 0)",window.lenis.scrollTo(0,{immediate:!0})}}},"./app/renderers/HomeRenderer.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>s});var r=n("./node_modules/@unseenco/taxi/src/taxi.js"),i=n("./app/constants/lenis.js");class s extends r.Renderer{initialLoad(){(0,i.createLenis)()}onEnter(){this.wrapper.style.transform=""}onEnterCompleted(){}onLeave(){}onLeaveCompleted(){this.wrapper.style.transform="translate3d(0, 101vh, 0)",window.lenis.scrollTo(0,{immediate:!0})}}},"./app/transitions/DefaultTransition.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>a});var r=n("./node_modules/@unseenco/taxi/src/taxi.js"),i=n("./node_modules/@studiometa/js-toolkit/helpers/getInstanceFromElement.js"),s=n("./app/components/OverlayTransition.js"),o=n("./app/components/Navigation.js");class a extends r.Transition{preloader=(0,i.default)(document.querySelector("#preloader"),s.default);navigation=(0,i.default)(document.querySelector('[data-component="Navigation"]'),o.default);onLeave({from:e,trigger:t,done:n}){this.preloader.animatePageTransitionIn({onComplete:()=>{this.navigation.setAnim(),n()}})}onEnter({to:e,trigger:t,done:n}){this.preloader.animatePageTransitionOut({onComplete:()=>{this.navigation.animateIn(),window.lenis.scrollTo(1),n()}})}}},"./app/transitions/HomeTransition.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>l});var r=n("./node_modules/@unseenco/taxi/src/taxi.js"),i=n("./node_modules/@studiometa/js-toolkit/helpers/getInstanceFromElement.js"),s=n("./app/components/OverlayTransition.js"),o=n("./app/components/HomeHeader.js"),a=n("./app/components/Navigation.js");class l extends r.Transition{preloader=(0,i.default)(document.querySelector("#preloader"),s.default);header=null;navigation=(0,i.default)(document.querySelector('[data-component="Navigation"]'),a.default);onLeave({from:e,trigger:t,done:n}){this.preloader.animatePageTransitionIn({onComplete:()=>{this.navigation.setAnim(),n()}})}onEnter({to:e,trigger:t,done:n}){this.header=(0,i.default)(document.querySelector('[data-component="HomeHeader"]'),o.default),this.preloader.animatePageTransitionOut({onComplete:()=>{this.navigation.animateIn(),n()}}).call(this.header.animateIn,[!0,.04],"-=0.4")}}},"./app/utils/Svg.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o});var r=n("./node_modules/@studiometa/js-toolkit/utils/math/ease.js"),i=n("./node_modules/@studiometa/js-toolkit/utils/tween.js"),s=n("./node_modules/@studiometa/js-toolkit/utils/math/map.js");class o{static getShapes(e){const t=[],n=e=>{if(e.children.length>0&&[...e.children].forEach((e=>n(e))),!e.hasAttribute("stroke")||e.hasAttribute("data-static-stroke"))return;const r=o.getShapeLength(e);r&&t.push({el:e,length:r})};return n(e),t}static getShapeLength(e){if(!(e instanceof SVGGeometryElement))return null;if(e instanceof SVGPolygonElement)return e.getTotalLength();if(e instanceof SVGPolylineElement)return e.getTotalLength();if(e instanceof SVGCircleElement)return Math.round(2*Math.PI*parseInt(e.getAttribute("r"),10));if(e instanceof SVGRectElement)return Math.round(2*parseInt(e.getAttribute("width"))+2*parseInt(e.getAttribute("height")));if(e instanceof SVGEllipseElement){const t=parseInt(e.getAttribute("rx")),n=parseInt(e.getAttribute("ry")),r=(t-n)**2/(t+n)**2;return Math.PI*(t+n)*(1+3*r/(10+Math.sqrt(4-3*r)))}if(e instanceof SVGLineElement){const t=parseInt(e.getAttribute("x1")),n=parseInt(e.getAttribute("x2")),r=parseInt(e.getAttribute("y1")),i=parseInt(e.getAttribute("y2"));return Math.sqrt((n-t)**2+(i-r)**2)}return e instanceof SVGPathElement?e.getTotalLength():void 0}static setInitialAttributesShapes(e,t=!1){return e.forEach((e=>{e.el.setAttribute("stroke-dasharray",`${e.length} ${e.length}`),e.el.setAttribute("stroke-dashoffset",""+(t?-1:1)*e.length),e.el.setAttribute("data-stroke-length",e.length)})),e}static drawShapes(e,{reverse:t=!1,duration:n=1,easing:a=r.easeOutQuad,onFinish:l=(()=>{}),fromFullDrawn:c=!1}){(0,i.tween)((n=>{t&&(n=(0,s.default)(n,0,1,1,0)),o.setStrokeDashOffsetShapes(e,n,c)}),{duration:n,easing:a,onFinish:l}).start()}static setStrokeDashOffsetShapes(e,t,n=!1){let r=0;for(const i of e)n&&(r=i.length),i.el.setAttribute("stroke-dashoffset",`${i.length*t+r}`)}}},"./app/utils/detector.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{isTouchDevice:()=>r});const r=()=>window.matchMedia("(pointer: coarse)").matches},"./app/utils/dom.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{getInternalLinks:()=>r,imagesRendererObserver:()=>i});const r=()=>[...document.querySelectorAll("a")].filter((e=>{const t=e.href.indexOf(window.location.origin)>-1,n=-1===e.href.indexOf("mailto"),r=-1===e.href.indexOf("tel"),i=e.getAttribute("href"),s=!!i&&i.startsWith("#");return t&&r&&n&&!s})),i=(e=document,t="img")=>{const n=[...e.querySelectorAll(t)].filter((e=>"lazy"!==e.getAttribute("loading")));return Promise.all([...n].map((e=>new Promise((t=>{e.onload=()=>{requestAnimationFrame((()=>{requestAnimationFrame((()=>{document.body.offsetWidth,requestAnimationFrame((()=>{t()}))}))}))},e.onerror=()=>t()})))))}},"./node_modules/@motionone/easing/dist/cubic-bezier.es.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{cubicBezier:()=>s});var r=n("./node_modules/@motionone/utils/dist/noop.es.js");const i=(e,t,n)=>(((1-3*n+3*t)*e+(3*n-6*t))*e+3*t)*e;function s(e,t,n,s){if(e===t&&n===s)return r.noopReturn;const o=t=>function(e,t,n,r,s){let o,a,l=0;do{a=t+(n-t)/2,o=i(a,r,s)-e,o>0?n=a:t=a}while(Math.abs(o)>1e-7&&++l<12);return a}(t,0,1,e,n);return e=>0===e||1===e?e:i(o(e),t,s)}},"./node_modules/@motionone/utils/dist/noop.es.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{noop:()=>r,noopReturn:()=>i});const r=()=>{},i=e=>e},"./node_modules/@unseenco/e/src/e.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>s});var r=n("./node_modules/selector-set/selector-set.next.js"),i=n("./node_modules/@unseenco/e/src/utils.js");const s=new class{bindAll(e,t){t||(t=Object.getOwnPropertyNames(Object.getPrototypeOf(e)));for(let n=0;n<t.length;n++)e[t[n]]=e[t[n]].bind(e)}on(e,t,n,r){const s=e.split(" ");for(let e=0;e<s.length;e++)if("function"!=typeof t||void 0!==n)if(t.nodeType&&1===t.nodeType||t===window||t===document)t.addEventListener(s[e],n,r);else{t=(0,i.maybeRunQuerySelector)(t);for(let i=0;i<t.length;i++)t[i].addEventListener(s[e],n,r)}else(0,i.makeBusStack)(s[e]),i.listeners[s[e]].push(t)}delegate(e,t,n){const s=e.split(" ");for(let e=0;e<s.length;e++){let o=i.eventTypes[s[e]];void 0===o&&(o=new r.default,i.eventTypes[s[e]]=o,-1!==i.nonBubblers.indexOf(s[e])?document.addEventListener(s[e],i.handleDelegation,!0):document.addEventListener(s[e],i.handleDelegation)),o.add(t,n)}}off(e,t,n,r){const s=e.split(" ");for(let e=0;e<s.length;e++){if(void 0===t){i.listeners[s[e]]=[];continue}if("function"==typeof t){(0,i.makeBusStack)(s[e]);for(let n=0;n<i.listeners[s[e]].length;n++)i.listeners[s[e]][n]===t&&i.listeners[s[e]].splice(n,1);continue}const o=i.eventTypes[s[e]];if(void 0===o||(o.remove(t,n),0!==o.size))if(void 0===t.removeEventListener){t=(0,i.maybeRunQuerySelector)(t);for(let i=0;i<t.length;i++)t[i].removeEventListener(s[e],n,r)}else t.removeEventListener(s[e],n,r);else delete i.eventTypes[s[e]],-1!==i.nonBubblers.indexOf(s[e])?document.removeEventListener(s[e],i.handleDelegation,!0):document.removeEventListener(s[e],i.handleDelegation)}}emit(e,...t){(0,i.triggerBus)(e,t)}debugDelegated(){return(0,i.clone)(i.eventTypes)}debugBus(){return(0,i.clone)(i.listeners)}}},"./node_modules/@unseenco/e/src/utils.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{clone:()=>d,eventTypes:()=>r,handleDelegation:()=>c,listeners:()=>i,makeBusStack:()=>o,maybeRunQuerySelector:()=>l,nonBubblers:()=>s,triggerBus:()=>a});const r={},i={},s=["mouseenter","mouseleave","pointerenter","pointerleave","blur","focus"];function o(e){void 0===i[e]&&(i[e]=[])}function a(e,t){if(i[e])for(let n=0;n<i[e].length;n++)i[e][n](...t)}function l(e){return"string"==typeof e?document.querySelectorAll(e):e}function c(e){let t=function(e,t){const n=[];let r=t;do{if(1!==r.nodeType)break;const t=e.matches(r);t.length&&n.push({delegatedTarget:r,stack:t})}while(r=r.parentElement);return n}(r[e.type],e.target);if(t.length)for(let n=0;n<t.length;n++)for(let r=0;r<t[n].stack.length;r++)-1!==s.indexOf(e.type)?(u(e,t[n].delegatedTarget),e.target===t[n].delegatedTarget&&t[n].stack[r].data(e)):(u(e,t[n].delegatedTarget),t[n].stack[r].data(e))}function u(e,t){Object.defineProperty(e,"currentTarget",{configurable:!0,enumerable:!0,get:()=>t})}function d(e){return JSON.parse(JSON.stringify(e))}},"./node_modules/@unseenco/taxi/src/Core.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>c});var r=n("./node_modules/@unseenco/e/src/e.js"),i=n("./node_modules/@unseenco/taxi/src/helpers.js"),s=n("./node_modules/@unseenco/taxi/src/Transition.js"),o=n("./node_modules/@unseenco/taxi/src/Renderer.js"),a=n("./node_modules/@unseenco/taxi/src/RouteStore.js");const l="A transition is currently in progress";class c{isTransitioning=!1;currentCacheEntry=null;cache=new Map;constructor(e={}){const{links:t="a:not([target]):not([href^=\\#]):not([data-taxi-ignore])",removeOldContent:n=!0,allowInterruption:r=!1,bypassCache:a=!1,renderers:l={default:o.default},transitions:c={default:s.default},reloadJsFilter:u=(e=>void 0!==e.dataset.taxiReload)}=e;this.renderers=l,this.transitions=c,this.defaultRenderer=this.renderers.default||o.default,this.defaultTransition=this.transitions.default||s.default,this.wrapper=document.querySelector("[data-taxi]"),this.reloadJsFilter=u,this.removeOldContent=n,this.allowInterruption=r,this.bypassCache=a,this.cache=new Map,this.isPopping=!1,this.attachEvents(t),this.currentLocation=(0,i.processUrl)(window.location.href),this.cache.set(this.currentLocation.href,this.createCacheEntry(document.cloneNode(!0))),this.currentCacheEntry=this.cache.get(this.currentLocation.href),this.currentCacheEntry.renderer.initialLoad()}setDefaultRenderer(e){this.defaultRenderer=this.renderers[e]}setDefaultTransition(e){this.defaultTransition=this.transitions[e]}addRoute(e,t,n){this.router||(this.router=new a.default),this.router.add(e,t,n)}preload(e,t=!1){return e=(0,i.processUrl)(e).href,this.cache.has(e)?Promise.resolve():this.fetch(e,!1).then((async n=>{this.cache.set(e,this.createCacheEntry(n)),t&&this.cache.get(e).renderer.createDom()}))}updateCache(){const e=(0,i.processUrl)(window.location.href).href;this.cache.has(e)&&(this.cache.delete(e),this.cache.set(e,this.createCacheEntry(document.cloneNode(!0))))}clearCache(e){const t=(0,i.processUrl)(e||window.location.href).href;this.cache.has(t)&&this.cache.delete(t)}navigateTo(e,t=!1,n=!1){return new Promise(((r,s)=>{if(!this.allowInterruption&&this.isTransitioning)return void s(new Error(l));this.isTransitioning=!0,this.isPopping=!0,this.targetLocation=(0,i.processUrl)(e),this.popTarget=window.location.href;const o=new(this.chooseTransition(t))({wrapper:this.wrapper});let a;if(this.bypassCache||!this.cache.has(this.targetLocation.href)||this.cache.get(this.targetLocation.href).skipCache){const e=this.fetch(this.targetLocation.raw).then((e=>{this.cache.set(this.targetLocation.href,this.createCacheEntry(e)),this.cache.get(this.targetLocation.href).renderer.createDom()}));a=this.beforeFetch(this.targetLocation,o,n).then((async()=>e.then((async e=>await this.afterFetch(this.targetLocation,o,this.cache.get(this.targetLocation.href),n)))))}else this.cache.get(this.targetLocation.href).renderer.createDom(),a=this.beforeFetch(this.targetLocation,o,n).then((async()=>await this.afterFetch(this.targetLocation,o,this.cache.get(this.targetLocation.href),n)));a.then((()=>{r()}))}))}on(e,t){r.default.on(e,t)}off(e,t){r.default.off(e,t)}beforeFetch(e,t,n){return r.default.emit("NAVIGATE_OUT",{from:this.currentCacheEntry,trigger:n}),new Promise((r=>{this.currentCacheEntry.renderer.leave(t,n,this.removeOldContent).then((()=>{"popstate"!==n&&window.history.pushState({},"",e.raw),r()}))}))}afterFetch(e,t,n,i){return this.currentLocation=e,this.popTarget=this.currentLocation.href,new Promise((e=>{n.renderer.update(),r.default.emit("NAVIGATE_IN",{from:this.currentCacheEntry,to:n,trigger:i}),this.reloadJsFilter&&this.loadScripts(n.scripts),n.renderer.enter(t,i).then((()=>{r.default.emit("NAVIGATE_END",{from:this.currentCacheEntry,to:n,trigger:i}),this.currentCacheEntry=n,this.isTransitioning=!1,this.isPopping=!1,e()}))}))}loadScripts(e){const t=[...e],n=Array.from(document.querySelectorAll("script")).filter(this.reloadJsFilter);for(let e=0;e<n.length;e++)for(let r=0;r<t.length;r++)if(n[e].outerHTML===t[r].outerHTML){(0,i.reloadScript)(n[e]),t.splice(r,1);break}for(const e of t)(0,i.appendScript)(e)}attachEvents(e){r.default.delegate("click",e,this.onClick),r.default.on("popstate",window,this.onPopstate)}onClick=e=>{if(!e.metaKey&&!e.ctrlKey){const t=(0,i.processUrl)(e.currentTarget.href);if(this.currentLocation=(0,i.processUrl)(window.location.href),this.currentLocation.host!==t.host)return;if(this.currentLocation.href!==t.href||this.currentLocation.hasHash&&!t.hasHash)return e.preventDefault(),void this.navigateTo(t.raw,e.currentTarget.dataset.transition||!1,e.currentTarget).catch((e=>console.warn(e)));this.currentLocation.hasHash||t.hasHash||e.preventDefault()}};onPopstate=()=>!(window.location.pathname===this.currentLocation.pathname&&!this.isPopping)&&(this.allowInterruption||!this.isTransitioning&&!this.isPopping?(this.isPopping||(this.popTarget=window.location.href),this.isPopping=!0,void this.navigateTo(window.location.href,!1,"popstate")):(window.history.pushState({},"",this.popTarget),console.warn(l),!1));fetch(e,t=!0){return new Promise(((n,r)=>{fetch(e,{mode:"same-origin",method:"GET",headers:{"X-Requested-With":"Taxi"},credentials:"same-origin"}).then((n=>(n.ok||(r("Taxi encountered a non 2xx HTTP status code"),t&&(window.location.href=e)),n.text()))).then((e=>{n((0,i.parseDom)(e))})).catch((n=>{r(n),t&&(window.location.href=e)}))}))}chooseTransition(e){if(e)return this.transitions[e];const t=this.router?.findMatch(this.currentLocation,this.targetLocation);return t?this.transitions[t]:this.defaultTransition}createCacheEntry(e){const t=e.querySelector("[data-taxi-view]"),n=t.dataset.taxiView.length?this.renderers[t.dataset.taxiView]:this.defaultRenderer;return{page:e,content:t,skipCache:t.hasAttribute("data-taxi-nocache"),scripts:this.reloadJsFilter?Array.from(e.querySelectorAll("script")).filter(this.reloadJsFilter):[],title:e.title,renderer:new n({wrapper:this.wrapper,title:e.title,content:t,page:e})}}}},"./node_modules/@unseenco/taxi/src/Renderer.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>r});n("./node_modules/@unseenco/taxi/src/Transition.js");class r{constructor({content:e,page:t,title:n,wrapper:r}){this._contentString=e.outerHTML,this._DOM=null,this.page=t,this.title=n,this.wrapper=r,this.content=this.wrapper.lastElementChild}onEnter(){}onEnterCompleted(){}onLeave(){}onLeaveCompleted(){}initialLoad(){this.onEnter(),this.onEnterCompleted()}update(){document.title=this.title,this.wrapper.appendChild(this._DOM.firstElementChild),this.content=this.wrapper.lastElementChild,this._DOM=null}createDom(){this._DOM||(this._DOM=document.createElement("div"),this._DOM.innerHTML=this._contentString)}remove(){this.wrapper.firstElementChild.remove()}enter(e,t){return new Promise((n=>{this.onEnter(),e.enter({trigger:t,to:this.content}).then((()=>{this.onEnterCompleted(),n()}))}))}leave(e,t,n){return new Promise((r=>{this.onLeave(),e.leave({trigger:t,from:this.content}).then((()=>{n&&this.remove(),this.onLeaveCompleted(),r()}))}))}}},"./node_modules/@unseenco/taxi/src/RouteStore.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>r});class r{data=new Map;regexCache=new Map;add(e,t,n){this.data.has(e)||(this.data.set(e,new Map),this.regexCache.set(e,new RegExp(`^${e}$`))),this.data.get(e).set(t,n),this.regexCache.set(t,new RegExp(`^${t}$`))}findMatch(e,t){for(const[n,r]of this.data)if(e.pathname.match(this.regexCache.get(n))){for(const[e,n]of r)if(t.pathname.match(this.regexCache.get(e)))return n;break}return null}}},"./node_modules/@unseenco/taxi/src/Transition.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>r});class r{constructor({wrapper:e}){this.wrapper=e}leave(e){return new Promise((t=>{this.onLeave({...e,done:t})}))}enter(e){return new Promise((t=>{this.onEnter({...e,done:t})}))}onLeave({from:e,trigger:t,done:n}){n()}onEnter({to:e,trigger:t,done:n}){n()}}},"./node_modules/@unseenco/taxi/src/helpers.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{appendScript:()=>a,duplicateScript:()=>l,parseDom:()=>i,processUrl:()=>s,reloadScript:()=>o});const r=new DOMParser;function i(e){return"string"==typeof e?r.parseFromString(e,"text/html"):e}function s(e){const t=new URL(e,window.location.origin);let n=null;return t.hash.length&&(n=e.replace(t.hash,"")),{hasHash:t.hash.length>0,pathname:t.pathname,host:t.host,raw:e,href:n||t.href}}function o(e){e.parentNode.replaceChild(l(e),e)}function a(e){"HEAD"===e.parentNode.tagName?document.head.appendChild(l(e)):document.body.appendChild(l(e))}function l(e){const t=document.createElement("SCRIPT");for(let n=0;n<e.attributes.length;n++){const r=e.attributes[n];t.setAttribute(r.nodeName,r.nodeValue)}return e.innerHTML&&(t.innerHTML=e.innerHTML),t}},"./node_modules/@unseenco/taxi/src/taxi.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{Core:()=>r.default,Renderer:()=>i.default,Transition:()=>s.default});var r=n("./node_modules/@unseenco/taxi/src/Core.js"),i=n("./node_modules/@unseenco/taxi/src/Renderer.js"),s=n("./node_modules/@unseenco/taxi/src/Transition.js")},"./node_modules/ansi-html-community/index.js":e=>{"use strict";e.exports=o;var t=/(?:(?:\u001b\[)|\u009b)(?:(?:[0-9]{1,3})?(?:(?:;[0-9]{0,3})*)?[A-M|f-m])|\u001b[A-M]/,n={reset:["fff","000"],black:"000",red:"ff0000",green:"209805",yellow:"e8bf03",blue:"0000ff",magenta:"ff00ff",cyan:"00ffee",lightgrey:"f0f0f0",darkgrey:"888"},r={30:"black",31:"red",32:"green",33:"yellow",34:"blue",35:"magenta",36:"cyan",37:"lightgrey"},i={1:"font-weight:bold",2:"opacity:0.5",3:"<i>",4:"<u>",8:"display:none",9:"<del>"},s={23:"</i>",24:"</u>",29:"</del>"};function o(e){if(!t.test(e))return e;var n=[],r=e.replace(/\033\[(\d+)m/g,(function(e,t){var r=i[t];if(r)return~n.indexOf(t)?(n.pop(),"</span>"):(n.push(t),"<"===r[0]?r:'<span style="'+r+';">');var o=s[t];return o?(n.pop(),o):""})),o=n.length;return o>0&&(r+=Array(o+1).join("</span>")),r}function a(e){for(var t in i[0]="font-weight:normal;opacity:1;color:#"+e.reset[0]+";background:#"+e.reset[1],i[7]="color:#"+e.reset[1]+";background:#"+e.reset[0],i[90]="color:#"+e.darkgrey,r){var n=e[r[t]]||"000";i[t]="color:#"+n,t=parseInt(t),i[(t+10).toString()]="background:#"+n}}[0,21,22,27,28,39,49].forEach((function(e){s[e]="</span>"})),o.setColors=function(e){if("object"!=typeof e)throw new Error("`colors` parameter must be an Object.");var t={};for(var r in n){var i=e.hasOwnProperty(r)?e[r]:null;if(i){if("reset"===r){if("string"==typeof i&&(i=[i]),!Array.isArray(i)||0===i.length||i.some((function(e){return"string"!=typeof e})))throw new Error("The value of `"+r+"` property must be an Array and each item could only be a hex string, e.g.: FF0000");var s=n[r];i[0]||(i[0]=s[0]),1!==i.length&&i[1]||(i=[i[0]]).push(s[1]),i=i.slice(0,2)}else if("string"!=typeof i)throw new Error("The value of `"+r+"` property must be a hex string, e.g.: FF0000");t[r]=i}else t[r]=n[r]}a(t)},o.reset=function(){a(n)},o.tags={},Object.defineProperty?(Object.defineProperty(o.tags,"open",{get:function(){return i}}),Object.defineProperty(o.tags,"close",{get:function(){return s}})):(o.tags.open=i,o.tags.close=s),o.reset()},"./node_modules/deepmerge/dist/cjs.js":e=>{"use strict";var t=function(e){return function(e){return!!e&&"object"==typeof e}(e)&&!function(e){var t=Object.prototype.toString.call(e);return"[object RegExp]"===t||"[object Date]"===t||function(e){return e.$$typeof===n}(e)}(e)};var n="function"==typeof Symbol&&Symbol.for?Symbol.for("react.element"):60103;function r(e,t){return!1!==t.clone&&t.isMergeableObject(e)?l((n=e,Array.isArray(n)?[]:{}),e,t):e;var n}function i(e,t,n){return e.concat(t).map((function(e){return r(e,n)}))}function s(e){return Object.keys(e).concat(function(e){return Object.getOwnPropertySymbols?Object.getOwnPropertySymbols(e).filter((function(t){return e.propertyIsEnumerable(t)})):[]}(e))}function o(e,t){try{return t in e}catch(e){return!1}}function a(e,t,n){var i={};return n.isMergeableObject(e)&&s(e).forEach((function(t){i[t]=r(e[t],n)})),s(t).forEach((function(s){(function(e,t){return o(e,t)&&!(Object.hasOwnProperty.call(e,t)&&Object.propertyIsEnumerable.call(e,t))})(e,s)||(o(e,s)&&n.isMergeableObject(t[s])?i[s]=function(e,t){if(!t.customMerge)return l;var n=t.customMerge(e);return"function"==typeof n?n:l}(s,n)(e[s],t[s],n):i[s]=r(t[s],n))})),i}function l(e,n,s){(s=s||{}).arrayMerge=s.arrayMerge||i,s.isMergeableObject=s.isMergeableObject||t,s.cloneUnlessOtherwiseSpecified=r;var o=Array.isArray(n);return o===Array.isArray(e)?o?s.arrayMerge(e,n,s):a(e,n,s):r(n,s)}l.all=function(e,t){if(!Array.isArray(e))throw new Error("first argument should be an array");return e.reduce((function(e,n){return l(e,n,t)}),{})};var c=l;e.exports=c},"./node_modules/events/events.js":e=>{"use strict";var t,n="object"==typeof Reflect?Reflect:null,r=n&&"function"==typeof n.apply?n.apply:function(e,t,n){return Function.prototype.apply.call(e,t,n)};t=n&&"function"==typeof n.ownKeys?n.ownKeys:Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.getOwnPropertyNames(e)};var i=Number.isNaN||function(e){return e!=e};function s(){s.init.call(this)}e.exports=s,e.exports.once=function(e,t){return new Promise((function(n,r){function i(n){e.removeListener(t,s),r(n)}function s(){"function"==typeof e.removeListener&&e.removeListener("error",i),n([].slice.call(arguments))}m(e,t,s,{once:!0}),"error"!==t&&function(e,t,n){"function"==typeof e.on&&m(e,"error",t,n)}(e,i,{once:!0})}))},s.EventEmitter=s,s.prototype._events=void 0,s.prototype._eventsCount=0,s.prototype._maxListeners=void 0;var o=10;function a(e){if("function"!=typeof e)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof e)}function l(e){return void 0===e._maxListeners?s.defaultMaxListeners:e._maxListeners}function c(e,t,n,r){var i,s,o,c;if(a(n),void 0===(s=e._events)?(s=e._events=Object.create(null),e._eventsCount=0):(void 0!==s.newListener&&(e.emit("newListener",t,n.listener?n.listener:n),s=e._events),o=s[t]),void 0===o)o=s[t]=n,++e._eventsCount;else if("function"==typeof o?o=s[t]=r?[n,o]:[o,n]:r?o.unshift(n):o.push(n),(i=l(e))>0&&o.length>i&&!o.warned){o.warned=!0;var u=new Error("Possible EventEmitter memory leak detected. "+o.length+" "+String(t)+" listeners added. Use emitter.setMaxListeners() to increase limit");u.name="MaxListenersExceededWarning",u.emitter=e,u.type=t,u.count=o.length,c=u,console&&console.warn&&console.warn(c)}return e}function u(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,0===arguments.length?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function d(e,t,n){var r={fired:!1,wrapFn:void 0,target:e,type:t,listener:n},i=u.bind(r);return i.listener=n,r.wrapFn=i,i}function h(e,t,n){var r=e._events;if(void 0===r)return[];var i=r[t];return void 0===i?[]:"function"==typeof i?n?[i.listener||i]:[i]:n?function(e){for(var t=new Array(e.length),n=0;n<t.length;++n)t[n]=e[n].listener||e[n];return t}(i):f(i,i.length)}function p(e){var t=this._events;if(void 0!==t){var n=t[e];if("function"==typeof n)return 1;if(void 0!==n)return n.length}return 0}function f(e,t){for(var n=new Array(t),r=0;r<t;++r)n[r]=e[r];return n}function m(e,t,n,r){if("function"==typeof e.on)r.once?e.once(t,n):e.on(t,n);else{if("function"!=typeof e.addEventListener)throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type '+typeof e);e.addEventListener(t,(function i(s){r.once&&e.removeEventListener(t,i),n(s)}))}}Object.defineProperty(s,"defaultMaxListeners",{enumerable:!0,get:function(){return o},set:function(e){if("number"!=typeof e||e<0||i(e))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+e+".");o=e}}),s.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},s.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||i(e))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+e+".");return this._maxListeners=e,this},s.prototype.getMaxListeners=function(){return l(this)},s.prototype.emit=function(e){for(var t=[],n=1;n<arguments.length;n++)t.push(arguments[n]);var i="error"===e,s=this._events;if(void 0!==s)i=i&&void 0===s.error;else if(!i)return!1;if(i){var o;if(t.length>0&&(o=t[0]),o instanceof Error)throw o;var a=new Error("Unhandled error."+(o?" ("+o.message+")":""));throw a.context=o,a}var l=s[e];if(void 0===l)return!1;if("function"==typeof l)r(l,this,t);else{var c=l.length,u=f(l,c);for(n=0;n<c;++n)r(u[n],this,t)}return!0},s.prototype.addListener=function(e,t){return c(this,e,t,!1)},s.prototype.on=s.prototype.addListener,s.prototype.prependListener=function(e,t){return c(this,e,t,!0)},s.prototype.once=function(e,t){return a(t),this.on(e,d(this,e,t)),this},s.prototype.prependOnceListener=function(e,t){return a(t),this.prependListener(e,d(this,e,t)),this},s.prototype.removeListener=function(e,t){var n,r,i,s,o;if(a(t),void 0===(r=this._events))return this;if(void 0===(n=r[e]))return this;if(n===t||n.listener===t)0==--this._eventsCount?this._events=Object.create(null):(delete r[e],r.removeListener&&this.emit("removeListener",e,n.listener||t));else if("function"!=typeof n){for(i=-1,s=n.length-1;s>=0;s--)if(n[s]===t||n[s].listener===t){o=n[s].listener,i=s;break}if(i<0)return this;0===i?n.shift():function(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}(n,i),1===n.length&&(r[e]=n[0]),void 0!==r.removeListener&&this.emit("removeListener",e,o||t)}return this},s.prototype.off=s.prototype.removeListener,s.prototype.removeAllListeners=function(e){var t,n,r;if(void 0===(n=this._events))return this;if(void 0===n.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==n[e]&&(0==--this._eventsCount?this._events=Object.create(null):delete n[e]),this;if(0===arguments.length){var i,s=Object.keys(n);for(r=0;r<s.length;++r)"removeListener"!==(i=s[r])&&this.removeAllListeners(i);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(t=n[e]))this.removeListener(e,t);else if(void 0!==t)for(r=t.length-1;r>=0;r--)this.removeListener(e,t[r]);return this},s.prototype.listeners=function(e){return h(this,e,!0)},s.prototype.rawListeners=function(e){return h(this,e,!1)},s.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):p.call(e,t)},s.prototype.listenerCount=p,s.prototype.eventNames=function(){return this._eventsCount>0?t(this._events):[]}},"./node_modules/gsap/CSSPlugin.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{CSSPlugin:()=>ke,_createElement:()=>N,_getBBox:()=>H,checkPrefix:()=>F,default:()=>ke});var r,i,s,o,a,l,c,u,d=n("./node_modules/gsap/gsap-core.js"),h={},p=180/Math.PI,f=Math.PI/180,m=Math.atan2,g=/([A-Z])/g,v=/(left|right|width|margin|padding|x)/i,y=/[\s,\(]\S/,b={autoAlpha:"opacity,visibility",scale:"scaleX,scaleY",alpha:"opacity"},w=function(e,t){return t.set(t.t,t.p,Math.round(1e4*(t.s+t.c*e))/1e4+t.u,t)},_=function(e,t){return t.set(t.t,t.p,1===e?t.e:Math.round(1e4*(t.s+t.c*e))/1e4+t.u,t)},x=function(e,t){return t.set(t.t,t.p,e?Math.round(1e4*(t.s+t.c*e))/1e4+t.u:t.b,t)},S=function(e,t){var n=t.s+t.c*e;t.set(t.t,t.p,~~(n+(n<0?-.5:.5))+t.u,t)},k=function(e,t){return t.set(t.t,t.p,e?t.e:t.b,t)},j=function(e,t){return t.set(t.t,t.p,1!==e?t.b:t.e,t)},C=function(e,t,n){return e.style[t]=n},E=function(e,t,n){return e.style.setProperty(t,n)},T=function(e,t,n){return e._gsap[t]=n},A=function(e,t,n){return e._gsap.scaleX=e._gsap.scaleY=n},O=function(e,t,n,r,i){var s=e._gsap;s.scaleX=s.scaleY=n,s.renderTransform(i,s)},P=function(e,t,n,r,i){var s=e._gsap;s[t]=n,s.renderTransform(i,s)},M="transform",L=M+"Origin",I=function(e,t){var n=this,r=this.target,i=r.style;if(e in h){if(this.tfm=this.tfm||{},"transform"!==e&&(~(e=b[e]||e).indexOf(",")?e.split(",").forEach((function(e){return n.tfm[e]=Z(r,e)})):this.tfm[e]=r._gsap.x?r._gsap[e]:Z(r,e)),this.props.indexOf(M)>=0)return;r._gsap.svg&&(this.svgo=r.getAttribute("data-svg-origin"),this.props.push(L,t,"")),e=M}(i||t)&&this.props.push(e,t,i[e])},R=function(e){e.translate&&(e.removeProperty("translate"),e.removeProperty("scale"),e.removeProperty("rotate"))},$=function(){var e,t,n=this.props,r=this.target,i=r.style,s=r._gsap;for(e=0;e<n.length;e+=3)n[e+1]?r[n[e]]=n[e+2]:n[e+2]?i[n[e]]=n[e+2]:i.removeProperty(n[e].replace(g,"-$1").toLowerCase());if(this.tfm){for(t in this.tfm)s[t]=this.tfm[t];s.svg&&(s.renderTransform(),r.setAttribute("data-svg-origin",this.svgo||"")),!(e=c())||e.isStart||i[M]||(R(i),s.uncache=1)}},D=function(e,t){var n={target:e,props:[],revert:$,save:I};return t&&t.split(",").forEach((function(e){return n.save(e)})),n},N=function(e,t){var n=i.createElementNS?i.createElementNS((t||"http://www.w3.org/1999/xhtml").replace(/^https/,"http"),e):i.createElement(e);return n.style?n:i.createElement(e)},B=function e(t,n,r){var i=getComputedStyle(t);return i[n]||i.getPropertyValue(n.replace(g,"-$1").toLowerCase())||i.getPropertyValue(n)||!r&&e(t,F(n)||n,1)||""},q="O,Moz,ms,Ms,Webkit".split(","),F=function(e,t,n){var r=(t||a).style,i=5;if(e in r&&!n)return e;for(e=e.charAt(0).toUpperCase()+e.substr(1);i--&&!(q[i]+e in r););return i<0?null:(3===i?"ms":i>=0?q[i]:"")+e},V=function(){"undefined"!=typeof window&&window.document&&(r=window,i=r.document,s=i.documentElement,a=N("div")||{style:{}},N("div"),M=F(M),L=M+"Origin",a.style.cssText="border-width:0;line-height:0;position:absolute;padding:0",u=!!F("perspective"),c=d.gsap.core.reverting,o=1)},U=function e(t){var n,r=N("svg",this.ownerSVGElement&&this.ownerSVGElement.getAttribute("xmlns")||"http://www.w3.org/2000/svg"),i=this.parentNode,o=this.nextSibling,a=this.style.cssText;if(s.appendChild(r),r.appendChild(this),this.style.display="block",t)try{n=this.getBBox(),this._gsapBBox=this.getBBox,this.getBBox=e}catch(e){}else this._gsapBBox&&(n=this._gsapBBox());return i&&(o?i.insertBefore(this,o):i.appendChild(this)),s.removeChild(r),this.style.cssText=a,n},W=function(e,t){for(var n=t.length;n--;)if(e.hasAttribute(t[n]))return e.getAttribute(t[n])},H=function(e){var t;try{t=e.getBBox()}catch(n){t=U.call(e,!0)}return t&&(t.width||t.height)||e.getBBox===U||(t=U.call(e,!0)),!t||t.width||t.x||t.y?t:{x:+W(e,["x","cx","x1"])||0,y:+W(e,["y","cy","y1"])||0,width:0,height:0}},z=function(e){return!(!e.getCTM||e.parentNode&&!e.ownerSVGElement||!H(e))},X=function(e,t){if(t){var n=e.style;t in h&&t!==L&&(t=M),n.removeProperty?("ms"!==t.substr(0,2)&&"webkit"!==t.substr(0,6)||(t="-"+t),n.removeProperty(t.replace(g,"-$1").toLowerCase())):n.removeAttribute(t)}},G=function(e,t,n,r,i,s){var o=new d.PropTween(e._pt,t,n,0,1,s?j:k);return e._pt=o,o.b=r,o.e=i,e._props.push(n),o},Y={deg:1,rad:1,turn:1},J={grid:1,flex:1},Q=function e(t,n,r,s){var o,l,c,u,p=parseFloat(r)||0,f=(r+"").trim().substr((p+"").length)||"px",m=a.style,g=v.test(n),y="svg"===t.tagName.toLowerCase(),b=(y?"client":"offset")+(g?"Width":"Height"),w=100,_="px"===s,x="%"===s;return s===f||!p||Y[s]||Y[f]?p:("px"!==f&&!_&&(p=e(t,n,r,"px")),u=t.getCTM&&z(t),!x&&"%"!==f||!h[n]&&!~n.indexOf("adius")?(m[g?"width":"height"]=w+(_?f:s),l=~n.indexOf("adius")||"em"===s&&t.appendChild&&!y?t:t.parentNode,u&&(l=(t.ownerSVGElement||{}).parentNode),l&&l!==i&&l.appendChild||(l=i.body),(c=l._gsap)&&x&&c.width&&g&&c.time===d._ticker.time&&!c.uncache?(0,d._round)(p/c.width*w):((x||"%"===f)&&!J[B(l,"display")]&&(m.position=B(t,"position")),l===t&&(m.position="static"),l.appendChild(a),o=a[b],l.removeChild(a),m.position="absolute",g&&x&&((c=(0,d._getCache)(l)).time=d._ticker.time,c.width=l[b]),(0,d._round)(_?o*p/w:o&&p?w/o*p:0))):(o=u?t.getBBox()[g?"width":"height"]:t[b],(0,d._round)(x?p/o*w:p/100*o)))},Z=function(e,t,n,r){var i;return o||V(),t in b&&"transform"!==t&&~(t=b[t]).indexOf(",")&&(t=t.split(",")[0]),h[t]&&"transform"!==t?(i=ce(e,r),i="transformOrigin"!==t?i[t]:i.svg?i.origin:ue(B(e,L))+" "+i.zOrigin+"px"):(!(i=e.style[t])||"auto"===i||r||~(i+"").indexOf("calc("))&&(i=ne[t]&&ne[t](e,t,n)||B(e,t)||(0,d._getProperty)(e,t)||("opacity"===t?1:0)),n&&!~(i+"").trim().indexOf(" ")?Q(e,t,i,n)+n:i},K=function(e,t,n,r){if(!n||"none"===n){var i=F(t,e,1),s=i&&B(e,i,1);s&&s!==n?(t=i,n=s):"borderColor"===t&&(n=B(e,"borderTopColor"))}var o,a,l,c,u,h,p,f,m,g,v,y=new d.PropTween(this._pt,e.style,t,0,1,d._renderComplexString),b=0,w=0;if(y.b=n,y.e=r,n+="","auto"===(r+="")&&(e.style[t]=r,r=B(e,t)||r,e.style[t]=n),o=[n,r],(0,d._colorStringFilter)(o),r=o[1],l=(n=o[0]).match(d._numWithUnitExp)||[],(r.match(d._numWithUnitExp)||[]).length){for(;a=d._numWithUnitExp.exec(r);)p=a[0],m=r.substring(b,a.index),u?u=(u+1)%5:"rgba("!==m.substr(-5)&&"hsla("!==m.substr(-5)||(u=1),p!==(h=l[w++]||"")&&(c=parseFloat(h)||0,v=h.substr((c+"").length),"="===p.charAt(1)&&(p=(0,d._parseRelative)(c,p)+v),f=parseFloat(p),g=p.substr((f+"").length),b=d._numWithUnitExp.lastIndex-g.length,g||(g=g||d._config.units[t]||v,b===r.length&&(r+=g,y.e+=g)),v!==g&&(c=Q(e,t,h,g)||0),y._pt={_next:y._pt,p:m||1===w?m:",",s:c,c:f-c,m:u&&u<4||"zIndex"===t?Math.round:0});y.c=b<r.length?r.substring(b,r.length):""}else y.r="display"===t&&"none"===r?j:k;return d._relExp.test(r)&&(y.e=0),this._pt=y,y},ee={top:"0%",bottom:"100%",left:"0%",right:"100%",center:"50%"},te=function(e,t){if(t.tween&&t.tween._time===t.tween._dur){var n,r,i,s=t.t,o=s.style,a=t.u,l=s._gsap;if("all"===a||!0===a)o.cssText="",r=1;else for(i=(a=a.split(",")).length;--i>-1;)n=a[i],h[n]&&(r=1,n="transformOrigin"===n?L:M),X(s,n);r&&(X(s,M),l&&(l.svg&&s.removeAttribute("transform"),ce(s,1),l.uncache=1,R(o)))}},ne={clearProps:function(e,t,n,r,i){if("isFromStart"!==i.data){var s=e._pt=new d.PropTween(e._pt,t,n,0,0,te);return s.u=r,s.pr=-10,s.tween=i,e._props.push(n),1}}},re=[1,0,0,1,0,0],ie={},se=function(e){return"matrix(1, 0, 0, 1, 0, 0)"===e||"none"===e||!e},oe=function(e){var t=B(e,M);return se(t)?re:t.substr(7).match(d._numExp).map(d._round)},ae=function(e,t){var n,r,i,o,a=e._gsap||(0,d._getCache)(e),l=e.style,c=oe(e);return a.svg&&e.getAttribute("transform")?"1,0,0,1,0,0"===(c=[(i=e.transform.baseVal.consolidate().matrix).a,i.b,i.c,i.d,i.e,i.f]).join(",")?re:c:(c!==re||e.offsetParent||e===s||a.svg||(i=l.display,l.display="block",(n=e.parentNode)&&e.offsetParent||(o=1,r=e.nextElementSibling,s.appendChild(e)),c=oe(e),i?l.display=i:X(e,"display"),o&&(r?n.insertBefore(e,r):n?n.appendChild(e):s.removeChild(e))),t&&c.length>6?[c[0],c[1],c[4],c[5],c[12],c[13]]:c)},le=function(e,t,n,r,i,s){var o,a,l,c=e._gsap,u=i||ae(e,!0),d=c.xOrigin||0,h=c.yOrigin||0,p=c.xOffset||0,f=c.yOffset||0,m=u[0],g=u[1],v=u[2],y=u[3],b=u[4],w=u[5],_=t.split(" "),x=parseFloat(_[0])||0,S=parseFloat(_[1])||0;n?u!==re&&(a=m*y-g*v)&&(l=x*(-g/a)+S*(m/a)-(m*w-g*b)/a,x=x*(y/a)+S*(-v/a)+(v*w-y*b)/a,S=l):(x=(o=H(e)).x+(~_[0].indexOf("%")?x/100*o.width:x),S=o.y+(~(_[1]||_[0]).indexOf("%")?S/100*o.height:S)),r||!1!==r&&c.smooth?(b=x-d,w=S-h,c.xOffset=p+(b*m+w*v)-b,c.yOffset=f+(b*g+w*y)-w):c.xOffset=c.yOffset=0,c.xOrigin=x,c.yOrigin=S,c.smooth=!!r,c.origin=t,c.originIsAbsolute=!!n,e.style[L]="0px 0px",s&&(G(s,c,"xOrigin",d,x),G(s,c,"yOrigin",h,S),G(s,c,"xOffset",p,c.xOffset),G(s,c,"yOffset",f,c.yOffset)),e.setAttribute("data-svg-origin",x+" "+S)},ce=function(e,t){var n=e._gsap||new d.GSCache(e);if("x"in n&&!t&&!n.uncache)return n;var r,i,s,o,a,l,c,h,g,v,y,b,w,_,x,S,k,j,C,E,T,A,O,P,I,R,$,D,N,q,F,V,U=e.style,W=n.scaleX<0,H="px",X="deg",G=getComputedStyle(e),Y=B(e,L)||"0";return r=i=s=l=c=h=g=v=y=0,o=a=1,n.svg=!(!e.getCTM||!z(e)),G.translate&&("none"===G.translate&&"none"===G.scale&&"none"===G.rotate||(U[M]=("none"!==G.translate?"translate3d("+(G.translate+" 0 0").split(" ").slice(0,3).join(", ")+") ":"")+("none"!==G.rotate?"rotate("+G.rotate+") ":"")+("none"!==G.scale?"scale("+G.scale.split(" ").join(",")+") ":"")+("none"!==G[M]?G[M]:"")),U.scale=U.rotate=U.translate="none"),_=ae(e,n.svg),n.svg&&(n.uncache?(I=e.getBBox(),Y=n.xOrigin-I.x+"px "+(n.yOrigin-I.y)+"px",P=""):P=!t&&e.getAttribute("data-svg-origin"),le(e,P||Y,!!P||n.originIsAbsolute,!1!==n.smooth,_)),b=n.xOrigin||0,w=n.yOrigin||0,_!==re&&(j=_[0],C=_[1],E=_[2],T=_[3],r=A=_[4],i=O=_[5],6===_.length?(o=Math.sqrt(j*j+C*C),a=Math.sqrt(T*T+E*E),l=j||C?m(C,j)*p:0,(g=E||T?m(E,T)*p+l:0)&&(a*=Math.abs(Math.cos(g*f))),n.svg&&(r-=b-(b*j+w*E),i-=w-(b*C+w*T))):(V=_[6],q=_[7],$=_[8],D=_[9],N=_[10],F=_[11],r=_[12],i=_[13],s=_[14],c=(x=m(V,N))*p,x&&(P=A*(S=Math.cos(-x))+$*(k=Math.sin(-x)),I=O*S+D*k,R=V*S+N*k,$=A*-k+$*S,D=O*-k+D*S,N=V*-k+N*S,F=q*-k+F*S,A=P,O=I,V=R),h=(x=m(-E,N))*p,x&&(S=Math.cos(-x),F=T*(k=Math.sin(-x))+F*S,j=P=j*S-$*k,C=I=C*S-D*k,E=R=E*S-N*k),l=(x=m(C,j))*p,x&&(P=j*(S=Math.cos(x))+C*(k=Math.sin(x)),I=A*S+O*k,C=C*S-j*k,O=O*S-A*k,j=P,A=I),c&&Math.abs(c)+Math.abs(l)>359.9&&(c=l=0,h=180-h),o=(0,d._round)(Math.sqrt(j*j+C*C+E*E)),a=(0,d._round)(Math.sqrt(O*O+V*V)),x=m(A,O),g=Math.abs(x)>2e-4?x*p:0,y=F?1/(F<0?-F:F):0),n.svg&&(P=e.getAttribute("transform"),n.forceCSS=e.setAttribute("transform","")||!se(B(e,M)),P&&e.setAttribute("transform",P))),Math.abs(g)>90&&Math.abs(g)<270&&(W?(o*=-1,g+=l<=0?180:-180,l+=l<=0?180:-180):(a*=-1,g+=g<=0?180:-180)),t=t||n.uncache,n.x=r-((n.xPercent=r&&(!t&&n.xPercent||(Math.round(e.offsetWidth/2)===Math.round(-r)?-50:0)))?e.offsetWidth*n.xPercent/100:0)+H,n.y=i-((n.yPercent=i&&(!t&&n.yPercent||(Math.round(e.offsetHeight/2)===Math.round(-i)?-50:0)))?e.offsetHeight*n.yPercent/100:0)+H,n.z=s+H,n.scaleX=(0,d._round)(o),n.scaleY=(0,d._round)(a),n.rotation=(0,d._round)(l)+X,n.rotationX=(0,d._round)(c)+X,n.rotationY=(0,d._round)(h)+X,n.skewX=g+X,n.skewY=v+X,n.transformPerspective=y+H,(n.zOrigin=parseFloat(Y.split(" ")[2])||0)&&(U[L]=ue(Y)),n.xOffset=n.yOffset=0,n.force3D=d._config.force3D,n.renderTransform=n.svg?ve:u?ge:he,n.uncache=0,n},ue=function(e){return(e=e.split(" "))[0]+" "+e[1]},de=function(e,t,n){var r=(0,d.getUnit)(t);return(0,d._round)(parseFloat(t)+parseFloat(Q(e,"x",n+"px",r)))+r},he=function(e,t){t.z="0px",t.rotationY=t.rotationX="0deg",t.force3D=0,ge(e,t)},pe="0deg",fe="0px",me=") ",ge=function(e,t){var n=t||this,r=n.xPercent,i=n.yPercent,s=n.x,o=n.y,a=n.z,l=n.rotation,c=n.rotationY,u=n.rotationX,d=n.skewX,h=n.skewY,p=n.scaleX,m=n.scaleY,g=n.transformPerspective,v=n.force3D,y=n.target,b=n.zOrigin,w="",_="auto"===v&&e&&1!==e||!0===v;if(b&&(u!==pe||c!==pe)){var x,S=parseFloat(c)*f,k=Math.sin(S),j=Math.cos(S);S=parseFloat(u)*f,x=Math.cos(S),s=de(y,s,k*x*-b),o=de(y,o,-Math.sin(S)*-b),a=de(y,a,j*x*-b+b)}g!==fe&&(w+="perspective("+g+me),(r||i)&&(w+="translate("+r+"%, "+i+"%) "),(_||s!==fe||o!==fe||a!==fe)&&(w+=a!==fe||_?"translate3d("+s+", "+o+", "+a+") ":"translate("+s+", "+o+me),l!==pe&&(w+="rotate("+l+me),c!==pe&&(w+="rotateY("+c+me),u!==pe&&(w+="rotateX("+u+me),d===pe&&h===pe||(w+="skew("+d+", "+h+me),1===p&&1===m||(w+="scale("+p+", "+m+me),y.style[M]=w||"translate(0, 0)"},ve=function(e,t){var n,r,i,s,o,a=t||this,l=a.xPercent,c=a.yPercent,u=a.x,h=a.y,p=a.rotation,m=a.skewX,g=a.skewY,v=a.scaleX,y=a.scaleY,b=a.target,w=a.xOrigin,_=a.yOrigin,x=a.xOffset,S=a.yOffset,k=a.forceCSS,j=parseFloat(u),C=parseFloat(h);p=parseFloat(p),m=parseFloat(m),(g=parseFloat(g))&&(m+=g=parseFloat(g),p+=g),p||m?(p*=f,m*=f,n=Math.cos(p)*v,r=Math.sin(p)*v,i=Math.sin(p-m)*-y,s=Math.cos(p-m)*y,m&&(g*=f,o=Math.tan(m-g),i*=o=Math.sqrt(1+o*o),s*=o,g&&(o=Math.tan(g),n*=o=Math.sqrt(1+o*o),r*=o)),n=(0,d._round)(n),r=(0,d._round)(r),i=(0,d._round)(i),s=(0,d._round)(s)):(n=v,s=y,r=i=0),(j&&!~(u+"").indexOf("px")||C&&!~(h+"").indexOf("px"))&&(j=Q(b,"x",u,"px"),C=Q(b,"y",h,"px")),(w||_||x||S)&&(j=(0,d._round)(j+w-(w*n+_*i)+x),C=(0,d._round)(C+_-(w*r+_*s)+S)),(l||c)&&(o=b.getBBox(),j=(0,d._round)(j+l/100*o.width),C=(0,d._round)(C+c/100*o.height)),o="matrix("+n+","+r+","+i+","+s+","+j+","+C+")",b.setAttribute("transform",o),k&&(b.style[M]=o)},ye=function(e,t,n,r,i){var s,o,a=360,l=(0,d._isString)(i),c=parseFloat(i)*(l&&~i.indexOf("rad")?p:1)-r,u=r+c+"deg";return l&&("short"===(s=i.split("_")[1])&&(c%=a)!==c%180&&(c+=c<0?a:-360),"cw"===s&&c<0?c=(c+36e9)%a-~~(c/a)*a:"ccw"===s&&c>0&&(c=(c-36e9)%a-~~(c/a)*a)),e._pt=o=new d.PropTween(e._pt,t,n,r,c,_),o.e=u,o.u="deg",e._props.push(n),o},be=function(e,t){for(var n in t)e[n]=t[n];return e},we=function(e,t,n){var r,i,s,o,a,l,c,u=be({},n._gsap),p=n.style;for(i in u.svg?(s=n.getAttribute("transform"),n.setAttribute("transform",""),p[M]=t,r=ce(n,1),X(n,M),n.setAttribute("transform",s)):(s=getComputedStyle(n)[M],p[M]=t,r=ce(n,1),p[M]=s),h)(s=u[i])!==(o=r[i])&&"perspective,force3D,transformOrigin,svgOrigin".indexOf(i)<0&&(a=(0,d.getUnit)(s)!==(c=(0,d.getUnit)(o))?Q(n,i,s,c):parseFloat(s),l=parseFloat(o),e._pt=new d.PropTween(e._pt,r,i,a,l-a,w),e._pt.u=c||0,e._props.push(i));be(r,u)};(0,d._forEachName)("padding,margin,Width,Radius",(function(e,t){var n="Top",r="Right",i="Bottom",s="Left",o=(t<3?[n,r,i,s]:[n+s,n+r,i+r,i+s]).map((function(n){return t<2?e+n:"border"+n+e}));ne[t>1?"border"+e:e]=function(e,t,n,r,i){var s,a;if(arguments.length<4)return s=o.map((function(t){return Z(e,t,n)})),5===(a=s.join(" ")).split(s[0]).length?s[0]:a;s=(r+"").split(" "),a={},o.forEach((function(e,t){return a[e]=s[t]=s[t]||s[(t-1)/2|0]})),e.init(t,a,i)}}));var _e,xe,Se,ke={name:"css",register:V,targetTest:function(e){return e.style&&e.nodeType},init:function(e,t,n,r,i){var s,a,l,c,u,p,f,m,g,v,_,k,j,C,E,T,A,O,P,I,R=this._props,$=e.style,N=n.vars.startAt;for(f in o||V(),this.styles=this.styles||D(e),T=this.styles.props,this.tween=n,t)if("autoRound"!==f&&(a=t[f],!d._plugins[f]||!(0,d._checkPlugin)(f,t,n,r,e,i)))if(u=typeof a,p=ne[f],"function"===u&&(u=typeof(a=a.call(n,r,e,i))),"string"===u&&~a.indexOf("random(")&&(a=(0,d._replaceRandom)(a)),p)p(this,e,f,a,n)&&(E=1);else if("--"===f.substr(0,2))s=(getComputedStyle(e).getPropertyValue(f)+"").trim(),a+="",d._colorExp.lastIndex=0,d._colorExp.test(s)||(m=(0,d.getUnit)(s),g=(0,d.getUnit)(a)),g?m!==g&&(s=Q(e,f,s,g)+g):m&&(a+=m),this.add($,"setProperty",s,a,r,i,0,0,f),R.push(f),T.push(f,0,$[f]);else if("undefined"!==u){if(N&&f in N?(s="function"==typeof N[f]?N[f].call(n,r,e,i):N[f],(0,d._isString)(s)&&~s.indexOf("random(")&&(s=(0,d._replaceRandom)(s)),(0,d.getUnit)(s+"")||(s+=d._config.units[f]||(0,d.getUnit)(Z(e,f))||""),"="===(s+"").charAt(1)&&(s=Z(e,f))):s=Z(e,f),c=parseFloat(s),(v="string"===u&&"="===a.charAt(1)&&a.substr(0,2))&&(a=a.substr(2)),l=parseFloat(a),f in b&&("autoAlpha"===f&&(1===c&&"hidden"===Z(e,"visibility")&&l&&(c=0),T.push("visibility",0,$.visibility),G(this,$,"visibility",c?"inherit":"hidden",l?"inherit":"hidden",!l)),"scale"!==f&&"transform"!==f&&~(f=b[f]).indexOf(",")&&(f=f.split(",")[0])),_=f in h)if(this.styles.save(f),k||((j=e._gsap).renderTransform&&!t.parseTransform||ce(e,t.parseTransform),C=!1!==t.smoothOrigin&&j.smooth,(k=this._pt=new d.PropTween(this._pt,$,M,0,1,j.renderTransform,j,0,-1)).dep=1),"scale"===f)this._pt=new d.PropTween(this._pt,j,"scaleY",c,(v?(0,d._parseRelative)(c,v+l):l)-c||0,w),this._pt.u=0,R.push("scaleY",f),f+="X";else{if("transformOrigin"===f){T.push(L,0,$[L]),O=void 0,P=void 0,I=void 0,O=(A=a).split(" "),P=O[0],I=O[1]||"50%","top"!==P&&"bottom"!==P&&"left"!==I&&"right"!==I||(A=P,P=I,I=A),O[0]=ee[P]||P,O[1]=ee[I]||I,a=O.join(" "),j.svg?le(e,a,0,C,0,this):((g=parseFloat(a.split(" ")[2])||0)!==j.zOrigin&&G(this,j,"zOrigin",j.zOrigin,g),G(this,$,f,ue(s),ue(a)));continue}if("svgOrigin"===f){le(e,a,1,C,0,this);continue}if(f in ie){ye(this,j,f,c,v?(0,d._parseRelative)(c,v+a):a);continue}if("smoothOrigin"===f){G(this,j,"smooth",j.smooth,a);continue}if("force3D"===f){j[f]=a;continue}if("transform"===f){we(this,a,e);continue}}else f in $||(f=F(f)||f);if(_||(l||0===l)&&(c||0===c)&&!y.test(a)&&f in $)l||(l=0),(m=(s+"").substr((c+"").length))!==(g=(0,d.getUnit)(a)||(f in d._config.units?d._config.units[f]:m))&&(c=Q(e,f,s,g)),this._pt=new d.PropTween(this._pt,_?j:$,f,c,(v?(0,d._parseRelative)(c,v+l):l)-c,_||"px"!==g&&"zIndex"!==f||!1===t.autoRound?w:S),this._pt.u=g||0,m!==g&&"%"!==g&&(this._pt.b=s,this._pt.r=x);else if(f in $)K.call(this,e,f,s,v?v+a:a);else{if(!(f in e)){(0,d._missingPlugin)(f,a);continue}this.add(e,f,s||e[f],v?v+a:a,r,i)}_||(f in $?T.push(f,0,$[f]):T.push(f,1,s||e[f])),R.push(f)}E&&(0,d._sortPropTweensByPriority)(this)},render:function(e,t){if(t.tween._time||!c())for(var n=t._pt;n;)n.r(e,n.d),n=n._next;else t.styles.revert()},get:Z,aliases:b,getSetter:function(e,t,n){var r=b[t];return r&&r.indexOf(",")<0&&(t=r),t in h&&t!==L&&(e._gsap.x||Z(e,"x"))?n&&l===n?"scale"===t?A:T:(l=n||{})&&("scale"===t?O:P):e.style&&!(0,d._isUndefined)(e.style[t])?C:~t.indexOf("-")?E:(0,d._getSetter)(e,t)},core:{_removeProperty:X,_getMatrix:ae}};d.gsap.utils.checkPrefix=F,d.gsap.core.getStyleSaver=D,_e="x,y,z,scale,scaleX,scaleY,xPercent,yPercent",xe="rotation,rotationX,rotationY,skewX,skewY",Se=(0,d._forEachName)(_e+","+xe+",transform,transformOrigin,svgOrigin,force3D,smoothOrigin,transformPerspective",(function(e){h[e]=1})),(0,d._forEachName)(xe,(function(e){d._config.units[e]="deg",ie[e]=1})),b[Se[13]]=_e+","+xe,(0,d._forEachName)("0:translateX,1:translateY,2:translateZ,8:rotate,8:rotationZ,8:rotateZ,9:rotateX,10:rotateY",(function(e){var t=e.split(":");b[t[1]]=Se[t[0]]})),(0,d._forEachName)("x,y,z,top,right,bottom,left,width,height,fontSize,padding,margin,perspective",(function(e){d._config.units[e]="px"})),d.gsap.registerPlugin(ke)},"./node_modules/gsap/CustomEase.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{CustomEase:()=>h,default:()=>h});var r,i,s=n("./node_modules/gsap/utils/paths.js"),o=function(){return r||"undefined"!=typeof window&&(r=window.gsap)&&r.registerPlugin&&r},a=function(){(r=o())?(r.registerEase("_CE",h.create),i=1):console.warn("Please gsap.registerPlugin(CustomEase)")},l=function(e){return~~(1e3*e+(e<0?-.5:.5))/1e3},c=/[-+=\.]*\d+[\.e\-\+]*\d*[e\-\+]*\d*/gi,u=/[cLlsSaAhHvVtTqQ]/g,d=function e(t,n,r,i,s,o,a,l,c,u,d){var h,p=(t+r)/2,f=(n+i)/2,m=(r+s)/2,g=(i+o)/2,v=(s+a)/2,y=(o+l)/2,b=(p+m)/2,w=(f+g)/2,_=(m+v)/2,x=(g+y)/2,S=(b+_)/2,k=(w+x)/2,j=a-t,C=l-n,E=Math.abs((r-a)*C-(i-l)*j),T=Math.abs((s-a)*C-(o-l)*j);return u||(u=[{x:t,y:n},{x:a,y:l}],d=1),u.splice(d||u.length-1,0,{x:S,y:k}),(E+T)*(E+T)>c*(j*j+C*C)&&(h=u.length,e(t,n,p,f,b,w,S,k,c,u,d),e(S,k,_,x,v,y,a,l,c,u,d+1+(u.length-h))),u},h=function(){function e(e,t,n){i||a(),this.id=e,this.setData(t,n)}var t=e.prototype;return t.setData=function(e,t){t=t||{};var n,i,o,a,l,h,p,f,m,g=(e=e||"0,0,1,1").match(c),v=1,y=[],b=[],w=t.precision||1,_=w<=1;if(this.data=e,(u.test(e)||~e.indexOf("M")&&e.indexOf("C")<0)&&(g=(0,s.stringToRawPath)(e)[0]),4===(n=g.length))g.unshift(0,0),g.push(1,1),n=8;else if((n-2)%6)throw"Invalid CustomEase";for(0==+g[0]&&1==+g[n-2]||function(e,t,n){n||0===n||(n=Math.max(+e[e.length-1],+e[1]));var r,i=-1*+e[0],s=-n,o=e.length,a=1/(+e[o-2]+i),l=-t||(Math.abs(+e[o-1]-+e[1])<.01*(+e[o-2]-+e[0])?function(e){var t,n=e.length,r=1e20;for(t=1;t<n;t+=6)+e[t]<r&&(r=+e[t]);return r}(e)+s:+e[o-1]+s);for(l=l?1/l:-a,r=0;r<o;r+=2)e[r]=(+e[r]+i)*a,e[r+1]=(+e[r+1]+s)*l}(g,t.height,t.originY),this.segment=g,a=2;a<n;a+=6)i={x:+g[a-2],y:+g[a-1]},o={x:+g[a+4],y:+g[a+5]},y.push(i,o),d(i.x,i.y,+g[a],+g[a+1],+g[a+2],+g[a+3],o.x,o.y,1/(2e5*w),y,y.length-1);for(n=y.length,a=0;a<n;a++)p=y[a],f=y[a-1]||p,(p.x>f.x||f.y!==p.y&&f.x===p.x||p===f)&&p.x<=1?(f.cx=p.x-f.x,f.cy=p.y-f.y,f.n=p,f.nx=p.x,_&&a>1&&Math.abs(f.cy/f.cx-y[a-2].cy/y[a-2].cx)>2&&(_=0),f.cx<v&&(f.cx?v=f.cx:(f.cx=.001,a===n-1&&(f.x-=.001,v=Math.min(v,.001),_=0)))):(y.splice(a--,1),n--);if(l=1/(n=1/v+1|0),h=0,p=y[0],_){for(a=0;a<n;a++)m=a*l,p.nx<m&&(p=y[++h]),i=p.y+(m-p.x)/p.cx*p.cy,b[a]={x:m,cx:l,y:i,cy:0,nx:9},a&&(b[a-1].cy=i-b[a-1].y);b[n-1].cy=y[y.length-1].y-i}else{for(a=0;a<n;a++)p.nx<a*l&&(p=y[++h]),b[a]=p;h<y.length-1&&(b[a-1]=y[y.length-2])}return this.ease=function(e){var t=b[e*n|0]||b[n-1];return t.nx<e&&(t=t.n),t.y+(e-t.x)/t.cx*t.cy},this.ease.custom=this,this.id&&r&&r.registerEase(this.id,this.ease),this},t.getSVGData=function(t){return e.getSVGData(this,t)},e.create=function(t,n,r){return new e(t,n,r).ease},e.register=function(e){r=e,a()},e.get=function(e){return r.parseEase(e)},e.getSVGData=function(t,n){var i,o,a,c,u,d,h,p,f,m,g=(n=n||{}).width||100,v=n.height||100,y=n.x||0,b=(n.y||0)+v,w=r.utils.toArray(n.path)[0];if(n.invert&&(v=-v,b=0),"string"==typeof t&&(t=r.parseEase(t)),t.custom&&(t=t.custom),t instanceof e)i=(0,s.rawPathToString)((0,s.transformRawPath)([t.segment],g,0,0,-v,y,b));else{for(i=[y,b],c=1/(h=Math.max(5,200*(n.precision||1))),p=5/(h+=2),f=l(y+c*g),o=((m=l(b+t(c)*-v))-b)/(f-y),a=2;a<h;a++)u=l(y+a*c*g),d=l(b+t(a*c)*-v),(Math.abs((d-m)/(u-f)-o)>p||a===h-1)&&(i.push(f,m),o=(d-m)/(u-f)),f=u,m=d;i="M"+i.join(",")}return w&&w.setAttribute("d",i),i},e}();o()&&r.registerPlugin(h),h.version="3.11.3"},"./node_modules/gsap/gsap-core.js":(e,t,n)=>{"use strict";function r(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function i(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}n.r(t),n.d(t,{Animation:()=>Xt,Back:()=>Hn,Bounce:()=>Xn,Circ:()=>Jn,Cubic:()=>qn,Elastic:()=>Wn,Expo:()=>Yn,GSCache:()=>zt,Linear:()=>Nn,Power0:()=>Ln,Power1:()=>In,Power2:()=>Rn,Power3:()=>$n,Power4:()=>Dn,PropTween:()=>wn,Quad:()=>Bn,Quart:()=>Fn,Quint:()=>Vn,Sine:()=>Gn,SteppedEase:()=>zn,Strong:()=>Un,Timeline:()=>Gt,TimelineLite:()=>Gt,TimelineMax:()=>Gt,Tween:()=>on,TweenLite:()=>on,TweenMax:()=>on,_checkPlugin:()=>Kt,_colorExp:()=>Ot,_colorStringFilter:()=>Mt,_config:()=>w,_forEachName:()=>fe,_getCache:()=>he,_getProperty:()=>pe,_getSetter:()=>dn,_isString:()=>O,_isUndefined:()=>L,_missingPlugin:()=>J,_numExp:()=>F,_numWithUnitExp:()=>V,_parseRelative:()=>ve,_plugins:()=>oe,_relExp:()=>W,_removeLinkedListItem:()=>Ae,_renderComplexString:()=>fn,_replaceRandom:()=>vt,_round:()=>me,_roundModifier:()=>lt,_setDefaults:()=>Se,_sortPropTweensByPriority:()=>bn,_ticker:()=>Lt,clamp:()=>et,default:()=>Mn,distribute:()=>at,getUnit:()=>Ke,gsap:()=>Mn,interpolate:()=>bt,mapRange:()=>yt,normalize:()=>pt,pipe:()=>dt,random:()=>ut,selector:()=>st,shuffle:()=>ot,snap:()=>ct,splitColor:()=>Et,toArray:()=>it,unitize:()=>ht,wrap:()=>mt,wrapYoyo:()=>gt});var s,o,a,l,c,u,d,h,p,f,m,g,v,y,b,w={autoSleep:120,force3D:"auto",nullTargetWarn:1,units:{lineHeight:""}},_={duration:.5,overwrite:!1,delay:0},x=1e8,S=1e-8,k=2*Math.PI,j=k/4,C=0,E=Math.sqrt,T=Math.cos,A=Math.sin,O=function(e){return"string"==typeof e},P=function(e){return"function"==typeof e},M=function(e){return"number"==typeof e},L=function(e){return void 0===e},I=function(e){return"object"==typeof e},R=function(e){return!1!==e},$=function(){return"undefined"!=typeof window},D=function(e){return P(e)||O(e)},N="function"==typeof ArrayBuffer&&ArrayBuffer.isView||function(){},B=Array.isArray,q=/(?:-?\.?\d|\.)+/gi,F=/[-+=.]*\d+[.e\-+]*\d*[e\-+]*\d*/g,V=/[-+=.]*\d+[.e-]*\d*[a-z%]*/g,U=/[-+=.]*\d+\.?\d*(?:e-|e\+)?\d*/gi,W=/[+-]=-?[.\d]+/,H=/[^,'"\[\]\s]+/gi,z=/^[+\-=e\s\d]*\d+[.\d]*([a-z]*|%)\s*$/i,X={},G={},Y=function(e){return(G=ke(e,X))&&Mn},J=function(e,t){return console.warn("Invalid property",e,"set to",t,"Missing plugin? gsap.registerPlugin()")},Q=function(e,t){return!t&&console.warn(e)},Z=function(e,t){return e&&(X[e]=t)&&G&&(G[e]=t)||X},K=function(){return 0},ee={suppressEvents:!0,isStart:!0,kill:!1},te={suppressEvents:!0,kill:!1},ne={suppressEvents:!0},re={},ie=[],se={},oe={},ae={},le=30,ce=[],ue="",de=function(e){var t,n,r=e[0];if(I(r)||P(r)||(e=[e]),!(t=(r._gsap||{}).harness)){for(n=ce.length;n--&&!ce[n].targetTest(r););t=ce[n]}for(n=e.length;n--;)e[n]&&(e[n]._gsap||(e[n]._gsap=new zt(e[n],t)))||e.splice(n,1);return e},he=function(e){return e._gsap||de(it(e))[0]._gsap},pe=function(e,t,n){return(n=e[t])&&P(n)?e[t]():L(n)&&e.getAttribute&&e.getAttribute(t)||n},fe=function(e,t){return(e=e.split(",")).forEach(t)||e},me=function(e){return Math.round(1e5*e)/1e5||0},ge=function(e){return Math.round(1e7*e)/1e7||0},ve=function(e,t){var n=t.charAt(0),r=parseFloat(t.substr(2));return e=parseFloat(e),"+"===n?e+r:"-"===n?e-r:"*"===n?e*r:e/r},ye=function(e,t){for(var n=t.length,r=0;e.indexOf(t[r])<0&&++r<n;);return r<n},be=function(){var e,t,n=ie.length,r=ie.slice(0);for(se={},ie.length=0,e=0;e<n;e++)(t=r[e])&&t._lazy&&(t.render(t._lazy[0],t._lazy[1],!0)._lazy=0)},we=function(e,t,n,r){ie.length&&be(),e.render(t,n,r||o&&t<0&&(e._initted||e._startAt)),ie.length&&be()},_e=function(e){var t=parseFloat(e);return(t||0===t)&&(e+"").match(H).length<2?t:O(e)?e.trim():e},xe=function(e){return e},Se=function(e,t){for(var n in t)n in e||(e[n]=t[n]);return e},ke=function(e,t){for(var n in t)e[n]=t[n];return e},je=function e(t,n){for(var r in n)"__proto__"!==r&&"constructor"!==r&&"prototype"!==r&&(t[r]=I(n[r])?e(t[r]||(t[r]={}),n[r]):n[r]);return t},Ce=function(e,t){var n,r={};for(n in e)n in t||(r[n]=e[n]);return r},Ee=function(e){var t,n=e.parent||l,r=e.keyframes?(t=B(e.keyframes),function(e,n){for(var r in n)r in e||"duration"===r&&t||"ease"===r||(e[r]=n[r])}):Se;if(R(e.inherit))for(;n;)r(e,n.vars.defaults),n=n.parent||n._dp;return e},Te=function(e,t,n,r,i){void 0===n&&(n="_first"),void 0===r&&(r="_last");var s,o=e[r];if(i)for(s=t[i];o&&o[i]>s;)o=o._prev;return o?(t._next=o._next,o._next=t):(t._next=e[n],e[n]=t),t._next?t._next._prev=t:e[r]=t,t._prev=o,t.parent=t._dp=e,t},Ae=function(e,t,n,r){void 0===n&&(n="_first"),void 0===r&&(r="_last");var i=t._prev,s=t._next;i?i._next=s:e[n]===t&&(e[n]=s),s?s._prev=i:e[r]===t&&(e[r]=i),t._next=t._prev=t.parent=null},Oe=function(e,t){e.parent&&(!t||e.parent.autoRemoveChildren)&&e.parent.remove(e),e._act=0},Pe=function(e,t){if(e&&(!t||t._end>e._dur||t._start<0))for(var n=e;n;)n._dirty=1,n=n.parent;return e},Me=function(e){for(var t=e.parent;t&&t.parent;)t._dirty=1,t.totalDuration(),t=t.parent;return e},Le=function(e,t,n,r){return e._startAt&&(o?e._startAt.revert(te):e.vars.immediateRender&&!e.vars.autoRevert||e._startAt.render(t,!0,r))},Ie=function e(t){return!t||t._ts&&e(t.parent)},Re=function(e){return e._repeat?$e(e._tTime,e=e.duration()+e._rDelay)*e:0},$e=function(e,t){var n=Math.floor(e/=t);return e&&n===e?n-1:n},De=function(e,t){return(e-t._start)*t._ts+(t._ts>=0?0:t._dirty?t.totalDuration():t._tDur)},Ne=function(e){return e._end=ge(e._start+(e._tDur/Math.abs(e._ts||e._rts||S)||0))},Be=function(e,t){var n=e._dp;return n&&n.smoothChildTiming&&e._ts&&(e._start=ge(n._time-(e._ts>0?t/e._ts:((e._dirty?e.totalDuration():e._tDur)-t)/-e._ts)),Ne(e),n._dirty||Pe(n,e)),e},qe=function(e,t){var n;if((t._time||t._initted&&!t._dur)&&(n=De(e.rawTime(),t),(!t._dur||Ze(0,t.totalDuration(),n)-t._tTime>S)&&t.render(n,!0)),Pe(e,t)._dp&&e._initted&&e._time>=e._dur&&e._ts){if(e._dur<e.duration())for(n=e;n._dp;)n.rawTime()>=0&&n.totalTime(n._tTime),n=n._dp;e._zTime=-1e-8}},Fe=function(e,t,n,r){return t.parent&&Oe(t),t._start=ge((M(n)?n:n||e!==l?Ye(e,n,t):e._time)+t._delay),t._end=ge(t._start+(t.totalDuration()/Math.abs(t.timeScale())||0)),Te(e,t,"_first","_last",e._sort?"_start":0),He(t)||(e._recent=t),r||qe(e,t),e._ts<0&&Be(e,e._tTime),e},Ve=function(e,t){return(X.ScrollTrigger||J("scrollTrigger",t))&&X.ScrollTrigger.create(t,e)},Ue=function(e,t,n,r,i){return en(e,t,i),e._initted?!n&&e._pt&&!o&&(e._dur&&!1!==e.vars.lazy||!e._dur&&e.vars.lazy)&&p!==Lt.frame?(ie.push(e),e._lazy=[i,r],1):void 0:1},We=function e(t){var n=t.parent;return n&&n._ts&&n._initted&&!n._lock&&(n.rawTime()<0||e(n))},He=function(e){var t=e.data;return"isFromStart"===t||"isStart"===t},ze=function(e,t,n,r){var i=e._repeat,s=ge(t)||0,o=e._tTime/e._tDur;return o&&!r&&(e._time*=s/e._dur),e._dur=s,e._tDur=i?i<0?1e10:ge(s*(i+1)+e._rDelay*i):s,o>0&&!r&&Be(e,e._tTime=e._tDur*o),e.parent&&Ne(e),n||Pe(e.parent,e),e},Xe=function(e){return e instanceof Gt?Pe(e):ze(e,e._dur)},Ge={_start:0,endTime:K,totalDuration:K},Ye=function e(t,n,r){var i,s,o,a=t.labels,l=t._recent||Ge,c=t.duration()>=x?l.endTime(!1):t._dur;return O(n)&&(isNaN(n)||n in a)?(s=n.charAt(0),o="%"===n.substr(-1),i=n.indexOf("="),"<"===s||">"===s?(i>=0&&(n=n.replace(/=/,"")),("<"===s?l._start:l.endTime(l._repeat>=0))+(parseFloat(n.substr(1))||0)*(o?(i<0?l:r).totalDuration()/100:1)):i<0?(n in a||(a[n]=c),a[n]):(s=parseFloat(n.charAt(i-1)+n.substr(i+1)),o&&r&&(s=s/100*(B(r)?r[0]:r).totalDuration()),i>1?e(t,n.substr(0,i-1),r)+s:c+s)):null==n?c:+n},Je=function(e,t,n){var r,i,s=M(t[1]),o=(s?2:1)+(e<2?0:1),a=t[o];if(s&&(a.duration=t[1]),a.parent=n,e){for(r=a,i=n;i&&!("immediateRender"in r);)r=i.vars.defaults||{},i=R(i.vars.inherit)&&i.parent;a.immediateRender=R(r.immediateRender),e<2?a.runBackwards=1:a.startAt=t[o-1]}return new on(t[0],a,t[o+1])},Qe=function(e,t){return e||0===e?t(e):t},Ze=function(e,t,n){return n<e?e:n>t?t:n},Ke=function(e,t){return O(e)&&(t=z.exec(e))?t[1]:""},et=function(e,t,n){return Qe(n,(function(n){return Ze(e,t,n)}))},tt=[].slice,nt=function(e,t){return e&&I(e)&&"length"in e&&(!t&&!e.length||e.length-1 in e&&I(e[0]))&&!e.nodeType&&e!==c},rt=function(e,t,n){return void 0===n&&(n=[]),e.forEach((function(e){var r;return O(e)&&!t||nt(e,1)?(r=n).push.apply(r,it(e)):n.push(e)}))||n},it=function(e,t,n){return a&&!t&&a.selector?a.selector(e):!O(e)||n||!u&&It()?B(e)?rt(e,n):nt(e)?tt.call(e,0):e?[e]:[]:tt.call((t||d).querySelectorAll(e),0)},st=function(e){return e=it(e)[0]||Q("Invalid scope")||{},function(t){var n=e.current||e.nativeElement||e;return it(t,n.querySelectorAll?n:n===e?Q("Invalid scope")||d.createElement("div"):e)}},ot=function(e){return e.sort((function(){return.5-Math.random()}))},at=function(e){if(P(e))return e;var t=I(e)?e:{each:e},n=Ft(t.ease),r=t.from||0,i=parseFloat(t.base)||0,s={},o=r>0&&r<1,a=isNaN(r)||o,l=t.axis,c=r,u=r;return O(r)?c=u={center:.5,edges:.5,end:1}[r]||0:!o&&a&&(c=r[0],u=r[1]),function(e,o,d){var h,p,f,m,g,v,y,b,w,_=(d||t).length,S=s[_];if(!S){if(!(w="auto"===t.grid?0:(t.grid||[1,x])[1])){for(y=-x;y<(y=d[w++].getBoundingClientRect().left)&&w<_;);w--}for(S=s[_]=[],h=a?Math.min(w,_)*c-.5:r%w,p=w===x?0:a?_*u/w-.5:r/w|0,y=0,b=x,v=0;v<_;v++)f=v%w-h,m=p-(v/w|0),S[v]=g=l?Math.abs("y"===l?m:f):E(f*f+m*m),g>y&&(y=g),g<b&&(b=g);"random"===r&&ot(S),S.max=y-b,S.min=b,S.v=_=(parseFloat(t.amount)||parseFloat(t.each)*(w>_?_-1:l?"y"===l?_/w:w:Math.max(w,_/w))||0)*("edges"===r?-1:1),S.b=_<0?i-_:i,S.u=Ke(t.amount||t.each)||0,n=n&&_<0?Bt(n):n}return _=(S[e]-S.min)/S.max||0,ge(S.b+(n?n(_):_)*S.v)+S.u}},lt=function(e){var t=Math.pow(10,((e+"").split(".")[1]||"").length);return function(n){var r=ge(Math.round(parseFloat(n)/e)*e*t);return(r-r%1)/t+(M(n)?0:Ke(n))}},ct=function(e,t){var n,r,i=B(e);return!i&&I(e)&&(n=i=e.radius||x,e.values?(e=it(e.values),(r=!M(e[0]))&&(n*=n)):e=lt(e.increment)),Qe(t,i?P(e)?function(t){return r=e(t),Math.abs(r-t)<=n?r:t}:function(t){for(var i,s,o=parseFloat(r?t.x:t),a=parseFloat(r?t.y:0),l=x,c=0,u=e.length;u--;)(i=r?(i=e[u].x-o)*i+(s=e[u].y-a)*s:Math.abs(e[u]-o))<l&&(l=i,c=u);return c=!n||l<=n?e[c]:t,r||c===t||M(t)?c:c+Ke(t)}:lt(e))},ut=function(e,t,n,r){return Qe(B(e)?!t:!0===n?!!(n=0):!r,(function(){return B(e)?e[~~(Math.random()*e.length)]:(n=n||1e-5)&&(r=n<1?Math.pow(10,(n+"").length-2):1)&&Math.floor(Math.round((e-n/2+Math.random()*(t-e+.99*n))/n)*n*r)/r}))},dt=function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(e){return t.reduce((function(e,t){return t(e)}),e)}},ht=function(e,t){return function(n){return e(parseFloat(n))+(t||Ke(n))}},pt=function(e,t,n){return yt(e,t,0,1,n)},ft=function(e,t,n){return Qe(n,(function(n){return e[~~t(n)]}))},mt=function e(t,n,r){var i=n-t;return B(t)?ft(t,e(0,t.length),n):Qe(r,(function(e){return(i+(e-t)%i)%i+t}))},gt=function e(t,n,r){var i=n-t,s=2*i;return B(t)?ft(t,e(0,t.length-1),n):Qe(r,(function(e){return t+((e=(s+(e-t)%s)%s||0)>i?s-e:e)}))},vt=function(e){for(var t,n,r,i,s=0,o="";~(t=e.indexOf("random(",s));)r=e.indexOf(")",t),i="["===e.charAt(t+7),n=e.substr(t+7,r-t-7).match(i?H:q),o+=e.substr(s,t-s)+ut(i?n:+n[0],i?0:+n[1],+n[2]||1e-5),s=r+1;return o+e.substr(s,e.length-s)},yt=function(e,t,n,r,i){var s=t-e,o=r-n;return Qe(i,(function(t){return n+((t-e)/s*o||0)}))},bt=function e(t,n,r,i){var s=isNaN(t+n)?0:function(e){return(1-e)*t+e*n};if(!s){var o,a,l,c,u,d=O(t),h={};if(!0===r&&(i=1)&&(r=null),d)t={p:t},n={p:n};else if(B(t)&&!B(n)){for(l=[],c=t.length,u=c-2,a=1;a<c;a++)l.push(e(t[a-1],t[a]));c--,s=function(e){e*=c;var t=Math.min(u,~~e);return l[t](e-t)},r=n}else i||(t=ke(B(t)?[]:{},t));if(!l){for(o in n)Zt.call(h,t,o,"get",n[o]);s=function(e){return mn(e,h)||(d?t.p:t)}}}return Qe(r,s)},wt=function(e,t,n){var r,i,s,o=e.labels,a=x;for(r in o)(i=o[r]-t)<0==!!n&&i&&a>(i=Math.abs(i))&&(s=r,a=i);return s},_t=function(e,t,n){var r,i,s,o=e.vars,l=o[t],c=a,u=e._ctx;if(l)return r=o[t+"Params"],i=o.callbackScope||e,n&&ie.length&&be(),u&&(a=u),s=r?l.apply(i,r):l.call(i),a=c,s},xt=function(e){return Oe(e),e.scrollTrigger&&e.scrollTrigger.kill(!!o),e.progress()<1&&_t(e,"onInterrupt"),e},St=function(e){var t=(e=!e.name&&e.default||e).name,n=P(e),r=t&&!n&&e.init?function(){this._props=[]}:e,i={init:K,render:mn,add:Zt,kill:vn,modifier:gn,rawVars:0},s={targetTest:0,get:0,getSetter:dn,aliases:{},register:0};if(It(),e!==r){if(oe[t])return;Se(r,Se(Ce(e,i),s)),ke(r.prototype,ke(i,Ce(e,s))),oe[r.prop=t]=r,e.targetTest&&(ce.push(r),re[t]=1),t=("css"===t?"CSS":t.charAt(0).toUpperCase()+t.substr(1))+"Plugin"}Z(t,r),e.register&&e.register(Mn,r,wn)},kt=255,jt={aqua:[0,kt,kt],lime:[0,kt,0],silver:[192,192,192],black:[0,0,0],maroon:[128,0,0],teal:[0,128,128],blue:[0,0,kt],navy:[0,0,128],white:[kt,kt,kt],olive:[128,128,0],yellow:[kt,kt,0],orange:[kt,165,0],gray:[128,128,128],purple:[128,0,128],green:[0,128,0],red:[kt,0,0],pink:[kt,192,203],cyan:[0,kt,kt],transparent:[kt,kt,kt,0]},Ct=function(e,t,n){return(6*(e+=e<0?1:e>1?-1:0)<1?t+(n-t)*e*6:e<.5?n:3*e<2?t+(n-t)*(2/3-e)*6:t)*kt+.5|0},Et=function(e,t,n){var r,i,s,o,a,l,c,u,d,h,p=e?M(e)?[e>>16,e>>8&kt,e&kt]:0:jt.black;if(!p){if(","===e.substr(-1)&&(e=e.substr(0,e.length-1)),jt[e])p=jt[e];else if("#"===e.charAt(0)){if(e.length<6&&(r=e.charAt(1),i=e.charAt(2),s=e.charAt(3),e="#"+r+r+i+i+s+s+(5===e.length?e.charAt(4)+e.charAt(4):"")),9===e.length)return[(p=parseInt(e.substr(1,6),16))>>16,p>>8&kt,p&kt,parseInt(e.substr(7),16)/255];p=[(e=parseInt(e.substr(1),16))>>16,e>>8&kt,e&kt]}else if("hsl"===e.substr(0,3))if(p=h=e.match(q),t){if(~e.indexOf("="))return p=e.match(F),n&&p.length<4&&(p[3]=1),p}else o=+p[0]%360/360,a=+p[1]/100,r=2*(l=+p[2]/100)-(i=l<=.5?l*(a+1):l+a-l*a),p.length>3&&(p[3]*=1),p[0]=Ct(o+1/3,r,i),p[1]=Ct(o,r,i),p[2]=Ct(o-1/3,r,i);else p=e.match(q)||jt.transparent;p=p.map(Number)}return t&&!h&&(r=p[0]/kt,i=p[1]/kt,s=p[2]/kt,l=((c=Math.max(r,i,s))+(u=Math.min(r,i,s)))/2,c===u?o=a=0:(d=c-u,a=l>.5?d/(2-c-u):d/(c+u),o=c===r?(i-s)/d+(i<s?6:0):c===i?(s-r)/d+2:(r-i)/d+4,o*=60),p[0]=~~(o+.5),p[1]=~~(100*a+.5),p[2]=~~(100*l+.5)),n&&p.length<4&&(p[3]=1),p},Tt=function(e){var t=[],n=[],r=-1;return e.split(Ot).forEach((function(e){var i=e.match(V)||[];t.push.apply(t,i),n.push(r+=i.length+1)})),t.c=n,t},At=function(e,t,n){var r,i,s,o,a="",l=(e+a).match(Ot),c=t?"hsla(":"rgba(",u=0;if(!l)return e;if(l=l.map((function(e){return(e=Et(e,t,1))&&c+(t?e[0]+","+e[1]+"%,"+e[2]+"%,"+e[3]:e.join(","))+")"})),n&&(s=Tt(e),(r=n.c).join(a)!==s.c.join(a)))for(o=(i=e.replace(Ot,"1").split(V)).length-1;u<o;u++)a+=i[u]+(~r.indexOf(u)?l.shift()||c+"0,0,0,0)":(s.length?s:l.length?l:n).shift());if(!i)for(o=(i=e.split(Ot)).length-1;u<o;u++)a+=i[u]+l[u];return a+i[o]},Ot=function(){var e,t="(?:\\b(?:(?:rgb|rgba|hsl|hsla)\\(.+?\\))|\\B#(?:[0-9a-f]{3,4}){1,2}\\b";for(e in jt)t+="|"+e+"\\b";return new RegExp(t+")","gi")}(),Pt=/hsl[a]?\(/,Mt=function(e){var t,n=e.join(" ");if(Ot.lastIndex=0,Ot.test(n))return t=Pt.test(n),e[1]=At(e[1],t),e[0]=At(e[0],t,Tt(e[1])),!0},Lt=function(){var e,t,n,r,i,s,o=Date.now,a=500,l=33,p=o(),f=p,g=1e3/240,v=g,y=[],b=function n(c){var u,d,h,m,b=o()-f,w=!0===c;if(b>a&&(p+=b-l),((u=(h=(f+=b)-p)-v)>0||w)&&(m=++r.frame,i=h-1e3*r.time,r.time=h/=1e3,v+=u+(u>=g?4:g-u),d=1),w||(e=t(n)),d)for(s=0;s<y.length;s++)y[s](h,i,m,c)};return r={time:0,frame:0,tick:function(){b(!0)},deltaRatio:function(e){return i/(1e3/(e||60))},wake:function(){h&&(!u&&$()&&(c=u=window,d=c.document||{},X.gsap=Mn,(c.gsapVersions||(c.gsapVersions=[])).push(Mn.version),Y(G||c.GreenSockGlobals||!c.gsap&&c||{}),n=c.requestAnimationFrame),e&&r.sleep(),t=n||function(e){return setTimeout(e,v-1e3*r.time+1|0)},m=1,b(2))},sleep:function(){(n?c.cancelAnimationFrame:clearTimeout)(e),m=0,t=K},lagSmoothing:function(e,t){a=e||1e8,l=Math.min(t,a,0)},fps:function(e){g=1e3/(e||240),v=1e3*r.time+g},add:function(e,t,n){var i=t?function(t,n,s,o){e(t,n,s,o),r.remove(i)}:e;return r.remove(e),y[n?"unshift":"push"](i),It(),i},remove:function(e,t){~(t=y.indexOf(e))&&y.splice(t,1)&&s>=t&&s--},_listeners:y}}(),It=function(){return!m&&Lt.wake()},Rt={},$t=/^[\d.\-M][\d.\-,\s]/,Dt=/["']/g,Nt=function(e){for(var t,n,r,i={},s=e.substr(1,e.length-3).split(":"),o=s[0],a=1,l=s.length;a<l;a++)n=s[a],t=a!==l-1?n.lastIndexOf(","):n.length,r=n.substr(0,t),i[o]=isNaN(r)?r.replace(Dt,"").trim():+r,o=n.substr(t+1).trim();return i},Bt=function(e){return function(t){return 1-e(1-t)}},qt=function e(t,n){for(var r,i=t._first;i;)i instanceof Gt?e(i,n):!i.vars.yoyoEase||i._yoyo&&i._repeat||i._yoyo===n||(i.timeline?e(i.timeline,n):(r=i._ease,i._ease=i._yEase,i._yEase=r,i._yoyo=n)),i=i._next},Ft=function(e,t){return e&&(P(e)?e:Rt[e]||function(e){var t,n,r,i,s=(e+"").split("("),o=Rt[s[0]];return o&&s.length>1&&o.config?o.config.apply(null,~e.indexOf("{")?[Nt(s[1])]:(t=e,n=t.indexOf("(")+1,r=t.indexOf(")"),i=t.indexOf("(",n),t.substring(n,~i&&i<r?t.indexOf(")",r+1):r)).split(",").map(_e)):Rt._CE&&$t.test(e)?Rt._CE("",e):o}(e))||t},Vt=function(e,t,n,r){void 0===n&&(n=function(e){return 1-t(1-e)}),void 0===r&&(r=function(e){return e<.5?t(2*e)/2:1-t(2*(1-e))/2});var i,s={easeIn:t,easeOut:n,easeInOut:r};return fe(e,(function(e){for(var t in Rt[e]=X[e]=s,Rt[i=e.toLowerCase()]=n,s)Rt[i+("easeIn"===t?".in":"easeOut"===t?".out":".inOut")]=Rt[e+"."+t]=s[t]})),s},Ut=function(e){return function(t){return t<.5?(1-e(1-2*t))/2:.5+e(2*(t-.5))/2}},Wt=function e(t,n,r){var i=n>=1?n:1,s=(r||(t?.3:.45))/(n<1?n:1),o=s/k*(Math.asin(1/i)||0),a=function(e){return 1===e?1:i*Math.pow(2,-10*e)*A((e-o)*s)+1},l="out"===t?a:"in"===t?function(e){return 1-a(1-e)}:Ut(a);return s=k/s,l.config=function(n,r){return e(t,n,r)},l},Ht=function e(t,n){void 0===n&&(n=1.70158);var r=function(e){return e?--e*e*((n+1)*e+n)+1:0},i="out"===t?r:"in"===t?function(e){return 1-r(1-e)}:Ut(r);return i.config=function(n){return e(t,n)},i};fe("Linear,Quad,Cubic,Quart,Quint,Strong",(function(e,t){var n=t<5?t+1:t;Vt(e+",Power"+(n-1),t?function(e){return Math.pow(e,n)}:function(e){return e},(function(e){return 1-Math.pow(1-e,n)}),(function(e){return e<.5?Math.pow(2*e,n)/2:1-Math.pow(2*(1-e),n)/2}))})),Rt.Linear.easeNone=Rt.none=Rt.Linear.easeIn,Vt("Elastic",Wt("in"),Wt("out"),Wt()),g=7.5625,y=1/(v=2.75),Vt("Bounce",(function(e){return 1-b(1-e)}),b=function(e){return e<y?g*e*e:e<.7272727272727273?g*Math.pow(e-1.5/v,2)+.75:e<.9090909090909092?g*(e-=2.25/v)*e+.9375:g*Math.pow(e-2.625/v,2)+.984375}),Vt("Expo",(function(e){return e?Math.pow(2,10*(e-1)):0})),Vt("Circ",(function(e){return-(E(1-e*e)-1)})),Vt("Sine",(function(e){return 1===e?1:1-T(e*j)})),Vt("Back",Ht("in"),Ht("out"),Ht()),Rt.SteppedEase=Rt.steps=X.SteppedEase={config:function(e,t){void 0===e&&(e=1);var n=1/e,r=e+(t?0:1),i=t?1:0;return function(e){return((r*Ze(0,.99999999,e)|0)+i)*n}}},_.ease=Rt["quad.out"],fe("onComplete,onUpdate,onStart,onRepeat,onReverseComplete,onInterrupt",(function(e){return ue+=e+","+e+"Params,"}));var zt=function(e,t){this.id=C++,e._gsap=this,this.target=e,this.harness=t,this.get=t?t.get:pe,this.set=t?t.getSetter:dn},Xt=function(){function e(e){this.vars=e,this._delay=+e.delay||0,(this._repeat=e.repeat===1/0?-2:e.repeat||0)&&(this._rDelay=e.repeatDelay||0,this._yoyo=!!e.yoyo||!!e.yoyoEase),this._ts=1,ze(this,+e.duration,1,1),this.data=e.data,a&&(this._ctx=a,a.data.push(this)),m||Lt.wake()}var t=e.prototype;return t.delay=function(e){return e||0===e?(this.parent&&this.parent.smoothChildTiming&&this.startTime(this._start+e-this._delay),this._delay=e,this):this._delay},t.duration=function(e){return arguments.length?this.totalDuration(this._repeat>0?e+(e+this._rDelay)*this._repeat:e):this.totalDuration()&&this._dur},t.totalDuration=function(e){return arguments.length?(this._dirty=0,ze(this,this._repeat<0?e:(e-this._repeat*this._rDelay)/(this._repeat+1))):this._tDur},t.totalTime=function(e,t){if(It(),!arguments.length)return this._tTime;var n=this._dp;if(n&&n.smoothChildTiming&&this._ts){for(Be(this,e),!n._dp||n.parent||qe(n,this);n&&n.parent;)n.parent._time!==n._start+(n._ts>=0?n._tTime/n._ts:(n.totalDuration()-n._tTime)/-n._ts)&&n.totalTime(n._tTime,!0),n=n.parent;!this.parent&&this._dp.autoRemoveChildren&&(this._ts>0&&e<this._tDur||this._ts<0&&e>0||!this._tDur&&!e)&&Fe(this._dp,this,this._start-this._delay)}return(this._tTime!==e||!this._dur&&!t||this._initted&&Math.abs(this._zTime)===S||!e&&!this._initted&&(this.add||this._ptLookup))&&(this._ts||(this._pTime=e),we(this,e,t)),this},t.time=function(e,t){return arguments.length?this.totalTime(Math.min(this.totalDuration(),e+Re(this))%(this._dur+this._rDelay)||(e?this._dur:0),t):this._time},t.totalProgress=function(e,t){return arguments.length?this.totalTime(this.totalDuration()*e,t):this.totalDuration()?Math.min(1,this._tTime/this._tDur):this.ratio},t.progress=function(e,t){return arguments.length?this.totalTime(this.duration()*(!this._yoyo||1&this.iteration()?e:1-e)+Re(this),t):this.duration()?Math.min(1,this._time/this._dur):this.ratio},t.iteration=function(e,t){var n=this.duration()+this._rDelay;return arguments.length?this.totalTime(this._time+(e-1)*n,t):this._repeat?$e(this._tTime,n)+1:1},t.timeScale=function(e){if(!arguments.length)return-1e-8===this._rts?0:this._rts;if(this._rts===e)return this;var t=this.parent&&this._ts?De(this.parent._time,this):this._tTime;return this._rts=+e||0,this._ts=this._ps||-1e-8===e?0:this._rts,this.totalTime(Ze(-this._delay,this._tDur,t),!0),Ne(this),Me(this)},t.paused=function(e){return arguments.length?(this._ps!==e&&(this._ps=e,e?(this._pTime=this._tTime||Math.max(-this._delay,this.rawTime()),this._ts=this._act=0):(It(),this._ts=this._rts,this.totalTime(this.parent&&!this.parent.smoothChildTiming?this.rawTime():this._tTime||this._pTime,1===this.progress()&&Math.abs(this._zTime)!==S&&(this._tTime-=S)))),this):this._ps},t.startTime=function(e){if(arguments.length){this._start=e;var t=this.parent||this._dp;return t&&(t._sort||!this.parent)&&Fe(t,this,e-this._delay),this}return this._start},t.endTime=function(e){return this._start+(R(e)?this.totalDuration():this.duration())/Math.abs(this._ts||1)},t.rawTime=function(e){var t=this.parent||this._dp;return t?e&&(!this._ts||this._repeat&&this._time&&this.totalProgress()<1)?this._tTime%(this._dur+this._rDelay):this._ts?De(t.rawTime(e),this):this._tTime:this._tTime},t.revert=function(e){void 0===e&&(e=ne);var t=o;return o=e,(this._initted||this._startAt)&&(this.timeline&&this.timeline.revert(e),this.totalTime(-.01,e.suppressEvents)),"nested"!==this.data&&!1!==e.kill&&this.kill(),o=t,this},t.globalTime=function(e){for(var t=this,n=arguments.length?e:t.rawTime();t;)n=t._start+n/(t._ts||1),t=t._dp;return!this.parent&&this.vars.immediateRender?-1:n},t.repeat=function(e){return arguments.length?(this._repeat=e===1/0?-2:e,Xe(this)):-2===this._repeat?1/0:this._repeat},t.repeatDelay=function(e){if(arguments.length){var t=this._time;return this._rDelay=e,Xe(this),t?this.time(t):this}return this._rDelay},t.yoyo=function(e){return arguments.length?(this._yoyo=e,this):this._yoyo},t.seek=function(e,t){return this.totalTime(Ye(this,e),R(t))},t.restart=function(e,t){return this.play().totalTime(e?-this._delay:0,R(t))},t.play=function(e,t){return null!=e&&this.seek(e,t),this.reversed(!1).paused(!1)},t.reverse=function(e,t){return null!=e&&this.seek(e||this.totalDuration(),t),this.reversed(!0).paused(!1)},t.pause=function(e,t){return null!=e&&this.seek(e,t),this.paused(!0)},t.resume=function(){return this.paused(!1)},t.reversed=function(e){return arguments.length?(!!e!==this.reversed()&&this.timeScale(-this._rts||(e?-1e-8:0)),this):this._rts<0},t.invalidate=function(){return this._initted=this._act=0,this._zTime=-1e-8,this},t.isActive=function(){var e,t=this.parent||this._dp,n=this._start;return!(t&&!(this._ts&&this._initted&&t.isActive()&&(e=t.rawTime(!0))>=n&&e<this.endTime(!0)-S))},t.eventCallback=function(e,t,n){var r=this.vars;return arguments.length>1?(t?(r[e]=t,n&&(r[e+"Params"]=n),"onUpdate"===e&&(this._onUpdate=t)):delete r[e],this):r[e]},t.then=function(e){var t=this;return new Promise((function(n){var r=P(e)?e:xe,i=function(){var e=t.then;t.then=null,P(r)&&(r=r(t))&&(r.then||r===t)&&(t.then=e),n(r),t.then=e};t._initted&&1===t.totalProgress()&&t._ts>=0||!t._tTime&&t._ts<0?i():t._prom=i}))},t.kill=function(){xt(this)},e}();Se(Xt.prototype,{_time:0,_start:0,_end:0,_tTime:0,_tDur:0,_dirty:0,_repeat:0,_yoyo:!1,parent:null,_initted:!1,_rDelay:0,_ts:1,_dp:0,ratio:0,_zTime:-1e-8,_prom:0,_ps:!1,_rts:1});var Gt=function(e){function t(t,n){var i;return void 0===t&&(t={}),(i=e.call(this,t)||this).labels={},i.smoothChildTiming=!!t.smoothChildTiming,i.autoRemoveChildren=!!t.autoRemoveChildren,i._sort=R(t.sortChildren),l&&Fe(t.parent||l,r(i),n),t.reversed&&i.reverse(),t.paused&&i.paused(!0),t.scrollTrigger&&Ve(r(i),t.scrollTrigger),i}i(t,e);var n=t.prototype;return n.to=function(e,t,n){return Je(0,arguments,this),this},n.from=function(e,t,n){return Je(1,arguments,this),this},n.fromTo=function(e,t,n,r){return Je(2,arguments,this),this},n.set=function(e,t,n){return t.duration=0,t.parent=this,Ee(t).repeatDelay||(t.repeat=0),t.immediateRender=!!t.immediateRender,new on(e,t,Ye(this,n),1),this},n.call=function(e,t,n){return Fe(this,on.delayedCall(0,e,t),n)},n.staggerTo=function(e,t,n,r,i,s,o){return n.duration=t,n.stagger=n.stagger||r,n.onComplete=s,n.onCompleteParams=o,n.parent=this,new on(e,n,Ye(this,i)),this},n.staggerFrom=function(e,t,n,r,i,s,o){return n.runBackwards=1,Ee(n).immediateRender=R(n.immediateRender),this.staggerTo(e,t,n,r,i,s,o)},n.staggerFromTo=function(e,t,n,r,i,s,o,a){return r.startAt=n,Ee(r).immediateRender=R(r.immediateRender),this.staggerTo(e,t,r,i,s,o,a)},n.render=function(e,t,n){var r,i,s,a,c,u,d,h,p,f,m,g,v=this._time,y=this._dirty?this.totalDuration():this._tDur,b=this._dur,w=e<=0?0:ge(e),_=this._zTime<0!=e<0&&(this._initted||!b);if(this!==l&&w>y&&e>=0&&(w=y),w!==this._tTime||n||_){if(v!==this._time&&b&&(w+=this._time-v,e+=this._time-v),r=w,p=this._start,u=!(h=this._ts),_&&(b||(v=this._zTime),(e||!t)&&(this._zTime=e)),this._repeat){if(m=this._yoyo,c=b+this._rDelay,this._repeat<-1&&e<0)return this.totalTime(100*c+e,t,n);if(r=ge(w%c),w===y?(a=this._repeat,r=b):((a=~~(w/c))&&a===w/c&&(r=b,a--),r>b&&(r=b)),f=$e(this._tTime,c),!v&&this._tTime&&f!==a&&(f=a),m&&1&a&&(r=b-r,g=1),a!==f&&!this._lock){var x=m&&1&f,k=x===(m&&1&a);if(a<f&&(x=!x),v=x?0:b,this._lock=1,this.render(v||(g?0:ge(a*c)),t,!b)._lock=0,this._tTime=w,!t&&this.parent&&_t(this,"onRepeat"),this.vars.repeatRefresh&&!g&&(this.invalidate()._lock=1),v&&v!==this._time||u!==!this._ts||this.vars.onRepeat&&!this.parent&&!this._act)return this;if(b=this._dur,y=this._tDur,k&&(this._lock=2,v=x?b:-1e-4,this.render(v,!0),this.vars.repeatRefresh&&!g&&this.invalidate()),this._lock=0,!this._ts&&!u)return this;qt(this,g)}}if(this._hasPause&&!this._forcing&&this._lock<2&&(d=function(e,t,n){var r;if(n>t)for(r=e._first;r&&r._start<=n;){if("isPause"===r.data&&r._start>t)return r;r=r._next}else for(r=e._last;r&&r._start>=n;){if("isPause"===r.data&&r._start<t)return r;r=r._prev}}(this,ge(v),ge(r)),d&&(w-=r-(r=d._start))),this._tTime=w,this._time=r,this._act=!h,this._initted||(this._onUpdate=this.vars.onUpdate,this._initted=1,this._zTime=e,v=0),!v&&r&&!t&&(_t(this,"onStart"),this._tTime!==w))return this;if(r>=v&&e>=0)for(i=this._first;i;){if(s=i._next,(i._act||r>=i._start)&&i._ts&&d!==i){if(i.parent!==this)return this.render(e,t,n);if(i.render(i._ts>0?(r-i._start)*i._ts:(i._dirty?i.totalDuration():i._tDur)+(r-i._start)*i._ts,t,n),r!==this._time||!this._ts&&!u){d=0,s&&(w+=this._zTime=-1e-8);break}}i=s}else{i=this._last;for(var j=e<0?e:r;i;){if(s=i._prev,(i._act||j<=i._end)&&i._ts&&d!==i){if(i.parent!==this)return this.render(e,t,n);if(i.render(i._ts>0?(j-i._start)*i._ts:(i._dirty?i.totalDuration():i._tDur)+(j-i._start)*i._ts,t,n||o&&(i._initted||i._startAt)),r!==this._time||!this._ts&&!u){d=0,s&&(w+=this._zTime=j?-1e-8:S);break}}i=s}}if(d&&!t&&(this.pause(),d.render(r>=v?0:-1e-8)._zTime=r>=v?1:-1,this._ts))return this._start=p,Ne(this),this.render(e,t,n);this._onUpdate&&!t&&_t(this,"onUpdate",!0),(w===y&&this._tTime>=this.totalDuration()||!w&&v)&&(p!==this._start&&Math.abs(h)===Math.abs(this._ts)||this._lock||((e||!b)&&(w===y&&this._ts>0||!w&&this._ts<0)&&Oe(this,1),t||e<0&&!v||!w&&!v&&y||(_t(this,w===y&&e>=0?"onComplete":"onReverseComplete",!0),this._prom&&!(w<y&&this.timeScale()>0)&&this._prom())))}return this},n.add=function(e,t){var n=this;if(M(t)||(t=Ye(this,t,e)),!(e instanceof Xt)){if(B(e))return e.forEach((function(e){return n.add(e,t)})),this;if(O(e))return this.addLabel(e,t);if(!P(e))return this;e=on.delayedCall(0,e)}return this!==e?Fe(this,e,t):this},n.getChildren=function(e,t,n,r){void 0===e&&(e=!0),void 0===t&&(t=!0),void 0===n&&(n=!0),void 0===r&&(r=-x);for(var i=[],s=this._first;s;)s._start>=r&&(s instanceof on?t&&i.push(s):(n&&i.push(s),e&&i.push.apply(i,s.getChildren(!0,t,n)))),s=s._next;return i},n.getById=function(e){for(var t=this.getChildren(1,1,1),n=t.length;n--;)if(t[n].vars.id===e)return t[n]},n.remove=function(e){return O(e)?this.removeLabel(e):P(e)?this.killTweensOf(e):(Ae(this,e),e===this._recent&&(this._recent=this._last),Pe(this))},n.totalTime=function(t,n){return arguments.length?(this._forcing=1,!this._dp&&this._ts&&(this._start=ge(Lt.time-(this._ts>0?t/this._ts:(this.totalDuration()-t)/-this._ts))),e.prototype.totalTime.call(this,t,n),this._forcing=0,this):this._tTime},n.addLabel=function(e,t){return this.labels[e]=Ye(this,t),this},n.removeLabel=function(e){return delete this.labels[e],this},n.addPause=function(e,t,n){var r=on.delayedCall(0,t||K,n);return r.data="isPause",this._hasPause=1,Fe(this,r,Ye(this,e))},n.removePause=function(e){var t=this._first;for(e=Ye(this,e);t;)t._start===e&&"isPause"===t.data&&Oe(t),t=t._next},n.killTweensOf=function(e,t,n){for(var r=this.getTweensOf(e,n),i=r.length;i--;)Yt!==r[i]&&r[i].kill(e,t);return this},n.getTweensOf=function(e,t){for(var n,r=[],i=it(e),s=this._first,o=M(t);s;)s instanceof on?ye(s._targets,i)&&(o?(!Yt||s._initted&&s._ts)&&s.globalTime(0)<=t&&s.globalTime(s.totalDuration())>t:!t||s.isActive())&&r.push(s):(n=s.getTweensOf(i,t)).length&&r.push.apply(r,n),s=s._next;return r},n.tweenTo=function(e,t){t=t||{};var n,r=this,i=Ye(r,e),s=t,o=s.startAt,a=s.onStart,l=s.onStartParams,c=s.immediateRender,u=on.to(r,Se({ease:t.ease||"none",lazy:!1,immediateRender:!1,time:i,overwrite:"auto",duration:t.duration||Math.abs((i-(o&&"time"in o?o.time:r._time))/r.timeScale())||S,onStart:function(){if(r.pause(),!n){var e=t.duration||Math.abs((i-(o&&"time"in o?o.time:r._time))/r.timeScale());u._dur!==e&&ze(u,e,0,1).render(u._time,!0,!0),n=1}a&&a.apply(u,l||[])}},t));return c?u.render(0):u},n.tweenFromTo=function(e,t,n){return this.tweenTo(t,Se({startAt:{time:Ye(this,e)}},n))},n.recent=function(){return this._recent},n.nextLabel=function(e){return void 0===e&&(e=this._time),wt(this,Ye(this,e))},n.previousLabel=function(e){return void 0===e&&(e=this._time),wt(this,Ye(this,e),1)},n.currentLabel=function(e){return arguments.length?this.seek(e,!0):this.previousLabel(this._time+S)},n.shiftChildren=function(e,t,n){void 0===n&&(n=0);for(var r,i=this._first,s=this.labels;i;)i._start>=n&&(i._start+=e,i._end+=e),i=i._next;if(t)for(r in s)s[r]>=n&&(s[r]+=e);return Pe(this)},n.invalidate=function(t){var n=this._first;for(this._lock=0;n;)n.invalidate(t),n=n._next;return e.prototype.invalidate.call(this,t)},n.clear=function(e){void 0===e&&(e=!0);for(var t,n=this._first;n;)t=n._next,this.remove(n),n=t;return this._dp&&(this._time=this._tTime=this._pTime=0),e&&(this.labels={}),Pe(this)},n.totalDuration=function(e){var t,n,r,i=0,s=this,o=s._last,a=x;if(arguments.length)return s.timeScale((s._repeat<0?s.duration():s.totalDuration())/(s.reversed()?-e:e));if(s._dirty){for(r=s.parent;o;)t=o._prev,o._dirty&&o.totalDuration(),(n=o._start)>a&&s._sort&&o._ts&&!s._lock?(s._lock=1,Fe(s,o,n-o._delay,1)._lock=0):a=n,n<0&&o._ts&&(i-=n,(!r&&!s._dp||r&&r.smoothChildTiming)&&(s._start+=n/s._ts,s._time-=n,s._tTime-=n),s.shiftChildren(-n,!1,-Infinity),a=0),o._end>i&&o._ts&&(i=o._end),o=t;ze(s,s===l&&s._time>i?s._time:i,1,1),s._dirty=0}return s._tDur},t.updateRoot=function(e){if(l._ts&&(we(l,De(e,l)),p=Lt.frame),Lt.frame>=le){le+=w.autoSleep||120;var t=l._first;if((!t||!t._ts)&&w.autoSleep&&Lt._listeners.length<2){for(;t&&!t._ts;)t=t._next;t||Lt.sleep()}}},t}(Xt);Se(Gt.prototype,{_lock:0,_hasPause:0,_forcing:0});var Yt,Jt,Qt=function(e,t,n,r,i,s,o){var a,l,c,u,d,h,p,f,m=new wn(this._pt,e,t,0,1,fn,null,i),g=0,v=0;for(m.b=n,m.e=r,n+="",(p=~(r+="").indexOf("random("))&&(r=vt(r)),s&&(s(f=[n,r],e,t),n=f[0],r=f[1]),l=n.match(U)||[];a=U.exec(r);)u=a[0],d=r.substring(g,a.index),c?c=(c+1)%5:"rgba("===d.substr(-5)&&(c=1),u!==l[v++]&&(h=parseFloat(l[v-1])||0,m._pt={_next:m._pt,p:d||1===v?d:",",s:h,c:"="===u.charAt(1)?ve(h,u)-h:parseFloat(u)-h,m:c&&c<4?Math.round:0},g=U.lastIndex);return m.c=g<r.length?r.substring(g,r.length):"",m.fp=o,(W.test(r)||p)&&(m.e=0),this._pt=m,m},Zt=function(e,t,n,r,i,s,o,a,l,c){P(r)&&(r=r(i||0,e,s));var u,d=e[t],h="get"!==n?n:P(d)?l?e[t.indexOf("set")||!P(e["get"+t.substr(3)])?t:"get"+t.substr(3)](l):e[t]():d,p=P(d)?l?cn:ln:an;if(O(r)&&(~r.indexOf("random(")&&(r=vt(r)),"="===r.charAt(1)&&((u=ve(h,r)+(Ke(h)||0))||0===u)&&(r=u)),!c||h!==r||Jt)return isNaN(h*r)||""===r?(!d&&!(t in e)&&J(t,r),Qt.call(this,e,t,h,r,p,a||w.stringFilter,l)):(u=new wn(this._pt,e,t,+h||0,r-(h||0),"boolean"==typeof d?pn:hn,0,p),l&&(u.fp=l),o&&u.modifier(o,this,e),this._pt=u)},Kt=function(e,t,n,r,i,s){var o,a,l,c;if(oe[e]&&!1!==(o=new oe[e]).init(i,o.rawVars?t[e]:function(e,t,n,r,i){if(P(e)&&(e=nn(e,i,t,n,r)),!I(e)||e.style&&e.nodeType||B(e)||N(e))return O(e)?nn(e,i,t,n,r):e;var s,o={};for(s in e)o[s]=nn(e[s],i,t,n,r);return o}(t[e],r,i,s,n),n,r,s)&&(n._pt=a=new wn(n._pt,i,e,0,1,o.render,o,0,o.priority),n!==f))for(l=n._ptLookup[n._targets.indexOf(i)],c=o._props.length;c--;)l[o._props[c]]=a;return o},en=function e(t,n,r){var i,a,c,u,d,h,p,f,m,g,v,y,b,w=t.vars,k=w.ease,j=w.startAt,C=w.immediateRender,E=w.lazy,T=w.onUpdate,A=w.onUpdateParams,O=w.callbackScope,P=w.runBackwards,M=w.yoyoEase,L=w.keyframes,I=w.autoRevert,$=t._dur,D=t._startAt,N=t._targets,B=t.parent,q=B&&"nested"===B.data?B.vars.targets:N,F="auto"===t._overwrite&&!s,V=t.timeline;if(V&&(!L||!k)&&(k="none"),t._ease=Ft(k,_.ease),t._yEase=M?Bt(Ft(!0===M?k:M,_.ease)):0,M&&t._yoyo&&!t._repeat&&(M=t._yEase,t._yEase=t._ease,t._ease=M),t._from=!V&&!!w.runBackwards,!V||L&&!w.stagger){if(y=(f=N[0]?he(N[0]).harness:0)&&w[f.prop],i=Ce(w,re),D&&(D._zTime<0&&D.progress(1),n<0&&P&&C&&!I?D.render(-1,!0):D.revert(P&&$?te:ee),D._lazy=0),j){if(Oe(t._startAt=on.set(N,Se({data:"isStart",overwrite:!1,parent:B,immediateRender:!0,lazy:R(E),startAt:null,delay:0,onUpdate:T,onUpdateParams:A,callbackScope:O,stagger:0},j))),t._startAt._dp=0,n<0&&(o||!C&&!I)&&t._startAt.revert(te),C&&$&&n<=0&&r<=0)return void(n&&(t._zTime=n))}else if(P&&$&&!D)if(n&&(C=!1),c=Se({overwrite:!1,data:"isFromStart",lazy:C&&R(E),immediateRender:C,stagger:0,parent:B},i),y&&(c[f.prop]=y),Oe(t._startAt=on.set(N,c)),t._startAt._dp=0,n<0&&(o?t._startAt.revert(te):t._startAt.render(-1,!0)),t._zTime=n,C){if(!n)return}else e(t._startAt,S,S);for(t._pt=t._ptCache=0,E=$&&R(E)||E&&!$,a=0;a<N.length;a++){if(p=(d=N[a])._gsap||de(N)[a]._gsap,t._ptLookup[a]=g={},se[p.id]&&ie.length&&be(),v=q===N?a:q.indexOf(d),f&&!1!==(m=new f).init(d,y||i,t,v,q)&&(t._pt=u=new wn(t._pt,d,m.name,0,1,m.render,m,0,m.priority),m._props.forEach((function(e){g[e]=u})),m.priority&&(h=1)),!f||y)for(c in i)oe[c]&&(m=Kt(c,i,t,v,d,q))?m.priority&&(h=1):g[c]=u=Zt.call(t,d,c,"get",i[c],v,q,0,w.stringFilter);t._op&&t._op[a]&&t.kill(d,t._op[a]),F&&t._pt&&(Yt=t,l.killTweensOf(d,g,t.globalTime(n)),b=!t.parent,Yt=0),t._pt&&E&&(se[p.id]=1)}h&&bn(t),t._onInit&&t._onInit(t)}t._onUpdate=T,t._initted=(!t._op||t._pt)&&!b,L&&n<=0&&V.render(x,!0,!0)},tn=function(e,t,n,r){var i,s,o=t.ease||r||"power1.inOut";if(B(t))s=n[e]||(n[e]=[]),t.forEach((function(e,n){return s.push({t:n/(t.length-1)*100,v:e,e:o})}));else for(i in t)s=n[i]||(n[i]=[]),"ease"===i||s.push({t:parseFloat(e),v:t[i],e:o})},nn=function(e,t,n,r,i){return P(e)?e.call(t,n,r,i):O(e)&&~e.indexOf("random(")?vt(e):e},rn=ue+"repeat,repeatDelay,yoyo,repeatRefresh,yoyoEase,autoRevert",sn={};fe(rn+",id,stagger,delay,duration,paused,scrollTrigger",(function(e){return sn[e]=1}));var on=function(e){function t(t,n,i,o){var a;"number"==typeof n&&(i.duration=n,n=i,i=null);var c,u,d,h,p,f,m,g,v=(a=e.call(this,o?n:Ee(n))||this).vars,y=v.duration,b=v.delay,_=v.immediateRender,x=v.stagger,S=v.overwrite,k=v.keyframes,j=v.defaults,C=v.scrollTrigger,E=v.yoyoEase,T=n.parent||l,A=(B(t)||N(t)?M(t[0]):"length"in n)?[t]:it(t);if(a._targets=A.length?de(A):Q("GSAP target "+t+" not found. https://greensock.com",!w.nullTargetWarn)||[],a._ptLookup=[],a._overwrite=S,k||x||D(y)||D(b)){if(n=a.vars,(c=a.timeline=new Gt({data:"nested",defaults:j||{},targets:T&&"nested"===T.data?T.vars.targets:A})).kill(),c.parent=c._dp=r(a),c._start=0,x||D(y)||D(b)){if(h=A.length,m=x&&at(x),I(x))for(p in x)~rn.indexOf(p)&&(g||(g={}),g[p]=x[p]);for(u=0;u<h;u++)(d=Ce(n,sn)).stagger=0,E&&(d.yoyoEase=E),g&&ke(d,g),f=A[u],d.duration=+nn(y,r(a),u,f,A),d.delay=(+nn(b,r(a),u,f,A)||0)-a._delay,!x&&1===h&&d.delay&&(a._delay=b=d.delay,a._start+=b,d.delay=0),c.to(f,d,m?m(u,f,A):0),c._ease=Rt.none;c.duration()?y=b=0:a.timeline=0}else if(k){Ee(Se(c.vars.defaults,{ease:"none"})),c._ease=Ft(k.ease||n.ease||"none");var O,P,L,$=0;if(B(k))k.forEach((function(e){return c.to(A,e,">")})),c.duration();else{for(p in d={},k)"ease"===p||"easeEach"===p||tn(p,k[p],d,k.easeEach);for(p in d)for(O=d[p].sort((function(e,t){return e.t-t.t})),$=0,u=0;u<O.length;u++)(L={ease:(P=O[u]).e,duration:(P.t-(u?O[u-1].t:0))/100*y})[p]=P.v,c.to(A,L,$),$+=L.duration;c.duration()<y&&c.to({},{duration:y-c.duration()})}}y||a.duration(y=c.duration())}else a.timeline=0;return!0!==S||s||(Yt=r(a),l.killTweensOf(A),Yt=0),Fe(T,r(a),i),n.reversed&&a.reverse(),n.paused&&a.paused(!0),(_||!y&&!k&&a._start===ge(T._time)&&R(_)&&Ie(r(a))&&"nested"!==T.data)&&(a._tTime=-1e-8,a.render(Math.max(0,-b)||0)),C&&Ve(r(a),C),a}i(t,e);var n=t.prototype;return n.render=function(e,t,n){var r,i,s,a,l,c,u,d,h,p=this._time,f=this._tDur,m=this._dur,g=e<0,v=e>f-S&&!g?f:e<S?0:e;if(m){if(v!==this._tTime||!e||n||!this._initted&&this._tTime||this._startAt&&this._zTime<0!==g){if(r=v,d=this.timeline,this._repeat){if(a=m+this._rDelay,this._repeat<-1&&g)return this.totalTime(100*a+e,t,n);if(r=ge(v%a),v===f?(s=this._repeat,r=m):((s=~~(v/a))&&s===v/a&&(r=m,s--),r>m&&(r=m)),(c=this._yoyo&&1&s)&&(h=this._yEase,r=m-r),l=$e(this._tTime,a),r===p&&!n&&this._initted)return this._tTime=v,this;s!==l&&(d&&this._yEase&&qt(d,c),!this.vars.repeatRefresh||c||this._lock||(this._lock=n=1,this.render(ge(a*s),!0).invalidate()._lock=0))}if(!this._initted){if(Ue(this,g?e:r,n,t,v))return this._tTime=0,this;if(p!==this._time)return this;if(m!==this._dur)return this.render(e,t,n)}if(this._tTime=v,this._time=r,!this._act&&this._ts&&(this._act=1,this._lazy=0),this.ratio=u=(h||this._ease)(r/m),this._from&&(this.ratio=u=1-u),r&&!p&&!t&&(_t(this,"onStart"),this._tTime!==v))return this;for(i=this._pt;i;)i.r(u,i.d),i=i._next;d&&d.render(e<0?e:!r&&c?-1e-8:d._dur*d._ease(r/this._dur),t,n)||this._startAt&&(this._zTime=e),this._onUpdate&&!t&&(g&&Le(this,e,0,n),_t(this,"onUpdate")),this._repeat&&s!==l&&this.vars.onRepeat&&!t&&this.parent&&_t(this,"onRepeat"),v!==this._tDur&&v||this._tTime!==v||(g&&!this._onUpdate&&Le(this,e,0,!0),(e||!m)&&(v===this._tDur&&this._ts>0||!v&&this._ts<0)&&Oe(this,1),t||g&&!p||!(v||p||c)||(_t(this,v===f?"onComplete":"onReverseComplete",!0),this._prom&&!(v<f&&this.timeScale()>0)&&this._prom()))}}else!function(e,t,n,r){var i,s,a,l=e.ratio,c=t<0||!t&&(!e._start&&We(e)&&(e._initted||!He(e))||(e._ts<0||e._dp._ts<0)&&!He(e))?0:1,u=e._rDelay,d=0;if(u&&e._repeat&&(d=Ze(0,e._tDur,t),s=$e(d,u),e._yoyo&&1&s&&(c=1-c),s!==$e(e._tTime,u)&&(l=1-c,e.vars.repeatRefresh&&e._initted&&e.invalidate())),c!==l||o||r||e._zTime===S||!t&&e._zTime){if(!e._initted&&Ue(e,t,r,n,d))return;for(a=e._zTime,e._zTime=t||(n?S:0),n||(n=t&&!a),e.ratio=c,e._from&&(c=1-c),e._time=0,e._tTime=d,i=e._pt;i;)i.r(c,i.d),i=i._next;t<0&&Le(e,t,0,!0),e._onUpdate&&!n&&_t(e,"onUpdate"),d&&e._repeat&&!n&&e.parent&&_t(e,"onRepeat"),(t>=e._tDur||t<0)&&e.ratio===c&&(c&&Oe(e,1),n||o||(_t(e,c?"onComplete":"onReverseComplete",!0),e._prom&&e._prom()))}else e._zTime||(e._zTime=t)}(this,e,t,n);return this},n.targets=function(){return this._targets},n.invalidate=function(t){return(!t||!this.vars.runBackwards)&&(this._startAt=0),this._pt=this._op=this._onUpdate=this._lazy=this.ratio=0,this._ptLookup=[],this.timeline&&this.timeline.invalidate(t),e.prototype.invalidate.call(this,t)},n.resetTo=function(e,t,n,r){m||Lt.wake(),this._ts||this.play();var i=Math.min(this._dur,(this._dp._time-this._start)*this._ts);return this._initted||en(this,i),function(e,t,n,r,i,s,o){var a,l,c,u,d=(e._pt&&e._ptCache||(e._ptCache={}))[t];if(!d)for(d=e._ptCache[t]=[],c=e._ptLookup,u=e._targets.length;u--;){if((a=c[u][t])&&a.d&&a.d._pt)for(a=a.d._pt;a&&a.p!==t&&a.fp!==t;)a=a._next;if(!a)return Jt=1,e.vars[t]="+=0",en(e,o),Jt=0,1;d.push(a)}for(u=d.length;u--;)(a=(l=d[u])._pt||l).s=!r&&0!==r||i?a.s+(r||0)+s*a.c:r,a.c=n-a.s,l.e&&(l.e=me(n)+Ke(l.e)),l.b&&(l.b=a.s+Ke(l.b))}(this,e,t,n,r,this._ease(i/this._dur),i)?this.resetTo(e,t,n,r):(Be(this,0),this.parent||Te(this._dp,this,"_first","_last",this._dp._sort?"_start":0),this.render(0))},n.kill=function(e,t){if(void 0===t&&(t="all"),!(e||t&&"all"!==t))return this._lazy=this._pt=0,this.parent?xt(this):this;if(this.timeline){var n=this.timeline.totalDuration();return this.timeline.killTweensOf(e,t,Yt&&!0!==Yt.vars.overwrite)._first||xt(this),this.parent&&n!==this.timeline.totalDuration()&&ze(this,this._dur*this.timeline._tDur/n,0,1),this}var r,i,s,o,a,l,c,u=this._targets,d=e?it(e):u,h=this._ptLookup,p=this._pt;if((!t||"all"===t)&&function(e,t){for(var n=e.length,r=n===t.length;r&&n--&&e[n]===t[n];);return n<0}(u,d))return"all"===t&&(this._pt=0),xt(this);for(r=this._op=this._op||[],"all"!==t&&(O(t)&&(a={},fe(t,(function(e){return a[e]=1})),t=a),t=function(e,t){var n,r,i,s,o=e[0]?he(e[0]).harness:0,a=o&&o.aliases;if(!a)return t;for(r in n=ke({},t),a)if(r in n)for(i=(s=a[r].split(",")).length;i--;)n[s[i]]=n[r];return n}(u,t)),c=u.length;c--;)if(~d.indexOf(u[c]))for(a in i=h[c],"all"===t?(r[c]=t,o=i,s={}):(s=r[c]=r[c]||{},o=t),o)(l=i&&i[a])&&("kill"in l.d&&!0!==l.d.kill(a)||Ae(this,l,"_pt"),delete i[a]),"all"!==s&&(s[a]=1);return this._initted&&!this._pt&&p&&xt(this),this},t.to=function(e,n){return new t(e,n,arguments[2])},t.from=function(e,t){return Je(1,arguments)},t.delayedCall=function(e,n,r,i){return new t(n,0,{immediateRender:!1,lazy:!1,overwrite:!1,delay:e,onComplete:n,onReverseComplete:n,onCompleteParams:r,onReverseCompleteParams:r,callbackScope:i})},t.fromTo=function(e,t,n){return Je(2,arguments)},t.set=function(e,n){return n.duration=0,n.repeatDelay||(n.repeat=0),new t(e,n)},t.killTweensOf=function(e,t,n){return l.killTweensOf(e,t,n)},t}(Xt);Se(on.prototype,{_targets:[],_lazy:0,_startAt:0,_op:0,_onInit:0}),fe("staggerTo,staggerFrom,staggerFromTo",(function(e){on[e]=function(){var t=new Gt,n=tt.call(arguments,0);return n.splice("staggerFromTo"===e?5:4,0,0),t[e].apply(t,n)}}));var an=function(e,t,n){return e[t]=n},ln=function(e,t,n){return e[t](n)},cn=function(e,t,n,r){return e[t](r.fp,n)},un=function(e,t,n){return e.setAttribute(t,n)},dn=function(e,t){return P(e[t])?ln:L(e[t])&&e.setAttribute?un:an},hn=function(e,t){return t.set(t.t,t.p,Math.round(1e6*(t.s+t.c*e))/1e6,t)},pn=function(e,t){return t.set(t.t,t.p,!!(t.s+t.c*e),t)},fn=function(e,t){var n=t._pt,r="";if(!e&&t.b)r=t.b;else if(1===e&&t.e)r=t.e;else{for(;n;)r=n.p+(n.m?n.m(n.s+n.c*e):Math.round(1e4*(n.s+n.c*e))/1e4)+r,n=n._next;r+=t.c}t.set(t.t,t.p,r,t)},mn=function(e,t){for(var n=t._pt;n;)n.r(e,n.d),n=n._next},gn=function(e,t,n,r){for(var i,s=this._pt;s;)i=s._next,s.p===r&&s.modifier(e,t,n),s=i},vn=function(e){for(var t,n,r=this._pt;r;)n=r._next,r.p===e&&!r.op||r.op===e?Ae(this,r,"_pt"):r.dep||(t=1),r=n;return!t},yn=function(e,t,n,r){r.mSet(e,t,r.m.call(r.tween,n,r.mt),r)},bn=function(e){for(var t,n,r,i,s=e._pt;s;){for(t=s._next,n=r;n&&n.pr>s.pr;)n=n._next;(s._prev=n?n._prev:i)?s._prev._next=s:r=s,(s._next=n)?n._prev=s:i=s,s=t}e._pt=r},wn=function(){function e(e,t,n,r,i,s,o,a,l){this.t=t,this.s=r,this.c=i,this.p=n,this.r=s||hn,this.d=o||this,this.set=a||an,this.pr=l||0,this._next=e,e&&(e._prev=this)}return e.prototype.modifier=function(e,t,n){this.mSet=this.mSet||this.set,this.set=yn,this.m=e,this.mt=n,this.tween=t},e}();fe(ue+"parent,duration,ease,delay,overwrite,runBackwards,startAt,yoyo,immediateRender,repeat,repeatDelay,data,paused,reversed,lazy,callbackScope,stringFilter,id,yoyoEase,stagger,inherit,repeatRefresh,keyframes,autoRevert,scrollTrigger",(function(e){return re[e]=1})),X.TweenMax=X.TweenLite=on,X.TimelineLite=X.TimelineMax=Gt,l=new Gt({sortChildren:!1,defaults:_,autoRemoveChildren:!0,id:"root",smoothChildTiming:!0}),w.stringFilter=Mt;var _n=[],xn={},Sn=[],kn=0,jn=function(e){return(xn[e]||Sn).map((function(e){return e()}))},Cn=function(){var e=Date.now(),t=[];e-kn>2&&(jn("matchMediaInit"),_n.forEach((function(e){var n,r,i,s,o=e.queries,a=e.conditions;for(r in o)(n=c.matchMedia(o[r]).matches)&&(i=1),n!==a[r]&&(a[r]=n,s=1);s&&(e.revert(),i&&t.push(e))})),jn("matchMediaRevert"),t.forEach((function(e){return e.onMatch(e)})),kn=e,jn("matchMedia"))},En=function(){function e(e,t){this.selector=t&&st(t),this.data=[],this._r=[],this.isReverted=!1,e&&this.add(e)}var t=e.prototype;return t.add=function(e,t,n){P(e)&&(n=t,t=e,e=P);var r=this,i=function(){var e,i=a,s=r.selector;return i&&i!==r&&i.data.push(r),n&&(r.selector=st(n)),a=r,e=t.apply(r,arguments),P(e)&&r._r.push(e),a=i,r.selector=s,r.isReverted=!1,e};return r.last=i,e===P?i(r):e?r[e]=i:i},t.ignore=function(e){var t=a;a=null,e(this),a=t},t.getTweens=function(){var t=[];return this.data.forEach((function(n){return n instanceof e?t.push.apply(t,n.getTweens()):n instanceof on&&!(n.parent&&"nested"===n.parent.data)&&t.push(n)})),t},t.clear=function(){this._r.length=this.data.length=0},t.kill=function(e,t){var n=this;if(e){var r=this.getTweens();this.data.forEach((function(e){"isFlip"===e.data&&(e.revert(),e.getChildren(!0,!0,!1).forEach((function(e){return r.splice(r.indexOf(e),1)})))})),r.map((function(e){return{g:e.globalTime(0),t:e}})).sort((function(e,t){return t.g-e.g||-1})).forEach((function(t){return t.t.revert(e)})),this.data.forEach((function(t){return!(t instanceof Xt)&&t.revert&&t.revert(e)})),this._r.forEach((function(t){return t(e,n)})),this.isReverted=!0}else this.data.forEach((function(e){return e.kill&&e.kill()}));if(this.clear(),t){var i=_n.indexOf(this);~i&&_n.splice(i,1)}},t.revert=function(e){this.kill(e||{})},e}(),Tn=function(){function e(e){this.contexts=[],this.scope=e}var t=e.prototype;return t.add=function(e,t,n){I(e)||(e={matches:e});var r,i,s,o=new En(0,n||this.scope),a=o.conditions={};for(i in this.contexts.push(o),t=o.add("onMatch",t),o.queries=e,e)"all"===i?s=1:(r=c.matchMedia(e[i]))&&(_n.indexOf(o)<0&&_n.push(o),(a[i]=r.matches)&&(s=1),r.addListener?r.addListener(Cn):r.addEventListener("change",Cn));return s&&t(o),this},t.revert=function(e){this.kill(e||{})},t.kill=function(e){this.contexts.forEach((function(t){return t.kill(e,!0)}))},e}(),An={registerPlugin:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];t.forEach((function(e){return St(e)}))},timeline:function(e){return new Gt(e)},getTweensOf:function(e,t){return l.getTweensOf(e,t)},getProperty:function(e,t,n,r){O(e)&&(e=it(e)[0]);var i=he(e||{}).get,s=n?xe:_e;return"native"===n&&(n=""),e?t?s((oe[t]&&oe[t].get||i)(e,t,n,r)):function(t,n,r){return s((oe[t]&&oe[t].get||i)(e,t,n,r))}:e},quickSetter:function(e,t,n){if((e=it(e)).length>1){var r=e.map((function(e){return Mn.quickSetter(e,t,n)})),i=r.length;return function(e){for(var t=i;t--;)r[t](e)}}e=e[0]||{};var s=oe[t],o=he(e),a=o.harness&&(o.harness.aliases||{})[t]||t,l=s?function(t){var r=new s;f._pt=0,r.init(e,n?t+n:t,f,0,[e]),r.render(1,r),f._pt&&mn(1,f)}:o.set(e,a);return s?l:function(t){return l(e,a,n?t+n:t,o,1)}},quickTo:function(e,t,n){var r,i=Mn.to(e,ke(((r={})[t]="+=0.1",r.paused=!0,r),n||{})),s=function(e,n,r){return i.resetTo(t,e,n,r)};return s.tween=i,s},isTweening:function(e){return l.getTweensOf(e,!0).length>0},defaults:function(e){return e&&e.ease&&(e.ease=Ft(e.ease,_.ease)),je(_,e||{})},config:function(e){return je(w,e||{})},registerEffect:function(e){var t=e.name,n=e.effect,r=e.plugins,i=e.defaults,s=e.extendTimeline;(r||"").split(",").forEach((function(e){return e&&!oe[e]&&!X[e]&&Q(t+" effect requires "+e+" plugin.")})),ae[t]=function(e,t,r){return n(it(e),Se(t||{},i),r)},s&&(Gt.prototype[t]=function(e,n,r){return this.add(ae[t](e,I(n)?n:(r=n)&&{},this),r)})},registerEase:function(e,t){Rt[e]=Ft(t)},parseEase:function(e,t){return arguments.length?Ft(e,t):Rt},getById:function(e){return l.getById(e)},exportRoot:function(e,t){void 0===e&&(e={});var n,r,i=new Gt(e);for(i.smoothChildTiming=R(e.smoothChildTiming),l.remove(i),i._dp=0,i._time=i._tTime=l._time,n=l._first;n;)r=n._next,!t&&!n._dur&&n instanceof on&&n.vars.onComplete===n._targets[0]||Fe(i,n,n._start-n._delay),n=r;return Fe(l,i,0),i},context:function(e,t){return e?new En(e,t):a},matchMedia:function(e){return new Tn(e)},matchMediaRefresh:function(){return _n.forEach((function(e){var t,n,r=e.conditions;for(n in r)r[n]&&(r[n]=!1,t=1);t&&e.revert()}))||Cn()},addEventListener:function(e,t){var n=xn[e]||(xn[e]=[]);~n.indexOf(t)||n.push(t)},removeEventListener:function(e,t){var n=xn[e],r=n&&n.indexOf(t);r>=0&&n.splice(r,1)},utils:{wrap:mt,wrapYoyo:gt,distribute:at,random:ut,snap:ct,normalize:pt,getUnit:Ke,clamp:et,splitColor:Et,toArray:it,selector:st,mapRange:yt,pipe:dt,unitize:ht,interpolate:bt,shuffle:ot},install:Y,effects:ae,ticker:Lt,updateRoot:Gt.updateRoot,plugins:oe,globalTimeline:l,core:{PropTween:wn,globals:Z,Tween:on,Timeline:Gt,Animation:Xt,getCache:he,_removeLinkedListItem:Ae,reverting:function(){return o},context:function(e){return e&&a&&(a.data.push(e),e._ctx=a),a},suppressOverwrites:function(e){return s=e}}};fe("to,from,fromTo,delayedCall,set,killTweensOf",(function(e){return An[e]=on[e]})),Lt.add(Gt.updateRoot),f=An.to({},{duration:0});var On=function(e,t){for(var n=e._pt;n&&n.p!==t&&n.op!==t&&n.fp!==t;)n=n._next;return n},Pn=function(e,t){return{name:e,rawVars:1,init:function(e,n,r){r._onInit=function(e){var r,i;if(O(n)&&(r={},fe(n,(function(e){return r[e]=1})),n=r),t){for(i in r={},n)r[i]=t(n[i]);n=r}!function(e,t){var n,r,i,s=e._targets;for(n in t)for(r=s.length;r--;)(i=e._ptLookup[r][n])&&(i=i.d)&&(i._pt&&(i=On(i,n)),i&&i.modifier&&i.modifier(t[n],e,s[r],n))}(e,n)}}}},Mn=An.registerPlugin({name:"attr",init:function(e,t,n,r,i){var s,o,a;for(s in this.tween=n,t)a=e.getAttribute(s)||"",(o=this.add(e,"setAttribute",(a||0)+"",t[s],r,i,0,0,s)).op=s,o.b=a,this._props.push(s)},render:function(e,t){for(var n=t._pt;n;)o?n.set(n.t,n.p,n.b,n):n.r(e,n.d),n=n._next}},{name:"endArray",init:function(e,t){for(var n=t.length;n--;)this.add(e,n,e[n]||0,t[n],0,0,0,0,0,1)}},Pn("roundProps",lt),Pn("modifiers"),Pn("snap",ct))||An;on.version=Gt.version=Mn.version="3.11.3",h=1,$()&&It();var Ln=Rt.Power0,In=Rt.Power1,Rn=Rt.Power2,$n=Rt.Power3,Dn=Rt.Power4,Nn=Rt.Linear,Bn=Rt.Quad,qn=Rt.Cubic,Fn=Rt.Quart,Vn=Rt.Quint,Un=Rt.Strong,Wn=Rt.Elastic,Hn=Rt.Back,zn=Rt.SteppedEase,Xn=Rt.Bounce,Gn=Rt.Sine,Yn=Rt.Expo,Jn=Rt.Circ},"./node_modules/gsap/index.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{Back:()=>r.Back,Bounce:()=>r.Bounce,CSSPlugin:()=>i.CSSPlugin,Circ:()=>r.Circ,Cubic:()=>r.Cubic,Elastic:()=>r.Elastic,Expo:()=>r.Expo,Linear:()=>r.Linear,Power0:()=>r.Power0,Power1:()=>r.Power1,Power2:()=>r.Power2,Power3:()=>r.Power3,Power4:()=>r.Power4,Quad:()=>r.Quad,Quart:()=>r.Quart,Quint:()=>r.Quint,Sine:()=>r.Sine,SteppedEase:()=>r.SteppedEase,Strong:()=>r.Strong,TimelineLite:()=>r.TimelineLite,TimelineMax:()=>r.TimelineMax,TweenLite:()=>r.TweenLite,TweenMax:()=>o,default:()=>s,gsap:()=>s});var r=n("./node_modules/gsap/gsap-core.js"),i=n("./node_modules/gsap/CSSPlugin.js"),s=r.gsap.registerPlugin(i.CSSPlugin)||r.gsap,o=s.core.Tween},"./node_modules/gsap/utils/paths.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{bezierToPoints:()=>W,cacheRawPathMeasurements:()=>D,convertToPath:()=>M,copyRawPath:()=>A,flatPointsToSegment:()=>H,getClosestData:()=>J,getPositionOnPath:()=>q,getRawPath:()=>T,getRotationAtProgress:()=>L,pointsToSegment:()=>z,rawPathToString:()=>Z,reverseSegment:()=>O,simplifyPoints:()=>G,sliceRawPath:()=>R,stringToRawPath:()=>U,subdivideSegment:()=>N,subdivideSegmentNear:()=>Q,transformRawPath:()=>F});var r,i=/[achlmqstvz]|(-?\d*\.?\d*(?:e[\-+]?\d+)?)[0-9]/gi,s=/(?:(-)?\d*\.?\d*(?:e[\-+]?\d+)?)[0-9]/gi,o=/[\+\-]?\d*\.?\d+e[\+\-]?\d+/gi,a=/(^[#\.][a-z]|[a-y][a-z])/i,l=Math.PI/180,c=180/Math.PI,u=Math.sin,d=Math.cos,h=Math.abs,p=Math.sqrt,f=Math.atan2,m=1e8,g=function(e){return"string"==typeof e},v=function(e){return"number"==typeof e},y={},b={},w=1e5,_=function(e){return Math.round((e+m)%1*w)/w||(e<0?0:1)},x=function(e){return Math.round(e*w)/w||0},S=function(e){return Math.round(1e10*e)/1e10||0},k=function(e,t,n,r){var i=e[t],s=1===r?6:N(i,n,r);if(s&&s+n+2<i.length)return e.splice(t,0,i.slice(0,n+s+2)),i.splice(0,n+s),1},j=function(e,t,n){var r=e.length,i=~~(n*r);if(e[i]>t){for(;--i&&e[i]>t;);i<0&&(i=0)}else for(;e[++i]<t&&i<r;);return i<r?i:r-1},C=function(e,t){return t.totalLength=e.totalLength,e.samples?(t.samples=e.samples.slice(0),t.lookup=e.lookup.slice(0),t.minLength=e.minLength,t.resolution=e.resolution):e.totalPoints&&(t.totalPoints=e.totalPoints),t},E=function(e,t){var n=e.length,r=e[n-1]||[],i=r.length;n&&t[0]===r[i-2]&&t[1]===r[i-1]&&(t=r.concat(t.slice(2)),n--),e[n]=t};function T(e){var t,n=(e=g(e)&&a.test(e)&&document.querySelector(e)||e).getAttribute?e:0;return n&&(e=e.getAttribute("d"))?(n._gsPath||(n._gsPath={}),(t=n._gsPath[e])&&!t._dirty?t:n._gsPath[e]=U(e)):e?g(e)?U(e):v(e[0])?[e]:e:console.warn("Expecting a <path> element or an SVG path data string")}function A(e){for(var t=[],n=0;n<e.length;n++)t[n]=C(e[n],e[n].slice(0));return C(e,t)}function O(e){var t,n=0;for(e.reverse();n<e.length;n+=2)t=e[n],e[n]=e[n+1],e[n+1]=t;e.reversed=!e.reversed}var P={rect:"rx,ry,x,y,width,height",circle:"r,cx,cy",ellipse:"rx,ry,cx,cy",line:"x1,x2,y1,y2"};function M(e,t){var n,r,i,o,a,l,c,u,d,h,p,f,m,g,v,y,b,w,_,x,S,k,j=e.tagName.toLowerCase(),C=.552284749831;return"path"!==j&&e.getBBox?(l=function(e,t){var n,r=document.createElementNS("http://www.w3.org/2000/svg","path"),i=[].slice.call(e.attributes),s=i.length;for(t=","+t+",";--s>-1;)n=i[s].nodeName.toLowerCase(),t.indexOf(","+n+",")<0&&r.setAttributeNS(null,n,i[s].nodeValue);return r}(e,"x,y,width,height,cx,cy,rx,ry,r,x1,x2,y1,y2,points"),k=function(e,t){for(var n=t?t.split(","):[],r={},i=n.length;--i>-1;)r[n[i]]=+e.getAttribute(n[i])||0;return r}(e,P[j]),"rect"===j?(o=k.rx,a=k.ry||o,r=k.x,i=k.y,h=k.width-2*o,p=k.height-2*a,n=o||a?"M"+(y=(g=(m=r+o)+h)+o)+","+(w=i+a)+" V"+(_=w+p)+" C"+[y,x=_+a*C,v=g+o*C,S=_+a,g,S,g-(g-m)/3,S,m+(g-m)/3,S,m,S,f=r+o*(1-C),S,r,x,r,_,r,_-(_-w)/3,r,w+(_-w)/3,r,w,r,b=i+a*(1-C),f,i,m,i,m+(g-m)/3,i,g-(g-m)/3,i,g,i,v,i,y,b,y,w].join(",")+"z":"M"+(r+h)+","+i+" v"+p+" h"+-h+" v"+-p+" h"+h+"z"):"circle"===j||"ellipse"===j?("circle"===j?u=(o=a=k.r)*C:(o=k.rx,u=(a=k.ry)*C),n="M"+((r=k.cx)+o)+","+(i=k.cy)+" C"+[r+o,i+u,r+(c=o*C),i+a,r,i+a,r-c,i+a,r-o,i+u,r-o,i,r-o,i-u,r-c,i-a,r,i-a,r+c,i-a,r+o,i-u,r+o,i].join(",")+"z"):"line"===j?n="M"+k.x1+","+k.y1+" L"+k.x2+","+k.y2:"polyline"!==j&&"polygon"!==j||(n="M"+(r=(d=(e.getAttribute("points")+"").match(s)||[]).shift())+","+(i=d.shift())+" L"+d.join(","),"polygon"===j&&(n+=","+r+","+i+"z")),l.setAttribute("d",Z(l._gsRawPath=U(n))),t&&e.parentNode&&(e.parentNode.insertBefore(l,e),e.parentNode.removeChild(e)),l):e}function L(e,t){var n=B(e,t>=1?1-1e-9:t||1e-9);return I(n.segment,n.i,n.t)}function I(e,t,n){var r,i=e[t],s=e[t+2],o=e[t+4];return i+=(s-i)*n,i+=((s+=(o-s)*n)-i)*n,r=s+(o+(e[t+6]-o)*n-s)*n-i,i=e[t+1],i+=((s=e[t+3])-i)*n,i+=((s+=((o=e[t+5])-s)*n)-i)*n,x(f(s+(o+(e[t+7]-o)*n-s)*n-i,r)*c)}function R(e,t,n){n=void 0===n?1:S(n)||0,t=S(t)||0;var r=Math.max(0,~~(h(n-t)-1e-8)),i=A(e);if(t>n&&(t=1-t,n=1-n,function(e,t){var n=e.length;for(t||e.reverse();n--;)e[n].reversed||O(e[n])}(i),i.totalLength=0),t<0||n<0){var s=Math.abs(~~Math.min(t,n))+1;t+=s,n+=s}i.totalLength||D(i);var o,a,l,c,u,d,p,f,m=n>1,g=B(i,t,y,!0),v=B(i,n,b),w=v.segment,_=g.segment,x=v.segIndex,j=g.segIndex,C=v.i,T=g.i,P=j===x,M=C===T&&P;if(m||r){for(o=x<j||P&&C<T||M&&v.t<g.t,k(i,j,T,g.t)&&(j++,o||(x++,M?(v.t=(v.t-g.t)/(1-g.t),C=0):P&&(C-=T))),Math.abs(1-(n-t))<1e-5?x=j-1:!v.t&&x?x--:k(i,x,C,v.t)&&o&&j++,1===g.t&&(j=(j+1)%i.length),u=[],p=1+(d=i.length)*r,f=j,p+=(d-j+x)%d,c=0;c<p;c++)E(u,i[f++%d]);i=u}else if(l=1===v.t?6:N(w,C,v.t),t!==n)for(a=N(_,T,M?g.t/v.t:g.t),P&&(l+=a),w.splice(C+l+2),(a||T)&&_.splice(0,T+a),c=i.length;c--;)(c<j||c>x)&&i.splice(c,1);else w.angle=I(w,C+l,0),g=w[C+=l],v=w[C+1],w.length=w.totalLength=0,w.totalPoints=i.totalPoints=8,w.push(g,v,g,v,g,v,g,v);return i.totalLength=0,i}function $(e,t,n){t=t||0,e.samples||(e.samples=[],e.lookup=[]);var r,i,s,o,a,l,c,u,d,f,g,v,y,b,w,_,x,S=~~e.resolution||12,k=1/S,j=n?t+6*n+1:e.length,C=e[t],E=e[t+1],T=t?t/6*S:0,A=e.samples,O=e.lookup,P=(t?e.minLength:m)||m,M=A[T+n*S-1],L=t?A[T-1]:0;for(A.length=O.length=0,i=t+2;i<j;i+=6){if(s=e[i+4]-C,o=e[i+2]-C,a=e[i]-C,u=e[i+5]-E,d=e[i+3]-E,f=e[i+1]-E,l=c=g=v=0,h(s)<.01&&h(u)<.01&&h(a)+h(f)<.01)e.length>8&&(e.splice(i,6),i-=6,j-=6);else for(r=1;r<=S;r++)l=c-(c=((b=k*r)*b*s+3*(y=1-b)*(b*o+y*a))*b),g=v-(v=(b*b*u+3*y*(b*d+y*f))*b),(_=p(g*g+l*l))<P&&(P=_),L+=_,A[T++]=L;C+=s,E+=u}if(M)for(M-=L;T<A.length;T++)A[T]+=M;if(A.length&&P){if(e.totalLength=x=A[A.length-1]||0,e.minLength=P,x/P<9999)for(_=w=0,r=0;r<x;r+=P)O[_++]=A[w]<r?++w:w}else e.totalLength=A[0]=0;return t?L-A[t/2-1]:L}function D(e,t){var n,r,i;for(i=n=r=0;i<e.length;i++)e[i].resolution=~~t||12,r+=e[i].length,n+=$(e[i]);return e.totalPoints=r,e.totalLength=n,e}function N(e,t,n){if(n<=0||n>=1)return 0;var r=e[t],i=e[t+1],s=e[t+2],o=e[t+3],a=e[t+4],l=e[t+5],c=r+(s-r)*n,u=s+(a-s)*n,d=i+(o-i)*n,h=o+(l-o)*n,p=c+(u-c)*n,f=d+(h-d)*n,m=a+(e[t+6]-a)*n,g=l+(e[t+7]-l)*n;return u+=(m-u)*n,h+=(g-h)*n,e.splice(t+2,4,x(c),x(d),x(p),x(f),x(p+(u-p)*n),x(f+(h-f)*n),x(u),x(h),x(m),x(g)),e.samples&&e.samples.splice(t/6*e.resolution|0,0,0,0,0,0,0,0),6}function B(e,t,n,r){n=n||{},e.totalLength||D(e),(t<0||t>1)&&(t=_(t));var i,s,o,a,l,c,u,d=0,h=e[0];if(t)if(1===t)u=1,c=(h=e[d=e.length-1]).length-8;else{if(e.length>1){for(o=e.totalLength*t,l=c=0;(l+=e[c++].totalLength)<o;)d=c;t=(o-(a=l-(h=e[d]).totalLength))/(l-a)||0}i=h.samples,s=h.resolution,o=h.totalLength*t,a=(c=h.lookup.length?h.lookup[~~(o/h.minLength)]||0:j(i,o,t))?i[c-1]:0,(l=i[c])<o&&(a=l,l=i[++c]),u=1/s*((o-a)/(l-a)+c%s),c=6*~~(c/s),r&&1===u&&(c+6<h.length?(c+=6,u=0):d+1<e.length&&(c=u=0,h=e[++d]))}else u=c=d=0,h=e[0];return n.t=u,n.i=c,n.path=e,n.segment=h,n.segIndex=d,n}function q(e,t,n,r){var i,s,o,a,l,c,u,d,h,p=e[0],f=r||{};if((t<0||t>1)&&(t=_(t)),e.length>1){for(o=e.totalLength*t,l=c=0;(l+=e[c++].totalLength)<o;)p=e[c];t=(o-(a=l-p.totalLength))/(l-a)||0}return i=p.samples,s=p.resolution,o=p.totalLength*t,a=(c=p.lookup.length?p.lookup[t<1?~~(o/p.minLength):p.lookup.length-1]||0:j(i,o,t))?i[c-1]:0,(l=i[c])<o&&(a=l,l=i[++c]),h=1-(u=1/s*((o-a)/(l-a)+c%s)||0),d=p[c=6*~~(c/s)],f.x=x((u*u*(p[c+6]-d)+3*h*(u*(p[c+4]-d)+h*(p[c+2]-d)))*u+d),f.y=x((u*u*(p[c+7]-(d=p[c+1]))+3*h*(u*(p[c+5]-d)+h*(p[c+3]-d)))*u+d),n&&(f.angle=p.totalLength?I(p,c,u>=1?1-1e-9:u||1e-9):p.angle||0),f}function F(e,t,n,r,i,s,o){for(var a,l,c,u,d,h=e.length;--h>-1;)for(l=(a=e[h]).length,c=0;c<l;c+=2)u=a[c],d=a[c+1],a[c]=u*t+d*r+s,a[c+1]=u*n+d*i+o;return e._dirty=1,e}function V(e,t,n,r,i,s,o,a,c){if(e!==a||t!==c){n=h(n),r=h(r);var f=i%360*l,m=d(f),g=u(f),v=Math.PI,y=2*v,b=(e-a)/2,w=(t-c)/2,_=m*b+g*w,x=-g*b+m*w,S=_*_,k=x*x,j=S/(n*n)+k/(r*r);j>1&&(n=p(j)*n,r=p(j)*r);var C=n*n,E=r*r,T=(C*E-C*k-E*S)/(C*k+E*S);T<0&&(T=0);var A=(s===o?-1:1)*p(T),O=A*(n*x/r),P=A*(-r*_/n),M=(e+a)/2+(m*O-g*P),L=(t+c)/2+(g*O+m*P),I=(_-O)/n,R=(x-P)/r,$=(-_-O)/n,D=(-x-P)/r,N=I*I+R*R,B=(R<0?-1:1)*Math.acos(I/p(N)),q=(I*D-R*$<0?-1:1)*Math.acos((I*$+R*D)/p(N*($*$+D*D)));isNaN(q)&&(q=v),!o&&q>0?q-=y:o&&q<0&&(q+=y),B%=y,q%=y;var F,V=Math.ceil(h(q)/(y/4)),U=[],W=q/V,H=4/3*u(W/2)/(1+d(W/2)),z=m*n,X=g*n,G=g*-r,Y=m*r;for(F=0;F<V;F++)_=d(i=B+F*W),x=u(i),I=d(i+=W),R=u(i),U.push(_-H*x,x+H*_,I+H*R,R-H*I,I,R);for(F=0;F<U.length;F+=2)_=U[F],x=U[F+1],U[F]=_*z+x*G+M,U[F+1]=_*X+x*Y+L;return U[F-2]=a,U[F-1]=c,U}}function U(e){var t,n,r,s,a,l,c,u,d,p,f,m,g,v,y,b=(e+"").replace(o,(function(e){var t=+e;return t<1e-4&&t>-1e-4?0:t})).match(i)||[],w=[],_=0,x=0,S=2/3,k=b.length,j=0,C="ERROR: malformed path: "+e,E=function(e,t,n,r){p=(n-e)/3,f=(r-t)/3,c.push(e+p,t+f,n-p,r-f,n,r)};if(!e||!isNaN(b[0])||isNaN(b[1]))return console.log(C),w;for(t=0;t<k;t++)if(g=a,isNaN(b[t])?l=(a=b[t].toUpperCase())!==b[t]:t--,r=+b[t+1],s=+b[t+2],l&&(r+=_,s+=x),t||(u=r,d=s),"M"===a)c&&(c.length<8?w.length-=1:j+=c.length),_=u=r,x=d=s,c=[r,s],w.push(c),t+=2,a="L";else if("C"===a)c||(c=[0,0]),l||(_=x=0),c.push(r,s,_+1*b[t+3],x+1*b[t+4],_+=1*b[t+5],x+=1*b[t+6]),t+=6;else if("S"===a)p=_,f=x,"C"!==g&&"S"!==g||(p+=_-c[c.length-4],f+=x-c[c.length-3]),l||(_=x=0),c.push(p,f,r,s,_+=1*b[t+3],x+=1*b[t+4]),t+=4;else if("Q"===a)p=_+(r-_)*S,f=x+(s-x)*S,l||(_=x=0),_+=1*b[t+3],x+=1*b[t+4],c.push(p,f,_+(r-_)*S,x+(s-x)*S,_,x),t+=4;else if("T"===a)p=_-c[c.length-4],f=x-c[c.length-3],c.push(_+p,x+f,r+(_+1.5*p-r)*S,s+(x+1.5*f-s)*S,_=r,x=s),t+=2;else if("H"===a)E(_,x,_=r,x),t+=1;else if("V"===a)E(_,x,_,x=r+(l?x-_:0)),t+=1;else if("L"===a||"Z"===a)"Z"===a&&(r=u,s=d,c.closed=!0),("L"===a||h(_-r)>.5||h(x-s)>.5)&&(E(_,x,r,s),"L"===a&&(t+=2)),_=r,x=s;else if("A"===a){if(v=b[t+4],y=b[t+5],p=b[t+6],f=b[t+7],n=7,v.length>1&&(v.length<3?(f=p,p=y,n--):(f=y,p=v.substr(2),n-=2),y=v.charAt(1),v=v.charAt(0)),m=V(_,x,+b[t+1],+b[t+2],+b[t+3],+v,+y,(l?_:0)+1*p,(l?x:0)+1*f),t+=n,m)for(n=0;n<m.length;n++)c.push(m[n]);_=c[c.length-2],x=c[c.length-1]}else console.log(C);return(t=c.length)<6?(w.pop(),t=0):c[0]===c[t-2]&&c[1]===c[t-1]&&(c.closed=!0),w.totalPoints=j+t,w}function W(e,t,n,r,i,s,o,a,l,c,u){var d,p=(e+n)/2,f=(t+r)/2,m=(n+i)/2,g=(r+s)/2,v=(i+o)/2,y=(s+a)/2,b=(p+m)/2,w=(f+g)/2,_=(m+v)/2,x=(g+y)/2,S=(b+_)/2,k=(w+x)/2,j=o-e,C=a-t,E=h((n-o)*C-(r-a)*j),T=h((i-o)*C-(s-a)*j);return c||(c=[e,t,o,a],u=2),c.splice(u||c.length-2,0,S,k),(E+T)*(E+T)>l*(j*j+C*C)&&(d=c.length,W(e,t,p,f,b,w,S,k,l,c,u),W(S,k,_,x,v,y,o,a,l,c,u+2+(c.length-d))),c}function H(e,t){void 0===t&&(t=1);for(var n=e[0],r=0,i=[n,r],s=2;s<e.length;s+=2)i.push(n,r,e[s],r=(e[s]-n)*t/2,n=e[s],-r);return i}function z(e,t){h(e[0]-e[2])<1e-4&&h(e[1]-e[3])<1e-4&&(e=e.slice(2));var n,r,i,s,o,a,l,c,u,d,f,m,g,v,y=e.length-2,b=+e[0],w=+e[1],_=+e[2],S=+e[3],k=[b,w,b,w],j=_-b,C=S-w,E=Math.abs(e[y]-b)<.001&&Math.abs(e[y+1]-w)<.001;for(E&&(e.push(_,S),_=b,S=w,b=e[y-2],w=e[y-1],e.unshift(b,w),y+=4),t=t||0===t?+t:1,i=2;i<y;i+=2)n=b,r=w,b=_,w=S,_=+e[i+2],S=+e[i+3],b===_&&w===S||(s=j,o=C,j=_-b,C=S-w,c=((a=p(s*s+o*o))+(l=p(j*j+C*C)))*t*.25/p(Math.pow(j/l+s/a,2)+Math.pow(C/l+o/a,2)),f=b-((u=b-(b-n)*(a?c/a:0))+(((d=b+(_-b)*(l?c/l:0))-u)*(3*a/(a+l)+.5)/4||0)),v=w-((m=w-(w-r)*(a?c/a:0))+(((g=w+(S-w)*(l?c/l:0))-m)*(3*a/(a+l)+.5)/4||0)),b===n&&w===r||k.push(x(u+f),x(m+v),x(b),x(w),x(d+f),x(g+v)));return b!==_||w!==S||k.length<4?k.push(x(_),x(S),x(_),x(S)):k.length-=2,2===k.length?k.push(b,w,b,w,b,w):E&&(k.splice(0,6),k.length=k.length-6),k}function X(e,t,n,r,i){var s,o,a,l,c,u,d,h,p,f,m,g,v=r,y=e[t],b=e[t+1],w=e[n],_=e[n+1];for(o=t+2;o<n;o+=2)l=e[o],c=e[o+1],f=void 0,m=void 0,g=void 0,g=(p=_)-(d=b),((m=(h=w)-(u=y))||g)&&((f=((l-u)*m+(c-d)*g)/(m*m+g*g))>1?(u=h,d=p):f>0&&(u+=m*f,d+=g*f)),(a=Math.pow(l-u,2)+Math.pow(c-d,2))>v&&(s=o,v=a);v>r&&(s-t>2&&X(e,t,s,r,i),i.push(e[s],e[s+1]),n-s>2&&X(e,s,n,r,i))}function G(e,t){var n,r,i,s,o,a,l,c=parseFloat(e[0]),u=parseFloat(e[1]),d=[c,u],h=e.length-2;for(t=Math.pow(t||1,2),n=2;n<h;n+=2)(s=c-(r=parseFloat(e[n])))*s+(o=u-(i=parseFloat(e[n+1])))*o>t&&(d.push(r,i),c=r,u=i);return d.push(parseFloat(e[h]),parseFloat(e[h+1])),X(d,0,l=d.length-2,t,a=[d[0],d[1]]),a.push(d[l],d[l+1]),a}function Y(e,t,n,i,s,o,a,l,c,u,d,h,p,f){var g,v,y,b,w=(s-i)/o,_=0,x=i;for(r=m;x<=s;)(g=(v=(b=1-x)*b*b*a+3*b*b*x*c+3*b*x*x*d+x*x*x*p-t)*v+(y=b*b*b*l+3*b*b*x*u+3*b*x*x*h+x*x*x*f-n)*y)<r&&(r=g,_=x),x+=w;return e>1?Y(e-1,t,n,Math.max(_-w,0),Math.min(_+w,1),o,a,l,c,u,d,h,p,f):_}function J(e,t,n,i){var s,o,a,l,c={j:0,i:0,t:0},u=m;for(o=0;o<e.length;o++)for(l=e[o],s=0;s<l.length;s+=6)a=Y(1,t,n,0,1,i||20,l[s],l[s+1],l[s+2],l[s+3],l[s+4],l[s+5],l[s+6],l[s+7]),u>r&&(u=r,c.j=o,c.i=s,c.t=a);return c}function Q(e,t,n,i,s){var o,a,l=n.length,c=m,u=0,d=0;for(i=i||20,s=s||3,a=0;a<l;a+=6)o=Y(1,e,t,0,1,i,n[a],n[a+1],n[a+2],n[a+3],n[a+4],n[a+5],n[a+6],n[a+7]),c>r&&(c=r,u=o,d=a);return N(n,d,o=Y(s,e,t,u-.05,u+.05,i,n[d],n[d+1],n[d+2],n[d+3],n[d+4],n[d+5],n[d+6],n[d+7])),d+6}function Z(e){v(e[0])&&(e=[e]);var t,n,r,i,s="",o=e.length;for(n=0;n<o;n++){for(i=e[n],s+="M"+x(i[0])+","+x(i[1])+" C",t=i.length,r=2;r<t;r++)s+=x(i[r++])+","+x(i[r++])+" "+x(i[r++])+","+x(i[r++])+" "+x(i[r++])+","+x(i[r])+" ";i.closed&&(s+="z")}return s}},"./node_modules/html-entities/lib/html4-entities.js":(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n("./node_modules/html-entities/lib/surrogate-pairs.js"),i=["apos","nbsp","iexcl","cent","pound","curren","yen","brvbar","sect","uml","copy","ordf","laquo","not","shy","reg","macr","deg","plusmn","sup2","sup3","acute","micro","para","middot","cedil","sup1","ordm","raquo","frac14","frac12","frac34","iquest","Agrave","Aacute","Acirc","Atilde","Auml","Aring","AElig","Ccedil","Egrave","Eacute","Ecirc","Euml","Igrave","Iacute","Icirc","Iuml","ETH","Ntilde","Ograve","Oacute","Ocirc","Otilde","Ouml","times","Oslash","Ugrave","Uacute","Ucirc","Uuml","Yacute","THORN","szlig","agrave","aacute","acirc","atilde","auml","aring","aelig","ccedil","egrave","eacute","ecirc","euml","igrave","iacute","icirc","iuml","eth","ntilde","ograve","oacute","ocirc","otilde","ouml","divide","oslash","ugrave","uacute","ucirc","uuml","yacute","thorn","yuml","quot","amp","lt","gt","OElig","oelig","Scaron","scaron","Yuml","circ","tilde","ensp","emsp","thinsp","zwnj","zwj","lrm","rlm","ndash","mdash","lsquo","rsquo","sbquo","ldquo","rdquo","bdquo","dagger","Dagger","permil","lsaquo","rsaquo","euro","fnof","Alpha","Beta","Gamma","Delta","Epsilon","Zeta","Eta","Theta","Iota","Kappa","Lambda","Mu","Nu","Xi","Omicron","Pi","Rho","Sigma","Tau","Upsilon","Phi","Chi","Psi","Omega","alpha","beta","gamma","delta","epsilon","zeta","eta","theta","iota","kappa","lambda","mu","nu","xi","omicron","pi","rho","sigmaf","sigma","tau","upsilon","phi","chi","psi","omega","thetasym","upsih","piv","bull","hellip","prime","Prime","oline","frasl","weierp","image","real","trade","alefsym","larr","uarr","rarr","darr","harr","crarr","lArr","uArr","rArr","dArr","hArr","forall","part","exist","empty","nabla","isin","notin","ni","prod","sum","minus","lowast","radic","prop","infin","ang","and","or","cap","cup","int","there4","sim","cong","asymp","ne","equiv","le","ge","sub","sup","nsub","sube","supe","oplus","otimes","perp","sdot","lceil","rceil","lfloor","rfloor","lang","rang","loz","spades","clubs","hearts","diams"],s=[39,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,34,38,60,62,338,339,352,353,376,710,732,8194,8195,8201,8204,8205,8206,8207,8211,8212,8216,8217,8218,8220,8221,8222,8224,8225,8240,8249,8250,8364,402,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,931,932,933,934,935,936,937,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,962,963,964,965,966,967,968,969,977,978,982,8226,8230,8242,8243,8254,8260,8472,8465,8476,8482,8501,8592,8593,8594,8595,8596,8629,8656,8657,8658,8659,8660,8704,8706,8707,8709,8711,8712,8713,8715,8719,8721,8722,8727,8730,8733,8734,8736,8743,8744,8745,8746,8747,8756,8764,8773,8776,8800,8801,8804,8805,8834,8835,8836,8838,8839,8853,8855,8869,8901,8968,8969,8970,8971,9001,9002,9674,9824,9827,9829,9830],o={},a={};!function(){for(var e=0,t=i.length;e<t;){var n=i[e],r=s[e];o[n]=String.fromCharCode(r),a[r]=n,e++}}();var l=function(){function e(){}return e.prototype.decode=function(e){return e&&e.length?e.replace(/&(#?[\w\d]+);?/g,(function(e,t){var n;if("#"===t.charAt(0)){var i="x"===t.charAt(1).toLowerCase()?parseInt(t.substr(2),16):parseInt(t.substr(1));(!isNaN(i)||i>=-32768)&&(n=i<=65535?String.fromCharCode(i):r.fromCodePoint(i))}else n=o[t];return n||e})):""},e.decode=function(t){return(new e).decode(t)},e.prototype.encode=function(e){if(!e||!e.length)return"";for(var t=e.length,n="",r=0;r<t;){var i=a[e.charCodeAt(r)];n+=i?"&"+i+";":e.charAt(r),r++}return n},e.encode=function(t){return(new e).encode(t)},e.prototype.encodeNonUTF=function(e){if(!e||!e.length)return"";for(var t=e.length,n="",i=0;i<t;){var s=e.charCodeAt(i),o=a[s];o?n+="&"+o+";":s<32||s>126?s>=r.highSurrogateFrom&&s<=r.highSurrogateTo?(n+="&#"+r.getCodePoint(e,i)+";",i++):n+="&#"+s+";":n+=e.charAt(i),i++}return n},e.encodeNonUTF=function(t){return(new e).encodeNonUTF(t)},e.prototype.encodeNonASCII=function(e){if(!e||!e.length)return"";for(var t=e.length,n="",i=0;i<t;){var s=e.charCodeAt(i);s<=255?n+=e[i++]:(s>=r.highSurrogateFrom&&s<=r.highSurrogateTo?(n+="&#"+r.getCodePoint(e,i)+";",i++):n+="&#"+s+";",i++)}return n},e.encodeNonASCII=function(t){return(new e).encodeNonASCII(t)},e}();t.Html4Entities=l},"./node_modules/html-entities/lib/html5-entities.js":(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n("./node_modules/html-entities/lib/surrogate-pairs.js"),i=[["Aacute",[193]],["aacute",[225]],["Abreve",[258]],["abreve",[259]],["ac",[8766]],["acd",[8767]],["acE",[8766,819]],["Acirc",[194]],["acirc",[226]],["acute",[180]],["Acy",[1040]],["acy",[1072]],["AElig",[198]],["aelig",[230]],["af",[8289]],["Afr",[120068]],["afr",[120094]],["Agrave",[192]],["agrave",[224]],["alefsym",[8501]],["aleph",[8501]],["Alpha",[913]],["alpha",[945]],["Amacr",[256]],["amacr",[257]],["amalg",[10815]],["amp",[38]],["AMP",[38]],["andand",[10837]],["And",[10835]],["and",[8743]],["andd",[10844]],["andslope",[10840]],["andv",[10842]],["ang",[8736]],["ange",[10660]],["angle",[8736]],["angmsdaa",[10664]],["angmsdab",[10665]],["angmsdac",[10666]],["angmsdad",[10667]],["angmsdae",[10668]],["angmsdaf",[10669]],["angmsdag",[10670]],["angmsdah",[10671]],["angmsd",[8737]],["angrt",[8735]],["angrtvb",[8894]],["angrtvbd",[10653]],["angsph",[8738]],["angst",[197]],["angzarr",[9084]],["Aogon",[260]],["aogon",[261]],["Aopf",[120120]],["aopf",[120146]],["apacir",[10863]],["ap",[8776]],["apE",[10864]],["ape",[8778]],["apid",[8779]],["apos",[39]],["ApplyFunction",[8289]],["approx",[8776]],["approxeq",[8778]],["Aring",[197]],["aring",[229]],["Ascr",[119964]],["ascr",[119990]],["Assign",[8788]],["ast",[42]],["asymp",[8776]],["asympeq",[8781]],["Atilde",[195]],["atilde",[227]],["Auml",[196]],["auml",[228]],["awconint",[8755]],["awint",[10769]],["backcong",[8780]],["backepsilon",[1014]],["backprime",[8245]],["backsim",[8765]],["backsimeq",[8909]],["Backslash",[8726]],["Barv",[10983]],["barvee",[8893]],["barwed",[8965]],["Barwed",[8966]],["barwedge",[8965]],["bbrk",[9141]],["bbrktbrk",[9142]],["bcong",[8780]],["Bcy",[1041]],["bcy",[1073]],["bdquo",[8222]],["becaus",[8757]],["because",[8757]],["Because",[8757]],["bemptyv",[10672]],["bepsi",[1014]],["bernou",[8492]],["Bernoullis",[8492]],["Beta",[914]],["beta",[946]],["beth",[8502]],["between",[8812]],["Bfr",[120069]],["bfr",[120095]],["bigcap",[8898]],["bigcirc",[9711]],["bigcup",[8899]],["bigodot",[10752]],["bigoplus",[10753]],["bigotimes",[10754]],["bigsqcup",[10758]],["bigstar",[9733]],["bigtriangledown",[9661]],["bigtriangleup",[9651]],["biguplus",[10756]],["bigvee",[8897]],["bigwedge",[8896]],["bkarow",[10509]],["blacklozenge",[10731]],["blacksquare",[9642]],["blacktriangle",[9652]],["blacktriangledown",[9662]],["blacktriangleleft",[9666]],["blacktriangleright",[9656]],["blank",[9251]],["blk12",[9618]],["blk14",[9617]],["blk34",[9619]],["block",[9608]],["bne",[61,8421]],["bnequiv",[8801,8421]],["bNot",[10989]],["bnot",[8976]],["Bopf",[120121]],["bopf",[120147]],["bot",[8869]],["bottom",[8869]],["bowtie",[8904]],["boxbox",[10697]],["boxdl",[9488]],["boxdL",[9557]],["boxDl",[9558]],["boxDL",[9559]],["boxdr",[9484]],["boxdR",[9554]],["boxDr",[9555]],["boxDR",[9556]],["boxh",[9472]],["boxH",[9552]],["boxhd",[9516]],["boxHd",[9572]],["boxhD",[9573]],["boxHD",[9574]],["boxhu",[9524]],["boxHu",[9575]],["boxhU",[9576]],["boxHU",[9577]],["boxminus",[8863]],["boxplus",[8862]],["boxtimes",[8864]],["boxul",[9496]],["boxuL",[9563]],["boxUl",[9564]],["boxUL",[9565]],["boxur",[9492]],["boxuR",[9560]],["boxUr",[9561]],["boxUR",[9562]],["boxv",[9474]],["boxV",[9553]],["boxvh",[9532]],["boxvH",[9578]],["boxVh",[9579]],["boxVH",[9580]],["boxvl",[9508]],["boxvL",[9569]],["boxVl",[9570]],["boxVL",[9571]],["boxvr",[9500]],["boxvR",[9566]],["boxVr",[9567]],["boxVR",[9568]],["bprime",[8245]],["breve",[728]],["Breve",[728]],["brvbar",[166]],["bscr",[119991]],["Bscr",[8492]],["bsemi",[8271]],["bsim",[8765]],["bsime",[8909]],["bsolb",[10693]],["bsol",[92]],["bsolhsub",[10184]],["bull",[8226]],["bullet",[8226]],["bump",[8782]],["bumpE",[10926]],["bumpe",[8783]],["Bumpeq",[8782]],["bumpeq",[8783]],["Cacute",[262]],["cacute",[263]],["capand",[10820]],["capbrcup",[10825]],["capcap",[10827]],["cap",[8745]],["Cap",[8914]],["capcup",[10823]],["capdot",[10816]],["CapitalDifferentialD",[8517]],["caps",[8745,65024]],["caret",[8257]],["caron",[711]],["Cayleys",[8493]],["ccaps",[10829]],["Ccaron",[268]],["ccaron",[269]],["Ccedil",[199]],["ccedil",[231]],["Ccirc",[264]],["ccirc",[265]],["Cconint",[8752]],["ccups",[10828]],["ccupssm",[10832]],["Cdot",[266]],["cdot",[267]],["cedil",[184]],["Cedilla",[184]],["cemptyv",[10674]],["cent",[162]],["centerdot",[183]],["CenterDot",[183]],["cfr",[120096]],["Cfr",[8493]],["CHcy",[1063]],["chcy",[1095]],["check",[10003]],["checkmark",[10003]],["Chi",[935]],["chi",[967]],["circ",[710]],["circeq",[8791]],["circlearrowleft",[8634]],["circlearrowright",[8635]],["circledast",[8859]],["circledcirc",[8858]],["circleddash",[8861]],["CircleDot",[8857]],["circledR",[174]],["circledS",[9416]],["CircleMinus",[8854]],["CirclePlus",[8853]],["CircleTimes",[8855]],["cir",[9675]],["cirE",[10691]],["cire",[8791]],["cirfnint",[10768]],["cirmid",[10991]],["cirscir",[10690]],["ClockwiseContourIntegral",[8754]],["clubs",[9827]],["clubsuit",[9827]],["colon",[58]],["Colon",[8759]],["Colone",[10868]],["colone",[8788]],["coloneq",[8788]],["comma",[44]],["commat",[64]],["comp",[8705]],["compfn",[8728]],["complement",[8705]],["complexes",[8450]],["cong",[8773]],["congdot",[10861]],["Congruent",[8801]],["conint",[8750]],["Conint",[8751]],["ContourIntegral",[8750]],["copf",[120148]],["Copf",[8450]],["coprod",[8720]],["Coproduct",[8720]],["copy",[169]],["COPY",[169]],["copysr",[8471]],["CounterClockwiseContourIntegral",[8755]],["crarr",[8629]],["cross",[10007]],["Cross",[10799]],["Cscr",[119966]],["cscr",[119992]],["csub",[10959]],["csube",[10961]],["csup",[10960]],["csupe",[10962]],["ctdot",[8943]],["cudarrl",[10552]],["cudarrr",[10549]],["cuepr",[8926]],["cuesc",[8927]],["cularr",[8630]],["cularrp",[10557]],["cupbrcap",[10824]],["cupcap",[10822]],["CupCap",[8781]],["cup",[8746]],["Cup",[8915]],["cupcup",[10826]],["cupdot",[8845]],["cupor",[10821]],["cups",[8746,65024]],["curarr",[8631]],["curarrm",[10556]],["curlyeqprec",[8926]],["curlyeqsucc",[8927]],["curlyvee",[8910]],["curlywedge",[8911]],["curren",[164]],["curvearrowleft",[8630]],["curvearrowright",[8631]],["cuvee",[8910]],["cuwed",[8911]],["cwconint",[8754]],["cwint",[8753]],["cylcty",[9005]],["dagger",[8224]],["Dagger",[8225]],["daleth",[8504]],["darr",[8595]],["Darr",[8609]],["dArr",[8659]],["dash",[8208]],["Dashv",[10980]],["dashv",[8867]],["dbkarow",[10511]],["dblac",[733]],["Dcaron",[270]],["dcaron",[271]],["Dcy",[1044]],["dcy",[1076]],["ddagger",[8225]],["ddarr",[8650]],["DD",[8517]],["dd",[8518]],["DDotrahd",[10513]],["ddotseq",[10871]],["deg",[176]],["Del",[8711]],["Delta",[916]],["delta",[948]],["demptyv",[10673]],["dfisht",[10623]],["Dfr",[120071]],["dfr",[120097]],["dHar",[10597]],["dharl",[8643]],["dharr",[8642]],["DiacriticalAcute",[180]],["DiacriticalDot",[729]],["DiacriticalDoubleAcute",[733]],["DiacriticalGrave",[96]],["DiacriticalTilde",[732]],["diam",[8900]],["diamond",[8900]],["Diamond",[8900]],["diamondsuit",[9830]],["diams",[9830]],["die",[168]],["DifferentialD",[8518]],["digamma",[989]],["disin",[8946]],["div",[247]],["divide",[247]],["divideontimes",[8903]],["divonx",[8903]],["DJcy",[1026]],["djcy",[1106]],["dlcorn",[8990]],["dlcrop",[8973]],["dollar",[36]],["Dopf",[120123]],["dopf",[120149]],["Dot",[168]],["dot",[729]],["DotDot",[8412]],["doteq",[8784]],["doteqdot",[8785]],["DotEqual",[8784]],["dotminus",[8760]],["dotplus",[8724]],["dotsquare",[8865]],["doublebarwedge",[8966]],["DoubleContourIntegral",[8751]],["DoubleDot",[168]],["DoubleDownArrow",[8659]],["DoubleLeftArrow",[8656]],["DoubleLeftRightArrow",[8660]],["DoubleLeftTee",[10980]],["DoubleLongLeftArrow",[10232]],["DoubleLongLeftRightArrow",[10234]],["DoubleLongRightArrow",[10233]],["DoubleRightArrow",[8658]],["DoubleRightTee",[8872]],["DoubleUpArrow",[8657]],["DoubleUpDownArrow",[8661]],["DoubleVerticalBar",[8741]],["DownArrowBar",[10515]],["downarrow",[8595]],["DownArrow",[8595]],["Downarrow",[8659]],["DownArrowUpArrow",[8693]],["DownBreve",[785]],["downdownarrows",[8650]],["downharpoonleft",[8643]],["downharpoonright",[8642]],["DownLeftRightVector",[10576]],["DownLeftTeeVector",[10590]],["DownLeftVectorBar",[10582]],["DownLeftVector",[8637]],["DownRightTeeVector",[10591]],["DownRightVectorBar",[10583]],["DownRightVector",[8641]],["DownTeeArrow",[8615]],["DownTee",[8868]],["drbkarow",[10512]],["drcorn",[8991]],["drcrop",[8972]],["Dscr",[119967]],["dscr",[119993]],["DScy",[1029]],["dscy",[1109]],["dsol",[10742]],["Dstrok",[272]],["dstrok",[273]],["dtdot",[8945]],["dtri",[9663]],["dtrif",[9662]],["duarr",[8693]],["duhar",[10607]],["dwangle",[10662]],["DZcy",[1039]],["dzcy",[1119]],["dzigrarr",[10239]],["Eacute",[201]],["eacute",[233]],["easter",[10862]],["Ecaron",[282]],["ecaron",[283]],["Ecirc",[202]],["ecirc",[234]],["ecir",[8790]],["ecolon",[8789]],["Ecy",[1069]],["ecy",[1101]],["eDDot",[10871]],["Edot",[278]],["edot",[279]],["eDot",[8785]],["ee",[8519]],["efDot",[8786]],["Efr",[120072]],["efr",[120098]],["eg",[10906]],["Egrave",[200]],["egrave",[232]],["egs",[10902]],["egsdot",[10904]],["el",[10905]],["Element",[8712]],["elinters",[9191]],["ell",[8467]],["els",[10901]],["elsdot",[10903]],["Emacr",[274]],["emacr",[275]],["empty",[8709]],["emptyset",[8709]],["EmptySmallSquare",[9723]],["emptyv",[8709]],["EmptyVerySmallSquare",[9643]],["emsp13",[8196]],["emsp14",[8197]],["emsp",[8195]],["ENG",[330]],["eng",[331]],["ensp",[8194]],["Eogon",[280]],["eogon",[281]],["Eopf",[120124]],["eopf",[120150]],["epar",[8917]],["eparsl",[10723]],["eplus",[10865]],["epsi",[949]],["Epsilon",[917]],["epsilon",[949]],["epsiv",[1013]],["eqcirc",[8790]],["eqcolon",[8789]],["eqsim",[8770]],["eqslantgtr",[10902]],["eqslantless",[10901]],["Equal",[10869]],["equals",[61]],["EqualTilde",[8770]],["equest",[8799]],["Equilibrium",[8652]],["equiv",[8801]],["equivDD",[10872]],["eqvparsl",[10725]],["erarr",[10609]],["erDot",[8787]],["escr",[8495]],["Escr",[8496]],["esdot",[8784]],["Esim",[10867]],["esim",[8770]],["Eta",[919]],["eta",[951]],["ETH",[208]],["eth",[240]],["Euml",[203]],["euml",[235]],["euro",[8364]],["excl",[33]],["exist",[8707]],["Exists",[8707]],["expectation",[8496]],["exponentiale",[8519]],["ExponentialE",[8519]],["fallingdotseq",[8786]],["Fcy",[1060]],["fcy",[1092]],["female",[9792]],["ffilig",[64259]],["fflig",[64256]],["ffllig",[64260]],["Ffr",[120073]],["ffr",[120099]],["filig",[64257]],["FilledSmallSquare",[9724]],["FilledVerySmallSquare",[9642]],["fjlig",[102,106]],["flat",[9837]],["fllig",[64258]],["fltns",[9649]],["fnof",[402]],["Fopf",[120125]],["fopf",[120151]],["forall",[8704]],["ForAll",[8704]],["fork",[8916]],["forkv",[10969]],["Fouriertrf",[8497]],["fpartint",[10765]],["frac12",[189]],["frac13",[8531]],["frac14",[188]],["frac15",[8533]],["frac16",[8537]],["frac18",[8539]],["frac23",[8532]],["frac25",[8534]],["frac34",[190]],["frac35",[8535]],["frac38",[8540]],["frac45",[8536]],["frac56",[8538]],["frac58",[8541]],["frac78",[8542]],["frasl",[8260]],["frown",[8994]],["fscr",[119995]],["Fscr",[8497]],["gacute",[501]],["Gamma",[915]],["gamma",[947]],["Gammad",[988]],["gammad",[989]],["gap",[10886]],["Gbreve",[286]],["gbreve",[287]],["Gcedil",[290]],["Gcirc",[284]],["gcirc",[285]],["Gcy",[1043]],["gcy",[1075]],["Gdot",[288]],["gdot",[289]],["ge",[8805]],["gE",[8807]],["gEl",[10892]],["gel",[8923]],["geq",[8805]],["geqq",[8807]],["geqslant",[10878]],["gescc",[10921]],["ges",[10878]],["gesdot",[10880]],["gesdoto",[10882]],["gesdotol",[10884]],["gesl",[8923,65024]],["gesles",[10900]],["Gfr",[120074]],["gfr",[120100]],["gg",[8811]],["Gg",[8921]],["ggg",[8921]],["gimel",[8503]],["GJcy",[1027]],["gjcy",[1107]],["gla",[10917]],["gl",[8823]],["glE",[10898]],["glj",[10916]],["gnap",[10890]],["gnapprox",[10890]],["gne",[10888]],["gnE",[8809]],["gneq",[10888]],["gneqq",[8809]],["gnsim",[8935]],["Gopf",[120126]],["gopf",[120152]],["grave",[96]],["GreaterEqual",[8805]],["GreaterEqualLess",[8923]],["GreaterFullEqual",[8807]],["GreaterGreater",[10914]],["GreaterLess",[8823]],["GreaterSlantEqual",[10878]],["GreaterTilde",[8819]],["Gscr",[119970]],["gscr",[8458]],["gsim",[8819]],["gsime",[10894]],["gsiml",[10896]],["gtcc",[10919]],["gtcir",[10874]],["gt",[62]],["GT",[62]],["Gt",[8811]],["gtdot",[8919]],["gtlPar",[10645]],["gtquest",[10876]],["gtrapprox",[10886]],["gtrarr",[10616]],["gtrdot",[8919]],["gtreqless",[8923]],["gtreqqless",[10892]],["gtrless",[8823]],["gtrsim",[8819]],["gvertneqq",[8809,65024]],["gvnE",[8809,65024]],["Hacek",[711]],["hairsp",[8202]],["half",[189]],["hamilt",[8459]],["HARDcy",[1066]],["hardcy",[1098]],["harrcir",[10568]],["harr",[8596]],["hArr",[8660]],["harrw",[8621]],["Hat",[94]],["hbar",[8463]],["Hcirc",[292]],["hcirc",[293]],["hearts",[9829]],["heartsuit",[9829]],["hellip",[8230]],["hercon",[8889]],["hfr",[120101]],["Hfr",[8460]],["HilbertSpace",[8459]],["hksearow",[10533]],["hkswarow",[10534]],["hoarr",[8703]],["homtht",[8763]],["hookleftarrow",[8617]],["hookrightarrow",[8618]],["hopf",[120153]],["Hopf",[8461]],["horbar",[8213]],["HorizontalLine",[9472]],["hscr",[119997]],["Hscr",[8459]],["hslash",[8463]],["Hstrok",[294]],["hstrok",[295]],["HumpDownHump",[8782]],["HumpEqual",[8783]],["hybull",[8259]],["hyphen",[8208]],["Iacute",[205]],["iacute",[237]],["ic",[8291]],["Icirc",[206]],["icirc",[238]],["Icy",[1048]],["icy",[1080]],["Idot",[304]],["IEcy",[1045]],["iecy",[1077]],["iexcl",[161]],["iff",[8660]],["ifr",[120102]],["Ifr",[8465]],["Igrave",[204]],["igrave",[236]],["ii",[8520]],["iiiint",[10764]],["iiint",[8749]],["iinfin",[10716]],["iiota",[8489]],["IJlig",[306]],["ijlig",[307]],["Imacr",[298]],["imacr",[299]],["image",[8465]],["ImaginaryI",[8520]],["imagline",[8464]],["imagpart",[8465]],["imath",[305]],["Im",[8465]],["imof",[8887]],["imped",[437]],["Implies",[8658]],["incare",[8453]],["in",[8712]],["infin",[8734]],["infintie",[10717]],["inodot",[305]],["intcal",[8890]],["int",[8747]],["Int",[8748]],["integers",[8484]],["Integral",[8747]],["intercal",[8890]],["Intersection",[8898]],["intlarhk",[10775]],["intprod",[10812]],["InvisibleComma",[8291]],["InvisibleTimes",[8290]],["IOcy",[1025]],["iocy",[1105]],["Iogon",[302]],["iogon",[303]],["Iopf",[120128]],["iopf",[120154]],["Iota",[921]],["iota",[953]],["iprod",[10812]],["iquest",[191]],["iscr",[119998]],["Iscr",[8464]],["isin",[8712]],["isindot",[8949]],["isinE",[8953]],["isins",[8948]],["isinsv",[8947]],["isinv",[8712]],["it",[8290]],["Itilde",[296]],["itilde",[297]],["Iukcy",[1030]],["iukcy",[1110]],["Iuml",[207]],["iuml",[239]],["Jcirc",[308]],["jcirc",[309]],["Jcy",[1049]],["jcy",[1081]],["Jfr",[120077]],["jfr",[120103]],["jmath",[567]],["Jopf",[120129]],["jopf",[120155]],["Jscr",[119973]],["jscr",[119999]],["Jsercy",[1032]],["jsercy",[1112]],["Jukcy",[1028]],["jukcy",[1108]],["Kappa",[922]],["kappa",[954]],["kappav",[1008]],["Kcedil",[310]],["kcedil",[311]],["Kcy",[1050]],["kcy",[1082]],["Kfr",[120078]],["kfr",[120104]],["kgreen",[312]],["KHcy",[1061]],["khcy",[1093]],["KJcy",[1036]],["kjcy",[1116]],["Kopf",[120130]],["kopf",[120156]],["Kscr",[119974]],["kscr",[12e4]],["lAarr",[8666]],["Lacute",[313]],["lacute",[314]],["laemptyv",[10676]],["lagran",[8466]],["Lambda",[923]],["lambda",[955]],["lang",[10216]],["Lang",[10218]],["langd",[10641]],["langle",[10216]],["lap",[10885]],["Laplacetrf",[8466]],["laquo",[171]],["larrb",[8676]],["larrbfs",[10527]],["larr",[8592]],["Larr",[8606]],["lArr",[8656]],["larrfs",[10525]],["larrhk",[8617]],["larrlp",[8619]],["larrpl",[10553]],["larrsim",[10611]],["larrtl",[8610]],["latail",[10521]],["lAtail",[10523]],["lat",[10923]],["late",[10925]],["lates",[10925,65024]],["lbarr",[10508]],["lBarr",[10510]],["lbbrk",[10098]],["lbrace",[123]],["lbrack",[91]],["lbrke",[10635]],["lbrksld",[10639]],["lbrkslu",[10637]],["Lcaron",[317]],["lcaron",[318]],["Lcedil",[315]],["lcedil",[316]],["lceil",[8968]],["lcub",[123]],["Lcy",[1051]],["lcy",[1083]],["ldca",[10550]],["ldquo",[8220]],["ldquor",[8222]],["ldrdhar",[10599]],["ldrushar",[10571]],["ldsh",[8626]],["le",[8804]],["lE",[8806]],["LeftAngleBracket",[10216]],["LeftArrowBar",[8676]],["leftarrow",[8592]],["LeftArrow",[8592]],["Leftarrow",[8656]],["LeftArrowRightArrow",[8646]],["leftarrowtail",[8610]],["LeftCeiling",[8968]],["LeftDoubleBracket",[10214]],["LeftDownTeeVector",[10593]],["LeftDownVectorBar",[10585]],["LeftDownVector",[8643]],["LeftFloor",[8970]],["leftharpoondown",[8637]],["leftharpoonup",[8636]],["leftleftarrows",[8647]],["leftrightarrow",[8596]],["LeftRightArrow",[8596]],["Leftrightarrow",[8660]],["leftrightarrows",[8646]],["leftrightharpoons",[8651]],["leftrightsquigarrow",[8621]],["LeftRightVector",[10574]],["LeftTeeArrow",[8612]],["LeftTee",[8867]],["LeftTeeVector",[10586]],["leftthreetimes",[8907]],["LeftTriangleBar",[10703]],["LeftTriangle",[8882]],["LeftTriangleEqual",[8884]],["LeftUpDownVector",[10577]],["LeftUpTeeVector",[10592]],["LeftUpVectorBar",[10584]],["LeftUpVector",[8639]],["LeftVectorBar",[10578]],["LeftVector",[8636]],["lEg",[10891]],["leg",[8922]],["leq",[8804]],["leqq",[8806]],["leqslant",[10877]],["lescc",[10920]],["les",[10877]],["lesdot",[10879]],["lesdoto",[10881]],["lesdotor",[10883]],["lesg",[8922,65024]],["lesges",[10899]],["lessapprox",[10885]],["lessdot",[8918]],["lesseqgtr",[8922]],["lesseqqgtr",[10891]],["LessEqualGreater",[8922]],["LessFullEqual",[8806]],["LessGreater",[8822]],["lessgtr",[8822]],["LessLess",[10913]],["lesssim",[8818]],["LessSlantEqual",[10877]],["LessTilde",[8818]],["lfisht",[10620]],["lfloor",[8970]],["Lfr",[120079]],["lfr",[120105]],["lg",[8822]],["lgE",[10897]],["lHar",[10594]],["lhard",[8637]],["lharu",[8636]],["lharul",[10602]],["lhblk",[9604]],["LJcy",[1033]],["ljcy",[1113]],["llarr",[8647]],["ll",[8810]],["Ll",[8920]],["llcorner",[8990]],["Lleftarrow",[8666]],["llhard",[10603]],["lltri",[9722]],["Lmidot",[319]],["lmidot",[320]],["lmoustache",[9136]],["lmoust",[9136]],["lnap",[10889]],["lnapprox",[10889]],["lne",[10887]],["lnE",[8808]],["lneq",[10887]],["lneqq",[8808]],["lnsim",[8934]],["loang",[10220]],["loarr",[8701]],["lobrk",[10214]],["longleftarrow",[10229]],["LongLeftArrow",[10229]],["Longleftarrow",[10232]],["longleftrightarrow",[10231]],["LongLeftRightArrow",[10231]],["Longleftrightarrow",[10234]],["longmapsto",[10236]],["longrightarrow",[10230]],["LongRightArrow",[10230]],["Longrightarrow",[10233]],["looparrowleft",[8619]],["looparrowright",[8620]],["lopar",[10629]],["Lopf",[120131]],["lopf",[120157]],["loplus",[10797]],["lotimes",[10804]],["lowast",[8727]],["lowbar",[95]],["LowerLeftArrow",[8601]],["LowerRightArrow",[8600]],["loz",[9674]],["lozenge",[9674]],["lozf",[10731]],["lpar",[40]],["lparlt",[10643]],["lrarr",[8646]],["lrcorner",[8991]],["lrhar",[8651]],["lrhard",[10605]],["lrm",[8206]],["lrtri",[8895]],["lsaquo",[8249]],["lscr",[120001]],["Lscr",[8466]],["lsh",[8624]],["Lsh",[8624]],["lsim",[8818]],["lsime",[10893]],["lsimg",[10895]],["lsqb",[91]],["lsquo",[8216]],["lsquor",[8218]],["Lstrok",[321]],["lstrok",[322]],["ltcc",[10918]],["ltcir",[10873]],["lt",[60]],["LT",[60]],["Lt",[8810]],["ltdot",[8918]],["lthree",[8907]],["ltimes",[8905]],["ltlarr",[10614]],["ltquest",[10875]],["ltri",[9667]],["ltrie",[8884]],["ltrif",[9666]],["ltrPar",[10646]],["lurdshar",[10570]],["luruhar",[10598]],["lvertneqq",[8808,65024]],["lvnE",[8808,65024]],["macr",[175]],["male",[9794]],["malt",[10016]],["maltese",[10016]],["Map",[10501]],["map",[8614]],["mapsto",[8614]],["mapstodown",[8615]],["mapstoleft",[8612]],["mapstoup",[8613]],["marker",[9646]],["mcomma",[10793]],["Mcy",[1052]],["mcy",[1084]],["mdash",[8212]],["mDDot",[8762]],["measuredangle",[8737]],["MediumSpace",[8287]],["Mellintrf",[8499]],["Mfr",[120080]],["mfr",[120106]],["mho",[8487]],["micro",[181]],["midast",[42]],["midcir",[10992]],["mid",[8739]],["middot",[183]],["minusb",[8863]],["minus",[8722]],["minusd",[8760]],["minusdu",[10794]],["MinusPlus",[8723]],["mlcp",[10971]],["mldr",[8230]],["mnplus",[8723]],["models",[8871]],["Mopf",[120132]],["mopf",[120158]],["mp",[8723]],["mscr",[120002]],["Mscr",[8499]],["mstpos",[8766]],["Mu",[924]],["mu",[956]],["multimap",[8888]],["mumap",[8888]],["nabla",[8711]],["Nacute",[323]],["nacute",[324]],["nang",[8736,8402]],["nap",[8777]],["napE",[10864,824]],["napid",[8779,824]],["napos",[329]],["napprox",[8777]],["natural",[9838]],["naturals",[8469]],["natur",[9838]],["nbsp",[160]],["nbump",[8782,824]],["nbumpe",[8783,824]],["ncap",[10819]],["Ncaron",[327]],["ncaron",[328]],["Ncedil",[325]],["ncedil",[326]],["ncong",[8775]],["ncongdot",[10861,824]],["ncup",[10818]],["Ncy",[1053]],["ncy",[1085]],["ndash",[8211]],["nearhk",[10532]],["nearr",[8599]],["neArr",[8663]],["nearrow",[8599]],["ne",[8800]],["nedot",[8784,824]],["NegativeMediumSpace",[8203]],["NegativeThickSpace",[8203]],["NegativeThinSpace",[8203]],["NegativeVeryThinSpace",[8203]],["nequiv",[8802]],["nesear",[10536]],["nesim",[8770,824]],["NestedGreaterGreater",[8811]],["NestedLessLess",[8810]],["nexist",[8708]],["nexists",[8708]],["Nfr",[120081]],["nfr",[120107]],["ngE",[8807,824]],["nge",[8817]],["ngeq",[8817]],["ngeqq",[8807,824]],["ngeqslant",[10878,824]],["nges",[10878,824]],["nGg",[8921,824]],["ngsim",[8821]],["nGt",[8811,8402]],["ngt",[8815]],["ngtr",[8815]],["nGtv",[8811,824]],["nharr",[8622]],["nhArr",[8654]],["nhpar",[10994]],["ni",[8715]],["nis",[8956]],["nisd",[8954]],["niv",[8715]],["NJcy",[1034]],["njcy",[1114]],["nlarr",[8602]],["nlArr",[8653]],["nldr",[8229]],["nlE",[8806,824]],["nle",[8816]],["nleftarrow",[8602]],["nLeftarrow",[8653]],["nleftrightarrow",[8622]],["nLeftrightarrow",[8654]],["nleq",[8816]],["nleqq",[8806,824]],["nleqslant",[10877,824]],["nles",[10877,824]],["nless",[8814]],["nLl",[8920,824]],["nlsim",[8820]],["nLt",[8810,8402]],["nlt",[8814]],["nltri",[8938]],["nltrie",[8940]],["nLtv",[8810,824]],["nmid",[8740]],["NoBreak",[8288]],["NonBreakingSpace",[160]],["nopf",[120159]],["Nopf",[8469]],["Not",[10988]],["not",[172]],["NotCongruent",[8802]],["NotCupCap",[8813]],["NotDoubleVerticalBar",[8742]],["NotElement",[8713]],["NotEqual",[8800]],["NotEqualTilde",[8770,824]],["NotExists",[8708]],["NotGreater",[8815]],["NotGreaterEqual",[8817]],["NotGreaterFullEqual",[8807,824]],["NotGreaterGreater",[8811,824]],["NotGreaterLess",[8825]],["NotGreaterSlantEqual",[10878,824]],["NotGreaterTilde",[8821]],["NotHumpDownHump",[8782,824]],["NotHumpEqual",[8783,824]],["notin",[8713]],["notindot",[8949,824]],["notinE",[8953,824]],["notinva",[8713]],["notinvb",[8951]],["notinvc",[8950]],["NotLeftTriangleBar",[10703,824]],["NotLeftTriangle",[8938]],["NotLeftTriangleEqual",[8940]],["NotLess",[8814]],["NotLessEqual",[8816]],["NotLessGreater",[8824]],["NotLessLess",[8810,824]],["NotLessSlantEqual",[10877,824]],["NotLessTilde",[8820]],["NotNestedGreaterGreater",[10914,824]],["NotNestedLessLess",[10913,824]],["notni",[8716]],["notniva",[8716]],["notnivb",[8958]],["notnivc",[8957]],["NotPrecedes",[8832]],["NotPrecedesEqual",[10927,824]],["NotPrecedesSlantEqual",[8928]],["NotReverseElement",[8716]],["NotRightTriangleBar",[10704,824]],["NotRightTriangle",[8939]],["NotRightTriangleEqual",[8941]],["NotSquareSubset",[8847,824]],["NotSquareSubsetEqual",[8930]],["NotSquareSuperset",[8848,824]],["NotSquareSupersetEqual",[8931]],["NotSubset",[8834,8402]],["NotSubsetEqual",[8840]],["NotSucceeds",[8833]],["NotSucceedsEqual",[10928,824]],["NotSucceedsSlantEqual",[8929]],["NotSucceedsTilde",[8831,824]],["NotSuperset",[8835,8402]],["NotSupersetEqual",[8841]],["NotTilde",[8769]],["NotTildeEqual",[8772]],["NotTildeFullEqual",[8775]],["NotTildeTilde",[8777]],["NotVerticalBar",[8740]],["nparallel",[8742]],["npar",[8742]],["nparsl",[11005,8421]],["npart",[8706,824]],["npolint",[10772]],["npr",[8832]],["nprcue",[8928]],["nprec",[8832]],["npreceq",[10927,824]],["npre",[10927,824]],["nrarrc",[10547,824]],["nrarr",[8603]],["nrArr",[8655]],["nrarrw",[8605,824]],["nrightarrow",[8603]],["nRightarrow",[8655]],["nrtri",[8939]],["nrtrie",[8941]],["nsc",[8833]],["nsccue",[8929]],["nsce",[10928,824]],["Nscr",[119977]],["nscr",[120003]],["nshortmid",[8740]],["nshortparallel",[8742]],["nsim",[8769]],["nsime",[8772]],["nsimeq",[8772]],["nsmid",[8740]],["nspar",[8742]],["nsqsube",[8930]],["nsqsupe",[8931]],["nsub",[8836]],["nsubE",[10949,824]],["nsube",[8840]],["nsubset",[8834,8402]],["nsubseteq",[8840]],["nsubseteqq",[10949,824]],["nsucc",[8833]],["nsucceq",[10928,824]],["nsup",[8837]],["nsupE",[10950,824]],["nsupe",[8841]],["nsupset",[8835,8402]],["nsupseteq",[8841]],["nsupseteqq",[10950,824]],["ntgl",[8825]],["Ntilde",[209]],["ntilde",[241]],["ntlg",[8824]],["ntriangleleft",[8938]],["ntrianglelefteq",[8940]],["ntriangleright",[8939]],["ntrianglerighteq",[8941]],["Nu",[925]],["nu",[957]],["num",[35]],["numero",[8470]],["numsp",[8199]],["nvap",[8781,8402]],["nvdash",[8876]],["nvDash",[8877]],["nVdash",[8878]],["nVDash",[8879]],["nvge",[8805,8402]],["nvgt",[62,8402]],["nvHarr",[10500]],["nvinfin",[10718]],["nvlArr",[10498]],["nvle",[8804,8402]],["nvlt",[60,8402]],["nvltrie",[8884,8402]],["nvrArr",[10499]],["nvrtrie",[8885,8402]],["nvsim",[8764,8402]],["nwarhk",[10531]],["nwarr",[8598]],["nwArr",[8662]],["nwarrow",[8598]],["nwnear",[10535]],["Oacute",[211]],["oacute",[243]],["oast",[8859]],["Ocirc",[212]],["ocirc",[244]],["ocir",[8858]],["Ocy",[1054]],["ocy",[1086]],["odash",[8861]],["Odblac",[336]],["odblac",[337]],["odiv",[10808]],["odot",[8857]],["odsold",[10684]],["OElig",[338]],["oelig",[339]],["ofcir",[10687]],["Ofr",[120082]],["ofr",[120108]],["ogon",[731]],["Ograve",[210]],["ograve",[242]],["ogt",[10689]],["ohbar",[10677]],["ohm",[937]],["oint",[8750]],["olarr",[8634]],["olcir",[10686]],["olcross",[10683]],["oline",[8254]],["olt",[10688]],["Omacr",[332]],["omacr",[333]],["Omega",[937]],["omega",[969]],["Omicron",[927]],["omicron",[959]],["omid",[10678]],["ominus",[8854]],["Oopf",[120134]],["oopf",[120160]],["opar",[10679]],["OpenCurlyDoubleQuote",[8220]],["OpenCurlyQuote",[8216]],["operp",[10681]],["oplus",[8853]],["orarr",[8635]],["Or",[10836]],["or",[8744]],["ord",[10845]],["order",[8500]],["orderof",[8500]],["ordf",[170]],["ordm",[186]],["origof",[8886]],["oror",[10838]],["orslope",[10839]],["orv",[10843]],["oS",[9416]],["Oscr",[119978]],["oscr",[8500]],["Oslash",[216]],["oslash",[248]],["osol",[8856]],["Otilde",[213]],["otilde",[245]],["otimesas",[10806]],["Otimes",[10807]],["otimes",[8855]],["Ouml",[214]],["ouml",[246]],["ovbar",[9021]],["OverBar",[8254]],["OverBrace",[9182]],["OverBracket",[9140]],["OverParenthesis",[9180]],["para",[182]],["parallel",[8741]],["par",[8741]],["parsim",[10995]],["parsl",[11005]],["part",[8706]],["PartialD",[8706]],["Pcy",[1055]],["pcy",[1087]],["percnt",[37]],["period",[46]],["permil",[8240]],["perp",[8869]],["pertenk",[8241]],["Pfr",[120083]],["pfr",[120109]],["Phi",[934]],["phi",[966]],["phiv",[981]],["phmmat",[8499]],["phone",[9742]],["Pi",[928]],["pi",[960]],["pitchfork",[8916]],["piv",[982]],["planck",[8463]],["planckh",[8462]],["plankv",[8463]],["plusacir",[10787]],["plusb",[8862]],["pluscir",[10786]],["plus",[43]],["plusdo",[8724]],["plusdu",[10789]],["pluse",[10866]],["PlusMinus",[177]],["plusmn",[177]],["plussim",[10790]],["plustwo",[10791]],["pm",[177]],["Poincareplane",[8460]],["pointint",[10773]],["popf",[120161]],["Popf",[8473]],["pound",[163]],["prap",[10935]],["Pr",[10939]],["pr",[8826]],["prcue",[8828]],["precapprox",[10935]],["prec",[8826]],["preccurlyeq",[8828]],["Precedes",[8826]],["PrecedesEqual",[10927]],["PrecedesSlantEqual",[8828]],["PrecedesTilde",[8830]],["preceq",[10927]],["precnapprox",[10937]],["precneqq",[10933]],["precnsim",[8936]],["pre",[10927]],["prE",[10931]],["precsim",[8830]],["prime",[8242]],["Prime",[8243]],["primes",[8473]],["prnap",[10937]],["prnE",[10933]],["prnsim",[8936]],["prod",[8719]],["Product",[8719]],["profalar",[9006]],["profline",[8978]],["profsurf",[8979]],["prop",[8733]],["Proportional",[8733]],["Proportion",[8759]],["propto",[8733]],["prsim",[8830]],["prurel",[8880]],["Pscr",[119979]],["pscr",[120005]],["Psi",[936]],["psi",[968]],["puncsp",[8200]],["Qfr",[120084]],["qfr",[120110]],["qint",[10764]],["qopf",[120162]],["Qopf",[8474]],["qprime",[8279]],["Qscr",[119980]],["qscr",[120006]],["quaternions",[8461]],["quatint",[10774]],["quest",[63]],["questeq",[8799]],["quot",[34]],["QUOT",[34]],["rAarr",[8667]],["race",[8765,817]],["Racute",[340]],["racute",[341]],["radic",[8730]],["raemptyv",[10675]],["rang",[10217]],["Rang",[10219]],["rangd",[10642]],["range",[10661]],["rangle",[10217]],["raquo",[187]],["rarrap",[10613]],["rarrb",[8677]],["rarrbfs",[10528]],["rarrc",[10547]],["rarr",[8594]],["Rarr",[8608]],["rArr",[8658]],["rarrfs",[10526]],["rarrhk",[8618]],["rarrlp",[8620]],["rarrpl",[10565]],["rarrsim",[10612]],["Rarrtl",[10518]],["rarrtl",[8611]],["rarrw",[8605]],["ratail",[10522]],["rAtail",[10524]],["ratio",[8758]],["rationals",[8474]],["rbarr",[10509]],["rBarr",[10511]],["RBarr",[10512]],["rbbrk",[10099]],["rbrace",[125]],["rbrack",[93]],["rbrke",[10636]],["rbrksld",[10638]],["rbrkslu",[10640]],["Rcaron",[344]],["rcaron",[345]],["Rcedil",[342]],["rcedil",[343]],["rceil",[8969]],["rcub",[125]],["Rcy",[1056]],["rcy",[1088]],["rdca",[10551]],["rdldhar",[10601]],["rdquo",[8221]],["rdquor",[8221]],["CloseCurlyDoubleQuote",[8221]],["rdsh",[8627]],["real",[8476]],["realine",[8475]],["realpart",[8476]],["reals",[8477]],["Re",[8476]],["rect",[9645]],["reg",[174]],["REG",[174]],["ReverseElement",[8715]],["ReverseEquilibrium",[8651]],["ReverseUpEquilibrium",[10607]],["rfisht",[10621]],["rfloor",[8971]],["rfr",[120111]],["Rfr",[8476]],["rHar",[10596]],["rhard",[8641]],["rharu",[8640]],["rharul",[10604]],["Rho",[929]],["rho",[961]],["rhov",[1009]],["RightAngleBracket",[10217]],["RightArrowBar",[8677]],["rightarrow",[8594]],["RightArrow",[8594]],["Rightarrow",[8658]],["RightArrowLeftArrow",[8644]],["rightarrowtail",[8611]],["RightCeiling",[8969]],["RightDoubleBracket",[10215]],["RightDownTeeVector",[10589]],["RightDownVectorBar",[10581]],["RightDownVector",[8642]],["RightFloor",[8971]],["rightharpoondown",[8641]],["rightharpoonup",[8640]],["rightleftarrows",[8644]],["rightleftharpoons",[8652]],["rightrightarrows",[8649]],["rightsquigarrow",[8605]],["RightTeeArrow",[8614]],["RightTee",[8866]],["RightTeeVector",[10587]],["rightthreetimes",[8908]],["RightTriangleBar",[10704]],["RightTriangle",[8883]],["RightTriangleEqual",[8885]],["RightUpDownVector",[10575]],["RightUpTeeVector",[10588]],["RightUpVectorBar",[10580]],["RightUpVector",[8638]],["RightVectorBar",[10579]],["RightVector",[8640]],["ring",[730]],["risingdotseq",[8787]],["rlarr",[8644]],["rlhar",[8652]],["rlm",[8207]],["rmoustache",[9137]],["rmoust",[9137]],["rnmid",[10990]],["roang",[10221]],["roarr",[8702]],["robrk",[10215]],["ropar",[10630]],["ropf",[120163]],["Ropf",[8477]],["roplus",[10798]],["rotimes",[10805]],["RoundImplies",[10608]],["rpar",[41]],["rpargt",[10644]],["rppolint",[10770]],["rrarr",[8649]],["Rrightarrow",[8667]],["rsaquo",[8250]],["rscr",[120007]],["Rscr",[8475]],["rsh",[8625]],["Rsh",[8625]],["rsqb",[93]],["rsquo",[8217]],["rsquor",[8217]],["CloseCurlyQuote",[8217]],["rthree",[8908]],["rtimes",[8906]],["rtri",[9657]],["rtrie",[8885]],["rtrif",[9656]],["rtriltri",[10702]],["RuleDelayed",[10740]],["ruluhar",[10600]],["rx",[8478]],["Sacute",[346]],["sacute",[347]],["sbquo",[8218]],["scap",[10936]],["Scaron",[352]],["scaron",[353]],["Sc",[10940]],["sc",[8827]],["sccue",[8829]],["sce",[10928]],["scE",[10932]],["Scedil",[350]],["scedil",[351]],["Scirc",[348]],["scirc",[349]],["scnap",[10938]],["scnE",[10934]],["scnsim",[8937]],["scpolint",[10771]],["scsim",[8831]],["Scy",[1057]],["scy",[1089]],["sdotb",[8865]],["sdot",[8901]],["sdote",[10854]],["searhk",[10533]],["searr",[8600]],["seArr",[8664]],["searrow",[8600]],["sect",[167]],["semi",[59]],["seswar",[10537]],["setminus",[8726]],["setmn",[8726]],["sext",[10038]],["Sfr",[120086]],["sfr",[120112]],["sfrown",[8994]],["sharp",[9839]],["SHCHcy",[1065]],["shchcy",[1097]],["SHcy",[1064]],["shcy",[1096]],["ShortDownArrow",[8595]],["ShortLeftArrow",[8592]],["shortmid",[8739]],["shortparallel",[8741]],["ShortRightArrow",[8594]],["ShortUpArrow",[8593]],["shy",[173]],["Sigma",[931]],["sigma",[963]],["sigmaf",[962]],["sigmav",[962]],["sim",[8764]],["simdot",[10858]],["sime",[8771]],["simeq",[8771]],["simg",[10910]],["simgE",[10912]],["siml",[10909]],["simlE",[10911]],["simne",[8774]],["simplus",[10788]],["simrarr",[10610]],["slarr",[8592]],["SmallCircle",[8728]],["smallsetminus",[8726]],["smashp",[10803]],["smeparsl",[10724]],["smid",[8739]],["smile",[8995]],["smt",[10922]],["smte",[10924]],["smtes",[10924,65024]],["SOFTcy",[1068]],["softcy",[1100]],["solbar",[9023]],["solb",[10692]],["sol",[47]],["Sopf",[120138]],["sopf",[120164]],["spades",[9824]],["spadesuit",[9824]],["spar",[8741]],["sqcap",[8851]],["sqcaps",[8851,65024]],["sqcup",[8852]],["sqcups",[8852,65024]],["Sqrt",[8730]],["sqsub",[8847]],["sqsube",[8849]],["sqsubset",[8847]],["sqsubseteq",[8849]],["sqsup",[8848]],["sqsupe",[8850]],["sqsupset",[8848]],["sqsupseteq",[8850]],["square",[9633]],["Square",[9633]],["SquareIntersection",[8851]],["SquareSubset",[8847]],["SquareSubsetEqual",[8849]],["SquareSuperset",[8848]],["SquareSupersetEqual",[8850]],["SquareUnion",[8852]],["squarf",[9642]],["squ",[9633]],["squf",[9642]],["srarr",[8594]],["Sscr",[119982]],["sscr",[120008]],["ssetmn",[8726]],["ssmile",[8995]],["sstarf",[8902]],["Star",[8902]],["star",[9734]],["starf",[9733]],["straightepsilon",[1013]],["straightphi",[981]],["strns",[175]],["sub",[8834]],["Sub",[8912]],["subdot",[10941]],["subE",[10949]],["sube",[8838]],["subedot",[10947]],["submult",[10945]],["subnE",[10955]],["subne",[8842]],["subplus",[10943]],["subrarr",[10617]],["subset",[8834]],["Subset",[8912]],["subseteq",[8838]],["subseteqq",[10949]],["SubsetEqual",[8838]],["subsetneq",[8842]],["subsetneqq",[10955]],["subsim",[10951]],["subsub",[10965]],["subsup",[10963]],["succapprox",[10936]],["succ",[8827]],["succcurlyeq",[8829]],["Succeeds",[8827]],["SucceedsEqual",[10928]],["SucceedsSlantEqual",[8829]],["SucceedsTilde",[8831]],["succeq",[10928]],["succnapprox",[10938]],["succneqq",[10934]],["succnsim",[8937]],["succsim",[8831]],["SuchThat",[8715]],["sum",[8721]],["Sum",[8721]],["sung",[9834]],["sup1",[185]],["sup2",[178]],["sup3",[179]],["sup",[8835]],["Sup",[8913]],["supdot",[10942]],["supdsub",[10968]],["supE",[10950]],["supe",[8839]],["supedot",[10948]],["Superset",[8835]],["SupersetEqual",[8839]],["suphsol",[10185]],["suphsub",[10967]],["suplarr",[10619]],["supmult",[10946]],["supnE",[10956]],["supne",[8843]],["supplus",[10944]],["supset",[8835]],["Supset",[8913]],["supseteq",[8839]],["supseteqq",[10950]],["supsetneq",[8843]],["supsetneqq",[10956]],["supsim",[10952]],["supsub",[10964]],["supsup",[10966]],["swarhk",[10534]],["swarr",[8601]],["swArr",[8665]],["swarrow",[8601]],["swnwar",[10538]],["szlig",[223]],["Tab",[9]],["target",[8982]],["Tau",[932]],["tau",[964]],["tbrk",[9140]],["Tcaron",[356]],["tcaron",[357]],["Tcedil",[354]],["tcedil",[355]],["Tcy",[1058]],["tcy",[1090]],["tdot",[8411]],["telrec",[8981]],["Tfr",[120087]],["tfr",[120113]],["there4",[8756]],["therefore",[8756]],["Therefore",[8756]],["Theta",[920]],["theta",[952]],["thetasym",[977]],["thetav",[977]],["thickapprox",[8776]],["thicksim",[8764]],["ThickSpace",[8287,8202]],["ThinSpace",[8201]],["thinsp",[8201]],["thkap",[8776]],["thksim",[8764]],["THORN",[222]],["thorn",[254]],["tilde",[732]],["Tilde",[8764]],["TildeEqual",[8771]],["TildeFullEqual",[8773]],["TildeTilde",[8776]],["timesbar",[10801]],["timesb",[8864]],["times",[215]],["timesd",[10800]],["tint",[8749]],["toea",[10536]],["topbot",[9014]],["topcir",[10993]],["top",[8868]],["Topf",[120139]],["topf",[120165]],["topfork",[10970]],["tosa",[10537]],["tprime",[8244]],["trade",[8482]],["TRADE",[8482]],["triangle",[9653]],["triangledown",[9663]],["triangleleft",[9667]],["trianglelefteq",[8884]],["triangleq",[8796]],["triangleright",[9657]],["trianglerighteq",[8885]],["tridot",[9708]],["trie",[8796]],["triminus",[10810]],["TripleDot",[8411]],["triplus",[10809]],["trisb",[10701]],["tritime",[10811]],["trpezium",[9186]],["Tscr",[119983]],["tscr",[120009]],["TScy",[1062]],["tscy",[1094]],["TSHcy",[1035]],["tshcy",[1115]],["Tstrok",[358]],["tstrok",[359]],["twixt",[8812]],["twoheadleftarrow",[8606]],["twoheadrightarrow",[8608]],["Uacute",[218]],["uacute",[250]],["uarr",[8593]],["Uarr",[8607]],["uArr",[8657]],["Uarrocir",[10569]],["Ubrcy",[1038]],["ubrcy",[1118]],["Ubreve",[364]],["ubreve",[365]],["Ucirc",[219]],["ucirc",[251]],["Ucy",[1059]],["ucy",[1091]],["udarr",[8645]],["Udblac",[368]],["udblac",[369]],["udhar",[10606]],["ufisht",[10622]],["Ufr",[120088]],["ufr",[120114]],["Ugrave",[217]],["ugrave",[249]],["uHar",[10595]],["uharl",[8639]],["uharr",[8638]],["uhblk",[9600]],["ulcorn",[8988]],["ulcorner",[8988]],["ulcrop",[8975]],["ultri",[9720]],["Umacr",[362]],["umacr",[363]],["uml",[168]],["UnderBar",[95]],["UnderBrace",[9183]],["UnderBracket",[9141]],["UnderParenthesis",[9181]],["Union",[8899]],["UnionPlus",[8846]],["Uogon",[370]],["uogon",[371]],["Uopf",[120140]],["uopf",[120166]],["UpArrowBar",[10514]],["uparrow",[8593]],["UpArrow",[8593]],["Uparrow",[8657]],["UpArrowDownArrow",[8645]],["updownarrow",[8597]],["UpDownArrow",[8597]],["Updownarrow",[8661]],["UpEquilibrium",[10606]],["upharpoonleft",[8639]],["upharpoonright",[8638]],["uplus",[8846]],["UpperLeftArrow",[8598]],["UpperRightArrow",[8599]],["upsi",[965]],["Upsi",[978]],["upsih",[978]],["Upsilon",[933]],["upsilon",[965]],["UpTeeArrow",[8613]],["UpTee",[8869]],["upuparrows",[8648]],["urcorn",[8989]],["urcorner",[8989]],["urcrop",[8974]],["Uring",[366]],["uring",[367]],["urtri",[9721]],["Uscr",[119984]],["uscr",[120010]],["utdot",[8944]],["Utilde",[360]],["utilde",[361]],["utri",[9653]],["utrif",[9652]],["uuarr",[8648]],["Uuml",[220]],["uuml",[252]],["uwangle",[10663]],["vangrt",[10652]],["varepsilon",[1013]],["varkappa",[1008]],["varnothing",[8709]],["varphi",[981]],["varpi",[982]],["varpropto",[8733]],["varr",[8597]],["vArr",[8661]],["varrho",[1009]],["varsigma",[962]],["varsubsetneq",[8842,65024]],["varsubsetneqq",[10955,65024]],["varsupsetneq",[8843,65024]],["varsupsetneqq",[10956,65024]],["vartheta",[977]],["vartriangleleft",[8882]],["vartriangleright",[8883]],["vBar",[10984]],["Vbar",[10987]],["vBarv",[10985]],["Vcy",[1042]],["vcy",[1074]],["vdash",[8866]],["vDash",[8872]],["Vdash",[8873]],["VDash",[8875]],["Vdashl",[10982]],["veebar",[8891]],["vee",[8744]],["Vee",[8897]],["veeeq",[8794]],["vellip",[8942]],["verbar",[124]],["Verbar",[8214]],["vert",[124]],["Vert",[8214]],["VerticalBar",[8739]],["VerticalLine",[124]],["VerticalSeparator",[10072]],["VerticalTilde",[8768]],["VeryThinSpace",[8202]],["Vfr",[120089]],["vfr",[120115]],["vltri",[8882]],["vnsub",[8834,8402]],["vnsup",[8835,8402]],["Vopf",[120141]],["vopf",[120167]],["vprop",[8733]],["vrtri",[8883]],["Vscr",[119985]],["vscr",[120011]],["vsubnE",[10955,65024]],["vsubne",[8842,65024]],["vsupnE",[10956,65024]],["vsupne",[8843,65024]],["Vvdash",[8874]],["vzigzag",[10650]],["Wcirc",[372]],["wcirc",[373]],["wedbar",[10847]],["wedge",[8743]],["Wedge",[8896]],["wedgeq",[8793]],["weierp",[8472]],["Wfr",[120090]],["wfr",[120116]],["Wopf",[120142]],["wopf",[120168]],["wp",[8472]],["wr",[8768]],["wreath",[8768]],["Wscr",[119986]],["wscr",[120012]],["xcap",[8898]],["xcirc",[9711]],["xcup",[8899]],["xdtri",[9661]],["Xfr",[120091]],["xfr",[120117]],["xharr",[10231]],["xhArr",[10234]],["Xi",[926]],["xi",[958]],["xlarr",[10229]],["xlArr",[10232]],["xmap",[10236]],["xnis",[8955]],["xodot",[10752]],["Xopf",[120143]],["xopf",[120169]],["xoplus",[10753]],["xotime",[10754]],["xrarr",[10230]],["xrArr",[10233]],["Xscr",[119987]],["xscr",[120013]],["xsqcup",[10758]],["xuplus",[10756]],["xutri",[9651]],["xvee",[8897]],["xwedge",[8896]],["Yacute",[221]],["yacute",[253]],["YAcy",[1071]],["yacy",[1103]],["Ycirc",[374]],["ycirc",[375]],["Ycy",[1067]],["ycy",[1099]],["yen",[165]],["Yfr",[120092]],["yfr",[120118]],["YIcy",[1031]],["yicy",[1111]],["Yopf",[120144]],["yopf",[120170]],["Yscr",[119988]],["yscr",[120014]],["YUcy",[1070]],["yucy",[1102]],["yuml",[255]],["Yuml",[376]],["Zacute",[377]],["zacute",[378]],["Zcaron",[381]],["zcaron",[382]],["Zcy",[1047]],["zcy",[1079]],["Zdot",[379]],["zdot",[380]],["zeetrf",[8488]],["ZeroWidthSpace",[8203]],["Zeta",[918]],["zeta",[950]],["zfr",[120119]],["Zfr",[8488]],["ZHcy",[1046]],["zhcy",[1078]],["zigrarr",[8669]],["zopf",[120171]],["Zopf",[8484]],["Zscr",[119989]],["zscr",[120015]],["zwj",[8205]],["zwnj",[8204]]],s=[["NewLine",[10]]],o={},a={};!function(e,t){var n=i.length;for(;n--;){var r=i[n],o=r[0],a=r[1],l=a[0],c=a[1],u=l<32||l>126||62===l||60===l||38===l||34===l||39===l,d=void 0;u&&(d=t[l]=t[l]||{}),c?(e[o]=String.fromCharCode(l)+String.fromCharCode(c),u&&(d[c]=o)):(e[o]=String.fromCharCode(l),u&&(d[""]=o))}n=s.length;for(;n--;){var h=s[n],p=(o=h[0],h[1]);l=p[0],c=p[1];e[o]=String.fromCharCode(l)+(c?String.fromCharCode(c):"")}}(o,a);var l=function(){function e(){}return e.prototype.decode=function(e){return e&&e.length?e.replace(/&(#?[\w\d]+);?/g,(function(e,t){var n;if("#"===t.charAt(0)){var i="x"===t.charAt(1)?parseInt(t.substr(2).toLowerCase(),16):parseInt(t.substr(1));(!isNaN(i)||i>=-32768)&&(n=i<=65535?String.fromCharCode(i):r.fromCodePoint(i))}else n=o[t];return n||e})):""},e.decode=function(t){return(new e).decode(t)},e.prototype.encode=function(e){if(!e||!e.length)return"";for(var t=e.length,n="",r=0;r<t;){var i=a[e.charCodeAt(r)];if(i){var s=i[e.charCodeAt(r+1)];if(s?r++:s=i[""],s){n+="&"+s+";",r++;continue}}n+=e.charAt(r),r++}return n},e.encode=function(t){return(new e).encode(t)},e.prototype.encodeNonUTF=function(e){if(!e||!e.length)return"";for(var t=e.length,n="",i=0;i<t;){var s=e.charCodeAt(i),o=a[s];if(o){var l=o[e.charCodeAt(i+1)];if(l?i++:l=o[""],l){n+="&"+l+";",i++;continue}}s<32||s>126?s>=r.highSurrogateFrom&&s<=r.highSurrogateTo?(n+="&#"+r.getCodePoint(e,i)+";",i++):n+="&#"+s+";":n+=e.charAt(i),i++}return n},e.encodeNonUTF=function(t){return(new e).encodeNonUTF(t)},e.prototype.encodeNonASCII=function(e){if(!e||!e.length)return"";for(var t=e.length,n="",i=0;i<t;){var s=e.charCodeAt(i);s<=255?n+=e[i++]:s>=r.highSurrogateFrom&&s<=r.highSurrogateTo?(n+="&#"+r.getCodePoint(e,i)+";",i+=2):(n+="&#"+s+";",i++)}return n},e.encodeNonASCII=function(t){return(new e).encodeNonASCII(t)},e}();t.Html5Entities=l},"./node_modules/html-entities/lib/index.js":(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n("./node_modules/html-entities/lib/xml-entities.js");t.XmlEntities=r.XmlEntities;var i=n("./node_modules/html-entities/lib/html4-entities.js");t.Html4Entities=i.Html4Entities;var s=n("./node_modules/html-entities/lib/html5-entities.js");t.Html5Entities=s.Html5Entities,t.AllHtmlEntities=s.Html5Entities},"./node_modules/html-entities/lib/surrogate-pairs.js":(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.fromCodePoint=String.fromCodePoint||function(e){return String.fromCharCode(Math.floor((e-65536)/1024)+55296,(e-65536)%1024+56320)},t.getCodePoint=String.prototype.codePointAt?function(e,t){return e.codePointAt(t)}:function(e,t){return 1024*(e.charCodeAt(t)-55296)+e.charCodeAt(t+1)-56320+65536},t.highSurrogateFrom=55296,t.highSurrogateTo=56319},"./node_modules/html-entities/lib/xml-entities.js":(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n("./node_modules/html-entities/lib/surrogate-pairs.js"),i={"&lt":"<","&gt":">","&quot":'"',"&apos":"'","&amp":"&","&lt;":"<","&gt;":">","&quot;":'"',"&apos;":"'","&amp;":"&"},s={60:"lt",62:"gt",34:"quot",39:"apos",38:"amp"},o={"<":"&lt;",">":"&gt;",'"':"&quot;","'":"&apos;","&":"&amp;"},a=function(){function e(){}return e.prototype.encode=function(e){return e&&e.length?e.replace(/[<>"'&]/g,(function(e){return o[e]})):""},e.encode=function(t){return(new e).encode(t)},e.prototype.decode=function(e){return e&&e.length?e.replace(/&#?[0-9a-zA-Z]+;?/g,(function(e){if("#"===e.charAt(1)){var t="x"===e.charAt(2).toLowerCase()?parseInt(e.substr(3),16):parseInt(e.substr(2));return!isNaN(t)||t>=-32768?t<=65535?String.fromCharCode(t):r.fromCodePoint(t):""}return i[e]||e})):""},e.decode=function(t){return(new e).decode(t)},e.prototype.encodeNonUTF=function(e){if(!e||!e.length)return"";for(var t=e.length,n="",i=0;i<t;){var o=e.charCodeAt(i),a=s[o];a?(n+="&"+a+";",i++):(o<32||o>126?o>=r.highSurrogateFrom&&o<=r.highSurrogateTo?(n+="&#"+r.getCodePoint(e,i)+";",i++):n+="&#"+o+";":n+=e.charAt(i),i++)}return n},e.encodeNonUTF=function(t){return(new e).encodeNonUTF(t)},e.prototype.encodeNonASCII=function(e){if(!e||!e.length)return"";for(var t=e.length,n="",i=0;i<t;){var s=e.charCodeAt(i);s<=255?n+=e[i++]:(s>=r.highSurrogateFrom&&s<=r.highSurrogateTo?(n+="&#"+r.getCodePoint(e,i)+";",i++):n+="&#"+s+";",i++)}return n},e.encodeNonASCII=function(t){return(new e).encodeNonASCII(t)},e}();t.XmlEntities=a},"./node_modules/loglevel/lib/loglevel.js":function(e,t,n){var r,i;!function(s,o){"use strict";r=function(){var e=function(){},t="undefined",n=typeof window!==t&&typeof window.navigator!==t&&/Trident\/|MSIE /.test(window.navigator.userAgent),r=["trace","debug","info","warn","error"];function i(e,t){var n=e[t];if("function"==typeof n.bind)return n.bind(e);try{return Function.prototype.bind.call(n,e)}catch(t){return function(){return Function.prototype.apply.apply(n,[e,arguments])}}}function s(){console.log&&(console.log.apply?console.log.apply(console,arguments):Function.prototype.apply.apply(console.log,[console,arguments])),console.trace&&console.trace()}function o(r){return"debug"===r&&(r="log"),typeof console!==t&&("trace"===r&&n?s:void 0!==console[r]?i(console,r):void 0!==console.log?i(console,"log"):e)}function a(t,n){for(var i=0;i<r.length;i++){var s=r[i];this[s]=i<t?e:this.methodFactory(s,t,n)}this.log=this.debug}function l(e,n,r){return function(){typeof console!==t&&(a.call(this,n,r),this[e].apply(this,arguments))}}function c(e,t,n){return o(e)||l.apply(this,arguments)}function u(e,n,i){var s,o=this;n=null==n?"WARN":n;var l="loglevel";function u(e){var n=(r[e]||"silent").toUpperCase();if(typeof window!==t&&l){try{return void(window.localStorage[l]=n)}catch(e){}try{window.document.cookie=encodeURIComponent(l)+"="+n+";"}catch(e){}}}function d(){var e;if(typeof window!==t&&l){try{e=window.localStorage[l]}catch(e){}if(typeof e===t)try{var n=window.document.cookie,r=n.indexOf(encodeURIComponent(l)+"=");-1!==r&&(e=/^([^;]+)/.exec(n.slice(r))[1])}catch(e){}return void 0===o.levels[e]&&(e=void 0),e}}function h(){if(typeof window!==t&&l){try{return void window.localStorage.removeItem(l)}catch(e){}try{window.document.cookie=encodeURIComponent(l)+"=; expires=Thu, 01 Jan 1970 00:00:00 UTC"}catch(e){}}}"string"==typeof e?l+=":"+e:"symbol"==typeof e&&(l=void 0),o.name=e,o.levels={TRACE:0,DEBUG:1,INFO:2,WARN:3,ERROR:4,SILENT:5},o.methodFactory=i||c,o.getLevel=function(){return s},o.setLevel=function(n,r){if("string"==typeof n&&void 0!==o.levels[n.toUpperCase()]&&(n=o.levels[n.toUpperCase()]),!("number"==typeof n&&n>=0&&n<=o.levels.SILENT))throw"log.setLevel() called with invalid level: "+n;if(s=n,!1!==r&&u(n),a.call(o,n,e),typeof console===t&&n<o.levels.SILENT)return"No console available for logging"},o.setDefaultLevel=function(e){n=e,d()||o.setLevel(e,!1)},o.resetLevel=function(){o.setLevel(n,!1),h()},o.enableAll=function(e){o.setLevel(o.levels.TRACE,e)},o.disableAll=function(e){o.setLevel(o.levels.SILENT,e)};var p=d();null==p&&(p=n),o.setLevel(p,!1)}var d=new u,h={};d.getLogger=function(e){if("symbol"!=typeof e&&"string"!=typeof e||""===e)throw new TypeError("You must supply a name when creating a logger.");var t=h[e];return t||(t=h[e]=new u(e,d.getLevel(),d.methodFactory)),t};var p=typeof window!==t?window.log:void 0;return d.noConflict=function(){return typeof window!==t&&window.log===d&&(window.log=p),d},d.getLoggers=function(){return h},d.default=d,d},void 0===(i="function"==typeof r?r.call(t,n,t,e):r)||(e.exports=i)}()},"./node_modules/matter-js/build/matter.js":function(e,t,n){var r;r=function(){return function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(r,i,function(t){return e[t]}.bind(null,i));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=21)}([function(e,t){var r={};e.exports=r,function(){r._nextId=0,r._seed=0,r._nowStartTime=+new Date,r._warnedOnce={},r._decomp=null,r.extend=function(e,t){var n,i;"boolean"==typeof t?(n=2,i=t):(n=1,i=!0);for(var s=n;s<arguments.length;s++){var o=arguments[s];if(o)for(var a in o)i&&o[a]&&o[a].constructor===Object?e[a]&&e[a].constructor!==Object?e[a]=o[a]:(e[a]=e[a]||{},r.extend(e[a],i,o[a])):e[a]=o[a]}return e},r.clone=function(e,t){return r.extend({},t,e)},r.keys=function(e){if(Object.keys)return Object.keys(e);var t=[];for(var n in e)t.push(n);return t},r.values=function(e){var t=[];if(Object.keys){for(var n=Object.keys(e),r=0;r<n.length;r++)t.push(e[n[r]]);return t}for(var i in e)t.push(e[i]);return t},r.get=function(e,t,n,r){t=t.split(".").slice(n,r);for(var i=0;i<t.length;i+=1)e=e[t[i]];return e},r.set=function(e,t,n,i,s){var o=t.split(".").slice(i,s);return r.get(e,t,0,-1)[o[o.length-1]]=n,n},r.shuffle=function(e){for(var t=e.length-1;t>0;t--){var n=Math.floor(r.random()*(t+1)),i=e[t];e[t]=e[n],e[n]=i}return e},r.choose=function(e){return e[Math.floor(r.random()*e.length)]},r.isElement=function(e){return"undefined"!=typeof HTMLElement?e instanceof HTMLElement:!!(e&&e.nodeType&&e.nodeName)},r.isArray=function(e){return"[object Array]"===Object.prototype.toString.call(e)},r.isFunction=function(e){return"function"==typeof e},r.isPlainObject=function(e){return"object"==typeof e&&e.constructor===Object},r.isString=function(e){return"[object String]"===toString.call(e)},r.clamp=function(e,t,n){return e<t?t:e>n?n:e},r.sign=function(e){return e<0?-1:1},r.now=function(){if("undefined"!=typeof window&&window.performance){if(window.performance.now)return window.performance.now();if(window.performance.webkitNow)return window.performance.webkitNow()}return Date.now?Date.now():new Date-r._nowStartTime},r.random=function(t,n){return n=void 0!==n?n:1,(t=void 0!==t?t:0)+e()*(n-t)};var e=function(){return r._seed=(9301*r._seed+49297)%233280,r._seed/233280};r.colorToNumber=function(e){return 3==(e=e.replace("#","")).length&&(e=e.charAt(0)+e.charAt(0)+e.charAt(1)+e.charAt(1)+e.charAt(2)+e.charAt(2)),parseInt(e,16)},r.logLevel=1,r.log=function(){console&&r.logLevel>0&&r.logLevel<=3&&console.log.apply(console,["matter-js:"].concat(Array.prototype.slice.call(arguments)))},r.info=function(){console&&r.logLevel>0&&r.logLevel<=2&&console.info.apply(console,["matter-js:"].concat(Array.prototype.slice.call(arguments)))},r.warn=function(){console&&r.logLevel>0&&r.logLevel<=3&&console.warn.apply(console,["matter-js:"].concat(Array.prototype.slice.call(arguments)))},r.warnOnce=function(){var e=Array.prototype.slice.call(arguments).join(" ");r._warnedOnce[e]||(r.warn(e),r._warnedOnce[e]=!0)},r.deprecated=function(e,t,n){e[t]=r.chain((function(){r.warnOnce("🔅 deprecated 🔅",n)}),e[t])},r.nextId=function(){return r._nextId++},r.indexOf=function(e,t){if(e.indexOf)return e.indexOf(t);for(var n=0;n<e.length;n++)if(e[n]===t)return n;return-1},r.map=function(e,t){if(e.map)return e.map(t);for(var n=[],r=0;r<e.length;r+=1)n.push(t(e[r]));return n},r.topologicalSort=function(e){var t=[],n=[],i=[];for(var s in e)n[s]||i[s]||r._topologicalSort(s,n,i,e,t);return t},r._topologicalSort=function(e,t,n,i,s){var o=i[e]||[];n[e]=!0;for(var a=0;a<o.length;a+=1){var l=o[a];n[l]||t[l]||r._topologicalSort(l,t,n,i,s)}n[e]=!1,t[e]=!0,s.push(e)},r.chain=function(){for(var e=[],t=0;t<arguments.length;t+=1){var n=arguments[t];n._chained?e.push.apply(e,n._chained):e.push(n)}var r=function(){for(var t,n=new Array(arguments.length),r=0,i=arguments.length;r<i;r++)n[r]=arguments[r];for(r=0;r<e.length;r+=1){var s=e[r].apply(t,n);void 0!==s&&(t=s)}return t};return r._chained=e,r},r.chainPathBefore=function(e,t,n){return r.set(e,t,r.chain(n,r.get(e,t)))},r.chainPathAfter=function(e,t,n){return r.set(e,t,r.chain(r.get(e,t),n))},r.setDecomp=function(e){r._decomp=e},r.getDecomp=function(){var e=r._decomp;try{e||"undefined"==typeof window||(e=window.decomp),e||void 0===n.g||(e=n.g.decomp)}catch(t){e=null}return e}}()},function(e,t){var n={};e.exports=n,n.create=function(e){var t={min:{x:0,y:0},max:{x:0,y:0}};return e&&n.update(t,e),t},n.update=function(e,t,n){e.min.x=1/0,e.max.x=-1/0,e.min.y=1/0,e.max.y=-1/0;for(var r=0;r<t.length;r++){var i=t[r];i.x>e.max.x&&(e.max.x=i.x),i.x<e.min.x&&(e.min.x=i.x),i.y>e.max.y&&(e.max.y=i.y),i.y<e.min.y&&(e.min.y=i.y)}n&&(n.x>0?e.max.x+=n.x:e.min.x+=n.x,n.y>0?e.max.y+=n.y:e.min.y+=n.y)},n.contains=function(e,t){return t.x>=e.min.x&&t.x<=e.max.x&&t.y>=e.min.y&&t.y<=e.max.y},n.overlaps=function(e,t){return e.min.x<=t.max.x&&e.max.x>=t.min.x&&e.max.y>=t.min.y&&e.min.y<=t.max.y},n.translate=function(e,t){e.min.x+=t.x,e.max.x+=t.x,e.min.y+=t.y,e.max.y+=t.y},n.shift=function(e,t){var n=e.max.x-e.min.x,r=e.max.y-e.min.y;e.min.x=t.x,e.max.x=t.x+n,e.min.y=t.y,e.max.y=t.y+r}},function(e,t){var n={};e.exports=n,n.create=function(e,t){return{x:e||0,y:t||0}},n.clone=function(e){return{x:e.x,y:e.y}},n.magnitude=function(e){return Math.sqrt(e.x*e.x+e.y*e.y)},n.magnitudeSquared=function(e){return e.x*e.x+e.y*e.y},n.rotate=function(e,t,n){var r=Math.cos(t),i=Math.sin(t);n||(n={});var s=e.x*r-e.y*i;return n.y=e.x*i+e.y*r,n.x=s,n},n.rotateAbout=function(e,t,n,r){var i=Math.cos(t),s=Math.sin(t);r||(r={});var o=n.x+((e.x-n.x)*i-(e.y-n.y)*s);return r.y=n.y+((e.x-n.x)*s+(e.y-n.y)*i),r.x=o,r},n.normalise=function(e){var t=n.magnitude(e);return 0===t?{x:0,y:0}:{x:e.x/t,y:e.y/t}},n.dot=function(e,t){return e.x*t.x+e.y*t.y},n.cross=function(e,t){return e.x*t.y-e.y*t.x},n.cross3=function(e,t,n){return(t.x-e.x)*(n.y-e.y)-(t.y-e.y)*(n.x-e.x)},n.add=function(e,t,n){return n||(n={}),n.x=e.x+t.x,n.y=e.y+t.y,n},n.sub=function(e,t,n){return n||(n={}),n.x=e.x-t.x,n.y=e.y-t.y,n},n.mult=function(e,t){return{x:e.x*t,y:e.y*t}},n.div=function(e,t){return{x:e.x/t,y:e.y/t}},n.perp=function(e,t){return{x:(t=!0===t?-1:1)*-e.y,y:t*e.x}},n.neg=function(e){return{x:-e.x,y:-e.y}},n.angle=function(e,t){return Math.atan2(t.y-e.y,t.x-e.x)},n._temp=[n.create(),n.create(),n.create(),n.create(),n.create(),n.create()]},function(e,t,n){var r={};e.exports=r;var i=n(2),s=n(0);r.create=function(e,t){for(var n=[],r=0;r<e.length;r++){var i=e[r],s={x:i.x,y:i.y,index:r,body:t,isInternal:!1};n.push(s)}return n},r.fromPath=function(e,t){var n=[];return e.replace(/L?\s*([-\d.e]+)[\s,]*([-\d.e]+)*/gi,(function(e,t,r){n.push({x:parseFloat(t),y:parseFloat(r)})})),r.create(n,t)},r.centre=function(e){for(var t,n,s,o=r.area(e,!0),a={x:0,y:0},l=0;l<e.length;l++)s=(l+1)%e.length,t=i.cross(e[l],e[s]),n=i.mult(i.add(e[l],e[s]),t),a=i.add(a,n);return i.div(a,6*o)},r.mean=function(e){for(var t={x:0,y:0},n=0;n<e.length;n++)t.x+=e[n].x,t.y+=e[n].y;return i.div(t,e.length)},r.area=function(e,t){for(var n=0,r=e.length-1,i=0;i<e.length;i++)n+=(e[r].x-e[i].x)*(e[r].y+e[i].y),r=i;return t?n/2:Math.abs(n)/2},r.inertia=function(e,t){for(var n,r,s=0,o=0,a=e,l=0;l<a.length;l++)r=(l+1)%a.length,s+=(n=Math.abs(i.cross(a[r],a[l])))*(i.dot(a[r],a[r])+i.dot(a[r],a[l])+i.dot(a[l],a[l])),o+=n;return t/6*(s/o)},r.translate=function(e,t,n){n=void 0!==n?n:1;var r,i=e.length,s=t.x*n,o=t.y*n;for(r=0;r<i;r++)e[r].x+=s,e[r].y+=o;return e},r.rotate=function(e,t,n){if(0!==t){var r,i,s,o,a=Math.cos(t),l=Math.sin(t),c=n.x,u=n.y,d=e.length;for(o=0;o<d;o++)i=(r=e[o]).x-c,s=r.y-u,r.x=c+(i*a-s*l),r.y=u+(i*l+s*a);return e}},r.contains=function(e,t){for(var n,r=t.x,i=t.y,s=e.length,o=e[s-1],a=0;a<s;a++){if(n=e[a],(r-o.x)*(n.y-o.y)+(i-o.y)*(o.x-n.x)>0)return!1;o=n}return!0},r.scale=function(e,t,n,s){if(1===t&&1===n)return e;var o,a;s=s||r.centre(e);for(var l=0;l<e.length;l++)o=e[l],a=i.sub(o,s),e[l].x=s.x+a.x*t,e[l].y=s.y+a.y*n;return e},r.chamfer=function(e,t,n,r,o){t="number"==typeof t?[t]:t||[8],n=void 0!==n?n:-1,r=r||2,o=o||14;for(var a=[],l=0;l<e.length;l++){var c=e[l-1>=0?l-1:e.length-1],u=e[l],d=e[(l+1)%e.length],h=t[l<t.length?l:t.length-1];if(0!==h){var p=i.normalise({x:u.y-c.y,y:c.x-u.x}),f=i.normalise({x:d.y-u.y,y:u.x-d.x}),m=Math.sqrt(2*Math.pow(h,2)),g=i.mult(s.clone(p),h),v=i.normalise(i.mult(i.add(p,f),.5)),y=i.sub(u,i.mult(v,m)),b=n;-1===n&&(b=1.75*Math.pow(h,.32)),(b=s.clamp(b,r,o))%2==1&&(b+=1);for(var w=Math.acos(i.dot(p,f))/b,_=0;_<b;_++)a.push(i.add(i.rotate(g,w*_),y))}else a.push(u)}return a},r.clockwiseSort=function(e){var t=r.mean(e);return e.sort((function(e,n){return i.angle(t,e)-i.angle(t,n)})),e},r.isConvex=function(e){var t,n,r,i,s=0,o=e.length;if(o<3)return null;for(t=0;t<o;t++)if(r=(t+2)%o,i=(e[n=(t+1)%o].x-e[t].x)*(e[r].y-e[n].y),(i-=(e[n].y-e[t].y)*(e[r].x-e[n].x))<0?s|=1:i>0&&(s|=2),3===s)return!1;return 0!==s||null},r.hull=function(e){var t,n,r=[],s=[];for((e=e.slice(0)).sort((function(e,t){var n=e.x-t.x;return 0!==n?n:e.y-t.y})),n=0;n<e.length;n+=1){for(t=e[n];s.length>=2&&i.cross3(s[s.length-2],s[s.length-1],t)<=0;)s.pop();s.push(t)}for(n=e.length-1;n>=0;n-=1){for(t=e[n];r.length>=2&&i.cross3(r[r.length-2],r[r.length-1],t)<=0;)r.pop();r.push(t)}return r.pop(),s.pop(),r.concat(s)}},function(e,t,n){var r={};e.exports=r;var i=n(0);r.on=function(e,t,n){for(var r,i=t.split(" "),s=0;s<i.length;s++)r=i[s],e.events=e.events||{},e.events[r]=e.events[r]||[],e.events[r].push(n);return n},r.off=function(e,t,n){if(t){"function"==typeof t&&(n=t,t=i.keys(e.events).join(" "));for(var r=t.split(" "),s=0;s<r.length;s++){var o=e.events[r[s]],a=[];if(n&&o)for(var l=0;l<o.length;l++)o[l]!==n&&a.push(o[l]);e.events[r[s]]=a}}else e.events={}},r.trigger=function(e,t,n){var r,s,o,a,l=e.events;if(l&&i.keys(l).length>0){n||(n={}),r=t.split(" ");for(var c=0;c<r.length;c++)if(o=l[s=r[c]]){(a=i.clone(n,!1)).name=s,a.source=e;for(var u=0;u<o.length;u++)o[u].apply(e,[a])}}}},function(e,t,n){var r={};e.exports=r;var i=n(4),s=n(0),o=n(1),a=n(6);r.create=function(e){return s.extend({id:s.nextId(),type:"composite",parent:null,isModified:!1,bodies:[],constraints:[],composites:[],label:"Composite",plugin:{},cache:{allBodies:null,allConstraints:null,allComposites:null}},e)},r.setModified=function(e,t,n,i){if(e.isModified=t,t&&e.cache&&(e.cache.allBodies=null,e.cache.allConstraints=null,e.cache.allComposites=null),n&&e.parent&&r.setModified(e.parent,t,n,i),i)for(var s=0;s<e.composites.length;s++){var o=e.composites[s];r.setModified(o,t,n,i)}},r.add=function(e,t){var n=[].concat(t);i.trigger(e,"beforeAdd",{object:t});for(var o=0;o<n.length;o++){var a=n[o];switch(a.type){case"body":if(a.parent!==a){s.warn("Composite.add: skipped adding a compound body part (you must add its parent instead)");break}r.addBody(e,a);break;case"constraint":r.addConstraint(e,a);break;case"composite":r.addComposite(e,a);break;case"mouseConstraint":r.addConstraint(e,a.constraint)}}return i.trigger(e,"afterAdd",{object:t}),e},r.remove=function(e,t,n){var s=[].concat(t);i.trigger(e,"beforeRemove",{object:t});for(var o=0;o<s.length;o++){var a=s[o];switch(a.type){case"body":r.removeBody(e,a,n);break;case"constraint":r.removeConstraint(e,a,n);break;case"composite":r.removeComposite(e,a,n);break;case"mouseConstraint":r.removeConstraint(e,a.constraint)}}return i.trigger(e,"afterRemove",{object:t}),e},r.addComposite=function(e,t){return e.composites.push(t),t.parent=e,r.setModified(e,!0,!0,!1),e},r.removeComposite=function(e,t,n){var i=s.indexOf(e.composites,t);if(-1!==i&&r.removeCompositeAt(e,i),n)for(var o=0;o<e.composites.length;o++)r.removeComposite(e.composites[o],t,!0);return e},r.removeCompositeAt=function(e,t){return e.composites.splice(t,1),r.setModified(e,!0,!0,!1),e},r.addBody=function(e,t){return e.bodies.push(t),r.setModified(e,!0,!0,!1),e},r.removeBody=function(e,t,n){var i=s.indexOf(e.bodies,t);if(-1!==i&&r.removeBodyAt(e,i),n)for(var o=0;o<e.composites.length;o++)r.removeBody(e.composites[o],t,!0);return e},r.removeBodyAt=function(e,t){return e.bodies.splice(t,1),r.setModified(e,!0,!0,!1),e},r.addConstraint=function(e,t){return e.constraints.push(t),r.setModified(e,!0,!0,!1),e},r.removeConstraint=function(e,t,n){var i=s.indexOf(e.constraints,t);if(-1!==i&&r.removeConstraintAt(e,i),n)for(var o=0;o<e.composites.length;o++)r.removeConstraint(e.composites[o],t,!0);return e},r.removeConstraintAt=function(e,t){return e.constraints.splice(t,1),r.setModified(e,!0,!0,!1),e},r.clear=function(e,t,n){if(n)for(var i=0;i<e.composites.length;i++)r.clear(e.composites[i],t,!0);return t?e.bodies=e.bodies.filter((function(e){return e.isStatic})):e.bodies.length=0,e.constraints.length=0,e.composites.length=0,r.setModified(e,!0,!0,!1),e},r.allBodies=function(e){if(e.cache&&e.cache.allBodies)return e.cache.allBodies;for(var t=[].concat(e.bodies),n=0;n<e.composites.length;n++)t=t.concat(r.allBodies(e.composites[n]));return e.cache&&(e.cache.allBodies=t),t},r.allConstraints=function(e){if(e.cache&&e.cache.allConstraints)return e.cache.allConstraints;for(var t=[].concat(e.constraints),n=0;n<e.composites.length;n++)t=t.concat(r.allConstraints(e.composites[n]));return e.cache&&(e.cache.allConstraints=t),t},r.allComposites=function(e){if(e.cache&&e.cache.allComposites)return e.cache.allComposites;for(var t=[].concat(e.composites),n=0;n<e.composites.length;n++)t=t.concat(r.allComposites(e.composites[n]));return e.cache&&(e.cache.allComposites=t),t},r.get=function(e,t,n){var i,s;switch(n){case"body":i=r.allBodies(e);break;case"constraint":i=r.allConstraints(e);break;case"composite":i=r.allComposites(e).concat(e)}return i?0===(s=i.filter((function(e){return e.id.toString()===t.toString()}))).length?null:s[0]:null},r.move=function(e,t,n){return r.remove(e,t),r.add(n,t),e},r.rebase=function(e){for(var t=r.allBodies(e).concat(r.allConstraints(e)).concat(r.allComposites(e)),n=0;n<t.length;n++)t[n].id=s.nextId();return e},r.translate=function(e,t,n){for(var i=n?r.allBodies(e):e.bodies,s=0;s<i.length;s++)a.translate(i[s],t);return e},r.rotate=function(e,t,n,i){for(var s=Math.cos(t),o=Math.sin(t),l=i?r.allBodies(e):e.bodies,c=0;c<l.length;c++){var u=l[c],d=u.position.x-n.x,h=u.position.y-n.y;a.setPosition(u,{x:n.x+(d*s-h*o),y:n.y+(d*o+h*s)}),a.rotate(u,t)}return e},r.scale=function(e,t,n,i,s){for(var o=s?r.allBodies(e):e.bodies,l=0;l<o.length;l++){var c=o[l],u=c.position.x-i.x,d=c.position.y-i.y;a.setPosition(c,{x:i.x+u*t,y:i.y+d*n}),a.scale(c,t,n)}return e},r.bounds=function(e){for(var t=r.allBodies(e),n=[],i=0;i<t.length;i+=1){var s=t[i];n.push(s.bounds.min,s.bounds.max)}return o.create(n)}},function(e,t,n){var r={};e.exports=r;var i=n(3),s=n(2),o=n(7),a=(n(16),n(0)),l=n(1),c=n(11);!function(){r._inertiaScale=4,r._nextCollidingGroupId=1,r._nextNonCollidingGroupId=-1,r._nextCategory=1,r.create=function(t){var n={id:a.nextId(),type:"body",label:"Body",parts:[],plugin:{},angle:0,vertices:i.fromPath("L 0 0 L 40 0 L 40 40 L 0 40"),position:{x:0,y:0},force:{x:0,y:0},torque:0,positionImpulse:{x:0,y:0},constraintImpulse:{x:0,y:0,angle:0},totalContacts:0,speed:0,angularSpeed:0,velocity:{x:0,y:0},angularVelocity:0,isSensor:!1,isStatic:!1,isSleeping:!1,motion:0,sleepThreshold:60,density:.001,restitution:0,friction:.1,frictionStatic:.5,frictionAir:.01,collisionFilter:{category:1,mask:4294967295,group:0},slop:.05,timeScale:1,render:{visible:!0,opacity:1,strokeStyle:null,fillStyle:null,lineWidth:null,sprite:{xScale:1,yScale:1,xOffset:0,yOffset:0}},events:null,bounds:null,chamfer:null,circleRadius:0,positionPrev:null,anglePrev:0,parent:null,axes:null,area:0,mass:0,inertia:0,_original:null},r=a.extend(n,t);return e(r,t),r},r.nextGroup=function(e){return e?r._nextNonCollidingGroupId--:r._nextCollidingGroupId++},r.nextCategory=function(){return r._nextCategory=r._nextCategory<<1,r._nextCategory};var e=function(e,t){t=t||{},r.set(e,{bounds:e.bounds||l.create(e.vertices),positionPrev:e.positionPrev||s.clone(e.position),anglePrev:e.anglePrev||e.angle,vertices:e.vertices,parts:e.parts||[e],isStatic:e.isStatic,isSleeping:e.isSleeping,parent:e.parent||e}),i.rotate(e.vertices,e.angle,e.position),c.rotate(e.axes,e.angle),l.update(e.bounds,e.vertices,e.velocity),r.set(e,{axes:t.axes||e.axes,area:t.area||e.area,mass:t.mass||e.mass,inertia:t.inertia||e.inertia});var n=e.isStatic?"#14151f":a.choose(["#f19648","#f5d259","#f55a3c","#063e7b","#ececd1"]),o=e.isStatic?"#555":"#ccc",u=e.isStatic&&null===e.render.fillStyle?1:0;e.render.fillStyle=e.render.fillStyle||n,e.render.strokeStyle=e.render.strokeStyle||o,e.render.lineWidth=e.render.lineWidth||u,e.render.sprite.xOffset+=-(e.bounds.min.x-e.position.x)/(e.bounds.max.x-e.bounds.min.x),e.render.sprite.yOffset+=-(e.bounds.min.y-e.position.y)/(e.bounds.max.y-e.bounds.min.y)};r.set=function(e,t,n){var i;for(i in"string"==typeof t&&(i=t,(t={})[i]=n),t)if(Object.prototype.hasOwnProperty.call(t,i))switch(n=t[i],i){case"isStatic":r.setStatic(e,n);break;case"isSleeping":o.set(e,n);break;case"mass":r.setMass(e,n);break;case"density":r.setDensity(e,n);break;case"inertia":r.setInertia(e,n);break;case"vertices":r.setVertices(e,n);break;case"position":r.setPosition(e,n);break;case"angle":r.setAngle(e,n);break;case"velocity":r.setVelocity(e,n);break;case"angularVelocity":r.setAngularVelocity(e,n);break;case"parts":r.setParts(e,n);break;case"centre":r.setCentre(e,n);break;default:e[i]=n}},r.setStatic=function(e,t){for(var n=0;n<e.parts.length;n++){var r=e.parts[n];r.isStatic=t,t?(r._original={restitution:r.restitution,friction:r.friction,mass:r.mass,inertia:r.inertia,density:r.density,inverseMass:r.inverseMass,inverseInertia:r.inverseInertia},r.restitution=0,r.friction=1,r.mass=r.inertia=r.density=1/0,r.inverseMass=r.inverseInertia=0,r.positionPrev.x=r.position.x,r.positionPrev.y=r.position.y,r.anglePrev=r.angle,r.angularVelocity=0,r.speed=0,r.angularSpeed=0,r.motion=0):r._original&&(r.restitution=r._original.restitution,r.friction=r._original.friction,r.mass=r._original.mass,r.inertia=r._original.inertia,r.density=r._original.density,r.inverseMass=r._original.inverseMass,r.inverseInertia=r._original.inverseInertia,r._original=null)}},r.setMass=function(e,t){var n=e.inertia/(e.mass/6);e.inertia=n*(t/6),e.inverseInertia=1/e.inertia,e.mass=t,e.inverseMass=1/e.mass,e.density=e.mass/e.area},r.setDensity=function(e,t){r.setMass(e,t*e.area),e.density=t},r.setInertia=function(e,t){e.inertia=t,e.inverseInertia=1/e.inertia},r.setVertices=function(e,t){t[0].body===e?e.vertices=t:e.vertices=i.create(t,e),e.axes=c.fromVertices(e.vertices),e.area=i.area(e.vertices),r.setMass(e,e.density*e.area);var n=i.centre(e.vertices);i.translate(e.vertices,n,-1),r.setInertia(e,r._inertiaScale*i.inertia(e.vertices,e.mass)),i.translate(e.vertices,e.position),l.update(e.bounds,e.vertices,e.velocity)},r.setParts=function(e,t,n){var s;for(t=t.slice(0),e.parts.length=0,e.parts.push(e),e.parent=e,s=0;s<t.length;s++){var o=t[s];o!==e&&(o.parent=e,e.parts.push(o))}if(1!==e.parts.length){if(n=void 0===n||n){var a=[];for(s=0;s<t.length;s++)a=a.concat(t[s].vertices);i.clockwiseSort(a);var l=i.hull(a),c=i.centre(l);r.setVertices(e,l),i.translate(e.vertices,c)}var u=r._totalProperties(e);e.area=u.area,e.parent=e,e.position.x=u.centre.x,e.position.y=u.centre.y,e.positionPrev.x=u.centre.x,e.positionPrev.y=u.centre.y,r.setMass(e,u.mass),r.setInertia(e,u.inertia),r.setPosition(e,u.centre)}},r.setCentre=function(e,t,n){n?(e.positionPrev.x+=t.x,e.positionPrev.y+=t.y,e.position.x+=t.x,e.position.y+=t.y):(e.positionPrev.x=t.x-(e.position.x-e.positionPrev.x),e.positionPrev.y=t.y-(e.position.y-e.positionPrev.y),e.position.x=t.x,e.position.y=t.y)},r.setPosition=function(e,t){var n=s.sub(t,e.position);e.positionPrev.x+=n.x,e.positionPrev.y+=n.y;for(var r=0;r<e.parts.length;r++){var o=e.parts[r];o.position.x+=n.x,o.position.y+=n.y,i.translate(o.vertices,n),l.update(o.bounds,o.vertices,e.velocity)}},r.setAngle=function(e,t){var n=t-e.angle;e.anglePrev+=n;for(var r=0;r<e.parts.length;r++){var o=e.parts[r];o.angle+=n,i.rotate(o.vertices,n,e.position),c.rotate(o.axes,n),l.update(o.bounds,o.vertices,e.velocity),r>0&&s.rotateAbout(o.position,n,e.position,o.position)}},r.setVelocity=function(e,t){e.positionPrev.x=e.position.x-t.x,e.positionPrev.y=e.position.y-t.y,e.velocity.x=t.x,e.velocity.y=t.y,e.speed=s.magnitude(e.velocity)},r.setAngularVelocity=function(e,t){e.anglePrev=e.angle-t,e.angularVelocity=t,e.angularSpeed=Math.abs(e.angularVelocity)},r.translate=function(e,t){r.setPosition(e,s.add(e.position,t))},r.rotate=function(e,t,n){if(n){var i=Math.cos(t),s=Math.sin(t),o=e.position.x-n.x,a=e.position.y-n.y;r.setPosition(e,{x:n.x+(o*i-a*s),y:n.y+(o*s+a*i)}),r.setAngle(e,e.angle+t)}else r.setAngle(e,e.angle+t)},r.scale=function(e,t,n,s){var o=0,a=0;s=s||e.position;for(var u=0;u<e.parts.length;u++){var d=e.parts[u];i.scale(d.vertices,t,n,s),d.axes=c.fromVertices(d.vertices),d.area=i.area(d.vertices),r.setMass(d,e.density*d.area),i.translate(d.vertices,{x:-d.position.x,y:-d.position.y}),r.setInertia(d,r._inertiaScale*i.inertia(d.vertices,d.mass)),i.translate(d.vertices,{x:d.position.x,y:d.position.y}),u>0&&(o+=d.area,a+=d.inertia),d.position.x=s.x+(d.position.x-s.x)*t,d.position.y=s.y+(d.position.y-s.y)*n,l.update(d.bounds,d.vertices,e.velocity)}e.parts.length>1&&(e.area=o,e.isStatic||(r.setMass(e,e.density*o),r.setInertia(e,a))),e.circleRadius&&(t===n?e.circleRadius*=t:e.circleRadius=null)},r.update=function(e,t,n,r){var o=Math.pow(t*n*e.timeScale,2),a=1-e.frictionAir*n*e.timeScale,u=e.position.x-e.positionPrev.x,d=e.position.y-e.positionPrev.y;e.velocity.x=u*a*r+e.force.x/e.mass*o,e.velocity.y=d*a*r+e.force.y/e.mass*o,e.positionPrev.x=e.position.x,e.positionPrev.y=e.position.y,e.position.x+=e.velocity.x,e.position.y+=e.velocity.y,e.angularVelocity=(e.angle-e.anglePrev)*a*r+e.torque/e.inertia*o,e.anglePrev=e.angle,e.angle+=e.angularVelocity,e.speed=s.magnitude(e.velocity),e.angularSpeed=Math.abs(e.angularVelocity);for(var h=0;h<e.parts.length;h++){var p=e.parts[h];i.translate(p.vertices,e.velocity),h>0&&(p.position.x+=e.velocity.x,p.position.y+=e.velocity.y),0!==e.angularVelocity&&(i.rotate(p.vertices,e.angularVelocity,e.position),c.rotate(p.axes,e.angularVelocity),h>0&&s.rotateAbout(p.position,e.angularVelocity,e.position,p.position)),l.update(p.bounds,p.vertices,e.velocity)}},r.applyForce=function(e,t,n){e.force.x+=n.x,e.force.y+=n.y;var r=t.x-e.position.x,i=t.y-e.position.y;e.torque+=r*n.y-i*n.x},r._totalProperties=function(e){for(var t={mass:0,area:0,inertia:0,centre:{x:0,y:0}},n=1===e.parts.length?0:1;n<e.parts.length;n++){var r=e.parts[n],i=r.mass!==1/0?r.mass:1;t.mass+=i,t.area+=r.area,t.inertia+=r.inertia,t.centre=s.add(t.centre,s.mult(r.position,i))}return t.centre=s.div(t.centre,t.mass),t}}()},function(e,t,n){var r={};e.exports=r;var i=n(4);r._motionWakeThreshold=.18,r._motionSleepThreshold=.08,r._minBias=.9,r.update=function(e,t){for(var n=t*t*t,i=0;i<e.length;i++){var s=e[i],o=s.speed*s.speed+s.angularSpeed*s.angularSpeed;if(0===s.force.x&&0===s.force.y){var a=Math.min(s.motion,o),l=Math.max(s.motion,o);s.motion=r._minBias*a+(1-r._minBias)*l,s.sleepThreshold>0&&s.motion<r._motionSleepThreshold*n?(s.sleepCounter+=1,s.sleepCounter>=s.sleepThreshold&&r.set(s,!0)):s.sleepCounter>0&&(s.sleepCounter-=1)}else r.set(s,!1)}},r.afterCollisions=function(e,t){for(var n=t*t*t,i=0;i<e.length;i++){var s=e[i];if(s.isActive){var o=s.collision,a=o.bodyA.parent,l=o.bodyB.parent;if(!(a.isSleeping&&l.isSleeping||a.isStatic||l.isStatic)&&(a.isSleeping||l.isSleeping)){var c=a.isSleeping&&!a.isStatic?a:l,u=c===a?l:a;!c.isStatic&&u.motion>r._motionWakeThreshold*n&&r.set(c,!1)}}}},r.set=function(e,t){var n=e.isSleeping;t?(e.isSleeping=!0,e.sleepCounter=e.sleepThreshold,e.positionImpulse.x=0,e.positionImpulse.y=0,e.positionPrev.x=e.position.x,e.positionPrev.y=e.position.y,e.anglePrev=e.angle,e.speed=0,e.angularSpeed=0,e.motion=0,n||i.trigger(e,"sleepStart")):(e.isSleeping=!1,e.sleepCounter=0,n&&i.trigger(e,"sleepEnd"))}},function(e,t,n){var r={};e.exports=r;var i,s,o,a=n(3),l=n(9);i=[],s={overlap:0,axis:null},o={overlap:0,axis:null},r.create=function(e,t){return{pair:null,collided:!1,bodyA:e,bodyB:t,parentA:e.parent,parentB:t.parent,depth:0,normal:{x:0,y:0},tangent:{x:0,y:0},penetration:{x:0,y:0},supports:[]}},r.collides=function(e,t,n){if(r._overlapAxes(s,e.vertices,t.vertices,e.axes),s.overlap<=0)return null;if(r._overlapAxes(o,t.vertices,e.vertices,t.axes),o.overlap<=0)return null;var i,c,u=n&&n.table[l.id(e,t)];u?i=u.collision:((i=r.create(e,t)).collided=!0,i.bodyA=e.id<t.id?e:t,i.bodyB=e.id<t.id?t:e,i.parentA=i.bodyA.parent,i.parentB=i.bodyB.parent),e=i.bodyA,t=i.bodyB,c=s.overlap<o.overlap?s:o;var d=i.normal,h=i.supports,p=c.axis,f=p.x,m=p.y;f*(t.position.x-e.position.x)+m*(t.position.y-e.position.y)<0?(d.x=f,d.y=m):(d.x=-f,d.y=-m),i.tangent.x=-d.y,i.tangent.y=d.x,i.depth=c.overlap,i.penetration.x=d.x*i.depth,i.penetration.y=d.y*i.depth;var g=r._findSupports(e,t,d,1),v=0;if(a.contains(e.vertices,g[0])&&(h[v++]=g[0]),a.contains(e.vertices,g[1])&&(h[v++]=g[1]),v<2){var y=r._findSupports(t,e,d,-1);a.contains(t.vertices,y[0])&&(h[v++]=y[0]),v<2&&a.contains(t.vertices,y[1])&&(h[v++]=y[1])}return 0===v&&(h[v++]=g[0]),h.length=v,i},r._overlapAxes=function(e,t,n,r){var i,s,o,a,l,c,u=t.length,d=n.length,h=t[0].x,p=t[0].y,f=n[0].x,m=n[0].y,g=r.length,v=Number.MAX_VALUE,y=0;for(l=0;l<g;l++){var b=r[l],w=b.x,_=b.y,x=h*w+p*_,S=f*w+m*_,k=x,j=S;for(c=1;c<u;c+=1)(a=t[c].x*w+t[c].y*_)>k?k=a:a<x&&(x=a);for(c=1;c<d;c+=1)(a=n[c].x*w+n[c].y*_)>j?j=a:a<S&&(S=a);if((i=(s=k-S)<(o=j-x)?s:o)<v&&(v=i,y=l,i<=0))break}e.axis=r[y],e.overlap=v},r._projectToAxis=function(e,t,n){for(var r=t[0].x*n.x+t[0].y*n.y,i=r,s=1;s<t.length;s+=1){var o=t[s].x*n.x+t[s].y*n.y;o>i?i=o:o<r&&(r=o)}e.min=r,e.max=i},r._findSupports=function(e,t,n,r){var s,o,a,l,c,u=t.vertices,d=u.length,h=e.position.x,p=e.position.y,f=n.x*r,m=n.y*r,g=Number.MAX_VALUE;for(c=0;c<d;c+=1)(l=f*(h-(o=u[c]).x)+m*(p-o.y))<g&&(g=l,s=o);return g=f*(h-(a=u[(d+s.index-1)%d]).x)+m*(p-a.y),f*(h-(o=u[(s.index+1)%d]).x)+m*(p-o.y)<g?(i[0]=s,i[1]=o,i):(i[0]=s,i[1]=a,i)}},function(e,t,n){var r={};e.exports=r;var i=n(17);r.create=function(e,t){var n=e.bodyA,i=e.bodyB,s={id:r.id(n,i),bodyA:n,bodyB:i,collision:e,contacts:[],activeContacts:[],separation:0,isActive:!0,confirmedActive:!0,isSensor:n.isSensor||i.isSensor,timeCreated:t,timeUpdated:t,inverseMass:0,friction:0,frictionStatic:0,restitution:0,slop:0};return r.update(s,e,t),s},r.update=function(e,t,n){var r=e.contacts,s=t.supports,o=e.activeContacts,a=t.parentA,l=t.parentB,c=a.vertices.length;e.isActive=!0,e.timeUpdated=n,e.collision=t,e.separation=t.depth,e.inverseMass=a.inverseMass+l.inverseMass,e.friction=a.friction<l.friction?a.friction:l.friction,e.frictionStatic=a.frictionStatic>l.frictionStatic?a.frictionStatic:l.frictionStatic,e.restitution=a.restitution>l.restitution?a.restitution:l.restitution,e.slop=a.slop>l.slop?a.slop:l.slop,t.pair=e,o.length=0;for(var u=0;u<s.length;u++){var d=s[u],h=d.body===a?d.index:c+d.index,p=r[h];p?o.push(p):o.push(r[h]=i.create(d))}},r.setActive=function(e,t,n){t?(e.isActive=!0,e.timeUpdated=n):(e.isActive=!1,e.activeContacts.length=0)},r.id=function(e,t){return e.id<t.id?"A"+e.id+"B"+t.id:"A"+t.id+"B"+e.id}},function(e,t,n){var r={};e.exports=r;var i=n(3),s=n(2),o=n(7),a=n(1),l=n(11),c=n(0);r._warming=.4,r._torqueDampen=1,r._minLength=1e-6,r.create=function(e){var t=e;t.bodyA&&!t.pointA&&(t.pointA={x:0,y:0}),t.bodyB&&!t.pointB&&(t.pointB={x:0,y:0});var n=t.bodyA?s.add(t.bodyA.position,t.pointA):t.pointA,r=t.bodyB?s.add(t.bodyB.position,t.pointB):t.pointB,i=s.magnitude(s.sub(n,r));t.length=void 0!==t.length?t.length:i,t.id=t.id||c.nextId(),t.label=t.label||"Constraint",t.type="constraint",t.stiffness=t.stiffness||(t.length>0?1:.7),t.damping=t.damping||0,t.angularStiffness=t.angularStiffness||0,t.angleA=t.bodyA?t.bodyA.angle:t.angleA,t.angleB=t.bodyB?t.bodyB.angle:t.angleB,t.plugin={};var o={visible:!0,lineWidth:2,strokeStyle:"#ffffff",type:"line",anchors:!0};return 0===t.length&&t.stiffness>.1?(o.type="pin",o.anchors=!1):t.stiffness<.9&&(o.type="spring"),t.render=c.extend(o,t.render),t},r.preSolveAll=function(e){for(var t=0;t<e.length;t+=1){var n=e[t],r=n.constraintImpulse;n.isStatic||0===r.x&&0===r.y&&0===r.angle||(n.position.x+=r.x,n.position.y+=r.y,n.angle+=r.angle)}},r.solveAll=function(e,t){for(var n=0;n<e.length;n+=1){var i=e[n],s=!i.bodyA||i.bodyA&&i.bodyA.isStatic,o=!i.bodyB||i.bodyB&&i.bodyB.isStatic;(s||o)&&r.solve(e[n],t)}for(n=0;n<e.length;n+=1)s=!(i=e[n]).bodyA||i.bodyA&&i.bodyA.isStatic,o=!i.bodyB||i.bodyB&&i.bodyB.isStatic,s||o||r.solve(e[n],t)},r.solve=function(e,t){var n=e.bodyA,i=e.bodyB,o=e.pointA,a=e.pointB;if(n||i){n&&!n.isStatic&&(s.rotate(o,n.angle-e.angleA,o),e.angleA=n.angle),i&&!i.isStatic&&(s.rotate(a,i.angle-e.angleB,a),e.angleB=i.angle);var l=o,c=a;if(n&&(l=s.add(n.position,o)),i&&(c=s.add(i.position,a)),l&&c){var u=s.sub(l,c),d=s.magnitude(u);d<r._minLength&&(d=r._minLength);var h,p,f,m,g,v=(d-e.length)/d,y=e.stiffness<1?e.stiffness*t:e.stiffness,b=s.mult(u,v*y),w=(n?n.inverseMass:0)+(i?i.inverseMass:0),_=w+((n?n.inverseInertia:0)+(i?i.inverseInertia:0));if(e.damping){var x=s.create();f=s.div(u,d),g=s.sub(i&&s.sub(i.position,i.positionPrev)||x,n&&s.sub(n.position,n.positionPrev)||x),m=s.dot(f,g)}n&&!n.isStatic&&(p=n.inverseMass/w,n.constraintImpulse.x-=b.x*p,n.constraintImpulse.y-=b.y*p,n.position.x-=b.x*p,n.position.y-=b.y*p,e.damping&&(n.positionPrev.x-=e.damping*f.x*m*p,n.positionPrev.y-=e.damping*f.y*m*p),h=s.cross(o,b)/_*r._torqueDampen*n.inverseInertia*(1-e.angularStiffness),n.constraintImpulse.angle-=h,n.angle-=h),i&&!i.isStatic&&(p=i.inverseMass/w,i.constraintImpulse.x+=b.x*p,i.constraintImpulse.y+=b.y*p,i.position.x+=b.x*p,i.position.y+=b.y*p,e.damping&&(i.positionPrev.x+=e.damping*f.x*m*p,i.positionPrev.y+=e.damping*f.y*m*p),h=s.cross(a,b)/_*r._torqueDampen*i.inverseInertia*(1-e.angularStiffness),i.constraintImpulse.angle+=h,i.angle+=h)}}},r.postSolveAll=function(e){for(var t=0;t<e.length;t++){var n=e[t],c=n.constraintImpulse;if(!(n.isStatic||0===c.x&&0===c.y&&0===c.angle)){o.set(n,!1);for(var u=0;u<n.parts.length;u++){var d=n.parts[u];i.translate(d.vertices,c),u>0&&(d.position.x+=c.x,d.position.y+=c.y),0!==c.angle&&(i.rotate(d.vertices,c.angle,n.position),l.rotate(d.axes,c.angle),u>0&&s.rotateAbout(d.position,c.angle,n.position,d.position)),a.update(d.bounds,d.vertices,n.velocity)}c.angle*=r._warming,c.x*=r._warming,c.y*=r._warming}}},r.pointAWorld=function(e){return{x:(e.bodyA?e.bodyA.position.x:0)+e.pointA.x,y:(e.bodyA?e.bodyA.position.y:0)+e.pointA.y}},r.pointBWorld=function(e){return{x:(e.bodyB?e.bodyB.position.x:0)+e.pointB.x,y:(e.bodyB?e.bodyB.position.y:0)+e.pointB.y}}},function(e,t,n){var r={};e.exports=r;var i=n(2),s=n(0);r.fromVertices=function(e){for(var t={},n=0;n<e.length;n++){var r=(n+1)%e.length,o=i.normalise({x:e[r].y-e[n].y,y:e[n].x-e[r].x}),a=0===o.y?1/0:o.x/o.y;t[a=a.toFixed(3).toString()]=o}return s.values(t)},r.rotate=function(e,t){if(0!==t)for(var n=Math.cos(t),r=Math.sin(t),i=0;i<e.length;i++){var s,o=e[i];s=o.x*n-o.y*r,o.y=o.x*r+o.y*n,o.x=s}}},function(e,t,n){var r={};e.exports=r;var i=n(3),s=n(0),o=n(6),a=n(1),l=n(2);r.rectangle=function(e,t,n,r,a){a=a||{};var l={label:"Rectangle Body",position:{x:e,y:t},vertices:i.fromPath("L 0 0 L "+n+" 0 L "+n+" "+r+" L 0 "+r)};if(a.chamfer){var c=a.chamfer;l.vertices=i.chamfer(l.vertices,c.radius,c.quality,c.qualityMin,c.qualityMax),delete a.chamfer}return o.create(s.extend({},l,a))},r.trapezoid=function(e,t,n,r,a,l){l=l||{};var c,u=n*(a*=.5),d=u+(1-2*a)*n,h=d+u;c=a<.5?"L 0 0 L "+u+" "+-r+" L "+d+" "+-r+" L "+h+" 0":"L 0 0 L "+d+" "+-r+" L "+h+" 0";var p={label:"Trapezoid Body",position:{x:e,y:t},vertices:i.fromPath(c)};if(l.chamfer){var f=l.chamfer;p.vertices=i.chamfer(p.vertices,f.radius,f.quality,f.qualityMin,f.qualityMax),delete l.chamfer}return o.create(s.extend({},p,l))},r.circle=function(e,t,n,i,o){i=i||{};var a={label:"Circle Body",circleRadius:n};o=o||25;var l=Math.ceil(Math.max(10,Math.min(o,n)));return l%2==1&&(l+=1),r.polygon(e,t,l,n,s.extend({},a,i))},r.polygon=function(e,t,n,a,l){if(l=l||{},n<3)return r.circle(e,t,a,l);for(var c=2*Math.PI/n,u="",d=.5*c,h=0;h<n;h+=1){var p=d+h*c,f=Math.cos(p)*a,m=Math.sin(p)*a;u+="L "+f.toFixed(3)+" "+m.toFixed(3)+" "}var g={label:"Polygon Body",position:{x:e,y:t},vertices:i.fromPath(u)};if(l.chamfer){var v=l.chamfer;g.vertices=i.chamfer(g.vertices,v.radius,v.quality,v.qualityMin,v.qualityMax),delete l.chamfer}return o.create(s.extend({},g,l))},r.fromVertices=function(e,t,n,r,c,u,d,h){var p,f,m,g,v,y,b,w,_,x,S=s.getDecomp();for(p=Boolean(S&&S.quickDecomp),r=r||{},m=[],c=void 0!==c&&c,u=void 0!==u?u:.01,d=void 0!==d?d:10,h=void 0!==h?h:.01,s.isArray(n[0])||(n=[n]),_=0;_<n.length;_+=1)if(v=n[_],!(g=i.isConvex(v))&&!p&&s.warnOnce("Bodies.fromVertices: Install the 'poly-decomp' library and use Common.setDecomp or provide 'decomp' as a global to decompose concave vertices."),g||!p)v=g?i.clockwiseSort(v):i.hull(v),m.push({position:{x:e,y:t},vertices:v});else{var k=v.map((function(e){return[e.x,e.y]}));S.makeCCW(k),!1!==u&&S.removeCollinearPoints(k,u),!1!==h&&S.removeDuplicatePoints&&S.removeDuplicatePoints(k,h);var j=S.quickDecomp(k);for(y=0;y<j.length;y++){var C=j[y].map((function(e){return{x:e[0],y:e[1]}}));d>0&&i.area(C)<d||m.push({position:i.centre(C),vertices:C})}}for(y=0;y<m.length;y++)m[y]=o.create(s.extend(m[y],r));if(c)for(y=0;y<m.length;y++){var E=m[y];for(b=y+1;b<m.length;b++){var T=m[b];if(a.overlaps(E.bounds,T.bounds)){var A=E.vertices,O=T.vertices;for(w=0;w<E.vertices.length;w++)for(x=0;x<T.vertices.length;x++){var P=l.magnitudeSquared(l.sub(A[(w+1)%A.length],O[x])),M=l.magnitudeSquared(l.sub(A[w],O[(x+1)%O.length]));P<5&&M<5&&(A[w].isInternal=!0,O[x].isInternal=!0)}}}}return m.length>1?(f=o.create(s.extend({parts:m.slice(0)},r)),o.setPosition(f,{x:e,y:t}),f):m[0]}},function(e,t,n){var r={};e.exports=r;var i=n(0);r.create=function(e){var t={};return e||i.log("Mouse.create: element was undefined, defaulting to document.body","warn"),t.element=e||document.body,t.absolute={x:0,y:0},t.position={x:0,y:0},t.mousedownPosition={x:0,y:0},t.mouseupPosition={x:0,y:0},t.offset={x:0,y:0},t.scale={x:1,y:1},t.wheelDelta=0,t.button=-1,t.pixelRatio=parseInt(t.element.getAttribute("data-pixel-ratio"),10)||1,t.sourceEvents={mousemove:null,mousedown:null,mouseup:null,mousewheel:null},t.mousemove=function(e){var n=r._getRelativeMousePosition(e,t.element,t.pixelRatio);e.changedTouches&&(t.button=0,e.preventDefault()),t.absolute.x=n.x,t.absolute.y=n.y,t.position.x=t.absolute.x*t.scale.x+t.offset.x,t.position.y=t.absolute.y*t.scale.y+t.offset.y,t.sourceEvents.mousemove=e},t.mousedown=function(e){var n=r._getRelativeMousePosition(e,t.element,t.pixelRatio);e.changedTouches?(t.button=0,e.preventDefault()):t.button=e.button,t.absolute.x=n.x,t.absolute.y=n.y,t.position.x=t.absolute.x*t.scale.x+t.offset.x,t.position.y=t.absolute.y*t.scale.y+t.offset.y,t.mousedownPosition.x=t.position.x,t.mousedownPosition.y=t.position.y,t.sourceEvents.mousedown=e},t.mouseup=function(e){var n=r._getRelativeMousePosition(e,t.element,t.pixelRatio);e.changedTouches&&e.preventDefault(),t.button=-1,t.absolute.x=n.x,t.absolute.y=n.y,t.position.x=t.absolute.x*t.scale.x+t.offset.x,t.position.y=t.absolute.y*t.scale.y+t.offset.y,t.mouseupPosition.x=t.position.x,t.mouseupPosition.y=t.position.y,t.sourceEvents.mouseup=e},t.mousewheel=function(e){t.wheelDelta=Math.max(-1,Math.min(1,e.wheelDelta||-e.detail)),e.preventDefault()},r.setElement(t,t.element),t},r.setElement=function(e,t){e.element=t,t.addEventListener("mousemove",e.mousemove),t.addEventListener("mousedown",e.mousedown),t.addEventListener("mouseup",e.mouseup),t.addEventListener("mousewheel",e.mousewheel),t.addEventListener("DOMMouseScroll",e.mousewheel),t.addEventListener("touchmove",e.mousemove),t.addEventListener("touchstart",e.mousedown),t.addEventListener("touchend",e.mouseup)},r.clearSourceEvents=function(e){e.sourceEvents.mousemove=null,e.sourceEvents.mousedown=null,e.sourceEvents.mouseup=null,e.sourceEvents.mousewheel=null,e.wheelDelta=0},r.setOffset=function(e,t){e.offset.x=t.x,e.offset.y=t.y,e.position.x=e.absolute.x*e.scale.x+e.offset.x,e.position.y=e.absolute.y*e.scale.y+e.offset.y},r.setScale=function(e,t){e.scale.x=t.x,e.scale.y=t.y,e.position.x=e.absolute.x*e.scale.x+e.offset.x,e.position.y=e.absolute.y*e.scale.y+e.offset.y},r._getRelativeMousePosition=function(e,t,n){var r,i,s=t.getBoundingClientRect(),o=document.documentElement||document.body.parentNode||document.body,a=void 0!==window.pageXOffset?window.pageXOffset:o.scrollLeft,l=void 0!==window.pageYOffset?window.pageYOffset:o.scrollTop,c=e.changedTouches;return c?(r=c[0].pageX-s.left-a,i=c[0].pageY-s.top-l):(r=e.pageX-s.left-a,i=e.pageY-s.top-l),{x:r/(t.clientWidth/(t.width||t.clientWidth)*n),y:i/(t.clientHeight/(t.height||t.clientHeight)*n)}}},function(e,t,n){var r={};e.exports=r;var i=n(0),s=n(8);r.create=function(e){return i.extend({bodies:[],pairs:null},e)},r.setBodies=function(e,t){e.bodies=t.slice(0)},r.clear=function(e){e.bodies=[]},r.collisions=function(e){var t,n,i=[],o=e.pairs,a=e.bodies,l=a.length,c=r.canCollide,u=s.collides;for(a.sort(r._compareBoundsX),t=0;t<l;t++){var d=a[t],h=d.bounds,p=d.bounds.max.x,f=d.bounds.max.y,m=d.bounds.min.y,g=d.isStatic||d.isSleeping,v=d.parts.length,y=1===v;for(n=t+1;n<l;n++){var b=a[n];if((E=b.bounds).min.x>p)break;if(!(f<E.min.y||m>E.max.y)&&(!g||!b.isStatic&&!b.isSleeping)&&c(d.collisionFilter,b.collisionFilter)){var w=b.parts.length;if(y&&1===w)(j=u(d,b,o))&&i.push(j);else for(var _=w>1?1:0,x=v>1?1:0;x<v;x++)for(var S=d.parts[x],k=(h=S.bounds,_);k<w;k++){var j,C=b.parts[k],E=C.bounds;h.min.x>E.max.x||h.max.x<E.min.x||h.max.y<E.min.y||h.min.y>E.max.y||(j=u(S,C,o))&&i.push(j)}}}}return i},r.canCollide=function(e,t){return e.group===t.group&&0!==e.group?e.group>0:0!=(e.mask&t.category)&&0!=(t.mask&e.category)},r._compareBoundsX=function(e,t){return e.bounds.min.x-t.bounds.min.x}},function(e,t,n){var r={};e.exports=r;var i=n(0);r._registry={},r.register=function(e){if(r.isPlugin(e)||i.warn("Plugin.register:",r.toString(e),"does not implement all required fields."),e.name in r._registry){var t=r._registry[e.name],n=r.versionParse(e.version).number,s=r.versionParse(t.version).number;n>s?(i.warn("Plugin.register:",r.toString(t),"was upgraded to",r.toString(e)),r._registry[e.name]=e):n<s?i.warn("Plugin.register:",r.toString(t),"can not be downgraded to",r.toString(e)):e!==t&&i.warn("Plugin.register:",r.toString(e),"is already registered to different plugin object")}else r._registry[e.name]=e;return e},r.resolve=function(e){return r._registry[r.dependencyParse(e).name]},r.toString=function(e){return"string"==typeof e?e:(e.name||"anonymous")+"@"+(e.version||e.range||"0.0.0")},r.isPlugin=function(e){return e&&e.name&&e.version&&e.install},r.isUsed=function(e,t){return e.used.indexOf(t)>-1},r.isFor=function(e,t){var n=e.for&&r.dependencyParse(e.for);return!e.for||t.name===n.name&&r.versionSatisfies(t.version,n.range)},r.use=function(e,t){if(e.uses=(e.uses||[]).concat(t||[]),0!==e.uses.length){for(var n=r.dependencies(e),s=i.topologicalSort(n),o=[],a=0;a<s.length;a+=1)if(s[a]!==e.name){var l=r.resolve(s[a]);l?r.isUsed(e,l.name)||(r.isFor(l,e)||(i.warn("Plugin.use:",r.toString(l),"is for",l.for,"but installed on",r.toString(e)+"."),l._warned=!0),l.install?l.install(e):(i.warn("Plugin.use:",r.toString(l),"does not specify an install function."),l._warned=!0),l._warned?(o.push("🔶 "+r.toString(l)),delete l._warned):o.push("✅ "+r.toString(l)),e.used.push(l.name)):o.push("❌ "+s[a])}o.length>0&&i.info(o.join("  "))}else i.warn("Plugin.use:",r.toString(e),"does not specify any dependencies to install.")},r.dependencies=function(e,t){var n=r.dependencyParse(e),s=n.name;if(!(s in(t=t||{}))){e=r.resolve(e)||e,t[s]=i.map(e.uses||[],(function(t){r.isPlugin(t)&&r.register(t);var s=r.dependencyParse(t),o=r.resolve(t);return o&&!r.versionSatisfies(o.version,s.range)?(i.warn("Plugin.dependencies:",r.toString(o),"does not satisfy",r.toString(s),"used by",r.toString(n)+"."),o._warned=!0,e._warned=!0):o||(i.warn("Plugin.dependencies:",r.toString(t),"used by",r.toString(n),"could not be resolved."),e._warned=!0),s.name}));for(var o=0;o<t[s].length;o+=1)r.dependencies(t[s][o],t);return t}},r.dependencyParse=function(e){return i.isString(e)?(/^[\w-]+(@(\*|[\^~]?\d+\.\d+\.\d+(-[0-9A-Za-z-+]+)?))?$/.test(e)||i.warn("Plugin.dependencyParse:",e,"is not a valid dependency string."),{name:e.split("@")[0],range:e.split("@")[1]||"*"}):{name:e.name,range:e.range||e.version}},r.versionParse=function(e){var t=/^(\*)|(\^|~|>=|>)?\s*((\d+)\.(\d+)\.(\d+))(-[0-9A-Za-z-+]+)?$/;t.test(e)||i.warn("Plugin.versionParse:",e,"is not a valid version or range.");var n=t.exec(e),r=Number(n[4]),s=Number(n[5]),o=Number(n[6]);return{isRange:Boolean(n[1]||n[2]),version:n[3],range:e,operator:n[1]||n[2]||"",major:r,minor:s,patch:o,parts:[r,s,o],prerelease:n[7],number:1e8*r+1e4*s+o}},r.versionSatisfies=function(e,t){t=t||"*";var n=r.versionParse(t),i=r.versionParse(e);if(n.isRange){if("*"===n.operator||"*"===e)return!0;if(">"===n.operator)return i.number>n.number;if(">="===n.operator)return i.number>=n.number;if("~"===n.operator)return i.major===n.major&&i.minor===n.minor&&i.patch>=n.patch;if("^"===n.operator)return n.major>0?i.major===n.major&&i.number>=n.number:n.minor>0?i.minor===n.minor&&i.patch>=n.patch:i.patch===n.patch}return e===t||"*"===e}},function(e,t,n){var r={};e.exports=r;var i=n(0),s=n(5),o=n(1),a=n(4),l=n(2),c=n(13);!function(){var e,t;"undefined"!=typeof window&&(e=window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.msRequestAnimationFrame||function(e){window.setTimeout((function(){e(i.now())}),1e3/60)},t=window.cancelAnimationFrame||window.mozCancelAnimationFrame||window.webkitCancelAnimationFrame||window.msCancelAnimationFrame),r._goodFps=30,r._goodDelta=1e3/60,r.create=function(e){var t={controller:r,engine:null,element:null,canvas:null,mouse:null,frameRequestId:null,timing:{historySize:60,delta:0,deltaHistory:[],lastTime:0,lastTimestamp:0,lastElapsed:0,timestampElapsed:0,timestampElapsedHistory:[],engineDeltaHistory:[],engineElapsedHistory:[],elapsedHistory:[]},options:{width:800,height:600,pixelRatio:1,background:"#14151f",wireframeBackground:"#14151f",hasBounds:!!e.bounds,enabled:!0,wireframes:!0,showSleeping:!0,showDebug:!1,showStats:!1,showPerformance:!1,showBounds:!1,showVelocity:!1,showCollisions:!1,showSeparations:!1,showAxes:!1,showPositions:!1,showAngleIndicator:!1,showIds:!1,showVertexNumbers:!1,showConvexHulls:!1,showInternalEdges:!1,showMousePosition:!1}},n=i.extend(t,e);return n.canvas&&(n.canvas.width=n.options.width||n.canvas.width,n.canvas.height=n.options.height||n.canvas.height),n.mouse=e.mouse,n.engine=e.engine,n.canvas=n.canvas||d(n.options.width,n.options.height),n.context=n.canvas.getContext("2d"),n.textures={},n.bounds=n.bounds||{min:{x:0,y:0},max:{x:n.canvas.width,y:n.canvas.height}},n.options.showBroadphase=!1,1!==n.options.pixelRatio&&r.setPixelRatio(n,n.options.pixelRatio),i.isElement(n.element)?n.element.appendChild(n.canvas):n.canvas.parentNode||i.log("Render.create: options.element was undefined, render.canvas was created but not appended","warn"),n},r.run=function(t){!function i(s){t.frameRequestId=e(i),n(t,s),r.world(t,s),(t.options.showStats||t.options.showDebug)&&r.stats(t,t.context,s),(t.options.showPerformance||t.options.showDebug)&&r.performance(t,t.context,s)}()},r.stop=function(e){t(e.frameRequestId)},r.setPixelRatio=function(e,t){var n=e.options,r=e.canvas;"auto"===t&&(t=h(r)),n.pixelRatio=t,r.setAttribute("data-pixel-ratio",t),r.width=n.width*t,r.height=n.height*t,r.style.width=n.width+"px",r.style.height=n.height+"px"},r.lookAt=function(e,t,n,r){r=void 0===r||r,t=i.isArray(t)?t:[t],n=n||{x:0,y:0};for(var s={min:{x:1/0,y:1/0},max:{x:-1/0,y:-1/0}},o=0;o<t.length;o+=1){var a=t[o],l=a.bounds?a.bounds.min:a.min||a.position||a,u=a.bounds?a.bounds.max:a.max||a.position||a;l&&u&&(l.x<s.min.x&&(s.min.x=l.x),u.x>s.max.x&&(s.max.x=u.x),l.y<s.min.y&&(s.min.y=l.y),u.y>s.max.y&&(s.max.y=u.y))}var d=s.max.x-s.min.x+2*n.x,h=s.max.y-s.min.y+2*n.y,p=e.canvas.height,f=e.canvas.width/p,m=d/h,g=1,v=1;m>f?v=m/f:g=f/m,e.options.hasBounds=!0,e.bounds.min.x=s.min.x,e.bounds.max.x=s.min.x+d*g,e.bounds.min.y=s.min.y,e.bounds.max.y=s.min.y+h*v,r&&(e.bounds.min.x+=.5*d-d*g*.5,e.bounds.max.x+=.5*d-d*g*.5,e.bounds.min.y+=.5*h-h*v*.5,e.bounds.max.y+=.5*h-h*v*.5),e.bounds.min.x-=n.x,e.bounds.max.x-=n.x,e.bounds.min.y-=n.y,e.bounds.max.y-=n.y,e.mouse&&(c.setScale(e.mouse,{x:(e.bounds.max.x-e.bounds.min.x)/e.canvas.width,y:(e.bounds.max.y-e.bounds.min.y)/e.canvas.height}),c.setOffset(e.mouse,e.bounds.min))},r.startViewTransform=function(e){var t=e.bounds.max.x-e.bounds.min.x,n=e.bounds.max.y-e.bounds.min.y,r=t/e.options.width,i=n/e.options.height;e.context.setTransform(e.options.pixelRatio/r,0,0,e.options.pixelRatio/i,0,0),e.context.translate(-e.bounds.min.x,-e.bounds.min.y)},r.endViewTransform=function(e){e.context.setTransform(e.options.pixelRatio,0,0,e.options.pixelRatio,0,0)},r.world=function(e,t){var n,u=i.now(),d=e.engine,h=d.world,p=e.canvas,m=e.context,g=e.options,v=e.timing,y=s.allBodies(h),b=s.allConstraints(h),w=g.wireframes?g.wireframeBackground:g.background,_=[],x=[],S={timestamp:d.timing.timestamp};if(a.trigger(e,"beforeRender",S),e.currentBackground!==w&&f(e,w),m.globalCompositeOperation="source-in",m.fillStyle="transparent",m.fillRect(0,0,p.width,p.height),m.globalCompositeOperation="source-over",g.hasBounds){for(n=0;n<y.length;n++){var k=y[n];o.overlaps(k.bounds,e.bounds)&&_.push(k)}for(n=0;n<b.length;n++){var j=b[n],C=j.bodyA,E=j.bodyB,T=j.pointA,A=j.pointB;C&&(T=l.add(C.position,j.pointA)),E&&(A=l.add(E.position,j.pointB)),T&&A&&(o.contains(e.bounds,T)||o.contains(e.bounds,A))&&x.push(j)}r.startViewTransform(e),e.mouse&&(c.setScale(e.mouse,{x:(e.bounds.max.x-e.bounds.min.x)/e.options.width,y:(e.bounds.max.y-e.bounds.min.y)/e.options.height}),c.setOffset(e.mouse,e.bounds.min))}else x=b,_=y,1!==e.options.pixelRatio&&e.context.setTransform(e.options.pixelRatio,0,0,e.options.pixelRatio,0,0);!g.wireframes||d.enableSleeping&&g.showSleeping?r.bodies(e,_,m):(g.showConvexHulls&&r.bodyConvexHulls(e,_,m),r.bodyWireframes(e,_,m)),g.showBounds&&r.bodyBounds(e,_,m),(g.showAxes||g.showAngleIndicator)&&r.bodyAxes(e,_,m),g.showPositions&&r.bodyPositions(e,_,m),g.showVelocity&&r.bodyVelocity(e,_,m),g.showIds&&r.bodyIds(e,_,m),g.showSeparations&&r.separations(e,d.pairs.list,m),g.showCollisions&&r.collisions(e,d.pairs.list,m),g.showVertexNumbers&&r.vertexNumbers(e,_,m),g.showMousePosition&&r.mousePosition(e,e.mouse,m),r.constraints(x,m),g.hasBounds&&r.endViewTransform(e),a.trigger(e,"afterRender",S),v.lastElapsed=i.now()-u},r.stats=function(e,t,n){for(var r=e.engine,i=r.world,o=s.allBodies(i),a=0,l=0,c=0;c<o.length;c+=1)a+=o[c].parts.length;var u={Part:a,Body:o.length,Cons:s.allConstraints(i).length,Comp:s.allComposites(i).length,Pair:r.pairs.list.length};for(var d in t.fillStyle="#0e0f19",t.fillRect(l,0,302.5,44),t.font="12px Arial",t.textBaseline="top",t.textAlign="right",u){var h=u[d];t.fillStyle="#aaa",t.fillText(d,l+55,8),t.fillStyle="#eee",t.fillText(h,l+55,26),l+=55}},r.performance=function(e,t){var n=e.engine,i=e.timing,s=i.deltaHistory,o=i.elapsedHistory,a=i.timestampElapsedHistory,l=i.engineDeltaHistory,c=i.engineElapsedHistory,d=n.timing.lastDelta,h=u(s),p=u(o),f=u(l),m=u(c),g=u(a)/h||0,v=1e3/h||0,y=60;t.fillStyle="#0e0f19",t.fillRect(0,50,370,34),r.status(t,10,69,y,4,s.length,Math.round(v)+" fps",v/r._goodFps,(function(e){return s[e]/h-1})),r.status(t,82,69,y,4,l.length,d.toFixed(2)+" dt",r._goodDelta/d,(function(e){return l[e]/f-1})),r.status(t,154,69,y,4,c.length,m.toFixed(2)+" ut",1-m/r._goodFps,(function(e){return c[e]/m-1})),r.status(t,226,69,y,4,o.length,p.toFixed(2)+" rt",1-p/r._goodFps,(function(e){return o[e]/p-1})),r.status(t,298,69,y,4,a.length,g.toFixed(2)+" x",g*g*g,(function(e){return(a[e]/s[e]/g||0)-1}))},r.status=function(e,t,n,r,s,o,a,l,c){e.strokeStyle="#888",e.fillStyle="#444",e.lineWidth=1,e.fillRect(t,n+7,r,1),e.beginPath(),e.moveTo(t,n+7-s*i.clamp(.4*c(0),-2,2));for(var u=0;u<r;u+=1)e.lineTo(t+u,n+7-(u<o?s*i.clamp(.4*c(u),-2,2):0));e.stroke(),e.fillStyle="hsl("+i.clamp(25+95*l,0,120)+",100%,60%)",e.fillRect(t,n-7,4,4),e.font="12px Arial",e.textBaseline="middle",e.textAlign="right",e.fillStyle="#eee",e.fillText(a,t+r,n-5)},r.constraints=function(e,t){for(var n=t,r=0;r<e.length;r++){var s=e[r];if(s.render.visible&&s.pointA&&s.pointB){var o,a,c=s.bodyA,u=s.bodyB;if(o=c?l.add(c.position,s.pointA):s.pointA,"pin"===s.render.type)n.beginPath(),n.arc(o.x,o.y,3,0,2*Math.PI),n.closePath();else{if(a=u?l.add(u.position,s.pointB):s.pointB,n.beginPath(),n.moveTo(o.x,o.y),"spring"===s.render.type)for(var d,h=l.sub(a,o),p=l.perp(l.normalise(h)),f=Math.ceil(i.clamp(s.length/5,12,20)),m=1;m<f;m+=1)d=m%2==0?1:-1,n.lineTo(o.x+h.x*(m/f)+p.x*d*4,o.y+h.y*(m/f)+p.y*d*4);n.lineTo(a.x,a.y)}s.render.lineWidth&&(n.lineWidth=s.render.lineWidth,n.strokeStyle=s.render.strokeStyle,n.stroke()),s.render.anchors&&(n.fillStyle=s.render.strokeStyle,n.beginPath(),n.arc(o.x,o.y,3,0,2*Math.PI),n.arc(a.x,a.y,3,0,2*Math.PI),n.closePath(),n.fill())}}},r.bodies=function(e,t,n){var r,i,s,o,a=n,l=(e.engine,e.options),c=l.showInternalEdges||!l.wireframes;for(s=0;s<t.length;s++)if((r=t[s]).render.visible)for(o=r.parts.length>1?1:0;o<r.parts.length;o++)if((i=r.parts[o]).render.visible){if(l.showSleeping&&r.isSleeping?a.globalAlpha=.5*i.render.opacity:1!==i.render.opacity&&(a.globalAlpha=i.render.opacity),i.render.sprite&&i.render.sprite.texture&&!l.wireframes){var u=i.render.sprite,d=p(e,u.texture);a.translate(i.position.x,i.position.y),a.rotate(i.angle),a.drawImage(d,d.width*-u.xOffset*u.xScale,d.height*-u.yOffset*u.yScale,d.width*u.xScale,d.height*u.yScale),a.rotate(-i.angle),a.translate(-i.position.x,-i.position.y)}else{if(i.circleRadius)a.beginPath(),a.arc(i.position.x,i.position.y,i.circleRadius,0,2*Math.PI);else{a.beginPath(),a.moveTo(i.vertices[0].x,i.vertices[0].y);for(var h=1;h<i.vertices.length;h++)!i.vertices[h-1].isInternal||c?a.lineTo(i.vertices[h].x,i.vertices[h].y):a.moveTo(i.vertices[h].x,i.vertices[h].y),i.vertices[h].isInternal&&!c&&a.moveTo(i.vertices[(h+1)%i.vertices.length].x,i.vertices[(h+1)%i.vertices.length].y);a.lineTo(i.vertices[0].x,i.vertices[0].y),a.closePath()}l.wireframes?(a.lineWidth=1,a.strokeStyle="#bbb",a.stroke()):(a.fillStyle=i.render.fillStyle,i.render.lineWidth&&(a.lineWidth=i.render.lineWidth,a.strokeStyle=i.render.strokeStyle,a.stroke()),a.fill())}a.globalAlpha=1}},r.bodyWireframes=function(e,t,n){var r,i,s,o,a,l=n,c=e.options.showInternalEdges;for(l.beginPath(),s=0;s<t.length;s++)if((r=t[s]).render.visible)for(a=r.parts.length>1?1:0;a<r.parts.length;a++){for(i=r.parts[a],l.moveTo(i.vertices[0].x,i.vertices[0].y),o=1;o<i.vertices.length;o++)!i.vertices[o-1].isInternal||c?l.lineTo(i.vertices[o].x,i.vertices[o].y):l.moveTo(i.vertices[o].x,i.vertices[o].y),i.vertices[o].isInternal&&!c&&l.moveTo(i.vertices[(o+1)%i.vertices.length].x,i.vertices[(o+1)%i.vertices.length].y);l.lineTo(i.vertices[0].x,i.vertices[0].y)}l.lineWidth=1,l.strokeStyle="#bbb",l.stroke()},r.bodyConvexHulls=function(e,t,n){var r,i,s,o=n;for(o.beginPath(),i=0;i<t.length;i++)if((r=t[i]).render.visible&&1!==r.parts.length){for(o.moveTo(r.vertices[0].x,r.vertices[0].y),s=1;s<r.vertices.length;s++)o.lineTo(r.vertices[s].x,r.vertices[s].y);o.lineTo(r.vertices[0].x,r.vertices[0].y)}o.lineWidth=1,o.strokeStyle="rgba(255,255,255,0.2)",o.stroke()},r.vertexNumbers=function(e,t,n){var r,i,s,o=n;for(r=0;r<t.length;r++){var a=t[r].parts;for(s=a.length>1?1:0;s<a.length;s++){var l=a[s];for(i=0;i<l.vertices.length;i++)o.fillStyle="rgba(255,255,255,0.2)",o.fillText(r+"_"+i,l.position.x+.8*(l.vertices[i].x-l.position.x),l.position.y+.8*(l.vertices[i].y-l.position.y))}}},r.mousePosition=function(e,t,n){var r=n;r.fillStyle="rgba(255,255,255,0.8)",r.fillText(t.position.x+"  "+t.position.y,t.position.x+5,t.position.y-5)},r.bodyBounds=function(e,t,n){var r=n,i=(e.engine,e.options);r.beginPath();for(var s=0;s<t.length;s++)if(t[s].render.visible)for(var o=t[s].parts,a=o.length>1?1:0;a<o.length;a++){var l=o[a];r.rect(l.bounds.min.x,l.bounds.min.y,l.bounds.max.x-l.bounds.min.x,l.bounds.max.y-l.bounds.min.y)}i.wireframes?r.strokeStyle="rgba(255,255,255,0.08)":r.strokeStyle="rgba(0,0,0,0.1)",r.lineWidth=1,r.stroke()},r.bodyAxes=function(e,t,n){var r,i,s,o,a=n,l=(e.engine,e.options);for(a.beginPath(),i=0;i<t.length;i++){var c=t[i],u=c.parts;if(c.render.visible)if(l.showAxes)for(s=u.length>1?1:0;s<u.length;s++)for(r=u[s],o=0;o<r.axes.length;o++){var d=r.axes[o];a.moveTo(r.position.x,r.position.y),a.lineTo(r.position.x+20*d.x,r.position.y+20*d.y)}else for(s=u.length>1?1:0;s<u.length;s++)for(r=u[s],o=0;o<r.axes.length;o++)a.moveTo(r.position.x,r.position.y),a.lineTo((r.vertices[0].x+r.vertices[r.vertices.length-1].x)/2,(r.vertices[0].y+r.vertices[r.vertices.length-1].y)/2)}l.wireframes?(a.strokeStyle="indianred",a.lineWidth=1):(a.strokeStyle="rgba(255, 255, 255, 0.4)",a.globalCompositeOperation="overlay",a.lineWidth=2),a.stroke(),a.globalCompositeOperation="source-over"},r.bodyPositions=function(e,t,n){var r,i,s,o,a=n,l=(e.engine,e.options);for(a.beginPath(),s=0;s<t.length;s++)if((r=t[s]).render.visible)for(o=0;o<r.parts.length;o++)i=r.parts[o],a.arc(i.position.x,i.position.y,3,0,2*Math.PI,!1),a.closePath();for(l.wireframes?a.fillStyle="indianred":a.fillStyle="rgba(0,0,0,0.5)",a.fill(),a.beginPath(),s=0;s<t.length;s++)(r=t[s]).render.visible&&(a.arc(r.positionPrev.x,r.positionPrev.y,2,0,2*Math.PI,!1),a.closePath());a.fillStyle="rgba(255,165,0,0.8)",a.fill()},r.bodyVelocity=function(e,t,n){var r=n;r.beginPath();for(var i=0;i<t.length;i++){var s=t[i];s.render.visible&&(r.moveTo(s.position.x,s.position.y),r.lineTo(s.position.x+2*(s.position.x-s.positionPrev.x),s.position.y+2*(s.position.y-s.positionPrev.y)))}r.lineWidth=3,r.strokeStyle="cornflowerblue",r.stroke()},r.bodyIds=function(e,t,n){var r,i,s=n;for(r=0;r<t.length;r++)if(t[r].render.visible){var o=t[r].parts;for(i=o.length>1?1:0;i<o.length;i++){var a=o[i];s.font="12px Arial",s.fillStyle="rgba(255,255,255,0.5)",s.fillText(a.id,a.position.x+10,a.position.y-10)}}},r.collisions=function(e,t,n){var r,i,s,o,a=n,l=e.options;for(a.beginPath(),s=0;s<t.length;s++)if((r=t[s]).isActive)for(i=r.collision,o=0;o<r.activeContacts.length;o++){var c=r.activeContacts[o].vertex;a.rect(c.x-1.5,c.y-1.5,3.5,3.5)}for(l.wireframes?a.fillStyle="rgba(255,255,255,0.7)":a.fillStyle="orange",a.fill(),a.beginPath(),s=0;s<t.length;s++)if((r=t[s]).isActive&&(i=r.collision,r.activeContacts.length>0)){var u=r.activeContacts[0].vertex.x,d=r.activeContacts[0].vertex.y;2===r.activeContacts.length&&(u=(r.activeContacts[0].vertex.x+r.activeContacts[1].vertex.x)/2,d=(r.activeContacts[0].vertex.y+r.activeContacts[1].vertex.y)/2),i.bodyB===i.supports[0].body||!0===i.bodyA.isStatic?a.moveTo(u-8*i.normal.x,d-8*i.normal.y):a.moveTo(u+8*i.normal.x,d+8*i.normal.y),a.lineTo(u,d)}l.wireframes?a.strokeStyle="rgba(255,165,0,0.7)":a.strokeStyle="orange",a.lineWidth=1,a.stroke()},r.separations=function(e,t,n){var r,i,s,o,a,l=n,c=e.options;for(l.beginPath(),a=0;a<t.length;a++)if((r=t[a]).isActive){s=(i=r.collision).bodyA;var u=1;(o=i.bodyB).isStatic||s.isStatic||(u=.5),o.isStatic&&(u=0),l.moveTo(o.position.x,o.position.y),l.lineTo(o.position.x-i.penetration.x*u,o.position.y-i.penetration.y*u),u=1,o.isStatic||s.isStatic||(u=.5),s.isStatic&&(u=0),l.moveTo(s.position.x,s.position.y),l.lineTo(s.position.x+i.penetration.x*u,s.position.y+i.penetration.y*u)}c.wireframes?l.strokeStyle="rgba(255,165,0,0.5)":l.strokeStyle="orange",l.stroke()},r.inspector=function(e,t){e.engine;var n,r=e.selected,i=e.render,s=i.options;if(s.hasBounds){var o=i.bounds.max.x-i.bounds.min.x,a=i.bounds.max.y-i.bounds.min.y,l=o/i.options.width,c=a/i.options.height;t.scale(1/l,1/c),t.translate(-i.bounds.min.x,-i.bounds.min.y)}for(var u=0;u<r.length;u++){var d=r[u].data;switch(t.translate(.5,.5),t.lineWidth=1,t.strokeStyle="rgba(255,165,0,0.9)",t.setLineDash([1,2]),d.type){case"body":n=d.bounds,t.beginPath(),t.rect(Math.floor(n.min.x-3),Math.floor(n.min.y-3),Math.floor(n.max.x-n.min.x+6),Math.floor(n.max.y-n.min.y+6)),t.closePath(),t.stroke();break;case"constraint":var h=d.pointA;d.bodyA&&(h=d.pointB),t.beginPath(),t.arc(h.x,h.y,10,0,2*Math.PI),t.closePath(),t.stroke()}t.setLineDash([]),t.translate(-.5,-.5)}null!==e.selectStart&&(t.translate(.5,.5),t.lineWidth=1,t.strokeStyle="rgba(255,165,0,0.6)",t.fillStyle="rgba(255,165,0,0.1)",n=e.selectBounds,t.beginPath(),t.rect(Math.floor(n.min.x),Math.floor(n.min.y),Math.floor(n.max.x-n.min.x),Math.floor(n.max.y-n.min.y)),t.closePath(),t.stroke(),t.fill(),t.translate(-.5,-.5)),s.hasBounds&&t.setTransform(1,0,0,1,0,0)};var n=function(e,t){var n=e.engine,i=e.timing,s=i.historySize,o=n.timing.timestamp;i.delta=t-i.lastTime||r._goodDelta,i.lastTime=t,i.timestampElapsed=o-i.lastTimestamp||0,i.lastTimestamp=o,i.deltaHistory.unshift(i.delta),i.deltaHistory.length=Math.min(i.deltaHistory.length,s),i.engineDeltaHistory.unshift(n.timing.lastDelta),i.engineDeltaHistory.length=Math.min(i.engineDeltaHistory.length,s),i.timestampElapsedHistory.unshift(i.timestampElapsed),i.timestampElapsedHistory.length=Math.min(i.timestampElapsedHistory.length,s),i.engineElapsedHistory.unshift(n.timing.lastElapsed),i.engineElapsedHistory.length=Math.min(i.engineElapsedHistory.length,s),i.elapsedHistory.unshift(i.lastElapsed),i.elapsedHistory.length=Math.min(i.elapsedHistory.length,s)},u=function(e){for(var t=0,n=0;n<e.length;n+=1)t+=e[n];return t/e.length||0},d=function(e,t){var n=document.createElement("canvas");return n.width=e,n.height=t,n.oncontextmenu=function(){return!1},n.onselectstart=function(){return!1},n},h=function(e){var t=e.getContext("2d");return(window.devicePixelRatio||1)/(t.webkitBackingStorePixelRatio||t.mozBackingStorePixelRatio||t.msBackingStorePixelRatio||t.oBackingStorePixelRatio||t.backingStorePixelRatio||1)},p=function(e,t){var n=e.textures[t];return n||((n=e.textures[t]=new Image).src=t,n)},f=function(e,t){var n=t;/(jpg|gif|png)$/.test(t)&&(n="url("+t+")"),e.canvas.style.background=n,e.canvas.style.backgroundSize="contain",e.currentBackground=t}}()},function(e,t){var n={};e.exports=n,n.create=function(e){return{vertex:e,normalImpulse:0,tangentImpulse:0}}},function(e,t,n){var r={};e.exports=r;var i=n(7),s=n(19),o=n(14),a=n(20),l=n(4),c=n(5),u=n(10),d=n(0),h=n(6);r.create=function(e){e=e||{};var t=d.extend({positionIterations:6,velocityIterations:4,constraintIterations:2,enableSleeping:!1,events:[],plugin:{},gravity:{x:0,y:1,scale:.001},timing:{timestamp:0,timeScale:1,lastDelta:0,lastElapsed:0}},e);return t.world=e.world||c.create({label:"World"}),t.pairs=e.pairs||a.create(),t.detector=e.detector||o.create(),t.grid={buckets:[]},t.world.gravity=t.gravity,t.broadphase=t.grid,t.metrics={},t},r.update=function(e,t,n){var h=d.now();t=t||1e3/60,n=n||1;var p,f=e.world,m=e.detector,g=e.pairs,v=e.timing,y=v.timestamp;v.timestamp+=t*v.timeScale,v.lastDelta=t*v.timeScale;var b={timestamp:v.timestamp};l.trigger(e,"beforeUpdate",b);var w=c.allBodies(f),_=c.allConstraints(f);for(f.isModified&&o.setBodies(m,w),f.isModified&&c.setModified(f,!1,!1,!0),e.enableSleeping&&i.update(w,v.timeScale),r._bodiesApplyGravity(w,e.gravity),r._bodiesUpdate(w,t,v.timeScale,n,f.bounds),u.preSolveAll(w),p=0;p<e.constraintIterations;p++)u.solveAll(_,v.timeScale);u.postSolveAll(w),m.pairs=e.pairs;var x=o.collisions(m);for(a.update(g,x,y),e.enableSleeping&&i.afterCollisions(g.list,v.timeScale),g.collisionStart.length>0&&l.trigger(e,"collisionStart",{pairs:g.collisionStart}),s.preSolvePosition(g.list),p=0;p<e.positionIterations;p++)s.solvePosition(g.list,v.timeScale);for(s.postSolvePosition(w),u.preSolveAll(w),p=0;p<e.constraintIterations;p++)u.solveAll(_,v.timeScale);for(u.postSolveAll(w),s.preSolveVelocity(g.list),p=0;p<e.velocityIterations;p++)s.solveVelocity(g.list,v.timeScale);return g.collisionActive.length>0&&l.trigger(e,"collisionActive",{pairs:g.collisionActive}),g.collisionEnd.length>0&&l.trigger(e,"collisionEnd",{pairs:g.collisionEnd}),r._bodiesClearForces(w),l.trigger(e,"afterUpdate",b),e.timing.lastElapsed=d.now()-h,e},r.merge=function(e,t){if(d.extend(e,t),t.world){e.world=t.world,r.clear(e);for(var n=c.allBodies(e.world),s=0;s<n.length;s++){var o=n[s];i.set(o,!1),o.id=d.nextId()}}},r.clear=function(e){a.clear(e.pairs),o.clear(e.detector)},r._bodiesClearForces=function(e){for(var t=0;t<e.length;t++){var n=e[t];n.force.x=0,n.force.y=0,n.torque=0}},r._bodiesApplyGravity=function(e,t){var n=void 0!==t.scale?t.scale:.001;if((0!==t.x||0!==t.y)&&0!==n)for(var r=0;r<e.length;r++){var i=e[r];i.isStatic||i.isSleeping||(i.force.y+=i.mass*t.y*n,i.force.x+=i.mass*t.x*n)}},r._bodiesUpdate=function(e,t,n,r,i){for(var s=0;s<e.length;s++){var o=e[s];o.isStatic||o.isSleeping||h.update(o,t,n,r)}}},function(e,t,n){var r={};e.exports=r;var i=n(3),s=n(1);r._restingThresh=4,r._restingThreshTangent=6,r._positionDampen=.9,r._positionWarming=.8,r._frictionNormalMultiplier=5,r.preSolvePosition=function(e){var t,n,r,i=e.length;for(t=0;t<i;t++)(n=e[t]).isActive&&(r=n.activeContacts.length,n.collision.parentA.totalContacts+=r,n.collision.parentB.totalContacts+=r)},r.solvePosition=function(e,t){var n,i,s,o,a,l,c,u,d=r._positionDampen,h=e.length;for(n=0;n<h;n++)(i=e[n]).isActive&&!i.isSensor&&(o=(s=i.collision).parentA,a=s.parentB,l=s.normal,i.separation=l.x*(a.positionImpulse.x+s.penetration.x-o.positionImpulse.x)+l.y*(a.positionImpulse.y+s.penetration.y-o.positionImpulse.y));for(n=0;n<h;n++)(i=e[n]).isActive&&!i.isSensor&&(o=(s=i.collision).parentA,a=s.parentB,l=s.normal,u=(i.separation-i.slop)*t,(o.isStatic||a.isStatic)&&(u*=2),o.isStatic||o.isSleeping||(c=d/o.totalContacts,o.positionImpulse.x+=l.x*u*c,o.positionImpulse.y+=l.y*u*c),a.isStatic||a.isSleeping||(c=d/a.totalContacts,a.positionImpulse.x-=l.x*u*c,a.positionImpulse.y-=l.y*u*c))},r.postSolvePosition=function(e){for(var t=r._positionWarming,n=e.length,o=i.translate,a=s.update,l=0;l<n;l++){var c=e[l],u=c.positionImpulse,d=u.x,h=u.y,p=c.velocity;if(c.totalContacts=0,0!==d||0!==h){for(var f=0;f<c.parts.length;f++){var m=c.parts[f];o(m.vertices,u),a(m.bounds,m.vertices,p),m.position.x+=d,m.position.y+=h}c.positionPrev.x+=d,c.positionPrev.y+=h,d*p.x+h*p.y<0?(u.x=0,u.y=0):(u.x*=t,u.y*=t)}}},r.preSolveVelocity=function(e){var t,n,r=e.length;for(t=0;t<r;t++){var i=e[t];if(i.isActive&&!i.isSensor){var s=i.activeContacts,o=s.length,a=i.collision,l=a.parentA,c=a.parentB,u=a.normal,d=a.tangent;for(n=0;n<o;n++){var h=s[n],p=h.vertex,f=h.normalImpulse,m=h.tangentImpulse;if(0!==f||0!==m){var g=u.x*f+d.x*m,v=u.y*f+d.y*m;l.isStatic||l.isSleeping||(l.positionPrev.x+=g*l.inverseMass,l.positionPrev.y+=v*l.inverseMass,l.anglePrev+=l.inverseInertia*((p.x-l.position.x)*v-(p.y-l.position.y)*g)),c.isStatic||c.isSleeping||(c.positionPrev.x-=g*c.inverseMass,c.positionPrev.y-=v*c.inverseMass,c.anglePrev-=c.inverseInertia*((p.x-c.position.x)*v-(p.y-c.position.y)*g))}}}}},r.solveVelocity=function(e,t){var n,i,s,o,a=t*t,l=r._restingThresh*a,c=r._frictionNormalMultiplier,u=r._restingThreshTangent*a,d=Number.MAX_VALUE,h=e.length;for(s=0;s<h;s++){var p=e[s];if(p.isActive&&!p.isSensor){var f=p.collision,m=f.parentA,g=f.parentB,v=m.velocity,y=g.velocity,b=f.normal.x,w=f.normal.y,_=f.tangent.x,x=f.tangent.y,S=p.activeContacts,k=S.length,j=1/k,C=m.inverseMass+g.inverseMass,E=p.friction*p.frictionStatic*c*a;for(v.x=m.position.x-m.positionPrev.x,v.y=m.position.y-m.positionPrev.y,y.x=g.position.x-g.positionPrev.x,y.y=g.position.y-g.positionPrev.y,m.angularVelocity=m.angle-m.anglePrev,g.angularVelocity=g.angle-g.anglePrev,o=0;o<k;o++){var T=S[o],A=T.vertex,O=A.x-m.position.x,P=A.y-m.position.y,M=A.x-g.position.x,L=A.y-g.position.y,I=v.x-P*m.angularVelocity,R=v.y+O*m.angularVelocity,$=I-(y.x-L*g.angularVelocity),D=R-(y.y+M*g.angularVelocity),N=b*$+w*D,B=_*$+x*D,q=p.separation+N,F=Math.min(q,1),V=(F=q<0?0:F)*E;B>V||-B>V?(i=B>0?B:-B,(n=p.friction*(B>0?1:-1)*a)<-i?n=-i:n>i&&(n=i)):(n=B,i=d);var U=O*w-P*b,W=M*w-L*b,H=j/(C+m.inverseInertia*U*U+g.inverseInertia*W*W),z=(1+p.restitution)*N*H;if(n*=H,N*N>l&&N<0)T.normalImpulse=0;else{var X=T.normalImpulse;T.normalImpulse+=z,T.normalImpulse=Math.min(T.normalImpulse,0),z=T.normalImpulse-X}if(B*B>u)T.tangentImpulse=0;else{var G=T.tangentImpulse;T.tangentImpulse+=n,T.tangentImpulse<-i&&(T.tangentImpulse=-i),T.tangentImpulse>i&&(T.tangentImpulse=i),n=T.tangentImpulse-G}var Y=b*z+_*n,J=w*z+x*n;m.isStatic||m.isSleeping||(m.positionPrev.x+=Y*m.inverseMass,m.positionPrev.y+=J*m.inverseMass,m.anglePrev+=(O*J-P*Y)*m.inverseInertia),g.isStatic||g.isSleeping||(g.positionPrev.x-=Y*g.inverseMass,g.positionPrev.y-=J*g.inverseMass,g.anglePrev-=(M*J-L*Y)*g.inverseInertia)}}}}},function(e,t,n){var r={};e.exports=r;var i=n(9),s=n(0);r.create=function(e){return s.extend({table:{},list:[],collisionStart:[],collisionActive:[],collisionEnd:[]},e)},r.update=function(e,t,n){var r,s,o,a,l=e.list,c=l.length,u=e.table,d=t.length,h=e.collisionStart,p=e.collisionEnd,f=e.collisionActive;for(h.length=0,p.length=0,f.length=0,a=0;a<c;a++)l[a].confirmedActive=!1;for(a=0;a<d;a++)(o=(r=t[a]).pair)?(o.isActive?f.push(o):h.push(o),i.update(o,r,n),o.confirmedActive=!0):(u[(o=i.create(r,n)).id]=o,h.push(o),l.push(o));var m=[];for(c=l.length,a=0;a<c;a++)(o=l[a]).confirmedActive||(i.setActive(o,!1,n),p.push(o),o.collision.bodyA.isSleeping||o.collision.bodyB.isSleeping||m.push(a));for(a=0;a<m.length;a++)o=l[s=m[a]-a],l.splice(s,1),delete u[o.id]},r.clear=function(e){return e.table={},e.list.length=0,e.collisionStart.length=0,e.collisionActive.length=0,e.collisionEnd.length=0,e}},function(e,t,n){var r=e.exports=n(22);r.Axes=n(11),r.Bodies=n(12),r.Body=n(6),r.Bounds=n(1),r.Collision=n(8),r.Common=n(0),r.Composite=n(5),r.Composites=n(23),r.Constraint=n(10),r.Contact=n(17),r.Detector=n(14),r.Engine=n(18),r.Events=n(4),r.Grid=n(24),r.Mouse=n(13),r.MouseConstraint=n(25),r.Pair=n(9),r.Pairs=n(20),r.Plugin=n(15),r.Query=n(26),r.Render=n(16),r.Resolver=n(19),r.Runner=n(27),r.SAT=n(28),r.Sleeping=n(7),r.Svg=n(29),r.Vector=n(2),r.Vertices=n(3),r.World=n(30),r.Engine.run=r.Runner.run,r.Common.deprecated(r.Engine,"run","Engine.run ➤ use Matter.Runner.run(engine) instead")},function(e,t,n){var r={};e.exports=r;var i=n(15),s=n(0);r.name="matter-js",r.version="0.18.0",r.uses=[],r.used=[],r.use=function(){i.use(r,Array.prototype.slice.call(arguments))},r.before=function(e,t){return e=e.replace(/^Matter./,""),s.chainPathBefore(r,e,t)},r.after=function(e,t){return e=e.replace(/^Matter./,""),s.chainPathAfter(r,e,t)}},function(e,t,n){var r={};e.exports=r;var i=n(5),s=n(10),o=n(0),a=n(6),l=n(12),c=o.deprecated;r.stack=function(e,t,n,r,s,o,l){for(var c,u=i.create({label:"Stack"}),d=e,h=t,p=0,f=0;f<r;f++){for(var m=0,g=0;g<n;g++){var v=l(d,h,g,f,c,p);if(v){var y=v.bounds.max.y-v.bounds.min.y,b=v.bounds.max.x-v.bounds.min.x;y>m&&(m=y),a.translate(v,{x:.5*b,y:.5*y}),d=v.bounds.max.x+s,i.addBody(u,v),c=v,p+=1}else d+=s}h+=m+o,d=e}return u},r.chain=function(e,t,n,r,a,l){for(var c=e.bodies,u=1;u<c.length;u++){var d=c[u-1],h=c[u],p=d.bounds.max.y-d.bounds.min.y,f=d.bounds.max.x-d.bounds.min.x,m=h.bounds.max.y-h.bounds.min.y,g={bodyA:d,pointA:{x:f*t,y:p*n},bodyB:h,pointB:{x:(h.bounds.max.x-h.bounds.min.x)*r,y:m*a}},v=o.extend(g,l);i.addConstraint(e,s.create(v))}return e.label+=" Chain",e},r.mesh=function(e,t,n,r,a){var l,c,u,d,h,p=e.bodies;for(l=0;l<n;l++){for(c=1;c<t;c++)u=p[c-1+l*t],d=p[c+l*t],i.addConstraint(e,s.create(o.extend({bodyA:u,bodyB:d},a)));if(l>0)for(c=0;c<t;c++)u=p[c+(l-1)*t],d=p[c+l*t],i.addConstraint(e,s.create(o.extend({bodyA:u,bodyB:d},a))),r&&c>0&&(h=p[c-1+(l-1)*t],i.addConstraint(e,s.create(o.extend({bodyA:h,bodyB:d},a)))),r&&c<t-1&&(h=p[c+1+(l-1)*t],i.addConstraint(e,s.create(o.extend({bodyA:h,bodyB:d},a))))}return e.label+=" Mesh",e},r.pyramid=function(e,t,n,i,s,o,l){return r.stack(e,t,n,i,s,o,(function(t,r,o,c,u,d){var h=Math.min(i,Math.ceil(n/2)),p=u?u.bounds.max.x-u.bounds.min.x:0;if(!(c>h||o<(c=h-c)||o>n-1-c))return 1===d&&a.translate(u,{x:(o+(n%2==1?1:-1))*p,y:0}),l(e+(u?o*p:0)+o*s,r,o,c,u,d)}))},r.newtonsCradle=function(e,t,n,r,o){for(var a=i.create({label:"Newtons Cradle"}),c=0;c<n;c++){var u=l.circle(e+c*(1.9*r),t+o,r,{inertia:1/0,restitution:1,friction:0,frictionAir:1e-4,slop:1}),d=s.create({pointA:{x:e+c*(1.9*r),y:t},bodyB:u});i.addBody(a,u),i.addConstraint(a,d)}return a},c(r,"newtonsCradle","Composites.newtonsCradle ➤ moved to newtonsCradle example"),r.car=function(e,t,n,r,o){var c=a.nextGroup(!0),u=.5*-n+20,d=.5*n-20,h=i.create({label:"Car"}),p=l.rectangle(e,t,n,r,{collisionFilter:{group:c},chamfer:{radius:.5*r},density:2e-4}),f=l.circle(e+u,t+0,o,{collisionFilter:{group:c},friction:.8}),m=l.circle(e+d,t+0,o,{collisionFilter:{group:c},friction:.8}),g=s.create({bodyB:p,pointB:{x:u,y:0},bodyA:f,stiffness:1,length:0}),v=s.create({bodyB:p,pointB:{x:d,y:0},bodyA:m,stiffness:1,length:0});return i.addBody(h,p),i.addBody(h,f),i.addBody(h,m),i.addConstraint(h,g),i.addConstraint(h,v),h},c(r,"car","Composites.car ➤ moved to car example"),r.softBody=function(e,t,n,i,s,a,c,u,d,h){d=o.extend({inertia:1/0},d),h=o.extend({stiffness:.2,render:{type:"line",anchors:!1}},h);var p=r.stack(e,t,n,i,s,a,(function(e,t){return l.circle(e,t,u,d)}));return r.mesh(p,n,i,c,h),p.label="Soft Body",p},c(r,"softBody","Composites.softBody ➤ moved to softBody and cloth examples")},function(e,t,n){var r={};e.exports=r;var i=n(9),s=n(0),o=s.deprecated;r.create=function(e){return s.extend({buckets:{},pairs:{},pairsList:[],bucketWidth:48,bucketHeight:48},e)},r.update=function(e,t,n,i){var s,o,a,l,c,u=n.world,d=e.buckets,h=!1;for(s=0;s<t.length;s++){var p=t[s];if((!p.isSleeping||i)&&(!u.bounds||!(p.bounds.max.x<u.bounds.min.x||p.bounds.min.x>u.bounds.max.x||p.bounds.max.y<u.bounds.min.y||p.bounds.min.y>u.bounds.max.y))){var f=r._getRegion(e,p);if(!p.region||f.id!==p.region.id||i){p.region&&!i||(p.region=f);var m=r._regionUnion(f,p.region);for(o=m.startCol;o<=m.endCol;o++)for(a=m.startRow;a<=m.endRow;a++){l=d[c=r._getBucketId(o,a)];var g=o>=f.startCol&&o<=f.endCol&&a>=f.startRow&&a<=f.endRow,v=o>=p.region.startCol&&o<=p.region.endCol&&a>=p.region.startRow&&a<=p.region.endRow;!g&&v&&v&&l&&r._bucketRemoveBody(e,l,p),(p.region===f||g&&!v||i)&&(l||(l=r._createBucket(d,c)),r._bucketAddBody(e,l,p))}p.region=f,h=!0}}}h&&(e.pairsList=r._createActivePairsList(e))},o(r,"update","Grid.update ➤ replaced by Matter.Detector"),r.clear=function(e){e.buckets={},e.pairs={},e.pairsList=[]},o(r,"clear","Grid.clear ➤ replaced by Matter.Detector"),r._regionUnion=function(e,t){var n=Math.min(e.startCol,t.startCol),i=Math.max(e.endCol,t.endCol),s=Math.min(e.startRow,t.startRow),o=Math.max(e.endRow,t.endRow);return r._createRegion(n,i,s,o)},r._getRegion=function(e,t){var n=t.bounds,i=Math.floor(n.min.x/e.bucketWidth),s=Math.floor(n.max.x/e.bucketWidth),o=Math.floor(n.min.y/e.bucketHeight),a=Math.floor(n.max.y/e.bucketHeight);return r._createRegion(i,s,o,a)},r._createRegion=function(e,t,n,r){return{id:e+","+t+","+n+","+r,startCol:e,endCol:t,startRow:n,endRow:r}},r._getBucketId=function(e,t){return"C"+e+"R"+t},r._createBucket=function(e,t){return e[t]=[]},r._bucketAddBody=function(e,t,n){var r,s=e.pairs,o=i.id,a=t.length;for(r=0;r<a;r++){var l=t[r];if(!(n.id===l.id||n.isStatic&&l.isStatic)){var c=o(n,l),u=s[c];u?u[2]+=1:s[c]=[n,l,1]}}t.push(n)},r._bucketRemoveBody=function(e,t,n){var r,o=e.pairs,a=i.id;t.splice(s.indexOf(t,n),1);var l=t.length;for(r=0;r<l;r++){var c=o[a(n,t[r])];c&&(c[2]-=1)}},r._createActivePairsList=function(e){var t,n,r=e.pairs,i=s.keys(r),o=i.length,a=[];for(n=0;n<o;n++)(t=r[i[n]])[2]>0?a.push(t):delete r[i[n]];return a}},function(e,t,n){var r={};e.exports=r;var i=n(3),s=n(7),o=n(13),a=n(4),l=n(14),c=n(10),u=n(5),d=n(0),h=n(1);r.create=function(e,t){var n=(e?e.mouse:null)||(t?t.mouse:null);n||(e&&e.render&&e.render.canvas?n=o.create(e.render.canvas):t&&t.element?n=o.create(t.element):(n=o.create(),d.warn("MouseConstraint.create: options.mouse was undefined, options.element was undefined, may not function as expected")));var i={type:"mouseConstraint",mouse:n,element:null,body:null,constraint:c.create({label:"Mouse Constraint",pointA:n.position,pointB:{x:0,y:0},length:.01,stiffness:.1,angularStiffness:1,render:{strokeStyle:"#90EE90",lineWidth:3}}),collisionFilter:{category:1,mask:4294967295,group:0}},s=d.extend(i,t);return a.on(e,"beforeUpdate",(function(){var t=u.allBodies(e.world);r.update(s,t),r._triggerEvents(s)})),s},r.update=function(e,t){var n=e.mouse,r=e.constraint,o=e.body;if(0===n.button){if(r.bodyB)s.set(r.bodyB,!1),r.pointA=n.position;else for(var c=0;c<t.length;c++)if(o=t[c],h.contains(o.bounds,n.position)&&l.canCollide(o.collisionFilter,e.collisionFilter))for(var u=o.parts.length>1?1:0;u<o.parts.length;u++){var d=o.parts[u];if(i.contains(d.vertices,n.position)){r.pointA=n.position,r.bodyB=e.body=o,r.pointB={x:n.position.x-o.position.x,y:n.position.y-o.position.y},r.angleB=o.angle,s.set(o,!1),a.trigger(e,"startdrag",{mouse:n,body:o});break}}}else r.bodyB=e.body=null,r.pointB=null,o&&a.trigger(e,"enddrag",{mouse:n,body:o})},r._triggerEvents=function(e){var t=e.mouse,n=t.sourceEvents;n.mousemove&&a.trigger(e,"mousemove",{mouse:t}),n.mousedown&&a.trigger(e,"mousedown",{mouse:t}),n.mouseup&&a.trigger(e,"mouseup",{mouse:t}),o.clearSourceEvents(t)}},function(e,t,n){var r={};e.exports=r;var i=n(2),s=n(8),o=n(1),a=n(12),l=n(3);r.collides=function(e,t){for(var n=[],r=t.length,i=e.bounds,a=s.collides,l=o.overlaps,c=0;c<r;c++){var u=t[c],d=u.parts.length,h=1===d?0:1;if(l(u.bounds,i))for(var p=h;p<d;p++){var f=u.parts[p];if(l(f.bounds,i)){var m=a(f,e);if(m){n.push(m);break}}}}return n},r.ray=function(e,t,n,s){s=s||1e-100;for(var o=i.angle(t,n),l=i.magnitude(i.sub(t,n)),c=.5*(n.x+t.x),u=.5*(n.y+t.y),d=a.rectangle(c,u,l,s,{angle:o}),h=r.collides(d,e),p=0;p<h.length;p+=1){var f=h[p];f.body=f.bodyB=f.bodyA}return h},r.region=function(e,t,n){for(var r=[],i=0;i<e.length;i++){var s=e[i],a=o.overlaps(s.bounds,t);(a&&!n||!a&&n)&&r.push(s)}return r},r.point=function(e,t){for(var n=[],r=0;r<e.length;r++){var i=e[r];if(o.contains(i.bounds,t))for(var s=1===i.parts.length?0:1;s<i.parts.length;s++){var a=i.parts[s];if(o.contains(a.bounds,t)&&l.contains(a.vertices,t)){n.push(i);break}}}return n}},function(e,t,n){var r={};e.exports=r;var i,s,o,a=n(4),l=n(18),c=n(0);"undefined"!=typeof window&&(i=window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.msRequestAnimationFrame,s=window.cancelAnimationFrame||window.mozCancelAnimationFrame||window.webkitCancelAnimationFrame||window.msCancelAnimationFrame),i||(i=function(e){o=setTimeout((function(){e(c.now())}),1e3/60)},s=function(){clearTimeout(o)}),r.create=function(e){var t=c.extend({fps:60,correction:1,deltaSampleSize:60,counterTimestamp:0,frameCounter:0,deltaHistory:[],timePrev:null,timeScalePrev:1,frameRequestId:null,isFixed:!1,enabled:!0},e);return t.delta=t.delta||1e3/t.fps,t.deltaMin=t.deltaMin||1e3/t.fps,t.deltaMax=t.deltaMax||1e3/(.5*t.fps),t.fps=1e3/t.delta,t},r.run=function(e,t){return void 0!==e.positionIterations&&(t=e,e=r.create()),function n(s){e.frameRequestId=i(n),s&&e.enabled&&r.tick(e,t,s)}(),e},r.tick=function(e,t,n){var r,i=t.timing,s=1,o={timestamp:i.timestamp};a.trigger(e,"beforeTick",o),e.isFixed?r=e.delta:(r=n-e.timePrev||e.delta,e.timePrev=n,e.deltaHistory.push(r),e.deltaHistory=e.deltaHistory.slice(-e.deltaSampleSize),s=(r=(r=(r=Math.min.apply(null,e.deltaHistory))<e.deltaMin?e.deltaMin:r)>e.deltaMax?e.deltaMax:r)/e.delta,e.delta=r),0!==e.timeScalePrev&&(s*=i.timeScale/e.timeScalePrev),0===i.timeScale&&(s=0),e.timeScalePrev=i.timeScale,e.correction=s,e.frameCounter+=1,n-e.counterTimestamp>=1e3&&(e.fps=e.frameCounter*((n-e.counterTimestamp)/1e3),e.counterTimestamp=n,e.frameCounter=0),a.trigger(e,"tick",o),a.trigger(e,"beforeUpdate",o),l.update(t,r,s),a.trigger(e,"afterUpdate",o),a.trigger(e,"afterTick",o)},r.stop=function(e){s(e.frameRequestId)},r.start=function(e,t){r.run(e,t)}},function(e,t,n){var r={};e.exports=r;var i=n(8),s=n(0).deprecated;r.collides=function(e,t){return i.collides(e,t)},s(r,"collides","SAT.collides ➤ replaced by Collision.collides")},function(e,t,n){var r={};e.exports=r,n(1);var i=n(0);r.pathToVertices=function(e,t){"undefined"==typeof window||"SVGPathSeg"in window||i.warn("Svg.pathToVertices: SVGPathSeg not defined, a polyfill is required.");var n,s,o,a,l,c,u,d,h,p,f,m=[],g=0,v=0,y=0;t=t||15;var b=function(e,t,n){var r=n%2==1&&n>1;if(!h||e!=h.x||t!=h.y){h&&r?(p=h.x,f=h.y):(p=0,f=0);var i={x:p+e,y:f+t};!r&&h||(h=i),m.push(i),v=p+e,y=f+t}},w=function(e){var t=e.pathSegTypeAsLetter.toUpperCase();if("Z"!==t){switch(t){case"M":case"L":case"T":case"C":case"S":case"Q":v=e.x,y=e.y;break;case"H":v=e.x;break;case"V":y=e.y}b(v,y,e.pathSegType)}};for(r._svgPathToAbsolute(e),o=e.getTotalLength(),c=[],n=0;n<e.pathSegList.numberOfItems;n+=1)c.push(e.pathSegList.getItem(n));for(u=c.concat();g<o;){if((l=c[e.getPathSegAtLength(g)])!=d){for(;u.length&&u[0]!=l;)w(u.shift());d=l}switch(l.pathSegTypeAsLetter.toUpperCase()){case"C":case"T":case"S":case"Q":case"A":a=e.getPointAtLength(g),b(a.x,a.y,0)}g+=t}for(n=0,s=u.length;n<s;++n)w(u[n]);return m},r._svgPathToAbsolute=function(e){for(var t,n,r,i,s,o,a=e.pathSegList,l=0,c=0,u=a.numberOfItems,d=0;d<u;++d){var h=a.getItem(d),p=h.pathSegTypeAsLetter;if(/[MLHVCSQTA]/.test(p))"x"in h&&(l=h.x),"y"in h&&(c=h.y);else switch("x1"in h&&(r=l+h.x1),"x2"in h&&(s=l+h.x2),"y1"in h&&(i=c+h.y1),"y2"in h&&(o=c+h.y2),"x"in h&&(l+=h.x),"y"in h&&(c+=h.y),p){case"m":a.replaceItem(e.createSVGPathSegMovetoAbs(l,c),d);break;case"l":a.replaceItem(e.createSVGPathSegLinetoAbs(l,c),d);break;case"h":a.replaceItem(e.createSVGPathSegLinetoHorizontalAbs(l),d);break;case"v":a.replaceItem(e.createSVGPathSegLinetoVerticalAbs(c),d);break;case"c":a.replaceItem(e.createSVGPathSegCurvetoCubicAbs(l,c,r,i,s,o),d);break;case"s":a.replaceItem(e.createSVGPathSegCurvetoCubicSmoothAbs(l,c,s,o),d);break;case"q":a.replaceItem(e.createSVGPathSegCurvetoQuadraticAbs(l,c,r,i),d);break;case"t":a.replaceItem(e.createSVGPathSegCurvetoQuadraticSmoothAbs(l,c),d);break;case"a":a.replaceItem(e.createSVGPathSegArcAbs(l,c,h.r1,h.r2,h.angle,h.largeArcFlag,h.sweepFlag),d);break;case"z":case"Z":l=t,c=n}"M"!=p&&"m"!=p||(t=l,n=c)}}},function(e,t,n){var r={};e.exports=r;var i=n(5);n(0),r.create=i.create,r.add=i.add,r.remove=i.remove,r.clear=i.clear,r.addComposite=i.addComposite,r.addBody=i.addBody,r.addConstraint=i.addConstraint}])},e.exports=r()},"./node_modules/querystring/decode.js":e=>{"use strict";function t(e,t){return Object.prototype.hasOwnProperty.call(e,t)}e.exports=function(e,n,r,i){n=n||"&",r=r||"=";var s={};if("string"!=typeof e||0===e.length)return s;var o=/\+/g;e=e.split(n);var a=1e3;i&&"number"==typeof i.maxKeys&&(a=i.maxKeys);var l=e.length;a>0&&l>a&&(l=a);for(var c=0;c<l;++c){var u,d,h,p,f=e[c].replace(o,"%20"),m=f.indexOf(r);m>=0?(u=f.substr(0,m),d=f.substr(m+1)):(u=f,d=""),h=decodeURIComponent(u),p=decodeURIComponent(d),t(s,h)?Array.isArray(s[h])?s[h].push(p):s[h]=[s[h],p]:s[h]=p}return s}},"./node_modules/querystring/encode.js":e=>{"use strict";var t=function(e){switch(typeof e){case"string":return e;case"boolean":return e?"true":"false";case"number":return isFinite(e)?e:"";default:return""}};e.exports=function(e,n,r,i){return n=n||"&",r=r||"=",null===e&&(e=void 0),"object"==typeof e?Object.keys(e).map((function(i){var s=encodeURIComponent(t(i))+r;return Array.isArray(e[i])?e[i].map((function(e){return s+encodeURIComponent(t(e))})).join(n):s+encodeURIComponent(t(e[i]))})).join(n):i?encodeURIComponent(t(i))+r+encodeURIComponent(t(e)):""}},"./node_modules/querystring/index.js":(e,t,n)=>{"use strict";t.decode=t.parse=n("./node_modules/querystring/decode.js"),t.encode=t.stringify=n("./node_modules/querystring/encode.js")},"./node_modules/selector-set/selector-set.next.js":(e,t,n)=>{"use strict";function r(){if(!(this instanceof r))return new r;this.size=0,this.uid=0,this.selectors=[],this.selectorObjects={},this.indexes=Object.create(this.indexes),this.activeIndexes=[]}n.r(t),n.d(t,{default:()=>r});var i=window.document.documentElement,s=i.matches||i.webkitMatchesSelector||i.mozMatchesSelector||i.oMatchesSelector||i.msMatchesSelector;r.prototype.matchesSelector=function(e,t){return s.call(e,t)},r.prototype.querySelectorAll=function(e,t){return t.querySelectorAll(e)},r.prototype.indexes=[];var o=/^#((?:[\w\u00c0-\uFFFF\-]|\\.)+)/g;r.prototype.indexes.push({name:"ID",selector:function(e){var t;if(t=e.match(o))return t[0].slice(1)},element:function(e){if(e.id)return[e.id]}});var a=/^\.((?:[\w\u00c0-\uFFFF\-]|\\.)+)/g;r.prototype.indexes.push({name:"CLASS",selector:function(e){var t;if(t=e.match(a))return t[0].slice(1)},element:function(e){var t=e.className;if(t){if("string"==typeof t)return t.split(/\s/);if("object"==typeof t&&"baseVal"in t)return t.baseVal.split(/\s/)}}});var l,c=/^((?:[\w\u00c0-\uFFFF\-]|\\.)+)/g;r.prototype.indexes.push({name:"TAG",selector:function(e){var t;if(t=e.match(c))return t[0].toUpperCase()},element:function(e){return[e.nodeName.toUpperCase()]}}),r.prototype.indexes.default={name:"UNIVERSAL",selector:function(){return!0},element:function(){return[!0]}},l="function"==typeof window.Map?window.Map:function(){function e(){this.map={}}return e.prototype.get=function(e){return this.map[e+" "]},e.prototype.set=function(e,t){this.map[e+" "]=t},e}();var u=/((?:\((?:\([^()]+\)|[^()]+)+\)|\[(?:\[[^\[\]]*\]|['"][^'"]*['"]|[^\[\]'"]+)+\]|\\.|[^ >+~,(\[\\]+)+|[>+~])(\s*,\s*)?((?:.|\r|\n)*)/g;function d(e,t){var n,r,i,s,o,a,l=(e=e.slice(0).concat(e.default)).length,c=t,d=[];do{if(u.exec(""),(i=u.exec(c))&&(c=i[3],i[2]||!c))for(n=0;n<l;n++)if(o=(a=e[n]).selector(i[1])){for(r=d.length,s=!1;r--;)if(d[r].index===a&&d[r].key===o){s=!0;break}s||d.push({index:a,key:o});break}}while(i);return d}function h(e,t){var n,r,i;for(n=0,r=e.length;n<r;n++)if(i=e[n],t.isPrototypeOf(i))return i}function p(e,t){return e.id-t.id}r.prototype.logDefaultIndexUsed=function(){},r.prototype.add=function(e,t){var n,r,i,s,o,a,c,u,p=this.activeIndexes,f=this.selectors,m=this.selectorObjects;if("string"==typeof e){for(m[(n={id:this.uid++,selector:e,data:t}).id]=n,c=d(this.indexes,e),r=0;r<c.length;r++)s=(u=c[r]).key,(o=h(p,i=u.index))||((o=Object.create(i)).map=new l,p.push(o)),i===this.indexes.default&&this.logDefaultIndexUsed(n),(a=o.map.get(s))||(a=[],o.map.set(s,a)),a.push(n);this.size++,f.push(e)}},r.prototype.remove=function(e,t){if("string"==typeof e){var n,r,i,s,o,a,l,c,u=this.activeIndexes,h=this.selectors=[],p=this.selectorObjects,f={},m=1===arguments.length;for(n=d(this.indexes,e),i=0;i<n.length;i++)for(r=n[i],s=u.length;s--;)if(a=u[s],r.index.isPrototypeOf(a)){if(l=a.map.get(r.key))for(o=l.length;o--;)(c=l[o]).selector!==e||!m&&c.data!==t||(l.splice(o,1),f[c.id]=!0);break}for(i in f)delete p[i],this.size--;for(i in p)h.push(p[i].selector)}},r.prototype.queryAll=function(e){if(!this.selectors.length)return[];var t,n,r,i,s,o,a,l,c={},u=[],d=this.querySelectorAll(this.selectors.join(", "),e);for(t=0,r=d.length;t<r;t++)for(s=d[t],n=0,i=(o=this.matches(s)).length;n<i;n++)c[(l=o[n]).id]?a=c[l.id]:(a={id:l.id,selector:l.selector,data:l.data,elements:[]},c[l.id]=a,u.push(a)),a.elements.push(s);return u.sort(p)},r.prototype.matches=function(e){if(!e)return[];var t,n,r,i,s,o,a,l,c,u,d,h=this.activeIndexes,f={},m=[];for(t=0,i=h.length;t<i;t++)if(l=(a=h[t]).element(e))for(n=0,s=l.length;n<s;n++)if(c=a.map.get(l[n]))for(r=0,o=c.length;r<o;r++)!f[d=(u=c[r]).id]&&this.matchesSelector(e,u.selector)&&(f[d]=!0,m.push(u));return m.sort(p)}},"./node_modules/sockjs-client/dist/sockjs.js":(e,t,n)=>{e.exports=function(){function e(t,n,r){function i(o,a){if(!n[o]){if(!t[o]){if(s)return s(o,!0);var l=new Error("Cannot find module '"+o+"'");throw l.code="MODULE_NOT_FOUND",l}var c=n[o]={exports:{}};t[o][0].call(c.exports,(function(e){return i(t[o][1][e]||e)}),c,c.exports,e,t,n,r)}return n[o].exports}for(var s=void 0,o=0;o<r.length;o++)i(r[o]);return i}return e}()({1:[function(e,t,r){(function(n){(function(){"use strict";var r=e("./transport-list");t.exports=e("./main")(r),"_sockjs_onload"in n&&setTimeout(n._sockjs_onload,1)}).call(this)}).call(this,void 0!==n.g?n.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"./main":14,"./transport-list":16}],2:[function(e,t,n){"use strict";var r=e("inherits"),i=e("./event");function s(){i.call(this),this.initEvent("close",!1,!1),this.wasClean=!1,this.code=0,this.reason=""}r(s,i),t.exports=s},{"./event":4,inherits:57}],3:[function(e,t,n){"use strict";var r=e("inherits"),i=e("./eventtarget");function s(){i.call(this)}r(s,i),s.prototype.removeAllListeners=function(e){e?delete this._listeners[e]:this._listeners={}},s.prototype.once=function(e,t){var n=this,r=!1;function i(){n.removeListener(e,i),r||(r=!0,t.apply(this,arguments))}this.on(e,i)},s.prototype.emit=function(){var e=arguments[0],t=this._listeners[e];if(t){for(var n=arguments.length,r=new Array(n-1),i=1;i<n;i++)r[i-1]=arguments[i];for(var s=0;s<t.length;s++)t[s].apply(this,r)}},s.prototype.on=s.prototype.addListener=i.prototype.addEventListener,s.prototype.removeListener=i.prototype.removeEventListener,t.exports.EventEmitter=s},{"./eventtarget":5,inherits:57}],4:[function(e,t,n){"use strict";function r(e){this.type=e}r.prototype.initEvent=function(e,t,n){return this.type=e,this.bubbles=t,this.cancelable=n,this.timeStamp=+new Date,this},r.prototype.stopPropagation=function(){},r.prototype.preventDefault=function(){},r.CAPTURING_PHASE=1,r.AT_TARGET=2,r.BUBBLING_PHASE=3,t.exports=r},{}],5:[function(e,t,n){"use strict";function r(){this._listeners={}}r.prototype.addEventListener=function(e,t){e in this._listeners||(this._listeners[e]=[]);var n=this._listeners[e];-1===n.indexOf(t)&&(n=n.concat([t])),this._listeners[e]=n},r.prototype.removeEventListener=function(e,t){var n=this._listeners[e];if(n){var r=n.indexOf(t);-1===r||(n.length>1?this._listeners[e]=n.slice(0,r).concat(n.slice(r+1)):delete this._listeners[e])}},r.prototype.dispatchEvent=function(){var e=arguments[0],t=e.type,n=1===arguments.length?[e]:Array.apply(null,arguments);if(this["on"+t]&&this["on"+t].apply(this,n),t in this._listeners)for(var r=this._listeners[t],i=0;i<r.length;i++)r[i].apply(this,n)},t.exports=r},{}],6:[function(e,t,n){"use strict";var r=e("inherits"),i=e("./event");function s(e){i.call(this),this.initEvent("message",!1,!1),this.data=e}r(s,i),t.exports=s},{"./event":4,inherits:57}],7:[function(e,t,n){"use strict";var r=e("./utils/iframe");function i(e){this._transport=e,e.on("message",this._transportMessage.bind(this)),e.on("close",this._transportClose.bind(this))}i.prototype._transportClose=function(e,t){r.postMessage("c",JSON.stringify([e,t]))},i.prototype._transportMessage=function(e){r.postMessage("t",e)},i.prototype._send=function(e){this._transport.send(e)},i.prototype._close=function(){this._transport.close(),this._transport.removeAllListeners()},t.exports=i},{"./utils/iframe":47}],8:[function(e,t,n){(function(n){(function(){"use strict";var r=e("./utils/url"),i=e("./utils/event"),s=e("./facade"),o=e("./info-iframe-receiver"),a=e("./utils/iframe"),l=e("./location"),c=function(){};"production"!==n.env.NODE_ENV&&(c=e("debug")("sockjs-client:iframe-bootstrap")),t.exports=function(e,t){var n,u={};t.forEach((function(e){e.facadeTransport&&(u[e.facadeTransport.transportName]=e.facadeTransport)})),u[o.transportName]=o,e.bootstrap_iframe=function(){var t;a.currentWindowId=l.hash.slice(1);var o=function(i){if(i.source===parent&&(void 0===n&&(n=i.origin),i.origin===n)){var o;try{o=JSON.parse(i.data)}catch(e){return void c("bad json",i.data)}if(o.windowId===a.currentWindowId)switch(o.type){case"s":var d;try{d=JSON.parse(o.data)}catch(e){c("bad json",o.data);break}var h=d[0],p=d[1],f=d[2],m=d[3];if(c(h,p,f,m),h!==e.version)throw new Error('Incompatible SockJS! Main site uses: "'+h+'", the iframe: "'+e.version+'".');if(!r.isOriginEqual(f,l.href)||!r.isOriginEqual(m,l.href))throw new Error("Can't connect to different domain from within an iframe. ("+l.href+", "+f+", "+m+")");t=new s(new u[p](f,m));break;case"m":t._send(o.data);break;case"c":t&&t._close(),t=null}}};i.attachEvent("message",o),a.postMessage("s")}}}).call(this)}).call(this,{env:{}})},{"./facade":7,"./info-iframe-receiver":10,"./location":13,"./utils/event":46,"./utils/iframe":47,"./utils/url":52,debug:55}],9:[function(e,t,n){(function(n){(function(){"use strict";var r=e("events").EventEmitter,i=e("inherits"),s=e("./utils/object"),o=function(){};function a(e,t){r.call(this);var n=this,i=+new Date;this.xo=new t("GET",e),this.xo.once("finish",(function(e,t){var r,a;if(200===e){if(a=+new Date-i,t)try{r=JSON.parse(t)}catch(e){o("bad json",t)}s.isObject(r)||(r={})}n.emit("finish",r,a),n.removeAllListeners()}))}"production"!==n.env.NODE_ENV&&(o=e("debug")("sockjs-client:info-ajax")),i(a,r),a.prototype.close=function(){this.removeAllListeners(),this.xo.close()},t.exports=a}).call(this)}).call(this,{env:{}})},{"./utils/object":49,debug:55,events:3,inherits:57}],10:[function(e,t,n){"use strict";var r=e("inherits"),i=e("events").EventEmitter,s=e("./transport/sender/xhr-local"),o=e("./info-ajax");function a(e){var t=this;i.call(this),this.ir=new o(e,s),this.ir.once("finish",(function(e,n){t.ir=null,t.emit("message",JSON.stringify([e,n]))}))}r(a,i),a.transportName="iframe-info-receiver",a.prototype.close=function(){this.ir&&(this.ir.close(),this.ir=null),this.removeAllListeners()},t.exports=a},{"./info-ajax":9,"./transport/sender/xhr-local":37,events:3,inherits:57}],11:[function(e,t,r){(function(n,r){(function(){"use strict";var i=e("events").EventEmitter,s=e("inherits"),o=e("./utils/event"),a=e("./transport/iframe"),l=e("./info-iframe-receiver"),c=function(){};function u(e,t){var n=this;i.call(this);var s=function(){var r=n.ifr=new a(l.transportName,t,e);r.once("message",(function(e){if(e){var t;try{t=JSON.parse(e)}catch(t){return c("bad json",e),n.emit("finish"),void n.close()}var r=t[0],i=t[1];n.emit("finish",r,i)}n.close()})),r.once("close",(function(){n.emit("finish"),n.close()}))};r.document.body?s():o.attachEvent("load",s)}"production"!==n.env.NODE_ENV&&(c=e("debug")("sockjs-client:info-iframe")),s(u,i),u.enabled=function(){return a.enabled()},u.prototype.close=function(){this.ifr&&this.ifr.close(),this.removeAllListeners(),this.ifr=null},t.exports=u}).call(this)}).call(this,{env:{}},void 0!==n.g?n.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"./info-iframe-receiver":10,"./transport/iframe":22,"./utils/event":46,debug:55,events:3,inherits:57}],12:[function(e,t,n){(function(n){(function(){"use strict";var r=e("events").EventEmitter,i=e("inherits"),s=e("./utils/url"),o=e("./transport/sender/xdr"),a=e("./transport/sender/xhr-cors"),l=e("./transport/sender/xhr-local"),c=e("./transport/sender/xhr-fake"),u=e("./info-iframe"),d=e("./info-ajax"),h=function(){};function p(e,t){h(e);var n=this;r.call(this),setTimeout((function(){n.doXhr(e,t)}),0)}"production"!==n.env.NODE_ENV&&(h=e("debug")("sockjs-client:info-receiver")),i(p,r),p._getReceiver=function(e,t,n){return n.sameOrigin?new d(t,l):a.enabled?new d(t,a):o.enabled&&n.sameScheme?new d(t,o):u.enabled()?new u(e,t):new d(t,c)},p.prototype.doXhr=function(e,t){var n=this,r=s.addPath(e,"/info");h("doXhr",r),this.xo=p._getReceiver(e,r,t),this.timeoutRef=setTimeout((function(){h("timeout"),n._cleanup(!1),n.emit("finish")}),p.timeout),this.xo.once("finish",(function(e,t){h("finish",e,t),n._cleanup(!0),n.emit("finish",e,t)}))},p.prototype._cleanup=function(e){h("_cleanup"),clearTimeout(this.timeoutRef),this.timeoutRef=null,!e&&this.xo&&this.xo.close(),this.xo=null},p.prototype.close=function(){h("close"),this.removeAllListeners(),this._cleanup(!1)},p.timeout=8e3,t.exports=p}).call(this)}).call(this,{env:{}})},{"./info-ajax":9,"./info-iframe":11,"./transport/sender/xdr":34,"./transport/sender/xhr-cors":35,"./transport/sender/xhr-fake":36,"./transport/sender/xhr-local":37,"./utils/url":52,debug:55,events:3,inherits:57}],13:[function(e,t,r){(function(e){(function(){"use strict";t.exports=e.location||{origin:"http://localhost:80",protocol:"http:",host:"localhost",port:80,href:"http://localhost/",hash:""}}).call(this)}).call(this,void 0!==n.g?n.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],14:[function(e,t,r){(function(n,r){(function(){"use strict";e("./shims");var i,s=e("url-parse"),o=e("inherits"),a=e("./utils/random"),l=e("./utils/escape"),c=e("./utils/url"),u=e("./utils/event"),d=e("./utils/transport"),h=e("./utils/object"),p=e("./utils/browser"),f=e("./utils/log"),m=e("./event/event"),g=e("./event/eventtarget"),v=e("./location"),y=e("./event/close"),b=e("./event/trans-message"),w=e("./info-receiver"),_=function(){};function x(e,t,n){if(!(this instanceof x))return new x(e,t,n);if(arguments.length<1)throw new TypeError("Failed to construct 'SockJS: 1 argument required, but only 0 present");g.call(this),this.readyState=x.CONNECTING,this.extensions="",this.protocol="",(n=n||{}).protocols_whitelist&&f.warn("'protocols_whitelist' is DEPRECATED. Use 'transports' instead."),this._transportsWhitelist=n.transports,this._transportOptions=n.transportOptions||{},this._timeout=n.timeout||0;var r=n.sessionId||8;if("function"==typeof r)this._generateSessionId=r;else{if("number"!=typeof r)throw new TypeError("If sessionId is used in the options, it needs to be a number or a function.");this._generateSessionId=function(){return a.string(r)}}this._server=n.server||a.numberString(1e3);var i=new s(e);if(!i.host||!i.protocol)throw new SyntaxError("The URL '"+e+"' is invalid");if(i.hash)throw new SyntaxError("The URL must not contain a fragment");if("http:"!==i.protocol&&"https:"!==i.protocol)throw new SyntaxError("The URL's scheme must be either 'http:' or 'https:'. '"+i.protocol+"' is not allowed.");var o="https:"===i.protocol;if("https:"===v.protocol&&!o&&!c.isLoopbackAddr(i.hostname))throw new Error("SecurityError: An insecure SockJS connection may not be initiated from a page loaded over HTTPS");t?Array.isArray(t)||(t=[t]):t=[];var l=t.sort();l.forEach((function(e,t){if(!e)throw new SyntaxError("The protocols entry '"+e+"' is invalid.");if(t<l.length-1&&e===l[t+1])throw new SyntaxError("The protocols entry '"+e+"' is duplicated.")}));var u=c.getOrigin(v.href);this._origin=u?u.toLowerCase():null,i.set("pathname",i.pathname.replace(/\/+$/,"")),this.url=i.href,_("using url",this.url),this._urlInfo={nullOrigin:!p.hasDomain(),sameOrigin:c.isOriginEqual(this.url,v.href),sameScheme:c.isSchemeEqual(this.url,v.href)},this._ir=new w(this.url,this._urlInfo),this._ir.once("finish",this._receiveInfo.bind(this))}function S(e){return 1e3===e||e>=3e3&&e<=4999}"production"!==n.env.NODE_ENV&&(_=e("debug")("sockjs-client:main")),o(x,g),x.prototype.close=function(e,t){if(e&&!S(e))throw new Error("InvalidAccessError: Invalid code");if(t&&t.length>123)throw new SyntaxError("reason argument has an invalid length");if(this.readyState!==x.CLOSING&&this.readyState!==x.CLOSED){var n=!0;this._close(e||1e3,t||"Normal closure",n)}},x.prototype.send=function(e){if("string"!=typeof e&&(e=""+e),this.readyState===x.CONNECTING)throw new Error("InvalidStateError: The connection has not been established yet");this.readyState===x.OPEN&&this._transport.send(l.quote(e))},x.version=e("./version"),x.CONNECTING=0,x.OPEN=1,x.CLOSING=2,x.CLOSED=3,x.prototype._receiveInfo=function(e,t){if(_("_receiveInfo",t),this._ir=null,e){this._rto=this.countRTO(t),this._transUrl=e.base_url?e.base_url:this.url,e=h.extend(e,this._urlInfo),_("info",e);var n=i.filterToEnabled(this._transportsWhitelist,e);this._transports=n.main,_(this._transports.length+" enabled transports"),this._connect()}else this._close(1002,"Cannot connect to server")},x.prototype._connect=function(){for(var e=this._transports.shift();e;e=this._transports.shift()){if(_("attempt",e.transportName),e.needBody&&(!r.document.body||void 0!==r.document.readyState&&"complete"!==r.document.readyState&&"interactive"!==r.document.readyState))return _("waiting for body"),this._transports.unshift(e),void u.attachEvent("load",this._connect.bind(this));var t=Math.max(this._timeout,this._rto*e.roundTrips||5e3);this._transportTimeoutId=setTimeout(this._transportTimeout.bind(this),t),_("using timeout",t);var n=c.addPath(this._transUrl,"/"+this._server+"/"+this._generateSessionId()),i=this._transportOptions[e.transportName];_("transport url",n);var s=new e(n,this._transUrl,i);return s.on("message",this._transportMessage.bind(this)),s.once("close",this._transportClose.bind(this)),s.transportName=e.transportName,void(this._transport=s)}this._close(2e3,"All transports failed",!1)},x.prototype._transportTimeout=function(){_("_transportTimeout"),this.readyState===x.CONNECTING&&(this._transport&&this._transport.close(),this._transportClose(2007,"Transport timed out"))},x.prototype._transportMessage=function(e){_("_transportMessage",e);var t,n=this,r=e.slice(0,1),i=e.slice(1);switch(r){case"o":return void this._open();case"h":return this.dispatchEvent(new m("heartbeat")),void _("heartbeat",this.transport)}if(i)try{t=JSON.parse(i)}catch(e){_("bad json",i)}if(void 0!==t)switch(r){case"a":Array.isArray(t)&&t.forEach((function(e){_("message",n.transport,e),n.dispatchEvent(new b(e))}));break;case"m":_("message",this.transport,t),this.dispatchEvent(new b(t));break;case"c":Array.isArray(t)&&2===t.length&&this._close(t[0],t[1],!0)}else _("empty payload",i)},x.prototype._transportClose=function(e,t){_("_transportClose",this.transport,e,t),this._transport&&(this._transport.removeAllListeners(),this._transport=null,this.transport=null),S(e)||2e3===e||this.readyState!==x.CONNECTING?this._close(e,t):this._connect()},x.prototype._open=function(){_("_open",this._transport&&this._transport.transportName,this.readyState),this.readyState===x.CONNECTING?(this._transportTimeoutId&&(clearTimeout(this._transportTimeoutId),this._transportTimeoutId=null),this.readyState=x.OPEN,this.transport=this._transport.transportName,this.dispatchEvent(new m("open")),_("connected",this.transport)):this._close(1006,"Server lost session")},x.prototype._close=function(e,t,n){_("_close",this.transport,e,t,n,this.readyState);var r=!1;if(this._ir&&(r=!0,this._ir.close(),this._ir=null),this._transport&&(this._transport.close(),this._transport=null,this.transport=null),this.readyState===x.CLOSED)throw new Error("InvalidStateError: SockJS has already been closed");this.readyState=x.CLOSING,setTimeout(function(){this.readyState=x.CLOSED,r&&this.dispatchEvent(new m("error"));var i=new y("close");i.wasClean=n||!1,i.code=e||1e3,i.reason=t,this.dispatchEvent(i),this.onmessage=this.onclose=this.onerror=null,_("disconnected")}.bind(this),0)},x.prototype.countRTO=function(e){return e>100?4*e:300+e},t.exports=function(t){return i=d(t),e("./iframe-bootstrap")(x,t),x}}).call(this)}).call(this,{env:{}},void 0!==n.g?n.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"./event/close":2,"./event/event":4,"./event/eventtarget":5,"./event/trans-message":6,"./iframe-bootstrap":8,"./info-receiver":12,"./location":13,"./shims":15,"./utils/browser":44,"./utils/escape":45,"./utils/event":46,"./utils/log":48,"./utils/object":49,"./utils/random":50,"./utils/transport":51,"./utils/url":52,"./version":53,debug:55,inherits:57,"url-parse":60}],15:[function(e,t,n){"use strict";var r,i=Array.prototype,s=Object.prototype,o=Function.prototype,a=String.prototype,l=i.slice,c=s.toString,u=function(e){return"[object Function]"===s.toString.call(e)},d=function(e){return"[object Array]"===c.call(e)},h=function(e){return"[object String]"===c.call(e)},p=Object.defineProperty&&function(){try{return Object.defineProperty({},"x",{}),!0}catch(e){return!1}}();r=p?function(e,t,n,r){!r&&t in e||Object.defineProperty(e,t,{configurable:!0,enumerable:!1,writable:!0,value:n})}:function(e,t,n,r){!r&&t in e||(e[t]=n)};var f=function(e,t,n){for(var i in t)s.hasOwnProperty.call(t,i)&&r(e,i,t[i],n)},m=function(e){if(null==e)throw new TypeError("can't convert "+e+" to object");return Object(e)};function g(e){var t=+e;return t!=t?t=0:0!==t&&t!==1/0&&t!==-1/0&&(t=(t>0||-1)*Math.floor(Math.abs(t))),t}function v(e){return e>>>0}function y(){}f(o,{bind:function(e){var t=this;if(!u(t))throw new TypeError("Function.prototype.bind called on incompatible "+t);for(var n=l.call(arguments,1),r=function(){if(this instanceof a){var r=t.apply(this,n.concat(l.call(arguments)));return Object(r)===r?r:this}return t.apply(e,n.concat(l.call(arguments)))},i=Math.max(0,t.length-n.length),s=[],o=0;o<i;o++)s.push("$"+o);var a=Function("binder","return function ("+s.join(",")+"){ return binder.apply(this, arguments); }")(r);return t.prototype&&(y.prototype=t.prototype,a.prototype=new y,y.prototype=null),a}}),f(Array,{isArray:d});var b,w,_,x=Object("a"),S="a"!==x[0]||!(0 in x);f(i,{forEach:function(e){var t=m(this),n=S&&h(this)?this.split(""):t,r=arguments[1],i=-1,s=n.length>>>0;if(!u(e))throw new TypeError;for(;++i<s;)i in n&&e.call(r,n[i],i,t)}},(b=i.forEach,w=!0,_=!0,b&&(b.call("foo",(function(e,t,n){"object"!=typeof n&&(w=!1)})),b.call([1],(function(){_="string"==typeof this}),"x")),!(b&&w&&_)));var k=Array.prototype.indexOf&&-1!==[0,1].indexOf(1,2);f(i,{indexOf:function(e){var t=S&&h(this)?this.split(""):m(this),n=t.length>>>0;if(!n)return-1;var r=0;for(arguments.length>1&&(r=g(arguments[1])),r=r>=0?r:Math.max(0,n+r);r<n;r++)if(r in t&&t[r]===e)return r;return-1}},k);var j,C=a.split;2!=="ab".split(/(?:ab)*/).length||4!==".".split(/(.?)(.?)/).length||"t"==="tesst".split(/(s)*/)[1]||4!=="test".split(/(?:)/,-1).length||"".split(/.?/).length||".".split(/()()/).length>1?(j=void 0===/()??/.exec("")[1],a.split=function(e,t){var n=this;if(void 0===e&&0===t)return[];if("[object RegExp]"!==c.call(e))return C.call(this,e,t);var r,s,o,a,l=[],u=(e.ignoreCase?"i":"")+(e.multiline?"m":"")+(e.extended?"x":"")+(e.sticky?"y":""),d=0;for(e=new RegExp(e.source,u+"g"),n+="",j||(r=new RegExp("^"+e.source+"$(?!\\s)",u)),t=void 0===t?-1>>>0:v(t);(s=e.exec(n))&&!((o=s.index+s[0].length)>d&&(l.push(n.slice(d,s.index)),!j&&s.length>1&&s[0].replace(r,(function(){for(var e=1;e<arguments.length-2;e++)void 0===arguments[e]&&(s[e]=void 0)})),s.length>1&&s.index<n.length&&i.push.apply(l,s.slice(1)),a=s[0].length,d=o,l.length>=t));)e.lastIndex===s.index&&e.lastIndex++;return d===n.length?!a&&e.test("")||l.push(""):l.push(n.slice(d)),l.length>t?l.slice(0,t):l}):"0".split(void 0,0).length&&(a.split=function(e,t){return void 0===e&&0===t?[]:C.call(this,e,t)});var E=a.substr,T="".substr&&"b"!=="0b".substr(-1);f(a,{substr:function(e,t){return E.call(this,e<0&&(e=this.length+e)<0?0:e,t)}},T)},{}],16:[function(e,t,n){"use strict";t.exports=[e("./transport/websocket"),e("./transport/xhr-streaming"),e("./transport/xdr-streaming"),e("./transport/eventsource"),e("./transport/lib/iframe-wrap")(e("./transport/eventsource")),e("./transport/htmlfile"),e("./transport/lib/iframe-wrap")(e("./transport/htmlfile")),e("./transport/xhr-polling"),e("./transport/xdr-polling"),e("./transport/lib/iframe-wrap")(e("./transport/xhr-polling")),e("./transport/jsonp-polling")]},{"./transport/eventsource":20,"./transport/htmlfile":21,"./transport/jsonp-polling":23,"./transport/lib/iframe-wrap":26,"./transport/websocket":38,"./transport/xdr-polling":39,"./transport/xdr-streaming":40,"./transport/xhr-polling":41,"./transport/xhr-streaming":42}],17:[function(e,t,r){(function(n,r){(function(){"use strict";var i=e("events").EventEmitter,s=e("inherits"),o=e("../../utils/event"),a=e("../../utils/url"),l=r.XMLHttpRequest,c=function(){};function u(e,t,n,r){c(e,t);var s=this;i.call(this),setTimeout((function(){s._start(e,t,n,r)}),0)}"production"!==n.env.NODE_ENV&&(c=e("debug")("sockjs-client:browser:xhr")),s(u,i),u.prototype._start=function(e,t,n,r){var i=this;try{this.xhr=new l}catch(e){}if(!this.xhr)return c("no xhr"),this.emit("finish",0,"no xhr support"),void this._cleanup();t=a.addQuery(t,"t="+ +new Date),this.unloadRef=o.unloadAdd((function(){c("unload cleanup"),i._cleanup(!0)}));try{this.xhr.open(e,t,!0),this.timeout&&"timeout"in this.xhr&&(this.xhr.timeout=this.timeout,this.xhr.ontimeout=function(){c("xhr timeout"),i.emit("finish",0,""),i._cleanup(!1)})}catch(e){return c("exception",e),this.emit("finish",0,""),void this._cleanup(!1)}if(r&&r.noCredentials||!u.supportsCORS||(c("withCredentials"),this.xhr.withCredentials=!0),r&&r.headers)for(var s in r.headers)this.xhr.setRequestHeader(s,r.headers[s]);this.xhr.onreadystatechange=function(){if(i.xhr){var e,t,n=i.xhr;switch(c("readyState",n.readyState),n.readyState){case 3:try{t=n.status,e=n.responseText}catch(e){}c("status",t),1223===t&&(t=204),200===t&&e&&e.length>0&&(c("chunk"),i.emit("chunk",t,e));break;case 4:t=n.status,c("status",t),1223===t&&(t=204),12005!==t&&12029!==t||(t=0),c("finish",t,n.responseText),i.emit("finish",t,n.responseText),i._cleanup(!1)}}};try{i.xhr.send(n)}catch(e){i.emit("finish",0,""),i._cleanup(!1)}},u.prototype._cleanup=function(e){if(c("cleanup"),this.xhr){if(this.removeAllListeners(),o.unloadDel(this.unloadRef),this.xhr.onreadystatechange=function(){},this.xhr.ontimeout&&(this.xhr.ontimeout=null),e)try{this.xhr.abort()}catch(e){}this.unloadRef=this.xhr=null}},u.prototype.close=function(){c("close"),this._cleanup(!0)},u.enabled=!!l;var d=["Active"].concat("Object").join("X");!u.enabled&&d in r&&(c("overriding xmlhttprequest"),l=function(){try{return new r[d]("Microsoft.XMLHTTP")}catch(e){return null}},u.enabled=!!new l);var h=!1;try{h="withCredentials"in new l}catch(e){}u.supportsCORS=h,t.exports=u}).call(this)}).call(this,{env:{}},void 0!==n.g?n.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"../../utils/event":46,"../../utils/url":52,debug:55,events:3,inherits:57}],18:[function(e,t,r){(function(e){(function(){t.exports=e.EventSource}).call(this)}).call(this,void 0!==n.g?n.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],19:[function(e,t,r){(function(e){(function(){"use strict";var n=e.WebSocket||e.MozWebSocket;t.exports=n?function(e){return new n(e)}:void 0}).call(this)}).call(this,void 0!==n.g?n.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],20:[function(e,t,n){"use strict";var r=e("inherits"),i=e("./lib/ajax-based"),s=e("./receiver/eventsource"),o=e("./sender/xhr-cors"),a=e("eventsource");function l(e){if(!l.enabled())throw new Error("Transport created when disabled");i.call(this,e,"/eventsource",s,o)}r(l,i),l.enabled=function(){return!!a},l.transportName="eventsource",l.roundTrips=2,t.exports=l},{"./lib/ajax-based":24,"./receiver/eventsource":29,"./sender/xhr-cors":35,eventsource:18,inherits:57}],21:[function(e,t,n){"use strict";var r=e("inherits"),i=e("./receiver/htmlfile"),s=e("./sender/xhr-local"),o=e("./lib/ajax-based");function a(e){if(!i.enabled)throw new Error("Transport created when disabled");o.call(this,e,"/htmlfile",i,s)}r(a,o),a.enabled=function(e){return i.enabled&&e.sameOrigin},a.transportName="htmlfile",a.roundTrips=2,t.exports=a},{"./lib/ajax-based":24,"./receiver/htmlfile":30,"./sender/xhr-local":37,inherits:57}],22:[function(e,t,n){(function(n){(function(){"use strict";var r=e("inherits"),i=e("events").EventEmitter,s=e("../version"),o=e("../utils/url"),a=e("../utils/iframe"),l=e("../utils/event"),c=e("../utils/random"),u=function(){};function d(e,t,n){if(!d.enabled())throw new Error("Transport created when disabled");i.call(this);var r=this;this.origin=o.getOrigin(n),this.baseUrl=n,this.transUrl=t,this.transport=e,this.windowId=c.string(8);var s=o.addPath(n,"/iframe.html")+"#"+this.windowId;u(e,t,s),this.iframeObj=a.createIframe(s,(function(e){u("err callback"),r.emit("close",1006,"Unable to load an iframe ("+e+")"),r.close()})),this.onmessageCallback=this._message.bind(this),l.attachEvent("message",this.onmessageCallback)}"production"!==n.env.NODE_ENV&&(u=e("debug")("sockjs-client:transport:iframe")),r(d,i),d.prototype.close=function(){if(u("close"),this.removeAllListeners(),this.iframeObj){l.detachEvent("message",this.onmessageCallback);try{this.postMessage("c")}catch(e){}this.iframeObj.cleanup(),this.iframeObj=null,this.onmessageCallback=this.iframeObj=null}},d.prototype._message=function(e){if(u("message",e.data),o.isOriginEqual(e.origin,this.origin)){var t;try{t=JSON.parse(e.data)}catch(t){return void u("bad json",e.data)}if(t.windowId===this.windowId)switch(t.type){case"s":this.iframeObj.loaded(),this.postMessage("s",JSON.stringify([s,this.transport,this.transUrl,this.baseUrl]));break;case"t":this.emit("message",t.data);break;case"c":var n;try{n=JSON.parse(t.data)}catch(e){return void u("bad json",t.data)}this.emit("close",n[0],n[1]),this.close()}else u("mismatched window id",t.windowId,this.windowId)}else u("not same origin",e.origin,this.origin)},d.prototype.postMessage=function(e,t){u("postMessage",e,t),this.iframeObj.post(JSON.stringify({windowId:this.windowId,type:e,data:t||""}),this.origin)},d.prototype.send=function(e){u("send",e),this.postMessage("m",e)},d.enabled=function(){return a.iframeEnabled},d.transportName="iframe",d.roundTrips=2,t.exports=d}).call(this)}).call(this,{env:{}})},{"../utils/event":46,"../utils/iframe":47,"../utils/random":50,"../utils/url":52,"../version":53,debug:55,events:3,inherits:57}],23:[function(e,t,r){(function(n){(function(){"use strict";var r=e("inherits"),i=e("./lib/sender-receiver"),s=e("./receiver/jsonp"),o=e("./sender/jsonp");function a(e){if(!a.enabled())throw new Error("Transport created when disabled");i.call(this,e,"/jsonp",o,s)}r(a,i),a.enabled=function(){return!!n.document},a.transportName="jsonp-polling",a.roundTrips=1,a.needBody=!0,t.exports=a}).call(this)}).call(this,void 0!==n.g?n.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"./lib/sender-receiver":28,"./receiver/jsonp":31,"./sender/jsonp":33,inherits:57}],24:[function(e,t,n){(function(n){(function(){"use strict";var r=e("inherits"),i=e("../../utils/url"),s=e("./sender-receiver"),o=function(){};function a(e){return function(t,n,r){o("create ajax sender",t,n);var s={};"string"==typeof n&&(s.headers={"Content-type":"text/plain"});var a=i.addPath(t,"/xhr_send"),l=new e("POST",a,n,s);return l.once("finish",(function(e){if(o("finish",e),l=null,200!==e&&204!==e)return r(new Error("http status "+e));r()})),function(){o("abort"),l.close(),l=null;var e=new Error("Aborted");e.code=1e3,r(e)}}}function l(e,t,n,r){s.call(this,e,t,a(r),n,r)}"production"!==n.env.NODE_ENV&&(o=e("debug")("sockjs-client:ajax-based")),r(l,s),t.exports=l}).call(this)}).call(this,{env:{}})},{"../../utils/url":52,"./sender-receiver":28,debug:55,inherits:57}],25:[function(e,t,n){(function(n){(function(){"use strict";var r=e("inherits"),i=e("events").EventEmitter,s=function(){};function o(e,t){s(e),i.call(this),this.sendBuffer=[],this.sender=t,this.url=e}"production"!==n.env.NODE_ENV&&(s=e("debug")("sockjs-client:buffered-sender")),r(o,i),o.prototype.send=function(e){s("send",e),this.sendBuffer.push(e),this.sendStop||this.sendSchedule()},o.prototype.sendScheduleWait=function(){s("sendScheduleWait");var e,t=this;this.sendStop=function(){s("sendStop"),t.sendStop=null,clearTimeout(e)},e=setTimeout((function(){s("timeout"),t.sendStop=null,t.sendSchedule()}),25)},o.prototype.sendSchedule=function(){s("sendSchedule",this.sendBuffer.length);var e=this;if(this.sendBuffer.length>0){var t="["+this.sendBuffer.join(",")+"]";this.sendStop=this.sender(this.url,t,(function(t){e.sendStop=null,t?(s("error",t),e.emit("close",t.code||1006,"Sending error: "+t),e.close()):e.sendScheduleWait()})),this.sendBuffer=[]}},o.prototype._cleanup=function(){s("_cleanup"),this.removeAllListeners()},o.prototype.close=function(){s("close"),this._cleanup(),this.sendStop&&(this.sendStop(),this.sendStop=null)},t.exports=o}).call(this)}).call(this,{env:{}})},{debug:55,events:3,inherits:57}],26:[function(e,t,r){(function(n){(function(){"use strict";var r=e("inherits"),i=e("../iframe"),s=e("../../utils/object");t.exports=function(e){function t(t,n){i.call(this,e.transportName,t,n)}return r(t,i),t.enabled=function(t,r){if(!n.document)return!1;var o=s.extend({},r);return o.sameOrigin=!0,e.enabled(o)&&i.enabled()},t.transportName="iframe-"+e.transportName,t.needBody=!0,t.roundTrips=i.roundTrips+e.roundTrips-1,t.facadeTransport=e,t}}).call(this)}).call(this,void 0!==n.g?n.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"../../utils/object":49,"../iframe":22,inherits:57}],27:[function(e,t,n){(function(n){(function(){"use strict";var r=e("inherits"),i=e("events").EventEmitter,s=function(){};function o(e,t,n){s(t),i.call(this),this.Receiver=e,this.receiveUrl=t,this.AjaxObject=n,this._scheduleReceiver()}"production"!==n.env.NODE_ENV&&(s=e("debug")("sockjs-client:polling")),r(o,i),o.prototype._scheduleReceiver=function(){s("_scheduleReceiver");var e=this,t=this.poll=new this.Receiver(this.receiveUrl,this.AjaxObject);t.on("message",(function(t){s("message",t),e.emit("message",t)})),t.once("close",(function(n,r){s("close",n,r,e.pollIsClosing),e.poll=t=null,e.pollIsClosing||("network"===r?e._scheduleReceiver():(e.emit("close",n||1006,r),e.removeAllListeners()))}))},o.prototype.abort=function(){s("abort"),this.removeAllListeners(),this.pollIsClosing=!0,this.poll&&this.poll.abort()},t.exports=o}).call(this)}).call(this,{env:{}})},{debug:55,events:3,inherits:57}],28:[function(e,t,n){(function(n){(function(){"use strict";var r=e("inherits"),i=e("../../utils/url"),s=e("./buffered-sender"),o=e("./polling"),a=function(){};function l(e,t,n,r,l){var c=i.addPath(e,t);a(c);var u=this;s.call(this,e,n),this.poll=new o(r,c,l),this.poll.on("message",(function(e){a("poll message",e),u.emit("message",e)})),this.poll.once("close",(function(e,t){a("poll close",e,t),u.poll=null,u.emit("close",e,t),u.close()}))}"production"!==n.env.NODE_ENV&&(a=e("debug")("sockjs-client:sender-receiver")),r(l,s),l.prototype.close=function(){s.prototype.close.call(this),a("close"),this.removeAllListeners(),this.poll&&(this.poll.abort(),this.poll=null)},t.exports=l}).call(this)}).call(this,{env:{}})},{"../../utils/url":52,"./buffered-sender":25,"./polling":27,debug:55,inherits:57}],29:[function(e,t,n){(function(n){(function(){"use strict";var r=e("inherits"),i=e("events").EventEmitter,s=e("eventsource"),o=function(){};function a(e){o(e),i.call(this);var t=this,n=this.es=new s(e);n.onmessage=function(e){o("message",e.data),t.emit("message",decodeURI(e.data))},n.onerror=function(e){o("error",n.readyState,e);var r=2!==n.readyState?"network":"permanent";t._cleanup(),t._close(r)}}"production"!==n.env.NODE_ENV&&(o=e("debug")("sockjs-client:receiver:eventsource")),r(a,i),a.prototype.abort=function(){o("abort"),this._cleanup(),this._close("user")},a.prototype._cleanup=function(){o("cleanup");var e=this.es;e&&(e.onmessage=e.onerror=null,e.close(),this.es=null)},a.prototype._close=function(e){o("close",e);var t=this;setTimeout((function(){t.emit("close",null,e),t.removeAllListeners()}),200)},t.exports=a}).call(this)}).call(this,{env:{}})},{debug:55,events:3,eventsource:18,inherits:57}],30:[function(e,t,r){(function(n,r){(function(){"use strict";var i=e("inherits"),s=e("../../utils/iframe"),o=e("../../utils/url"),a=e("events").EventEmitter,l=e("../../utils/random"),c=function(){};function u(e){c(e),a.call(this);var t=this;s.polluteGlobalNamespace(),this.id="a"+l.string(6),e=o.addQuery(e,"c="+decodeURIComponent(s.WPrefix+"."+this.id)),c("using htmlfile",u.htmlfileEnabled);var n=u.htmlfileEnabled?s.createHtmlfile:s.createIframe;r[s.WPrefix][this.id]={start:function(){c("start"),t.iframeObj.loaded()},message:function(e){c("message",e),t.emit("message",e)},stop:function(){c("stop"),t._cleanup(),t._close("network")}},this.iframeObj=n(e,(function(){c("callback"),t._cleanup(),t._close("permanent")}))}"production"!==n.env.NODE_ENV&&(c=e("debug")("sockjs-client:receiver:htmlfile")),i(u,a),u.prototype.abort=function(){c("abort"),this._cleanup(),this._close("user")},u.prototype._cleanup=function(){c("_cleanup"),this.iframeObj&&(this.iframeObj.cleanup(),this.iframeObj=null),delete r[s.WPrefix][this.id]},u.prototype._close=function(e){c("_close",e),this.emit("close",null,e),this.removeAllListeners()},u.htmlfileEnabled=!1;var d=["Active"].concat("Object").join("X");if(d in r)try{u.htmlfileEnabled=!!new r[d]("htmlfile")}catch(e){}u.enabled=u.htmlfileEnabled||s.iframeEnabled,t.exports=u}).call(this)}).call(this,{env:{}},void 0!==n.g?n.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"../../utils/iframe":47,"../../utils/random":50,"../../utils/url":52,debug:55,events:3,inherits:57}],31:[function(e,t,r){(function(n,r){(function(){"use strict";var i=e("../../utils/iframe"),s=e("../../utils/random"),o=e("../../utils/browser"),a=e("../../utils/url"),l=e("inherits"),c=e("events").EventEmitter,u=function(){};function d(e){u(e);var t=this;c.call(this),i.polluteGlobalNamespace(),this.id="a"+s.string(6);var n=a.addQuery(e,"c="+encodeURIComponent(i.WPrefix+"."+this.id));r[i.WPrefix][this.id]=this._callback.bind(this),this._createScript(n),this.timeoutId=setTimeout((function(){u("timeout"),t._abort(new Error("JSONP script loaded abnormally (timeout)"))}),d.timeout)}"production"!==n.env.NODE_ENV&&(u=e("debug")("sockjs-client:receiver:jsonp")),l(d,c),d.prototype.abort=function(){if(u("abort"),r[i.WPrefix][this.id]){var e=new Error("JSONP user aborted read");e.code=1e3,this._abort(e)}},d.timeout=35e3,d.scriptErrorTimeout=1e3,d.prototype._callback=function(e){u("_callback",e),this._cleanup(),this.aborting||(e&&(u("message",e),this.emit("message",e)),this.emit("close",null,"network"),this.removeAllListeners())},d.prototype._abort=function(e){u("_abort",e),this._cleanup(),this.aborting=!0,this.emit("close",e.code,e.message),this.removeAllListeners()},d.prototype._cleanup=function(){if(u("_cleanup"),clearTimeout(this.timeoutId),this.script2&&(this.script2.parentNode.removeChild(this.script2),this.script2=null),this.script){var e=this.script;e.parentNode.removeChild(e),e.onreadystatechange=e.onerror=e.onload=e.onclick=null,this.script=null}delete r[i.WPrefix][this.id]},d.prototype._scriptError=function(){u("_scriptError");var e=this;this.errorTimer||(this.errorTimer=setTimeout((function(){e.loadedOkay||e._abort(new Error("JSONP script loaded abnormally (onerror)"))}),d.scriptErrorTimeout))},d.prototype._createScript=function(e){u("_createScript",e);var t,n=this,i=this.script=r.document.createElement("script");if(i.id="a"+s.string(8),i.src=e,i.type="text/javascript",i.charset="UTF-8",i.onerror=this._scriptError.bind(this),i.onload=function(){u("onload"),n._abort(new Error("JSONP script loaded abnormally (onload)"))},i.onreadystatechange=function(){if(u("onreadystatechange",i.readyState),/loaded|closed/.test(i.readyState)){if(i&&i.htmlFor&&i.onclick){n.loadedOkay=!0;try{i.onclick()}catch(e){}}i&&n._abort(new Error("JSONP script loaded abnormally (onreadystatechange)"))}},void 0===i.async&&r.document.attachEvent)if(o.isOpera())(t=this.script2=r.document.createElement("script")).text="try{var a = document.getElementById('"+i.id+"'); if(a)a.onerror();}catch(x){};",i.async=t.async=!1;else{try{i.htmlFor=i.id,i.event="onclick"}catch(e){}i.async=!0}void 0!==i.async&&(i.async=!0);var a=r.document.getElementsByTagName("head")[0];a.insertBefore(i,a.firstChild),t&&a.insertBefore(t,a.firstChild)},t.exports=d}).call(this)}).call(this,{env:{}},void 0!==n.g?n.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"../../utils/browser":44,"../../utils/iframe":47,"../../utils/random":50,"../../utils/url":52,debug:55,events:3,inherits:57}],32:[function(e,t,n){(function(n){(function(){"use strict";var r=e("inherits"),i=e("events").EventEmitter,s=function(){};function o(e,t){s(e),i.call(this);var n=this;this.bufferPosition=0,this.xo=new t("POST",e,null),this.xo.on("chunk",this._chunkHandler.bind(this)),this.xo.once("finish",(function(e,t){s("finish",e,t),n._chunkHandler(e,t),n.xo=null;var r=200===e?"network":"permanent";s("close",r),n.emit("close",null,r),n._cleanup()}))}"production"!==n.env.NODE_ENV&&(s=e("debug")("sockjs-client:receiver:xhr")),r(o,i),o.prototype._chunkHandler=function(e,t){if(s("_chunkHandler",e),200===e&&t)for(var n=-1;;this.bufferPosition+=n+1){var r=t.slice(this.bufferPosition);if(-1===(n=r.indexOf("\n")))break;var i=r.slice(0,n);i&&(s("message",i),this.emit("message",i))}},o.prototype._cleanup=function(){s("_cleanup"),this.removeAllListeners()},o.prototype.abort=function(){s("abort"),this.xo&&(this.xo.close(),s("close"),this.emit("close",null,"user"),this.xo=null),this._cleanup()},t.exports=o}).call(this)}).call(this,{env:{}})},{debug:55,events:3,inherits:57}],33:[function(e,t,r){(function(n,r){(function(){"use strict";var i,s,o=e("../../utils/random"),a=e("../../utils/url"),l=function(){};function c(e){l("createIframe",e);try{return r.document.createElement('<iframe name="'+e+'">')}catch(n){var t=r.document.createElement("iframe");return t.name=e,t}}function u(){l("createForm"),(i=r.document.createElement("form")).style.display="none",i.style.position="absolute",i.method="POST",i.enctype="application/x-www-form-urlencoded",i.acceptCharset="UTF-8",(s=r.document.createElement("textarea")).name="d",i.appendChild(s),r.document.body.appendChild(i)}"production"!==n.env.NODE_ENV&&(l=e("debug")("sockjs-client:sender:jsonp")),t.exports=function(e,t,n){l(e,t),i||u();var r="a"+o.string(8);i.target=r,i.action=a.addQuery(a.addPath(e,"/jsonp_send"),"i="+r);var d=c(r);d.id=r,d.style.display="none",i.appendChild(d);try{s.value=t}catch(e){}i.submit();var h=function(e){l("completed",r,e),d.onerror&&(d.onreadystatechange=d.onerror=d.onload=null,setTimeout((function(){l("cleaning up",r),d.parentNode.removeChild(d),d=null}),500),s.value="",n(e))};return d.onerror=function(){l("onerror",r),h()},d.onload=function(){l("onload",r),h()},d.onreadystatechange=function(e){l("onreadystatechange",r,d.readyState,e),"complete"===d.readyState&&h()},function(){l("aborted",r),h(new Error("Aborted"))}}}).call(this)}).call(this,{env:{}},void 0!==n.g?n.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"../../utils/random":50,"../../utils/url":52,debug:55}],34:[function(e,t,r){(function(n,r){(function(){"use strict";var i=e("events").EventEmitter,s=e("inherits"),o=e("../../utils/event"),a=e("../../utils/browser"),l=e("../../utils/url"),c=function(){};function u(e,t,n){c(e,t);var r=this;i.call(this),setTimeout((function(){r._start(e,t,n)}),0)}"production"!==n.env.NODE_ENV&&(c=e("debug")("sockjs-client:sender:xdr")),s(u,i),u.prototype._start=function(e,t,n){c("_start");var i=this,s=new r.XDomainRequest;t=l.addQuery(t,"t="+ +new Date),s.onerror=function(){c("onerror"),i._error()},s.ontimeout=function(){c("ontimeout"),i._error()},s.onprogress=function(){c("progress",s.responseText),i.emit("chunk",200,s.responseText)},s.onload=function(){c("load"),i.emit("finish",200,s.responseText),i._cleanup(!1)},this.xdr=s,this.unloadRef=o.unloadAdd((function(){i._cleanup(!0)}));try{this.xdr.open(e,t),this.timeout&&(this.xdr.timeout=this.timeout),this.xdr.send(n)}catch(e){this._error()}},u.prototype._error=function(){this.emit("finish",0,""),this._cleanup(!1)},u.prototype._cleanup=function(e){if(c("cleanup",e),this.xdr){if(this.removeAllListeners(),o.unloadDel(this.unloadRef),this.xdr.ontimeout=this.xdr.onerror=this.xdr.onprogress=this.xdr.onload=null,e)try{this.xdr.abort()}catch(e){}this.unloadRef=this.xdr=null}},u.prototype.close=function(){c("close"),this._cleanup(!0)},u.enabled=!(!r.XDomainRequest||!a.hasDomain()),t.exports=u}).call(this)}).call(this,{env:{}},void 0!==n.g?n.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"../../utils/browser":44,"../../utils/event":46,"../../utils/url":52,debug:55,events:3,inherits:57}],35:[function(e,t,n){"use strict";var r=e("inherits"),i=e("../driver/xhr");function s(e,t,n,r){i.call(this,e,t,n,r)}r(s,i),s.enabled=i.enabled&&i.supportsCORS,t.exports=s},{"../driver/xhr":17,inherits:57}],36:[function(e,t,n){"use strict";var r=e("events").EventEmitter;function i(){var e=this;r.call(this),this.to=setTimeout((function(){e.emit("finish",200,"{}")}),i.timeout)}e("inherits")(i,r),i.prototype.close=function(){clearTimeout(this.to)},i.timeout=2e3,t.exports=i},{events:3,inherits:57}],37:[function(e,t,n){"use strict";var r=e("inherits"),i=e("../driver/xhr");function s(e,t,n){i.call(this,e,t,n,{noCredentials:!0})}r(s,i),s.enabled=i.enabled,t.exports=s},{"../driver/xhr":17,inherits:57}],38:[function(e,t,n){(function(n){(function(){"use strict";var r=e("../utils/event"),i=e("../utils/url"),s=e("inherits"),o=e("events").EventEmitter,a=e("./driver/websocket"),l=function(){};function c(e,t,n){if(!c.enabled())throw new Error("Transport created when disabled");o.call(this),l("constructor",e);var s=this,u=i.addPath(e,"/websocket");u="https"===u.slice(0,5)?"wss"+u.slice(5):"ws"+u.slice(4),this.url=u,this.ws=new a(this.url,[],n),this.ws.onmessage=function(e){l("message event",e.data),s.emit("message",e.data)},this.unloadRef=r.unloadAdd((function(){l("unload"),s.ws.close()})),this.ws.onclose=function(e){l("close event",e.code,e.reason),s.emit("close",e.code,e.reason),s._cleanup()},this.ws.onerror=function(e){l("error event",e),s.emit("close",1006,"WebSocket connection broken"),s._cleanup()}}"production"!==n.env.NODE_ENV&&(l=e("debug")("sockjs-client:websocket")),s(c,o),c.prototype.send=function(e){var t="["+e+"]";l("send",t),this.ws.send(t)},c.prototype.close=function(){l("close");var e=this.ws;this._cleanup(),e&&e.close()},c.prototype._cleanup=function(){l("_cleanup");var e=this.ws;e&&(e.onmessage=e.onclose=e.onerror=null),r.unloadDel(this.unloadRef),this.unloadRef=this.ws=null,this.removeAllListeners()},c.enabled=function(){return l("enabled"),!!a},c.transportName="websocket",c.roundTrips=2,t.exports=c}).call(this)}).call(this,{env:{}})},{"../utils/event":46,"../utils/url":52,"./driver/websocket":19,debug:55,events:3,inherits:57}],39:[function(e,t,n){"use strict";var r=e("inherits"),i=e("./lib/ajax-based"),s=e("./xdr-streaming"),o=e("./receiver/xhr"),a=e("./sender/xdr");function l(e){if(!a.enabled)throw new Error("Transport created when disabled");i.call(this,e,"/xhr",o,a)}r(l,i),l.enabled=s.enabled,l.transportName="xdr-polling",l.roundTrips=2,t.exports=l},{"./lib/ajax-based":24,"./receiver/xhr":32,"./sender/xdr":34,"./xdr-streaming":40,inherits:57}],40:[function(e,t,n){"use strict";var r=e("inherits"),i=e("./lib/ajax-based"),s=e("./receiver/xhr"),o=e("./sender/xdr");function a(e){if(!o.enabled)throw new Error("Transport created when disabled");i.call(this,e,"/xhr_streaming",s,o)}r(a,i),a.enabled=function(e){return!e.cookie_needed&&!e.nullOrigin&&o.enabled&&e.sameScheme},a.transportName="xdr-streaming",a.roundTrips=2,t.exports=a},{"./lib/ajax-based":24,"./receiver/xhr":32,"./sender/xdr":34,inherits:57}],41:[function(e,t,n){"use strict";var r=e("inherits"),i=e("./lib/ajax-based"),s=e("./receiver/xhr"),o=e("./sender/xhr-cors"),a=e("./sender/xhr-local");function l(e){if(!a.enabled&&!o.enabled)throw new Error("Transport created when disabled");i.call(this,e,"/xhr",s,o)}r(l,i),l.enabled=function(e){return!e.nullOrigin&&(!(!a.enabled||!e.sameOrigin)||o.enabled)},l.transportName="xhr-polling",l.roundTrips=2,t.exports=l},{"./lib/ajax-based":24,"./receiver/xhr":32,"./sender/xhr-cors":35,"./sender/xhr-local":37,inherits:57}],42:[function(e,t,r){(function(n){(function(){"use strict";var r=e("inherits"),i=e("./lib/ajax-based"),s=e("./receiver/xhr"),o=e("./sender/xhr-cors"),a=e("./sender/xhr-local"),l=e("../utils/browser");function c(e){if(!a.enabled&&!o.enabled)throw new Error("Transport created when disabled");i.call(this,e,"/xhr_streaming",s,o)}r(c,i),c.enabled=function(e){return!e.nullOrigin&&!l.isOpera()&&o.enabled},c.transportName="xhr-streaming",c.roundTrips=2,c.needBody=!!n.document,t.exports=c}).call(this)}).call(this,void 0!==n.g?n.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"../utils/browser":44,"./lib/ajax-based":24,"./receiver/xhr":32,"./sender/xhr-cors":35,"./sender/xhr-local":37,inherits:57}],43:[function(e,t,r){(function(e){(function(){"use strict";e.crypto&&e.crypto.getRandomValues?t.exports.randomBytes=function(t){var n=new Uint8Array(t);return e.crypto.getRandomValues(n),n}:t.exports.randomBytes=function(e){for(var t=new Array(e),n=0;n<e;n++)t[n]=Math.floor(256*Math.random());return t}}).call(this)}).call(this,void 0!==n.g?n.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],44:[function(e,t,r){(function(e){(function(){"use strict";t.exports={isOpera:function(){return e.navigator&&/opera/i.test(e.navigator.userAgent)},isKonqueror:function(){return e.navigator&&/konqueror/i.test(e.navigator.userAgent)},hasDomain:function(){if(!e.document)return!0;try{return!!e.document.domain}catch(e){return!1}}}}).call(this)}).call(this,void 0!==n.g?n.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],45:[function(e,t,n){"use strict";var r,i=/[\x00-\x1f\ud800-\udfff\ufffe\uffff\u0300-\u0333\u033d-\u0346\u034a-\u034c\u0350-\u0352\u0357-\u0358\u035c-\u0362\u0374\u037e\u0387\u0591-\u05af\u05c4\u0610-\u0617\u0653-\u0654\u0657-\u065b\u065d-\u065e\u06df-\u06e2\u06eb-\u06ec\u0730\u0732-\u0733\u0735-\u0736\u073a\u073d\u073f-\u0741\u0743\u0745\u0747\u07eb-\u07f1\u0951\u0958-\u095f\u09dc-\u09dd\u09df\u0a33\u0a36\u0a59-\u0a5b\u0a5e\u0b5c-\u0b5d\u0e38-\u0e39\u0f43\u0f4d\u0f52\u0f57\u0f5c\u0f69\u0f72-\u0f76\u0f78\u0f80-\u0f83\u0f93\u0f9d\u0fa2\u0fa7\u0fac\u0fb9\u1939-\u193a\u1a17\u1b6b\u1cda-\u1cdb\u1dc0-\u1dcf\u1dfc\u1dfe\u1f71\u1f73\u1f75\u1f77\u1f79\u1f7b\u1f7d\u1fbb\u1fbe\u1fc9\u1fcb\u1fd3\u1fdb\u1fe3\u1feb\u1fee-\u1fef\u1ff9\u1ffb\u1ffd\u2000-\u2001\u20d0-\u20d1\u20d4-\u20d7\u20e7-\u20e9\u2126\u212a-\u212b\u2329-\u232a\u2adc\u302b-\u302c\uaab2-\uaab3\uf900-\ufa0d\ufa10\ufa12\ufa15-\ufa1e\ufa20\ufa22\ufa25-\ufa26\ufa2a-\ufa2d\ufa30-\ufa6d\ufa70-\ufad9\ufb1d\ufb1f\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40-\ufb41\ufb43-\ufb44\ufb46-\ufb4e\ufff0-\uffff]/g,s=function(e){var t,n={},r=[];for(t=0;t<65536;t++)r.push(String.fromCharCode(t));return e.lastIndex=0,r.join("").replace(e,(function(e){return n[e]="\\u"+("0000"+e.charCodeAt(0).toString(16)).slice(-4),""})),e.lastIndex=0,n};t.exports={quote:function(e){var t=JSON.stringify(e);return i.lastIndex=0,i.test(t)?(r||(r=s(i)),t.replace(i,(function(e){return r[e]}))):t}}},{}],46:[function(e,t,r){(function(n){(function(){"use strict";var r=e("./random"),i={},s=!1,o=n.chrome&&n.chrome.app&&n.chrome.app.runtime;t.exports={attachEvent:function(e,t){void 0!==n.addEventListener?n.addEventListener(e,t,!1):n.document&&n.attachEvent&&(n.document.attachEvent("on"+e,t),n.attachEvent("on"+e,t))},detachEvent:function(e,t){void 0!==n.addEventListener?n.removeEventListener(e,t,!1):n.document&&n.detachEvent&&(n.document.detachEvent("on"+e,t),n.detachEvent("on"+e,t))},unloadAdd:function(e){if(o)return null;var t=r.string(8);return i[t]=e,s&&setTimeout(this.triggerUnloadCallbacks,0),t},unloadDel:function(e){e in i&&delete i[e]},triggerUnloadCallbacks:function(){for(var e in i)i[e](),delete i[e]}};var a=function(){s||(s=!0,t.exports.triggerUnloadCallbacks())};o||t.exports.attachEvent("unload",a)}).call(this)}).call(this,void 0!==n.g?n.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"./random":50}],47:[function(e,t,r){(function(n,r){(function(){"use strict";var i=e("./event"),s=e("./browser"),o=function(){};"production"!==n.env.NODE_ENV&&(o=e("debug")("sockjs-client:utils:iframe")),t.exports={WPrefix:"_jp",currentWindowId:null,polluteGlobalNamespace:function(){t.exports.WPrefix in r||(r[t.exports.WPrefix]={})},postMessage:function(e,n){r.parent!==r?r.parent.postMessage(JSON.stringify({windowId:t.exports.currentWindowId,type:e,data:n||""}),"*"):o("Cannot postMessage, no parent window.",e,n)},createIframe:function(e,t){var n,s,a=r.document.createElement("iframe"),l=function(){o("unattach"),clearTimeout(n);try{a.onload=null}catch(e){}a.onerror=null},c=function(){o("cleanup"),a&&(l(),setTimeout((function(){a&&a.parentNode.removeChild(a),a=null}),0),i.unloadDel(s))},u=function(e){o("onerror",e),a&&(c(),t(e))},d=function(e,t){o("post",e,t),setTimeout((function(){try{a&&a.contentWindow&&a.contentWindow.postMessage(e,t)}catch(e){}}),0)};return a.src=e,a.style.display="none",a.style.position="absolute",a.onerror=function(){u("onerror")},a.onload=function(){o("onload"),clearTimeout(n),n=setTimeout((function(){u("onload timeout")}),2e3)},r.document.body.appendChild(a),n=setTimeout((function(){u("timeout")}),15e3),s=i.unloadAdd(c),{post:d,cleanup:c,loaded:l}},createHtmlfile:function(e,n){var s,a,l,c=["Active"].concat("Object").join("X"),u=new r[c]("htmlfile"),d=function(){clearTimeout(s),l.onerror=null},h=function(){u&&(d(),i.unloadDel(a),l.parentNode.removeChild(l),l=u=null,CollectGarbage())},p=function(e){o("onerror",e),u&&(h(),n(e))},f=function(e,t){try{setTimeout((function(){l&&l.contentWindow&&l.contentWindow.postMessage(e,t)}),0)}catch(e){}};u.open(),u.write('<html><script>document.domain="'+r.document.domain+'";<\/script></html>'),u.close(),u.parentWindow[t.exports.WPrefix]=r[t.exports.WPrefix];var m=u.createElement("div");return u.body.appendChild(m),l=u.createElement("iframe"),m.appendChild(l),l.src=e,l.onerror=function(){p("onerror")},s=setTimeout((function(){p("timeout")}),15e3),a=i.unloadAdd(h),{post:f,cleanup:h,loaded:d}}},t.exports.iframeEnabled=!1,r.document&&(t.exports.iframeEnabled=("function"==typeof r.postMessage||"object"==typeof r.postMessage)&&!s.isKonqueror())}).call(this)}).call(this,{env:{}},void 0!==n.g?n.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"./browser":44,"./event":46,debug:55}],48:[function(e,t,r){(function(e){(function(){"use strict";var n={};["log","debug","warn"].forEach((function(t){var r;try{r=e.console&&e.console[t]&&e.console[t].apply}catch(e){}n[t]=r?function(){return e.console[t].apply(e.console,arguments)}:"log"===t?function(){}:n.log})),t.exports=n}).call(this)}).call(this,void 0!==n.g?n.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],49:[function(e,t,n){"use strict";t.exports={isObject:function(e){var t=typeof e;return"function"===t||"object"===t&&!!e},extend:function(e){if(!this.isObject(e))return e;for(var t,n,r=1,i=arguments.length;r<i;r++)for(n in t=arguments[r])Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e}}},{}],50:[function(e,t,n){"use strict";var r=e("crypto"),i="abcdefghijklmnopqrstuvwxyz012345";t.exports={string:function(e){for(var t=i.length,n=r.randomBytes(e),s=[],o=0;o<e;o++)s.push(i.substr(n[o]%t,1));return s.join("")},number:function(e){return Math.floor(Math.random()*e)},numberString:function(e){var t=(""+(e-1)).length;return(new Array(t+1).join("0")+this.number(e)).slice(-t)}}},{crypto:43}],51:[function(e,t,n){(function(n){(function(){"use strict";var r=function(){};"production"!==n.env.NODE_ENV&&(r=e("debug")("sockjs-client:utils:transport")),t.exports=function(e){return{filterToEnabled:function(t,n){var i={main:[],facade:[]};return t?"string"==typeof t&&(t=[t]):t=[],e.forEach((function(e){e&&("websocket"!==e.transportName||!1!==n.websocket?t.length&&-1===t.indexOf(e.transportName)?r("not in whitelist",e.transportName):e.enabled(n)?(r("enabled",e.transportName),i.main.push(e),e.facadeTransport&&i.facade.push(e.facadeTransport)):r("disabled",e.transportName):r("disabled from server","websocket"))})),i}}}}).call(this)}).call(this,{env:{}})},{debug:55}],52:[function(e,t,n){(function(n){(function(){"use strict";var r=e("url-parse"),i=function(){};"production"!==n.env.NODE_ENV&&(i=e("debug")("sockjs-client:utils:url")),t.exports={getOrigin:function(e){if(!e)return null;var t=new r(e);if("file:"===t.protocol)return null;var n=t.port;return n||(n="https:"===t.protocol?"443":"80"),t.protocol+"//"+t.hostname+":"+n},isOriginEqual:function(e,t){var n=this.getOrigin(e)===this.getOrigin(t);return i("same",e,t,n),n},isSchemeEqual:function(e,t){return e.split(":")[0]===t.split(":")[0]},addPath:function(e,t){var n=e.split("?");return n[0]+t+(n[1]?"?"+n[1]:"")},addQuery:function(e,t){return e+(-1===e.indexOf("?")?"?"+t:"&"+t)},isLoopbackAddr:function(e){return/^127\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})$/i.test(e)||/^\[::1\]$/.test(e)}}}).call(this)}).call(this,{env:{}})},{debug:55,"url-parse":60}],53:[function(e,t,n){t.exports="1.6.1"},{}],54:[function(e,t,n){var r=1e3,i=60*r,s=60*i,o=24*s,a=7*o,l=365.25*o;function c(e){if(!((e=String(e)).length>100)){var t=/^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(e);if(t){var n=parseFloat(t[1]);switch((t[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return n*l;case"weeks":case"week":case"w":return n*a;case"days":case"day":case"d":return n*o;case"hours":case"hour":case"hrs":case"hr":case"h":return n*s;case"minutes":case"minute":case"mins":case"min":case"m":return n*i;case"seconds":case"second":case"secs":case"sec":case"s":return n*r;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return n;default:return}}}}function u(e){var t=Math.abs(e);return t>=o?Math.round(e/o)+"d":t>=s?Math.round(e/s)+"h":t>=i?Math.round(e/i)+"m":t>=r?Math.round(e/r)+"s":e+"ms"}function d(e){var t=Math.abs(e);return t>=o?h(e,t,o,"day"):t>=s?h(e,t,s,"hour"):t>=i?h(e,t,i,"minute"):t>=r?h(e,t,r,"second"):e+" ms"}function h(e,t,n,r){var i=t>=1.5*n;return Math.round(e/n)+" "+r+(i?"s":"")}t.exports=function(e,t){t=t||{};var n=typeof e;if("string"===n&&e.length>0)return c(e);if("number"===n&&isFinite(e))return t.long?d(e):u(e);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(e))}},{}],55:[function(e,t,n){(function(r){(function(){function i(){return!("undefined"==typeof window||!window.process||"renderer"!==window.process.type&&!window.process.__nwjs)||("undefined"==typeof navigator||!navigator.userAgent||!navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))&&("undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/))}function s(e){if(e[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+e[0]+(this.useColors?"%c ":" ")+"+"+t.exports.humanize(this.diff),!this.useColors)return;const n="color: "+this.color;e.splice(1,0,n,"color: inherit");let r=0,i=0;e[0].replace(/%[a-zA-Z%]/g,(e=>{"%%"!==e&&(r++,"%c"===e&&(i=r))})),e.splice(i,0,n)}function o(e){try{e?n.storage.setItem("debug",e):n.storage.removeItem("debug")}catch(e){}}function a(){let e;try{e=n.storage.getItem("debug")}catch(e){}return!e&&void 0!==r&&"env"in r&&(e=r.env.DEBUG),e}function l(){try{return localStorage}catch(e){}}n.formatArgs=s,n.save=o,n.load=a,n.useColors=i,n.storage=l(),n.destroy=(()=>{let e=!1;return()=>{e||(e=!0,console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."))}})(),n.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],n.log=console.debug||console.log||(()=>{}),t.exports=e("./common")(n);const{formatters:c}=t.exports;c.j=function(e){try{return JSON.stringify(e)}catch(e){return"[UnexpectedJSONParseError]: "+e.message}}}).call(this)}).call(this,{env:{}})},{"./common":56}],56:[function(e,t,n){function r(t){function n(e){let t=0;for(let n=0;n<e.length;n++)t=(t<<5)-t+e.charCodeAt(n),t|=0;return r.colors[Math.abs(t)%r.colors.length]}function r(e){let t,n,s,o=null;function a(...e){if(!a.enabled)return;const n=a,i=Number(new Date),s=i-(t||i);n.diff=s,n.prev=t,n.curr=i,t=i,e[0]=r.coerce(e[0]),"string"!=typeof e[0]&&e.unshift("%O");let o=0;e[0]=e[0].replace(/%([a-zA-Z%])/g,((t,i)=>{if("%%"===t)return"%";o++;const s=r.formatters[i];if("function"==typeof s){const r=e[o];t=s.call(n,r),e.splice(o,1),o--}return t})),r.formatArgs.call(n,e),(n.log||r.log).apply(n,e)}return a.namespace=e,a.useColors=r.useColors(),a.color=r.selectColor(e),a.extend=i,a.destroy=r.destroy,Object.defineProperty(a,"enabled",{enumerable:!0,configurable:!1,get:()=>null!==o?o:(n!==r.namespaces&&(n=r.namespaces,s=r.enabled(e)),s),set:e=>{o=e}}),"function"==typeof r.init&&r.init(a),a}function i(e,t){const n=r(this.namespace+(void 0===t?":":t)+e);return n.log=this.log,n}function s(e){let t;r.save(e),r.namespaces=e,r.names=[],r.skips=[];const n=("string"==typeof e?e:"").split(/[\s,]+/),i=n.length;for(t=0;t<i;t++)n[t]&&("-"===(e=n[t].replace(/\*/g,".*?"))[0]?r.skips.push(new RegExp("^"+e.substr(1)+"$")):r.names.push(new RegExp("^"+e+"$")))}function o(){const e=[...r.names.map(l),...r.skips.map(l).map((e=>"-"+e))].join(",");return r.enable(""),e}function a(e){if("*"===e[e.length-1])return!0;let t,n;for(t=0,n=r.skips.length;t<n;t++)if(r.skips[t].test(e))return!1;for(t=0,n=r.names.length;t<n;t++)if(r.names[t].test(e))return!0;return!1}function l(e){return e.toString().substring(2,e.toString().length-2).replace(/\.\*\?$/,"*")}function c(e){return e instanceof Error?e.stack||e.message:e}function u(){console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.")}return r.debug=r,r.default=r,r.coerce=c,r.disable=o,r.enable=s,r.enabled=a,r.humanize=e("ms"),r.destroy=u,Object.keys(t).forEach((e=>{r[e]=t[e]})),r.names=[],r.skips=[],r.formatters={},r.selectColor=n,r.enable(r.load()),r}t.exports=r},{ms:54}],57:[function(e,t,n){"function"==typeof Object.create?t.exports=function(e,t){t&&(e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}))}:t.exports=function(e,t){if(t){e.super_=t;var n=function(){};n.prototype=t.prototype,e.prototype=new n,e.prototype.constructor=e}}},{}],58:[function(e,t,n){"use strict";var r,i=Object.prototype.hasOwnProperty;function s(e){try{return decodeURIComponent(e.replace(/\+/g," "))}catch(e){return null}}function o(e){for(var t,n=/([^=?&]+)=?([^&]*)/g,r={};t=n.exec(e);){var i=s(t[1]),o=s(t[2]);null===i||null===o||i in r||(r[i]=o)}return r}function a(e,t){t=t||"";var n,s,o=[];for(s in"string"!=typeof t&&(t="?"),e)if(i.call(e,s)){if((n=e[s])||null!==n&&n!==r&&!isNaN(n)||(n=""),s=encodeURIComponent(s),n=encodeURIComponent(n),null===s||null===n)continue;o.push(s+"="+n)}return o.length?t+o.join("&"):""}n.stringify=a,n.parse=o},{}],59:[function(e,t,n){"use strict";t.exports=function(e,t){if(t=t.split(":")[0],!(e=+e))return!1;switch(t){case"http":case"ws":return 80!==e;case"https":case"wss":return 443!==e;case"ftp":return 21!==e;case"gopher":return 70!==e;case"file":return!1}return 0!==e}},{}],60:[function(e,t,r){(function(n){(function(){"use strict";var r=e("requires-port"),i=e("querystringify"),s=/^[\x00-\x20\u00a0\u1680\u2000-\u200a\u2028\u2029\u202f\u205f\u3000\ufeff]+/,o=/[\n\r\t]/g,a=/^[A-Za-z][A-Za-z0-9+-.]*:\/\//,l=/:\d+$/,c=/^([a-z][a-z0-9.+-]*:)?(\/\/)?([\\/]+)?([\S\s]*)/i,u=/^[a-zA-Z]:/;function d(e){return(e||"").toString().replace(s,"")}var h=[["#","hash"],["?","query"],function(e,t){return m(t.protocol)?e.replace(/\\/g,"/"):e},["/","pathname"],["@","auth",1],[NaN,"host",void 0,1,1],[/:(\d*)$/,"port",void 0,1],[NaN,"hostname",void 0,1,1]],p={hash:1,query:1};function f(e){var t,r=("undefined"!=typeof window?window:void 0!==n?n:"undefined"!=typeof self?self:{}).location||{},i={},s=typeof(e=e||r);if("blob:"===e.protocol)i=new y(unescape(e.pathname),{});else if("string"===s)for(t in i=new y(e,{}),p)delete i[t];else if("object"===s){for(t in e)t in p||(i[t]=e[t]);void 0===i.slashes&&(i.slashes=a.test(e.href))}return i}function m(e){return"file:"===e||"ftp:"===e||"http:"===e||"https:"===e||"ws:"===e||"wss:"===e}function g(e,t){e=(e=d(e)).replace(o,""),t=t||{};var n,r=c.exec(e),i=r[1]?r[1].toLowerCase():"",s=!!r[2],a=!!r[3],l=0;return s?a?(n=r[2]+r[3]+r[4],l=r[2].length+r[3].length):(n=r[2]+r[4],l=r[2].length):a?(n=r[3]+r[4],l=r[3].length):n=r[4],"file:"===i?l>=2&&(n=n.slice(2)):m(i)?n=r[4]:i?s&&(n=n.slice(2)):l>=2&&m(t.protocol)&&(n=r[4]),{protocol:i,slashes:s||m(i),slashesCount:l,rest:n}}function v(e,t){if(""===e)return t;for(var n=(t||"/").split("/").slice(0,-1).concat(e.split("/")),r=n.length,i=n[r-1],s=!1,o=0;r--;)"."===n[r]?n.splice(r,1):".."===n[r]?(n.splice(r,1),o++):o&&(0===r&&(s=!0),n.splice(r,1),o--);return s&&n.unshift(""),"."!==i&&".."!==i||n.push(""),n.join("/")}function y(e,t,n){if(e=(e=d(e)).replace(o,""),!(this instanceof y))return new y(e,t,n);var s,a,l,c,p,b,w=h.slice(),_=typeof t,x=this,S=0;for("object"!==_&&"string"!==_&&(n=t,t=null),n&&"function"!=typeof n&&(n=i.parse),s=!(a=g(e||"",t=f(t))).protocol&&!a.slashes,x.slashes=a.slashes||s&&t.slashes,x.protocol=a.protocol||t.protocol||"",e=a.rest,("file:"===a.protocol&&(2!==a.slashesCount||u.test(e))||!a.slashes&&(a.protocol||a.slashesCount<2||!m(x.protocol)))&&(w[3]=[/(.*)/,"pathname"]);S<w.length;S++)"function"!=typeof(c=w[S])?(l=c[0],b=c[1],l!=l?x[b]=e:"string"==typeof l?~(p="@"===l?e.lastIndexOf(l):e.indexOf(l))&&("number"==typeof c[2]?(x[b]=e.slice(0,p),e=e.slice(p+c[2])):(x[b]=e.slice(p),e=e.slice(0,p))):(p=l.exec(e))&&(x[b]=p[1],e=e.slice(0,p.index)),x[b]=x[b]||s&&c[3]&&t[b]||"",c[4]&&(x[b]=x[b].toLowerCase())):e=c(e,x);n&&(x.query=n(x.query)),s&&t.slashes&&"/"!==x.pathname.charAt(0)&&(""!==x.pathname||""!==t.pathname)&&(x.pathname=v(x.pathname,t.pathname)),"/"!==x.pathname.charAt(0)&&m(x.protocol)&&(x.pathname="/"+x.pathname),r(x.port,x.protocol)||(x.host=x.hostname,x.port=""),x.username=x.password="",x.auth&&(~(p=x.auth.indexOf(":"))?(x.username=x.auth.slice(0,p),x.username=encodeURIComponent(decodeURIComponent(x.username)),x.password=x.auth.slice(p+1),x.password=encodeURIComponent(decodeURIComponent(x.password))):x.username=encodeURIComponent(decodeURIComponent(x.auth)),x.auth=x.password?x.username+":"+x.password:x.username),x.origin="file:"!==x.protocol&&m(x.protocol)&&x.host?x.protocol+"//"+x.host:"null",x.href=x.toString()}function b(e,t,n){var s=this;switch(e){case"query":"string"==typeof t&&t.length&&(t=(n||i.parse)(t)),s[e]=t;break;case"port":s[e]=t,r(t,s.protocol)?t&&(s.host=s.hostname+":"+t):(s.host=s.hostname,s[e]="");break;case"hostname":s[e]=t,s.port&&(t+=":"+s.port),s.host=t;break;case"host":s[e]=t,l.test(t)?(t=t.split(":"),s.port=t.pop(),s.hostname=t.join(":")):(s.hostname=t,s.port="");break;case"protocol":s.protocol=t.toLowerCase(),s.slashes=!n;break;case"pathname":case"hash":if(t){var o="pathname"===e?"/":"#";s[e]=t.charAt(0)!==o?o+t:t}else s[e]=t;break;case"username":case"password":s[e]=encodeURIComponent(t);break;case"auth":var a=t.indexOf(":");~a?(s.username=t.slice(0,a),s.username=encodeURIComponent(decodeURIComponent(s.username)),s.password=t.slice(a+1),s.password=encodeURIComponent(decodeURIComponent(s.password))):s.username=encodeURIComponent(decodeURIComponent(t))}for(var c=0;c<h.length;c++){var u=h[c];u[4]&&(s[u[1]]=s[u[1]].toLowerCase())}return s.auth=s.password?s.username+":"+s.password:s.username,s.origin="file:"!==s.protocol&&m(s.protocol)&&s.host?s.protocol+"//"+s.host:"null",s.href=s.toString(),s}function w(e){e&&"function"==typeof e||(e=i.stringify);var t,n=this,r=n.host,s=n.protocol;s&&":"!==s.charAt(s.length-1)&&(s+=":");var o=s+(n.protocol&&n.slashes||m(n.protocol)?"//":"");return n.username?(o+=n.username,n.password&&(o+=":"+n.password),o+="@"):n.password?(o+=":"+n.password,o+="@"):"file:"!==n.protocol&&m(n.protocol)&&!r&&"/"!==n.pathname&&(o+="@"),(":"===r[r.length-1]||l.test(n.hostname)&&!n.port)&&(r+=":"),o+=r+n.pathname,(t="object"==typeof n.query?e(n.query):n.query)&&(o+="?"!==t.charAt(0)?"?"+t:t),n.hash&&(o+=n.hash),o}y.prototype={set:b,toString:w},y.extractProtocol=g,y.location=f,y.trimLeft=d,y.qs=i,t.exports=y}).call(this)}).call(this,void 0!==n.g?n.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{querystringify:58,"requires-port":59}]},{},[1])(1)},"./node_modules/split-type/dist/index.js":(e,t,n)=>{"use strict";function r(e,t){return Object.getOwnPropertyNames(Object(e)).reduce(((n,r)=>{const i=Object.getOwnPropertyDescriptor(Object(e),r),s=Object.getOwnPropertyDescriptor(Object(t),r);return Object.defineProperty(n,r,s||i)}),{})}function i(e){return"string"==typeof e}function s(e){return Array.isArray(e)}function o(e={}){const t=r(e);let n;return void 0!==t.types?n=t.types:void 0!==t.split&&(n=t.split),void 0!==n&&(t.types=(i(n)||s(n)?String(n):"").split(",").map((e=>String(e).trim())).filter((e=>/((line)|(word)|(char))/i.test(e)))),(t.absolute||t.position)&&(t.absolute=t.absolute||/absolute/.test(e.position)),t}function a(e){const t=i(e)||s(e)?String(e):"";return{none:!t,lines:/line/i.test(t),words:/word/i.test(t),chars:/char/i.test(t)}}function l(e){return null!==e&&"object"==typeof e}function c(e){return l(e)&&/^(1|3|11)$/.test(e.nodeType)}function u(e){return s(e)?e:null==e?[]:function(e){return l(e)&&function(e){return"number"==typeof e&&e>-1&&e%1==0}(e.length)}(e)?Array.prototype.slice.call(e):[e]}function d(e){let t=e;return i(e)&&(t=/^(#[a-z]\w+)$/.test(e.trim())?document.getElementById(e.trim().slice(1)):document.querySelectorAll(e)),u(t).reduce(((e,t)=>[...e,...u(t).filter(c)]),[])}n.r(t),n.d(t,{default:()=>G}),(()=>{function e(...e){const t=e.length;for(let n=0;n<t;n++){const t=e[n];1===t.nodeType||11===t.nodeType?this.appendChild(t):this.appendChild(document.createTextNode(String(t)))}}function t(...e){for(;this.lastChild;)this.removeChild(this.lastChild);e.length&&this.append(...e)}function n(...e){const t=this.parentNode;let n=e.length;if(t)for(n||t.removeChild(this);n--;){let r=e[n];"object"!=typeof r?r=this.ownerDocument.createTextNode(r):r.parentNode&&r.parentNode.removeChild(r),n?t.insertBefore(this.previousSibling,r):t.replaceChild(r,this)}}"undefined"!=typeof Element&&(Element.prototype.append||(Element.prototype.append=e,DocumentFragment.prototype.append=e),Element.prototype.replaceChildren||(Element.prototype.replaceChildren=t,DocumentFragment.prototype.replaceChildren=t),Element.prototype.replaceWith||(Element.prototype.replaceWith=n,DocumentFragment.prototype.replaceWith=n))})();const{entries:h,keys:p,values:f}=Object,m="_splittype",g={};let v=0;function y(e,t,n){if(!l(e))return console.warn("[data.set] owner is not an object"),null;const r=e[m]||(e[m]=++v),i=g[r]||(g[r]={});return void 0===n?t&&Object.getPrototypeOf(t)===Object.prototype&&(g[r]={...i,...t}):void 0!==t&&(i[t]=n),n}function b(e,t){const n=l(e)?e[m]:null,r=n&&g[n]||{};return void 0===t?r:r[t]}function w(e){const t=e&&e[m];t&&(delete e[t],delete g[t])}const _="\\ud800-\\udfff",x="\\u0300-\\u036f\\ufe20-\\ufe23",S="\\u20d0-\\u20f0",k="\\ufe0e\\ufe0f",j="[\\ud800-\\udfff]",C=`[${x}\\u20d0-\\u20f0]`,E="\\ud83c[\\udffb-\\udfff]",T="[^\\ud800-\\udfff]",A="(?:\\ud83c[\\udde6-\\uddff]){2}",O="[\\ud800-\\udbff][\\udc00-\\udfff]",P="\\u200d",M=`${`(?:${C}|${E})`}?`,L="[\\ufe0e\\ufe0f]?",I=L+M+("(?:\\u200d(?:"+[T,A,O].join("|")+")"+L+M+")*"),R=`(?:${[`${T}${C}?`,C,A,O,j].join("|")}\n)`,$=RegExp(`${E}(?=${E})|${R}${I}`,"g"),D=RegExp(`[${[P,_,x,S,k].join("")}]`);function N(e){return D.test(e)}function B(e){return N(e)?function(e){return e.match($)||[]}(e):function(e){return e.split("")}(e)}function q(e,t=""){var n;return(e=null==(n=e)?"":String(n))&&i(e)&&!t&&N(e)?B(e):e.split(t)}function F(e,t){const n=document.createElement(e);return t?(Object.keys(t).forEach((e=>{const r=t[e],s=i(r)?r.trim():r;null!==s&&""!==s&&("children"===e?n.append(...u(s)):n.setAttribute(e,s))})),n):n}var V={splitClass:"",lineClass:"line",wordClass:"word",charClass:"char",types:["lines","words","chars"],absolute:!1,tagName:"div"};function U(e,t){const n=a((t=r(V,t)).types),i=t.tagName,s=e.nodeValue,o=document.createDocumentFragment();let l=[],c=[];return/^\s/.test(s)&&o.append(" "),l=function(e,t=" "){return(e?String(e):"").trim().replace(/\s+/g," ").split(t)}(s).reduce(((e,r,s,a)=>{let l,u;return n.chars&&(u=q(r).map((e=>{const n=F(i,{class:`${t.splitClass} ${t.charClass}`,style:"display: inline-block;",children:e});return y(n,"isChar",!0),c=[...c,n],n}))),n.words||n.lines?(l=F(i,{class:`${t.wordClass} ${t.splitClass}`,style:"display: inline-block; "+(n.words&&t.absolute?"position: relative;":""),children:n.chars?u:r}),y(l,{isWord:!0,isWordStart:!0,isWordEnd:!0}),o.appendChild(l)):u.forEach((e=>{o.appendChild(e)})),s<a.length-1&&o.append(" "),n.words?e.concat(l):e}),[]),/\s$/.test(s)&&o.append(" "),e.replaceWith(o),{words:l,chars:c}}function W(e,t){const n=e.nodeType,r={words:[],chars:[]};if(!/(1|3|11)/.test(n))return r;if(3===n&&/\S/.test(e.nodeValue))return U(e,t);const i=u(e.childNodes);if(i.length&&(y(e,"isSplit",!0),!b(e).isRoot)){e.style.display="inline-block",e.style.position="relative";const t=e.nextSibling,n=e.previousSibling,r=e.textContent||"",i=t?t.textContent:" ",s=n?n.textContent:" ";y(e,{isWordEnd:/\s$/.test(r)||/^\s/.test(i),isWordStart:/^\s/.test(r)||/\s$/.test(s)})}return i.reduce(((e,n)=>{const{words:r,chars:i}=W(n,t);return{words:[...e.words,...r],chars:[...e.chars,...i]}}),r)}function H(e){b(e).isWord?(w(e),e.replaceWith(...e.childNodes)):u(e.children).forEach((e=>H(e)))}function z(e,t,n){const r=a(t.types),i=t.tagName,s=e.getElementsByTagName("*"),o=[];let l,c,d,h=[],p=null,f=[];const m=e.parentElement,g=e.nextElementSibling,v=document.createDocumentFragment(),w=window.getComputedStyle(e),_=w.textAlign,x=.2*parseFloat(w.fontSize);return t.absolute&&(d={left:e.offsetLeft,top:e.offsetTop,width:e.offsetWidth},c=e.offsetWidth,l=e.offsetHeight,y(e,{cssWidth:e.style.width,cssHeight:e.style.height})),u(s).forEach((i=>{const s=i.parentElement===e,{width:a,height:l,top:c,left:u}=function(e,t,n,r){if(!n.absolute)return{top:t?e.offsetTop:null};const i=e.offsetParent,[s,o]=r;let a=0,l=0;if(i&&i!==document.body){const e=i.getBoundingClientRect();a=e.x+s,l=e.y+o}const{width:c,height:u,x:d,y:h}=e.getBoundingClientRect();return{width:c,height:u,top:h+o-l,left:d+s-a}}(i,s,t,n);/^br$/i.test(i.nodeName)||(r.lines&&s&&((null===p||c-p>=x)&&(p=c,o.push(h=[])),h.push(i)),t.absolute&&y(i,{top:c,left:u,width:a,height:l}))})),m&&m.removeChild(e),r.lines&&(f=o.map((e=>{const n=F(i,{class:`${t.splitClass} ${t.lineClass}`,style:`display: block; text-align: ${_}; width: 100%;`});y(n,"isLine",!0);const r={height:0,top:1e4};return v.appendChild(n),e.forEach(((e,t,i)=>{const{isWordEnd:s,top:o,height:a}=b(e),l=i[t+1];r.height=Math.max(r.height,a),r.top=Math.min(r.top,o),n.appendChild(e),s&&b(l).isWordStart&&n.append(" ")})),t.absolute&&y(n,{height:r.height,top:r.top}),n})),r.words||H(v),e.replaceChildren(v)),t.absolute&&(e.style.width=`${e.style.width||c}px`,e.style.height=`${l}px`,u(s).forEach((e=>{const{isLine:t,top:n,left:r,width:i,height:s}=b(e),o=b(e.parentElement),a=!t&&o.isLine;e.style.top=`${a?n-o.top:n}px`,e.style.left=t?`${d.left}px`:r-(a?d.left:0)+"px",e.style.height=`${s}px`,e.style.width=t?`${d.width}px`:`${i}px`,e.style.position="absolute"}))),m&&(g?m.insertBefore(e,g):m.appendChild(e)),f}let X=r(V,{});class G{static get data(){return g}static get defaults(){return X}static set defaults(e){X=r(X,o(e))}static setDefaults(e){return X=r(X,o(e)),V}static revert(e){d(e).forEach((e=>{const{isSplit:t,html:n,cssWidth:r,cssHeight:i}=b(e);t&&(e.innerHTML=n,e.style.width=r||"",e.style.height=i||"",w(e))}))}static create(e,t){return new G(e,t)}constructor(e,t){this.isSplit=!1,this.settings=r(X,o(t)),this.elements=d(e),this.split()}split(e){this.revert(),this.elements.forEach((e=>{y(e,"html",e.innerHTML)})),this.lines=[],this.words=[],this.chars=[];const t=[window.pageXOffset,window.pageYOffset];void 0!==e&&(this.settings=r(this.settings,o(e)));const n=a(this.settings.types);n.none||(this.elements.forEach((e=>{y(e,"isRoot",!0);const{words:t,chars:n}=W(e,this.settings);this.words=[...this.words,...t],this.chars=[...this.chars,...n]})),this.elements.forEach((e=>{if(n.lines||this.settings.absolute){const n=z(e,this.settings,t);this.lines=[...this.lines,...n]}})),this.isSplit=!0,window.scrollTo(t[0],t[1]),h(g).forEach((([e,{isRoot:t,isSplit:n}])=>{t&&n||(g[e]=null,delete g[e])})))}revert(){this.isSplit&&(this.lines=null,this.words=null,this.chars=null,this.isSplit=!1),G.revert(this.elements)}}},"./node_modules/tiny-emitter/index.js":e=>{function t(){}t.prototype={on:function(e,t,n){var r=this.e||(this.e={});return(r[e]||(r[e]=[])).push({fn:t,ctx:n}),this},once:function(e,t,n){var r=this;function i(){r.off(e,i),t.apply(n,arguments)}return i._=t,this.on(e,i,n)},emit:function(e){for(var t=[].slice.call(arguments,1),n=((this.e||(this.e={}))[e]||[]).slice(),r=0,i=n.length;r<i;r++)n[r].fn.apply(n[r].ctx,t);return this},off:function(e,t){var n=this.e||(this.e={}),r=n[e],i=[];if(r&&t)for(var s=0,o=r.length;s<o;s++)r[s].fn!==t&&r[s].fn._!==t&&i.push(r[s]);return i.length?n[e]=i:delete n[e],this}},e.exports=t,e.exports.TinyEmitter=t},"./node_modules/url/node_modules/punycode/punycode.js":function(e,t,n){var r;e=n.nmd(e),function(i){t&&t.nodeType,e&&e.nodeType;var s="object"==typeof n.g&&n.g;s.global!==s&&s.window!==s&&s.self;var o,a=2147483647,l=36,c=/^xn--/,u=/[^\x20-\x7E]/,d=/[\x2E\u3002\uFF0E\uFF61]/g,h={overflow:"Overflow: input needs wider integers to process","not-basic":"Illegal input >= 0x80 (not a basic code point)","invalid-input":"Invalid input"},p=Math.floor,f=String.fromCharCode;function m(e){throw RangeError(h[e])}function g(e,t){for(var n=e.length,r=[];n--;)r[n]=t(e[n]);return r}function v(e,t){var n=e.split("@"),r="";return n.length>1&&(r=n[0]+"@",e=n[1]),r+g((e=e.replace(d,".")).split("."),t).join(".")}function y(e){for(var t,n,r=[],i=0,s=e.length;i<s;)(t=e.charCodeAt(i++))>=55296&&t<=56319&&i<s?56320==(64512&(n=e.charCodeAt(i++)))?r.push(((1023&t)<<10)+(1023&n)+65536):(r.push(t),i--):r.push(t);return r}function b(e){return g(e,(function(e){var t="";return e>65535&&(t+=f((e-=65536)>>>10&1023|55296),e=56320|1023&e),t+=f(e)})).join("")}function w(e,t){return e+22+75*(e<26)-((0!=t)<<5)}function _(e,t,n){var r=0;for(e=n?p(e/700):e>>1,e+=p(e/t);e>455;r+=l)e=p(e/35);return p(r+36*e/(e+38))}function x(e){var t,n,r,i,s,o,c,u,d,h,f,g=[],v=e.length,y=0,w=128,x=72;for((n=e.lastIndexOf("-"))<0&&(n=0),r=0;r<n;++r)e.charCodeAt(r)>=128&&m("not-basic"),g.push(e.charCodeAt(r));for(i=n>0?n+1:0;i<v;){for(s=y,o=1,c=l;i>=v&&m("invalid-input"),((u=(f=e.charCodeAt(i++))-48<10?f-22:f-65<26?f-65:f-97<26?f-97:l)>=l||u>p((a-y)/o))&&m("overflow"),y+=u*o,!(u<(d=c<=x?1:c>=x+26?26:c-x));c+=l)o>p(a/(h=l-d))&&m("overflow"),o*=h;x=_(y-s,t=g.length+1,0==s),p(y/t)>a-w&&m("overflow"),w+=p(y/t),y%=t,g.splice(y++,0,w)}return b(g)}function S(e){var t,n,r,i,s,o,c,u,d,h,g,v,b,x,S,k=[];for(v=(e=y(e)).length,t=128,n=0,s=72,o=0;o<v;++o)(g=e[o])<128&&k.push(f(g));for(r=i=k.length,i&&k.push("-");r<v;){for(c=a,o=0;o<v;++o)(g=e[o])>=t&&g<c&&(c=g);for(c-t>p((a-n)/(b=r+1))&&m("overflow"),n+=(c-t)*b,t=c,o=0;o<v;++o)if((g=e[o])<t&&++n>a&&m("overflow"),g==t){for(u=n,d=l;!(u<(h=d<=s?1:d>=s+26?26:d-s));d+=l)S=u-h,x=l-h,k.push(f(w(h+S%x,0))),u=p(S/x);k.push(f(w(u,0))),s=_(n,b,r==i),n=0,++r}++n,++t}return k.join("")}o={version:"1.3.2",ucs2:{decode:y,encode:b},decode:x,encode:S,toASCII:function(e){return v(e,(function(e){return u.test(e)?"xn--"+S(e):e}))},toUnicode:function(e){return v(e,(function(e){return c.test(e)?x(e.slice(4).toLowerCase()):e}))}},void 0===(r=function(){return o}.call(t,n,t,e))||(e.exports=r)}()},"./node_modules/url/url.js":(e,t,n)=>{"use strict";var r=n("./node_modules/url/node_modules/punycode/punycode.js"),i=n("./node_modules/url/util.js");function s(){this.protocol=null,this.slashes=null,this.auth=null,this.host=null,this.port=null,this.hostname=null,this.hash=null,this.search=null,this.query=null,this.pathname=null,this.path=null,this.href=null}t.parse=b,t.resolve=function(e,t){return b(e,!1,!0).resolve(t)},t.resolveObject=function(e,t){return e?b(e,!1,!0).resolveObject(t):t},t.format=function(e){i.isString(e)&&(e=b(e));return e instanceof s?e.format():s.prototype.format.call(e)},t.Url=s;var o=/^([a-z0-9.+-]+:)/i,a=/:[0-9]*$/,l=/^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,c=["{","}","|","\\","^","`"].concat(["<",">",'"',"`"," ","\r","\n","\t"]),u=["'"].concat(c),d=["%","/","?",";","#"].concat(u),h=["/","?","#"],p=/^[+a-z0-9A-Z_-]{0,63}$/,f=/^([+a-z0-9A-Z_-]{0,63})(.*)$/,m={javascript:!0,"javascript:":!0},g={javascript:!0,"javascript:":!0},v={http:!0,https:!0,ftp:!0,gopher:!0,file:!0,"http:":!0,"https:":!0,"ftp:":!0,"gopher:":!0,"file:":!0},y=n("./node_modules/querystring/index.js");function b(e,t,n){if(e&&i.isObject(e)&&e instanceof s)return e;var r=new s;return r.parse(e,t,n),r}s.prototype.parse=function(e,t,n){if(!i.isString(e))throw new TypeError("Parameter 'url' must be a string, not "+typeof e);var s=e.indexOf("?"),a=-1!==s&&s<e.indexOf("#")?"?":"#",c=e.split(a);c[0]=c[0].replace(/\\/g,"/");var b=e=c.join(a);if(b=b.trim(),!n&&1===e.split("#").length){var w=l.exec(b);if(w)return this.path=b,this.href=b,this.pathname=w[1],w[2]?(this.search=w[2],this.query=t?y.parse(this.search.substr(1)):this.search.substr(1)):t&&(this.search="",this.query={}),this}var _=o.exec(b);if(_){var x=(_=_[0]).toLowerCase();this.protocol=x,b=b.substr(_.length)}if(n||_||b.match(/^\/\/[^@\/]+@[^@\/]+/)){var S="//"===b.substr(0,2);!S||_&&g[_]||(b=b.substr(2),this.slashes=!0)}if(!g[_]&&(S||_&&!v[_])){for(var k,j,C=-1,E=0;E<h.length;E++){-1!==(T=b.indexOf(h[E]))&&(-1===C||T<C)&&(C=T)}-1!==(j=-1===C?b.lastIndexOf("@"):b.lastIndexOf("@",C))&&(k=b.slice(0,j),b=b.slice(j+1),this.auth=decodeURIComponent(k)),C=-1;for(E=0;E<d.length;E++){var T;-1!==(T=b.indexOf(d[E]))&&(-1===C||T<C)&&(C=T)}-1===C&&(C=b.length),this.host=b.slice(0,C),b=b.slice(C),this.parseHost(),this.hostname=this.hostname||"";var A="["===this.hostname[0]&&"]"===this.hostname[this.hostname.length-1];if(!A)for(var O=this.hostname.split(/\./),P=(E=0,O.length);E<P;E++){var M=O[E];if(M&&!M.match(p)){for(var L="",I=0,R=M.length;I<R;I++)M.charCodeAt(I)>127?L+="x":L+=M[I];if(!L.match(p)){var $=O.slice(0,E),D=O.slice(E+1),N=M.match(f);N&&($.push(N[1]),D.unshift(N[2])),D.length&&(b="/"+D.join(".")+b),this.hostname=$.join(".");break}}}this.hostname.length>255?this.hostname="":this.hostname=this.hostname.toLowerCase(),A||(this.hostname=r.toASCII(this.hostname));var B=this.port?":"+this.port:"",q=this.hostname||"";this.host=q+B,this.href+=this.host,A&&(this.hostname=this.hostname.substr(1,this.hostname.length-2),"/"!==b[0]&&(b="/"+b))}if(!m[x])for(E=0,P=u.length;E<P;E++){var F=u[E];if(-1!==b.indexOf(F)){var V=encodeURIComponent(F);V===F&&(V=escape(F)),b=b.split(F).join(V)}}var U=b.indexOf("#");-1!==U&&(this.hash=b.substr(U),b=b.slice(0,U));var W=b.indexOf("?");if(-1!==W?(this.search=b.substr(W),this.query=b.substr(W+1),t&&(this.query=y.parse(this.query)),b=b.slice(0,W)):t&&(this.search="",this.query={}),b&&(this.pathname=b),v[x]&&this.hostname&&!this.pathname&&(this.pathname="/"),this.pathname||this.search){B=this.pathname||"";var H=this.search||"";this.path=B+H}return this.href=this.format(),this},s.prototype.format=function(){var e=this.auth||"";e&&(e=(e=encodeURIComponent(e)).replace(/%3A/i,":"),e+="@");var t=this.protocol||"",n=this.pathname||"",r=this.hash||"",s=!1,o="";this.host?s=e+this.host:this.hostname&&(s=e+(-1===this.hostname.indexOf(":")?this.hostname:"["+this.hostname+"]"),this.port&&(s+=":"+this.port)),this.query&&i.isObject(this.query)&&Object.keys(this.query).length&&(o=y.stringify(this.query));var a=this.search||o&&"?"+o||"";return t&&":"!==t.substr(-1)&&(t+=":"),this.slashes||(!t||v[t])&&!1!==s?(s="//"+(s||""),n&&"/"!==n.charAt(0)&&(n="/"+n)):s||(s=""),r&&"#"!==r.charAt(0)&&(r="#"+r),a&&"?"!==a.charAt(0)&&(a="?"+a),t+s+(n=n.replace(/[?#]/g,(function(e){return encodeURIComponent(e)})))+(a=a.replace("#","%23"))+r},s.prototype.resolve=function(e){return this.resolveObject(b(e,!1,!0)).format()},s.prototype.resolveObject=function(e){if(i.isString(e)){var t=new s;t.parse(e,!1,!0),e=t}for(var n=new s,r=Object.keys(this),o=0;o<r.length;o++){var a=r[o];n[a]=this[a]}if(n.hash=e.hash,""===e.href)return n.href=n.format(),n;if(e.slashes&&!e.protocol){for(var l=Object.keys(e),c=0;c<l.length;c++){var u=l[c];"protocol"!==u&&(n[u]=e[u])}return v[n.protocol]&&n.hostname&&!n.pathname&&(n.path=n.pathname="/"),n.href=n.format(),n}if(e.protocol&&e.protocol!==n.protocol){if(!v[e.protocol]){for(var d=Object.keys(e),h=0;h<d.length;h++){var p=d[h];n[p]=e[p]}return n.href=n.format(),n}if(n.protocol=e.protocol,e.host||g[e.protocol])n.pathname=e.pathname;else{for(var f=(e.pathname||"").split("/");f.length&&!(e.host=f.shift()););e.host||(e.host=""),e.hostname||(e.hostname=""),""!==f[0]&&f.unshift(""),f.length<2&&f.unshift(""),n.pathname=f.join("/")}if(n.search=e.search,n.query=e.query,n.host=e.host||"",n.auth=e.auth,n.hostname=e.hostname||e.host,n.port=e.port,n.pathname||n.search){var m=n.pathname||"",y=n.search||"";n.path=m+y}return n.slashes=n.slashes||e.slashes,n.href=n.format(),n}var b=n.pathname&&"/"===n.pathname.charAt(0),w=e.host||e.pathname&&"/"===e.pathname.charAt(0),_=w||b||n.host&&e.pathname,x=_,S=n.pathname&&n.pathname.split("/")||[],k=(f=e.pathname&&e.pathname.split("/")||[],n.protocol&&!v[n.protocol]);if(k&&(n.hostname="",n.port=null,n.host&&(""===S[0]?S[0]=n.host:S.unshift(n.host)),n.host="",e.protocol&&(e.hostname=null,e.port=null,e.host&&(""===f[0]?f[0]=e.host:f.unshift(e.host)),e.host=null),_=_&&(""===f[0]||""===S[0])),w)n.host=e.host||""===e.host?e.host:n.host,n.hostname=e.hostname||""===e.hostname?e.hostname:n.hostname,n.search=e.search,n.query=e.query,S=f;else if(f.length)S||(S=[]),S.pop(),S=S.concat(f),n.search=e.search,n.query=e.query;else if(!i.isNullOrUndefined(e.search)){if(k)n.hostname=n.host=S.shift(),(A=!!(n.host&&n.host.indexOf("@")>0)&&n.host.split("@"))&&(n.auth=A.shift(),n.host=n.hostname=A.shift());return n.search=e.search,n.query=e.query,i.isNull(n.pathname)&&i.isNull(n.search)||(n.path=(n.pathname?n.pathname:"")+(n.search?n.search:"")),n.href=n.format(),n}if(!S.length)return n.pathname=null,n.search?n.path="/"+n.search:n.path=null,n.href=n.format(),n;for(var j=S.slice(-1)[0],C=(n.host||e.host||S.length>1)&&("."===j||".."===j)||""===j,E=0,T=S.length;T>=0;T--)"."===(j=S[T])?S.splice(T,1):".."===j?(S.splice(T,1),E++):E&&(S.splice(T,1),E--);if(!_&&!x)for(;E--;E)S.unshift("..");!_||""===S[0]||S[0]&&"/"===S[0].charAt(0)||S.unshift(""),C&&"/"!==S.join("/").substr(-1)&&S.push("");var A,O=""===S[0]||S[0]&&"/"===S[0].charAt(0);k&&(n.hostname=n.host=O?"":S.length?S.shift():"",(A=!!(n.host&&n.host.indexOf("@")>0)&&n.host.split("@"))&&(n.auth=A.shift(),n.host=n.hostname=A.shift()));return(_=_||n.host&&S.length)&&!O&&S.unshift(""),S.length?n.pathname=S.join("/"):(n.pathname=null,n.path=null),i.isNull(n.pathname)&&i.isNull(n.search)||(n.path=(n.pathname?n.pathname:"")+(n.search?n.search:"")),n.auth=e.auth||n.auth,n.slashes=n.slashes||e.slashes,n.href=n.format(),n},s.prototype.parseHost=function(){var e=this.host,t=a.exec(e);t&&(":"!==(t=t[0])&&(this.port=t.substr(1)),e=e.substr(0,e.length-t.length)),e&&(this.hostname=e)}},"./node_modules/url/util.js":e=>{"use strict";e.exports={isString:function(e){return"string"==typeof e},isObject:function(e){return"object"==typeof e&&null!==e},isNull:function(e){return null===e},isNullOrUndefined:function(e){return null==e}}},"./node_modules/virtual-scroll/lib/virtualscroll.js":function(e){e.exports=function(){var e=0;function t(t){return"__private_"+e+++"_"+t}function n(e,t){if(!Object.prototype.hasOwnProperty.call(e,t))throw new TypeError("attempted to use private field on non-instance");return e}function r(){}r.prototype={on:function(e,t,n){var r=this.e||(this.e={});return(r[e]||(r[e]=[])).push({fn:t,ctx:n}),this},once:function(e,t,n){var r=this;function i(){r.off(e,i),t.apply(n,arguments)}return i._=t,this.on(e,i,n)},emit:function(e){for(var t=[].slice.call(arguments,1),n=((this.e||(this.e={}))[e]||[]).slice(),r=0,i=n.length;r<i;r++)n[r].fn.apply(n[r].ctx,t);return this},off:function(e,t){var n=this.e||(this.e={}),r=n[e],i=[];if(r&&t)for(var s=0,o=r.length;s<o;s++)r[s].fn!==t&&r[s].fn._!==t&&i.push(r[s]);return i.length?n[e]=i:delete n[e],this}};var i=r;i.TinyEmitter=r;var s,o="virtualscroll",a=t("options"),l=t("el"),c=t("emitter"),u=t("event"),d=t("touchStart"),h=t("bodyTouchAction");return function(){function e(e){var t=this;Object.defineProperty(this,a,{writable:!0,value:void 0}),Object.defineProperty(this,l,{writable:!0,value:void 0}),Object.defineProperty(this,c,{writable:!0,value:void 0}),Object.defineProperty(this,u,{writable:!0,value:void 0}),Object.defineProperty(this,d,{writable:!0,value:void 0}),Object.defineProperty(this,h,{writable:!0,value:void 0}),this._onWheel=function(e){var r=n(t,a)[a],i=n(t,u)[u];i.deltaX=e.wheelDeltaX||-1*e.deltaX,i.deltaY=e.wheelDeltaY||-1*e.deltaY,s.isFirefox&&1===e.deltaMode&&(i.deltaX*=r.firefoxMultiplier,i.deltaY*=r.firefoxMultiplier),i.deltaX*=r.mouseMultiplier,i.deltaY*=r.mouseMultiplier,t._notify(e)},this._onMouseWheel=function(e){var r=n(t,u)[u];r.deltaX=e.wheelDeltaX?e.wheelDeltaX:0,r.deltaY=e.wheelDeltaY?e.wheelDeltaY:e.wheelDelta,t._notify(e)},this._onTouchStart=function(e){var r=e.targetTouches?e.targetTouches[0]:e;n(t,d)[d].x=r.pageX,n(t,d)[d].y=r.pageY},this._onTouchMove=function(e){var r=n(t,a)[a];r.preventTouch&&!e.target.classList.contains(r.unpreventTouchClass)&&e.preventDefault();var i=n(t,u)[u],s=e.targetTouches?e.targetTouches[0]:e;i.deltaX=(s.pageX-n(t,d)[d].x)*r.touchMultiplier,i.deltaY=(s.pageY-n(t,d)[d].y)*r.touchMultiplier,n(t,d)[d].x=s.pageX,n(t,d)[d].y=s.pageY,t._notify(e)},this._onKeyDown=function(e){var r=n(t,u)[u];r.deltaX=r.deltaY=0;var i=window.innerHeight-40;switch(e.keyCode){case 37:case 38:r.deltaY=n(t,a)[a].keyStep;break;case 39:case 40:r.deltaY=-n(t,a)[a].keyStep;break;case 32:r.deltaY=i*(e.shiftKey?1:-1);break;default:return}t._notify(e)},n(this,l)[l]=window,e&&e.el&&(n(this,l)[l]=e.el,delete e.el),s||(s={hasWheelEvent:"onwheel"in document,hasMouseWheelEvent:"onmousewheel"in document,hasTouch:"ontouchstart"in document,hasTouchWin:navigator.msMaxTouchPoints&&navigator.msMaxTouchPoints>1,hasPointer:!!window.navigator.msPointerEnabled,hasKeyDown:"onkeydown"in document,isFirefox:navigator.userAgent.indexOf("Firefox")>-1}),n(this,a)[a]=Object.assign({mouseMultiplier:1,touchMultiplier:2,firefoxMultiplier:15,keyStep:120,preventTouch:!1,unpreventTouchClass:"vs-touchmove-allowed",useKeyboard:!0,useTouch:!0},e),n(this,c)[c]=new i,n(this,u)[u]={y:0,x:0,deltaX:0,deltaY:0},n(this,d)[d]={x:null,y:null},n(this,h)[h]=null,void 0!==n(this,a)[a].passive&&(this.listenerOptions={passive:n(this,a)[a].passive})}var t=e.prototype;return t._notify=function(e){var t=n(this,u)[u];t.x+=t.deltaX,t.y+=t.deltaY,n(this,c)[c].emit(o,{x:t.x,y:t.y,deltaX:t.deltaX,deltaY:t.deltaY,originalEvent:e})},t._bind=function(){s.hasWheelEvent&&n(this,l)[l].addEventListener("wheel",this._onWheel,this.listenerOptions),s.hasMouseWheelEvent&&n(this,l)[l].addEventListener("mousewheel",this._onMouseWheel,this.listenerOptions),s.hasTouch&&n(this,a)[a].useTouch&&(n(this,l)[l].addEventListener("touchstart",this._onTouchStart,this.listenerOptions),n(this,l)[l].addEventListener("touchmove",this._onTouchMove,this.listenerOptions)),s.hasPointer&&s.hasTouchWin&&(n(this,h)[h]=document.body.style.msTouchAction,document.body.style.msTouchAction="none",n(this,l)[l].addEventListener("MSPointerDown",this._onTouchStart,!0),n(this,l)[l].addEventListener("MSPointerMove",this._onTouchMove,!0)),s.hasKeyDown&&n(this,a)[a].useKeyboard&&document.addEventListener("keydown",this._onKeyDown)},t._unbind=function(){s.hasWheelEvent&&n(this,l)[l].removeEventListener("wheel",this._onWheel),s.hasMouseWheelEvent&&n(this,l)[l].removeEventListener("mousewheel",this._onMouseWheel),s.hasTouch&&(n(this,l)[l].removeEventListener("touchstart",this._onTouchStart),n(this,l)[l].removeEventListener("touchmove",this._onTouchMove)),s.hasPointer&&s.hasTouchWin&&(document.body.style.msTouchAction=n(this,h)[h],n(this,l)[l].removeEventListener("MSPointerDown",this._onTouchStart,!0),n(this,l)[l].removeEventListener("MSPointerMove",this._onTouchMove,!0)),s.hasKeyDown&&n(this,a)[a].useKeyboard&&document.removeEventListener("keydown",this._onKeyDown)},t.on=function(e,t){n(this,c)[c].on(o,e,t);var r=n(this,c)[c].e;r&&r[o]&&1===r[o].length&&this._bind()},t.off=function(e,t){n(this,c)[c].off(o,e,t);var r=n(this,c)[c].e;(!r[o]||r[o].length<=0)&&this._unbind()},t.destroy=function(){n(this,c)[c].off(),this._unbind()},e}()}()},"./node_modules/webpack-dev-server/client/clients/BaseClient.js":e=>{"use strict";function t(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}e.exports=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}var n,r,i;return n=e,i=[{key:"getClientPath",value:function(e){throw new Error("Client needs implementation")}}],(r=null)&&t(n.prototype,r),i&&t(n,i),e}()},"./node_modules/webpack-dev-server/client/clients/SockJSClient.js":(e,t,n)=>{"use strict";function r(e){return r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},r(e)}function i(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function s(e,t){return s=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},s(e,t)}function o(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=l(e);if(t){var i=l(this).constructor;n=Reflect.construct(r,arguments,i)}else n=r.apply(this,arguments);return a(this,n)}}function a(e,t){return!t||"object"!==r(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function l(e){return l=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},l(e)}var c=n("./node_modules/sockjs-client/dist/sockjs.js"),u=n("./node_modules/webpack-dev-server/client/clients/BaseClient.js");e.exports=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&s(e,t)}(l,e);var t,n,r,a=o(l);function l(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,l),(t=a.call(this)).sock=new c(e),t.sock.onerror=function(e){},t}return t=l,r=[{key:"getClientPath",value:function(e){return"./node_modules/webpack-dev-server/client/clients/SockJSClient.js"}}],(n=[{key:"onOpen",value:function(e){this.sock.onopen=e}},{key:"onClose",value:function(e){this.sock.onclose=e}},{key:"onMessage",value:function(e){this.sock.onmessage=function(t){e(t.data)}}}])&&i(t.prototype,n),r&&i(t,r),l}(u)},"./node_modules/webpack-dev-server/client/overlay.js":(e,t,n)=>{"use strict";var r=n("./node_modules/ansi-html-community/index.js"),i=new(0,n("./node_modules/html-entities/lib/index.js").AllHtmlEntities),s={reset:["transparent","transparent"],black:"181818",red:"E36049",green:"B3CB74",yellow:"FFD080",blue:"7CAFC2",magenta:"7FACCA",cyan:"C3C2EF",lightgrey:"EBE7E3",darkgrey:"6D7891"},o=null,a=null,l=null;function c(e){var t,n;a?e(a):(l=e,o||(t=function(){var e,t;(t=(e=o).contentDocument.createElement("div")).id="webpack-dev-server-client-overlay-div",t.style.position="fixed",t.style.boxSizing="border-box",t.style.left=0,t.style.top=0,t.style.right=0,t.style.bottom=0,t.style.width="100vw",t.style.height="100vh",t.style.backgroundColor="rgba(0, 0, 0, 0.85)",t.style.color="#E8E8E8",t.style.fontFamily="Menlo, Consolas, monospace",t.style.fontSize="large",t.style.padding="2rem",t.style.lineHeight="1.2",t.style.whiteSpace="pre-wrap",t.style.overflow="auto",e.contentDocument.body.appendChild(t),l(a=t)},(n=document.createElement("iframe")).id="webpack-dev-server-client-overlay",n.src="about:blank",n.style.position="fixed",n.style.left=0,n.style.top=0,n.style.right=0,n.style.bottom=0,n.style.width="100vw",n.style.height="100vh",n.style.border="none",n.style.zIndex=9999999999,n.onload=t,o=n,document.body.appendChild(o)))}r.setColors(s),e.exports={clear:function(){a&&(document.body.removeChild(o),a=null,o=null,l=null)},showMessage:function(e){c((function(t){t.innerHTML='<span style="color: #'.concat(s.red,'">Failed to compile.</span><br><br>').concat(r(i.encode(e[0])))}))}}},"./node_modules/webpack-dev-server/client/socket.js":(e,t,n)=>{"use strict";var r=n("./node_modules/webpack-dev-server/client/clients/SockJSClient.js"),i=void 0!==r?r:n("./node_modules/webpack-dev-server/client/clients/SockJSClient.js"),s=0,o=null,a=function(e,t){(o=new i(e)).onOpen((function(){s=0})),o.onClose((function(){if(0===s&&t.close(),o=null,s<=10){var n=1e3*Math.pow(2,s)+100*Math.random();s+=1,setTimeout((function(){a(e,t)}),n)}})),o.onMessage((function(e){var n=JSON.parse(e);t[n.type]&&t[n.type](n.data)}))};e.exports=a},"./node_modules/webpack-dev-server/client/utils/createSocketUrl.js":(e,t,n)=>{"use strict";var r=n("./node_modules/url/url.js"),i=n("./node_modules/webpack-dev-server/client/utils/getCurrentScriptSource.js");e.exports=function(e,t){var n;if("string"==typeof e&&""!==e)n=r.parse(e.substr(1).replace("&","?"),!0);else{var s=i();n=r.parse(s||"/",!0,!0)}return function(e,t){var n=e.auth,i=e.query,s=e.hostname,o=e.protocol,a=e.port;a&&"0"!==a||(a=t.port);"0.0.0.0"!==s&&"::"!==s||!t.hostname||0!==t.protocol.indexOf("http")||(s=t.hostname);!s||"127.0.0.1"===s||"https:"!==t.protocol&&"0.0.0.0"!==e.hostname||(o=t.protocol);var l=i.sockHost||s,c=i.sockPath||"/sockjs-node",u=i.sockPort||a;"location"===u&&(u=t.port);return r.format({protocol:o,auth:n,hostname:l,port:u,pathname:c})}(n,t="string"==typeof t&&""!==t?r.parse(t):self.location)}},"./node_modules/webpack-dev-server/client/utils/getCurrentScriptSource.js":e=>{"use strict";e.exports=function(){if(document.currentScript)return document.currentScript.getAttribute("src");var e=document.scripts||[],t=e[e.length-1];if(t)return t.getAttribute("src");throw new Error("[WDS] Failed to get current script source.")}},"./node_modules/webpack-dev-server/client/utils/log.js":(e,t,n)=>{"use strict";var r=n("./node_modules/loglevel/lib/loglevel.js").getLogger("webpack-dev-server"),i="info";r.setDefaultLevel(i),e.exports={log:r,setLogLevel:function(e){switch(e){case i:case"warn":case"error":case"debug":case"trace":r.setLevel(e);break;case"warning":r.setLevel("warn");break;case"none":case"silent":r.disableAll();break;default:r.error("[WDS] Unknown clientLogLevel '".concat(e,"'"))}}}},"./node_modules/webpack-dev-server/client/utils/reloadApp.js":(e,t,n)=>{"use strict";var r=n("./node_modules/webpack-dev-server/client/utils/log.js").log;e.exports=function(e,t){var i=e.hotReload,s=e.hot,o=e.liveReload,a=t.isUnloading,l=t.currentHash;if(!a&&i)if(s)r.info("[WDS] App hot update..."),n("./node_modules/webpack/hot/emitter.js").emit("webpackHotUpdate",l),"undefined"!=typeof self&&self.window&&self.postMessage("webpackHotUpdate".concat(l),"*");else if(o)var c=self,u=self.setInterval((function(){("about:"!==c.location.protocol||(c=c.parent).parent===c)&&d(c,u)}));function d(e,t){clearInterval(t),r.info("[WDS] App updated. Reloading..."),e.location.reload()}}},"./node_modules/webpack-dev-server/client/utils/sendMessage.js":e=>{"use strict";e.exports=function(e,t){"undefined"==typeof self||"undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope||self.postMessage({type:"webpack".concat(e),data:t},"*")}},"./node_modules/webpack-dev-server/node_modules/ansi-regex/index.js":e=>{"use strict";e.exports=function(){return/[\u001b\u009b][[()#;?]*(?:[0-9]{1,4}(?:;[0-9]{0,4})*)?[0-9A-PRZcf-nqry=><]/g}},"./node_modules/webpack-dev-server/node_modules/strip-ansi/index.js":(e,t,n)=>{"use strict";var r=n("./node_modules/webpack-dev-server/node_modules/ansi-regex/index.js")();e.exports=function(e){return"string"==typeof e?e.replace(r,""):e}},"./node_modules/webpack/hot/emitter.js":(e,t,n)=>{var r=n("./node_modules/events/events.js");e.exports=new r},"./node_modules/webpack/hot/log.js":e=>{var t="info";function n(){}function r(e){return"info"===t&&"info"===e||["info","warning"].indexOf(t)>=0&&"warning"===e||["info","warning","error"].indexOf(t)>=0&&"error"===e}function i(e){return function(t,n){r(t)&&e(n)}}e.exports=function(e,t){r(e)&&("info"===e?console.log(t):"warning"===e?console.warn(t):"error"===e&&console.error(t))};var s=console.group||n,o=console.groupCollapsed||n,a=console.groupEnd||n;e.exports.group=i(s),e.exports.groupCollapsed=i(o),e.exports.groupEnd=i(a),e.exports.setLogLevel=function(e){t=e},e.exports.formatError=function(e){var t=e.message,n=e.stack;return n?n.indexOf(t)<0?t+"\n"+n:n:t}},"./node_modules/webpack/hot sync ^\\.\\/log$":(e,t,n)=>{var r={"./log":"./node_modules/webpack/hot/log.js"};function i(e){var t=s(e);return n(t)}function s(e){if(!n.o(r,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return r[e]}i.keys=function(){return Object.keys(r)},i.resolve=s,e.exports=i,i.id="./node_modules/webpack/hot sync ^\\.\\/log$"},"./node_modules/@studio-freight/lenis/dist/lenis.modern.mjs":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>c});var r=n("./node_modules/tiny-emitter/index.js"),i=n("./node_modules/virtual-scroll/lib/virtualscroll.js");function s(){return s=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},s.apply(this,arguments)}function o(e,t){let n=e%t;return n<0&&(n+=t),n}const a=["duration","easing"];class l{to(e,t={}){let{duration:n=1,easing:r=(e=>e)}=t,i=function(e,t){if(null==e)return{};var n,r,i={},s=Object.keys(e);for(r=0;r<s.length;r++)t.indexOf(n=s[r])>=0||(i[n]=e[n]);return i}(t,a);this.target=e,this.fromKeys=s({},i),this.toKeys=s({},i),this.keys=Object.keys(s({},i)),this.keys.forEach((t=>{this.fromKeys[t]=e[t]})),this.duration=n,this.easing=r,this.currentTime=0,this.isRunning=!0}stop(){this.isRunning=!1}raf(e){if(!this.isRunning)return;this.currentTime=Math.min(this.currentTime+e,this.duration);const t=this.easing(this.progress);this.keys.forEach((e=>{const n=this.fromKeys[e];this.target[e]=n+(this.toKeys[e]-n)*t})),1===t&&this.stop()}get progress(){return this.currentTime/this.duration}}class c extends r.TinyEmitter{constructor({duration:e=1.2,easing:t=(e=>Math.min(1,1.001-Math.pow(2,-10*e))),smooth:n=!0,mouseMultiplier:r=1,smoothTouch:s=!1,touchMultiplier:o=2,direction:a="vertical",gestureDirection:c="vertical",infinite:u=!1,wrapper:d=window,content:h=document.body}={}){var p,f,m;super(),this.onWindowResize=()=>{this.wrapperWidth=window.innerWidth,this.wrapperHeight=window.innerHeight},this.onWrapperResize=([e])=>{if(e){const t=e.contentRect;this.wrapperWidth=t.width,this.wrapperHeight=t.height}},this.onContentResize=([e])=>{if(e){const t=e.contentRect;this.contentWidth=t.width,this.contentHeight=t.height}},this.onVirtualScroll=({deltaY:e,deltaX:t,originalEvent:n})=>{const r=!!n.composedPath().find((e=>e.hasAttribute&&e.hasAttribute("data-lenis-prevent")));if(n.ctrlKey||r)return;if(this.smooth=n.changedTouches?this.smoothTouch:this.options.smooth,this.stopped)return void n.preventDefault();if(!this.smooth)return;if(4===n.buttons)return;this.smooth&&n.preventDefault();let i=0;i="both"===this.gestureDirection?t+e:"horizontal"===this.gestureDirection?t:e,this.targetScroll-=i,this.scrollTo(this.targetScroll)},this.onScroll=e=>{this.isScrolling&&this.smooth||(this.targetScroll=this.scroll=this.lastScroll=this.wrapperNode[this.scrollProperty],this.notify())},window.lenisVersion="0.2.24",this.options={duration:e,easing:t,smooth:n,mouseMultiplier:r,smoothTouch:s,touchMultiplier:o,direction:a,gestureDirection:c,infinite:u,wrapper:d,content:h},this.duration=e,this.easing=t,this.smooth=n,this.mouseMultiplier=r,this.smoothTouch=s,this.touchMultiplier=o,this.direction=a,this.gestureDirection=c,this.infinite=u,this.wrapperNode=d,this.contentNode=h,this.wrapperNode.addEventListener("scroll",this.onScroll),this.wrapperNode===window?(this.wrapperNode.addEventListener("resize",this.onWindowResize),this.onWindowResize()):(this.wrapperHeight=this.wrapperNode.offsetHeight,this.wrapperWidth=this.wrapperNode.offsetWidth,this.wrapperObserver=new ResizeObserver(this.onWrapperResize),this.wrapperObserver.observe(this.wrapperNode)),this.contentHeight=this.contentNode.offsetHeight,this.contentWidth=this.contentNode.offsetWidth,this.contentObserver=new ResizeObserver(this.onContentResize),this.contentObserver.observe(this.contentNode),this.targetScroll=this.scroll=this.lastScroll=this.wrapperNode[this.scrollProperty],this.animate=new l;const g=(null==(p=navigator)||null==(f=p.userAgentData)?void 0:f.platform)||(null==(m=navigator)?void 0:m.platform)||"unknown";this.virtualScroll=new i({el:this.wrapperNode,firefoxMultiplier:50,mouseMultiplier:this.mouseMultiplier*(g.includes("Win")?.84:.4),touchMultiplier:this.touchMultiplier,passive:!1,useKeyboard:!1,useTouch:!0}),this.virtualScroll.on(this.onVirtualScroll)}get scrollProperty(){let e;return e=this.wrapperNode===window?"horizontal"===this.direction?"scrollX":"scrollY":"horizontal"===this.direction?"scrollLeft":"scrollTop",e}start(){this.stopped=!1}stop(){this.stopped=!0,this.animate.stop()}destroy(){var e;this.wrapperNode===window&&this.wrapperNode.removeEventListener("resize",this.onWindowResize),this.wrapperNode.removeEventListener("scroll",this.onScroll),this.virtualScroll.destroy(),null==(e=this.wrapperObserver)||e.disconnect(),this.contentObserver.disconnect()}get limit(){return"horizontal"===this.direction?this.contentWidth-this.wrapperWidth:this.contentHeight-this.wrapperHeight}raf(e){const t=e-(this.now||0);this.now=e,!this.stopped&&this.smooth&&(this.lastScroll=this.scroll,this.animate.raf(.001*t),this.scroll===this.targetScroll&&(this.lastScroll=this.scroll),this.isScrolling&&(this.setScroll(this.scroll),this.notify()),this.isScrolling=this.scroll!==this.targetScroll)}get velocity(){return this.scroll-this.lastScroll}setScroll(e){let t=this.infinite?o(e,this.limit):e;"horizontal"===this.direction?this.wrapperNode.scrollTo(t,0):this.wrapperNode.scrollTo(0,t)}notify(){let e=this.infinite?o(this.scroll,this.limit):this.scroll;this.emit("scroll",{scroll:e,limit:this.limit,velocity:this.velocity,direction:0===this.velocity?0:this.velocity>0?1:-1,progress:e/this.limit})}scrollTo(e,{offset:t=0,immediate:n=!1,duration:r=this.duration,easing:i=this.easing}={}){if(null==e)return;let s;if("number"==typeof e)s=e;else if("top"===e||"#top"===e)s=0;else if("bottom"===e)s=this.limit;else{let t;if("string"==typeof e)t=document.querySelector(e);else{if(null==e||!e.nodeType)return;t=e}if(!t)return;let n=0;if(this.wrapperNode!==window){const e=this.wrapperNode.getBoundingClientRect();n="horizontal"===this.direction?e.left:e.top}const r=t.getBoundingClientRect();s=("horizontal"===this.direction?r.left:r.top)+this.scroll-n}s+=t,this.targetScroll=this.infinite?s:Math.max(0,Math.min(s,this.limit)),!this.smooth||n?(this.animate.stop(),this.scroll=this.lastScroll=this.targetScroll,this.setScroll(this.targetScroll)):this.animate.to(this,{duration:r,easing:i,scroll:this.targetScroll})}}},"./node_modules/@studiometa/js-toolkit/Base/index.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{Base:()=>h});var r=n("./node_modules/@studiometa/js-toolkit/Base/utils.js"),i=n("./node_modules/@studiometa/js-toolkit/Base/managers/ChildrenManager.js"),s=n("./node_modules/@studiometa/js-toolkit/Base/managers/RefsManager.js"),o=n("./node_modules/@studiometa/js-toolkit/Base/managers/ServicesManager.js"),a=n("./node_modules/@studiometa/js-toolkit/Base/managers/EventsManager.js"),l=n("./node_modules/@studiometa/js-toolkit/Base/managers/OptionsManager.js"),c=n("./node_modules/@studiometa/js-toolkit/utils/is.js"),u=n("./node_modules/@studiometa/js-toolkit/utils/noop.js");let d=0;class h extends EventTarget{static $isBase=!0;$parent=null;$id;$el;$isMounted=!1;__eventHandlers=new Map;get $root(){if(!this.$parent)return this;let e=this.$parent,t=this.$parent;for(;e;)e.$parent||(t=e),e=e.$parent;return t}get __config(){let e=Object.getPrototypeOf(this),{config:t}=e.constructor;for(;e.constructor.config&&e.constructor.$isBase;)t={...e.constructor.config,...t},e.constructor.config.options&&(t.options={...e.constructor.config.options,...t.options}),e.constructor.config.emits&&t.emits&&(t.emits=[...e.constructor.config.emits,...t.emits]),e=Object.getPrototypeOf(e);return t.options=t.options??{},t.refs=t.refs??[],t.components=t.components??{},t}static config={name:"Base",emits:["before-mounted","mounted","updated","destroyed","terminated","ticked","scrolled","resized","moved","loaded","keyed"]};__services;get $services(){return this.__services}__refs;get $refs(){return this.__refs}__options;get $options(){return this.__options}__children;get $children(){return this.__children}__events;get $log(){return this.__options.log?window.console.log.bind(window,`[${this.__config.name}]`):u.noop}get __debug(){return c.isDev&&this.__options.debug?window.console.log.bind(window,`[debug] [${this.$id}]`):u.noop}get __managers(){return{ChildrenManager:i.ChildrenManager,EventsManager:a.EventsManager,OptionsManager:l.OptionsManager,RefsManager:s.RefsManager,ServicesManager:o.ServicesManager}}__callMethod(e,...t){return c.isDev&&this.__debug("callMethod",e,...t),this.$emit(e,...t),(0,c.isFunction)(this[e])?(c.isDev&&this.__debug(e,this,...t),this[e].call(this,...t)):null}__hasEvent(e){const t=this.__eventHandlers.get(e);return t&&t.size>0}constructor(e){if(super(),!e){if(c.isDev)throw new Error("The root element must be defined.");return}const{__config:t}=this;var n;if("Base"!==t.name)this.$id=`${t.name}-${d}`,d+=1,this.$el=e,this.$el.__base__||(this.$el.__base__=new WeakMap),this.$el.__base__.set(this.__ctor,this),n=this,[{prop:"__options",constructorName:"OptionsManager",constructor:l.OptionsManager},{prop:"__services",constructorName:"ServicesManager",constructor:o.ServicesManager},{prop:"__events",constructorName:"EventsManager",constructor:a.EventsManager},{prop:"__refs",constructorName:"RefsManager",constructor:s.RefsManager},{prop:"__children",constructorName:"ChildrenManager",constructor:i.ChildrenManager}].forEach((({prop:e,constructorName:t,constructor:r})=>{if(n[e]=new n.__managers[t](n),c.isDev&&!(n[e]instanceof r))throw new Error(`The \`$managers.${t}\` must extend the \`${t}\` class.`)})),c.isDev&&this.__debug("constructor",this);else if(c.isDev)throw new Error("The `config.name` property is required.")}$mount(){return this.$isMounted||(this.$emit("before-mounted"),this.$isMounted=!0,c.isDev&&this.__debug("$mount"),this.$children.registerAll(),this.$refs.registerAll(),this.__events.bindRootElement(),this.$services.enableAll(),this.$children.mountAll(),this.__callMethod("mounted")),this}$update(){return c.isDev&&this.__debug("$update"),this.$refs.unregisterAll(),this.$services.disableAll(),this.$children.registerAll(),this.$refs.registerAll(),this.$services.enableAll(),this.$children.updateAll(),this.__callMethod("updated"),this}$destroy(){return this.$isMounted?(this.$isMounted=!1,c.isDev&&this.__debug("$destroy"),this.__events.unbindRootElement(),this.$refs.unregisterAll(),this.$services.disableAll(),this.$children.destroyAll(),this.__callMethod("destroyed"),this):this}$terminate(){c.isDev&&this.__debug("$terminate"),this.$destroy(),this.__callMethod("terminated"),this.$el.__base__.set(this.__ctor,"terminated")}__addEmits(e){const t=this.__ctor;(0,c.isArray)(t.config.emits)?t.config.emits.push(e):t.config.emits=[e]}__removeEmits(e){const t=this.__ctor,n=t.config.emits.indexOf(e);t.config.emits.splice(n,1)}get __ctor(){return this.constructor}$on(e,t,n){c.isDev&&this.__debug("$on",e,t,n);let i=this.__eventHandlers.get(e);i||(i=new Set,this.__eventHandlers.set(e,i)),i.add(t);return(0,r.getEventTarget)(this,e,this.__config).addEventListener(e,t,n),()=>{this.$off(e,t,n)}}$off(e,t,n){c.isDev&&this.__debug("$off",e,t),this.__eventHandlers.get(e).delete(t);(0,r.getEventTarget)(this,e,this.__config).removeEventListener(e,t,n)}$emit(e,...t){c.isDev&&this.__debug("$emit",e,t),this.dispatchEvent(new CustomEvent(e,{detail:t}))}static $factory(e){if(c.isDev&&!e)throw new Error("The $factory method requires a component’s name or selector to be specified.");return(0,r.getComponentElements)(e).map((e=>new this(e).$mount()))}}},"./node_modules/@studiometa/js-toolkit/Base/managers/AbstractManager.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{AbstractManager:()=>r});class r{__base;get __element(){return this.__base.$el}get __config(){return this.__base.__config}get __eventsManager(){return this.__base.__events}constructor(e){this.__base=e,this.__hideProperties(["__base"])}__hideProperties(e){Object.defineProperties(this,Object.fromEntries(e.map((e=>[e,{enumerable:!1,writable:!1,value:this[e]}]))))}}},"./node_modules/@studiometa/js-toolkit/Base/managers/ChildrenManager.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{ChildrenManager:()=>c});var r=n("./node_modules/@studiometa/js-toolkit/Base/managers/AbstractManager.js"),i=n("./node_modules/@studiometa/js-toolkit/Base/utils.js");function s(e,t,n,r){const i=e.__asyncComponentPromises.get(n);if("$isBase"in n||i&&"resolved"===i.status){let r=n;if(i&&(r=i.ctor),t.__base__&&t.__base__.has(r))return t.__base__.get(r);const s=new r(t);return Object.defineProperty(s,"$parent",{get:()=>e.__base}),s}const o=i?i.promise:n(e.__base);return i||e.__asyncComponentPromises.set(n,{promise:o,status:"pending",ctor:void 0}),o.then((i=>{const a=i.default??i;return e.__asyncComponentPromises.set(n,{promise:o,status:"resolved",ctor:a}),s(e,t,a,r)}))}function o(e,t,n){Object.defineProperty(e,t,{enumerable:!0,configurable:!0,get:()=>{const r=(0,i.getComponentElements)(t,e.__element);return 0===r.length?[]:r.map((r=>s(e,r,n,t))).filter((e=>"terminated"!==e))}})}function a(e,t,n,r){"$update"!==t||n.$isMounted||(t="$mount"),"$update"!==t&&"$destroy"!==t||e.__eventsManager.unbindChild(r,n),"$update"!==t&&"$mount"!==t||e.__eventsManager.bindChild(r,n),n[t]()}function l(e,t){e.registeredNames.forEach((n=>{e[n].forEach((r=>{r instanceof Promise?r.then((r=>a(e,t,r,n))):a(e,t,r,n)}))}))}class c extends r.AbstractManager{__asyncComponentPromises=new WeakMap;get registeredNames(){return Object.keys(this).filter((e=>!e.startsWith("__")))}registerAll(){Object.entries(this.__config.components).forEach((([e,t])=>o(this,e,t)))}mountAll(){l(this,"$mount")}updateAll(){l(this,"$update")}destroyAll(){l(this,"$destroy")}}},"./node_modules/@studiometa/js-toolkit/Base/managers/EventsManager.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{EventsManager:()=>T,normalizeEventName:()=>g,normalizeName:()=>h});var r=n("./node_modules/@studiometa/js-toolkit/utils/object/getAllProperties.js"),i=n("./node_modules/@studiometa/js-toolkit/utils/is.js"),s=n("./node_modules/@studiometa/js-toolkit/Base/utils.js"),o=n("./node_modules/@studiometa/js-toolkit/Base/managers/AbstractManager.js"),a=n("./node_modules/@studiometa/js-toolkit/Base/managers/RefsManager.js");const l=new Map,c=/[A-Z]([A-Z].*)/g,u=/[^a-zA-Z\d\s:]/g,d=/(^\w|\s+\w)/g;function h(e){return l.has(e)||l.set(e,e.replace(c,(e=>e.toLowerCase())).replace(u," ").replace(d,(e=>e.trim().toUpperCase())).trim()),l.get(e)}const p=new Map,f=/[A-Z]/g,m=/^-/;function g(e){return p.has(e)||p.set(e,e.replace(f,(e=>`-${e.toLowerCase()}`)).replace(m,"")),p.get(e)}const v=new Map;function y(e){return v.has(e)||v.set(e,new RegExp(e)),v.get(e)}function b(e,t=""){const n=y(`^on${h(t)}([A-Z].*)$`),[,r]=e.match(n);return g(r)}function w(e,t=""){const n=y(`^on${h(t)}[A-Z].*$`),i=n.toString();let s=e.__methodsCache.get(i);return s||(s=Array.from((0,r.default)(e.__base,[],(e=>n.test(e))).reduce(((e,[t])=>e.add(t)),new Set)),e.__methodsCache.set(i,s)),s}function _(e,t,n,r="add"){const i=`${r}EventListener`;w(e,t).forEach((r=>{const s=b(r,t);n.filter((e=>e)).forEach((t=>t[i](s,e.__refsHandler)))}))}function x(e,t,n,r="add"){const i="add"===r?"$on":"$off";w(e,t).forEach((r=>{const s=b(r,t);n[i](s,e.__childrenHandler)}))}const S=/^onDocument[A-Z][a-z]+/,k=/^onWindow[A-Z][a-z]+/,j=e=>S.test(e),C=e=>(e=>k.test(e))(e)||j(e);function E(e,t="add"){const n=`${t}EventListener`,r=w(e),{__base:i,__config:o}=e;r.forEach((t=>{let r=b(t);if((0,s.eventIsDefinedInConfig)(r,o)||(0,s.eventIsNative)(r,i.$el)){(0,s.getEventTarget)(i,r,o)[n](r,e.__rootElementHandler)}else if(C(t)){r=b(t,j(t)?"document":"window");const i=(e=>j(e)?document:window)(t);i[n](r,j(t)?e.__documentHandler:e.__windowHandler)}}))}class T extends o.AbstractManager{__methodsCache=new Map;__rootElementHandler={handleEvent:e=>{const t=`on${h(e.type)}`;e instanceof CustomEvent&&(0,i.isArray)(e.detail)&&e.detail.length?this.__base[t](...e.detail,e):this.__base[t](e)}};__documentHandler={handleEvent:e=>{const t=`onDocument${h(e.type)}`;this.__base[t](e)}};__windowHandler={handleEvent:e=>{const t=`onWindow${h(e.type)}`;this.__base[t](e)}};__refsHandler={handleEvent:e=>{const t=e.currentTarget,n=(0,a.normalizeRefName)(t.dataset.ref),r=`on${h(n)}${h(e.type)}`;let s=0;(0,i.isArray)(this.__base.$refs[n])&&(s=this.__base.$refs[n].indexOf(t)),this.__base[r](e,s)}};__childrenHandler={handleEvent:e=>{const t=this.__base.$children,{name:n,child:r}=t.registeredNames.map((n=>({name:n,child:[...t[n]].find((t=>t===e.currentTarget||t.$el===e.currentTarget))}))).find((({child:e})=>e)),s=`on${h(n)}${h(e.type)}`,o=[...t[n]].indexOf(r),a=(0,i.isArray)(e.detail)?e.detail:[];this.__base[s](...a,o,e)}};constructor(e){super(e),this.__hideProperties(["__methodsCache","__rootElementHandler","__refsHandler","__childrenHandler","__documentHandler","__windowHandler"])}bindRef(e,t){_(this,e,t)}unbindRef(e,t){_(this,e,t,"remove")}bindChild(e,t){x(this,e,t)}unbindChild(e,t){x(this,e,t,"remove")}bindRootElement(){E(this)}unbindRootElement(){E(this,"remove")}}},"./node_modules/@studiometa/js-toolkit/Base/managers/OptionsManager.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{OptionsManager:()=>u,__getPropertyName:()=>c});var r=n("./node_modules/deepmerge/dist/cjs.js"),i=n("./node_modules/@studiometa/js-toolkit/Base/managers/AbstractManager.js"),s=n("./node_modules/@studiometa/js-toolkit/utils/is.js");const o=new Set([String,Number,Boolean,Array,Object]),a={String:"",Number:0,Boolean:!1,Array:()=>[],Object:()=>({})},l=new Map;function c(e,t=""){const n=e+t;if(l.has(n))return l.get(n);const r=`option${t}${e.replace(/^\w/,(e=>e.toUpperCase()))}`;return l.set(n,r),r}class u extends i.AbstractManager{__values={};name="Base";debug=!1;log=!1;constructor(e){super(e),this.__hideProperties(["__values","__defaultValues"]);const t=this.__config.options||{};this.name=this.__config.name,t.debug={type:Boolean,default:this.__config.debug??!1},t.log={type:Boolean,default:this.__config.log??!1},Object.entries(t).forEach((([e,t])=>{!function(e,t,n){if(o.has(n.type)){if(n.default=n.default??a[n.type.name],n.type!==Array&&n.type!==Object||(0,s.isFunction)(n.default))Object.defineProperty(e,t,{get:()=>e.get(t,n),set:r=>{e.set(t,r,n)},enumerable:!0});else if(s.isDev)throw new Error(`The default value for options of type "${n.type.name}" must be returned by a function.`)}else if(s.isDev)throw new Error(`The "${t}" option has an invalid type. The allowed types are: String, Number, Boolean, Array and Object.`)}(this,e,o.has(t)?{type:t}:t)}))}get(e,t){const{type:n,default:i}=t,o=c(e),a=(0,s.isDefined)(this.__element.dataset[o]);if(n===Boolean){if(i){const t=c(e,"No");return!(0,s.isDefined)(this.__element.dataset[t])}return a||i}const l=this.__element.dataset[o];if(n===Number)return a?Number(l):i;if(n===Array||n===Object){if(!this.__values[e]){let n=a?JSON.parse(l):t.default();(0,s.isDefined)(t.merge)&&(n=(0,s.isBoolean)(t.merge)?r(t.default(),n):r(t.default(),n,t.merge)),this.__values[e]=n}return this.__values[e]}return a?l:i}set(e,t,n){const{type:r,default:i}=n,o=c(e);if(t.constructor.name===r.name)switch(r){case Boolean:if(i){const n=c(e,"No");t?delete this.__element.dataset[n]:this.__element.dataset[n]=""}else t?this.__element.dataset[o]="":delete this.__element.dataset[o];break;case Array:case Object:this.__values[e]=t;break;default:this.__element.dataset[o]=t}else if(s.isDev){const n=(0,s.isArray)(t)||(0,s.isObject)(t)?JSON.stringify(t):t;throw new TypeError(`The "${n}" value for the "${e}" option must be of type "${r.name}"`)}}}},"./node_modules/@studiometa/js-toolkit/Base/managers/RefsManager.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{RefsManager:()=>l,normalizeRefName:()=>o});var r=n("./node_modules/@studiometa/js-toolkit/Base/managers/AbstractManager.js"),i=n("./node_modules/@studiometa/js-toolkit/utils/is.js");const s=/\[\]$/;function o(e){return e.endsWith("[]")?e.replace(s,""):e}function a(e,t){const n=t.endsWith("[]"),r=o(t),s=Array.from(e.__element.querySelectorAll(`[data-ref="${t}"]`)).filter((t=>function(e,t){let n=t.parentElement;for(;n&&!(0,i.isDefined)(n.dataset.component);)n=n.parentElement;return null===n||n===e.__element}(e,t)));i.isDev&&!n&&s.length>1&&console.warn(`[${e.__base.$options.name}]`,`The "${t}" ref has been found multiple times.`,"Did you forgot to add the `[]` suffix to its name?"),!n&&s.length<=1&&!(0,i.isDefined)(s[0])?i.isDev&&console.warn(`[${e.__base.$options.name}]`,`The "${t}" ref is missing.`,`Is there an \`[data-ref="${t}"]\` element in the component's scope?`):(e.__eventsManager.bindRef(t,s),Object.defineProperty(e,r,{value:n||s.length>1?s:s[0],enumerable:!0,configurable:!0}))}class l extends r.AbstractManager{get __refs(){return this.__config.refs??[]}registerAll(){this.__refs.forEach((e=>a(this,e)))}unregisterAll(){this.__refs.forEach((e=>function(e,t){const n=o(t),r=(0,i.isArray)(e[n])?e[n]:[e[n]];e.__eventsManager.unbindRef(t,r)}(this,e)))}}},"./node_modules/@studiometa/js-toolkit/Base/managers/ResponsiveOptionsManager.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{ResponsiveOptionsManager:()=>o});var r=n("./node_modules/@studiometa/js-toolkit/Base/managers/OptionsManager.js"),i=n("./node_modules/@studiometa/js-toolkit/services/resize.js"),s=n("./node_modules/@studiometa/js-toolkit/utils/is.js");class o extends r.OptionsManager{get(e,t){return t.responsive?super.get(function(e,t){const{breakpoint:n}=(0,i.default)().props();if(!n)return t;let s=t;const o=(0,r.__getPropertyName)(t),a=new RegExp(`${o}:(.+)$`);return Object.keys(e.__element.dataset).filter((e=>a.test(e))).forEach((e=>{const[,t]=e.match(a);t.split(":").includes(n)&&(s=e.replace(/^option/,""))})),s}(this,e),t):super.get(e,t)}set(e,t,n){n.responsive?s.isDev&&console.warn(`[${this.__config.name}]`,"Responsive options are read-only."):super.set(e,t,n)}}},"./node_modules/@studiometa/js-toolkit/Base/managers/ServicesManager.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{ServicesManager:()=>f});var r=n("./node_modules/@studiometa/js-toolkit/services/scroll.js"),i=n("./node_modules/@studiometa/js-toolkit/services/resize.js"),s=n("./node_modules/@studiometa/js-toolkit/services/raf.js"),o=n("./node_modules/@studiometa/js-toolkit/services/pointer.js"),a=n("./node_modules/@studiometa/js-toolkit/services/key.js"),l=n("./node_modules/@studiometa/js-toolkit/services/load.js"),c=n("./node_modules/@studiometa/js-toolkit/Base/managers/AbstractManager.js"),u=n("./node_modules/@studiometa/js-toolkit/utils/is.js"),d=n("./node_modules/@studiometa/js-toolkit/utils/noop.js");const h={scrolled:r.default,resized:i.default,ticked:s.default,moved:o.default,keyed:a.default,loaded:l.default},p=Object.keys(h);class f extends c.AbstractManager{__customServices={};get __services(){return{...this.__customServices,...h}}has(e){if(!(0,u.isFunction)(this.__base[e])&&!this.__base.__hasEvent(e)||!this.__services[e])return!1;const{has:t}=this.__services[e]();return t(this.__base.$id)}get(e){return this.__services[e]().props()}enable(e){if(this.has(e))return this.disable.bind(this,e);if(!(0,u.isFunction)(this.__base[e])&&!this.__base.__hasEvent(e)||!this.__services[e])return d.noop;return this.__services[e]().add(this.__base.$id,((...t)=>this.__base.__callMethod(e,...t))),this.disable.bind(this,e)}enableAll(){return Object.keys(this.__services).map((e=>this.enable(e)))}disableAll(){Object.keys(this.__services).forEach((e=>{this.disable(e)}))}disable(e){if(!this.__services[e])return;const{remove:t}=this.__services[e]();t(this.__base.$id)}toggle(e,t){(0,u.isDefined)(t)?(t&&!this.has(e)&&this.enable(e),!t&&this.has(e)&&this.disable(e)):this.has(e)?this.disable(e):this.enable(e)}register(e,t){this.__customServices[e]=t,this.__base.__addEmits(e)}unregister(e){if(p.includes(e)){if(u.isDev)throw new Error(`[ServicesManager] The \`${e}\` core service can not be unregistered.`)}else this.__base.__removeEmits(e),delete this.__customServices[e]}}},"./node_modules/@studiometa/js-toolkit/Base/utils.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{eventIsDefinedInConfig:()=>s,eventIsNative:()=>o,getComponentElements:()=>i,getEventTarget:()=>a});var r=n("./node_modules/@studiometa/js-toolkit/utils/is.js");function i(e,t=document){const n=`[data-component="${e}"]`;let r=[];try{r=Array.from(t.querySelectorAll(n))}catch{}return 0===r.length&&(r=Array.from(t.querySelectorAll(e))),r}function s(e,t){return(0,r.isArray)(t.emits)&&t.emits.includes(e)}function o(e,t){return(0,r.isDefined)(t[`on${e}`])}function a(e,t,n){return s(t,n)?e:o(t,e.$el)?e.$el:(r.isDev&&console.warn(`[${n.name}]`,`The "${t}" event is missing from the configuration and is not a native`,`event for the root element of type \`${e.$el.constructor.name}\`.`),e)}},"./node_modules/@studiometa/js-toolkit/decorators/withBreakpointObserver.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{withBreakpointObserver:()=>l});var r=n("./node_modules/@studiometa/js-toolkit/services/resize.js"),i=n("./node_modules/@studiometa/js-toolkit/utils/is.js");function s(e,t=(0,r.default)().props().breakpoint){const{activeBreakpoints:n,inactiveBreakpoints:i}=e.$options,s=n&&n.split(" ").includes(t),o=i&&i.split(" ").includes(t);return n&&s||i&&!o?"$mount":"$destroy"}function o(e){const{activeBreakpoints:t,inactiveBreakpoints:n}=e.$options;return Boolean(t||n)}function a(e,t){i.isDev&&function(e){const{activeBreakpoints:t,inactiveBreakpoints:n,name:r}=e.$options;if(t&&n)throw new Error(`[${r}] Incorrect configuration: the \`activeBreakpoints\` and \`inactiveBreakpoints\` are not compatible.`)}(t);const{add:n,has:o}=(0,r.default)();o(e)||n(e,(({breakpoint:e})=>{const n=s(t,e);"$destroy"===n&&t.$isMounted?t[n]():"$mount"!==n||t.$isMounted||setTimeout((()=>t[n]()),0)}))}function l(e){class t extends e{static config={...e.config,name:`${e.config.name}WithBreakpointObserver`,options:{...e.config?.options||{},activeBreakpoints:String,inactiveBreakpoints:String}};constructor(e){super(e);const{remove:t,props:n}=(0,r.default)(),{name:s}=this.$options;if(!n().breakpoint){if(i.isDev)throw new Error(`[${s}] The \`BreakpointObserver\` class requires breakpoints to be defined.`);return}const l=`BreakpointObserver-${this.$id}`;new MutationObserver((([e])=>{if("attributes"===e.type&&("data-options"===e.attributeName||e.attributeName.startsWith("data-option-"))){if(!o(this))return this.$mount(),void t(l);a(l,this)}})).observe(this.$el,{attributes:!0}),o(this)&&a(l,this)}$mount(){if(!o(this))return super.$mount();return"$mount"===s(this)?super.$mount():this}}return t}},"./node_modules/@studiometa/js-toolkit/decorators/withDrag.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{withDrag:()=>i});var r=n("./node_modules/@studiometa/js-toolkit/services/drag.js");function i(e,{target:t=(e=>e.$el),...n}={}){class i extends e{static config={name:`${e.config.name}WithDrag`,emits:["dragged"]};constructor(e){super(e),this.$on("mounted",(()=>{this.$services.register("dragged",r.default.bind(void 0,t.call(this,this),n)),this.$services.enable("dragged")})),this.$on("destroyed",(()=>{this.$services.disable("dragged"),this.$services.unregister("dragged")}))}}return i}},"./node_modules/@studiometa/js-toolkit/decorators/withFreezedOptions.js":(e,t,n)=>{"use strict";function r(e){return class extends e{__freezedOptions;get $options(){return this.__freezedOptions||Object.defineProperty(this,"__freezedOptions",{value:Object.freeze({...super.$options}),enumerable:!1,configurable:!0}),this.__freezedOptions}}}n.r(t),n.d(t,{withFreezedOptions:()=>r})},"./node_modules/@studiometa/js-toolkit/decorators/withIntersectionObserver.js":(e,t,n)=>{"use strict";function r(e){return[...new Array(e+1)].map(((t,n)=>n/e))}function i(e,t={threshold:r(100)}){class n extends e{static config={...e.config,name:`${e.config.name}WithIntersectionObserver`,options:{...e.config?.options||{},intersectionObserver:Object},emits:["intersected"]};$observer;constructor(e){super(e),this.$observer=new IntersectionObserver((e=>{this.__callMethod("intersected",e)}),{...t,...this.$options.intersectionObserver}),this.$on("mounted",(()=>{this.$observer.observe(this.$el)})),this.$on("destroyed",(()=>{this.$observer.unobserve(this.$el)}))}}return n}n.r(t),n.d(t,{withIntersectionObserver:()=>i})},"./node_modules/@studiometa/js-toolkit/decorators/withMountWhenInView.js":(e,t,n)=>{"use strict";function r(e,t={threshold:[0,1]}){class n extends e{static config={...e.config,name:`${e.config.name}WithMountWhenInView`,options:{...e.config?.options||{},intersectionObserver:Object}};__isVisible=!1;__observer;constructor(e){super(e),this.__observer=new IntersectionObserver((e=>{const t=e.reduce(((e,t)=>e||t.isIntersecting),!1);this.__isVisible!==t&&(this.__isVisible=t,t?this.$mount():setTimeout((()=>this.$destroy())))}),{...t,...this.$options.intersectionObserver}),this.__observer.observe(this.$el),this.$on("terminated",(()=>{this.__observer.disconnect()}))}$mount(){return this.__isVisible&&super.$mount(),this}}return n}n.r(t),n.d(t,{withMountWhenInView:()=>r})},"./node_modules/@studiometa/js-toolkit/decorators/withResponsiveOptions.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{withResponsiveOptions:()=>i});var r=n("./node_modules/@studiometa/js-toolkit/Base/managers/ResponsiveOptionsManager.js");function i(e){return class extends e{get __managers(){return{...super.__managers,OptionsManager:r.ResponsiveOptionsManager}}}}},"./node_modules/@studiometa/js-toolkit/decorators/withScrolledInView.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{withScrolledInView:()=>h});var r=n("./node_modules/@studiometa/js-toolkit/decorators/withMountWhenInView.js"),i=n("./node_modules/@studiometa/js-toolkit/utils/scheduler.js"),s=n("./node_modules/@studiometa/js-toolkit/utils/math/clamp.js"),o=n("./node_modules/@studiometa/js-toolkit/utils/math/damp.js"),a=n("./node_modules/@studiometa/js-toolkit/utils/math/clamp01.js"),l=n("./node_modules/@studiometa/js-toolkit/utils/is.js"),c=n("./node_modules/@studiometa/js-toolkit/utils/css/getOffsetSizes.js");const u=(0,i.useScheduler)(["update","render"]);function d(e,t,n,r="x"){e.current[r]=(0,s.default)("x"===r?window.pageXOffset:window.pageYOffset,e.start[r],e.end[r]),e.dampedCurrent[r]=(0,o.default)(e.current[r],e.dampedCurrent[r],t,n),e.progress[r]=(0,a.default)((e.current[r]-e.start[r])/(e.end[r]-e.start[r])),e.dampedProgress[r]=(0,a.default)((e.dampedCurrent[r]-e.start[r])/(e.end[r]-e.start[r]))}function h(e,t={}){class n extends((0,r.withMountWhenInView)(e,t)){static config={name:`${e.config.name}WithMountWhenInView`,emits:["scrolledInView"],options:{dampFactor:{type:Number,default:.1},dampPrecision:{type:Number,default:.001}}};__props={start:{x:0,y:0},end:{x:0,y:0},current:{x:0,y:0},dampedCurrent:{x:0,y:0},progress:{x:0,y:0},dampedProgress:{x:0,y:0}};dampFactor=null;dampPrecision=null;constructor(e){super(e);const t=()=>{u.update((()=>{const e=this.__callMethod("scrolledInView",this.__props);(0,l.isFunction)(e)&&u.render((()=>{e(this.__props)}))}))},n={handleEvent(e){n[e.type](e.detail[0])},resized:()=>{this.__setProps()},scrolled:e=>{(!this.$services.has("ticked")&&e.changed.y||e.changed.x)&&this.$services.enable("ticked")},ticked:()=>{const e=this.dampFactor??this.$options.dampFactor,n=this.dampFactor??this.$options.dampFactor;d(this.__props,e,n,"x"),d(this.__props,e,n,"y"),this.__props.dampedCurrent.x===this.__props.current.x&&this.__props.dampedCurrent.y===this.__props.current.y&&this.$services.disable("ticked"),t()}};this.$on("before-mounted",(()=>{this.$on("resized",n),this.$on("scrolled",n),this.$on("ticked",n)})),this.$on("mounted",(()=>{this.__setProps()})),this.$on("destroyed",(()=>{this.$off("resized",n),this.$off("scrolled",n),this.$off("ticked",n),this.__props.dampedCurrent.x=this.__props.current.x,this.__props.dampedCurrent.y=this.__props.current.y,this.__props.dampedProgress.x=this.__props.progress.x,this.__props.dampedProgress.y=this.__props.progress.y,t()}))}mounted(){(0,l.isFunction)(super.mounted)&&super.mounted()}resized(e){(0,l.isFunction)(super.resized)&&super.resized(e)}scrolled(e){(0,l.isFunction)(super.scrolled)&&super.scrolled(e)}ticked(e){(0,l.isFunction)(super.ticked)&&super.ticked(e)}destroyed(){(0,l.isFunction)(super.destroyed)&&super.destroyed()}__setProps(){const e=t.useOffsetSizes?(0,c.default)(this.$el):this.$el.getBoundingClientRect(),n=e.y+window.pageYOffset+e.height,r=n-window.innerHeight-e.height,i=(0,s.default)(window.pageYOffset,r,n),l=(0,a.default)((i-r)/(n-r)),u=e.x+window.pageXOffset+e.width,d=u-window.innerWidth-e.width,h=(0,s.default)(window.pageXOffset,d,u),p=(0,a.default)((h-d)/(u-d));this.__props.start.x=d,this.__props.start.y=r,this.__props.end.x=u,this.__props.end.y=n,this.__props.current.x=h,this.__props.current.y=i,this.__props.dampedCurrent.x=(0,o.default)(h,this.__props.dampedCurrent.x,this.dampFactor,this.dampPrecision),this.__props.dampedCurrent.y=(0,o.default)(i,this.__props.dampedCurrent.y,this.dampFactor,this.dampPrecision),this.__props.progress.x=p,this.__props.progress.y=l,this.__props.dampedProgress.x=(0,a.default)((this.__props.dampedCurrent.x-d)/(u-d)),this.__props.dampedProgress.y=(0,a.default)((this.__props.dampedCurrent.y-r)/(n-r))}}return n}},"./node_modules/@studiometa/js-toolkit/helpers/getInstanceFromElement.js":(e,t,n)=>{"use strict";function r(e,t){return e.__base__&&e.__base__.has(t)?e.__base__.get(t):null}n.r(t),n.d(t,{default:()=>r})},"./node_modules/@studiometa/js-toolkit/services/drag.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>y});var r=n("./node_modules/@studiometa/js-toolkit/services/service.js"),i=n("./node_modules/@studiometa/js-toolkit/services/raf.js"),s=n("./node_modules/@studiometa/js-toolkit/utils/math/inertiaFinalValue.js"),o=n("./node_modules/@studiometa/js-toolkit/utils/is.js");const a="start",l="drag",c="drop",u="inertia",d="stop";let h=0;const p=["pointerdown","pointerup","touchend"],f={passive:!0};function m(e){const t=(0,o.isDefined)(e.touches)?e.touches[0]:e;return{x:t.clientX,y:t.clientY}}function g(e,{dampFactor:t=.85,dragTreshold:n=10}={}){h+=1;const o=`drag-${h}`;let g;function v(){S.isGrabbing||(S.x+=S.delta.x,S.y+=S.delta.y,S.distance.x=S.x-S.origin.x,S.distance.y=S.y-S.origin.y,S.delta.x*=t,S.delta.y*=t,S.mode!==u&&(S.mode=u),x(S),Math.abs(S.delta.x)<.1&&Math.abs(S.delta.y)<.1&&((0,i.default)().remove(o),S.isGrabbing=!1,S.hasInertia=!1,S.mode=d,x(S)))}function y(e){switch(e.type){case"dragstart":e.preventDefault();break;case"click":(Math.abs(S.distance.x)>n||Math.abs(S.distance.y)>n)&&(e.stopImmediatePropagation(),e.stopPropagation(),e.preventDefault());break;case"pointerup":case"touchend":document.removeEventListener("touchmove",y),document.removeEventListener("mousemove",y),S.isGrabbing=!1,S.mode=c,S.hasInertia=!0,S.final.x=(0,s.default)(S.x,S.delta.x,t),S.final.y=(0,s.default)(S.y,S.delta.y,t),x(S),setTimeout((()=>{const e=(0,i.default)();e.remove(o),e.add(o,v)}),0);break;case"touchmove":case"mousemove":!function(e){if(S.isGrabbing){const t=m(e);if(S.x=t.x,S.y=t.y,g){const e=m(g);S.delta.x=t.x-e.x,S.delta.y=t.y-e.y}S.final.x=t.x,S.final.y=t.y,S.distance.x=S.x-S.origin.x,S.distance.y=S.y-S.origin.y,S.mode!==l&&(S.mode=l),x(S),g=e}}(e);break;default:0===e.button&&(r=e.x,u=e.y,S.isGrabbing||(S.x=r,S.y=u,S.origin.x=r,S.origin.y=u,S.delta.x=0,S.delta.y=0,S.distance.x=0,S.distance.y=0,S.final.x=r,S.final.y=u,S.mode=a,S.isGrabbing=!0,x(S),document.addEventListener("touchmove",y,f),document.addEventListener("mousemove",y,f)))}var r,u}const{add:b,remove:w,has:_,trigger:x,props:S}=(0,r.useService)({props:{target:e,mode:void 0,isGrabbing:!1,hasInertia:!1,x:0,y:0,delta:{x:0,y:0},origin:{x:0,y:0},distance:{x:0,y:0},final:{x:0,y:0}},init(){p.forEach((t=>{e.addEventListener(t,y,f)})),e.addEventListener("dragstart",y,{capture:!0}),e.addEventListener("click",y,{capture:!0})},kill(){p.forEach((t=>{e.removeEventListener(t,y)})),e.removeEventListener("dragstart",y),e.removeEventListener("click",y)}});return{add:b,remove:w,has:_,props:()=>S}}const v=new WeakMap;function y(e,t){return v.has(e)||v.set(e,g(e,t)),v.get(e)}},"./node_modules/@studiometa/js-toolkit/services/key.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>a});var r=n("./node_modules/@studiometa/js-toolkit/services/service.js"),i=n("./node_modules/@studiometa/js-toolkit/utils/keyCodes.js");function s(){let e;function t(t){a(function(t){return l.event=t,Object.entries(i.default).forEach((([e,n])=>{l[e]=n===t.keyCode})),e||(l.triggered=0),"keydown"===l.event.type&&"keydown"===e?.type?l.triggered+=1:l.triggered=1,e=l.event,l.direction="keydown"===l.event.type?"down":"up",l.isUp="keyup"===l.event.type,l.isDown="keydown"===l.event.type,l}(t))}const{add:n,remove:s,has:o,trigger:a,props:l}=(0,r.useService)({props:{event:null,triggered:0,isUp:!1,isDown:!1,direction:"none",...Object.fromEntries(Object.keys(i.default).map((e=>[e,!1])))},init(){document.addEventListener("keydown",t),document.addEventListener("keyup",t)},kill(){document.removeEventListener("keydown",t),document.removeEventListener("keyup",t)}});return{add:n,remove:s,has:o,props:()=>l}}let o;function a(){return o||(o=s()),o}},"./node_modules/@studiometa/js-toolkit/services/load.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>s});var r=n("./node_modules/@studiometa/js-toolkit/services/service.js");let i;function s(){return i||(i=function(){function e(){s.time=window.performance.now(),o(s)}const{add:t,remove:n,has:i,props:s,trigger:o}=(0,r.useService)({props:{time:performance.now()},init(){window.addEventListener("load",e)},kill(){window.removeEventListener("load",e)}});return{add:t,remove:n,has:i,props:()=>s}}()),i}},"./node_modules/@studiometa/js-toolkit/services/pointer.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>l});var r=n("./node_modules/@studiometa/js-toolkit/services/service.js");function i(e){return"undefined"!=typeof TouchEvent&&e instanceof TouchEvent}const s=["mousemove","touchmove","mousedown","touchstart","mouseup","touchend"];function o(){function e(e){switch(e.type){case"mouseenter":case"mousemove":case"touchmove":a(function(e){l.event=e;const t=l.y,n=l.x,r=i(e)?e.touches[0]?.clientY:e.clientY;r!==l.y&&(l.y=r);const s=i(e)?e.touches[0]?.clientX:e.clientX;return s!==l.x&&(l.x=s),l.changed.x=l.x!==n,l.changed.y=l.y!==t,l.last.x=n,l.last.y=t,l.delta.x=l.x-n,l.delta.y=l.y-t,l.max.x=window.innerWidth,l.max.y=window.innerHeight,l.progress.x=l.x/l.max.x,l.progress.y=l.y/l.max.y,l}(e));break;case"mousedown":case"touchstart":l.isDown=!0,a(l);break;case"mouseup":case"touchend":l.isDown=!1,a(l)}}const{add:t,remove:n,has:o,trigger:a,props:l}=(0,r.useService)({props:{event:null,isDown:!1,x:window.innerWidth/2,y:window.innerHeight/2,changed:{x:!1,y:!1},last:{x:window.innerWidth/2,y:window.innerHeight/2},delta:{x:0,y:0},progress:{x:.5,y:.5},max:{x:window.innerWidth,y:window.innerHeight}},init(){document.documentElement.addEventListener("mouseenter",e,{once:!0,capture:!0});const t={passive:!0,capture:!0};s.forEach((n=>{document.addEventListener(n,e,t)}))},kill(){s.forEach((t=>{document.removeEventListener(t,e)}))}});return{add:t,remove:n,has:o,props:()=>l}}let a;function l(){return a||(a=o()),a}},"./node_modules/@studiometa/js-toolkit/services/raf.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>u});var r=n("./node_modules/@studiometa/js-toolkit/services/service.js"),i=n("./node_modules/@studiometa/js-toolkit/utils/nextFrame.js"),s=n("./node_modules/@studiometa/js-toolkit/utils/scheduler.js"),o=n("./node_modules/@studiometa/js-toolkit/utils/is.js");const a=(0,s.useScheduler)(["update","render"]);function l(){let e=!1;const t=(0,i.getRaf)();function n(){var r;u.time=performance.now(),r=u,d.forEach((function(e){a.update((function(){const t=e(r);(0,o.isFunction)(t)&&a.render((function(){t(r)}))}))})),e&&t(n)}const{add:s,remove:l,has:c,props:u,callbacks:d}=(0,r.useService)({props:{time:performance.now()},init(){e=!0,t(n)},kill(){e=!1}});return{add:s,remove:l,has:c,props:()=>u}}let c;function u(){return c||(c=l()),c}},"./node_modules/@studiometa/js-toolkit/services/resize.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>u});var r=n("./node_modules/@studiometa/js-toolkit/services/service.js"),i=n("./node_modules/@studiometa/js-toolkit/utils/debounce.js");let s,o,a=[];function l(){return s||(s=document.querySelector("[data-breakpoint]")),s}function c(){const e=(0,i.default)((()=>{o((c.width=window.innerWidth,c.height=window.innerHeight,c.ratio=window.innerWidth/window.innerHeight,c.orientation="square",c.ratio>1&&(c.orientation="landscape"),c.ratio<1&&(c.orientation="portrait"),c))})),{add:t,remove:n,has:s,trigger:o,props:c}=(0,r.useService)({props:{width:window.innerWidth,height:window.innerHeight,ratio:window.innerWidth/window.innerHeight,orientation:"square",get breakpoint(){return l()?window.getComputedStyle(l(),"::before").getPropertyValue("content").replaceAll('"',""):void 0},get breakpoints(){return!l()||a.length||(a=window.getComputedStyle(l(),"::after").getPropertyValue("content").replaceAll('"',"").split(",")),a}},init(){window.addEventListener("resize",e)},kill(){window.removeEventListener("resize",e)}});return{add:t,remove:n,has:s,props:()=>c}}function u(){return o||(o=c()),o}},"./node_modules/@studiometa/js-toolkit/services/scroll.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o});var r=n("./node_modules/@studiometa/js-toolkit/services/service.js"),i=n("./node_modules/@studiometa/js-toolkit/utils/debounce.js");let s;function o(){return s||(s=function(){function e(){const e=l.y,t=l.x;return window.pageYOffset!==l.y&&(l.y=window.pageYOffset),window.pageXOffset!==l.x&&(l.x=window.pageXOffset),l.changed.x=l.x!==t,l.changed.y=l.y!==e,l.last.x=t,l.last.y=e,l.delta.x=l.x-t,l.delta.y=l.y-e,l.max.x=(document.scrollingElement||document.body).scrollWidth-window.innerWidth,l.max.y=(document.scrollingElement||document.body).scrollHeight-window.innerHeight,l.progress.x=0===l.max.x?1:l.x/l.max.x,l.progress.y=0===l.max.y?1:l.y/l.max.y,l.direction.x=l.x>t?"RIGHT":l.x<t?"LEFT":"NONE",l.direction.y=l.y>e?"DOWN":l.y<e?"UP":"NONE",l}const t=(0,i.default)((()=>{c(e())}),100);function n(){c(e()),t()}const{add:s,remove:o,has:a,props:l,trigger:c}=(0,r.useService)({props:{x:window.pageXOffset,y:window.pageYOffset,changed:{x:!1,y:!1},last:{x:window.pageXOffset,y:window.pageYOffset},delta:{x:0,y:0},max:{x:(document.scrollingElement||document.body).scrollWidth-window.innerWidth,y:(document.scrollingElement||document.body).scrollHeight-window.innerHeight},progress:{x:0,y:0},direction:{x:"NONE",y:"NONE"}},init(){document.addEventListener("scroll",n,{passive:!0,capture:!0})},kill(){document.removeEventListener("scroll",n)}});return{add:s,remove:o,has:a,props:()=>l}}()),s}},"./node_modules/@studiometa/js-toolkit/services/service.js":(e,t,n)=>{"use strict";function r(e){const t=new Map;let n=!1;const{init:r,kill:i,props:s}=e;function o(e){return t.has(e)}return{callbacks:t,props:s,add:function(e,i){o(e)?console.warn(`The key \`${e}\` has already been added.`):(0!==t.size||n||(r(),n=!0),t.set(e,i))},remove:function(e){t.delete(e),0===t.size&&n&&(i(),n=!1)},has:o,get:function(e){return t.get(e)},trigger:function(e){t.forEach((function(t){t(e)}))}}}n.r(t),n.d(t,{useService:()=>r})},"./node_modules/@studiometa/js-toolkit/utils/css/classes.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{add:()=>o,remove:()=>a,toggle:()=>l});var r=n("./node_modules/@studiometa/js-toolkit/utils/is.js"),i=n("./node_modules/@studiometa/js-toolkit/utils/css/utils.js");function s(e,t,n,s){if(!e||!t)return;const o=(0,r.isArray)(t)?t:t.split(" ").filter((e=>e));"toggle"!==n?(0,i.eachElements)(e,(e=>e.classList[n](...o))):o.forEach((t=>(0,i.eachElements)(e,(e=>e.classList[n](t,s)))))}function o(e,t){s(e,t,"add")}function a(e,t){s(e,t,"remove")}function l(e,t,n){s(e,t,"toggle",n)}},"./node_modules/@studiometa/js-toolkit/utils/css/getOffsetSizes.js":(e,t,n)=>{"use strict";function r(e){let t=e,n=-window.pageXOffset,r=-window.pageYOffset;for(;t;)n+=t.offsetLeft,r+=t.offsetTop,t=t.offsetParent;const i=e.offsetWidth,s=e.offsetWidth;return{x:n,y:r,width:i,height:s,top:r,right:i+n,bottom:s+r,left:n}}n.r(t),n.d(t,{default:()=>r})},"./node_modules/@studiometa/js-toolkit/utils/css/styles.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{add:()=>o,remove:()=>a});var r=n("./node_modules/@studiometa/js-toolkit/utils/is.js"),i=n("./node_modules/@studiometa/js-toolkit/utils/css/utils.js");function s(e,t,n="add"){e&&t&&(0,r.isObject)(t)&&(0,i.eachElements)(e,(e=>{Object.entries(t).forEach((([t,r])=>{e.style[t]="add"===n?r:""}))}))}function o(e,t){s(e,t)}function a(e,t){s(e,t,"remove")}},"./node_modules/@studiometa/js-toolkit/utils/css/transform.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{TRANSFORM_PROPS:()=>s,default:()=>o});var r=n("./node_modules/@studiometa/js-toolkit/utils/is.js"),i=n("./node_modules/@studiometa/js-toolkit/utils/css/utils.js");const s=["x","y","z","rotate","rotateX","rotateY","rotateZ","scale","scaleX","scaleY","scaleZ","skew","skewX","skewY"];function o(e,t){let n="";return((0,r.isDefined)(t.x)||(0,r.isDefined)(t.y)||(0,r.isDefined)(t.z))&&(n+=`translate3d(${t.x??0}px, ${t.y??0}px, ${t.z??0}px) `),(0,r.isDefined)(t.rotate)?n+=`rotate(${t.rotate}deg) `:((0,r.isDefined)(t.rotateX)&&(n+=`rotateX(${t.rotateX}deg) `),(0,r.isDefined)(t.rotateY)&&(n+=`rotateY(${t.rotateY}deg) `),(0,r.isDefined)(t.rotateZ)&&(n+=`rotateZ(${t.rotateZ}deg) `)),(0,r.isDefined)(t.scale)?n+=`scale(${t.scale}) `:((0,r.isDefined)(t.scaleX)&&(n+=`scaleX(${t.scaleX}) `),(0,r.isDefined)(t.scaleY)&&(n+=`scaleY(${t.scaleY}) `),(0,r.isDefined)(t.scaleZ)&&(n+=`scaleZ(${t.scaleZ}) `)),(0,r.isDefined)(t.skew)?n+=`skew(${t.skew}deg) `:((0,r.isDefined)(t.skewX)&&(n+=`skewX(${t.skewX}deg) `),(0,r.isDefined)(t.skewY)&&(n+=`skewY(${t.skewY}deg) `)),(0,i.eachElements)(e,(e=>{e.style.transform=n})),n}},"./node_modules/@studiometa/js-toolkit/utils/css/utils.js":(e,t,n)=>{"use strict";function r(e,t){return e instanceof Node?[t(e)]:Array.from(e).map(t)}n.r(t),n.d(t,{eachElements:()=>r})},"./node_modules/@studiometa/js-toolkit/utils/debounce.js":(e,t,n)=>{"use strict";function r(e,t=300){let n;return function(...r){clearTimeout(n),n=setTimeout((()=>{e(...r)}),t)}}n.r(t),n.d(t,{default:()=>r})},"./node_modules/@studiometa/js-toolkit/utils/has.js":(e,t,n)=>{"use strict";function r(){return"undefined"!=typeof window}n.r(t),n.d(t,{hasWindow:()=>r})},"./node_modules/@studiometa/js-toolkit/utils/is.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{isArray:()=>u,isBoolean:()=>c,isDefined:()=>s,isDev:()=>r,isFunction:()=>i,isNumber:()=>l,isObject:()=>a,isString:()=>o});const r="undefined"!=typeof __DEV__&&__DEV__,i=e=>"function"==typeof e,s=e=>void 0!==e,o=e=>"string"==typeof e,a=e=>"object"==typeof e&&!!e&&"[object Object]"===e.toString(),l=e=>"number"==typeof e,c=e=>"boolean"==typeof e,u=Array.isArray},"./node_modules/@studiometa/js-toolkit/utils/keyCodes.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>r});var r={ENTER:13,SPACE:32,TAB:9,ESC:27,LEFT:37,UP:38,RIGHT:39,DOWN:40}},"./node_modules/@studiometa/js-toolkit/utils/math/clamp.js":(e,t,n)=>{"use strict";function r(e,t,n){return t<n?e<t?t:e>n?n:e:e<n?n:e>t?t:e}n.r(t),n.d(t,{default:()=>r})},"./node_modules/@studiometa/js-toolkit/utils/math/clamp01.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>i});var r=n("./node_modules/@studiometa/js-toolkit/utils/math/clamp.js");function i(e){return(0,r.default)(e,0,1)}},"./node_modules/@studiometa/js-toolkit/utils/math/createEases.js":(e,t,n)=>{"use strict";function r(e){return t=>1-e(1-t)}function i(e){return t=>0===t?0:1===t?1:t<.5?e(2*t)/2:1-e(2*(1-t))/2}n.r(t),n.d(t,{createEaseInOut:()=>i,createEaseOut:()=>r})},"./node_modules/@studiometa/js-toolkit/utils/math/damp.js":(e,t,n)=>{"use strict";function r(e,t,n=.5,r=.01){return Math.abs(e-t)<r?e:t+(e-t)*n}n.r(t),n.d(t,{default:()=>r})},"./node_modules/@studiometa/js-toolkit/utils/math/ease.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{easeInCirc:()=>b,easeInCubic:()=>a,easeInExpo:()=>x,easeInOutCirc:()=>_,easeInOutCubic:()=>c,easeInOutExpo:()=>k,easeInOutQuad:()=>o,easeInOutQuart:()=>h,easeInOutQuint:()=>m,easeInOutSine:()=>y,easeInQuad:()=>i,easeInQuart:()=>u,easeInQuint:()=>p,easeInSine:()=>g,easeOutCirc:()=>w,easeOutCubic:()=>l,easeOutExpo:()=>S,easeOutQuad:()=>s,easeOutQuart:()=>d,easeOutQuint:()=>f,easeOutSine:()=>v});var r=n("./node_modules/@studiometa/js-toolkit/utils/math/createEases.js");function i(e){return e**2}const s=(0,r.createEaseOut)(i),o=(0,r.createEaseInOut)(i);function a(e){return e**3}const l=(0,r.createEaseOut)(a),c=(0,r.createEaseInOut)(a);function u(e){return e**4}const d=(0,r.createEaseOut)(u),h=(0,r.createEaseInOut)(u);function p(e){return e**5}const f=(0,r.createEaseOut)(p),m=(0,r.createEaseInOut)(p);function g(e){return 1===e?1:1-Math.cos(e*Math.PI/2)}const v=(0,r.createEaseOut)(g),y=(0,r.createEaseInOut)(g);function b(e){return-(Math.sqrt(1-e*e)-1)}const w=(0,r.createEaseOut)(b),_=(0,r.createEaseInOut)(b);function x(e){return 2**(10*(e-1))}const S=(0,r.createEaseOut)(x),k=(0,r.createEaseInOut)(x)},"./node_modules/@studiometa/js-toolkit/utils/math/inertiaFinalValue.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>i});var r=n("./node_modules/@studiometa/js-toolkit/utils/math/clamp.js");function i(e,t,n=.85){n=(0,r.default)(n,1e-5,.99999);let i=t,s=e;for(;Math.abs(i)>.1;)s+=i,i*=n;return s}},"./node_modules/@studiometa/js-toolkit/utils/math/lerp.js":(e,t,n)=>{"use strict";function r(e,t,n){return(1-n)*e+n*t}n.r(t),n.d(t,{default:()=>r})},"./node_modules/@studiometa/js-toolkit/utils/math/map.js":(e,t,n)=>{"use strict";function r(e,t,n,r,i){return(e-t)*(i-r)/(n-t)+r}n.r(t),n.d(t,{default:()=>r})},"./node_modules/@studiometa/js-toolkit/utils/nextFrame.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{getCancelRaf:()=>o,getRaf:()=>s,nextFrame:()=>a});var r=n("./node_modules/@studiometa/js-toolkit/utils/is.js"),i=n("./node_modules/@studiometa/js-toolkit/utils/has.js");function s(){return(0,i.hasWindow)()&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):setTimeout}function o(){return(0,i.hasWindow)()&&window.cancelAnimationFrame?window.cancelAnimationFrame.bind(window):clearTimeout}function a(e){return new Promise((t=>{s()((()=>t((0,r.isFunction)(e)&&e())))}))}},"./node_modules/@studiometa/js-toolkit/utils/noop.js":(e,t,n)=>{"use strict";function r(){}function i(e){return e}n.r(t),n.d(t,{noop:()=>r,noopValue:()=>i})},"./node_modules/@studiometa/js-toolkit/utils/object/getAllProperties.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>i});var r=n("./node_modules/@studiometa/js-toolkit/utils/is.js");function i(e,t=[],n=null){const s=Object.getPrototypeOf(e);if(s===Object.prototype||null===s)return t;let o=Object.getOwnPropertyNames(s);return(0,r.isFunction)(n)&&(o=o.filter((e=>n(e,s)))),o=o.map((e=>[e,s])).reduce(((e,t)=>[...e,t]),t),i(s,o,n)}},"./node_modules/@studiometa/js-toolkit/utils/scheduler.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{domScheduler:()=>o,useScheduler:()=>s});const r=new Map,i=["read","write","afterWrite"];function s(e=i){const t=e.join("-");if(r.has(t))return r.get(t);const n=function(e){const t={},n={};let r=!1;const i=Promise.resolve();function s(){e.forEach((function(e){!function(e){let t;for(;t=e.shift();)t()}(t[e])})),r=!1,e.reduce(((e,n)=>e+t[n].length),0)>0&&o()}function o(){r||(r=!0,i.then(s))}return e.forEach((e=>{t[e]=[],n[e]=function(n){t[e].push(n),o()}})),n}(e);return r.set(t,n),n}const o=s(i)},"./node_modules/@studiometa/js-toolkit/utils/tween.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{normalizeEase:()=>d,tween:()=>h});var r=n("./node_modules/@motionone/easing/dist/cubic-bezier.es.js"),i=n("./node_modules/@studiometa/js-toolkit/utils/math/clamp01.js"),s=n("./node_modules/@studiometa/js-toolkit/utils/math/map.js"),o=n("./node_modules/@studiometa/js-toolkit/utils/math/lerp.js"),a=n("./node_modules/@studiometa/js-toolkit/utils/is.js"),l=n("./node_modules/@studiometa/js-toolkit/utils/noop.js"),c=n("./node_modules/@studiometa/js-toolkit/services/raf.js");let u=0;function d(e){return(0,a.isDefined)(e)?(0,a.isArray)(e)?(0,r.cubicBezier)(...e):e:l.noopValue}function h(e,t={}){const n=(0,c.default)();let r=0,a=0;const h=d(t.easing);let p=t.duration??1;p*=1e3;let f=performance.now(),m=f+p;const g=`tw-${u}`;u+=1;const{onStart:v=l.noop,onProgress:y=l.noop,onFinish:b=l.noop}=t;let w=!1;function _(){w=!1,n.remove(g)}function x(t){return void 0===t?a:(r=t,a=h(r),Math.abs(1-a)<1e-4&&(r=1,a=1),e(a),y(r,a),1===a&&(_(),requestAnimationFrame((()=>b(r,a)))),r)}function S(e){w?x((0,i.default)((0,s.default)(e.time,f,m,0,1))):n.remove(g)}return{start:function(){v(),f=performance.now(),m=f+p,r=0,a=0,w=!0,n.add(g,S)},finish:()=>x(1),pause:_,play:function(){w||(f=performance.now()-(0,o.default)(0,p,r),m=f+p,w=!0,n.add(g,S))},progress:x}}}},t={};function n(r){var i=t[r];if(void 0!==i)return i.exports;var s=t[r]={id:r,loaded:!1,exports:{}};return e[r].call(s.exports,s,s.exports,n),s.loaded=!0,s.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.nmd=e=>(e.paths=[],e.children||(e.children=[]),e),(()=>{"use strict";n.r({});var e=n("./app/containers/AppEvents.js"),t=n("./node_modules/gsap/index.js"),r=n("./node_modules/@studiometa/js-toolkit/helpers/getInstanceFromElement.js"),i=n("./app/components/Cursor.js"),s=n("./app/pages/Home.js"),o=n("./app/pages/About.js"),a=n("./app/pages/Projects.js"),l=n("./app/pages/Ui.js"),c=n("./app/components/ScribbleLink.js"),u=n("./app/components/OverlayTransition.js"),d=n("./app/components/Parallax.js"),h=n("./app/components/Title.js"),p=n("./app/pages/Project.js"),f=n("./app/components/Paragraph.js"),m=n("./app/components/Image.js"),g=n("./app/utils/detector.js"),v=n("./node_modules/gsap/CustomEase.js"),y=n("./app/components/Divider.js"),b=n("./app/components/Navigation.js"),w=n("./node_modules/@unseenco/taxi/src/taxi.js"),_=n("./app/renderers/DefaultRenderer.js"),x=n("./app/transitions/DefaultTransition.js"),S=n("./app/transitions/HomeTransition.js"),k=n("./app/renderers/HomeRenderer.js");n("./app/utils/dom.js");t.default.registerPlugin(v.default);class j extends e.default{static config={name:"App",components:{...!(0,g.isTouchDevice)()&&{Cursor:i.default},Navigation:b.default,Title:h.default,Paragraph:f.default,Image:m.default,Parallax:d.default,Divider:y.default,...!(0,g.isTouchDevice)()&&{ScribbleLink:c.default},Home:s.default,Projects:a.default,Project:p.default,About:o.default,Ui:l.default},refs:[...e.default.config.refs,"pageContainer"]};navigationInstance=null;currentPageInstance=null;mounted(){super.mounted(),this.setupTaxi(),this.removeAppOverlay(),this.setNavigationInstance(),this.setCurrentPageInstance(),this.setupListeners(),this.onResize()}setupTaxi(){this.taxi=new w.Core({bypassCache:!0,renderers:{default:_.default,home:k.default},transitions:{default:x.default,toHome:S.default}}),this.taxi.addRoute(".*","/","toHome")}setupListeners(){window.addEventListener("resize",(()=>this.onResize())),this.taxi.on("NAVIGATE_OUT",this.onTaxiNavigateOut.bind(this)),this.taxi.on("NAVIGATE_IN",this.onTaxiNavigateIn.bind(this)),this.taxi.on("NAVIGATE_END",this.onTaxiNavigateEnd.bind(this))}onResize(){document.documentElement.style.setProperty("--vh",.01*window.innerHeight+"px"),document.documentElement.style.setProperty("--vw",.01*window.innerWidth+"px")}onTaxiNavigateOut(){this.cursor&&this.cursor.removeStates()}onTaxiNavigateIn(){window.lenis.stop(),this.updateAll()}onTaxiNavigateEnd(){window.lenis.start()}ticked({time:e}){window.lenis.raf(e)}updateAll(){this.$update(),this.setCurrentPageInstance(),this.setAppColor()}removeAppOverlay(){const e=document.getElementById("appOverlay");e&&e.remove()}setNavigationInstance(){[this.navigationInstance]=this.$children.Navigation}setCurrentPageInstance(){const e=document.getElementById("page"),t=e.getAttribute("data-component");this.currentPageInstance=(0,r.default)(e,j.config.components[t])}setAppColor(){const e=this.currentPageInstance.$el.classList.contains("is-dark"),t=document.getElementById("app");t.classList.remove("is-dark","is-light"),t.classList.add(e?"is-dark":"is-light")}}const[C]=u.default.$factory("Preloader"),[E]=j.$factory("App"),T=new Promise((e=>{window.addEventListener("load",e),window.onbeforeunload=function(){window.scrollTo(0,0)}}));Promise.all([T,C.animateIn()]).then((async()=>{await C.animateOut()}))})(),(()=>{"use strict";n.r({})})(),(()=>{"use strict";var e=n("./node_modules/webpack-dev-server/node_modules/strip-ansi/index.js"),t=n("./node_modules/webpack-dev-server/client/socket.js"),r=n("./node_modules/webpack-dev-server/client/overlay.js"),i=n("./node_modules/webpack-dev-server/client/utils/log.js"),s=i.log,o=i.setLogLevel,a=n("./node_modules/webpack-dev-server/client/utils/sendMessage.js"),l=n("./node_modules/webpack-dev-server/client/utils/reloadApp.js"),c=n("./node_modules/webpack-dev-server/client/utils/createSocketUrl.js"),u={isUnloading:!1,currentHash:""},d={hot:!1,hotReload:!0,liveReload:!1,initial:!0,useWarningOverlay:!1,useErrorOverlay:!1,useProgress:!1},h=c("?http://0.0.0.0:8080");if(self.addEventListener("beforeunload",(function(){u.isUnloading=!0})),"undefined"!=typeof window){var p=window.location.search.toLowerCase();d.hotReload=-1===p.indexOf("hotreload=false")}t(h,{hot:function(){d.hot=!0,s.info("[WDS] Hot Module Replacement enabled.")},liveReload:function(){d.liveReload=!0,s.info("[WDS] Live Reloading enabled.")},invalid:function(){s.info("[WDS] App updated. Recompiling..."),(d.useWarningOverlay||d.useErrorOverlay)&&r.clear(),a("Invalid")},hash:function(e){u.currentHash=e},"still-ok":function(){s.info("[WDS] Nothing changed."),(d.useWarningOverlay||d.useErrorOverlay)&&r.clear(),a("StillOk")},"log-level":function(e){var t=n("./node_modules/webpack/hot sync ^\\.\\/log$");-1!==t.keys().indexOf("./log")&&t("./log").setLogLevel(e),o(e)},overlay:function(e){"undefined"!=typeof document&&("boolean"==typeof e?(d.useWarningOverlay=!1,d.useErrorOverlay=e):e&&(d.useWarningOverlay=e.warnings,d.useErrorOverlay=e.errors))},progress:function(e){"undefined"!=typeof document&&(d.useProgress=e)},"progress-update":function(e){d.useProgress&&s.info("[WDS] ".concat(e.percent,"% - ").concat(e.msg,".")),a("Progress",e)},ok:function(){if(a("Ok"),(d.useWarningOverlay||d.useErrorOverlay)&&r.clear(),d.initial)return d.initial=!1;l(d,u)},"content-changed":function(){s.info("[WDS] Content base changed. Reloading..."),self.location.reload()},warnings:function(t){s.warn("[WDS] Warnings while compiling.");var n=t.map((function(t){return e(t)}));a("Warnings",n);for(var i=0;i<n.length;i++)s.warn(n[i]);if(d.useWarningOverlay&&r.showMessage(t),d.initial)return d.initial=!1;l(d,u)},errors:function(t){s.error("[WDS] Errors while compiling. Reload prevented.");var n=t.map((function(t){return e(t)}));a("Errors",n);for(var i=0;i<n.length;i++)s.error(n[i]);d.useErrorOverlay&&r.showMessage(t),d.initial=!1},error:function(e){s.error(e)},close:function(){s.error("[WDS] Disconnected!"),a("Close")}})})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,