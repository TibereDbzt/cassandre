/*! For license information please see main.js.LICENSE.txt */
(()=>{var e={"./app/components/Cursor.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>l});var r=n("./node_modules/@studiometa/js-toolkit/decorators/withBreakpointObserver.js"),s=n("./node_modules/@studiometa/js-toolkit/Base/index.js"),i=n("./node_modules/@studiometa/js-toolkit/utils/css/classes.js"),o=n("./node_modules/@studiometa/js-toolkit/utils/math/clamp.js"),a=n("./node_modules/@studiometa/js-toolkit/utils/css/getOffsetSizes.js");class l extends((0,r.default)(s.default)){static config={name:"Cursor",refs:["inner"],log:!0};isOnLink=!1;isOnSlider=!1;isListening=!0;position={x:0,y:0};scroll={isActive:!1,deltaY:0};color=null;sticky={isActive:!1,side:null};currentTarget={element:null,box:null};moved({x:e,y:t,last:n,isDown:r}){(0,i.toggle)(this.$el,"is-down",r),this.scroll.isActive=!1,this.scroll.deltaY=0,this.sticky.isActive||(this.position={x:e,y:t},this.setVariables({translateX:this.position.x,translateY:this.position.y,skewX:(0,o.default)(e-n.x,-10,10),skewY:(0,o.default)(t-n.y,-10,10)}))}scrolled({delta:e}){this.currentTarget.element&&(this.scroll.isActive=!0,this.scroll.deltaY+=e.y,this.position.y+this.scroll.deltaY<this.currentTarget.box.top||this.position.y+this.scroll.deltaY>this.currentTarget.box.bottom?(this.onLeaveLink({...this.currentTarget.element}),this.onLeaveSlider({...this.currentTarget.element})):this.sticky.isActive&&this.setSticky(this.currentTarget.element,!0,this.sticky.side))}setColor(e){e?e!==this.color&&((0,i.remove)(this.$el,`is-${this.color}`),this.color=e,(0,i.add)(this.$el,`is-${this.color}`)):((0,i.remove)(this.$el,`is-${this.color}`),this.color=null)}setSticky(e,t,n="center"){if(void 0===t||!1===t)this.sticky.isActive=!1;else{this.sticky.isActive=!0,this.sticky.side=n;const t=(e.querySelector("[data-cursor-target]")??e).getBoundingClientRect(),r=(0,a.default)(this.$refs.inner),s="right"===n?t.width/2+r.width/4:"left"===n?-t.width/2:0,i=t.x+t.width/2-r.width/2+s,o=t.y+t.height/2-r.height/2+6;this.setVariables({translateX:i,translateY:o,skewX:0,skewY:0})}}onEnterLink({target:e}){if(!this.isListening)return;this.isOnLink=!0,this.currentTarget.element=e,this.currentTarget.box=e.getBoundingClientRect();const{cursorColor:t,cursorSticky:n,cursorStickySide:r}=this.currentTarget.element.dataset;this.setColor(t),this.setSticky(e,n,r),(0,i.add)(this.$el,"on-link")}onLeaveLink({target:e}){this.isOnLink=!1,this.currentTarget.element=null,this.currentTarget.box=null,this.setSticky(e,!1),(0,i.remove)(this.$el,"on-link")}onEnterSlider({target:e}){this.isListening&&(this.isOnSlider=!0,this.currentTarget.element=e,this.currentTarget.box=e.getBoundingClientRect(),this.setColor(e),(0,i.add)(this.$el,"on-slider"))}onLeaveSlider({target:e}){this.isOnSlider=!1,this.currentTarget.element=null,this.currentTarget.box=null,(0,i.remove)(this.$el,"on-slider")}setVariables({translateX:e,translateY:t,skewX:n,skewY:r}){this.$el.style.setProperty("--translateX",`${e}px`),this.$el.style.setProperty("--translateY",`${t}px`),this.$el.style.setProperty("--skewX",`${n}deg`),this.$el.style.setProperty("--skewY",`${r}deg`)}disable(){this.isListening=!1,this.onLeaveLink({...this.currentTarget.element}),this.onLeaveSlider({...this.currentTarget.element})}enable(){if(this.isListening=!0,this.isOnSlider&&(this.setColor(target),(0,i.add)(this.$el,"on-slider")),this.isOnLink){const{cursorColor:e,cursorSticky:t,cursorStickySide:n}=this.currentTarget.element.dataset;this.setColor(e),this.setSticky(this.currentTarget.element,t,n),(0,i.add)(this.$el,"on-link")}}set isListening(e){this.isListening=e}}},"./app/components/Footer.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>i});var r=n("./app/containers/AppEvents.js"),s=n("./node_modules/@studiometa/js-toolkit/decorators/withScrolledInView.js");class i extends((0,s.default)(r.default)){static config={...r.default.config,name:"Component",refs:[...r.default.config.refs,"overlay","gradient","wrapper"]};scrolledInView({current:e,start:t}){const n=t.y+this.$el.offsetHeight,r=1-(e.y-t.y)/(n-t.y),s=100*r,i=-100*r;this.$refs.overlay.style.height=`${s}px`,this.$refs.gradient.style.opacity=`${r}`,this.$refs.wrapper.style.transform=`translate3d(0, ${i}px, 0)`}}},"./app/components/Paragraph.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>i});var r=n("./node_modules/@studiometa/js-toolkit/Base/index.js"),s=n("./node_modules/gsap/index.js");class i extends r.default{static config={name:"Paragraph",options:{delay:Number}};animateIn(){s.default.fromTo(this.$el,{y:12,opacity:0},{y:0,opacity:1,duration:1,delay:this.$options.delay,ease:"power3.out",clearProps:"all"})}animateOut(){s.default.fromTo(this.$el,{y:0,opacity:1},{y:-12,opacity:0,duration:.3,clearProps:"all"})}}},"./app/components/Parallax.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>i});var r=n("./node_modules/@studiometa/js-toolkit/decorators/withScrolledInView.js"),s=n("./node_modules/@studiometa/js-toolkit/Base/index.js");class i extends((0,r.default)(s.default)){static config={name:"Parallax",options:{percent:{type:Number,default:10},reverse:{type:Boolean,default:!1}},refs:["image"]};mounted(){this.$refs.image.style.willChange="transform",this.$options.reverse?this.$refs.image.style.top="0":this.$refs.image.style.bottom="0",this.$refs.image.style.height=`${100+this.$options.percent}%`}scrolledInView({dampedProgress:e}){const t=e.y*this.$options.percent*(this.$options.reverse?-1:1);this.$refs.image.style.transform=`translateY(${t}%)`}}},"./app/components/Preloader.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>a});var r=n("./node_modules/@studiometa/js-toolkit/Base/index.js"),s=n("./app/utils/intervalPromise.js"),i=n("./node_modules/gsap/index.js"),o=n("./node_modules/@studiometa/js-toolkit/utils/css/classes.js");class a extends r.default{static config={name:"Preloader",refs:["wrapper","logoFrames[]","name","namePath","nameWord","overlay"],options:{name:{type:String,default:"cassandre"}}};mounted(){this.logoFramesAnimation=null,this.overlay={context:this.$refs.overlay.getContext("2d"),width:window.innerWidth*window.devicePixelRatio,height:window.innerHeight*window.devicePixelRatio},this.$refs.overlay.width=this.overlay.width,this.$refs.overlay.height=this.overlay.height}async animateIn(){return new Promise((e=>{i.default.timeline({onStart:()=>{(0,o.remove)(this.$el,"is-hidden"),i.default.set(this.$refs.logoFrames,{autoAlpha:0});const e=this.$refs.namePath.getTotalLength();i.default.set(this.$refs.namePath,{strokeDasharray:`${e} ${e}`})},onComplete:e}).to(this.$refs.logoFrames,{keyframes:[{autoAlpha:0,duration:0},{autoAlpha:1,duration:0,delay:.05},{autoAlpha:0,duration:0,delay:.05}],stagger:.05,delay:1}).add(this.animateLogoFrames()).set(this.$refs.name,{autoAlpha:1}).call(this.animateName.bind(this),[{lettersInterval:30}]).fromTo(this.$refs.namePath,{strokeDashoffset:this.$refs.namePath.getTotalLength()},{strokeDashoffset:0,duration:.7,ease:"quint.out"},"<+=0.32").set(this.$refs.overlay,{autoAlpha:1})}))}async animateOut(){return new Promise((e=>{i.default.timeline({onComplete:()=>{i.default.set(this.$el,{autoAlpha:0}),e()}}).add(i.default.to(this.overlay,{duration:1,ease:"expo.inOut",onUpdate:this.animateOverlay,onUpdateParams:[this.overlay,this.overlay.height,"#FF6C3C"]})).set(this.$refs.wrapper,{autoAlpha:0}).add(i.default.to(this.overlay,{onStart:()=>{i.default.set(this.$refs.wrapper,{autoAlpha:0})},onComplete:()=>{i.default.set(this.$refs.wrapper,{autoAlpha:1})},duration:1,ease:"expo.inOut",onUpdate:this.animateOverlay,onUpdateParams:[this.overlay,0,"#FF6C3C"]}))}))}async animatePageTransitionIn(){return new Promise((e=>{i.default.timeline({onStart:()=>{i.default.set(this.$refs.name,{autoAlpha:0}),this.logoFramesAnimation=this.animateLogoFrames().repeat(-1)},onComplete:e}).to(this.$el,{autoAlpha:1,duration:.2})}))}async animatePageTransitionOut(){return new Promise((e=>{i.default.timeline({onStart:()=>{this.logoFramesAnimation.pause(),i.default.set(this.$refs.logoFrames,{autoAlpha:0})},onComplete:()=>{this.logoFramesAnimation.kill(),e()}}).to(this.$el,{autoAlpha:0,duration:.4,onComplete:e})}))}async animateName({lettersInterval:e}){return(0,s.intervalPromise)((e=>{this.$refs.nameWord.innerText=this.$options.name.slice(0,e)}),this.$options.name.length,e)}animateLogoFrames(){return this.logoFramesAnimation&&this.logoFramesAnimation.kill(),i.default.to(this.$refs.logoFrames,{onStart:()=>{i.default.set(this.$refs.logoFrames,{autoAlpha:0})},keyframes:[{autoAlpha:0,duration:0},{autoAlpha:1,duration:0,delay:.05},{autoAlpha:0,duration:0,delay:.05}],stagger:.05})}animateOverlay(e,t,n){e.context.clearRect(0,0,e.width,e.height),e.context.save(),e.context.beginPath(),e.context.moveTo(e.width,t),e.context.lineTo(0,t);const r=Math.ceil(e.width/40),s=(1-this.ratio)*e.height,i=window.innerWidth/5*Math.sin(this.ratio*Math.PI);e.context.lineTo(0,s);for(let t=0;t<=r;t++){const n=40*t,r=s-Math.sin(n/e.width*Math.PI)*i;e.context.lineTo(n,r)}e.context.fillStyle=n,e.context.fill(),e.context.restore()}}},"./app/components/SVGReveal.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o});var r=n("./node_modules/@studiometa/js-toolkit/Base/index.js"),s=n("./node_modules/gsap/index.js"),i=n("./app/utils/Svg.js");class o extends r.default{static config={name:"SVGReveal",refs:["svg"],log:!0};shapes=[];drawn=!1;mounted(){this.drawn||(this.shapes=i.default.getShapes(this.$refs.svg).map((e=>e.el)),this.hideShapes())}hideShapes(){s.default.set(this.shapes,{strokeDasharray:(e,t)=>`${t.getTotalLength()} ${t.getTotalLength()}`,strokeDashoffset:(e,t)=>`${t.getTotalLength()}`})}drawStrokes({duration:e=1.3,delay:t=.6,ease:n="power3.out"}={duration:1.3,delay:.6,ease:"power3.out"}){this.drawn=!0,s.default.fromTo(this.shapes,{strokeDashoffset:(e,t)=>`${t.getTotalLength()}`},{strokeDashoffset:0,duration:e,delay:t,ease:n,clearProps:"all"})}}},"./app/components/ScribbleLink.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>l});var r=n("./node_modules/@studiometa/js-toolkit/Base/index.js"),s=n("./app/utils/Svg.js"),i=n("./node_modules/@studiometa/js-toolkit/utils/tween.js"),o=n("./node_modules/@studiometa/js-toolkit/utils/math/map.js"),a=n("./node_modules/@studiometa/js-toolkit/utils/math/ease.js");class l extends r.default{shapes;tweenIn;tweenOut;static config={name:"ScribbleLink",refs:["scribble"]};mounted(){this.shapes=s.default.getShapes(this.$refs.scribble),s.default.setInitialAttributesShapes(this.shapes),this.setupTweens()}onMouseenter(){this.tweenOut.finish(),1===this.tweenIn.progress()&&this.tweenIn.progress(0),this.tweenIn.play()}onMouseleave(){this.tweenIn.finish(),1===this.tweenOut.progress()&&this.tweenOut.progress(0),this.tweenOut.play()}setupTweens(){this.tweenIn=(0,i.tween)((e=>{const t=(0,o.default)(e,0,1,1,0);this.setStrokeDashOffsetShapes(t)}),{duration:.7,easing:a.easeOutQuad}),this.tweenOut=(0,i.tween)((e=>this.setStrokeDashOffsetShapes(-e)),{duration:.3,easing:a.easeOutQuad,onFinish:()=>this.setStrokeDashOffsetShapes(1)}),this.tweenIn.pause(),this.tweenOut.pause()}setStrokeDashOffsetShapes(e){for(const t of this.shapes)t.el.setAttribute("stroke-dashoffset",""+t.length*e)}}},"./app/components/Title.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o});var r=n("./node_modules/@studiometa/js-toolkit/Base/index.js"),s=n("./node_modules/gsap/index.js"),i=n("./node_modules/split-type/dist/index.js");class o extends r.default{static config={name:"Title"};splitText=null;split(){this.$el.style.fontKerning="none",this.splitText=new i.default(this.$el,{types:"words, chars",tagName:"span"})}revert(){this.$el.style.fontKerning="",this.splitText.revert()}animateIn(){this.split(),s.default.fromTo(this.splitText.chars,{yPercent:100},{yPercent:0,duration:.6,ease:"power2.out",stagger:.025,onComplete:()=>{this.revert()}})}animateOut(){this.split(),s.default.to(this.splitText.chars,{yPercent:-100,duration:.3,onComplete:()=>{this.revert()}})}}},"./app/components/Work.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>c});var r=n("./node_modules/@studiometa/js-toolkit/decorators/withScrolledInView.js"),s=n("./node_modules/@studiometa/js-toolkit/decorators/withIntersectionObserver.js"),i=n("./app/containers/AppEvents.js"),o=n("./app/components/SVGReveal.js"),a=n("./node_modules/@studiometa/js-toolkit/utils/css/classes.js"),l=n("./app/components/Title.js"),u=n("./app/components/Paragraph.js");class c extends((0,r.default)((0,s.default)(i.default,{rootMargin:"0px 0px -25% 0px"}))){static config={...i.default.config,name:"Work",refs:[...i.default.config.refs,"cover","scribble"],components:{Title:l.default,Paragraph:u.default,SVGReveal:o.default}};isVisible=!1;intersected([{isIntersecting:e}]){if(e){if(this.isVisible)return;this.isVisible=!0,(0,a.add)(this.$el,"is-visible");for(const e of this.$children.SVGReveal)e.drawStrokes();for(const e of this.$children.Title)e.animateIn();for(const e of this.$children.Paragraph)e.animateIn()}}scrolledInView({progress:e}){this.$refs.cover.style.transform=`translateY(${-100*(e.y-.5)}px) rotate(${5*(e.y-.5)}deg)`,this.$refs.scribble.style.transform=`translateY(${-100*(e.y-.5)}px)`}}},"./app/components/WorkCard.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>a});var r=n("./app/containers/AppEvents.js"),s=n("./node_modules/@studiometa/js-toolkit/decorators/withIntersectionObserver.js"),i=n("./node_modules/@studiometa/js-toolkit/utils/css/classes.js"),o=n("./node_modules/motion/dist/animate.es.js");class a extends((0,s.default)(r.default,{rootMargin:"0px",threshold:[0,.3]})){static config={...r.default.config,name:"WorkCard",refs:[...r.default.config.refs,"nameInners[]"],options:{transitionDelay:{type:Number,default:0}}};isVisible=!1;onMouseenter(){[...this.$refs.nameInners].forEach((e=>{(0,o.animate)(e,{transform:"translate3d(0, -100%, 0)"},{duration:1.4,easing:[.12,.82,0,.99]})}))}onMouseleave(){[...this.$refs.nameInners].forEach((e=>{(0,o.animate)(e,{transform:"translate3d(0, 0, 0)"},{duration:.8,easing:[.12,.82,0,.99]})}))}intersected(e){const t=e[0];if(!this.isVisible&&t.intersectionRatio>=.3){this.isVisible=!0;const e=setTimeout((()=>{(0,i.remove)(this.$el,"is-hidden"),clearTimeout(e)}),1e3*this.$options.transitionDelay)}}}},"./app/containers/AppEvents.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o});var r=n("./node_modules/@studiometa/js-toolkit/Base/index.js"),s=n("./node_modules/@studiometa/js-toolkit/helpers/getInstanceFromElement.js"),i=n("./app/components/Cursor.js");class o extends r.default{static config={refs:["cursorLink[]","cursorSlider[]"],log:!0};cursor;mounted(){this.$log("Mounted");const e=document.querySelector('[data-component="Cursor"]');this.cursor=(0,s.default)(e,i.default)}destroyed(){this.$log("Destroyed")}onCursorLinkMouseenter(e){this.cursor&&this.cursor.$isMounted&&this.cursor.onEnterLink(e)}onCursorLinkMouseleave(e){this.cursor&&this.cursor.$isMounted&&this.cursor.onLeaveLink(e)}onCursorSliderMouseenter(e){this.cursor&&this.cursor.$isMounted&&this.cursor.onEnterSlider(e)}onCursorSliderMouseleave(e){this.cursor&&this.cursor.$isMounted&&this.cursor.onLeaveSlider(e)}}},"./app/containers/Page.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>i});var r=n("./app/containers/AppEvents.js"),s=n("./node_modules/@motionone/dom/dist/timeline/index.es.js");class i extends r.default{static config={...r.default.config,refs:[...r.default.config.refs]};async mounted(){super.mounted(),this.cursor&&this.cursor.enable()}destroyed(){super.destroyed(),this.cursor&&this.cursor.disable()}animateIn(){return(0,s.timeline)([]).finished}animateOut(){return(0,s.timeline)([[this.$el,{pointerEvents:"none"},{duration:0}],[this.$el,{opacity:0},{duration:.5,easing:"ease-out"}],[this.$el,{pointerEvents:"auto"},{duration:0}]]).finished}}},"./app/pages/About.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>s});var r=n("./app/containers/Page.js");class s extends r.default{static config={...r.default.config,name:"About",refs:[...r.default.config.refs]}}},"./app/pages/Home.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o});var r=n("./app/containers/Page.js"),s=n("./app/components/Work.js"),i=n("./app/components/Footer.js");class o extends r.default{static config={...r.default.config,name:"Home",refs:[...r.default.config.refs],components:{Work:s.default,Footer:i.default}}}},"./app/pages/Projects.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>s});var r=n("./app/containers/Page.js");class s extends r.default{static config={...r.default.config,name:"Projects",refs:[...r.default.config.refs]}}},"./app/pages/Ui.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>i});var r=n("./app/containers/Page.js"),s=n("./app/components/WorkCard.js");class i extends r.default{static config={...r.default.config,name:"Ui",components:{WorkCard:s.default},refs:[...r.default.config.refs]}}},"./app/utils/Svg.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o});var r=n("./node_modules/@studiometa/js-toolkit/utils/math/ease.js"),s=n("./node_modules/@studiometa/js-toolkit/utils/tween.js"),i=n("./node_modules/@studiometa/js-toolkit/utils/math/map.js");class o{static getShapes(e){const t=[],n=e=>{if(e.children.length>0&&[...e.children].forEach((e=>n(e))),!e.hasAttribute("stroke")||e.hasAttribute("data-static-stroke"))return;const r=o.getShapeLength(e);r&&t.push({el:e,length:r})};return n(e),t}static getShapeLength(e){if(!(e instanceof SVGGeometryElement))return null;if(e instanceof SVGPolygonElement)return e.getTotalLength();if(e instanceof SVGPolylineElement)return e.getTotalLength();if(e instanceof SVGCircleElement)return Math.round(2*Math.PI*parseInt(e.getAttribute("r"),10));if(e instanceof SVGRectElement)return Math.round(2*parseInt(e.getAttribute("width"))+2*parseInt(e.getAttribute("height")));if(e instanceof SVGEllipseElement){const t=parseInt(e.getAttribute("rx")),n=parseInt(e.getAttribute("ry")),r=(t-n)**2/(t+n)**2;return Math.PI*(t+n)*(1+3*r/(10+Math.sqrt(4-3*r)))}if(e instanceof SVGLineElement){const t=parseInt(e.getAttribute("x1")),n=parseInt(e.getAttribute("x2")),r=parseInt(e.getAttribute("y1")),s=parseInt(e.getAttribute("y2"));return Math.sqrt((n-t)**2+(s-r)**2)}return e instanceof SVGPathElement?e.getTotalLength():void 0}static setInitialAttributesShapes(e,t=!1){return e.forEach((e=>{e.el.setAttribute("stroke-dasharray",`${e.length} ${e.length}`),e.el.setAttribute("stroke-dashoffset",""+(t?-1:1)*e.length),e.el.setAttribute("data-stroke-length",e.length)})),e}static drawShapes(e,{reverse:t=!1,duration:n=1,easing:a=r.easeOutQuad,onFinish:l=(()=>{}),fromFullDrawn:u=!1}){(0,s.tween)((n=>{t&&(n=(0,i.default)(n,0,1,1,0)),o.setStrokeDashOffsetShapes(e,n,u)}),{duration:n,easing:a,onFinish:l}).start()}static setStrokeDashOffsetShapes(e,t,n=!1){let r=0;for(const s of e)n&&(r=s.length),s.el.setAttribute("stroke-dashoffset",`${s.length*t+r}`)}}},"./app/utils/dom.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{getInternalLinks:()=>r,preloadImages:()=>s});const r=()=>[...document.querySelectorAll("a")].filter((e=>{const t=e.href.indexOf(window.location.origin)>-1,n=-1===e.href.indexOf("mailto"),r=-1===e.href.indexOf("tel"),s=e.getAttribute("href"),i=!!s&&s.startsWith("#");return t&&r&&n&&!i})),s=(e=document,t="img")=>[...[...e.querySelectorAll(t)].filter((e=>"lazy"!==e.getAttribute("loading")))].map((e=>new Promise((t=>{const n=new Image;n.onload=()=>t(e),n.onerror=()=>t(e),n.src=e.getAttribute("src")}))))},"./app/utils/intervalPromise.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{intervalPromise:()=>r});const r=(e,t,n)=>{let r=0;return new Promise((s=>{const i=setInterval((()=>{r>t?(clearInterval(i),s()):r<=t&&(e(r),r++)}),n)}))}},"./node_modules/@motionone/animation/dist/Animation.es.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{Animation:()=>u});var r=n("./node_modules/@motionone/utils/dist/defaults.es.js"),s=n("./node_modules/@motionone/utils/dist/noop.es.js"),i=n("./node_modules/@motionone/utils/dist/is-easing-generator.es.js"),o=n("./node_modules/@motionone/utils/dist/is-easing-list.es.js"),a=n("./node_modules/@motionone/utils/dist/interpolate.es.js"),l=n("./node_modules/@motionone/animation/dist/utils/easing.es.js");class u{constructor(e,t=[0,1],{easing:n,duration:u=r.defaults.duration,delay:c=r.defaults.delay,endDelay:d=r.defaults.endDelay,repeat:h=r.defaults.repeat,offset:f,direction:p="normal"}={}){if(this.startTime=null,this.rate=1,this.t=0,this.cancelTimestamp=null,this.easing=s.noopReturn,this.duration=0,this.totalDuration=0,this.repeat=0,this.playState="idle",this.finished=new Promise(((e,t)=>{this.resolve=e,this.reject=t})),n=n||r.defaults.easing,(0,i.isEasingGenerator)(n)){const e=n.createAnimation(t,(()=>"0"),!0);n=e.easing,void 0!==e.keyframes&&(t=e.keyframes),void 0!==e.duration&&(u=e.duration)}this.repeat=h,this.easing=(0,o.isEasingList)(n)?s.noopReturn:(0,l.getEasingFunction)(n),this.updateDuration(u);const m=(0,a.interpolate)(t,f,(0,o.isEasingList)(n)?n.map(l.getEasingFunction):s.noopReturn);this.tick=t=>{var n;let r=0;r=void 0!==this.pauseTime?this.pauseTime:(t-this.startTime)*this.rate,this.t=r,r/=1e3,r=Math.max(r-c,0),"finished"===this.playState&&void 0===this.pauseTime&&(r=this.totalDuration);const s=r/this.duration;let i=Math.floor(s),o=s%1;!o&&s>=1&&(o=1),1===o&&i--;const a=i%2;("reverse"===p||"alternate"===p&&a||"alternate-reverse"===p&&!a)&&(o=1-o);const l=r>=this.totalDuration?1:Math.min(o,1),u=m(this.easing(l));e(u);void 0===this.pauseTime&&("finished"===this.playState||r>=this.totalDuration+d)?(this.playState="finished",null===(n=this.resolve)||void 0===n||n.call(this,u)):"idle"!==this.playState&&(this.frameRequestId=requestAnimationFrame(this.tick))},this.play()}play(){const e=performance.now();this.playState="running",void 0!==this.pauseTime?this.startTime=e-this.pauseTime:this.startTime||(this.startTime=e),this.cancelTimestamp=this.startTime,this.pauseTime=void 0,this.frameRequestId=requestAnimationFrame(this.tick)}pause(){this.playState="paused",this.pauseTime=this.t}finish(){this.playState="finished",this.tick(0)}stop(){var e;this.playState="idle",void 0!==this.frameRequestId&&cancelAnimationFrame(this.frameRequestId),null===(e=this.reject)||void 0===e||e.call(this,!1)}cancel(){this.stop(),this.tick(this.cancelTimestamp)}reverse(){this.rate*=-1}commitStyles(){}updateDuration(e){this.duration=e,this.totalDuration=e*(this.repeat+1)}get currentTime(){return this.t}set currentTime(e){void 0!==this.pauseTime||0===this.rate?this.pauseTime=e:this.startTime=performance.now()-e/this.rate}get playbackRate(){return this.rate}set playbackRate(e){this.rate=e}}},"./node_modules/@motionone/animation/dist/utils/easing.es.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{getEasingFunction:()=>u});var r=n("./node_modules/@motionone/easing/dist/cubic-bezier.es.js"),s=n("./node_modules/@motionone/easing/dist/steps.es.js"),i=n("./node_modules/@motionone/utils/dist/is-function.es.js"),o=n("./node_modules/@motionone/utils/dist/noop.es.js");const a={ease:(0,r.cubicBezier)(.25,.1,.25,1),"ease-in":(0,r.cubicBezier)(.42,0,1,1),"ease-in-out":(0,r.cubicBezier)(.42,0,.58,1),"ease-out":(0,r.cubicBezier)(0,0,.58,1)},l=/\((.*?)\)/;function u(e){if((0,i.isFunction)(e))return e;if(Array.isArray(e))return(0,r.cubicBezier)(...e);if(a[e])return a[e];if(e.startsWith("steps")){const t=l.exec(e);if(t){const e=t[1].split(",");return(0,s.steps)(parseFloat(e[0]),e[1].trim())}}return o.noopReturn}},"./node_modules/@motionone/dom/dist/animate/animate-style.es.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{animateStyle:()=>b});var r=n("./node_modules/@motionone/dom/dist/animate/data.es.js"),s=n("./node_modules/@motionone/dom/dist/animate/utils/css-var.es.js"),i=n("./node_modules/@motionone/animation/dist/Animation.es.js"),o=n("./node_modules/@motionone/utils/dist/defaults.es.js"),a=n("./node_modules/@motionone/utils/dist/is-easing-generator.es.js"),l=n("./node_modules/@motionone/utils/dist/is-function.es.js"),u=n("./node_modules/@motionone/utils/dist/is-easing-list.es.js"),c=n("./node_modules/@motionone/utils/dist/is-number.es.js"),d=n("./node_modules/@motionone/utils/dist/time.es.js"),h=n("./node_modules/@motionone/utils/dist/noop.es.js"),f=n("./node_modules/@motionone/dom/dist/animate/utils/transforms.es.js"),p=n("./node_modules/@motionone/dom/dist/animate/utils/easing.es.js"),m=n("./node_modules/@motionone/dom/dist/animate/utils/feature-detection.es.js"),g=n("./node_modules/@motionone/dom/dist/animate/utils/keyframes.es.js"),v=n("./node_modules/@motionone/dom/dist/animate/style.es.js"),_=n("./node_modules/@motionone/dom/dist/animate/utils/get-style-name.es.js"),y=n("./node_modules/@motionone/dom/dist/animate/utils/stop-animation.es.js");function b(e,t,n,b={}){const w=window.__MOTION_DEV_TOOLS_RECORD,x=!1!==b.record&&w;let j,{duration:E=o.defaults.duration,delay:k=o.defaults.delay,endDelay:S=o.defaults.endDelay,repeat:O=o.defaults.repeat,easing:T=o.defaults.easing,direction:C,offset:A,allowWebkitAcceleration:P=!1}=b;const L=(0,r.getAnimationData)(e),D=(0,f.isTransform)(t);let M=m.supports.waapi();D&&(0,f.addTransformToElement)(e,t);const N=(0,_.getStyleName)(t),I=(0,r.getMotionValue)(L.values,N),$=f.transformDefinitions.get(N);return(0,y.stopAnimation)(I.animation,!((0,a.isEasingGenerator)(T)&&I.generator)&&!1!==b.record),()=>{const r=()=>{var t,n;return null!==(n=null!==(t=v.style.get(e,N))&&void 0!==t?t:null==$?void 0:$.initialValue)&&void 0!==n?n:0};let o=(0,g.hydrateKeyframes)((0,g.keyframesList)(n),r);if((0,a.isEasingGenerator)(T)){const e=T.createAnimation(o,r,D,N,I);T=e.easing,void 0!==e.keyframes&&(o=e.keyframes),void 0!==e.duration&&(E=e.duration)}if((0,s.isCssVar)(N)&&(m.supports.cssRegisterProperty()?(0,s.registerCssVariable)(N):M=!1),D&&!m.supports.linearEasing()&&((0,l.isFunction)(T)||(0,u.isEasingList)(T)&&T.some(l.isFunction))&&(M=!1),M){$&&(o=o.map((e=>(0,c.isNumber)(e)?$.toDefaultUnit(e):e))),1!==o.length||m.supports.partialKeyframes()&&!x||o.unshift(r());const t={delay:d.time.ms(k),duration:d.time.ms(E),endDelay:d.time.ms(S),easing:(0,u.isEasingList)(T)?void 0:(0,p.convertEasing)(T,E),direction:C,iterations:O+1,fill:"both"};j=e.animate({[N]:o,offset:A,easing:(0,u.isEasingList)(T)?T.map((e=>(0,p.convertEasing)(e,E))):void 0},t),j.finished||(j.finished=new Promise(((e,t)=>{j.onfinish=e,j.oncancel=t})));const n=o[o.length-1];j.finished.then((()=>{v.style.set(e,N,n),j.cancel()})).catch(h.noop),P||(j.playbackRate=1.000001)}else if(D){o=o.map((e=>"string"==typeof e?parseFloat(e):e)),1===o.length&&o.unshift(parseFloat(r()));const t=t=>{$&&(t=$.toDefaultUnit(t)),v.style.set(e,N,t)};j=new i.Animation(t,o,Object.assign(Object.assign({},b),{duration:E,easing:T}))}else{const t=o[o.length-1];v.style.set(e,N,$&&(0,c.isNumber)(t)?$.toDefaultUnit(t):t)}return x&&w(e,t,o,{duration:E,delay:k,easing:T,repeat:O,offset:A},"motion-one"),I.setAnimation(j),j}}},"./node_modules/@motionone/dom/dist/animate/data.es.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{getAnimationData:()=>i,getMotionValue:()=>o});var r=n("./node_modules/@motionone/types/dist/MotionValue.es.js");const s=new WeakMap;function i(e){return s.has(e)||s.set(e,{transforms:[],values:new Map}),s.get(e)}function o(e,t){return e.has(t)||e.set(t,new r.MotionValue),e.get(t)}},"./node_modules/@motionone/dom/dist/animate/index.es.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{animate:()=>l});var r=n("./node_modules/@motionone/dom/dist/animate/animate-style.es.js"),s=n("./node_modules/@motionone/dom/dist/animate/utils/options.es.js"),i=n("./node_modules/@motionone/dom/dist/utils/resolve-elements.es.js"),o=n("./node_modules/@motionone/dom/dist/animate/utils/controls.es.js"),a=n("./node_modules/@motionone/dom/dist/utils/stagger.es.js");function l(e,t,n={}){const l=(e=(0,i.resolveElements)(e)).length,u=[];for(let i=0;i<l;i++){const o=e[i];for(const e in t){const c=(0,s.getOptions)(n,e);c.delay=(0,a.resolveOption)(c.delay,i,l);const d=(0,r.animateStyle)(o,e,t[e],c);u.push(d)}}return(0,o.withControls)(u,n,n.duration)}},"./node_modules/@motionone/dom/dist/animate/style.es.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{style:()=>o});var r=n("./node_modules/@motionone/dom/dist/animate/utils/css-var.es.js"),s=n("./node_modules/@motionone/dom/dist/animate/utils/get-style-name.es.js"),i=n("./node_modules/@motionone/dom/dist/animate/utils/transforms.es.js");const o={get:(e,t)=>{t=(0,s.getStyleName)(t);let n=(0,r.isCssVar)(t)?e.style.getPropertyValue(t):getComputedStyle(e)[t];if(!n&&0!==n){const e=i.transformDefinitions.get(t);e&&(n=e.initialValue)}return n},set:(e,t,n)=>{t=(0,s.getStyleName)(t),(0,r.isCssVar)(t)?e.style.setProperty(t,n):e.style[t]=n}}},"./node_modules/@motionone/dom/dist/animate/utils/controls.es.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{controls:()=>u,withControls:()=>l});var r=n("./node_modules/@motionone/utils/dist/defaults.es.js"),s=n("./node_modules/@motionone/utils/dist/time.es.js"),i=n("./node_modules/@motionone/utils/dist/noop.es.js"),o=n("./node_modules/@motionone/dom/dist/animate/utils/stop-animation.es.js");const a=e=>e(),l=(e,t,n=r.defaults.duration)=>new Proxy({animations:e.map(a).filter(Boolean),duration:n,options:t},u),u={get:(e,t)=>{const n=e.animations[0];switch(t){case"duration":return e.duration;case"currentTime":return s.time.s((null==n?void 0:n[t])||0);case"playbackRate":case"playState":return null==n?void 0:n[t];case"finished":return e.finished||(e.finished=Promise.all(e.animations.map(c)).catch(i.noop)),e.finished;case"stop":return()=>{e.animations.forEach((e=>(0,o.stopAnimation)(e)))};case"forEachNative":return t=>{e.animations.forEach((n=>t(n,e)))};default:return void 0===(null==n?void 0:n[t])?void 0:()=>e.animations.forEach((e=>e[t]()))}},set:(e,t,n)=>{switch(t){case"currentTime":n=s.time.ms(n);case"currentTime":case"playbackRate":for(let r=0;r<e.animations.length;r++)e.animations[r][t]=n;return!0}return!1}},c=e=>e.finished},"./node_modules/@motionone/dom/dist/animate/utils/css-var.es.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{isCssVar:()=>s,registerCssVariable:()=>o,registeredProperties:()=>i});var r=n("./node_modules/@motionone/dom/dist/animate/utils/transforms.es.js");const s=e=>e.startsWith("--"),i=new Set;function o(e){if(!i.has(e)){i.add(e);try{const{syntax:t,initialValue:n}=r.transformDefinitions.has(e)?r.transformDefinitions.get(e):{};CSS.registerProperty({name:e,inherits:!1,syntax:t,initialValue:n})}catch(e){}}}},"./node_modules/@motionone/dom/dist/animate/utils/easing.es.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{convertEasing:()=>u,cubicBezierAsString:()=>c,generateLinearEasingPoints:()=>l});var r=n("./node_modules/@motionone/utils/dist/progress.es.js"),s=n("./node_modules/@motionone/utils/dist/is-function.es.js"),i=n("./node_modules/@motionone/utils/dist/defaults.es.js"),o=n("./node_modules/@motionone/utils/dist/is-cubic-bezier.es.js"),a=n("./node_modules/@motionone/dom/dist/animate/utils/feature-detection.es.js");const l=(e,t)=>{let n="";const s=Math.round(t/.015);for(let t=0;t<s;t++)n+=e((0,r.progress)(0,s-1,t))+", ";return n.substring(0,n.length-2)},u=(e,t)=>(0,s.isFunction)(e)?a.supports.linearEasing()?`linear(${l(e,t)})`:i.defaults.easing:(0,o.isCubicBezier)(e)?c(e):e,c=([e,t,n,r])=>`cubic-bezier(${e}, ${t}, ${n}, ${r})`},"./node_modules/@motionone/dom/dist/animate/utils/feature-detection.es.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{supports:()=>o});const r=(e,t)=>document.createElement("div").animate(e,t),s={cssRegisterProperty:()=>"undefined"!=typeof CSS&&Object.hasOwnProperty.call(CSS,"registerProperty"),waapi:()=>Object.hasOwnProperty.call(Element.prototype,"animate"),partialKeyframes:()=>{try{r({opacity:[1]})}catch(e){return!1}return!0},finished:()=>Boolean(r({opacity:[0,1]},{duration:.001}).finished),linearEasing:()=>{try{r({opacity:0},{easing:"linear(0, 1)"})}catch(e){return!1}return!0}},i={},o={};for(const e in s)o[e]=()=>(void 0===i[e]&&(i[e]=s[e]()),i[e])},"./node_modules/@motionone/dom/dist/animate/utils/get-style-name.es.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{getStyleName:()=>s});var r=n("./node_modules/@motionone/dom/dist/animate/utils/transforms.es.js");function s(e){return r.transformAlias[e]&&(e=r.transformAlias[e]),(0,r.isTransform)(e)?(0,r.asTransformCssVar)(e):e}},"./node_modules/@motionone/dom/dist/animate/utils/keyframes.es.js":(e,t,n)=>{"use strict";function r(e,t){for(let n=0;n<e.length;n++)null===e[n]&&(e[n]=n?e[n-1]:t());return e}n.r(t),n.d(t,{hydrateKeyframes:()=>r,keyframesList:()=>s});const s=e=>Array.isArray(e)?e:[e]},"./node_modules/@motionone/dom/dist/animate/utils/options.es.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{getOptions:()=>r});const r=(e,t)=>e[t]?Object.assign(Object.assign({},e),e[t]):Object.assign({},e)},"./node_modules/@motionone/dom/dist/animate/utils/stop-animation.es.js":(e,t,n)=>{"use strict";function r(e,t=!0){if(e&&"finished"!==e.playState)try{e.stop?e.stop():(t&&e.commitStyles(),e.cancel())}catch(e){}}n.r(t),n.d(t,{stopAnimation:()=>r})},"./node_modules/@motionone/dom/dist/animate/utils/transforms.es.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{addTransformToElement:()=>g,asTransformCssVar:()=>d,axes:()=>o,buildTransformTemplate:()=>v,compareTransformOrder:()=>f,isTransform:()=>m,transformAlias:()=>a,transformDefinitions:()=>c});var r=n("./node_modules/@motionone/utils/dist/noop.es.js"),s=n("./node_modules/@motionone/utils/dist/array.es.js"),i=n("./node_modules/@motionone/dom/dist/animate/data.es.js");const o=["","X","Y","Z"],a={x:"translateX",y:"translateY",z:"translateZ"},l={syntax:"<angle>",initialValue:"0deg",toDefaultUnit:e=>e+"deg"},u={translate:{syntax:"<length-percentage>",initialValue:"0px",toDefaultUnit:e=>e+"px"},rotate:l,scale:{syntax:"<number>",initialValue:1,toDefaultUnit:r.noopReturn},skew:l},c=new Map,d=e=>`--motion-${e}`,h=["x","y","z"];["translate","scale","rotate","skew"].forEach((e=>{o.forEach((t=>{h.push(e+t),c.set(d(e+t),u[e])}))}));const f=(e,t)=>h.indexOf(e)-h.indexOf(t),p=new Set(h),m=e=>p.has(e),g=(e,t)=>{a[t]&&(t=a[t]);const{transforms:n}=(0,i.getAnimationData)(e);(0,s.addUniqueItem)(n,t),e.style.transform=v(n)},v=e=>e.sort(f).reduce(_,"").trim(),_=(e,t)=>`${e} ${t}(var(${d(t)}))`},"./node_modules/@motionone/dom/dist/timeline/index.es.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{createAnimationsFromTimeline:()=>w,timeline:()=>b});var r=n("./node_modules/tslib/tslib.es6.js"),s=n("./node_modules/hey-listen/dist/hey-listen.es.js"),i=n("./node_modules/@motionone/utils/dist/is-string.es.js"),o=n("./node_modules/@motionone/utils/dist/defaults.es.js"),a=n("./node_modules/@motionone/utils/dist/is-easing-generator.es.js"),l=n("./node_modules/@motionone/utils/dist/offset.es.js"),u=n("./node_modules/@motionone/utils/dist/progress.es.js"),c=n("./node_modules/@motionone/dom/dist/utils/stagger.es.js"),d=n("./node_modules/@motionone/dom/dist/animate/animate-style.es.js"),h=n("./node_modules/@motionone/dom/dist/animate/utils/controls.es.js"),f=n("./node_modules/@motionone/dom/dist/animate/utils/keyframes.es.js"),p=n("./node_modules/@motionone/dom/dist/animate/utils/options.es.js"),m=n("./node_modules/@motionone/dom/dist/utils/resolve-elements.es.js"),g=n("./node_modules/@motionone/dom/dist/animate/utils/transforms.es.js"),v=n("./node_modules/@motionone/dom/dist/timeline/utils/calc-time.es.js"),_=n("./node_modules/@motionone/dom/dist/timeline/utils/edit.es.js"),y=n("./node_modules/@motionone/dom/dist/timeline/utils/sort.es.js");function b(e,t={}){var n;const r=w(e,t),s=r.map((e=>(0,d.animateStyle)(...e))).filter(Boolean);return(0,h.withControls)(s,t,null===(n=r[0])||void 0===n?void 0:n[3].duration)}function w(e,t={}){var{defaultOptions:n={}}=t,d=(0,r.__rest)(t,["defaultOptions"]);const h=[],b=new Map,w={},E=new Map;let k=0,S=0,O=0;for(let t=0;t<e.length;t++){const r=e[t];if((0,i.isString)(r)){E.set(r,S);continue}if(!Array.isArray(r)){E.set(r.name,(0,v.calcNextTime)(S,r.at,k,E));continue}const[u,d,h={}]=r;void 0!==h.at&&(S=(0,v.calcNextTime)(S,h.at,k,E));let y=0;const T=(0,m.resolveElements)(u,w),C=T.length;for(let e=0;e<C;e++){const t=x(T[e],b);for(const r in d){const i=j(r,t);let u=(0,f.keyframesList)(d[r]);const m=(0,p.getOptions)(h,r);let{duration:v=n.duration||o.defaults.duration,easing:b=n.easing||o.defaults.easing}=m;if((0,a.isEasingGenerator)(b)){const e=(0,g.isTransform)(r);(0,s.invariant)(2===u.length||!e,"spring must be provided 2 keyframes within timeline");const t=b.createAnimation(u,(()=>"0"),e);b=t.easing,void 0!==t.keyframes&&(u=t.keyframes),void 0!==t.duration&&(v=t.duration)}const w=(0,c.resolveOption)(h.delay,e,C)||0,x=S+w,E=x+v;let{offset:k=(0,l.defaultOffset)(u.length)}=m;1===k.length&&0===k[0]&&(k[1]=1);const T=length-u.length;T>0&&(0,l.fillOffset)(k,T),1===u.length&&u.unshift(null),(0,_.addKeyframes)(i,u,b,k,x,E),y=Math.max(w+v,y),O=Math.max(E,O)}}k=S,S+=y}return b.forEach(((e,t)=>{for(const r in e){const s=e[r];s.sort(y.compareByTime);const i=[],a=[],l=[];for(let e=0;e<s.length;e++){const{at:t,value:n,easing:r}=s[e];i.push(n),a.push((0,u.progress)(0,O,t)),l.push(r||o.defaults.easing)}0!==a[0]&&(a.unshift(0),i.unshift(i[0]),l.unshift("linear")),1!==a[a.length-1]&&(a.push(1),i.push(null)),h.push([t,r,i,Object.assign(Object.assign(Object.assign({},n),{duration:O,easing:l,offset:a}),d)])}})),h}function x(e,t){return!t.has(e)&&t.set(e,{}),t.get(e)}function j(e,t){return t[e]||(t[e]=[]),t[e]}},"./node_modules/@motionone/dom/dist/timeline/utils/calc-time.es.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{calcNextTime:()=>s});var r=n("./node_modules/@motionone/utils/dist/is-number.es.js");function s(e,t,n,s){var i;return(0,r.isNumber)(t)?t:t.startsWith("-")||t.startsWith("+")?Math.max(0,e+parseFloat(t)):"<"===t?n:null!==(i=s.get(t))&&void 0!==i?i:e}},"./node_modules/@motionone/dom/dist/timeline/utils/edit.es.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{addKeyframes:()=>a,eraseKeyframes:()=>o});var r=n("./node_modules/@motionone/utils/dist/array.es.js"),s=n("./node_modules/@motionone/utils/dist/mix.es.js"),i=n("./node_modules/@motionone/utils/dist/easing.es.js");function o(e,t,n){for(let s=0;s<e.length;s++){const i=e[s];i.at>t&&i.at<n&&((0,r.removeItem)(e,i),s--)}}function a(e,t,n,r,a,l){o(e,a,l);for(let o=0;o<t.length;o++)e.push({value:t[o],at:(0,s.mix)(a,l,r[o]),easing:(0,i.getEasingForSegment)(n,o)})}},"./node_modules/@motionone/dom/dist/timeline/utils/sort.es.js":(e,t,n)=>{"use strict";function r(e,t){return e.at===t.at?null===e.value?1:-1:e.at-t.at}n.r(t),n.d(t,{compareByTime:()=>r})},"./node_modules/@motionone/dom/dist/utils/resolve-elements.es.js":(e,t,n)=>{"use strict";function r(e,t){var n;return"string"==typeof e?t?(null!==(n=t[e])&&void 0!==n||(t[e]=document.querySelectorAll(e)),e=t[e]):e=document.querySelectorAll(e):e instanceof Element&&(e=[e]),Array.from(e||[])}n.r(t),n.d(t,{resolveElements:()=>r})},"./node_modules/@motionone/dom/dist/utils/stagger.es.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{getFromIndex:()=>a,resolveOption:()=>l,stagger:()=>o});var r=n("./node_modules/@motionone/utils/dist/is-number.es.js"),s=n("./node_modules/@motionone/utils/dist/is-function.es.js"),i=n("./node_modules/@motionone/animation/dist/utils/easing.es.js");function o(e=.1,{start:t=0,from:n=0,easing:s}={}){return(o,l)=>{const u=(0,r.isNumber)(n)?n:a(n,l),c=Math.abs(u-o);let d=e*c;if(s){const t=l*e;d=(0,i.getEasingFunction)(s)(d/t)*t}return t+d}}function a(e,t){if("first"===e)return 0;{const n=t-1;return"last"===e?n:n/2}}function l(e,t,n){return(0,s.isFunction)(e)?e(t,n):e}},"./node_modules/@motionone/easing/dist/cubic-bezier.es.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{cubicBezier:()=>i});var r=n("./node_modules/@motionone/utils/dist/noop.es.js");const s=(e,t,n)=>(((1-3*n+3*t)*e+(3*n-6*t))*e+3*t)*e;function i(e,t,n,i){if(e===t&&n===i)return r.noopReturn;const o=t=>function(e,t,n,r,i){let o,a,l=0;do{a=t+(n-t)/2,o=s(a,r,i)-e,o>0?n=a:t=a}while(Math.abs(o)>1e-7&&++l<12);return a}(t,0,1,e,n);return e=>0===e||1===e?e:s(o(e),t,i)}},"./node_modules/@motionone/easing/dist/steps.es.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{steps:()=>s});var r=n("./node_modules/@motionone/utils/dist/clamp.es.js");const s=(e,t="end")=>n=>{const s=(n="end"===t?Math.min(n,.999):Math.max(n,.001))*e,i="end"===t?Math.floor(s):Math.ceil(s);return(0,r.clamp)(0,1,i/e)}},"./node_modules/@motionone/types/dist/MotionValue.es.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{MotionValue:()=>r});class r{setAnimation(e){this.animation=e,null==e||e.finished.then((()=>this.clearAnimation())).catch((()=>{}))}clearAnimation(){this.animation=this.generator=void 0}}},"./node_modules/@motionone/utils/dist/array.es.js":(e,t,n)=>{"use strict";function r(e,t){-1===e.indexOf(t)&&e.push(t)}function s(e,t){const n=e.indexOf(t);n>-1&&e.splice(n,1)}n.r(t),n.d(t,{addUniqueItem:()=>r,removeItem:()=>s})},"./node_modules/@motionone/utils/dist/clamp.es.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{clamp:()=>r});const r=(e,t,n)=>Math.min(Math.max(n,e),t)},"./node_modules/@motionone/utils/dist/defaults.es.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{defaults:()=>r});const r={duration:.3,delay:0,endDelay:0,repeat:0,easing:"ease"}},"./node_modules/@motionone/utils/dist/easing.es.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{getEasingForSegment:()=>i});var r=n("./node_modules/@motionone/utils/dist/is-easing-list.es.js"),s=n("./node_modules/@motionone/utils/dist/wrap.es.js");function i(e,t){return(0,r.isEasingList)(e)?e[(0,s.wrap)(0,e.length,t)]:e}},"./node_modules/@motionone/utils/dist/interpolate.es.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{interpolate:()=>u});var r=n("./node_modules/@motionone/utils/dist/mix.es.js"),s=n("./node_modules/@motionone/utils/dist/noop.es.js"),i=n("./node_modules/@motionone/utils/dist/offset.es.js"),o=n("./node_modules/@motionone/utils/dist/progress.es.js"),a=n("./node_modules/@motionone/utils/dist/easing.es.js"),l=n("./node_modules/@motionone/utils/dist/clamp.es.js");function u(e,t=(0,i.defaultOffset)(e.length),n=s.noopReturn){const u=e.length,c=u-t.length;return c>0&&(0,i.fillOffset)(t,c),s=>{let i=0;for(;i<u-2&&!(s<t[i+1]);i++);let c=(0,l.clamp)(0,1,(0,o.progress)(t[i],t[i+1],s));return c=(0,a.getEasingForSegment)(n,i)(c),(0,r.mix)(e[i],e[i+1],c)}}},"./node_modules/@motionone/utils/dist/is-cubic-bezier.es.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{isCubicBezier:()=>s});var r=n("./node_modules/@motionone/utils/dist/is-number.es.js");const s=e=>Array.isArray(e)&&(0,r.isNumber)(e[0])},"./node_modules/@motionone/utils/dist/is-easing-generator.es.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{isEasingGenerator:()=>r});const r=e=>"object"==typeof e&&Boolean(e.createAnimation)},"./node_modules/@motionone/utils/dist/is-easing-list.es.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{isEasingList:()=>s});var r=n("./node_modules/@motionone/utils/dist/is-number.es.js");const s=e=>Array.isArray(e)&&!(0,r.isNumber)(e[0])},"./node_modules/@motionone/utils/dist/is-function.es.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{isFunction:()=>r});const r=e=>"function"==typeof e},"./node_modules/@motionone/utils/dist/is-number.es.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{isNumber:()=>r});const r=e=>"number"==typeof e},"./node_modules/@motionone/utils/dist/is-string.es.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{isString:()=>r});const r=e=>"string"==typeof e},"./node_modules/@motionone/utils/dist/mix.es.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{mix:()=>r});const r=(e,t,n)=>-n*e+n*t+e},"./node_modules/@motionone/utils/dist/noop.es.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{noop:()=>r,noopReturn:()=>s});const r=()=>{},s=e=>e},"./node_modules/@motionone/utils/dist/offset.es.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{defaultOffset:()=>o,fillOffset:()=>i});var r=n("./node_modules/@motionone/utils/dist/mix.es.js"),s=n("./node_modules/@motionone/utils/dist/progress.es.js");function i(e,t){const n=e[e.length-1];for(let i=1;i<=t;i++){const o=(0,s.progress)(0,t,i);e.push((0,r.mix)(n,1,o))}}function o(e){const t=[0];return i(t,e-1),t}},"./node_modules/@motionone/utils/dist/progress.es.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{progress:()=>r});const r=(e,t,n)=>t-e==0?1:(n-e)/(t-e)},"./node_modules/@motionone/utils/dist/time.es.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{time:()=>r});const r={ms:e=>1e3*e,s:e=>e/1e3}},"./node_modules/@motionone/utils/dist/wrap.es.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{wrap:()=>r});const r=(e,t,n)=>{const r=t-e;return((n-e)%r+r)%r+e}},"./node_modules/ansi-html-community/index.js":e=>{"use strict";e.exports=o;var t=/(?:(?:\u001b\[)|\u009b)(?:(?:[0-9]{1,3})?(?:(?:;[0-9]{0,3})*)?[A-M|f-m])|\u001b[A-M]/,n={reset:["fff","000"],black:"000",red:"ff0000",green:"209805",yellow:"e8bf03",blue:"0000ff",magenta:"ff00ff",cyan:"00ffee",lightgrey:"f0f0f0",darkgrey:"888"},r={30:"black",31:"red",32:"green",33:"yellow",34:"blue",35:"magenta",36:"cyan",37:"lightgrey"},s={1:"font-weight:bold",2:"opacity:0.5",3:"<i>",4:"<u>",8:"display:none",9:"<del>"},i={23:"</i>",24:"</u>",29:"</del>"};function o(e){if(!t.test(e))return e;var n=[],r=e.replace(/\033\[(\d+)m/g,(function(e,t){var r=s[t];if(r)return~n.indexOf(t)?(n.pop(),"</span>"):(n.push(t),"<"===r[0]?r:'<span style="'+r+';">');var o=i[t];return o?(n.pop(),o):""})),o=n.length;return o>0&&(r+=Array(o+1).join("</span>")),r}function a(e){for(var t in s[0]="font-weight:normal;opacity:1;color:#"+e.reset[0]+";background:#"+e.reset[1],s[7]="color:#"+e.reset[1]+";background:#"+e.reset[0],s[90]="color:#"+e.darkgrey,r){var n=e[r[t]]||"000";s[t]="color:#"+n,t=parseInt(t),s[(t+10).toString()]="background:#"+n}}[0,21,22,27,28,39,49].forEach((function(e){i[e]="</span>"})),o.setColors=function(e){if("object"!=typeof e)throw new Error("`colors` parameter must be an Object.");var t={};for(var r in n){var s=e.hasOwnProperty(r)?e[r]:null;if(s){if("reset"===r){if("string"==typeof s&&(s=[s]),!Array.isArray(s)||0===s.length||s.some((function(e){return"string"!=typeof e})))throw new Error("The value of `"+r+"` property must be an Array and each item could only be a hex string, e.g.: FF0000");var i=n[r];s[0]||(s[0]=i[0]),1!==s.length&&s[1]||(s=[s[0]]).push(i[1]),s=s.slice(0,2)}else if("string"!=typeof s)throw new Error("The value of `"+r+"` property must be a hex string, e.g.: FF0000");t[r]=s}else t[r]=n[r]}a(t)},o.reset=function(){a(n)},o.tags={},Object.defineProperty?(Object.defineProperty(o.tags,"open",{get:function(){return s}}),Object.defineProperty(o.tags,"close",{get:function(){return i}})):(o.tags.open=s,o.tags.close=i),o.reset()},"./node_modules/deepmerge/dist/cjs.js":e=>{"use strict";var t=function(e){return function(e){return!!e&&"object"==typeof e}(e)&&!function(e){var t=Object.prototype.toString.call(e);return"[object RegExp]"===t||"[object Date]"===t||function(e){return e.$$typeof===n}(e)}(e)};var n="function"==typeof Symbol&&Symbol.for?Symbol.for("react.element"):60103;function r(e,t){return!1!==t.clone&&t.isMergeableObject(e)?l((n=e,Array.isArray(n)?[]:{}),e,t):e;var n}function s(e,t,n){return e.concat(t).map((function(e){return r(e,n)}))}function i(e){return Object.keys(e).concat(function(e){return Object.getOwnPropertySymbols?Object.getOwnPropertySymbols(e).filter((function(t){return e.propertyIsEnumerable(t)})):[]}(e))}function o(e,t){try{return t in e}catch(e){return!1}}function a(e,t,n){var s={};return n.isMergeableObject(e)&&i(e).forEach((function(t){s[t]=r(e[t],n)})),i(t).forEach((function(i){(function(e,t){return o(e,t)&&!(Object.hasOwnProperty.call(e,t)&&Object.propertyIsEnumerable.call(e,t))})(e,i)||(o(e,i)&&n.isMergeableObject(t[i])?s[i]=function(e,t){if(!t.customMerge)return l;var n=t.customMerge(e);return"function"==typeof n?n:l}(i,n)(e[i],t[i],n):s[i]=r(t[i],n))})),s}function l(e,n,i){(i=i||{}).arrayMerge=i.arrayMerge||s,i.isMergeableObject=i.isMergeableObject||t,i.cloneUnlessOtherwiseSpecified=r;var o=Array.isArray(n);return o===Array.isArray(e)?o?i.arrayMerge(e,n,i):a(e,n,i):r(n,i)}l.all=function(e,t){if(!Array.isArray(e))throw new Error("first argument should be an array");return e.reduce((function(e,n){return l(e,n,t)}),{})};var u=l;e.exports=u},"./node_modules/events/events.js":e=>{"use strict";var t,n="object"==typeof Reflect?Reflect:null,r=n&&"function"==typeof n.apply?n.apply:function(e,t,n){return Function.prototype.apply.call(e,t,n)};t=n&&"function"==typeof n.ownKeys?n.ownKeys:Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.getOwnPropertyNames(e)};var s=Number.isNaN||function(e){return e!=e};function i(){i.init.call(this)}e.exports=i,e.exports.once=function(e,t){return new Promise((function(n,r){function s(n){e.removeListener(t,i),r(n)}function i(){"function"==typeof e.removeListener&&e.removeListener("error",s),n([].slice.call(arguments))}m(e,t,i,{once:!0}),"error"!==t&&function(e,t,n){"function"==typeof e.on&&m(e,"error",t,n)}(e,s,{once:!0})}))},i.EventEmitter=i,i.prototype._events=void 0,i.prototype._eventsCount=0,i.prototype._maxListeners=void 0;var o=10;function a(e){if("function"!=typeof e)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof e)}function l(e){return void 0===e._maxListeners?i.defaultMaxListeners:e._maxListeners}function u(e,t,n,r){var s,i,o,u;if(a(n),void 0===(i=e._events)?(i=e._events=Object.create(null),e._eventsCount=0):(void 0!==i.newListener&&(e.emit("newListener",t,n.listener?n.listener:n),i=e._events),o=i[t]),void 0===o)o=i[t]=n,++e._eventsCount;else if("function"==typeof o?o=i[t]=r?[n,o]:[o,n]:r?o.unshift(n):o.push(n),(s=l(e))>0&&o.length>s&&!o.warned){o.warned=!0;var c=new Error("Possible EventEmitter memory leak detected. "+o.length+" "+String(t)+" listeners added. Use emitter.setMaxListeners() to increase limit");c.name="MaxListenersExceededWarning",c.emitter=e,c.type=t,c.count=o.length,u=c,console&&console.warn&&console.warn(u)}return e}function c(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,0===arguments.length?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function d(e,t,n){var r={fired:!1,wrapFn:void 0,target:e,type:t,listener:n},s=c.bind(r);return s.listener=n,r.wrapFn=s,s}function h(e,t,n){var r=e._events;if(void 0===r)return[];var s=r[t];return void 0===s?[]:"function"==typeof s?n?[s.listener||s]:[s]:n?function(e){for(var t=new Array(e.length),n=0;n<t.length;++n)t[n]=e[n].listener||e[n];return t}(s):p(s,s.length)}function f(e){var t=this._events;if(void 0!==t){var n=t[e];if("function"==typeof n)return 1;if(void 0!==n)return n.length}return 0}function p(e,t){for(var n=new Array(t),r=0;r<t;++r)n[r]=e[r];return n}function m(e,t,n,r){if("function"==typeof e.on)r.once?e.once(t,n):e.on(t,n);else{if("function"!=typeof e.addEventListener)throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type '+typeof e);e.addEventListener(t,(function s(i){r.once&&e.removeEventListener(t,s),n(i)}))}}Object.defineProperty(i,"defaultMaxListeners",{enumerable:!0,get:function(){return o},set:function(e){if("number"!=typeof e||e<0||s(e))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+e+".");o=e}}),i.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},i.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||s(e))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+e+".");return this._maxListeners=e,this},i.prototype.getMaxListeners=function(){return l(this)},i.prototype.emit=function(e){for(var t=[],n=1;n<arguments.length;n++)t.push(arguments[n]);var s="error"===e,i=this._events;if(void 0!==i)s=s&&void 0===i.error;else if(!s)return!1;if(s){var o;if(t.length>0&&(o=t[0]),o instanceof Error)throw o;var a=new Error("Unhandled error."+(o?" ("+o.message+")":""));throw a.context=o,a}var l=i[e];if(void 0===l)return!1;if("function"==typeof l)r(l,this,t);else{var u=l.length,c=p(l,u);for(n=0;n<u;++n)r(c[n],this,t)}return!0},i.prototype.addListener=function(e,t){return u(this,e,t,!1)},i.prototype.on=i.prototype.addListener,i.prototype.prependListener=function(e,t){return u(this,e,t,!0)},i.prototype.once=function(e,t){return a(t),this.on(e,d(this,e,t)),this},i.prototype.prependOnceListener=function(e,t){return a(t),this.prependListener(e,d(this,e,t)),this},i.prototype.removeListener=function(e,t){var n,r,s,i,o;if(a(t),void 0===(r=this._events))return this;if(void 0===(n=r[e]))return this;if(n===t||n.listener===t)0==--this._eventsCount?this._events=Object.create(null):(delete r[e],r.removeListener&&this.emit("removeListener",e,n.listener||t));else if("function"!=typeof n){for(s=-1,i=n.length-1;i>=0;i--)if(n[i]===t||n[i].listener===t){o=n[i].listener,s=i;break}if(s<0)return this;0===s?n.shift():function(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}(n,s),1===n.length&&(r[e]=n[0]),void 0!==r.removeListener&&this.emit("removeListener",e,o||t)}return this},i.prototype.off=i.prototype.removeListener,i.prototype.removeAllListeners=function(e){var t,n,r;if(void 0===(n=this._events))return this;if(void 0===n.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==n[e]&&(0==--this._eventsCount?this._events=Object.create(null):delete n[e]),this;if(0===arguments.length){var s,i=Object.keys(n);for(r=0;r<i.length;++r)"removeListener"!==(s=i[r])&&this.removeAllListeners(s);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(t=n[e]))this.removeListener(e,t);else if(void 0!==t)for(r=t.length-1;r>=0;r--)this.removeListener(e,t[r]);return this},i.prototype.listeners=function(e){return h(this,e,!0)},i.prototype.rawListeners=function(e){return h(this,e,!1)},i.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):f.call(e,t)},i.prototype.listenerCount=f,i.prototype.eventNames=function(){return this._eventsCount>0?t(this._events):[]}},"./node_modules/gsap/CSSPlugin.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{CSSPlugin:()=>Ee,_createElement:()=>R,_getBBox:()=>V,checkPrefix:()=>B,default:()=>Ee});var r,s,i,o,a,l,u,c,d=n("./node_modules/gsap/gsap-core.js"),h={},f=180/Math.PI,p=Math.PI/180,m=Math.atan2,g=/([A-Z])/g,v=/(left|right|width|margin|padding|x)/i,_=/[\s,\(]\S/,y={autoAlpha:"opacity,visibility",scale:"scaleX,scaleY",alpha:"opacity"},b=function(e,t){return t.set(t.t,t.p,Math.round(1e4*(t.s+t.c*e))/1e4+t.u,t)},w=function(e,t){return t.set(t.t,t.p,1===e?t.e:Math.round(1e4*(t.s+t.c*e))/1e4+t.u,t)},x=function(e,t){return t.set(t.t,t.p,e?Math.round(1e4*(t.s+t.c*e))/1e4+t.u:t.b,t)},j=function(e,t){var n=t.s+t.c*e;t.set(t.t,t.p,~~(n+(n<0?-.5:.5))+t.u,t)},E=function(e,t){return t.set(t.t,t.p,e?t.e:t.b,t)},k=function(e,t){return t.set(t.t,t.p,1!==e?t.b:t.e,t)},S=function(e,t,n){return e.style[t]=n},O=function(e,t,n){return e.style.setProperty(t,n)},T=function(e,t,n){return e._gsap[t]=n},C=function(e,t,n){return e._gsap.scaleX=e._gsap.scaleY=n},A=function(e,t,n,r,s){var i=e._gsap;i.scaleX=i.scaleY=n,i.renderTransform(s,i)},P=function(e,t,n,r,s){var i=e._gsap;i[t]=n,i.renderTransform(s,i)},L="transform",D=L+"Origin",M=function(e){var t=this,n=this.target,r=n.style;if(e in h){if(this.tfm=this.tfm||{},"transform"!==e&&(~(e=y[e]||e).indexOf(",")?e.split(",").forEach((function(e){return t.tfm[e]=Q(n,e)})):this.tfm[e]=n._gsap.x?n._gsap[e]:Q(n,e)),n._gsap.svg&&(this.svg=n.getAttribute(e)||""),this.props.indexOf(L)>=0)return;e=L}r&&this.props.push(e,r[e])},N=function(e){e.translate&&(e.removeProperty("translate"),e.removeProperty("scale"),e.removeProperty("rotate"))},I=function(){var e,t,n=this.props,r=this.target,s=r.style,i=r._gsap;for(e=0;e<n.length;e+=2)n[e+1]?s[n[e]]=n[e+1]:s.removeProperty(n[e].replace(g,"-$1").toLowerCase());if(this.tfm){for(t in i.svg&&r.setAttribute("transform",this.svg||""),this.tfm)i[t]=this.tfm[t];!(e=u())||e.isStart||s[L]||(N(s),i.uncache=1)}},$=function(e,t){var n={target:e,props:[],revert:I,save:M};return t&&t.split(",").forEach((function(e){return n.save(e)})),n},R=function(e,t){var n=s.createElementNS?s.createElementNS((t||"http://www.w3.org/1999/xhtml").replace(/^https/,"http"),e):s.createElement(e);return n.style?n:s.createElement(e)},q=function e(t,n,r){var s=getComputedStyle(t);return s[n]||s.getPropertyValue(n.replace(g,"-$1").toLowerCase())||s.getPropertyValue(n)||!r&&e(t,B(n)||n,1)||""},F="O,Moz,ms,Ms,Webkit".split(","),B=function(e,t,n){var r=(t||a).style,s=5;if(e in r&&!n)return e;for(e=e.charAt(0).toUpperCase()+e.substr(1);s--&&!(F[s]+e in r););return s<0?null:(3===s?"ms":s>=0?F[s]:"")+e},U=function(){"undefined"!=typeof window&&window.document&&(r=window,s=r.document,i=s.documentElement,a=R("div")||{style:{}},R("div"),L=B(L),D=L+"Origin",a.style.cssText="border-width:0;line-height:0;position:absolute;padding:0",c=!!B("perspective"),u=d.gsap.core.reverting,o=1)},W=function e(t){var n,r=R("svg",this.ownerSVGElement&&this.ownerSVGElement.getAttribute("xmlns")||"http://www.w3.org/2000/svg"),s=this.parentNode,o=this.nextSibling,a=this.style.cssText;if(i.appendChild(r),r.appendChild(this),this.style.display="block",t)try{n=this.getBBox(),this._gsapBBox=this.getBBox,this.getBBox=e}catch(e){}else this._gsapBBox&&(n=this._gsapBBox());return s&&(o?s.insertBefore(this,o):s.appendChild(this)),i.removeChild(r),this.style.cssText=a,n},z=function(e,t){for(var n=t.length;n--;)if(e.hasAttribute(t[n]))return e.getAttribute(t[n])},V=function(e){var t;try{t=e.getBBox()}catch(n){t=W.call(e,!0)}return t&&(t.width||t.height)||e.getBBox===W||(t=W.call(e,!0)),!t||t.width||t.x||t.y?t:{x:+z(e,["x","cx","x1"])||0,y:+z(e,["y","cy","y1"])||0,width:0,height:0}},H=function(e){return!(!e.getCTM||e.parentNode&&!e.ownerSVGElement||!V(e))},G=function(e,t){if(t){var n=e.style;t in h&&t!==D&&(t=L),n.removeProperty?("ms"!==t.substr(0,2)&&"webkit"!==t.substr(0,6)||(t="-"+t),n.removeProperty(t.replace(g,"-$1").toLowerCase())):n.removeAttribute(t)}},Y=function(e,t,n,r,s,i){var o=new d.PropTween(e._pt,t,n,0,1,i?k:E);return e._pt=o,o.b=r,o.e=s,e._props.push(n),o},X={deg:1,rad:1,turn:1},J={grid:1,flex:1},K=function e(t,n,r,i){var o,l,u,c,f=parseFloat(r)||0,p=(r+"").trim().substr((f+"").length)||"px",m=a.style,g=v.test(n),_="svg"===t.tagName.toLowerCase(),y=(_?"client":"offset")+(g?"Width":"Height"),b=100,w="px"===i,x="%"===i;return i===p||!f||X[i]||X[p]?f:("px"!==p&&!w&&(f=e(t,n,r,"px")),c=t.getCTM&&H(t),!x&&"%"!==p||!h[n]&&!~n.indexOf("adius")?(m[g?"width":"height"]=b+(w?p:i),l=~n.indexOf("adius")||"em"===i&&t.appendChild&&!_?t:t.parentNode,c&&(l=(t.ownerSVGElement||{}).parentNode),l&&l!==s&&l.appendChild||(l=s.body),(u=l._gsap)&&x&&u.width&&g&&u.time===d._ticker.time&&!u.uncache?(0,d._round)(f/u.width*b):((x||"%"===p)&&!J[q(l,"display")]&&(m.position=q(t,"position")),l===t&&(m.position="static"),l.appendChild(a),o=a[y],l.removeChild(a),m.position="absolute",g&&x&&((u=(0,d._getCache)(l)).time=d._ticker.time,u.width=l[y]),(0,d._round)(w?o*f/b:o&&f?b/o*f:0))):(o=c?t.getBBox()[g?"width":"height"]:t[y],(0,d._round)(x?f/o*b:f/100*o)))},Q=function(e,t,n,r){var s;return o||U(),t in y&&"transform"!==t&&~(t=y[t]).indexOf(",")&&(t=t.split(",")[0]),h[t]&&"transform"!==t?(s=ue(e,r),s="transformOrigin"!==t?s[t]:s.svg?s.origin:ce(q(e,D))+" "+s.zOrigin+"px"):(!(s=e.style[t])||"auto"===s||r||~(s+"").indexOf("calc("))&&(s=ne[t]&&ne[t](e,t,n)||q(e,t)||(0,d._getProperty)(e,t)||("opacity"===t?1:0)),n&&!~(s+"").trim().indexOf(" ")?K(e,t,s,n)+n:s},Z=function(e,t,n,r){if(!n||"none"===n){var s=B(t,e,1),i=s&&q(e,s,1);i&&i!==n?(t=s,n=i):"borderColor"===t&&(n=q(e,"borderTopColor"))}var o,a,l,u,c,h,f,p,m,g,v,_=new d.PropTween(this._pt,e.style,t,0,1,d._renderComplexString),y=0,b=0;if(_.b=n,_.e=r,n+="","auto"===(r+="")&&(e.style[t]=r,r=q(e,t)||r,e.style[t]=n),o=[n,r],(0,d._colorStringFilter)(o),r=o[1],l=(n=o[0]).match(d._numWithUnitExp)||[],(r.match(d._numWithUnitExp)||[]).length){for(;a=d._numWithUnitExp.exec(r);)f=a[0],m=r.substring(y,a.index),c?c=(c+1)%5:"rgba("!==m.substr(-5)&&"hsla("!==m.substr(-5)||(c=1),f!==(h=l[b++]||"")&&(u=parseFloat(h)||0,v=h.substr((u+"").length),"="===f.charAt(1)&&(f=(0,d._parseRelative)(u,f)+v),p=parseFloat(f),g=f.substr((p+"").length),y=d._numWithUnitExp.lastIndex-g.length,g||(g=g||d._config.units[t]||v,y===r.length&&(r+=g,_.e+=g)),v!==g&&(u=K(e,t,h,g)||0),_._pt={_next:_._pt,p:m||1===b?m:",",s:u,c:p-u,m:c&&c<4||"zIndex"===t?Math.round:0});_.c=y<r.length?r.substring(y,r.length):""}else _.r="display"===t&&"none"===r?k:E;return d._relExp.test(r)&&(_.e=0),this._pt=_,_},ee={top:"0%",bottom:"100%",left:"0%",right:"100%",center:"50%"},te=function(e,t){if(t.tween&&t.tween._time===t.tween._dur){var n,r,s,i=t.t,o=i.style,a=t.u,l=i._gsap;if("all"===a||!0===a)o.cssText="",r=1;else for(s=(a=a.split(",")).length;--s>-1;)n=a[s],h[n]&&(r=1,n="transformOrigin"===n?D:L),G(i,n);r&&(G(i,L),l&&(l.svg&&i.removeAttribute("transform"),ue(i,1),l.uncache=1,N(o)))}},ne={clearProps:function(e,t,n,r,s){if("isFromStart"!==s.data){var i=e._pt=new d.PropTween(e._pt,t,n,0,0,te);return i.u=r,i.pr=-10,i.tween=s,e._props.push(n),1}}},re=[1,0,0,1,0,0],se={},ie=function(e){return"matrix(1, 0, 0, 1, 0, 0)"===e||"none"===e||!e},oe=function(e){var t=q(e,L);return ie(t)?re:t.substr(7).match(d._numExp).map(d._round)},ae=function(e,t){var n,r,s,o,a=e._gsap||(0,d._getCache)(e),l=e.style,u=oe(e);return a.svg&&e.getAttribute("transform")?"1,0,0,1,0,0"===(u=[(s=e.transform.baseVal.consolidate().matrix).a,s.b,s.c,s.d,s.e,s.f]).join(",")?re:u:(u!==re||e.offsetParent||e===i||a.svg||(s=l.display,l.display="block",(n=e.parentNode)&&e.offsetParent||(o=1,r=e.nextElementSibling,i.appendChild(e)),u=oe(e),s?l.display=s:G(e,"display"),o&&(r?n.insertBefore(e,r):n?n.appendChild(e):i.removeChild(e))),t&&u.length>6?[u[0],u[1],u[4],u[5],u[12],u[13]]:u)},le=function(e,t,n,r,s,i){var o,a,l,u=e._gsap,c=s||ae(e,!0),d=u.xOrigin||0,h=u.yOrigin||0,f=u.xOffset||0,p=u.yOffset||0,m=c[0],g=c[1],v=c[2],_=c[3],y=c[4],b=c[5],w=t.split(" "),x=parseFloat(w[0])||0,j=parseFloat(w[1])||0;n?c!==re&&(a=m*_-g*v)&&(l=x*(-g/a)+j*(m/a)-(m*b-g*y)/a,x=x*(_/a)+j*(-v/a)+(v*b-_*y)/a,j=l):(x=(o=V(e)).x+(~w[0].indexOf("%")?x/100*o.width:x),j=o.y+(~(w[1]||w[0]).indexOf("%")?j/100*o.height:j)),r||!1!==r&&u.smooth?(y=x-d,b=j-h,u.xOffset=f+(y*m+b*v)-y,u.yOffset=p+(y*g+b*_)-b):u.xOffset=u.yOffset=0,u.xOrigin=x,u.yOrigin=j,u.smooth=!!r,u.origin=t,u.originIsAbsolute=!!n,e.style[D]="0px 0px",i&&(Y(i,u,"xOrigin",d,x),Y(i,u,"yOrigin",h,j),Y(i,u,"xOffset",f,u.xOffset),Y(i,u,"yOffset",p,u.yOffset)),e.setAttribute("data-svg-origin",x+" "+j)},ue=function(e,t){var n=e._gsap||new d.GSCache(e);if("x"in n&&!t&&!n.uncache)return n;var r,s,i,o,a,l,u,h,g,v,_,y,b,w,x,j,E,k,S,O,T,C,A,P,M,N,I,$,R,F,B,U,W=e.style,z=n.scaleX<0,V="px",G="deg",Y=getComputedStyle(e),X=q(e,D)||"0";return r=s=i=l=u=h=g=v=_=0,o=a=1,n.svg=!(!e.getCTM||!H(e)),Y.translate&&("none"===Y.translate&&"none"===Y.scale&&"none"===Y.rotate||(W[L]=("none"!==Y.translate?"translate3d("+(Y.translate+" 0 0").split(" ").slice(0,3).join(", ")+") ":"")+("none"!==Y.rotate?"rotate("+Y.rotate+") ":"")+("none"!==Y.scale?"scale("+Y.scale.split(" ").join(",")+") ":"")+Y[L]),W.scale=W.rotate=W.translate="none"),w=ae(e,n.svg),n.svg&&(P=(!n.uncache||"0px 0px"===X)&&!t&&e.getAttribute("data-svg-origin"),le(e,P||X,!!P||n.originIsAbsolute,!1!==n.smooth,w)),y=n.xOrigin||0,b=n.yOrigin||0,w!==re&&(k=w[0],S=w[1],O=w[2],T=w[3],r=C=w[4],s=A=w[5],6===w.length?(o=Math.sqrt(k*k+S*S),a=Math.sqrt(T*T+O*O),l=k||S?m(S,k)*f:0,(g=O||T?m(O,T)*f+l:0)&&(a*=Math.abs(Math.cos(g*p))),n.svg&&(r-=y-(y*k+b*O),s-=b-(y*S+b*T))):(U=w[6],F=w[7],I=w[8],$=w[9],R=w[10],B=w[11],r=w[12],s=w[13],i=w[14],u=(x=m(U,R))*f,x&&(P=C*(j=Math.cos(-x))+I*(E=Math.sin(-x)),M=A*j+$*E,N=U*j+R*E,I=C*-E+I*j,$=A*-E+$*j,R=U*-E+R*j,B=F*-E+B*j,C=P,A=M,U=N),h=(x=m(-O,R))*f,x&&(j=Math.cos(-x),B=T*(E=Math.sin(-x))+B*j,k=P=k*j-I*E,S=M=S*j-$*E,O=N=O*j-R*E),l=(x=m(S,k))*f,x&&(P=k*(j=Math.cos(x))+S*(E=Math.sin(x)),M=C*j+A*E,S=S*j-k*E,A=A*j-C*E,k=P,C=M),u&&Math.abs(u)+Math.abs(l)>359.9&&(u=l=0,h=180-h),o=(0,d._round)(Math.sqrt(k*k+S*S+O*O)),a=(0,d._round)(Math.sqrt(A*A+U*U)),x=m(C,A),g=Math.abs(x)>2e-4?x*f:0,_=B?1/(B<0?-B:B):0),n.svg&&(P=e.getAttribute("transform"),n.forceCSS=e.setAttribute("transform","")||!ie(q(e,L)),P&&e.setAttribute("transform",P))),Math.abs(g)>90&&Math.abs(g)<270&&(z?(o*=-1,g+=l<=0?180:-180,l+=l<=0?180:-180):(a*=-1,g+=g<=0?180:-180)),t=t||n.uncache,n.x=r-((n.xPercent=r&&(!t&&n.xPercent||(Math.round(e.offsetWidth/2)===Math.round(-r)?-50:0)))?e.offsetWidth*n.xPercent/100:0)+V,n.y=s-((n.yPercent=s&&(!t&&n.yPercent||(Math.round(e.offsetHeight/2)===Math.round(-s)?-50:0)))?e.offsetHeight*n.yPercent/100:0)+V,n.z=i+V,n.scaleX=(0,d._round)(o),n.scaleY=(0,d._round)(a),n.rotation=(0,d._round)(l)+G,n.rotationX=(0,d._round)(u)+G,n.rotationY=(0,d._round)(h)+G,n.skewX=g+G,n.skewY=v+G,n.transformPerspective=_+V,(n.zOrigin=parseFloat(X.split(" ")[2])||0)&&(W[D]=ce(X)),n.xOffset=n.yOffset=0,n.force3D=d._config.force3D,n.renderTransform=n.svg?ve:c?ge:he,n.uncache=0,n},ce=function(e){return(e=e.split(" "))[0]+" "+e[1]},de=function(e,t,n){var r=(0,d.getUnit)(t);return(0,d._round)(parseFloat(t)+parseFloat(K(e,"x",n+"px",r)))+r},he=function(e,t){t.z="0px",t.rotationY=t.rotationX="0deg",t.force3D=0,ge(e,t)},fe="0deg",pe="0px",me=") ",ge=function(e,t){var n=t||this,r=n.xPercent,s=n.yPercent,i=n.x,o=n.y,a=n.z,l=n.rotation,u=n.rotationY,c=n.rotationX,d=n.skewX,h=n.skewY,f=n.scaleX,m=n.scaleY,g=n.transformPerspective,v=n.force3D,_=n.target,y=n.zOrigin,b="",w="auto"===v&&e&&1!==e||!0===v;if(y&&(c!==fe||u!==fe)){var x,j=parseFloat(u)*p,E=Math.sin(j),k=Math.cos(j);j=parseFloat(c)*p,x=Math.cos(j),i=de(_,i,E*x*-y),o=de(_,o,-Math.sin(j)*-y),a=de(_,a,k*x*-y+y)}g!==pe&&(b+="perspective("+g+me),(r||s)&&(b+="translate("+r+"%, "+s+"%) "),(w||i!==pe||o!==pe||a!==pe)&&(b+=a!==pe||w?"translate3d("+i+", "+o+", "+a+") ":"translate("+i+", "+o+me),l!==fe&&(b+="rotate("+l+me),u!==fe&&(b+="rotateY("+u+me),c!==fe&&(b+="rotateX("+c+me),d===fe&&h===fe||(b+="skew("+d+", "+h+me),1===f&&1===m||(b+="scale("+f+", "+m+me),_.style[L]=b||"translate(0, 0)"},ve=function(e,t){var n,r,s,i,o,a=t||this,l=a.xPercent,u=a.yPercent,c=a.x,h=a.y,f=a.rotation,m=a.skewX,g=a.skewY,v=a.scaleX,_=a.scaleY,y=a.target,b=a.xOrigin,w=a.yOrigin,x=a.xOffset,j=a.yOffset,E=a.forceCSS,k=parseFloat(c),S=parseFloat(h);f=parseFloat(f),m=parseFloat(m),(g=parseFloat(g))&&(m+=g=parseFloat(g),f+=g),f||m?(f*=p,m*=p,n=Math.cos(f)*v,r=Math.sin(f)*v,s=Math.sin(f-m)*-_,i=Math.cos(f-m)*_,m&&(g*=p,o=Math.tan(m-g),s*=o=Math.sqrt(1+o*o),i*=o,g&&(o=Math.tan(g),n*=o=Math.sqrt(1+o*o),r*=o)),n=(0,d._round)(n),r=(0,d._round)(r),s=(0,d._round)(s),i=(0,d._round)(i)):(n=v,i=_,r=s=0),(k&&!~(c+"").indexOf("px")||S&&!~(h+"").indexOf("px"))&&(k=K(y,"x",c,"px"),S=K(y,"y",h,"px")),(b||w||x||j)&&(k=(0,d._round)(k+b-(b*n+w*s)+x),S=(0,d._round)(S+w-(b*r+w*i)+j)),(l||u)&&(o=y.getBBox(),k=(0,d._round)(k+l/100*o.width),S=(0,d._round)(S+u/100*o.height)),o="matrix("+n+","+r+","+s+","+i+","+k+","+S+")",y.setAttribute("transform",o),E&&(y.style[L]=o)},_e=function(e,t,n,r,s){var i,o,a=360,l=(0,d._isString)(s),u=parseFloat(s)*(l&&~s.indexOf("rad")?f:1)-r,c=r+u+"deg";return l&&("short"===(i=s.split("_")[1])&&(u%=a)!==u%180&&(u+=u<0?a:-360),"cw"===i&&u<0?u=(u+36e9)%a-~~(u/a)*a:"ccw"===i&&u>0&&(u=(u-36e9)%a-~~(u/a)*a)),e._pt=o=new d.PropTween(e._pt,t,n,r,u,w),o.e=c,o.u="deg",e._props.push(n),o},ye=function(e,t){for(var n in t)e[n]=t[n];return e},be=function(e,t,n){var r,s,i,o,a,l,u,c=ye({},n._gsap),f=n.style;for(s in c.svg?(i=n.getAttribute("transform"),n.setAttribute("transform",""),f[L]=t,r=ue(n,1),G(n,L),n.setAttribute("transform",i)):(i=getComputedStyle(n)[L],f[L]=t,r=ue(n,1),f[L]=i),h)(i=c[s])!==(o=r[s])&&"perspective,force3D,transformOrigin,svgOrigin".indexOf(s)<0&&(a=(0,d.getUnit)(i)!==(u=(0,d.getUnit)(o))?K(n,s,i,u):parseFloat(i),l=parseFloat(o),e._pt=new d.PropTween(e._pt,r,s,a,l-a,b),e._pt.u=u||0,e._props.push(s));ye(r,c)};(0,d._forEachName)("padding,margin,Width,Radius",(function(e,t){var n="Top",r="Right",s="Bottom",i="Left",o=(t<3?[n,r,s,i]:[n+i,n+r,s+r,s+i]).map((function(n){return t<2?e+n:"border"+n+e}));ne[t>1?"border"+e:e]=function(e,t,n,r,s){var i,a;if(arguments.length<4)return i=o.map((function(t){return Q(e,t,n)})),5===(a=i.join(" ")).split(i[0]).length?i[0]:a;i=(r+"").split(" "),a={},o.forEach((function(e,t){return a[e]=i[t]=i[t]||i[(t-1)/2|0]})),e.init(t,a,s)}}));var we,xe,je,Ee={name:"css",register:U,targetTest:function(e){return e.style&&e.nodeType},init:function(e,t,n,r,s){var i,a,l,u,c,f,p,m,g,v,w,E,k,S,O,T,C,A,P,M,N=this._props,I=e.style,R=n.vars.startAt;for(p in o||U(),this.styles=this.styles||$(e),T=this.styles.props,this.tween=n,t)if("autoRound"!==p&&(a=t[p],!d._plugins[p]||!(0,d._checkPlugin)(p,t,n,r,e,s)))if(c=typeof a,f=ne[p],"function"===c&&(c=typeof(a=a.call(n,r,e,s))),"string"===c&&~a.indexOf("random(")&&(a=(0,d._replaceRandom)(a)),f)f(this,e,p,a,n)&&(O=1);else if("--"===p.substr(0,2))i=(getComputedStyle(e).getPropertyValue(p)+"").trim(),a+="",d._colorExp.lastIndex=0,d._colorExp.test(i)||(m=(0,d.getUnit)(i),g=(0,d.getUnit)(a)),g?m!==g&&(i=K(e,p,i,g)+g):m&&(a+=m),this.add(I,"setProperty",i,a,r,s,0,0,p),N.push(p),T.push(p,I[p]);else if("undefined"!==c){if(R&&p in R?(i="function"==typeof R[p]?R[p].call(n,r,e,s):R[p],(0,d._isString)(i)&&~i.indexOf("random(")&&(i=(0,d._replaceRandom)(i)),(0,d.getUnit)(i+"")||(i+=d._config.units[p]||(0,d.getUnit)(Q(e,p))||""),"="===(i+"").charAt(1)&&(i=Q(e,p))):i=Q(e,p),u=parseFloat(i),(v="string"===c&&"="===a.charAt(1)&&a.substr(0,2))&&(a=a.substr(2)),l=parseFloat(a),p in y&&("autoAlpha"===p&&(1===u&&"hidden"===Q(e,"visibility")&&l&&(u=0),T.push("visibility",I.visibility),Y(this,I,"visibility",u?"inherit":"hidden",l?"inherit":"hidden",!l)),"scale"!==p&&"transform"!==p&&~(p=y[p]).indexOf(",")&&(p=p.split(",")[0])),w=p in h)if(this.styles.save(p),E||((k=e._gsap).renderTransform&&!t.parseTransform||ue(e,t.parseTransform),S=!1!==t.smoothOrigin&&k.smooth,(E=this._pt=new d.PropTween(this._pt,I,L,0,1,k.renderTransform,k,0,-1)).dep=1),"scale"===p)this._pt=new d.PropTween(this._pt,k,"scaleY",k.scaleY,(v?(0,d._parseRelative)(k.scaleY,v+l):l)-k.scaleY||0,b),this._pt.u=0,N.push("scaleY",p),p+="X";else{if("transformOrigin"===p){T.push(D,I[D]),A=void 0,P=void 0,M=void 0,A=(C=a).split(" "),P=A[0],M=A[1]||"50%","top"!==P&&"bottom"!==P&&"left"!==M&&"right"!==M||(C=P,P=M,M=C),A[0]=ee[P]||P,A[1]=ee[M]||M,a=A.join(" "),k.svg?le(e,a,0,S,0,this):((g=parseFloat(a.split(" ")[2])||0)!==k.zOrigin&&Y(this,k,"zOrigin",k.zOrigin,g),Y(this,I,p,ce(i),ce(a)));continue}if("svgOrigin"===p){le(e,a,1,S,0,this);continue}if(p in se){_e(this,k,p,u,v?(0,d._parseRelative)(u,v+a):a);continue}if("smoothOrigin"===p){Y(this,k,"smooth",k.smooth,a);continue}if("force3D"===p){k[p]=a;continue}if("transform"===p){be(this,a,e);continue}}else p in I||(p=B(p)||p);if(w||(l||0===l)&&(u||0===u)&&!_.test(a)&&p in I)l||(l=0),(m=(i+"").substr((u+"").length))!==(g=(0,d.getUnit)(a)||(p in d._config.units?d._config.units[p]:m))&&(u=K(e,p,i,g)),this._pt=new d.PropTween(this._pt,w?k:I,p,u,(v?(0,d._parseRelative)(u,v+l):l)-u,w||"px"!==g&&"zIndex"!==p||!1===t.autoRound?b:j),this._pt.u=g||0,m!==g&&"%"!==g&&(this._pt.b=i,this._pt.r=x);else if(p in I)Z.call(this,e,p,i,v?v+a:a);else{if(!(p in e)){(0,d._missingPlugin)(p,a);continue}this.add(e,p,i||e[p],v?v+a:a,r,s)}w||T.push(p,I[p]),N.push(p)}O&&(0,d._sortPropTweensByPriority)(this)},render:function(e,t){if(t.tween._time||!u())for(var n=t._pt;n;)n.r(e,n.d),n=n._next;else t.styles.revert()},get:Q,aliases:y,getSetter:function(e,t,n){var r=y[t];return r&&r.indexOf(",")<0&&(t=r),t in h&&t!==D&&(e._gsap.x||Q(e,"x"))?n&&l===n?"scale"===t?C:T:(l=n||{})&&("scale"===t?A:P):e.style&&!(0,d._isUndefined)(e.style[t])?S:~t.indexOf("-")?O:(0,d._getSetter)(e,t)},core:{_removeProperty:G,_getMatrix:ae}};d.gsap.utils.checkPrefix=B,d.gsap.core.getStyleSaver=$,we="x,y,z,scale,scaleX,scaleY,xPercent,yPercent",xe="rotation,rotationX,rotationY,skewX,skewY",je=(0,d._forEachName)(we+","+xe+",transform,transformOrigin,svgOrigin,force3D,smoothOrigin,transformPerspective",(function(e){h[e]=1})),(0,d._forEachName)(xe,(function(e){d._config.units[e]="deg",se[e]=1})),y[je[13]]=we+","+xe,(0,d._forEachName)("0:translateX,1:translateY,2:translateZ,8:rotate,8:rotationZ,8:rotateZ,9:rotateX,10:rotateY",(function(e){var t=e.split(":");y[t[1]]=je[t[0]]})),(0,d._forEachName)("x,y,z,top,right,bottom,left,width,height,fontSize,padding,margin,perspective",(function(e){d._config.units[e]="px"})),d.gsap.registerPlugin(Ee)},"./node_modules/gsap/gsap-core.js":(e,t,n)=>{"use strict";function r(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function s(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}n.r(t),n.d(t,{Animation:()=>Ht,Back:()=>zn,Bounce:()=>Hn,Circ:()=>Xn,Cubic:()=>qn,Elastic:()=>Wn,Expo:()=>Yn,GSCache:()=>Vt,Linear:()=>$n,Power0:()=>Ln,Power1:()=>Dn,Power2:()=>Mn,Power3:()=>Nn,Power4:()=>In,PropTween:()=>yn,Quad:()=>Rn,Quart:()=>Fn,Quint:()=>Bn,Sine:()=>Gn,SteppedEase:()=>Vn,Strong:()=>Un,Timeline:()=>Gt,TimelineLite:()=>Gt,TimelineMax:()=>Gt,Tween:()=>sn,TweenLite:()=>sn,TweenMax:()=>sn,_checkPlugin:()=>Qt,_colorExp:()=>Ct,_colorStringFilter:()=>Pt,_config:()=>b,_forEachName:()=>fe,_getCache:()=>de,_getProperty:()=>he,_getSetter:()=>cn,_isString:()=>A,_isUndefined:()=>D,_missingPlugin:()=>J,_numExp:()=>B,_numWithUnitExp:()=>U,_parseRelative:()=>ge,_plugins:()=>ie,_relExp:()=>z,_removeLinkedListItem:()=>Te,_renderComplexString:()=>fn,_replaceRandom:()=>gt,_round:()=>pe,_roundModifier:()=>at,_setDefaults:()=>xe,_sortPropTweensByPriority:()=>_n,_ticker:()=>Lt,clamp:()=>Ze,default:()=>Pn,distribute:()=>ot,getUnit:()=>Qe,gsap:()=>Pn,interpolate:()=>_t,mapRange:()=>vt,normalize:()=>ht,pipe:()=>ct,random:()=>ut,selector:()=>st,shuffle:()=>it,snap:()=>lt,splitColor:()=>St,toArray:()=>rt,unitize:()=>dt,wrap:()=>pt,wrapYoyo:()=>mt});var i,o,a,l,u,c,d,h,f,p,m,g,v,_,y,b={autoSleep:120,force3D:"auto",nullTargetWarn:1,units:{lineHeight:""}},w={duration:.5,overwrite:!1,delay:0},x=1e8,j=1e-8,E=2*Math.PI,k=E/4,S=0,O=Math.sqrt,T=Math.cos,C=Math.sin,A=function(e){return"string"==typeof e},P=function(e){return"function"==typeof e},L=function(e){return"number"==typeof e},D=function(e){return void 0===e},M=function(e){return"object"==typeof e},N=function(e){return!1!==e},I=function(){return"undefined"!=typeof window},$=function(e){return P(e)||A(e)},R="function"==typeof ArrayBuffer&&ArrayBuffer.isView||function(){},q=Array.isArray,F=/(?:-?\.?\d|\.)+/gi,B=/[-+=.]*\d+[.e\-+]*\d*[e\-+]*\d*/g,U=/[-+=.]*\d+[.e-]*\d*[a-z%]*/g,W=/[-+=.]*\d+\.?\d*(?:e-|e\+)?\d*/gi,z=/[+-]=-?[.\d]+/,V=/[^,'"\[\]\s]+/gi,H=/^[+\-=e\s\d]*\d+[.\d]*([a-z]*|%)\s*$/i,G={},Y={},X=function(e){return(Y=je(e,G))&&Pn},J=function(e,t){return console.warn("Invalid property",e,"set to",t,"Missing plugin? gsap.registerPlugin()")},K=function(e,t){return!t&&console.warn(e)},Q=function(e,t){return e&&(G[e]=t)&&Y&&(Y[e]=t)||G},Z=function(){return 0},ee={suppressEvents:!0,isStart:!0},te={suppressEvents:!0},ne={},re=[],se={},ie={},oe={},ae=30,le=[],ue="",ce=function(e){var t,n,r=e[0];if(M(r)||P(r)||(e=[e]),!(t=(r._gsap||{}).harness)){for(n=le.length;n--&&!le[n].targetTest(r););t=le[n]}for(n=e.length;n--;)e[n]&&(e[n]._gsap||(e[n]._gsap=new Vt(e[n],t)))||e.splice(n,1);return e},de=function(e){return e._gsap||ce(rt(e))[0]._gsap},he=function(e,t,n){return(n=e[t])&&P(n)?e[t]():D(n)&&e.getAttribute&&e.getAttribute(t)||n},fe=function(e,t){return(e=e.split(",")).forEach(t)||e},pe=function(e){return Math.round(1e5*e)/1e5||0},me=function(e){return Math.round(1e7*e)/1e7||0},ge=function(e,t){var n=t.charAt(0),r=parseFloat(t.substr(2));return e=parseFloat(e),"+"===n?e+r:"-"===n?e-r:"*"===n?e*r:e/r},ve=function(e,t){for(var n=t.length,r=0;e.indexOf(t[r])<0&&++r<n;);return r<n},_e=function(){var e,t,n=re.length,r=re.slice(0);for(se={},re.length=0,e=0;e<n;e++)(t=r[e])&&t._lazy&&(t.render(t._lazy[0],t._lazy[1],!0)._lazy=0)},ye=function(e,t,n,r){re.length&&_e(),e.render(t,n,r||o),re.length&&_e()},be=function(e){var t=parseFloat(e);return(t||0===t)&&(e+"").match(V).length<2?t:A(e)?e.trim():e},we=function(e){return e},xe=function(e,t){for(var n in t)n in e||(e[n]=t[n]);return e},je=function(e,t){for(var n in t)e[n]=t[n];return e},Ee=function e(t,n){for(var r in n)"__proto__"!==r&&"constructor"!==r&&"prototype"!==r&&(t[r]=M(n[r])?e(t[r]||(t[r]={}),n[r]):n[r]);return t},ke=function(e,t){var n,r={};for(n in e)n in t||(r[n]=e[n]);return r},Se=function(e){var t,n=e.parent||l,r=e.keyframes?(t=q(e.keyframes),function(e,n){for(var r in n)r in e||"duration"===r&&t||"ease"===r||(e[r]=n[r])}):xe;if(N(e.inherit))for(;n;)r(e,n.vars.defaults),n=n.parent||n._dp;return e},Oe=function(e,t,n,r,s){void 0===n&&(n="_first"),void 0===r&&(r="_last");var i,o=e[r];if(s)for(i=t[s];o&&o[s]>i;)o=o._prev;return o?(t._next=o._next,o._next=t):(t._next=e[n],e[n]=t),t._next?t._next._prev=t:e[r]=t,t._prev=o,t.parent=t._dp=e,t},Te=function(e,t,n,r){void 0===n&&(n="_first"),void 0===r&&(r="_last");var s=t._prev,i=t._next;s?s._next=i:e[n]===t&&(e[n]=i),i?i._prev=s:e[r]===t&&(e[r]=s),t._next=t._prev=t.parent=null},Ce=function(e,t){e.parent&&(!t||e.parent.autoRemoveChildren)&&e.parent.remove(e),e._act=0},Ae=function(e,t){if(e&&(!t||t._end>e._dur||t._start<0))for(var n=e;n;)n._dirty=1,n=n.parent;return e},Pe=function(e){for(var t=e.parent;t&&t.parent;)t._dirty=1,t.totalDuration(),t=t.parent;return e},Le=function(e,t,n,r){return e._startAt&&(o?e._startAt.revert(te):e.vars.immediateRender&&!e.vars.autoRevert||e._startAt.render(t,!0,r))},De=function e(t){return!t||t._ts&&e(t.parent)},Me=function(e){return e._repeat?Ne(e._tTime,e=e.duration()+e._rDelay)*e:0},Ne=function(e,t){var n=Math.floor(e/=t);return e&&n===e?n-1:n},Ie=function(e,t){return(e-t._start)*t._ts+(t._ts>=0?0:t._dirty?t.totalDuration():t._tDur)},$e=function(e){return e._end=me(e._start+(e._tDur/Math.abs(e._ts||e._rts||j)||0))},Re=function(e,t){var n=e._dp;return n&&n.smoothChildTiming&&e._ts&&(e._start=me(n._time-(e._ts>0?t/e._ts:((e._dirty?e.totalDuration():e._tDur)-t)/-e._ts)),$e(e),n._dirty||Ae(n,e)),e},qe=function(e,t){var n;if((t._time||t._initted&&!t._dur)&&(n=Ie(e.rawTime(),t),(!t._dur||Ke(0,t.totalDuration(),n)-t._tTime>j)&&t.render(n,!0)),Ae(e,t)._dp&&e._initted&&e._time>=e._dur&&e._ts){if(e._dur<e.duration())for(n=e;n._dp;)n.rawTime()>=0&&n.totalTime(n._tTime),n=n._dp;e._zTime=-1e-8}},Fe=function(e,t,n,r){return t.parent&&Ce(t),t._start=me((L(n)?n:n||e!==l?Ye(e,n,t):e._time)+t._delay),t._end=me(t._start+(t.totalDuration()/Math.abs(t.timeScale())||0)),Oe(e,t,"_first","_last",e._sort?"_start":0),ze(t)||(e._recent=t),r||qe(e,t),e._ts<0&&Re(e,e._tTime),e},Be=function(e,t){return(G.ScrollTrigger||J("scrollTrigger",t))&&G.ScrollTrigger.create(t,e)},Ue=function(e,t,n,r){return Zt(e,t),e._initted?!n&&e._pt&&(e._dur&&!1!==e.vars.lazy||!e._dur&&e.vars.lazy)&&f!==Lt.frame?(re.push(e),e._lazy=[t,r],1):void 0:1},We=function e(t){var n=t.parent;return n&&n._ts&&n._initted&&!n._lock&&(n.rawTime()<0||e(n))},ze=function(e){var t=e.data;return"isFromStart"===t||"isStart"===t},Ve=function(e,t,n,r){var s=e._repeat,i=me(t)||0,o=e._tTime/e._tDur;return o&&!r&&(e._time*=i/e._dur),e._dur=i,e._tDur=s?s<0?1e10:me(i*(s+1)+e._rDelay*s):i,o>0&&!r?Re(e,e._tTime=e._tDur*o):e.parent&&$e(e),n||Ae(e.parent,e),e},He=function(e){return e instanceof Gt?Ae(e):Ve(e,e._dur)},Ge={_start:0,endTime:Z,totalDuration:Z},Ye=function e(t,n,r){var s,i,o,a=t.labels,l=t._recent||Ge,u=t.duration()>=x?l.endTime(!1):t._dur;return A(n)&&(isNaN(n)||n in a)?(i=n.charAt(0),o="%"===n.substr(-1),s=n.indexOf("="),"<"===i||">"===i?(s>=0&&(n=n.replace(/=/,"")),("<"===i?l._start:l.endTime(l._repeat>=0))+(parseFloat(n.substr(1))||0)*(o?(s<0?l:r).totalDuration()/100:1)):s<0?(n in a||(a[n]=u),a[n]):(i=parseFloat(n.charAt(s-1)+n.substr(s+1)),o&&r&&(i=i/100*(q(r)?r[0]:r).totalDuration()),s>1?e(t,n.substr(0,s-1),r)+i:u+i)):null==n?u:+n},Xe=function(e,t,n){var r,s,i=L(t[1]),o=(i?2:1)+(e<2?0:1),a=t[o];if(i&&(a.duration=t[1]),a.parent=n,e){for(r=a,s=n;s&&!("immediateRender"in r);)r=s.vars.defaults||{},s=N(s.vars.inherit)&&s.parent;a.immediateRender=N(r.immediateRender),e<2?a.runBackwards=1:a.startAt=t[o-1]}return new sn(t[0],a,t[o+1])},Je=function(e,t){return e||0===e?t(e):t},Ke=function(e,t,n){return n<e?e:n>t?t:n},Qe=function(e,t){return A(e)&&(t=H.exec(e))?t[1]:""},Ze=function(e,t,n){return Je(n,(function(n){return Ke(e,t,n)}))},et=[].slice,tt=function(e,t){return e&&M(e)&&"length"in e&&(!t&&!e.length||e.length-1 in e&&M(e[0]))&&!e.nodeType&&e!==u},nt=function(e,t,n){return void 0===n&&(n=[]),e.forEach((function(e){var r;return A(e)&&!t||tt(e,1)?(r=n).push.apply(r,rt(e)):n.push(e)}))||n},rt=function(e,t,n){return a&&!t&&a.selector?a.selector(e):!A(e)||n||!c&&Dt()?q(e)?nt(e,n):tt(e)?et.call(e,0):e?[e]:[]:et.call((t||d).querySelectorAll(e),0)},st=function(e){return e=rt(e)[0]||K("Invalid scope")||{},function(t){var n=e.current||e.nativeElement||e;return rt(t,n.querySelectorAll?n:n===e?K("Invalid scope")||d.createElement("div"):e)}},it=function(e){return e.sort((function(){return.5-Math.random()}))},ot=function(e){if(P(e))return e;var t=M(e)?e:{each:e},n=Ft(t.ease),r=t.from||0,s=parseFloat(t.base)||0,i={},o=r>0&&r<1,a=isNaN(r)||o,l=t.axis,u=r,c=r;return A(r)?u=c={center:.5,edges:.5,end:1}[r]||0:!o&&a&&(u=r[0],c=r[1]),function(e,o,d){var h,f,p,m,g,v,_,y,b,w=(d||t).length,j=i[w];if(!j){if(!(b="auto"===t.grid?0:(t.grid||[1,x])[1])){for(_=-x;_<(_=d[b++].getBoundingClientRect().left)&&b<w;);b--}for(j=i[w]=[],h=a?Math.min(b,w)*u-.5:r%b,f=b===x?0:a?w*c/b-.5:r/b|0,_=0,y=x,v=0;v<w;v++)p=v%b-h,m=f-(v/b|0),j[v]=g=l?Math.abs("y"===l?m:p):O(p*p+m*m),g>_&&(_=g),g<y&&(y=g);"random"===r&&it(j),j.max=_-y,j.min=y,j.v=w=(parseFloat(t.amount)||parseFloat(t.each)*(b>w?w-1:l?"y"===l?w/b:b:Math.max(b,w/b))||0)*("edges"===r?-1:1),j.b=w<0?s-w:s,j.u=Qe(t.amount||t.each)||0,n=n&&w<0?Rt(n):n}return w=(j[e]-j.min)/j.max||0,me(j.b+(n?n(w):w)*j.v)+j.u}},at=function(e){var t=Math.pow(10,((e+"").split(".")[1]||"").length);return function(n){var r=me(Math.round(parseFloat(n)/e)*e*t);return(r-r%1)/t+(L(n)?0:Qe(n))}},lt=function(e,t){var n,r,s=q(e);return!s&&M(e)&&(n=s=e.radius||x,e.values?(e=rt(e.values),(r=!L(e[0]))&&(n*=n)):e=at(e.increment)),Je(t,s?P(e)?function(t){return r=e(t),Math.abs(r-t)<=n?r:t}:function(t){for(var s,i,o=parseFloat(r?t.x:t),a=parseFloat(r?t.y:0),l=x,u=0,c=e.length;c--;)(s=r?(s=e[c].x-o)*s+(i=e[c].y-a)*i:Math.abs(e[c]-o))<l&&(l=s,u=c);return u=!n||l<=n?e[u]:t,r||u===t||L(t)?u:u+Qe(t)}:at(e))},ut=function(e,t,n,r){return Je(q(e)?!t:!0===n?!!(n=0):!r,(function(){return q(e)?e[~~(Math.random()*e.length)]:(n=n||1e-5)&&(r=n<1?Math.pow(10,(n+"").length-2):1)&&Math.floor(Math.round((e-n/2+Math.random()*(t-e+.99*n))/n)*n*r)/r}))},ct=function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(e){return t.reduce((function(e,t){return t(e)}),e)}},dt=function(e,t){return function(n){return e(parseFloat(n))+(t||Qe(n))}},ht=function(e,t,n){return vt(e,t,0,1,n)},ft=function(e,t,n){return Je(n,(function(n){return e[~~t(n)]}))},pt=function e(t,n,r){var s=n-t;return q(t)?ft(t,e(0,t.length),n):Je(r,(function(e){return(s+(e-t)%s)%s+t}))},mt=function e(t,n,r){var s=n-t,i=2*s;return q(t)?ft(t,e(0,t.length-1),n):Je(r,(function(e){return t+((e=(i+(e-t)%i)%i||0)>s?i-e:e)}))},gt=function(e){for(var t,n,r,s,i=0,o="";~(t=e.indexOf("random(",i));)r=e.indexOf(")",t),s="["===e.charAt(t+7),n=e.substr(t+7,r-t-7).match(s?V:F),o+=e.substr(i,t-i)+ut(s?n:+n[0],s?0:+n[1],+n[2]||1e-5),i=r+1;return o+e.substr(i,e.length-i)},vt=function(e,t,n,r,s){var i=t-e,o=r-n;return Je(s,(function(t){return n+((t-e)/i*o||0)}))},_t=function e(t,n,r,s){var i=isNaN(t+n)?0:function(e){return(1-e)*t+e*n};if(!i){var o,a,l,u,c,d=A(t),h={};if(!0===r&&(s=1)&&(r=null),d)t={p:t},n={p:n};else if(q(t)&&!q(n)){for(l=[],u=t.length,c=u-2,a=1;a<u;a++)l.push(e(t[a-1],t[a]));u--,i=function(e){e*=u;var t=Math.min(c,~~e);return l[t](e-t)},r=n}else s||(t=je(q(t)?[]:{},t));if(!l){for(o in n)Kt.call(h,t,o,"get",n[o]);i=function(e){return pn(e,h)||(d?t.p:t)}}}return Je(r,i)},yt=function(e,t,n){var r,s,i,o=e.labels,a=x;for(r in o)(s=o[r]-t)<0==!!n&&s&&a>(s=Math.abs(s))&&(i=r,a=s);return i},bt=function(e,t,n){var r,s,i,o=e.vars,l=o[t],u=a,c=e._ctx;if(l)return r=o[t+"Params"],s=o.callbackScope||e,n&&re.length&&_e(),c&&(a=c),i=r?l.apply(s,r):l.call(s),a=u,i},wt=function(e){return Ce(e),e.scrollTrigger&&e.scrollTrigger.kill(!1),e.progress()<1&&bt(e,"onInterrupt"),e},xt=function(e){var t=(e=!e.name&&e.default||e).name,n=P(e),r=t&&!n&&e.init?function(){this._props=[]}:e,s={init:Z,render:pn,add:Kt,kill:gn,modifier:mn,rawVars:0},i={targetTest:0,get:0,getSetter:cn,aliases:{},register:0};if(Dt(),e!==r){if(ie[t])return;xe(r,xe(ke(e,s),i)),je(r.prototype,je(s,ke(e,i))),ie[r.prop=t]=r,e.targetTest&&(le.push(r),ne[t]=1),t=("css"===t?"CSS":t.charAt(0).toUpperCase()+t.substr(1))+"Plugin"}Q(t,r),e.register&&e.register(Pn,r,yn)},jt=255,Et={aqua:[0,jt,jt],lime:[0,jt,0],silver:[192,192,192],black:[0,0,0],maroon:[128,0,0],teal:[0,128,128],blue:[0,0,jt],navy:[0,0,128],white:[jt,jt,jt],olive:[128,128,0],yellow:[jt,jt,0],orange:[jt,165,0],gray:[128,128,128],purple:[128,0,128],green:[0,128,0],red:[jt,0,0],pink:[jt,192,203],cyan:[0,jt,jt],transparent:[jt,jt,jt,0]},kt=function(e,t,n){return(6*(e+=e<0?1:e>1?-1:0)<1?t+(n-t)*e*6:e<.5?n:3*e<2?t+(n-t)*(2/3-e)*6:t)*jt+.5|0},St=function(e,t,n){var r,s,i,o,a,l,u,c,d,h,f=e?L(e)?[e>>16,e>>8&jt,e&jt]:0:Et.black;if(!f){if(","===e.substr(-1)&&(e=e.substr(0,e.length-1)),Et[e])f=Et[e];else if("#"===e.charAt(0)){if(e.length<6&&(r=e.charAt(1),s=e.charAt(2),i=e.charAt(3),e="#"+r+r+s+s+i+i+(5===e.length?e.charAt(4)+e.charAt(4):"")),9===e.length)return[(f=parseInt(e.substr(1,6),16))>>16,f>>8&jt,f&jt,parseInt(e.substr(7),16)/255];f=[(e=parseInt(e.substr(1),16))>>16,e>>8&jt,e&jt]}else if("hsl"===e.substr(0,3))if(f=h=e.match(F),t){if(~e.indexOf("="))return f=e.match(B),n&&f.length<4&&(f[3]=1),f}else o=+f[0]%360/360,a=+f[1]/100,r=2*(l=+f[2]/100)-(s=l<=.5?l*(a+1):l+a-l*a),f.length>3&&(f[3]*=1),f[0]=kt(o+1/3,r,s),f[1]=kt(o,r,s),f[2]=kt(o-1/3,r,s);else f=e.match(F)||Et.transparent;f=f.map(Number)}return t&&!h&&(r=f[0]/jt,s=f[1]/jt,i=f[2]/jt,l=((u=Math.max(r,s,i))+(c=Math.min(r,s,i)))/2,u===c?o=a=0:(d=u-c,a=l>.5?d/(2-u-c):d/(u+c),o=u===r?(s-i)/d+(s<i?6:0):u===s?(i-r)/d+2:(r-s)/d+4,o*=60),f[0]=~~(o+.5),f[1]=~~(100*a+.5),f[2]=~~(100*l+.5)),n&&f.length<4&&(f[3]=1),f},Ot=function(e){var t=[],n=[],r=-1;return e.split(Ct).forEach((function(e){var s=e.match(U)||[];t.push.apply(t,s),n.push(r+=s.length+1)})),t.c=n,t},Tt=function(e,t,n){var r,s,i,o,a="",l=(e+a).match(Ct),u=t?"hsla(":"rgba(",c=0;if(!l)return e;if(l=l.map((function(e){return(e=St(e,t,1))&&u+(t?e[0]+","+e[1]+"%,"+e[2]+"%,"+e[3]:e.join(","))+")"})),n&&(i=Ot(e),(r=n.c).join(a)!==i.c.join(a)))for(o=(s=e.replace(Ct,"1").split(U)).length-1;c<o;c++)a+=s[c]+(~r.indexOf(c)?l.shift()||u+"0,0,0,0)":(i.length?i:l.length?l:n).shift());if(!s)for(o=(s=e.split(Ct)).length-1;c<o;c++)a+=s[c]+l[c];return a+s[o]},Ct=function(){var e,t="(?:\\b(?:(?:rgb|rgba|hsl|hsla)\\(.+?\\))|\\B#(?:[0-9a-f]{3,4}){1,2}\\b";for(e in Et)t+="|"+e+"\\b";return new RegExp(t+")","gi")}(),At=/hsl[a]?\(/,Pt=function(e){var t,n=e.join(" ");if(Ct.lastIndex=0,Ct.test(n))return t=At.test(n),e[1]=Tt(e[1],t),e[0]=Tt(e[0],t,Ot(e[1])),!0},Lt=function(){var e,t,n,r,s,i,o=Date.now,a=500,l=33,f=o(),p=f,g=1e3/240,v=g,_=[],y=function n(u){var c,d,h,m,y=o()-p,b=!0===u;if(y>a&&(f+=y-l),((c=(h=(p+=y)-f)-v)>0||b)&&(m=++r.frame,s=h-1e3*r.time,r.time=h/=1e3,v+=c+(c>=g?4:g-c),d=1),b||(e=t(n)),d)for(i=0;i<_.length;i++)_[i](h,s,m,u)};return r={time:0,frame:0,tick:function(){y(!0)},deltaRatio:function(e){return s/(1e3/(e||60))},wake:function(){h&&(!c&&I()&&(u=c=window,d=u.document||{},G.gsap=Pn,(u.gsapVersions||(u.gsapVersions=[])).push(Pn.version),X(Y||u.GreenSockGlobals||!u.gsap&&u||{}),n=u.requestAnimationFrame),e&&r.sleep(),t=n||function(e){return setTimeout(e,v-1e3*r.time+1|0)},m=1,y(2))},sleep:function(){(n?u.cancelAnimationFrame:clearTimeout)(e),m=0,t=Z},lagSmoothing:function(e,t){a=e||1e8,l=Math.min(t,a,0)},fps:function(e){g=1e3/(e||240),v=1e3*r.time+g},add:function(e,t,n){var s=t?function(t,n,i,o){e(t,n,i,o),r.remove(s)}:e;return r.remove(e),_[n?"unshift":"push"](s),Dt(),s},remove:function(e,t){~(t=_.indexOf(e))&&_.splice(t,1)&&i>=t&&i--},_listeners:_}}(),Dt=function(){return!m&&Lt.wake()},Mt={},Nt=/^[\d.\-M][\d.\-,\s]/,It=/["']/g,$t=function(e){for(var t,n,r,s={},i=e.substr(1,e.length-3).split(":"),o=i[0],a=1,l=i.length;a<l;a++)n=i[a],t=a!==l-1?n.lastIndexOf(","):n.length,r=n.substr(0,t),s[o]=isNaN(r)?r.replace(It,"").trim():+r,o=n.substr(t+1).trim();return s},Rt=function(e){return function(t){return 1-e(1-t)}},qt=function e(t,n){for(var r,s=t._first;s;)s instanceof Gt?e(s,n):!s.vars.yoyoEase||s._yoyo&&s._repeat||s._yoyo===n||(s.timeline?e(s.timeline,n):(r=s._ease,s._ease=s._yEase,s._yEase=r,s._yoyo=n)),s=s._next},Ft=function(e,t){return e&&(P(e)?e:Mt[e]||function(e){var t,n,r,s,i=(e+"").split("("),o=Mt[i[0]];return o&&i.length>1&&o.config?o.config.apply(null,~e.indexOf("{")?[$t(i[1])]:(t=e,n=t.indexOf("(")+1,r=t.indexOf(")"),s=t.indexOf("(",n),t.substring(n,~s&&s<r?t.indexOf(")",r+1):r)).split(",").map(be)):Mt._CE&&Nt.test(e)?Mt._CE("",e):o}(e))||t},Bt=function(e,t,n,r){void 0===n&&(n=function(e){return 1-t(1-e)}),void 0===r&&(r=function(e){return e<.5?t(2*e)/2:1-t(2*(1-e))/2});var s,i={easeIn:t,easeOut:n,easeInOut:r};return fe(e,(function(e){for(var t in Mt[e]=G[e]=i,Mt[s=e.toLowerCase()]=n,i)Mt[s+("easeIn"===t?".in":"easeOut"===t?".out":".inOut")]=Mt[e+"."+t]=i[t]})),i},Ut=function(e){return function(t){return t<.5?(1-e(1-2*t))/2:.5+e(2*(t-.5))/2}},Wt=function e(t,n,r){var s=n>=1?n:1,i=(r||(t?.3:.45))/(n<1?n:1),o=i/E*(Math.asin(1/s)||0),a=function(e){return 1===e?1:s*Math.pow(2,-10*e)*C((e-o)*i)+1},l="out"===t?a:"in"===t?function(e){return 1-a(1-e)}:Ut(a);return i=E/i,l.config=function(n,r){return e(t,n,r)},l},zt=function e(t,n){void 0===n&&(n=1.70158);var r=function(e){return e?--e*e*((n+1)*e+n)+1:0},s="out"===t?r:"in"===t?function(e){return 1-r(1-e)}:Ut(r);return s.config=function(n){return e(t,n)},s};fe("Linear,Quad,Cubic,Quart,Quint,Strong",(function(e,t){var n=t<5?t+1:t;Bt(e+",Power"+(n-1),t?function(e){return Math.pow(e,n)}:function(e){return e},(function(e){return 1-Math.pow(1-e,n)}),(function(e){return e<.5?Math.pow(2*e,n)/2:1-Math.pow(2*(1-e),n)/2}))})),Mt.Linear.easeNone=Mt.none=Mt.Linear.easeIn,Bt("Elastic",Wt("in"),Wt("out"),Wt()),g=7.5625,_=1/(v=2.75),Bt("Bounce",(function(e){return 1-y(1-e)}),y=function(e){return e<_?g*e*e:e<.7272727272727273?g*Math.pow(e-1.5/v,2)+.75:e<.9090909090909092?g*(e-=2.25/v)*e+.9375:g*Math.pow(e-2.625/v,2)+.984375}),Bt("Expo",(function(e){return e?Math.pow(2,10*(e-1)):0})),Bt("Circ",(function(e){return-(O(1-e*e)-1)})),Bt("Sine",(function(e){return 1===e?1:1-T(e*k)})),Bt("Back",zt("in"),zt("out"),zt()),Mt.SteppedEase=Mt.steps=G.SteppedEase={config:function(e,t){void 0===e&&(e=1);var n=1/e,r=e+(t?0:1),s=t?1:0;return function(e){return((r*Ke(0,.99999999,e)|0)+s)*n}}},w.ease=Mt["quad.out"],fe("onComplete,onUpdate,onStart,onRepeat,onReverseComplete,onInterrupt",(function(e){return ue+=e+","+e+"Params,"}));var Vt=function(e,t){this.id=S++,e._gsap=this,this.target=e,this.harness=t,this.get=t?t.get:he,this.set=t?t.getSetter:cn},Ht=function(){function e(e){this.vars=e,this._delay=+e.delay||0,(this._repeat=e.repeat===1/0?-2:e.repeat||0)&&(this._rDelay=e.repeatDelay||0,this._yoyo=!!e.yoyo||!!e.yoyoEase),this._ts=1,Ve(this,+e.duration,1,1),this.data=e.data,a&&(this._ctx=a,a.data.push(this)),m||Lt.wake()}var t=e.prototype;return t.delay=function(e){return e||0===e?(this.parent&&this.parent.smoothChildTiming&&this.startTime(this._start+e-this._delay),this._delay=e,this):this._delay},t.duration=function(e){return arguments.length?this.totalDuration(this._repeat>0?e+(e+this._rDelay)*this._repeat:e):this.totalDuration()&&this._dur},t.totalDuration=function(e){return arguments.length?(this._dirty=0,Ve(this,this._repeat<0?e:(e-this._repeat*this._rDelay)/(this._repeat+1))):this._tDur},t.totalTime=function(e,t){if(Dt(),!arguments.length)return this._tTime;var n=this._dp;if(n&&n.smoothChildTiming&&this._ts){for(Re(this,e),!n._dp||n.parent||qe(n,this);n&&n.parent;)n.parent._time!==n._start+(n._ts>=0?n._tTime/n._ts:(n.totalDuration()-n._tTime)/-n._ts)&&n.totalTime(n._tTime,!0),n=n.parent;!this.parent&&this._dp.autoRemoveChildren&&(this._ts>0&&e<this._tDur||this._ts<0&&e>0||!this._tDur&&!e)&&Fe(this._dp,this,this._start-this._delay)}return(this._tTime!==e||!this._dur&&!t||this._initted&&Math.abs(this._zTime)===j||!e&&!this._initted&&(this.add||this._ptLookup))&&(this._ts||(this._pTime=e),ye(this,e,t)),this},t.time=function(e,t){return arguments.length?this.totalTime(Math.min(this.totalDuration(),e+Me(this))%(this._dur+this._rDelay)||(e?this._dur:0),t):this._time},t.totalProgress=function(e,t){return arguments.length?this.totalTime(this.totalDuration()*e,t):this.totalDuration()?Math.min(1,this._tTime/this._tDur):this.ratio},t.progress=function(e,t){return arguments.length?this.totalTime(this.duration()*(!this._yoyo||1&this.iteration()?e:1-e)+Me(this),t):this.duration()?Math.min(1,this._time/this._dur):this.ratio},t.iteration=function(e,t){var n=this.duration()+this._rDelay;return arguments.length?this.totalTime(this._time+(e-1)*n,t):this._repeat?Ne(this._tTime,n)+1:1},t.timeScale=function(e){if(!arguments.length)return-1e-8===this._rts?0:this._rts;if(this._rts===e)return this;var t=this.parent&&this._ts?Ie(this.parent._time,this):this._tTime;return this._rts=+e||0,this._ts=this._ps||-1e-8===e?0:this._rts,this.totalTime(Ke(-this._delay,this._tDur,t),!0),$e(this),Pe(this)},t.paused=function(e){return arguments.length?(this._ps!==e&&(this._ps=e,e?(this._pTime=this._tTime||Math.max(-this._delay,this.rawTime()),this._ts=this._act=0):(Dt(),this._ts=this._rts,this.totalTime(this.parent&&!this.parent.smoothChildTiming?this.rawTime():this._tTime||this._pTime,1===this.progress()&&Math.abs(this._zTime)!==j&&(this._tTime-=j)))),this):this._ps},t.startTime=function(e){if(arguments.length){this._start=e;var t=this.parent||this._dp;return t&&(t._sort||!this.parent)&&Fe(t,this,e-this._delay),this}return this._start},t.endTime=function(e){return this._start+(N(e)?this.totalDuration():this.duration())/Math.abs(this._ts||1)},t.rawTime=function(e){var t=this.parent||this._dp;return t?e&&(!this._ts||this._repeat&&this._time&&this.totalProgress()<1)?this._tTime%(this._dur+this._rDelay):this._ts?Ie(t.rawTime(e),this):this._tTime:this._tTime},t.revert=function(e){void 0===e&&(e=te);var t=o;return o=e,this.timeline&&this.timeline.revert(e),this.totalTime(-.01,e.suppressEvents),"nested"!==this.data&&Ce(this),o=t,this},t.globalTime=function(e){for(var t=this,n=arguments.length?e:t.rawTime();t;)n=t._start+n/(t._ts||1),t=t._dp;return!this.parent&&this.vars.immediateRender?-1:n},t.repeat=function(e){return arguments.length?(this._repeat=e===1/0?-2:e,He(this)):-2===this._repeat?1/0:this._repeat},t.repeatDelay=function(e){if(arguments.length){var t=this._time;return this._rDelay=e,He(this),t?this.time(t):this}return this._rDelay},t.yoyo=function(e){return arguments.length?(this._yoyo=e,this):this._yoyo},t.seek=function(e,t){return this.totalTime(Ye(this,e),N(t))},t.restart=function(e,t){return this.play().totalTime(e?-this._delay:0,N(t))},t.play=function(e,t){return null!=e&&this.seek(e,t),this.reversed(!1).paused(!1)},t.reverse=function(e,t){return null!=e&&this.seek(e||this.totalDuration(),t),this.reversed(!0).paused(!1)},t.pause=function(e,t){return null!=e&&this.seek(e,t),this.paused(!0)},t.resume=function(){return this.paused(!1)},t.reversed=function(e){return arguments.length?(!!e!==this.reversed()&&this.timeScale(-this._rts||(e?-1e-8:0)),this):this._rts<0},t.invalidate=function(){return this._initted=this._act=0,this._zTime=-1e-8,this},t.isActive=function(){var e,t=this.parent||this._dp,n=this._start;return!(t&&!(this._ts&&this._initted&&t.isActive()&&(e=t.rawTime(!0))>=n&&e<this.endTime(!0)-j))},t.eventCallback=function(e,t,n){var r=this.vars;return arguments.length>1?(t?(r[e]=t,n&&(r[e+"Params"]=n),"onUpdate"===e&&(this._onUpdate=t)):delete r[e],this):r[e]},t.then=function(e){var t=this;return new Promise((function(n){var r=P(e)?e:we,s=function(){var e=t.then;t.then=null,P(r)&&(r=r(t))&&(r.then||r===t)&&(t.then=e),n(r),t.then=e};t._initted&&1===t.totalProgress()&&t._ts>=0||!t._tTime&&t._ts<0?s():t._prom=s}))},t.kill=function(){wt(this)},e}();xe(Ht.prototype,{_time:0,_start:0,_end:0,_tTime:0,_tDur:0,_dirty:0,_repeat:0,_yoyo:!1,parent:null,_initted:!1,_rDelay:0,_ts:1,_dp:0,ratio:0,_zTime:-1e-8,_prom:0,_ps:!1,_rts:1});var Gt=function(e){function t(t,n){var s;return void 0===t&&(t={}),(s=e.call(this,t)||this).labels={},s.smoothChildTiming=!!t.smoothChildTiming,s.autoRemoveChildren=!!t.autoRemoveChildren,s._sort=N(t.sortChildren),l&&Fe(t.parent||l,r(s),n),t.reversed&&s.reverse(),t.paused&&s.paused(!0),t.scrollTrigger&&Be(r(s),t.scrollTrigger),s}s(t,e);var n=t.prototype;return n.to=function(e,t,n){return Xe(0,arguments,this),this},n.from=function(e,t,n){return Xe(1,arguments,this),this},n.fromTo=function(e,t,n,r){return Xe(2,arguments,this),this},n.set=function(e,t,n){return t.duration=0,t.parent=this,Se(t).repeatDelay||(t.repeat=0),t.immediateRender=!!t.immediateRender,new sn(e,t,Ye(this,n),1),this},n.call=function(e,t,n){return Fe(this,sn.delayedCall(0,e,t),n)},n.staggerTo=function(e,t,n,r,s,i,o){return n.duration=t,n.stagger=n.stagger||r,n.onComplete=i,n.onCompleteParams=o,n.parent=this,new sn(e,n,Ye(this,s)),this},n.staggerFrom=function(e,t,n,r,s,i,o){return n.runBackwards=1,Se(n).immediateRender=N(n.immediateRender),this.staggerTo(e,t,n,r,s,i,o)},n.staggerFromTo=function(e,t,n,r,s,i,o,a){return r.startAt=n,Se(r).immediateRender=N(r.immediateRender),this.staggerTo(e,t,r,s,i,o,a)},n.render=function(e,t,n){var r,s,i,a,u,c,d,h,f,p,m,g,v=this._time,_=this._dirty?this.totalDuration():this._tDur,y=this._dur,b=e<=0?0:me(e),w=this._zTime<0!=e<0&&(this._initted||!y);if(this!==l&&b>_&&e>=0&&(b=_),b!==this._tTime||n||w){if(v!==this._time&&y&&(b+=this._time-v,e+=this._time-v),r=b,f=this._start,c=!(h=this._ts),w&&(y||(v=this._zTime),(e||!t)&&(this._zTime=e)),this._repeat){if(m=this._yoyo,u=y+this._rDelay,this._repeat<-1&&e<0)return this.totalTime(100*u+e,t,n);if(r=me(b%u),b===_?(a=this._repeat,r=y):((a=~~(b/u))&&a===b/u&&(r=y,a--),r>y&&(r=y)),p=Ne(this._tTime,u),!v&&this._tTime&&p!==a&&(p=a),m&&1&a&&(r=y-r,g=1),a!==p&&!this._lock){var x=m&&1&p,E=x===(m&&1&a);if(a<p&&(x=!x),v=x?0:y,this._lock=1,this.render(v||(g?0:me(a*u)),t,!y)._lock=0,this._tTime=b,!t&&this.parent&&bt(this,"onRepeat"),this.vars.repeatRefresh&&!g&&(this.invalidate()._lock=1),v&&v!==this._time||c!==!this._ts||this.vars.onRepeat&&!this.parent&&!this._act)return this;if(y=this._dur,_=this._tDur,E&&(this._lock=2,v=x?y:-1e-4,this.render(v,!0),this.vars.repeatRefresh&&!g&&this.invalidate()),this._lock=0,!this._ts&&!c)return this;qt(this,g)}}if(this._hasPause&&!this._forcing&&this._lock<2&&(d=function(e,t,n){var r;if(n>t)for(r=e._first;r&&r._start<=n;){if("isPause"===r.data&&r._start>t)return r;r=r._next}else for(r=e._last;r&&r._start>=n;){if("isPause"===r.data&&r._start<t)return r;r=r._prev}}(this,me(v),me(r)),d&&(b-=r-(r=d._start))),this._tTime=b,this._time=r,this._act=!h,this._initted||(this._onUpdate=this.vars.onUpdate,this._initted=1,this._zTime=e,v=0),!v&&r&&!t&&(bt(this,"onStart"),this._tTime!==b))return this;if(r>=v&&e>=0)for(s=this._first;s;){if(i=s._next,(s._act||r>=s._start)&&s._ts&&d!==s){if(s.parent!==this)return this.render(e,t,n);if(s.render(s._ts>0?(r-s._start)*s._ts:(s._dirty?s.totalDuration():s._tDur)+(r-s._start)*s._ts,t,n),r!==this._time||!this._ts&&!c){d=0,i&&(b+=this._zTime=-1e-8);break}}s=i}else{n=n||o,s=this._last;for(var k=e<0?e:r;s;){if(i=s._prev,(s._act||k<=s._end)&&s._ts&&d!==s){if(s.parent!==this)return this.render(e,t,n);if(s.render(s._ts>0?(k-s._start)*s._ts:(s._dirty?s.totalDuration():s._tDur)+(k-s._start)*s._ts,t,n),r!==this._time||!this._ts&&!c){d=0,i&&(b+=this._zTime=k?-1e-8:j);break}}s=i}}if(d&&!t&&(this.pause(),d.render(r>=v?0:-1e-8)._zTime=r>=v?1:-1,this._ts))return this._start=f,$e(this),this.render(e,t,n);this._onUpdate&&!t&&bt(this,"onUpdate",!0),(b===_&&this._tTime>=this.totalDuration()||!b&&v)&&(f!==this._start&&Math.abs(h)===Math.abs(this._ts)||this._lock||((e||!y)&&(b===_&&this._ts>0||!b&&this._ts<0)&&Ce(this,1),t||e<0&&!v||!b&&!v&&_||(bt(this,b===_&&e>=0?"onComplete":"onReverseComplete",!0),this._prom&&!(b<_&&this.timeScale()>0)&&this._prom())))}return this},n.add=function(e,t){var n=this;if(L(t)||(t=Ye(this,t,e)),!(e instanceof Ht)){if(q(e))return e.forEach((function(e){return n.add(e,t)})),this;if(A(e))return this.addLabel(e,t);if(!P(e))return this;e=sn.delayedCall(0,e)}return this!==e?Fe(this,e,t):this},n.getChildren=function(e,t,n,r){void 0===e&&(e=!0),void 0===t&&(t=!0),void 0===n&&(n=!0),void 0===r&&(r=-x);for(var s=[],i=this._first;i;)i._start>=r&&(i instanceof sn?t&&s.push(i):(n&&s.push(i),e&&s.push.apply(s,i.getChildren(!0,t,n)))),i=i._next;return s},n.getById=function(e){for(var t=this.getChildren(1,1,1),n=t.length;n--;)if(t[n].vars.id===e)return t[n]},n.remove=function(e){return A(e)?this.removeLabel(e):P(e)?this.killTweensOf(e):(Te(this,e),e===this._recent&&(this._recent=this._last),Ae(this))},n.totalTime=function(t,n){return arguments.length?(this._forcing=1,!this._dp&&this._ts&&(this._start=me(Lt.time-(this._ts>0?t/this._ts:(this.totalDuration()-t)/-this._ts))),e.prototype.totalTime.call(this,t,n),this._forcing=0,this):this._tTime},n.addLabel=function(e,t){return this.labels[e]=Ye(this,t),this},n.removeLabel=function(e){return delete this.labels[e],this},n.addPause=function(e,t,n){var r=sn.delayedCall(0,t||Z,n);return r.data="isPause",this._hasPause=1,Fe(this,r,Ye(this,e))},n.removePause=function(e){var t=this._first;for(e=Ye(this,e);t;)t._start===e&&"isPause"===t.data&&Ce(t),t=t._next},n.killTweensOf=function(e,t,n){for(var r=this.getTweensOf(e,n),s=r.length;s--;)Yt!==r[s]&&r[s].kill(e,t);return this},n.getTweensOf=function(e,t){for(var n,r=[],s=rt(e),i=this._first,o=L(t);i;)i instanceof sn?ve(i._targets,s)&&(o?(!Yt||i._initted&&i._ts)&&i.globalTime(0)<=t&&i.globalTime(i.totalDuration())>t:!t||i.isActive())&&r.push(i):(n=i.getTweensOf(s,t)).length&&r.push.apply(r,n),i=i._next;return r},n.tweenTo=function(e,t){t=t||{};var n,r=this,s=Ye(r,e),i=t,o=i.startAt,a=i.onStart,l=i.onStartParams,u=i.immediateRender,c=sn.to(r,xe({ease:t.ease||"none",lazy:!1,immediateRender:!1,time:s,overwrite:"auto",duration:t.duration||Math.abs((s-(o&&"time"in o?o.time:r._time))/r.timeScale())||j,onStart:function(){if(r.pause(),!n){var e=t.duration||Math.abs((s-(o&&"time"in o?o.time:r._time))/r.timeScale());c._dur!==e&&Ve(c,e,0,1).render(c._time,!0,!0),n=1}a&&a.apply(c,l||[])}},t));return u?c.render(0):c},n.tweenFromTo=function(e,t,n){return this.tweenTo(t,xe({startAt:{time:Ye(this,e)}},n))},n.recent=function(){return this._recent},n.nextLabel=function(e){return void 0===e&&(e=this._time),yt(this,Ye(this,e))},n.previousLabel=function(e){return void 0===e&&(e=this._time),yt(this,Ye(this,e),1)},n.currentLabel=function(e){return arguments.length?this.seek(e,!0):this.previousLabel(this._time+j)},n.shiftChildren=function(e,t,n){void 0===n&&(n=0);for(var r,s=this._first,i=this.labels;s;)s._start>=n&&(s._start+=e,s._end+=e),s=s._next;if(t)for(r in i)i[r]>=n&&(i[r]+=e);return Ae(this)},n.invalidate=function(){var t=this._first;for(this._lock=0;t;)t.invalidate(),t=t._next;return e.prototype.invalidate.call(this)},n.clear=function(e){void 0===e&&(e=!0);for(var t,n=this._first;n;)t=n._next,this.remove(n),n=t;return this._dp&&(this._time=this._tTime=this._pTime=0),e&&(this.labels={}),Ae(this)},n.totalDuration=function(e){var t,n,r,s=0,i=this,o=i._last,a=x;if(arguments.length)return i.timeScale((i._repeat<0?i.duration():i.totalDuration())/(i.reversed()?-e:e));if(i._dirty){for(r=i.parent;o;)t=o._prev,o._dirty&&o.totalDuration(),(n=o._start)>a&&i._sort&&o._ts&&!i._lock?(i._lock=1,Fe(i,o,n-o._delay,1)._lock=0):a=n,n<0&&o._ts&&(s-=n,(!r&&!i._dp||r&&r.smoothChildTiming)&&(i._start+=n/i._ts,i._time-=n,i._tTime-=n),i.shiftChildren(-n,!1,-Infinity),a=0),o._end>s&&o._ts&&(s=o._end),o=t;Ve(i,i===l&&i._time>s?i._time:s,1,1),i._dirty=0}return i._tDur},t.updateRoot=function(e){if(l._ts&&(ye(l,Ie(e,l)),f=Lt.frame),Lt.frame>=ae){ae+=b.autoSleep||120;var t=l._first;if((!t||!t._ts)&&b.autoSleep&&Lt._listeners.length<2){for(;t&&!t._ts;)t=t._next;t||Lt.sleep()}}},t}(Ht);xe(Gt.prototype,{_lock:0,_hasPause:0,_forcing:0});var Yt,Xt,Jt=function(e,t,n,r,s,i,o){var a,l,u,c,d,h,f,p,m=new yn(this._pt,e,t,0,1,fn,null,s),g=0,v=0;for(m.b=n,m.e=r,n+="",(f=~(r+="").indexOf("random("))&&(r=gt(r)),i&&(i(p=[n,r],e,t),n=p[0],r=p[1]),l=n.match(W)||[];a=W.exec(r);)c=a[0],d=r.substring(g,a.index),u?u=(u+1)%5:"rgba("===d.substr(-5)&&(u=1),c!==l[v++]&&(h=parseFloat(l[v-1])||0,m._pt={_next:m._pt,p:d||1===v?d:",",s:h,c:"="===c.charAt(1)?ge(h,c)-h:parseFloat(c)-h,m:u&&u<4?Math.round:0},g=W.lastIndex);return m.c=g<r.length?r.substring(g,r.length):"",m.fp=o,(z.test(r)||f)&&(m.e=0),this._pt=m,m},Kt=function(e,t,n,r,s,i,o,a,l,u){P(r)&&(r=r(s||0,e,i));var c,d=e[t],h="get"!==n?n:P(d)?l?e[t.indexOf("set")||!P(e["get"+t.substr(3)])?t:"get"+t.substr(3)](l):e[t]():d,f=P(d)?l?ln:an:on;if(A(r)&&(~r.indexOf("random(")&&(r=gt(r)),"="===r.charAt(1)&&((c=ge(h,r)+(Qe(h)||0))||0===c)&&(r=c)),!u||h!==r||Xt)return isNaN(h*r)||""===r?(!d&&!(t in e)&&J(t,r),Jt.call(this,e,t,h,r,f,a||b.stringFilter,l)):(c=new yn(this._pt,e,t,+h||0,r-(h||0),"boolean"==typeof d?hn:dn,0,f),l&&(c.fp=l),o&&c.modifier(o,this,e),this._pt=c)},Qt=function(e,t,n,r,s,i){var o,a,l,u;if(ie[e]&&!1!==(o=new ie[e]).init(s,o.rawVars?t[e]:function(e,t,n,r,s){if(P(e)&&(e=tn(e,s,t,n,r)),!M(e)||e.style&&e.nodeType||q(e)||R(e))return A(e)?tn(e,s,t,n,r):e;var i,o={};for(i in e)o[i]=tn(e[i],s,t,n,r);return o}(t[e],r,s,i,n),n,r,i)&&(n._pt=a=new yn(n._pt,s,e,0,1,o.render,o,0,o.priority),n!==p))for(l=n._ptLookup[n._targets.indexOf(s)],u=o._props.length;u--;)l[o._props[u]]=a;return o},Zt=function e(t,n){var r,s,a,u,c,d,h,f,p,m,g,v,_,y=t.vars,b=y.ease,E=y.startAt,k=y.immediateRender,S=y.lazy,O=y.onUpdate,T=y.onUpdateParams,C=y.callbackScope,A=y.runBackwards,P=y.yoyoEase,L=y.keyframes,D=y.autoRevert,M=t._dur,I=t._startAt,$=t._targets,R=t.parent,q=R&&"nested"===R.data?R.parent._targets:$,F="auto"===t._overwrite&&!i,B=t.timeline;if(B&&(!L||!b)&&(b="none"),t._ease=Ft(b,w.ease),t._yEase=P?Rt(Ft(!0===P?b:P,w.ease)):0,P&&t._yoyo&&!t._repeat&&(P=t._yEase,t._yEase=t._ease,t._ease=P),t._from=!B&&!!y.runBackwards,!B||L&&!y.stagger){if(v=(f=$[0]?de($[0]).harness:0)&&y[f.prop],r=ke(y,ne),I&&(I.revert(A&&M?te:ee),I._lazy=0),E){if(Ce(t._startAt=sn.set($,xe({data:"isStart",overwrite:!1,parent:R,immediateRender:!0,lazy:N(S),startAt:null,delay:0,onUpdate:O,onUpdateParams:T,callbackScope:C,stagger:0},E))),n<0&&(o||!k&&!D)&&t._startAt.revert(te),k&&M&&n<=0)return void(n&&(t._zTime=n))}else if(A&&M&&!I)if(n&&(k=!1),a=xe({overwrite:!1,data:"isFromStart",lazy:k&&N(S),immediateRender:k,stagger:0,parent:R},r),v&&(a[f.prop]=v),Ce(t._startAt=sn.set($,a)),n<0&&(o?t._startAt.revert(te):t._startAt.render(-1,!0)),t._zTime=n,k){if(!n)return}else e(t._startAt,j);for(t._pt=t._ptCache=0,S=M&&N(S)||S&&!M,s=0;s<$.length;s++){if(h=(c=$[s])._gsap||ce($)[s]._gsap,t._ptLookup[s]=m={},se[h.id]&&re.length&&_e(),g=q===$?s:q.indexOf(c),f&&!1!==(p=new f).init(c,v||r,t,g,q)&&(t._pt=u=new yn(t._pt,c,p.name,0,1,p.render,p,0,p.priority),p._props.forEach((function(e){m[e]=u})),p.priority&&(d=1)),!f||v)for(a in r)ie[a]&&(p=Qt(a,r,t,g,c,q))?p.priority&&(d=1):m[a]=u=Kt.call(t,c,a,"get",r[a],g,q,0,y.stringFilter);t._op&&t._op[s]&&t.kill(c,t._op[s]),F&&t._pt&&(Yt=t,l.killTweensOf(c,m,t.globalTime(n)),_=!t.parent,Yt=0),t._pt&&S&&(se[h.id]=1)}d&&_n(t),t._onInit&&t._onInit(t)}t._onUpdate=O,t._initted=(!t._op||t._pt)&&!_,L&&n<=0&&B.render(x,!0,!0)},en=function(e,t,n,r){var s,i,o=t.ease||r||"power1.inOut";if(q(t))i=n[e]||(n[e]=[]),t.forEach((function(e,n){return i.push({t:n/(t.length-1)*100,v:e,e:o})}));else for(s in t)i=n[s]||(n[s]=[]),"ease"===s||i.push({t:parseFloat(e),v:t[s],e:o})},tn=function(e,t,n,r,s){return P(e)?e.call(t,n,r,s):A(e)&&~e.indexOf("random(")?gt(e):e},nn=ue+"repeat,repeatDelay,yoyo,repeatRefresh,yoyoEase,autoRevert",rn={};fe(nn+",id,stagger,delay,duration,paused,scrollTrigger",(function(e){return rn[e]=1}));var sn=function(e){function t(t,n,s,o){var a;"number"==typeof n&&(s.duration=n,n=s,s=null);var u,c,d,h,f,p,m,g,v=(a=e.call(this,o?n:Se(n))||this).vars,_=v.duration,y=v.delay,w=v.immediateRender,x=v.stagger,j=v.overwrite,E=v.keyframes,k=v.defaults,S=v.scrollTrigger,O=v.yoyoEase,T=n.parent||l,C=(q(t)||R(t)?L(t[0]):"length"in n)?[t]:rt(t);if(a._targets=C.length?ce(C):K("GSAP target "+t+" not found. https://greensock.com",!b.nullTargetWarn)||[],a._ptLookup=[],a._overwrite=j,E||x||$(_)||$(y)){if(n=a.vars,(u=a.timeline=new Gt({data:"nested",defaults:k||{}})).kill(),u.parent=u._dp=r(a),u._start=0,x||$(_)||$(y)){if(h=C.length,m=x&&ot(x),M(x))for(f in x)~nn.indexOf(f)&&(g||(g={}),g[f]=x[f]);for(c=0;c<h;c++)(d=ke(n,rn)).stagger=0,O&&(d.yoyoEase=O),g&&je(d,g),p=C[c],d.duration=+tn(_,r(a),c,p,C),d.delay=(+tn(y,r(a),c,p,C)||0)-a._delay,!x&&1===h&&d.delay&&(a._delay=y=d.delay,a._start+=y,d.delay=0),u.to(p,d,m?m(c,p,C):0),u._ease=Mt.none;u.duration()?_=y=0:a.timeline=0}else if(E){Se(xe(u.vars.defaults,{ease:"none"})),u._ease=Ft(E.ease||n.ease||"none");var A,P,D,I=0;if(q(E))E.forEach((function(e){return u.to(C,e,">")})),u.duration();else{for(f in d={},E)"ease"===f||"easeEach"===f||en(f,E[f],d,E.easeEach);for(f in d)for(A=d[f].sort((function(e,t){return e.t-t.t})),I=0,c=0;c<A.length;c++)(D={ease:(P=A[c]).e,duration:(P.t-(c?A[c-1].t:0))/100*_})[f]=P.v,u.to(C,D,I),I+=D.duration;u.duration()<_&&u.to({},{duration:_-u.duration()})}}_||a.duration(_=u.duration())}else a.timeline=0;return!0!==j||i||(Yt=r(a),l.killTweensOf(C),Yt=0),Fe(T,r(a),s),n.reversed&&a.reverse(),n.paused&&a.paused(!0),(w||!_&&!E&&a._start===me(T._time)&&N(w)&&De(r(a))&&"nested"!==T.data)&&(a._tTime=-1e-8,a.render(Math.max(0,-y))),S&&Be(r(a),S),a}s(t,e);var n=t.prototype;return n.render=function(e,t,n){var r,s,i,a,l,u,c,d,h,f=this._time,p=this._tDur,m=this._dur,g=e<0,v=e>p-j&&!g?p:e<j?0:e;if(m){if(v!==this._tTime||!e||n||!this._initted&&this._tTime||this._startAt&&this._zTime<0!==g){if(r=v,d=this.timeline,this._repeat){if(a=m+this._rDelay,this._repeat<-1&&g)return this.totalTime(100*a+e,t,n);if(r=me(v%a),v===p?(i=this._repeat,r=m):((i=~~(v/a))&&i===v/a&&(r=m,i--),r>m&&(r=m)),(u=this._yoyo&&1&i)&&(h=this._yEase,r=m-r),l=Ne(this._tTime,a),r===f&&!n&&this._initted)return this._tTime=v,this;i!==l&&(d&&this._yEase&&qt(d,u),!this.vars.repeatRefresh||u||this._lock||(this._lock=n=1,this.render(me(a*i),!0).invalidate()._lock=0))}if(!this._initted){if(Ue(this,g?e:r,n,t))return this._tTime=0,this;if(f!==this._time)return this;if(m!==this._dur)return this.render(e,t,n)}if(this._tTime=v,this._time=r,!this._act&&this._ts&&(this._act=1,this._lazy=0),this.ratio=c=(h||this._ease)(r/m),this._from&&(this.ratio=c=1-c),r&&!f&&!t&&(bt(this,"onStart"),this._tTime!==v))return this;for(s=this._pt;s;)s.r(c,s.d),s=s._next;d&&d.render(e<0?e:!r&&u?-1e-8:d._dur*d._ease(r/this._dur),t,n)||this._startAt&&(this._zTime=e),this._onUpdate&&!t&&(g&&Le(this,e,0,n),bt(this,"onUpdate")),this._repeat&&i!==l&&this.vars.onRepeat&&!t&&this.parent&&bt(this,"onRepeat"),v!==this._tDur&&v||this._tTime!==v||(g&&!this._onUpdate&&Le(this,e,0,!0),(e||!m)&&(v===this._tDur&&this._ts>0||!v&&this._ts<0)&&Ce(this,1),t||g&&!f||!v&&!f||(bt(this,v===p?"onComplete":"onReverseComplete",!0),this._prom&&!(v<p&&this.timeScale()>0)&&this._prom()))}}else!function(e,t,n,r){var s,i,a,l=e.ratio,u=t<0||!t&&(!e._start&&We(e)&&(e._initted||!ze(e))||(e._ts<0||e._dp._ts<0)&&!ze(e))?0:1,c=e._rDelay,d=0;if(c&&e._repeat&&(d=Ke(0,e._tDur,t),i=Ne(d,c),e._yoyo&&1&i&&(u=1-u),i!==Ne(e._tTime,c)&&(l=1-u,e.vars.repeatRefresh&&e._initted&&e.invalidate())),u!==l||o||r||e._zTime===j||!t&&e._zTime){if(!e._initted&&Ue(e,t,r,n))return;for(a=e._zTime,e._zTime=t||(n?j:0),n||(n=t&&!a),e.ratio=u,e._from&&(u=1-u),e._time=0,e._tTime=d,s=e._pt;s;)s.r(u,s.d),s=s._next;t<0&&Le(e,t,0,!0),e._onUpdate&&!n&&bt(e,"onUpdate"),d&&e._repeat&&!n&&e.parent&&bt(e,"onRepeat"),(t>=e._tDur||t<0)&&e.ratio===u&&(u&&Ce(e,1),n||(bt(e,u?"onComplete":"onReverseComplete",!0),e._prom&&e._prom()))}else e._zTime||(e._zTime=t)}(this,e,t,n);return this},n.targets=function(){return this._targets},n.invalidate=function(){return this._pt=this._op=this._startAt=this._onUpdate=this._lazy=this.ratio=0,this._ptLookup=[],this.timeline&&this.timeline.invalidate(),e.prototype.invalidate.call(this)},n.resetTo=function(e,t,n,r){m||Lt.wake(),this._ts||this.play();var s=Math.min(this._dur,(this._dp._time-this._start)*this._ts);return this._initted||Zt(this,s),function(e,t,n,r,s,i,o){var a,l,u,c,d=(e._pt&&e._ptCache||(e._ptCache={}))[t];if(!d)for(d=e._ptCache[t]=[],u=e._ptLookup,c=e._targets.length;c--;){if((a=u[c][t])&&a.d&&a.d._pt)for(a=a.d._pt;a&&a.p!==t&&a.fp!==t;)a=a._next;if(!a)return Xt=1,e.vars[t]="+=0",Zt(e,o),Xt=0,1;d.push(a)}for(c=d.length;c--;)(a=(l=d[c])._pt||l).s=!r&&0!==r||s?a.s+(r||0)+i*a.c:r,a.c=n-a.s,l.e&&(l.e=pe(n)+Qe(l.e)),l.b&&(l.b=a.s+Qe(l.b))}(this,e,t,n,r,this._ease(s/this._dur),s)?this.resetTo(e,t,n,r):(Re(this,0),this.parent||Oe(this._dp,this,"_first","_last",this._dp._sort?"_start":0),this.render(0))},n.kill=function(e,t){if(void 0===t&&(t="all"),!(e||t&&"all"!==t))return this._lazy=this._pt=0,this.parent?wt(this):this;if(this.timeline){var n=this.timeline.totalDuration();return this.timeline.killTweensOf(e,t,Yt&&!0!==Yt.vars.overwrite)._first||wt(this),this.parent&&n!==this.timeline.totalDuration()&&Ve(this,this._dur*this.timeline._tDur/n,0,1),this}var r,s,i,o,a,l,u,c=this._targets,d=e?rt(e):c,h=this._ptLookup,f=this._pt;if((!t||"all"===t)&&function(e,t){for(var n=e.length,r=n===t.length;r&&n--&&e[n]===t[n];);return n<0}(c,d))return"all"===t&&(this._pt=0),wt(this);for(r=this._op=this._op||[],"all"!==t&&(A(t)&&(a={},fe(t,(function(e){return a[e]=1})),t=a),t=function(e,t){var n,r,s,i,o=e[0]?de(e[0]).harness:0,a=o&&o.aliases;if(!a)return t;for(r in n=je({},t),a)if(r in n)for(s=(i=a[r].split(",")).length;s--;)n[i[s]]=n[r];return n}(c,t)),u=c.length;u--;)if(~d.indexOf(c[u]))for(a in s=h[u],"all"===t?(r[u]=t,o=s,i={}):(i=r[u]=r[u]||{},o=t),o)(l=s&&s[a])&&("kill"in l.d&&!0!==l.d.kill(a)||Te(this,l,"_pt"),delete s[a]),"all"!==i&&(i[a]=1);return this._initted&&!this._pt&&f&&wt(this),this},t.to=function(e,n){return new t(e,n,arguments[2])},t.from=function(e,t){return Xe(1,arguments)},t.delayedCall=function(e,n,r,s){return new t(n,0,{immediateRender:!1,lazy:!1,overwrite:!1,delay:e,onComplete:n,onReverseComplete:n,onCompleteParams:r,onReverseCompleteParams:r,callbackScope:s})},t.fromTo=function(e,t,n){return Xe(2,arguments)},t.set=function(e,n){return n.duration=0,n.repeatDelay||(n.repeat=0),new t(e,n)},t.killTweensOf=function(e,t,n){return l.killTweensOf(e,t,n)},t}(Ht);xe(sn.prototype,{_targets:[],_lazy:0,_startAt:0,_op:0,_onInit:0}),fe("staggerTo,staggerFrom,staggerFromTo",(function(e){sn[e]=function(){var t=new Gt,n=et.call(arguments,0);return n.splice("staggerFromTo"===e?5:4,0,0),t[e].apply(t,n)}}));var on=function(e,t,n){return e[t]=n},an=function(e,t,n){return e[t](n)},ln=function(e,t,n,r){return e[t](r.fp,n)},un=function(e,t,n){return e.setAttribute(t,n)},cn=function(e,t){return P(e[t])?an:D(e[t])&&e.setAttribute?un:on},dn=function(e,t){return t.set(t.t,t.p,Math.round(1e6*(t.s+t.c*e))/1e6,t)},hn=function(e,t){return t.set(t.t,t.p,!!(t.s+t.c*e),t)},fn=function(e,t){var n=t._pt,r="";if(!e&&t.b)r=t.b;else if(1===e&&t.e)r=t.e;else{for(;n;)r=n.p+(n.m?n.m(n.s+n.c*e):Math.round(1e4*(n.s+n.c*e))/1e4)+r,n=n._next;r+=t.c}t.set(t.t,t.p,r,t)},pn=function(e,t){for(var n=t._pt;n;)n.r(e,n.d),n=n._next},mn=function(e,t,n,r){for(var s,i=this._pt;i;)s=i._next,i.p===r&&i.modifier(e,t,n),i=s},gn=function(e){for(var t,n,r=this._pt;r;)n=r._next,r.p===e&&!r.op||r.op===e?Te(this,r,"_pt"):r.dep||(t=1),r=n;return!t},vn=function(e,t,n,r){r.mSet(e,t,r.m.call(r.tween,n,r.mt),r)},_n=function(e){for(var t,n,r,s,i=e._pt;i;){for(t=i._next,n=r;n&&n.pr>i.pr;)n=n._next;(i._prev=n?n._prev:s)?i._prev._next=i:r=i,(i._next=n)?n._prev=i:s=i,i=t}e._pt=r},yn=function(){function e(e,t,n,r,s,i,o,a,l){this.t=t,this.s=r,this.c=s,this.p=n,this.r=i||dn,this.d=o||this,this.set=a||on,this.pr=l||0,this._next=e,e&&(e._prev=this)}return e.prototype.modifier=function(e,t,n){this.mSet=this.mSet||this.set,this.set=vn,this.m=e,this.mt=n,this.tween=t},e}();fe(ue+"parent,duration,ease,delay,overwrite,runBackwards,startAt,yoyo,immediateRender,repeat,repeatDelay,data,paused,reversed,lazy,callbackScope,stringFilter,id,yoyoEase,stagger,inherit,repeatRefresh,keyframes,autoRevert,scrollTrigger",(function(e){return ne[e]=1})),G.TweenMax=G.TweenLite=sn,G.TimelineLite=G.TimelineMax=Gt,l=new Gt({sortChildren:!1,defaults:w,autoRemoveChildren:!0,id:"root",smoothChildTiming:!0}),b.stringFilter=Pt;var bn=[],wn={},xn=[],jn=0,En=function(e){return(wn[e]||xn).map((function(e){return e()}))},kn=function(){var e=Date.now(),t=[];e-jn>2&&(En("matchMediaInit"),bn.forEach((function(e){var n,r,s,i,o=e.queries,a=e.conditions;for(r in o)(n=u.matchMedia(o[r]).matches)&&(s=1),n!==a[r]&&(a[r]=n,i=1);i&&(e.revert(),s&&t.push(e))})),En("matchMediaRevert"),t.forEach((function(e){return e.onMatch(e)})),jn=e,En("matchMedia"))},Sn=function(){function e(e,t){this.selector=t&&st(t),this.data=[],this._r=[],this.isReverted=!1,e&&this.add(e)}var t=e.prototype;return t.add=function(e,t,n){P(e)&&(n=t,t=e,e=P);var r=this,s=function(){var e,s=a,i=r.selector;return s&&s.data.push(r),n&&(r.selector=st(n)),a=r,e=t.apply(r,arguments),P(e)&&r._r.push(e),a=s,r.selector=i,r.isReverted=!1,e};return r.last=s,e===P?s(r):e?r[e]=s:s},t.ignore=function(e){var t=a;a=null,e(this),a=t},t.getTweens=function(){var t=[];return this.data.forEach((function(n){return n instanceof e?t.push.apply(t,n.getTweens()):n instanceof sn&&n._targets[0]!==n.vars.onComplete&&t.push(n)})),t},t.clear=function(){this._r.length=this.data.length=0},t.kill=function(e,t){var n=this;if(e?(this.getTweens().map((function(e){return{g:e.globalTime(0),t:e}})).sort((function(e,t){return t.g-e.g||-1})).forEach((function(t){return t.t.revert(e)})),this.data.forEach((function(t){return!(t instanceof Ht)&&t.revert&&t.revert(e)})),this._r.forEach((function(t){return t(e,n)})),this.isReverted=!0):this.data.forEach((function(e){return e.kill&&e.kill()})),this.clear(),t){var r=bn.indexOf(this);~r&&bn.splice(r,1)}},t.revert=function(e){this.kill(e||{})},e}(),On=function(){function e(e){this.contexts=[],this.scope=e}var t=e.prototype;return t.add=function(e,t,n){M(e)||(e={matches:e});var r,s,i,o=new Sn(0,n||this.scope),a=o.conditions={};for(s in this.contexts.push(o),t=o.add("onMatch",t),o.queries=e,e)"all"===s?i=1:(r=u.matchMedia(e[s]))&&(bn.indexOf(o)<0&&bn.push(o),(a[s]=r.matches)&&(i=1),r.addListener?r.addListener(kn):r.addEventListener("change",kn));return i&&t(o),this},t.revert=function(e){this.kill(e||{})},t.kill=function(e){this.contexts.forEach((function(t){return t.kill(e,!0)}))},e}(),Tn={registerPlugin:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];t.forEach((function(e){return xt(e)}))},timeline:function(e){return new Gt(e)},getTweensOf:function(e,t){return l.getTweensOf(e,t)},getProperty:function(e,t,n,r){A(e)&&(e=rt(e)[0]);var s=de(e||{}).get,i=n?we:be;return"native"===n&&(n=""),e?t?i((ie[t]&&ie[t].get||s)(e,t,n,r)):function(t,n,r){return i((ie[t]&&ie[t].get||s)(e,t,n,r))}:e},quickSetter:function(e,t,n){if((e=rt(e)).length>1){var r=e.map((function(e){return Pn.quickSetter(e,t,n)})),s=r.length;return function(e){for(var t=s;t--;)r[t](e)}}e=e[0]||{};var i=ie[t],o=de(e),a=o.harness&&(o.harness.aliases||{})[t]||t,l=i?function(t){var r=new i;p._pt=0,r.init(e,n?t+n:t,p,0,[e]),r.render(1,r),p._pt&&pn(1,p)}:o.set(e,a);return i?l:function(t){return l(e,a,n?t+n:t,o,1)}},quickTo:function(e,t,n){var r,s=Pn.to(e,je(((r={})[t]="+=0.1",r.paused=!0,r),n||{})),i=function(e,n,r){return s.resetTo(t,e,n,r)};return i.tween=s,i},isTweening:function(e){return l.getTweensOf(e,!0).length>0},defaults:function(e){return e&&e.ease&&(e.ease=Ft(e.ease,w.ease)),Ee(w,e||{})},config:function(e){return Ee(b,e||{})},registerEffect:function(e){var t=e.name,n=e.effect,r=e.plugins,s=e.defaults,i=e.extendTimeline;(r||"").split(",").forEach((function(e){return e&&!ie[e]&&!G[e]&&K(t+" effect requires "+e+" plugin.")})),oe[t]=function(e,t,r){return n(rt(e),xe(t||{},s),r)},i&&(Gt.prototype[t]=function(e,n,r){return this.add(oe[t](e,M(n)?n:(r=n)&&{},this),r)})},registerEase:function(e,t){Mt[e]=Ft(t)},parseEase:function(e,t){return arguments.length?Ft(e,t):Mt},getById:function(e){return l.getById(e)},exportRoot:function(e,t){void 0===e&&(e={});var n,r,s=new Gt(e);for(s.smoothChildTiming=N(e.smoothChildTiming),l.remove(s),s._dp=0,s._time=s._tTime=l._time,n=l._first;n;)r=n._next,!t&&!n._dur&&n instanceof sn&&n.vars.onComplete===n._targets[0]||Fe(s,n,n._start-n._delay),n=r;return Fe(l,s,0),s},context:function(e,t){return e?new Sn(e,t):a},matchMedia:function(e){return new On(e)},matchMediaRefresh:function(){return bn.forEach((function(e){var t,n,r=e.conditions;for(n in r)r[n]&&(r[n]=!1,t=1);t&&e.revert()}))||kn()},addEventListener:function(e,t){var n=wn[e]||(wn[e]=[]);~n.indexOf(t)||n.push(t)},removeEventListener:function(e,t){var n=wn[e],r=n&&n.indexOf(t);r>=0&&n.splice(r,1)},utils:{wrap:pt,wrapYoyo:mt,distribute:ot,random:ut,snap:lt,normalize:ht,getUnit:Qe,clamp:Ze,splitColor:St,toArray:rt,selector:st,mapRange:vt,pipe:ct,unitize:dt,interpolate:_t,shuffle:it},install:X,effects:oe,ticker:Lt,updateRoot:Gt.updateRoot,plugins:ie,globalTimeline:l,core:{PropTween:yn,globals:Q,Tween:sn,Timeline:Gt,Animation:Ht,getCache:de,_removeLinkedListItem:Te,reverting:function(){return o},context:function(e){return e&&a&&(a.data.push(e),e._ctx=a),a},suppressOverwrites:function(e){return i=e}}};fe("to,from,fromTo,delayedCall,set,killTweensOf",(function(e){return Tn[e]=sn[e]})),Lt.add(Gt.updateRoot),p=Tn.to({},{duration:0});var Cn=function(e,t){for(var n=e._pt;n&&n.p!==t&&n.op!==t&&n.fp!==t;)n=n._next;return n},An=function(e,t){return{name:e,rawVars:1,init:function(e,n,r){r._onInit=function(e){var r,s;if(A(n)&&(r={},fe(n,(function(e){return r[e]=1})),n=r),t){for(s in r={},n)r[s]=t(n[s]);n=r}!function(e,t){var n,r,s,i=e._targets;for(n in t)for(r=i.length;r--;)(s=e._ptLookup[r][n])&&(s=s.d)&&(s._pt&&(s=Cn(s,n)),s&&s.modifier&&s.modifier(t[n],e,i[r],n))}(e,n)}}}},Pn=Tn.registerPlugin({name:"attr",init:function(e,t,n,r,s){var i,o,a;for(i in this.tween=n,t)a=e.getAttribute(i)||"",(o=this.add(e,"setAttribute",(a||0)+"",t[i],r,s,0,0,i)).op=i,o.b=a,this._props.push(i)},render:function(e,t){for(var n=t._pt;n;)o?n.set(n.t,n.p,n.b,n):n.r(e,n.d),n=n._next}},{name:"endArray",init:function(e,t){for(var n=t.length;n--;)this.add(e,n,e[n]||0,t[n],0,0,0,0,0,1)}},An("roundProps",at),An("modifiers"),An("snap",lt))||Tn;sn.version=Gt.version=Pn.version="3.11.0",h=1,I()&&Dt();var Ln=Mt.Power0,Dn=Mt.Power1,Mn=Mt.Power2,Nn=Mt.Power3,In=Mt.Power4,$n=Mt.Linear,Rn=Mt.Quad,qn=Mt.Cubic,Fn=Mt.Quart,Bn=Mt.Quint,Un=Mt.Strong,Wn=Mt.Elastic,zn=Mt.Back,Vn=Mt.SteppedEase,Hn=Mt.Bounce,Gn=Mt.Sine,Yn=Mt.Expo,Xn=Mt.Circ},"./node_modules/gsap/index.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{Back:()=>r.Back,Bounce:()=>r.Bounce,CSSPlugin:()=>s.CSSPlugin,Circ:()=>r.Circ,Cubic:()=>r.Cubic,Elastic:()=>r.Elastic,Expo:()=>r.Expo,Linear:()=>r.Linear,Power0:()=>r.Power0,Power1:()=>r.Power1,Power2:()=>r.Power2,Power3:()=>r.Power3,Power4:()=>r.Power4,Quad:()=>r.Quad,Quart:()=>r.Quart,Quint:()=>r.Quint,Sine:()=>r.Sine,SteppedEase:()=>r.SteppedEase,Strong:()=>r.Strong,TimelineLite:()=>r.TimelineLite,TimelineMax:()=>r.TimelineMax,TweenLite:()=>r.TweenLite,TweenMax:()=>o,default:()=>i,gsap:()=>i});var r=n("./node_modules/gsap/gsap-core.js"),s=n("./node_modules/gsap/CSSPlugin.js"),i=r.gsap.registerPlugin(s.CSSPlugin)||r.gsap,o=i.core.Tween},"./node_modules/hey-listen/dist/hey-listen.es.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{invariant:()=>s,warning:()=>r});var r=function(){},s=function(){};r=function(e,t){e||"undefined"==typeof console||console.warn(t)},s=function(e,t){if(!e)throw new Error(t)}},"./node_modules/html-entities/lib/html4-entities.js":(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n("./node_modules/html-entities/lib/surrogate-pairs.js"),s=["apos","nbsp","iexcl","cent","pound","curren","yen","brvbar","sect","uml","copy","ordf","laquo","not","shy","reg","macr","deg","plusmn","sup2","sup3","acute","micro","para","middot","cedil","sup1","ordm","raquo","frac14","frac12","frac34","iquest","Agrave","Aacute","Acirc","Atilde","Auml","Aring","AElig","Ccedil","Egrave","Eacute","Ecirc","Euml","Igrave","Iacute","Icirc","Iuml","ETH","Ntilde","Ograve","Oacute","Ocirc","Otilde","Ouml","times","Oslash","Ugrave","Uacute","Ucirc","Uuml","Yacute","THORN","szlig","agrave","aacute","acirc","atilde","auml","aring","aelig","ccedil","egrave","eacute","ecirc","euml","igrave","iacute","icirc","iuml","eth","ntilde","ograve","oacute","ocirc","otilde","ouml","divide","oslash","ugrave","uacute","ucirc","uuml","yacute","thorn","yuml","quot","amp","lt","gt","OElig","oelig","Scaron","scaron","Yuml","circ","tilde","ensp","emsp","thinsp","zwnj","zwj","lrm","rlm","ndash","mdash","lsquo","rsquo","sbquo","ldquo","rdquo","bdquo","dagger","Dagger","permil","lsaquo","rsaquo","euro","fnof","Alpha","Beta","Gamma","Delta","Epsilon","Zeta","Eta","Theta","Iota","Kappa","Lambda","Mu","Nu","Xi","Omicron","Pi","Rho","Sigma","Tau","Upsilon","Phi","Chi","Psi","Omega","alpha","beta","gamma","delta","epsilon","zeta","eta","theta","iota","kappa","lambda","mu","nu","xi","omicron","pi","rho","sigmaf","sigma","tau","upsilon","phi","chi","psi","omega","thetasym","upsih","piv","bull","hellip","prime","Prime","oline","frasl","weierp","image","real","trade","alefsym","larr","uarr","rarr","darr","harr","crarr","lArr","uArr","rArr","dArr","hArr","forall","part","exist","empty","nabla","isin","notin","ni","prod","sum","minus","lowast","radic","prop","infin","ang","and","or","cap","cup","int","there4","sim","cong","asymp","ne","equiv","le","ge","sub","sup","nsub","sube","supe","oplus","otimes","perp","sdot","lceil","rceil","lfloor","rfloor","lang","rang","loz","spades","clubs","hearts","diams"],i=[39,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,34,38,60,62,338,339,352,353,376,710,732,8194,8195,8201,8204,8205,8206,8207,8211,8212,8216,8217,8218,8220,8221,8222,8224,8225,8240,8249,8250,8364,402,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,931,932,933,934,935,936,937,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,962,963,964,965,966,967,968,969,977,978,982,8226,8230,8242,8243,8254,8260,8472,8465,8476,8482,8501,8592,8593,8594,8595,8596,8629,8656,8657,8658,8659,8660,8704,8706,8707,8709,8711,8712,8713,8715,8719,8721,8722,8727,8730,8733,8734,8736,8743,8744,8745,8746,8747,8756,8764,8773,8776,8800,8801,8804,8805,8834,8835,8836,8838,8839,8853,8855,8869,8901,8968,8969,8970,8971,9001,9002,9674,9824,9827,9829,9830],o={},a={};!function(){for(var e=0,t=s.length;e<t;){var n=s[e],r=i[e];o[n]=String.fromCharCode(r),a[r]=n,e++}}();var l=function(){function e(){}return e.prototype.decode=function(e){return e&&e.length?e.replace(/&(#?[\w\d]+);?/g,(function(e,t){var n;if("#"===t.charAt(0)){var s="x"===t.charAt(1).toLowerCase()?parseInt(t.substr(2),16):parseInt(t.substr(1));(!isNaN(s)||s>=-32768)&&(n=s<=65535?String.fromCharCode(s):r.fromCodePoint(s))}else n=o[t];return n||e})):""},e.decode=function(t){return(new e).decode(t)},e.prototype.encode=function(e){if(!e||!e.length)return"";for(var t=e.length,n="",r=0;r<t;){var s=a[e.charCodeAt(r)];n+=s?"&"+s+";":e.charAt(r),r++}return n},e.encode=function(t){return(new e).encode(t)},e.prototype.encodeNonUTF=function(e){if(!e||!e.length)return"";for(var t=e.length,n="",s=0;s<t;){var i=e.charCodeAt(s),o=a[i];o?n+="&"+o+";":i<32||i>126?i>=r.highSurrogateFrom&&i<=r.highSurrogateTo?(n+="&#"+r.getCodePoint(e,s)+";",s++):n+="&#"+i+";":n+=e.charAt(s),s++}return n},e.encodeNonUTF=function(t){return(new e).encodeNonUTF(t)},e.prototype.encodeNonASCII=function(e){if(!e||!e.length)return"";for(var t=e.length,n="",s=0;s<t;){var i=e.charCodeAt(s);i<=255?n+=e[s++]:(i>=r.highSurrogateFrom&&i<=r.highSurrogateTo?(n+="&#"+r.getCodePoint(e,s)+";",s++):n+="&#"+i+";",s++)}return n},e.encodeNonASCII=function(t){return(new e).encodeNonASCII(t)},e}();t.Html4Entities=l},"./node_modules/html-entities/lib/html5-entities.js":(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n("./node_modules/html-entities/lib/surrogate-pairs.js"),s=[["Aacute",[193]],["aacute",[225]],["Abreve",[258]],["abreve",[259]],["ac",[8766]],["acd",[8767]],["acE",[8766,819]],["Acirc",[194]],["acirc",[226]],["acute",[180]],["Acy",[1040]],["acy",[1072]],["AElig",[198]],["aelig",[230]],["af",[8289]],["Afr",[120068]],["afr",[120094]],["Agrave",[192]],["agrave",[224]],["alefsym",[8501]],["aleph",[8501]],["Alpha",[913]],["alpha",[945]],["Amacr",[256]],["amacr",[257]],["amalg",[10815]],["amp",[38]],["AMP",[38]],["andand",[10837]],["And",[10835]],["and",[8743]],["andd",[10844]],["andslope",[10840]],["andv",[10842]],["ang",[8736]],["ange",[10660]],["angle",[8736]],["angmsdaa",[10664]],["angmsdab",[10665]],["angmsdac",[10666]],["angmsdad",[10667]],["angmsdae",[10668]],["angmsdaf",[10669]],["angmsdag",[10670]],["angmsdah",[10671]],["angmsd",[8737]],["angrt",[8735]],["angrtvb",[8894]],["angrtvbd",[10653]],["angsph",[8738]],["angst",[197]],["angzarr",[9084]],["Aogon",[260]],["aogon",[261]],["Aopf",[120120]],["aopf",[120146]],["apacir",[10863]],["ap",[8776]],["apE",[10864]],["ape",[8778]],["apid",[8779]],["apos",[39]],["ApplyFunction",[8289]],["approx",[8776]],["approxeq",[8778]],["Aring",[197]],["aring",[229]],["Ascr",[119964]],["ascr",[119990]],["Assign",[8788]],["ast",[42]],["asymp",[8776]],["asympeq",[8781]],["Atilde",[195]],["atilde",[227]],["Auml",[196]],["auml",[228]],["awconint",[8755]],["awint",[10769]],["backcong",[8780]],["backepsilon",[1014]],["backprime",[8245]],["backsim",[8765]],["backsimeq",[8909]],["Backslash",[8726]],["Barv",[10983]],["barvee",[8893]],["barwed",[8965]],["Barwed",[8966]],["barwedge",[8965]],["bbrk",[9141]],["bbrktbrk",[9142]],["bcong",[8780]],["Bcy",[1041]],["bcy",[1073]],["bdquo",[8222]],["becaus",[8757]],["because",[8757]],["Because",[8757]],["bemptyv",[10672]],["bepsi",[1014]],["bernou",[8492]],["Bernoullis",[8492]],["Beta",[914]],["beta",[946]],["beth",[8502]],["between",[8812]],["Bfr",[120069]],["bfr",[120095]],["bigcap",[8898]],["bigcirc",[9711]],["bigcup",[8899]],["bigodot",[10752]],["bigoplus",[10753]],["bigotimes",[10754]],["bigsqcup",[10758]],["bigstar",[9733]],["bigtriangledown",[9661]],["bigtriangleup",[9651]],["biguplus",[10756]],["bigvee",[8897]],["bigwedge",[8896]],["bkarow",[10509]],["blacklozenge",[10731]],["blacksquare",[9642]],["blacktriangle",[9652]],["blacktriangledown",[9662]],["blacktriangleleft",[9666]],["blacktriangleright",[9656]],["blank",[9251]],["blk12",[9618]],["blk14",[9617]],["blk34",[9619]],["block",[9608]],["bne",[61,8421]],["bnequiv",[8801,8421]],["bNot",[10989]],["bnot",[8976]],["Bopf",[120121]],["bopf",[120147]],["bot",[8869]],["bottom",[8869]],["bowtie",[8904]],["boxbox",[10697]],["boxdl",[9488]],["boxdL",[9557]],["boxDl",[9558]],["boxDL",[9559]],["boxdr",[9484]],["boxdR",[9554]],["boxDr",[9555]],["boxDR",[9556]],["boxh",[9472]],["boxH",[9552]],["boxhd",[9516]],["boxHd",[9572]],["boxhD",[9573]],["boxHD",[9574]],["boxhu",[9524]],["boxHu",[9575]],["boxhU",[9576]],["boxHU",[9577]],["boxminus",[8863]],["boxplus",[8862]],["boxtimes",[8864]],["boxul",[9496]],["boxuL",[9563]],["boxUl",[9564]],["boxUL",[9565]],["boxur",[9492]],["boxuR",[9560]],["boxUr",[9561]],["boxUR",[9562]],["boxv",[9474]],["boxV",[9553]],["boxvh",[9532]],["boxvH",[9578]],["boxVh",[9579]],["boxVH",[9580]],["boxvl",[9508]],["boxvL",[9569]],["boxVl",[9570]],["boxVL",[9571]],["boxvr",[9500]],["boxvR",[9566]],["boxVr",[9567]],["boxVR",[9568]],["bprime",[8245]],["breve",[728]],["Breve",[728]],["brvbar",[166]],["bscr",[119991]],["Bscr",[8492]],["bsemi",[8271]],["bsim",[8765]],["bsime",[8909]],["bsolb",[10693]],["bsol",[92]],["bsolhsub",[10184]],["bull",[8226]],["bullet",[8226]],["bump",[8782]],["bumpE",[10926]],["bumpe",[8783]],["Bumpeq",[8782]],["bumpeq",[8783]],["Cacute",[262]],["cacute",[263]],["capand",[10820]],["capbrcup",[10825]],["capcap",[10827]],["cap",[8745]],["Cap",[8914]],["capcup",[10823]],["capdot",[10816]],["CapitalDifferentialD",[8517]],["caps",[8745,65024]],["caret",[8257]],["caron",[711]],["Cayleys",[8493]],["ccaps",[10829]],["Ccaron",[268]],["ccaron",[269]],["Ccedil",[199]],["ccedil",[231]],["Ccirc",[264]],["ccirc",[265]],["Cconint",[8752]],["ccups",[10828]],["ccupssm",[10832]],["Cdot",[266]],["cdot",[267]],["cedil",[184]],["Cedilla",[184]],["cemptyv",[10674]],["cent",[162]],["centerdot",[183]],["CenterDot",[183]],["cfr",[120096]],["Cfr",[8493]],["CHcy",[1063]],["chcy",[1095]],["check",[10003]],["checkmark",[10003]],["Chi",[935]],["chi",[967]],["circ",[710]],["circeq",[8791]],["circlearrowleft",[8634]],["circlearrowright",[8635]],["circledast",[8859]],["circledcirc",[8858]],["circleddash",[8861]],["CircleDot",[8857]],["circledR",[174]],["circledS",[9416]],["CircleMinus",[8854]],["CirclePlus",[8853]],["CircleTimes",[8855]],["cir",[9675]],["cirE",[10691]],["cire",[8791]],["cirfnint",[10768]],["cirmid",[10991]],["cirscir",[10690]],["ClockwiseContourIntegral",[8754]],["clubs",[9827]],["clubsuit",[9827]],["colon",[58]],["Colon",[8759]],["Colone",[10868]],["colone",[8788]],["coloneq",[8788]],["comma",[44]],["commat",[64]],["comp",[8705]],["compfn",[8728]],["complement",[8705]],["complexes",[8450]],["cong",[8773]],["congdot",[10861]],["Congruent",[8801]],["conint",[8750]],["Conint",[8751]],["ContourIntegral",[8750]],["copf",[120148]],["Copf",[8450]],["coprod",[8720]],["Coproduct",[8720]],["copy",[169]],["COPY",[169]],["copysr",[8471]],["CounterClockwiseContourIntegral",[8755]],["crarr",[8629]],["cross",[10007]],["Cross",[10799]],["Cscr",[119966]],["cscr",[119992]],["csub",[10959]],["csube",[10961]],["csup",[10960]],["csupe",[10962]],["ctdot",[8943]],["cudarrl",[10552]],["cudarrr",[10549]],["cuepr",[8926]],["cuesc",[8927]],["cularr",[8630]],["cularrp",[10557]],["cupbrcap",[10824]],["cupcap",[10822]],["CupCap",[8781]],["cup",[8746]],["Cup",[8915]],["cupcup",[10826]],["cupdot",[8845]],["cupor",[10821]],["cups",[8746,65024]],["curarr",[8631]],["curarrm",[10556]],["curlyeqprec",[8926]],["curlyeqsucc",[8927]],["curlyvee",[8910]],["curlywedge",[8911]],["curren",[164]],["curvearrowleft",[8630]],["curvearrowright",[8631]],["cuvee",[8910]],["cuwed",[8911]],["cwconint",[8754]],["cwint",[8753]],["cylcty",[9005]],["dagger",[8224]],["Dagger",[8225]],["daleth",[8504]],["darr",[8595]],["Darr",[8609]],["dArr",[8659]],["dash",[8208]],["Dashv",[10980]],["dashv",[8867]],["dbkarow",[10511]],["dblac",[733]],["Dcaron",[270]],["dcaron",[271]],["Dcy",[1044]],["dcy",[1076]],["ddagger",[8225]],["ddarr",[8650]],["DD",[8517]],["dd",[8518]],["DDotrahd",[10513]],["ddotseq",[10871]],["deg",[176]],["Del",[8711]],["Delta",[916]],["delta",[948]],["demptyv",[10673]],["dfisht",[10623]],["Dfr",[120071]],["dfr",[120097]],["dHar",[10597]],["dharl",[8643]],["dharr",[8642]],["DiacriticalAcute",[180]],["DiacriticalDot",[729]],["DiacriticalDoubleAcute",[733]],["DiacriticalGrave",[96]],["DiacriticalTilde",[732]],["diam",[8900]],["diamond",[8900]],["Diamond",[8900]],["diamondsuit",[9830]],["diams",[9830]],["die",[168]],["DifferentialD",[8518]],["digamma",[989]],["disin",[8946]],["div",[247]],["divide",[247]],["divideontimes",[8903]],["divonx",[8903]],["DJcy",[1026]],["djcy",[1106]],["dlcorn",[8990]],["dlcrop",[8973]],["dollar",[36]],["Dopf",[120123]],["dopf",[120149]],["Dot",[168]],["dot",[729]],["DotDot",[8412]],["doteq",[8784]],["doteqdot",[8785]],["DotEqual",[8784]],["dotminus",[8760]],["dotplus",[8724]],["dotsquare",[8865]],["doublebarwedge",[8966]],["DoubleContourIntegral",[8751]],["DoubleDot",[168]],["DoubleDownArrow",[8659]],["DoubleLeftArrow",[8656]],["DoubleLeftRightArrow",[8660]],["DoubleLeftTee",[10980]],["DoubleLongLeftArrow",[10232]],["DoubleLongLeftRightArrow",[10234]],["DoubleLongRightArrow",[10233]],["DoubleRightArrow",[8658]],["DoubleRightTee",[8872]],["DoubleUpArrow",[8657]],["DoubleUpDownArrow",[8661]],["DoubleVerticalBar",[8741]],["DownArrowBar",[10515]],["downarrow",[8595]],["DownArrow",[8595]],["Downarrow",[8659]],["DownArrowUpArrow",[8693]],["DownBreve",[785]],["downdownarrows",[8650]],["downharpoonleft",[8643]],["downharpoonright",[8642]],["DownLeftRightVector",[10576]],["DownLeftTeeVector",[10590]],["DownLeftVectorBar",[10582]],["DownLeftVector",[8637]],["DownRightTeeVector",[10591]],["DownRightVectorBar",[10583]],["DownRightVector",[8641]],["DownTeeArrow",[8615]],["DownTee",[8868]],["drbkarow",[10512]],["drcorn",[8991]],["drcrop",[8972]],["Dscr",[119967]],["dscr",[119993]],["DScy",[1029]],["dscy",[1109]],["dsol",[10742]],["Dstrok",[272]],["dstrok",[273]],["dtdot",[8945]],["dtri",[9663]],["dtrif",[9662]],["duarr",[8693]],["duhar",[10607]],["dwangle",[10662]],["DZcy",[1039]],["dzcy",[1119]],["dzigrarr",[10239]],["Eacute",[201]],["eacute",[233]],["easter",[10862]],["Ecaron",[282]],["ecaron",[283]],["Ecirc",[202]],["ecirc",[234]],["ecir",[8790]],["ecolon",[8789]],["Ecy",[1069]],["ecy",[1101]],["eDDot",[10871]],["Edot",[278]],["edot",[279]],["eDot",[8785]],["ee",[8519]],["efDot",[8786]],["Efr",[120072]],["efr",[120098]],["eg",[10906]],["Egrave",[200]],["egrave",[232]],["egs",[10902]],["egsdot",[10904]],["el",[10905]],["Element",[8712]],["elinters",[9191]],["ell",[8467]],["els",[10901]],["elsdot",[10903]],["Emacr",[274]],["emacr",[275]],["empty",[8709]],["emptyset",[8709]],["EmptySmallSquare",[9723]],["emptyv",[8709]],["EmptyVerySmallSquare",[9643]],["emsp13",[8196]],["emsp14",[8197]],["emsp",[8195]],["ENG",[330]],["eng",[331]],["ensp",[8194]],["Eogon",[280]],["eogon",[281]],["Eopf",[120124]],["eopf",[120150]],["epar",[8917]],["eparsl",[10723]],["eplus",[10865]],["epsi",[949]],["Epsilon",[917]],["epsilon",[949]],["epsiv",[1013]],["eqcirc",[8790]],["eqcolon",[8789]],["eqsim",[8770]],["eqslantgtr",[10902]],["eqslantless",[10901]],["Equal",[10869]],["equals",[61]],["EqualTilde",[8770]],["equest",[8799]],["Equilibrium",[8652]],["equiv",[8801]],["equivDD",[10872]],["eqvparsl",[10725]],["erarr",[10609]],["erDot",[8787]],["escr",[8495]],["Escr",[8496]],["esdot",[8784]],["Esim",[10867]],["esim",[8770]],["Eta",[919]],["eta",[951]],["ETH",[208]],["eth",[240]],["Euml",[203]],["euml",[235]],["euro",[8364]],["excl",[33]],["exist",[8707]],["Exists",[8707]],["expectation",[8496]],["exponentiale",[8519]],["ExponentialE",[8519]],["fallingdotseq",[8786]],["Fcy",[1060]],["fcy",[1092]],["female",[9792]],["ffilig",[64259]],["fflig",[64256]],["ffllig",[64260]],["Ffr",[120073]],["ffr",[120099]],["filig",[64257]],["FilledSmallSquare",[9724]],["FilledVerySmallSquare",[9642]],["fjlig",[102,106]],["flat",[9837]],["fllig",[64258]],["fltns",[9649]],["fnof",[402]],["Fopf",[120125]],["fopf",[120151]],["forall",[8704]],["ForAll",[8704]],["fork",[8916]],["forkv",[10969]],["Fouriertrf",[8497]],["fpartint",[10765]],["frac12",[189]],["frac13",[8531]],["frac14",[188]],["frac15",[8533]],["frac16",[8537]],["frac18",[8539]],["frac23",[8532]],["frac25",[8534]],["frac34",[190]],["frac35",[8535]],["frac38",[8540]],["frac45",[8536]],["frac56",[8538]],["frac58",[8541]],["frac78",[8542]],["frasl",[8260]],["frown",[8994]],["fscr",[119995]],["Fscr",[8497]],["gacute",[501]],["Gamma",[915]],["gamma",[947]],["Gammad",[988]],["gammad",[989]],["gap",[10886]],["Gbreve",[286]],["gbreve",[287]],["Gcedil",[290]],["Gcirc",[284]],["gcirc",[285]],["Gcy",[1043]],["gcy",[1075]],["Gdot",[288]],["gdot",[289]],["ge",[8805]],["gE",[8807]],["gEl",[10892]],["gel",[8923]],["geq",[8805]],["geqq",[8807]],["geqslant",[10878]],["gescc",[10921]],["ges",[10878]],["gesdot",[10880]],["gesdoto",[10882]],["gesdotol",[10884]],["gesl",[8923,65024]],["gesles",[10900]],["Gfr",[120074]],["gfr",[120100]],["gg",[8811]],["Gg",[8921]],["ggg",[8921]],["gimel",[8503]],["GJcy",[1027]],["gjcy",[1107]],["gla",[10917]],["gl",[8823]],["glE",[10898]],["glj",[10916]],["gnap",[10890]],["gnapprox",[10890]],["gne",[10888]],["gnE",[8809]],["gneq",[10888]],["gneqq",[8809]],["gnsim",[8935]],["Gopf",[120126]],["gopf",[120152]],["grave",[96]],["GreaterEqual",[8805]],["GreaterEqualLess",[8923]],["GreaterFullEqual",[8807]],["GreaterGreater",[10914]],["GreaterLess",[8823]],["GreaterSlantEqual",[10878]],["GreaterTilde",[8819]],["Gscr",[119970]],["gscr",[8458]],["gsim",[8819]],["gsime",[10894]],["gsiml",[10896]],["gtcc",[10919]],["gtcir",[10874]],["gt",[62]],["GT",[62]],["Gt",[8811]],["gtdot",[8919]],["gtlPar",[10645]],["gtquest",[10876]],["gtrapprox",[10886]],["gtrarr",[10616]],["gtrdot",[8919]],["gtreqless",[8923]],["gtreqqless",[10892]],["gtrless",[8823]],["gtrsim",[8819]],["gvertneqq",[8809,65024]],["gvnE",[8809,65024]],["Hacek",[711]],["hairsp",[8202]],["half",[189]],["hamilt",[8459]],["HARDcy",[1066]],["hardcy",[1098]],["harrcir",[10568]],["harr",[8596]],["hArr",[8660]],["harrw",[8621]],["Hat",[94]],["hbar",[8463]],["Hcirc",[292]],["hcirc",[293]],["hearts",[9829]],["heartsuit",[9829]],["hellip",[8230]],["hercon",[8889]],["hfr",[120101]],["Hfr",[8460]],["HilbertSpace",[8459]],["hksearow",[10533]],["hkswarow",[10534]],["hoarr",[8703]],["homtht",[8763]],["hookleftarrow",[8617]],["hookrightarrow",[8618]],["hopf",[120153]],["Hopf",[8461]],["horbar",[8213]],["HorizontalLine",[9472]],["hscr",[119997]],["Hscr",[8459]],["hslash",[8463]],["Hstrok",[294]],["hstrok",[295]],["HumpDownHump",[8782]],["HumpEqual",[8783]],["hybull",[8259]],["hyphen",[8208]],["Iacute",[205]],["iacute",[237]],["ic",[8291]],["Icirc",[206]],["icirc",[238]],["Icy",[1048]],["icy",[1080]],["Idot",[304]],["IEcy",[1045]],["iecy",[1077]],["iexcl",[161]],["iff",[8660]],["ifr",[120102]],["Ifr",[8465]],["Igrave",[204]],["igrave",[236]],["ii",[8520]],["iiiint",[10764]],["iiint",[8749]],["iinfin",[10716]],["iiota",[8489]],["IJlig",[306]],["ijlig",[307]],["Imacr",[298]],["imacr",[299]],["image",[8465]],["ImaginaryI",[8520]],["imagline",[8464]],["imagpart",[8465]],["imath",[305]],["Im",[8465]],["imof",[8887]],["imped",[437]],["Implies",[8658]],["incare",[8453]],["in",[8712]],["infin",[8734]],["infintie",[10717]],["inodot",[305]],["intcal",[8890]],["int",[8747]],["Int",[8748]],["integers",[8484]],["Integral",[8747]],["intercal",[8890]],["Intersection",[8898]],["intlarhk",[10775]],["intprod",[10812]],["InvisibleComma",[8291]],["InvisibleTimes",[8290]],["IOcy",[1025]],["iocy",[1105]],["Iogon",[302]],["iogon",[303]],["Iopf",[120128]],["iopf",[120154]],["Iota",[921]],["iota",[953]],["iprod",[10812]],["iquest",[191]],["iscr",[119998]],["Iscr",[8464]],["isin",[8712]],["isindot",[8949]],["isinE",[8953]],["isins",[8948]],["isinsv",[8947]],["isinv",[8712]],["it",[8290]],["Itilde",[296]],["itilde",[297]],["Iukcy",[1030]],["iukcy",[1110]],["Iuml",[207]],["iuml",[239]],["Jcirc",[308]],["jcirc",[309]],["Jcy",[1049]],["jcy",[1081]],["Jfr",[120077]],["jfr",[120103]],["jmath",[567]],["Jopf",[120129]],["jopf",[120155]],["Jscr",[119973]],["jscr",[119999]],["Jsercy",[1032]],["jsercy",[1112]],["Jukcy",[1028]],["jukcy",[1108]],["Kappa",[922]],["kappa",[954]],["kappav",[1008]],["Kcedil",[310]],["kcedil",[311]],["Kcy",[1050]],["kcy",[1082]],["Kfr",[120078]],["kfr",[120104]],["kgreen",[312]],["KHcy",[1061]],["khcy",[1093]],["KJcy",[1036]],["kjcy",[1116]],["Kopf",[120130]],["kopf",[120156]],["Kscr",[119974]],["kscr",[12e4]],["lAarr",[8666]],["Lacute",[313]],["lacute",[314]],["laemptyv",[10676]],["lagran",[8466]],["Lambda",[923]],["lambda",[955]],["lang",[10216]],["Lang",[10218]],["langd",[10641]],["langle",[10216]],["lap",[10885]],["Laplacetrf",[8466]],["laquo",[171]],["larrb",[8676]],["larrbfs",[10527]],["larr",[8592]],["Larr",[8606]],["lArr",[8656]],["larrfs",[10525]],["larrhk",[8617]],["larrlp",[8619]],["larrpl",[10553]],["larrsim",[10611]],["larrtl",[8610]],["latail",[10521]],["lAtail",[10523]],["lat",[10923]],["late",[10925]],["lates",[10925,65024]],["lbarr",[10508]],["lBarr",[10510]],["lbbrk",[10098]],["lbrace",[123]],["lbrack",[91]],["lbrke",[10635]],["lbrksld",[10639]],["lbrkslu",[10637]],["Lcaron",[317]],["lcaron",[318]],["Lcedil",[315]],["lcedil",[316]],["lceil",[8968]],["lcub",[123]],["Lcy",[1051]],["lcy",[1083]],["ldca",[10550]],["ldquo",[8220]],["ldquor",[8222]],["ldrdhar",[10599]],["ldrushar",[10571]],["ldsh",[8626]],["le",[8804]],["lE",[8806]],["LeftAngleBracket",[10216]],["LeftArrowBar",[8676]],["leftarrow",[8592]],["LeftArrow",[8592]],["Leftarrow",[8656]],["LeftArrowRightArrow",[8646]],["leftarrowtail",[8610]],["LeftCeiling",[8968]],["LeftDoubleBracket",[10214]],["LeftDownTeeVector",[10593]],["LeftDownVectorBar",[10585]],["LeftDownVector",[8643]],["LeftFloor",[8970]],["leftharpoondown",[8637]],["leftharpoonup",[8636]],["leftleftarrows",[8647]],["leftrightarrow",[8596]],["LeftRightArrow",[8596]],["Leftrightarrow",[8660]],["leftrightarrows",[8646]],["leftrightharpoons",[8651]],["leftrightsquigarrow",[8621]],["LeftRightVector",[10574]],["LeftTeeArrow",[8612]],["LeftTee",[8867]],["LeftTeeVector",[10586]],["leftthreetimes",[8907]],["LeftTriangleBar",[10703]],["LeftTriangle",[8882]],["LeftTriangleEqual",[8884]],["LeftUpDownVector",[10577]],["LeftUpTeeVector",[10592]],["LeftUpVectorBar",[10584]],["LeftUpVector",[8639]],["LeftVectorBar",[10578]],["LeftVector",[8636]],["lEg",[10891]],["leg",[8922]],["leq",[8804]],["leqq",[8806]],["leqslant",[10877]],["lescc",[10920]],["les",[10877]],["lesdot",[10879]],["lesdoto",[10881]],["lesdotor",[10883]],["lesg",[8922,65024]],["lesges",[10899]],["lessapprox",[10885]],["lessdot",[8918]],["lesseqgtr",[8922]],["lesseqqgtr",[10891]],["LessEqualGreater",[8922]],["LessFullEqual",[8806]],["LessGreater",[8822]],["lessgtr",[8822]],["LessLess",[10913]],["lesssim",[8818]],["LessSlantEqual",[10877]],["LessTilde",[8818]],["lfisht",[10620]],["lfloor",[8970]],["Lfr",[120079]],["lfr",[120105]],["lg",[8822]],["lgE",[10897]],["lHar",[10594]],["lhard",[8637]],["lharu",[8636]],["lharul",[10602]],["lhblk",[9604]],["LJcy",[1033]],["ljcy",[1113]],["llarr",[8647]],["ll",[8810]],["Ll",[8920]],["llcorner",[8990]],["Lleftarrow",[8666]],["llhard",[10603]],["lltri",[9722]],["Lmidot",[319]],["lmidot",[320]],["lmoustache",[9136]],["lmoust",[9136]],["lnap",[10889]],["lnapprox",[10889]],["lne",[10887]],["lnE",[8808]],["lneq",[10887]],["lneqq",[8808]],["lnsim",[8934]],["loang",[10220]],["loarr",[8701]],["lobrk",[10214]],["longleftarrow",[10229]],["LongLeftArrow",[10229]],["Longleftarrow",[10232]],["longleftrightarrow",[10231]],["LongLeftRightArrow",[10231]],["Longleftrightarrow",[10234]],["longmapsto",[10236]],["longrightarrow",[10230]],["LongRightArrow",[10230]],["Longrightarrow",[10233]],["looparrowleft",[8619]],["looparrowright",[8620]],["lopar",[10629]],["Lopf",[120131]],["lopf",[120157]],["loplus",[10797]],["lotimes",[10804]],["lowast",[8727]],["lowbar",[95]],["LowerLeftArrow",[8601]],["LowerRightArrow",[8600]],["loz",[9674]],["lozenge",[9674]],["lozf",[10731]],["lpar",[40]],["lparlt",[10643]],["lrarr",[8646]],["lrcorner",[8991]],["lrhar",[8651]],["lrhard",[10605]],["lrm",[8206]],["lrtri",[8895]],["lsaquo",[8249]],["lscr",[120001]],["Lscr",[8466]],["lsh",[8624]],["Lsh",[8624]],["lsim",[8818]],["lsime",[10893]],["lsimg",[10895]],["lsqb",[91]],["lsquo",[8216]],["lsquor",[8218]],["Lstrok",[321]],["lstrok",[322]],["ltcc",[10918]],["ltcir",[10873]],["lt",[60]],["LT",[60]],["Lt",[8810]],["ltdot",[8918]],["lthree",[8907]],["ltimes",[8905]],["ltlarr",[10614]],["ltquest",[10875]],["ltri",[9667]],["ltrie",[8884]],["ltrif",[9666]],["ltrPar",[10646]],["lurdshar",[10570]],["luruhar",[10598]],["lvertneqq",[8808,65024]],["lvnE",[8808,65024]],["macr",[175]],["male",[9794]],["malt",[10016]],["maltese",[10016]],["Map",[10501]],["map",[8614]],["mapsto",[8614]],["mapstodown",[8615]],["mapstoleft",[8612]],["mapstoup",[8613]],["marker",[9646]],["mcomma",[10793]],["Mcy",[1052]],["mcy",[1084]],["mdash",[8212]],["mDDot",[8762]],["measuredangle",[8737]],["MediumSpace",[8287]],["Mellintrf",[8499]],["Mfr",[120080]],["mfr",[120106]],["mho",[8487]],["micro",[181]],["midast",[42]],["midcir",[10992]],["mid",[8739]],["middot",[183]],["minusb",[8863]],["minus",[8722]],["minusd",[8760]],["minusdu",[10794]],["MinusPlus",[8723]],["mlcp",[10971]],["mldr",[8230]],["mnplus",[8723]],["models",[8871]],["Mopf",[120132]],["mopf",[120158]],["mp",[8723]],["mscr",[120002]],["Mscr",[8499]],["mstpos",[8766]],["Mu",[924]],["mu",[956]],["multimap",[8888]],["mumap",[8888]],["nabla",[8711]],["Nacute",[323]],["nacute",[324]],["nang",[8736,8402]],["nap",[8777]],["napE",[10864,824]],["napid",[8779,824]],["napos",[329]],["napprox",[8777]],["natural",[9838]],["naturals",[8469]],["natur",[9838]],["nbsp",[160]],["nbump",[8782,824]],["nbumpe",[8783,824]],["ncap",[10819]],["Ncaron",[327]],["ncaron",[328]],["Ncedil",[325]],["ncedil",[326]],["ncong",[8775]],["ncongdot",[10861,824]],["ncup",[10818]],["Ncy",[1053]],["ncy",[1085]],["ndash",[8211]],["nearhk",[10532]],["nearr",[8599]],["neArr",[8663]],["nearrow",[8599]],["ne",[8800]],["nedot",[8784,824]],["NegativeMediumSpace",[8203]],["NegativeThickSpace",[8203]],["NegativeThinSpace",[8203]],["NegativeVeryThinSpace",[8203]],["nequiv",[8802]],["nesear",[10536]],["nesim",[8770,824]],["NestedGreaterGreater",[8811]],["NestedLessLess",[8810]],["nexist",[8708]],["nexists",[8708]],["Nfr",[120081]],["nfr",[120107]],["ngE",[8807,824]],["nge",[8817]],["ngeq",[8817]],["ngeqq",[8807,824]],["ngeqslant",[10878,824]],["nges",[10878,824]],["nGg",[8921,824]],["ngsim",[8821]],["nGt",[8811,8402]],["ngt",[8815]],["ngtr",[8815]],["nGtv",[8811,824]],["nharr",[8622]],["nhArr",[8654]],["nhpar",[10994]],["ni",[8715]],["nis",[8956]],["nisd",[8954]],["niv",[8715]],["NJcy",[1034]],["njcy",[1114]],["nlarr",[8602]],["nlArr",[8653]],["nldr",[8229]],["nlE",[8806,824]],["nle",[8816]],["nleftarrow",[8602]],["nLeftarrow",[8653]],["nleftrightarrow",[8622]],["nLeftrightarrow",[8654]],["nleq",[8816]],["nleqq",[8806,824]],["nleqslant",[10877,824]],["nles",[10877,824]],["nless",[8814]],["nLl",[8920,824]],["nlsim",[8820]],["nLt",[8810,8402]],["nlt",[8814]],["nltri",[8938]],["nltrie",[8940]],["nLtv",[8810,824]],["nmid",[8740]],["NoBreak",[8288]],["NonBreakingSpace",[160]],["nopf",[120159]],["Nopf",[8469]],["Not",[10988]],["not",[172]],["NotCongruent",[8802]],["NotCupCap",[8813]],["NotDoubleVerticalBar",[8742]],["NotElement",[8713]],["NotEqual",[8800]],["NotEqualTilde",[8770,824]],["NotExists",[8708]],["NotGreater",[8815]],["NotGreaterEqual",[8817]],["NotGreaterFullEqual",[8807,824]],["NotGreaterGreater",[8811,824]],["NotGreaterLess",[8825]],["NotGreaterSlantEqual",[10878,824]],["NotGreaterTilde",[8821]],["NotHumpDownHump",[8782,824]],["NotHumpEqual",[8783,824]],["notin",[8713]],["notindot",[8949,824]],["notinE",[8953,824]],["notinva",[8713]],["notinvb",[8951]],["notinvc",[8950]],["NotLeftTriangleBar",[10703,824]],["NotLeftTriangle",[8938]],["NotLeftTriangleEqual",[8940]],["NotLess",[8814]],["NotLessEqual",[8816]],["NotLessGreater",[8824]],["NotLessLess",[8810,824]],["NotLessSlantEqual",[10877,824]],["NotLessTilde",[8820]],["NotNestedGreaterGreater",[10914,824]],["NotNestedLessLess",[10913,824]],["notni",[8716]],["notniva",[8716]],["notnivb",[8958]],["notnivc",[8957]],["NotPrecedes",[8832]],["NotPrecedesEqual",[10927,824]],["NotPrecedesSlantEqual",[8928]],["NotReverseElement",[8716]],["NotRightTriangleBar",[10704,824]],["NotRightTriangle",[8939]],["NotRightTriangleEqual",[8941]],["NotSquareSubset",[8847,824]],["NotSquareSubsetEqual",[8930]],["NotSquareSuperset",[8848,824]],["NotSquareSupersetEqual",[8931]],["NotSubset",[8834,8402]],["NotSubsetEqual",[8840]],["NotSucceeds",[8833]],["NotSucceedsEqual",[10928,824]],["NotSucceedsSlantEqual",[8929]],["NotSucceedsTilde",[8831,824]],["NotSuperset",[8835,8402]],["NotSupersetEqual",[8841]],["NotTilde",[8769]],["NotTildeEqual",[8772]],["NotTildeFullEqual",[8775]],["NotTildeTilde",[8777]],["NotVerticalBar",[8740]],["nparallel",[8742]],["npar",[8742]],["nparsl",[11005,8421]],["npart",[8706,824]],["npolint",[10772]],["npr",[8832]],["nprcue",[8928]],["nprec",[8832]],["npreceq",[10927,824]],["npre",[10927,824]],["nrarrc",[10547,824]],["nrarr",[8603]],["nrArr",[8655]],["nrarrw",[8605,824]],["nrightarrow",[8603]],["nRightarrow",[8655]],["nrtri",[8939]],["nrtrie",[8941]],["nsc",[8833]],["nsccue",[8929]],["nsce",[10928,824]],["Nscr",[119977]],["nscr",[120003]],["nshortmid",[8740]],["nshortparallel",[8742]],["nsim",[8769]],["nsime",[8772]],["nsimeq",[8772]],["nsmid",[8740]],["nspar",[8742]],["nsqsube",[8930]],["nsqsupe",[8931]],["nsub",[8836]],["nsubE",[10949,824]],["nsube",[8840]],["nsubset",[8834,8402]],["nsubseteq",[8840]],["nsubseteqq",[10949,824]],["nsucc",[8833]],["nsucceq",[10928,824]],["nsup",[8837]],["nsupE",[10950,824]],["nsupe",[8841]],["nsupset",[8835,8402]],["nsupseteq",[8841]],["nsupseteqq",[10950,824]],["ntgl",[8825]],["Ntilde",[209]],["ntilde",[241]],["ntlg",[8824]],["ntriangleleft",[8938]],["ntrianglelefteq",[8940]],["ntriangleright",[8939]],["ntrianglerighteq",[8941]],["Nu",[925]],["nu",[957]],["num",[35]],["numero",[8470]],["numsp",[8199]],["nvap",[8781,8402]],["nvdash",[8876]],["nvDash",[8877]],["nVdash",[8878]],["nVDash",[8879]],["nvge",[8805,8402]],["nvgt",[62,8402]],["nvHarr",[10500]],["nvinfin",[10718]],["nvlArr",[10498]],["nvle",[8804,8402]],["nvlt",[60,8402]],["nvltrie",[8884,8402]],["nvrArr",[10499]],["nvrtrie",[8885,8402]],["nvsim",[8764,8402]],["nwarhk",[10531]],["nwarr",[8598]],["nwArr",[8662]],["nwarrow",[8598]],["nwnear",[10535]],["Oacute",[211]],["oacute",[243]],["oast",[8859]],["Ocirc",[212]],["ocirc",[244]],["ocir",[8858]],["Ocy",[1054]],["ocy",[1086]],["odash",[8861]],["Odblac",[336]],["odblac",[337]],["odiv",[10808]],["odot",[8857]],["odsold",[10684]],["OElig",[338]],["oelig",[339]],["ofcir",[10687]],["Ofr",[120082]],["ofr",[120108]],["ogon",[731]],["Ograve",[210]],["ograve",[242]],["ogt",[10689]],["ohbar",[10677]],["ohm",[937]],["oint",[8750]],["olarr",[8634]],["olcir",[10686]],["olcross",[10683]],["oline",[8254]],["olt",[10688]],["Omacr",[332]],["omacr",[333]],["Omega",[937]],["omega",[969]],["Omicron",[927]],["omicron",[959]],["omid",[10678]],["ominus",[8854]],["Oopf",[120134]],["oopf",[120160]],["opar",[10679]],["OpenCurlyDoubleQuote",[8220]],["OpenCurlyQuote",[8216]],["operp",[10681]],["oplus",[8853]],["orarr",[8635]],["Or",[10836]],["or",[8744]],["ord",[10845]],["order",[8500]],["orderof",[8500]],["ordf",[170]],["ordm",[186]],["origof",[8886]],["oror",[10838]],["orslope",[10839]],["orv",[10843]],["oS",[9416]],["Oscr",[119978]],["oscr",[8500]],["Oslash",[216]],["oslash",[248]],["osol",[8856]],["Otilde",[213]],["otilde",[245]],["otimesas",[10806]],["Otimes",[10807]],["otimes",[8855]],["Ouml",[214]],["ouml",[246]],["ovbar",[9021]],["OverBar",[8254]],["OverBrace",[9182]],["OverBracket",[9140]],["OverParenthesis",[9180]],["para",[182]],["parallel",[8741]],["par",[8741]],["parsim",[10995]],["parsl",[11005]],["part",[8706]],["PartialD",[8706]],["Pcy",[1055]],["pcy",[1087]],["percnt",[37]],["period",[46]],["permil",[8240]],["perp",[8869]],["pertenk",[8241]],["Pfr",[120083]],["pfr",[120109]],["Phi",[934]],["phi",[966]],["phiv",[981]],["phmmat",[8499]],["phone",[9742]],["Pi",[928]],["pi",[960]],["pitchfork",[8916]],["piv",[982]],["planck",[8463]],["planckh",[8462]],["plankv",[8463]],["plusacir",[10787]],["plusb",[8862]],["pluscir",[10786]],["plus",[43]],["plusdo",[8724]],["plusdu",[10789]],["pluse",[10866]],["PlusMinus",[177]],["plusmn",[177]],["plussim",[10790]],["plustwo",[10791]],["pm",[177]],["Poincareplane",[8460]],["pointint",[10773]],["popf",[120161]],["Popf",[8473]],["pound",[163]],["prap",[10935]],["Pr",[10939]],["pr",[8826]],["prcue",[8828]],["precapprox",[10935]],["prec",[8826]],["preccurlyeq",[8828]],["Precedes",[8826]],["PrecedesEqual",[10927]],["PrecedesSlantEqual",[8828]],["PrecedesTilde",[8830]],["preceq",[10927]],["precnapprox",[10937]],["precneqq",[10933]],["precnsim",[8936]],["pre",[10927]],["prE",[10931]],["precsim",[8830]],["prime",[8242]],["Prime",[8243]],["primes",[8473]],["prnap",[10937]],["prnE",[10933]],["prnsim",[8936]],["prod",[8719]],["Product",[8719]],["profalar",[9006]],["profline",[8978]],["profsurf",[8979]],["prop",[8733]],["Proportional",[8733]],["Proportion",[8759]],["propto",[8733]],["prsim",[8830]],["prurel",[8880]],["Pscr",[119979]],["pscr",[120005]],["Psi",[936]],["psi",[968]],["puncsp",[8200]],["Qfr",[120084]],["qfr",[120110]],["qint",[10764]],["qopf",[120162]],["Qopf",[8474]],["qprime",[8279]],["Qscr",[119980]],["qscr",[120006]],["quaternions",[8461]],["quatint",[10774]],["quest",[63]],["questeq",[8799]],["quot",[34]],["QUOT",[34]],["rAarr",[8667]],["race",[8765,817]],["Racute",[340]],["racute",[341]],["radic",[8730]],["raemptyv",[10675]],["rang",[10217]],["Rang",[10219]],["rangd",[10642]],["range",[10661]],["rangle",[10217]],["raquo",[187]],["rarrap",[10613]],["rarrb",[8677]],["rarrbfs",[10528]],["rarrc",[10547]],["rarr",[8594]],["Rarr",[8608]],["rArr",[8658]],["rarrfs",[10526]],["rarrhk",[8618]],["rarrlp",[8620]],["rarrpl",[10565]],["rarrsim",[10612]],["Rarrtl",[10518]],["rarrtl",[8611]],["rarrw",[8605]],["ratail",[10522]],["rAtail",[10524]],["ratio",[8758]],["rationals",[8474]],["rbarr",[10509]],["rBarr",[10511]],["RBarr",[10512]],["rbbrk",[10099]],["rbrace",[125]],["rbrack",[93]],["rbrke",[10636]],["rbrksld",[10638]],["rbrkslu",[10640]],["Rcaron",[344]],["rcaron",[345]],["Rcedil",[342]],["rcedil",[343]],["rceil",[8969]],["rcub",[125]],["Rcy",[1056]],["rcy",[1088]],["rdca",[10551]],["rdldhar",[10601]],["rdquo",[8221]],["rdquor",[8221]],["CloseCurlyDoubleQuote",[8221]],["rdsh",[8627]],["real",[8476]],["realine",[8475]],["realpart",[8476]],["reals",[8477]],["Re",[8476]],["rect",[9645]],["reg",[174]],["REG",[174]],["ReverseElement",[8715]],["ReverseEquilibrium",[8651]],["ReverseUpEquilibrium",[10607]],["rfisht",[10621]],["rfloor",[8971]],["rfr",[120111]],["Rfr",[8476]],["rHar",[10596]],["rhard",[8641]],["rharu",[8640]],["rharul",[10604]],["Rho",[929]],["rho",[961]],["rhov",[1009]],["RightAngleBracket",[10217]],["RightArrowBar",[8677]],["rightarrow",[8594]],["RightArrow",[8594]],["Rightarrow",[8658]],["RightArrowLeftArrow",[8644]],["rightarrowtail",[8611]],["RightCeiling",[8969]],["RightDoubleBracket",[10215]],["RightDownTeeVector",[10589]],["RightDownVectorBar",[10581]],["RightDownVector",[8642]],["RightFloor",[8971]],["rightharpoondown",[8641]],["rightharpoonup",[8640]],["rightleftarrows",[8644]],["rightleftharpoons",[8652]],["rightrightarrows",[8649]],["rightsquigarrow",[8605]],["RightTeeArrow",[8614]],["RightTee",[8866]],["RightTeeVector",[10587]],["rightthreetimes",[8908]],["RightTriangleBar",[10704]],["RightTriangle",[8883]],["RightTriangleEqual",[8885]],["RightUpDownVector",[10575]],["RightUpTeeVector",[10588]],["RightUpVectorBar",[10580]],["RightUpVector",[8638]],["RightVectorBar",[10579]],["RightVector",[8640]],["ring",[730]],["risingdotseq",[8787]],["rlarr",[8644]],["rlhar",[8652]],["rlm",[8207]],["rmoustache",[9137]],["rmoust",[9137]],["rnmid",[10990]],["roang",[10221]],["roarr",[8702]],["robrk",[10215]],["ropar",[10630]],["ropf",[120163]],["Ropf",[8477]],["roplus",[10798]],["rotimes",[10805]],["RoundImplies",[10608]],["rpar",[41]],["rpargt",[10644]],["rppolint",[10770]],["rrarr",[8649]],["Rrightarrow",[8667]],["rsaquo",[8250]],["rscr",[120007]],["Rscr",[8475]],["rsh",[8625]],["Rsh",[8625]],["rsqb",[93]],["rsquo",[8217]],["rsquor",[8217]],["CloseCurlyQuote",[8217]],["rthree",[8908]],["rtimes",[8906]],["rtri",[9657]],["rtrie",[8885]],["rtrif",[9656]],["rtriltri",[10702]],["RuleDelayed",[10740]],["ruluhar",[10600]],["rx",[8478]],["Sacute",[346]],["sacute",[347]],["sbquo",[8218]],["scap",[10936]],["Scaron",[352]],["scaron",[353]],["Sc",[10940]],["sc",[8827]],["sccue",[8829]],["sce",[10928]],["scE",[10932]],["Scedil",[350]],["scedil",[351]],["Scirc",[348]],["scirc",[349]],["scnap",[10938]],["scnE",[10934]],["scnsim",[8937]],["scpolint",[10771]],["scsim",[8831]],["Scy",[1057]],["scy",[1089]],["sdotb",[8865]],["sdot",[8901]],["sdote",[10854]],["searhk",[10533]],["searr",[8600]],["seArr",[8664]],["searrow",[8600]],["sect",[167]],["semi",[59]],["seswar",[10537]],["setminus",[8726]],["setmn",[8726]],["sext",[10038]],["Sfr",[120086]],["sfr",[120112]],["sfrown",[8994]],["sharp",[9839]],["SHCHcy",[1065]],["shchcy",[1097]],["SHcy",[1064]],["shcy",[1096]],["ShortDownArrow",[8595]],["ShortLeftArrow",[8592]],["shortmid",[8739]],["shortparallel",[8741]],["ShortRightArrow",[8594]],["ShortUpArrow",[8593]],["shy",[173]],["Sigma",[931]],["sigma",[963]],["sigmaf",[962]],["sigmav",[962]],["sim",[8764]],["simdot",[10858]],["sime",[8771]],["simeq",[8771]],["simg",[10910]],["simgE",[10912]],["siml",[10909]],["simlE",[10911]],["simne",[8774]],["simplus",[10788]],["simrarr",[10610]],["slarr",[8592]],["SmallCircle",[8728]],["smallsetminus",[8726]],["smashp",[10803]],["smeparsl",[10724]],["smid",[8739]],["smile",[8995]],["smt",[10922]],["smte",[10924]],["smtes",[10924,65024]],["SOFTcy",[1068]],["softcy",[1100]],["solbar",[9023]],["solb",[10692]],["sol",[47]],["Sopf",[120138]],["sopf",[120164]],["spades",[9824]],["spadesuit",[9824]],["spar",[8741]],["sqcap",[8851]],["sqcaps",[8851,65024]],["sqcup",[8852]],["sqcups",[8852,65024]],["Sqrt",[8730]],["sqsub",[8847]],["sqsube",[8849]],["sqsubset",[8847]],["sqsubseteq",[8849]],["sqsup",[8848]],["sqsupe",[8850]],["sqsupset",[8848]],["sqsupseteq",[8850]],["square",[9633]],["Square",[9633]],["SquareIntersection",[8851]],["SquareSubset",[8847]],["SquareSubsetEqual",[8849]],["SquareSuperset",[8848]],["SquareSupersetEqual",[8850]],["SquareUnion",[8852]],["squarf",[9642]],["squ",[9633]],["squf",[9642]],["srarr",[8594]],["Sscr",[119982]],["sscr",[120008]],["ssetmn",[8726]],["ssmile",[8995]],["sstarf",[8902]],["Star",[8902]],["star",[9734]],["starf",[9733]],["straightepsilon",[1013]],["straightphi",[981]],["strns",[175]],["sub",[8834]],["Sub",[8912]],["subdot",[10941]],["subE",[10949]],["sube",[8838]],["subedot",[10947]],["submult",[10945]],["subnE",[10955]],["subne",[8842]],["subplus",[10943]],["subrarr",[10617]],["subset",[8834]],["Subset",[8912]],["subseteq",[8838]],["subseteqq",[10949]],["SubsetEqual",[8838]],["subsetneq",[8842]],["subsetneqq",[10955]],["subsim",[10951]],["subsub",[10965]],["subsup",[10963]],["succapprox",[10936]],["succ",[8827]],["succcurlyeq",[8829]],["Succeeds",[8827]],["SucceedsEqual",[10928]],["SucceedsSlantEqual",[8829]],["SucceedsTilde",[8831]],["succeq",[10928]],["succnapprox",[10938]],["succneqq",[10934]],["succnsim",[8937]],["succsim",[8831]],["SuchThat",[8715]],["sum",[8721]],["Sum",[8721]],["sung",[9834]],["sup1",[185]],["sup2",[178]],["sup3",[179]],["sup",[8835]],["Sup",[8913]],["supdot",[10942]],["supdsub",[10968]],["supE",[10950]],["supe",[8839]],["supedot",[10948]],["Superset",[8835]],["SupersetEqual",[8839]],["suphsol",[10185]],["suphsub",[10967]],["suplarr",[10619]],["supmult",[10946]],["supnE",[10956]],["supne",[8843]],["supplus",[10944]],["supset",[8835]],["Supset",[8913]],["supseteq",[8839]],["supseteqq",[10950]],["supsetneq",[8843]],["supsetneqq",[10956]],["supsim",[10952]],["supsub",[10964]],["supsup",[10966]],["swarhk",[10534]],["swarr",[8601]],["swArr",[8665]],["swarrow",[8601]],["swnwar",[10538]],["szlig",[223]],["Tab",[9]],["target",[8982]],["Tau",[932]],["tau",[964]],["tbrk",[9140]],["Tcaron",[356]],["tcaron",[357]],["Tcedil",[354]],["tcedil",[355]],["Tcy",[1058]],["tcy",[1090]],["tdot",[8411]],["telrec",[8981]],["Tfr",[120087]],["tfr",[120113]],["there4",[8756]],["therefore",[8756]],["Therefore",[8756]],["Theta",[920]],["theta",[952]],["thetasym",[977]],["thetav",[977]],["thickapprox",[8776]],["thicksim",[8764]],["ThickSpace",[8287,8202]],["ThinSpace",[8201]],["thinsp",[8201]],["thkap",[8776]],["thksim",[8764]],["THORN",[222]],["thorn",[254]],["tilde",[732]],["Tilde",[8764]],["TildeEqual",[8771]],["TildeFullEqual",[8773]],["TildeTilde",[8776]],["timesbar",[10801]],["timesb",[8864]],["times",[215]],["timesd",[10800]],["tint",[8749]],["toea",[10536]],["topbot",[9014]],["topcir",[10993]],["top",[8868]],["Topf",[120139]],["topf",[120165]],["topfork",[10970]],["tosa",[10537]],["tprime",[8244]],["trade",[8482]],["TRADE",[8482]],["triangle",[9653]],["triangledown",[9663]],["triangleleft",[9667]],["trianglelefteq",[8884]],["triangleq",[8796]],["triangleright",[9657]],["trianglerighteq",[8885]],["tridot",[9708]],["trie",[8796]],["triminus",[10810]],["TripleDot",[8411]],["triplus",[10809]],["trisb",[10701]],["tritime",[10811]],["trpezium",[9186]],["Tscr",[119983]],["tscr",[120009]],["TScy",[1062]],["tscy",[1094]],["TSHcy",[1035]],["tshcy",[1115]],["Tstrok",[358]],["tstrok",[359]],["twixt",[8812]],["twoheadleftarrow",[8606]],["twoheadrightarrow",[8608]],["Uacute",[218]],["uacute",[250]],["uarr",[8593]],["Uarr",[8607]],["uArr",[8657]],["Uarrocir",[10569]],["Ubrcy",[1038]],["ubrcy",[1118]],["Ubreve",[364]],["ubreve",[365]],["Ucirc",[219]],["ucirc",[251]],["Ucy",[1059]],["ucy",[1091]],["udarr",[8645]],["Udblac",[368]],["udblac",[369]],["udhar",[10606]],["ufisht",[10622]],["Ufr",[120088]],["ufr",[120114]],["Ugrave",[217]],["ugrave",[249]],["uHar",[10595]],["uharl",[8639]],["uharr",[8638]],["uhblk",[9600]],["ulcorn",[8988]],["ulcorner",[8988]],["ulcrop",[8975]],["ultri",[9720]],["Umacr",[362]],["umacr",[363]],["uml",[168]],["UnderBar",[95]],["UnderBrace",[9183]],["UnderBracket",[9141]],["UnderParenthesis",[9181]],["Union",[8899]],["UnionPlus",[8846]],["Uogon",[370]],["uogon",[371]],["Uopf",[120140]],["uopf",[120166]],["UpArrowBar",[10514]],["uparrow",[8593]],["UpArrow",[8593]],["Uparrow",[8657]],["UpArrowDownArrow",[8645]],["updownarrow",[8597]],["UpDownArrow",[8597]],["Updownarrow",[8661]],["UpEquilibrium",[10606]],["upharpoonleft",[8639]],["upharpoonright",[8638]],["uplus",[8846]],["UpperLeftArrow",[8598]],["UpperRightArrow",[8599]],["upsi",[965]],["Upsi",[978]],["upsih",[978]],["Upsilon",[933]],["upsilon",[965]],["UpTeeArrow",[8613]],["UpTee",[8869]],["upuparrows",[8648]],["urcorn",[8989]],["urcorner",[8989]],["urcrop",[8974]],["Uring",[366]],["uring",[367]],["urtri",[9721]],["Uscr",[119984]],["uscr",[120010]],["utdot",[8944]],["Utilde",[360]],["utilde",[361]],["utri",[9653]],["utrif",[9652]],["uuarr",[8648]],["Uuml",[220]],["uuml",[252]],["uwangle",[10663]],["vangrt",[10652]],["varepsilon",[1013]],["varkappa",[1008]],["varnothing",[8709]],["varphi",[981]],["varpi",[982]],["varpropto",[8733]],["varr",[8597]],["vArr",[8661]],["varrho",[1009]],["varsigma",[962]],["varsubsetneq",[8842,65024]],["varsubsetneqq",[10955,65024]],["varsupsetneq",[8843,65024]],["varsupsetneqq",[10956,65024]],["vartheta",[977]],["vartriangleleft",[8882]],["vartriangleright",[8883]],["vBar",[10984]],["Vbar",[10987]],["vBarv",[10985]],["Vcy",[1042]],["vcy",[1074]],["vdash",[8866]],["vDash",[8872]],["Vdash",[8873]],["VDash",[8875]],["Vdashl",[10982]],["veebar",[8891]],["vee",[8744]],["Vee",[8897]],["veeeq",[8794]],["vellip",[8942]],["verbar",[124]],["Verbar",[8214]],["vert",[124]],["Vert",[8214]],["VerticalBar",[8739]],["VerticalLine",[124]],["VerticalSeparator",[10072]],["VerticalTilde",[8768]],["VeryThinSpace",[8202]],["Vfr",[120089]],["vfr",[120115]],["vltri",[8882]],["vnsub",[8834,8402]],["vnsup",[8835,8402]],["Vopf",[120141]],["vopf",[120167]],["vprop",[8733]],["vrtri",[8883]],["Vscr",[119985]],["vscr",[120011]],["vsubnE",[10955,65024]],["vsubne",[8842,65024]],["vsupnE",[10956,65024]],["vsupne",[8843,65024]],["Vvdash",[8874]],["vzigzag",[10650]],["Wcirc",[372]],["wcirc",[373]],["wedbar",[10847]],["wedge",[8743]],["Wedge",[8896]],["wedgeq",[8793]],["weierp",[8472]],["Wfr",[120090]],["wfr",[120116]],["Wopf",[120142]],["wopf",[120168]],["wp",[8472]],["wr",[8768]],["wreath",[8768]],["Wscr",[119986]],["wscr",[120012]],["xcap",[8898]],["xcirc",[9711]],["xcup",[8899]],["xdtri",[9661]],["Xfr",[120091]],["xfr",[120117]],["xharr",[10231]],["xhArr",[10234]],["Xi",[926]],["xi",[958]],["xlarr",[10229]],["xlArr",[10232]],["xmap",[10236]],["xnis",[8955]],["xodot",[10752]],["Xopf",[120143]],["xopf",[120169]],["xoplus",[10753]],["xotime",[10754]],["xrarr",[10230]],["xrArr",[10233]],["Xscr",[119987]],["xscr",[120013]],["xsqcup",[10758]],["xuplus",[10756]],["xutri",[9651]],["xvee",[8897]],["xwedge",[8896]],["Yacute",[221]],["yacute",[253]],["YAcy",[1071]],["yacy",[1103]],["Ycirc",[374]],["ycirc",[375]],["Ycy",[1067]],["ycy",[1099]],["yen",[165]],["Yfr",[120092]],["yfr",[120118]],["YIcy",[1031]],["yicy",[1111]],["Yopf",[120144]],["yopf",[120170]],["Yscr",[119988]],["yscr",[120014]],["YUcy",[1070]],["yucy",[1102]],["yuml",[255]],["Yuml",[376]],["Zacute",[377]],["zacute",[378]],["Zcaron",[381]],["zcaron",[382]],["Zcy",[1047]],["zcy",[1079]],["Zdot",[379]],["zdot",[380]],["zeetrf",[8488]],["ZeroWidthSpace",[8203]],["Zeta",[918]],["zeta",[950]],["zfr",[120119]],["Zfr",[8488]],["ZHcy",[1046]],["zhcy",[1078]],["zigrarr",[8669]],["zopf",[120171]],["Zopf",[8484]],["Zscr",[119989]],["zscr",[120015]],["zwj",[8205]],["zwnj",[8204]]],i=[["NewLine",[10]]],o={},a={};!function(e,t){var n=s.length;for(;n--;){var r=s[n],o=r[0],a=r[1],l=a[0],u=a[1],c=l<32||l>126||62===l||60===l||38===l||34===l||39===l,d=void 0;c&&(d=t[l]=t[l]||{}),u?(e[o]=String.fromCharCode(l)+String.fromCharCode(u),c&&(d[u]=o)):(e[o]=String.fromCharCode(l),c&&(d[""]=o))}n=i.length;for(;n--;){var h=i[n],f=(o=h[0],h[1]);l=f[0],u=f[1];e[o]=String.fromCharCode(l)+(u?String.fromCharCode(u):"")}}(o,a);var l=function(){function e(){}return e.prototype.decode=function(e){return e&&e.length?e.replace(/&(#?[\w\d]+);?/g,(function(e,t){var n;if("#"===t.charAt(0)){var s="x"===t.charAt(1)?parseInt(t.substr(2).toLowerCase(),16):parseInt(t.substr(1));(!isNaN(s)||s>=-32768)&&(n=s<=65535?String.fromCharCode(s):r.fromCodePoint(s))}else n=o[t];return n||e})):""},e.decode=function(t){return(new e).decode(t)},e.prototype.encode=function(e){if(!e||!e.length)return"";for(var t=e.length,n="",r=0;r<t;){var s=a[e.charCodeAt(r)];if(s){var i=s[e.charCodeAt(r+1)];if(i?r++:i=s[""],i){n+="&"+i+";",r++;continue}}n+=e.charAt(r),r++}return n},e.encode=function(t){return(new e).encode(t)},e.prototype.encodeNonUTF=function(e){if(!e||!e.length)return"";for(var t=e.length,n="",s=0;s<t;){var i=e.charCodeAt(s),o=a[i];if(o){var l=o[e.charCodeAt(s+1)];if(l?s++:l=o[""],l){n+="&"+l+";",s++;continue}}i<32||i>126?i>=r.highSurrogateFrom&&i<=r.highSurrogateTo?(n+="&#"+r.getCodePoint(e,s)+";",s++):n+="&#"+i+";":n+=e.charAt(s),s++}return n},e.encodeNonUTF=function(t){return(new e).encodeNonUTF(t)},e.prototype.encodeNonASCII=function(e){if(!e||!e.length)return"";for(var t=e.length,n="",s=0;s<t;){var i=e.charCodeAt(s);i<=255?n+=e[s++]:i>=r.highSurrogateFrom&&i<=r.highSurrogateTo?(n+="&#"+r.getCodePoint(e,s)+";",s+=2):(n+="&#"+i+";",s++)}return n},e.encodeNonASCII=function(t){return(new e).encodeNonASCII(t)},e}();t.Html5Entities=l},"./node_modules/html-entities/lib/index.js":(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n("./node_modules/html-entities/lib/xml-entities.js");t.XmlEntities=r.XmlEntities;var s=n("./node_modules/html-entities/lib/html4-entities.js");t.Html4Entities=s.Html4Entities;var i=n("./node_modules/html-entities/lib/html5-entities.js");t.Html5Entities=i.Html5Entities,t.AllHtmlEntities=i.Html5Entities},"./node_modules/html-entities/lib/surrogate-pairs.js":(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.fromCodePoint=String.fromCodePoint||function(e){return String.fromCharCode(Math.floor((e-65536)/1024)+55296,(e-65536)%1024+56320)},t.getCodePoint=String.prototype.codePointAt?function(e,t){return e.codePointAt(t)}:function(e,t){return 1024*(e.charCodeAt(t)-55296)+e.charCodeAt(t+1)-56320+65536},t.highSurrogateFrom=55296,t.highSurrogateTo=56319},"./node_modules/html-entities/lib/xml-entities.js":(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n("./node_modules/html-entities/lib/surrogate-pairs.js"),s={"&lt":"<","&gt":">","&quot":'"',"&apos":"'","&amp":"&","&lt;":"<","&gt;":">","&quot;":'"',"&apos;":"'","&amp;":"&"},i={60:"lt",62:"gt",34:"quot",39:"apos",38:"amp"},o={"<":"&lt;",">":"&gt;",'"':"&quot;","'":"&apos;","&":"&amp;"},a=function(){function e(){}return e.prototype.encode=function(e){return e&&e.length?e.replace(/[<>"'&]/g,(function(e){return o[e]})):""},e.encode=function(t){return(new e).encode(t)},e.prototype.decode=function(e){return e&&e.length?e.replace(/&#?[0-9a-zA-Z]+;?/g,(function(e){if("#"===e.charAt(1)){var t="x"===e.charAt(2).toLowerCase()?parseInt(e.substr(3),16):parseInt(e.substr(2));return!isNaN(t)||t>=-32768?t<=65535?String.fromCharCode(t):r.fromCodePoint(t):""}return s[e]||e})):""},e.decode=function(t){return(new e).decode(t)},e.prototype.encodeNonUTF=function(e){if(!e||!e.length)return"";for(var t=e.length,n="",s=0;s<t;){var o=e.charCodeAt(s),a=i[o];a?(n+="&"+a+";",s++):(o<32||o>126?o>=r.highSurrogateFrom&&o<=r.highSurrogateTo?(n+="&#"+r.getCodePoint(e,s)+";",s++):n+="&#"+o+";":n+=e.charAt(s),s++)}return n},e.encodeNonUTF=function(t){return(new e).encodeNonUTF(t)},e.prototype.encodeNonASCII=function(e){if(!e||!e.length)return"";for(var t=e.length,n="",s=0;s<t;){var i=e.charCodeAt(s);i<=255?n+=e[s++]:(i>=r.highSurrogateFrom&&i<=r.highSurrogateTo?(n+="&#"+r.getCodePoint(e,s)+";",s++):n+="&#"+i+";",s++)}return n},e.encodeNonASCII=function(t){return(new e).encodeNonASCII(t)},e}();t.XmlEntities=a},"./node_modules/loglevel/lib/loglevel.js":function(e,t,n){var r,s;!function(i,o){"use strict";r=function(){var e=function(){},t="undefined",n=typeof window!==t&&typeof window.navigator!==t&&/Trident\/|MSIE /.test(window.navigator.userAgent),r=["trace","debug","info","warn","error"];function s(e,t){var n=e[t];if("function"==typeof n.bind)return n.bind(e);try{return Function.prototype.bind.call(n,e)}catch(t){return function(){return Function.prototype.apply.apply(n,[e,arguments])}}}function i(){console.log&&(console.log.apply?console.log.apply(console,arguments):Function.prototype.apply.apply(console.log,[console,arguments])),console.trace&&console.trace()}function o(r){return"debug"===r&&(r="log"),typeof console!==t&&("trace"===r&&n?i:void 0!==console[r]?s(console,r):void 0!==console.log?s(console,"log"):e)}function a(t,n){for(var s=0;s<r.length;s++){var i=r[s];this[i]=s<t?e:this.methodFactory(i,t,n)}this.log=this.debug}function l(e,n,r){return function(){typeof console!==t&&(a.call(this,n,r),this[e].apply(this,arguments))}}function u(e,t,n){return o(e)||l.apply(this,arguments)}function c(e,n,s){var i,o=this;n=null==n?"WARN":n;var l="loglevel";function c(e){var n=(r[e]||"silent").toUpperCase();if(typeof window!==t&&l){try{return void(window.localStorage[l]=n)}catch(e){}try{window.document.cookie=encodeURIComponent(l)+"="+n+";"}catch(e){}}}function d(){var e;if(typeof window!==t&&l){try{e=window.localStorage[l]}catch(e){}if(typeof e===t)try{var n=window.document.cookie,r=n.indexOf(encodeURIComponent(l)+"=");-1!==r&&(e=/^([^;]+)/.exec(n.slice(r))[1])}catch(e){}return void 0===o.levels[e]&&(e=void 0),e}}function h(){if(typeof window!==t&&l){try{return void window.localStorage.removeItem(l)}catch(e){}try{window.document.cookie=encodeURIComponent(l)+"=; expires=Thu, 01 Jan 1970 00:00:00 UTC"}catch(e){}}}"string"==typeof e?l+=":"+e:"symbol"==typeof e&&(l=void 0),o.name=e,o.levels={TRACE:0,DEBUG:1,INFO:2,WARN:3,ERROR:4,SILENT:5},o.methodFactory=s||u,o.getLevel=function(){return i},o.setLevel=function(n,r){if("string"==typeof n&&void 0!==o.levels[n.toUpperCase()]&&(n=o.levels[n.toUpperCase()]),!("number"==typeof n&&n>=0&&n<=o.levels.SILENT))throw"log.setLevel() called with invalid level: "+n;if(i=n,!1!==r&&c(n),a.call(o,n,e),typeof console===t&&n<o.levels.SILENT)return"No console available for logging"},o.setDefaultLevel=function(e){n=e,d()||o.setLevel(e,!1)},o.resetLevel=function(){o.setLevel(n,!1),h()},o.enableAll=function(e){o.setLevel(o.levels.TRACE,e)},o.disableAll=function(e){o.setLevel(o.levels.SILENT,e)};var f=d();null==f&&(f=n),o.setLevel(f,!1)}var d=new c,h={};d.getLogger=function(e){if("symbol"!=typeof e&&"string"!=typeof e||""===e)throw new TypeError("You must supply a name when creating a logger.");var t=h[e];return t||(t=h[e]=new c(e,d.getLevel(),d.methodFactory)),t};var f=typeof window!==t?window.log:void 0;return d.noConflict=function(){return typeof window!==t&&window.log===d&&(window.log=f),d},d.getLoggers=function(){return h},d.default=d,d},void 0===(s="function"==typeof r?r.call(t,n,t,e):r)||(e.exports=s)}()},"./node_modules/motion/dist/animate.es.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{animate:()=>l,animateProgress:()=>a});var r=n("./node_modules/@motionone/dom/dist/animate/utils/controls.es.js"),s=n("./node_modules/@motionone/dom/dist/animate/index.es.js"),i=n("./node_modules/@motionone/utils/dist/is-function.es.js"),o=n("./node_modules/@motionone/animation/dist/Animation.es.js");function a(e,t={}){return(0,r.withControls)([()=>{const n=new o.Animation(e,[0,1],t);return n.finished.catch((()=>{})),n}],t,t.duration)}function l(e,t,n){return((0,i.isFunction)(e)?a:s.animate)(e,t,n)}},"./node_modules/querystring/decode.js":e=>{"use strict";function t(e,t){return Object.prototype.hasOwnProperty.call(e,t)}e.exports=function(e,n,r,s){n=n||"&",r=r||"=";var i={};if("string"!=typeof e||0===e.length)return i;var o=/\+/g;e=e.split(n);var a=1e3;s&&"number"==typeof s.maxKeys&&(a=s.maxKeys);var l=e.length;a>0&&l>a&&(l=a);for(var u=0;u<l;++u){var c,d,h,f,p=e[u].replace(o,"%20"),m=p.indexOf(r);m>=0?(c=p.substr(0,m),d=p.substr(m+1)):(c=p,d=""),h=decodeURIComponent(c),f=decodeURIComponent(d),t(i,h)?Array.isArray(i[h])?i[h].push(f):i[h]=[i[h],f]:i[h]=f}return i}},"./node_modules/querystring/encode.js":e=>{"use strict";var t=function(e){switch(typeof e){case"string":return e;case"boolean":return e?"true":"false";case"number":return isFinite(e)?e:"";default:return""}};e.exports=function(e,n,r,s){return n=n||"&",r=r||"=",null===e&&(e=void 0),"object"==typeof e?Object.keys(e).map((function(s){var i=encodeURIComponent(t(s))+r;return Array.isArray(e[s])?e[s].map((function(e){return i+encodeURIComponent(t(e))})).join(n):i+encodeURIComponent(t(e[s]))})).join(n):s?encodeURIComponent(t(s))+r+encodeURIComponent(t(e)):""}},"./node_modules/querystring/index.js":(e,t,n)=>{"use strict";t.decode=t.parse=n("./node_modules/querystring/decode.js"),t.encode=t.stringify=n("./node_modules/querystring/encode.js")},"./node_modules/sockjs-client/dist/sockjs.js":(e,t,n)=>{e.exports=function(){function e(t,n,r){function s(o,a){if(!n[o]){if(!t[o]){if(i)return i(o,!0);var l=new Error("Cannot find module '"+o+"'");throw l.code="MODULE_NOT_FOUND",l}var u=n[o]={exports:{}};t[o][0].call(u.exports,(function(e){return s(t[o][1][e]||e)}),u,u.exports,e,t,n,r)}return n[o].exports}for(var i=void 0,o=0;o<r.length;o++)s(r[o]);return s}return e}()({1:[function(e,t,r){(function(n){(function(){"use strict";var r=e("./transport-list");t.exports=e("./main")(r),"_sockjs_onload"in n&&setTimeout(n._sockjs_onload,1)}).call(this)}).call(this,void 0!==n.g?n.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"./main":14,"./transport-list":16}],2:[function(e,t,n){"use strict";var r=e("inherits"),s=e("./event");function i(){s.call(this),this.initEvent("close",!1,!1),this.wasClean=!1,this.code=0,this.reason=""}r(i,s),t.exports=i},{"./event":4,inherits:57}],3:[function(e,t,n){"use strict";var r=e("inherits"),s=e("./eventtarget");function i(){s.call(this)}r(i,s),i.prototype.removeAllListeners=function(e){e?delete this._listeners[e]:this._listeners={}},i.prototype.once=function(e,t){var n=this,r=!1;function s(){n.removeListener(e,s),r||(r=!0,t.apply(this,arguments))}this.on(e,s)},i.prototype.emit=function(){var e=arguments[0],t=this._listeners[e];if(t){for(var n=arguments.length,r=new Array(n-1),s=1;s<n;s++)r[s-1]=arguments[s];for(var i=0;i<t.length;i++)t[i].apply(this,r)}},i.prototype.on=i.prototype.addListener=s.prototype.addEventListener,i.prototype.removeListener=s.prototype.removeEventListener,t.exports.EventEmitter=i},{"./eventtarget":5,inherits:57}],4:[function(e,t,n){"use strict";function r(e){this.type=e}r.prototype.initEvent=function(e,t,n){return this.type=e,this.bubbles=t,this.cancelable=n,this.timeStamp=+new Date,this},r.prototype.stopPropagation=function(){},r.prototype.preventDefault=function(){},r.CAPTURING_PHASE=1,r.AT_TARGET=2,r.BUBBLING_PHASE=3,t.exports=r},{}],5:[function(e,t,n){"use strict";function r(){this._listeners={}}r.prototype.addEventListener=function(e,t){e in this._listeners||(this._listeners[e]=[]);var n=this._listeners[e];-1===n.indexOf(t)&&(n=n.concat([t])),this._listeners[e]=n},r.prototype.removeEventListener=function(e,t){var n=this._listeners[e];if(n){var r=n.indexOf(t);-1===r||(n.length>1?this._listeners[e]=n.slice(0,r).concat(n.slice(r+1)):delete this._listeners[e])}},r.prototype.dispatchEvent=function(){var e=arguments[0],t=e.type,n=1===arguments.length?[e]:Array.apply(null,arguments);if(this["on"+t]&&this["on"+t].apply(this,n),t in this._listeners)for(var r=this._listeners[t],s=0;s<r.length;s++)r[s].apply(this,n)},t.exports=r},{}],6:[function(e,t,n){"use strict";var r=e("inherits"),s=e("./event");function i(e){s.call(this),this.initEvent("message",!1,!1),this.data=e}r(i,s),t.exports=i},{"./event":4,inherits:57}],7:[function(e,t,n){"use strict";var r=e("./utils/iframe");function s(e){this._transport=e,e.on("message",this._transportMessage.bind(this)),e.on("close",this._transportClose.bind(this))}s.prototype._transportClose=function(e,t){r.postMessage("c",JSON.stringify([e,t]))},s.prototype._transportMessage=function(e){r.postMessage("t",e)},s.prototype._send=function(e){this._transport.send(e)},s.prototype._close=function(){this._transport.close(),this._transport.removeAllListeners()},t.exports=s},{"./utils/iframe":47}],8:[function(e,t,n){(function(n){(function(){"use strict";var r=e("./utils/url"),s=e("./utils/event"),i=e("./facade"),o=e("./info-iframe-receiver"),a=e("./utils/iframe"),l=e("./location"),u=function(){};"production"!==n.env.NODE_ENV&&(u=e("debug")("sockjs-client:iframe-bootstrap")),t.exports=function(e,t){var n,c={};t.forEach((function(e){e.facadeTransport&&(c[e.facadeTransport.transportName]=e.facadeTransport)})),c[o.transportName]=o,e.bootstrap_iframe=function(){var t;a.currentWindowId=l.hash.slice(1);var o=function(s){if(s.source===parent&&(void 0===n&&(n=s.origin),s.origin===n)){var o;try{o=JSON.parse(s.data)}catch(e){return void u("bad json",s.data)}if(o.windowId===a.currentWindowId)switch(o.type){case"s":var d;try{d=JSON.parse(o.data)}catch(e){u("bad json",o.data);break}var h=d[0],f=d[1],p=d[2],m=d[3];if(u(h,f,p,m),h!==e.version)throw new Error('Incompatible SockJS! Main site uses: "'+h+'", the iframe: "'+e.version+'".');if(!r.isOriginEqual(p,l.href)||!r.isOriginEqual(m,l.href))throw new Error("Can't connect to different domain from within an iframe. ("+l.href+", "+p+", "+m+")");t=new i(new c[f](p,m));break;case"m":t._send(o.data);break;case"c":t&&t._close(),t=null}}};s.attachEvent("message",o),a.postMessage("s")}}}).call(this)}).call(this,{env:{}})},{"./facade":7,"./info-iframe-receiver":10,"./location":13,"./utils/event":46,"./utils/iframe":47,"./utils/url":52,debug:55}],9:[function(e,t,n){(function(n){(function(){"use strict";var r=e("events").EventEmitter,s=e("inherits"),i=e("./utils/object"),o=function(){};function a(e,t){r.call(this);var n=this,s=+new Date;this.xo=new t("GET",e),this.xo.once("finish",(function(e,t){var r,a;if(200===e){if(a=+new Date-s,t)try{r=JSON.parse(t)}catch(e){o("bad json",t)}i.isObject(r)||(r={})}n.emit("finish",r,a),n.removeAllListeners()}))}"production"!==n.env.NODE_ENV&&(o=e("debug")("sockjs-client:info-ajax")),s(a,r),a.prototype.close=function(){this.removeAllListeners(),this.xo.close()},t.exports=a}).call(this)}).call(this,{env:{}})},{"./utils/object":49,debug:55,events:3,inherits:57}],10:[function(e,t,n){"use strict";var r=e("inherits"),s=e("events").EventEmitter,i=e("./transport/sender/xhr-local"),o=e("./info-ajax");function a(e){var t=this;s.call(this),this.ir=new o(e,i),this.ir.once("finish",(function(e,n){t.ir=null,t.emit("message",JSON.stringify([e,n]))}))}r(a,s),a.transportName="iframe-info-receiver",a.prototype.close=function(){this.ir&&(this.ir.close(),this.ir=null),this.removeAllListeners()},t.exports=a},{"./info-ajax":9,"./transport/sender/xhr-local":37,events:3,inherits:57}],11:[function(e,t,r){(function(n,r){(function(){"use strict";var s=e("events").EventEmitter,i=e("inherits"),o=e("./utils/event"),a=e("./transport/iframe"),l=e("./info-iframe-receiver"),u=function(){};function c(e,t){var n=this;s.call(this);var i=function(){var r=n.ifr=new a(l.transportName,t,e);r.once("message",(function(e){if(e){var t;try{t=JSON.parse(e)}catch(t){return u("bad json",e),n.emit("finish"),void n.close()}var r=t[0],s=t[1];n.emit("finish",r,s)}n.close()})),r.once("close",(function(){n.emit("finish"),n.close()}))};r.document.body?i():o.attachEvent("load",i)}"production"!==n.env.NODE_ENV&&(u=e("debug")("sockjs-client:info-iframe")),i(c,s),c.enabled=function(){return a.enabled()},c.prototype.close=function(){this.ifr&&this.ifr.close(),this.removeAllListeners(),this.ifr=null},t.exports=c}).call(this)}).call(this,{env:{}},void 0!==n.g?n.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"./info-iframe-receiver":10,"./transport/iframe":22,"./utils/event":46,debug:55,events:3,inherits:57}],12:[function(e,t,n){(function(n){(function(){"use strict";var r=e("events").EventEmitter,s=e("inherits"),i=e("./utils/url"),o=e("./transport/sender/xdr"),a=e("./transport/sender/xhr-cors"),l=e("./transport/sender/xhr-local"),u=e("./transport/sender/xhr-fake"),c=e("./info-iframe"),d=e("./info-ajax"),h=function(){};function f(e,t){h(e);var n=this;r.call(this),setTimeout((function(){n.doXhr(e,t)}),0)}"production"!==n.env.NODE_ENV&&(h=e("debug")("sockjs-client:info-receiver")),s(f,r),f._getReceiver=function(e,t,n){return n.sameOrigin?new d(t,l):a.enabled?new d(t,a):o.enabled&&n.sameScheme?new d(t,o):c.enabled()?new c(e,t):new d(t,u)},f.prototype.doXhr=function(e,t){var n=this,r=i.addPath(e,"/info");h("doXhr",r),this.xo=f._getReceiver(e,r,t),this.timeoutRef=setTimeout((function(){h("timeout"),n._cleanup(!1),n.emit("finish")}),f.timeout),this.xo.once("finish",(function(e,t){h("finish",e,t),n._cleanup(!0),n.emit("finish",e,t)}))},f.prototype._cleanup=function(e){h("_cleanup"),clearTimeout(this.timeoutRef),this.timeoutRef=null,!e&&this.xo&&this.xo.close(),this.xo=null},f.prototype.close=function(){h("close"),this.removeAllListeners(),this._cleanup(!1)},f.timeout=8e3,t.exports=f}).call(this)}).call(this,{env:{}})},{"./info-ajax":9,"./info-iframe":11,"./transport/sender/xdr":34,"./transport/sender/xhr-cors":35,"./transport/sender/xhr-fake":36,"./transport/sender/xhr-local":37,"./utils/url":52,debug:55,events:3,inherits:57}],13:[function(e,t,r){(function(e){(function(){"use strict";t.exports=e.location||{origin:"http://localhost:80",protocol:"http:",host:"localhost",port:80,href:"http://localhost/",hash:""}}).call(this)}).call(this,void 0!==n.g?n.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],14:[function(e,t,r){(function(n,r){(function(){"use strict";e("./shims");var s,i=e("url-parse"),o=e("inherits"),a=e("./utils/random"),l=e("./utils/escape"),u=e("./utils/url"),c=e("./utils/event"),d=e("./utils/transport"),h=e("./utils/object"),f=e("./utils/browser"),p=e("./utils/log"),m=e("./event/event"),g=e("./event/eventtarget"),v=e("./location"),_=e("./event/close"),y=e("./event/trans-message"),b=e("./info-receiver"),w=function(){};function x(e,t,n){if(!(this instanceof x))return new x(e,t,n);if(arguments.length<1)throw new TypeError("Failed to construct 'SockJS: 1 argument required, but only 0 present");g.call(this),this.readyState=x.CONNECTING,this.extensions="",this.protocol="",(n=n||{}).protocols_whitelist&&p.warn("'protocols_whitelist' is DEPRECATED. Use 'transports' instead."),this._transportsWhitelist=n.transports,this._transportOptions=n.transportOptions||{},this._timeout=n.timeout||0;var r=n.sessionId||8;if("function"==typeof r)this._generateSessionId=r;else{if("number"!=typeof r)throw new TypeError("If sessionId is used in the options, it needs to be a number or a function.");this._generateSessionId=function(){return a.string(r)}}this._server=n.server||a.numberString(1e3);var s=new i(e);if(!s.host||!s.protocol)throw new SyntaxError("The URL '"+e+"' is invalid");if(s.hash)throw new SyntaxError("The URL must not contain a fragment");if("http:"!==s.protocol&&"https:"!==s.protocol)throw new SyntaxError("The URL's scheme must be either 'http:' or 'https:'. '"+s.protocol+"' is not allowed.");var o="https:"===s.protocol;if("https:"===v.protocol&&!o&&!u.isLoopbackAddr(s.hostname))throw new Error("SecurityError: An insecure SockJS connection may not be initiated from a page loaded over HTTPS");t?Array.isArray(t)||(t=[t]):t=[];var l=t.sort();l.forEach((function(e,t){if(!e)throw new SyntaxError("The protocols entry '"+e+"' is invalid.");if(t<l.length-1&&e===l[t+1])throw new SyntaxError("The protocols entry '"+e+"' is duplicated.")}));var c=u.getOrigin(v.href);this._origin=c?c.toLowerCase():null,s.set("pathname",s.pathname.replace(/\/+$/,"")),this.url=s.href,w("using url",this.url),this._urlInfo={nullOrigin:!f.hasDomain(),sameOrigin:u.isOriginEqual(this.url,v.href),sameScheme:u.isSchemeEqual(this.url,v.href)},this._ir=new b(this.url,this._urlInfo),this._ir.once("finish",this._receiveInfo.bind(this))}function j(e){return 1e3===e||e>=3e3&&e<=4999}"production"!==n.env.NODE_ENV&&(w=e("debug")("sockjs-client:main")),o(x,g),x.prototype.close=function(e,t){if(e&&!j(e))throw new Error("InvalidAccessError: Invalid code");if(t&&t.length>123)throw new SyntaxError("reason argument has an invalid length");if(this.readyState!==x.CLOSING&&this.readyState!==x.CLOSED){var n=!0;this._close(e||1e3,t||"Normal closure",n)}},x.prototype.send=function(e){if("string"!=typeof e&&(e=""+e),this.readyState===x.CONNECTING)throw new Error("InvalidStateError: The connection has not been established yet");this.readyState===x.OPEN&&this._transport.send(l.quote(e))},x.version=e("./version"),x.CONNECTING=0,x.OPEN=1,x.CLOSING=2,x.CLOSED=3,x.prototype._receiveInfo=function(e,t){if(w("_receiveInfo",t),this._ir=null,e){this._rto=this.countRTO(t),this._transUrl=e.base_url?e.base_url:this.url,e=h.extend(e,this._urlInfo),w("info",e);var n=s.filterToEnabled(this._transportsWhitelist,e);this._transports=n.main,w(this._transports.length+" enabled transports"),this._connect()}else this._close(1002,"Cannot connect to server")},x.prototype._connect=function(){for(var e=this._transports.shift();e;e=this._transports.shift()){if(w("attempt",e.transportName),e.needBody&&(!r.document.body||void 0!==r.document.readyState&&"complete"!==r.document.readyState&&"interactive"!==r.document.readyState))return w("waiting for body"),this._transports.unshift(e),void c.attachEvent("load",this._connect.bind(this));var t=Math.max(this._timeout,this._rto*e.roundTrips||5e3);this._transportTimeoutId=setTimeout(this._transportTimeout.bind(this),t),w("using timeout",t);var n=u.addPath(this._transUrl,"/"+this._server+"/"+this._generateSessionId()),s=this._transportOptions[e.transportName];w("transport url",n);var i=new e(n,this._transUrl,s);return i.on("message",this._transportMessage.bind(this)),i.once("close",this._transportClose.bind(this)),i.transportName=e.transportName,void(this._transport=i)}this._close(2e3,"All transports failed",!1)},x.prototype._transportTimeout=function(){w("_transportTimeout"),this.readyState===x.CONNECTING&&(this._transport&&this._transport.close(),this._transportClose(2007,"Transport timed out"))},x.prototype._transportMessage=function(e){w("_transportMessage",e);var t,n=this,r=e.slice(0,1),s=e.slice(1);switch(r){case"o":return void this._open();case"h":return this.dispatchEvent(new m("heartbeat")),void w("heartbeat",this.transport)}if(s)try{t=JSON.parse(s)}catch(e){w("bad json",s)}if(void 0!==t)switch(r){case"a":Array.isArray(t)&&t.forEach((function(e){w("message",n.transport,e),n.dispatchEvent(new y(e))}));break;case"m":w("message",this.transport,t),this.dispatchEvent(new y(t));break;case"c":Array.isArray(t)&&2===t.length&&this._close(t[0],t[1],!0)}else w("empty payload",s)},x.prototype._transportClose=function(e,t){w("_transportClose",this.transport,e,t),this._transport&&(this._transport.removeAllListeners(),this._transport=null,this.transport=null),j(e)||2e3===e||this.readyState!==x.CONNECTING?this._close(e,t):this._connect()},x.prototype._open=function(){w("_open",this._transport&&this._transport.transportName,this.readyState),this.readyState===x.CONNECTING?(this._transportTimeoutId&&(clearTimeout(this._transportTimeoutId),this._transportTimeoutId=null),this.readyState=x.OPEN,this.transport=this._transport.transportName,this.dispatchEvent(new m("open")),w("connected",this.transport)):this._close(1006,"Server lost session")},x.prototype._close=function(e,t,n){w("_close",this.transport,e,t,n,this.readyState);var r=!1;if(this._ir&&(r=!0,this._ir.close(),this._ir=null),this._transport&&(this._transport.close(),this._transport=null,this.transport=null),this.readyState===x.CLOSED)throw new Error("InvalidStateError: SockJS has already been closed");this.readyState=x.CLOSING,setTimeout(function(){this.readyState=x.CLOSED,r&&this.dispatchEvent(new m("error"));var s=new _("close");s.wasClean=n||!1,s.code=e||1e3,s.reason=t,this.dispatchEvent(s),this.onmessage=this.onclose=this.onerror=null,w("disconnected")}.bind(this),0)},x.prototype.countRTO=function(e){return e>100?4*e:300+e},t.exports=function(t){return s=d(t),e("./iframe-bootstrap")(x,t),x}}).call(this)}).call(this,{env:{}},void 0!==n.g?n.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"./event/close":2,"./event/event":4,"./event/eventtarget":5,"./event/trans-message":6,"./iframe-bootstrap":8,"./info-receiver":12,"./location":13,"./shims":15,"./utils/browser":44,"./utils/escape":45,"./utils/event":46,"./utils/log":48,"./utils/object":49,"./utils/random":50,"./utils/transport":51,"./utils/url":52,"./version":53,debug:55,inherits:57,"url-parse":60}],15:[function(e,t,n){"use strict";var r,s=Array.prototype,i=Object.prototype,o=Function.prototype,a=String.prototype,l=s.slice,u=i.toString,c=function(e){return"[object Function]"===i.toString.call(e)},d=function(e){return"[object Array]"===u.call(e)},h=function(e){return"[object String]"===u.call(e)},f=Object.defineProperty&&function(){try{return Object.defineProperty({},"x",{}),!0}catch(e){return!1}}();r=f?function(e,t,n,r){!r&&t in e||Object.defineProperty(e,t,{configurable:!0,enumerable:!1,writable:!0,value:n})}:function(e,t,n,r){!r&&t in e||(e[t]=n)};var p=function(e,t,n){for(var s in t)i.hasOwnProperty.call(t,s)&&r(e,s,t[s],n)},m=function(e){if(null==e)throw new TypeError("can't convert "+e+" to object");return Object(e)};function g(e){var t=+e;return t!=t?t=0:0!==t&&t!==1/0&&t!==-1/0&&(t=(t>0||-1)*Math.floor(Math.abs(t))),t}function v(e){return e>>>0}function _(){}p(o,{bind:function(e){var t=this;if(!c(t))throw new TypeError("Function.prototype.bind called on incompatible "+t);for(var n=l.call(arguments,1),r=function(){if(this instanceof a){var r=t.apply(this,n.concat(l.call(arguments)));return Object(r)===r?r:this}return t.apply(e,n.concat(l.call(arguments)))},s=Math.max(0,t.length-n.length),i=[],o=0;o<s;o++)i.push("$"+o);var a=Function("binder","return function ("+i.join(",")+"){ return binder.apply(this, arguments); }")(r);return t.prototype&&(_.prototype=t.prototype,a.prototype=new _,_.prototype=null),a}}),p(Array,{isArray:d});var y,b,w,x=Object("a"),j="a"!==x[0]||!(0 in x);p(s,{forEach:function(e){var t=m(this),n=j&&h(this)?this.split(""):t,r=arguments[1],s=-1,i=n.length>>>0;if(!c(e))throw new TypeError;for(;++s<i;)s in n&&e.call(r,n[s],s,t)}},(y=s.forEach,b=!0,w=!0,y&&(y.call("foo",(function(e,t,n){"object"!=typeof n&&(b=!1)})),y.call([1],(function(){w="string"==typeof this}),"x")),!(y&&b&&w)));var E=Array.prototype.indexOf&&-1!==[0,1].indexOf(1,2);p(s,{indexOf:function(e){var t=j&&h(this)?this.split(""):m(this),n=t.length>>>0;if(!n)return-1;var r=0;for(arguments.length>1&&(r=g(arguments[1])),r=r>=0?r:Math.max(0,n+r);r<n;r++)if(r in t&&t[r]===e)return r;return-1}},E);var k,S=a.split;2!=="ab".split(/(?:ab)*/).length||4!==".".split(/(.?)(.?)/).length||"t"==="tesst".split(/(s)*/)[1]||4!=="test".split(/(?:)/,-1).length||"".split(/.?/).length||".".split(/()()/).length>1?(k=void 0===/()??/.exec("")[1],a.split=function(e,t){var n=this;if(void 0===e&&0===t)return[];if("[object RegExp]"!==u.call(e))return S.call(this,e,t);var r,i,o,a,l=[],c=(e.ignoreCase?"i":"")+(e.multiline?"m":"")+(e.extended?"x":"")+(e.sticky?"y":""),d=0;for(e=new RegExp(e.source,c+"g"),n+="",k||(r=new RegExp("^"+e.source+"$(?!\\s)",c)),t=void 0===t?-1>>>0:v(t);(i=e.exec(n))&&!((o=i.index+i[0].length)>d&&(l.push(n.slice(d,i.index)),!k&&i.length>1&&i[0].replace(r,(function(){for(var e=1;e<arguments.length-2;e++)void 0===arguments[e]&&(i[e]=void 0)})),i.length>1&&i.index<n.length&&s.push.apply(l,i.slice(1)),a=i[0].length,d=o,l.length>=t));)e.lastIndex===i.index&&e.lastIndex++;return d===n.length?!a&&e.test("")||l.push(""):l.push(n.slice(d)),l.length>t?l.slice(0,t):l}):"0".split(void 0,0).length&&(a.split=function(e,t){return void 0===e&&0===t?[]:S.call(this,e,t)});var O=a.substr,T="".substr&&"b"!=="0b".substr(-1);p(a,{substr:function(e,t){return O.call(this,e<0&&(e=this.length+e)<0?0:e,t)}},T)},{}],16:[function(e,t,n){"use strict";t.exports=[e("./transport/websocket"),e("./transport/xhr-streaming"),e("./transport/xdr-streaming"),e("./transport/eventsource"),e("./transport/lib/iframe-wrap")(e("./transport/eventsource")),e("./transport/htmlfile"),e("./transport/lib/iframe-wrap")(e("./transport/htmlfile")),e("./transport/xhr-polling"),e("./transport/xdr-polling"),e("./transport/lib/iframe-wrap")(e("./transport/xhr-polling")),e("./transport/jsonp-polling")]},{"./transport/eventsource":20,"./transport/htmlfile":21,"./transport/jsonp-polling":23,"./transport/lib/iframe-wrap":26,"./transport/websocket":38,"./transport/xdr-polling":39,"./transport/xdr-streaming":40,"./transport/xhr-polling":41,"./transport/xhr-streaming":42}],17:[function(e,t,r){(function(n,r){(function(){"use strict";var s=e("events").EventEmitter,i=e("inherits"),o=e("../../utils/event"),a=e("../../utils/url"),l=r.XMLHttpRequest,u=function(){};function c(e,t,n,r){u(e,t);var i=this;s.call(this),setTimeout((function(){i._start(e,t,n,r)}),0)}"production"!==n.env.NODE_ENV&&(u=e("debug")("sockjs-client:browser:xhr")),i(c,s),c.prototype._start=function(e,t,n,r){var s=this;try{this.xhr=new l}catch(e){}if(!this.xhr)return u("no xhr"),this.emit("finish",0,"no xhr support"),void this._cleanup();t=a.addQuery(t,"t="+ +new Date),this.unloadRef=o.unloadAdd((function(){u("unload cleanup"),s._cleanup(!0)}));try{this.xhr.open(e,t,!0),this.timeout&&"timeout"in this.xhr&&(this.xhr.timeout=this.timeout,this.xhr.ontimeout=function(){u("xhr timeout"),s.emit("finish",0,""),s._cleanup(!1)})}catch(e){return u("exception",e),this.emit("finish",0,""),void this._cleanup(!1)}if(r&&r.noCredentials||!c.supportsCORS||(u("withCredentials"),this.xhr.withCredentials=!0),r&&r.headers)for(var i in r.headers)this.xhr.setRequestHeader(i,r.headers[i]);this.xhr.onreadystatechange=function(){if(s.xhr){var e,t,n=s.xhr;switch(u("readyState",n.readyState),n.readyState){case 3:try{t=n.status,e=n.responseText}catch(e){}u("status",t),1223===t&&(t=204),200===t&&e&&e.length>0&&(u("chunk"),s.emit("chunk",t,e));break;case 4:t=n.status,u("status",t),1223===t&&(t=204),12005!==t&&12029!==t||(t=0),u("finish",t,n.responseText),s.emit("finish",t,n.responseText),s._cleanup(!1)}}};try{s.xhr.send(n)}catch(e){s.emit("finish",0,""),s._cleanup(!1)}},c.prototype._cleanup=function(e){if(u("cleanup"),this.xhr){if(this.removeAllListeners(),o.unloadDel(this.unloadRef),this.xhr.onreadystatechange=function(){},this.xhr.ontimeout&&(this.xhr.ontimeout=null),e)try{this.xhr.abort()}catch(e){}this.unloadRef=this.xhr=null}},c.prototype.close=function(){u("close"),this._cleanup(!0)},c.enabled=!!l;var d=["Active"].concat("Object").join("X");!c.enabled&&d in r&&(u("overriding xmlhttprequest"),l=function(){try{return new r[d]("Microsoft.XMLHTTP")}catch(e){return null}},c.enabled=!!new l);var h=!1;try{h="withCredentials"in new l}catch(e){}c.supportsCORS=h,t.exports=c}).call(this)}).call(this,{env:{}},void 0!==n.g?n.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"../../utils/event":46,"../../utils/url":52,debug:55,events:3,inherits:57}],18:[function(e,t,r){(function(e){(function(){t.exports=e.EventSource}).call(this)}).call(this,void 0!==n.g?n.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],19:[function(e,t,r){(function(e){(function(){"use strict";var n=e.WebSocket||e.MozWebSocket;t.exports=n?function(e){return new n(e)}:void 0}).call(this)}).call(this,void 0!==n.g?n.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],20:[function(e,t,n){"use strict";var r=e("inherits"),s=e("./lib/ajax-based"),i=e("./receiver/eventsource"),o=e("./sender/xhr-cors"),a=e("eventsource");function l(e){if(!l.enabled())throw new Error("Transport created when disabled");s.call(this,e,"/eventsource",i,o)}r(l,s),l.enabled=function(){return!!a},l.transportName="eventsource",l.roundTrips=2,t.exports=l},{"./lib/ajax-based":24,"./receiver/eventsource":29,"./sender/xhr-cors":35,eventsource:18,inherits:57}],21:[function(e,t,n){"use strict";var r=e("inherits"),s=e("./receiver/htmlfile"),i=e("./sender/xhr-local"),o=e("./lib/ajax-based");function a(e){if(!s.enabled)throw new Error("Transport created when disabled");o.call(this,e,"/htmlfile",s,i)}r(a,o),a.enabled=function(e){return s.enabled&&e.sameOrigin},a.transportName="htmlfile",a.roundTrips=2,t.exports=a},{"./lib/ajax-based":24,"./receiver/htmlfile":30,"./sender/xhr-local":37,inherits:57}],22:[function(e,t,n){(function(n){(function(){"use strict";var r=e("inherits"),s=e("events").EventEmitter,i=e("../version"),o=e("../utils/url"),a=e("../utils/iframe"),l=e("../utils/event"),u=e("../utils/random"),c=function(){};function d(e,t,n){if(!d.enabled())throw new Error("Transport created when disabled");s.call(this);var r=this;this.origin=o.getOrigin(n),this.baseUrl=n,this.transUrl=t,this.transport=e,this.windowId=u.string(8);var i=o.addPath(n,"/iframe.html")+"#"+this.windowId;c(e,t,i),this.iframeObj=a.createIframe(i,(function(e){c("err callback"),r.emit("close",1006,"Unable to load an iframe ("+e+")"),r.close()})),this.onmessageCallback=this._message.bind(this),l.attachEvent("message",this.onmessageCallback)}"production"!==n.env.NODE_ENV&&(c=e("debug")("sockjs-client:transport:iframe")),r(d,s),d.prototype.close=function(){if(c("close"),this.removeAllListeners(),this.iframeObj){l.detachEvent("message",this.onmessageCallback);try{this.postMessage("c")}catch(e){}this.iframeObj.cleanup(),this.iframeObj=null,this.onmessageCallback=this.iframeObj=null}},d.prototype._message=function(e){if(c("message",e.data),o.isOriginEqual(e.origin,this.origin)){var t;try{t=JSON.parse(e.data)}catch(t){return void c("bad json",e.data)}if(t.windowId===this.windowId)switch(t.type){case"s":this.iframeObj.loaded(),this.postMessage("s",JSON.stringify([i,this.transport,this.transUrl,this.baseUrl]));break;case"t":this.emit("message",t.data);break;case"c":var n;try{n=JSON.parse(t.data)}catch(e){return void c("bad json",t.data)}this.emit("close",n[0],n[1]),this.close()}else c("mismatched window id",t.windowId,this.windowId)}else c("not same origin",e.origin,this.origin)},d.prototype.postMessage=function(e,t){c("postMessage",e,t),this.iframeObj.post(JSON.stringify({windowId:this.windowId,type:e,data:t||""}),this.origin)},d.prototype.send=function(e){c("send",e),this.postMessage("m",e)},d.enabled=function(){return a.iframeEnabled},d.transportName="iframe",d.roundTrips=2,t.exports=d}).call(this)}).call(this,{env:{}})},{"../utils/event":46,"../utils/iframe":47,"../utils/random":50,"../utils/url":52,"../version":53,debug:55,events:3,inherits:57}],23:[function(e,t,r){(function(n){(function(){"use strict";var r=e("inherits"),s=e("./lib/sender-receiver"),i=e("./receiver/jsonp"),o=e("./sender/jsonp");function a(e){if(!a.enabled())throw new Error("Transport created when disabled");s.call(this,e,"/jsonp",o,i)}r(a,s),a.enabled=function(){return!!n.document},a.transportName="jsonp-polling",a.roundTrips=1,a.needBody=!0,t.exports=a}).call(this)}).call(this,void 0!==n.g?n.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"./lib/sender-receiver":28,"./receiver/jsonp":31,"./sender/jsonp":33,inherits:57}],24:[function(e,t,n){(function(n){(function(){"use strict";var r=e("inherits"),s=e("../../utils/url"),i=e("./sender-receiver"),o=function(){};function a(e){return function(t,n,r){o("create ajax sender",t,n);var i={};"string"==typeof n&&(i.headers={"Content-type":"text/plain"});var a=s.addPath(t,"/xhr_send"),l=new e("POST",a,n,i);return l.once("finish",(function(e){if(o("finish",e),l=null,200!==e&&204!==e)return r(new Error("http status "+e));r()})),function(){o("abort"),l.close(),l=null;var e=new Error("Aborted");e.code=1e3,r(e)}}}function l(e,t,n,r){i.call(this,e,t,a(r),n,r)}"production"!==n.env.NODE_ENV&&(o=e("debug")("sockjs-client:ajax-based")),r(l,i),t.exports=l}).call(this)}).call(this,{env:{}})},{"../../utils/url":52,"./sender-receiver":28,debug:55,inherits:57}],25:[function(e,t,n){(function(n){(function(){"use strict";var r=e("inherits"),s=e("events").EventEmitter,i=function(){};function o(e,t){i(e),s.call(this),this.sendBuffer=[],this.sender=t,this.url=e}"production"!==n.env.NODE_ENV&&(i=e("debug")("sockjs-client:buffered-sender")),r(o,s),o.prototype.send=function(e){i("send",e),this.sendBuffer.push(e),this.sendStop||this.sendSchedule()},o.prototype.sendScheduleWait=function(){i("sendScheduleWait");var e,t=this;this.sendStop=function(){i("sendStop"),t.sendStop=null,clearTimeout(e)},e=setTimeout((function(){i("timeout"),t.sendStop=null,t.sendSchedule()}),25)},o.prototype.sendSchedule=function(){i("sendSchedule",this.sendBuffer.length);var e=this;if(this.sendBuffer.length>0){var t="["+this.sendBuffer.join(",")+"]";this.sendStop=this.sender(this.url,t,(function(t){e.sendStop=null,t?(i("error",t),e.emit("close",t.code||1006,"Sending error: "+t),e.close()):e.sendScheduleWait()})),this.sendBuffer=[]}},o.prototype._cleanup=function(){i("_cleanup"),this.removeAllListeners()},o.prototype.close=function(){i("close"),this._cleanup(),this.sendStop&&(this.sendStop(),this.sendStop=null)},t.exports=o}).call(this)}).call(this,{env:{}})},{debug:55,events:3,inherits:57}],26:[function(e,t,r){(function(n){(function(){"use strict";var r=e("inherits"),s=e("../iframe"),i=e("../../utils/object");t.exports=function(e){function t(t,n){s.call(this,e.transportName,t,n)}return r(t,s),t.enabled=function(t,r){if(!n.document)return!1;var o=i.extend({},r);return o.sameOrigin=!0,e.enabled(o)&&s.enabled()},t.transportName="iframe-"+e.transportName,t.needBody=!0,t.roundTrips=s.roundTrips+e.roundTrips-1,t.facadeTransport=e,t}}).call(this)}).call(this,void 0!==n.g?n.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"../../utils/object":49,"../iframe":22,inherits:57}],27:[function(e,t,n){(function(n){(function(){"use strict";var r=e("inherits"),s=e("events").EventEmitter,i=function(){};function o(e,t,n){i(t),s.call(this),this.Receiver=e,this.receiveUrl=t,this.AjaxObject=n,this._scheduleReceiver()}"production"!==n.env.NODE_ENV&&(i=e("debug")("sockjs-client:polling")),r(o,s),o.prototype._scheduleReceiver=function(){i("_scheduleReceiver");var e=this,t=this.poll=new this.Receiver(this.receiveUrl,this.AjaxObject);t.on("message",(function(t){i("message",t),e.emit("message",t)})),t.once("close",(function(n,r){i("close",n,r,e.pollIsClosing),e.poll=t=null,e.pollIsClosing||("network"===r?e._scheduleReceiver():(e.emit("close",n||1006,r),e.removeAllListeners()))}))},o.prototype.abort=function(){i("abort"),this.removeAllListeners(),this.pollIsClosing=!0,this.poll&&this.poll.abort()},t.exports=o}).call(this)}).call(this,{env:{}})},{debug:55,events:3,inherits:57}],28:[function(e,t,n){(function(n){(function(){"use strict";var r=e("inherits"),s=e("../../utils/url"),i=e("./buffered-sender"),o=e("./polling"),a=function(){};function l(e,t,n,r,l){var u=s.addPath(e,t);a(u);var c=this;i.call(this,e,n),this.poll=new o(r,u,l),this.poll.on("message",(function(e){a("poll message",e),c.emit("message",e)})),this.poll.once("close",(function(e,t){a("poll close",e,t),c.poll=null,c.emit("close",e,t),c.close()}))}"production"!==n.env.NODE_ENV&&(a=e("debug")("sockjs-client:sender-receiver")),r(l,i),l.prototype.close=function(){i.prototype.close.call(this),a("close"),this.removeAllListeners(),this.poll&&(this.poll.abort(),this.poll=null)},t.exports=l}).call(this)}).call(this,{env:{}})},{"../../utils/url":52,"./buffered-sender":25,"./polling":27,debug:55,inherits:57}],29:[function(e,t,n){(function(n){(function(){"use strict";var r=e("inherits"),s=e("events").EventEmitter,i=e("eventsource"),o=function(){};function a(e){o(e),s.call(this);var t=this,n=this.es=new i(e);n.onmessage=function(e){o("message",e.data),t.emit("message",decodeURI(e.data))},n.onerror=function(e){o("error",n.readyState,e);var r=2!==n.readyState?"network":"permanent";t._cleanup(),t._close(r)}}"production"!==n.env.NODE_ENV&&(o=e("debug")("sockjs-client:receiver:eventsource")),r(a,s),a.prototype.abort=function(){o("abort"),this._cleanup(),this._close("user")},a.prototype._cleanup=function(){o("cleanup");var e=this.es;e&&(e.onmessage=e.onerror=null,e.close(),this.es=null)},a.prototype._close=function(e){o("close",e);var t=this;setTimeout((function(){t.emit("close",null,e),t.removeAllListeners()}),200)},t.exports=a}).call(this)}).call(this,{env:{}})},{debug:55,events:3,eventsource:18,inherits:57}],30:[function(e,t,r){(function(n,r){(function(){"use strict";var s=e("inherits"),i=e("../../utils/iframe"),o=e("../../utils/url"),a=e("events").EventEmitter,l=e("../../utils/random"),u=function(){};function c(e){u(e),a.call(this);var t=this;i.polluteGlobalNamespace(),this.id="a"+l.string(6),e=o.addQuery(e,"c="+decodeURIComponent(i.WPrefix+"."+this.id)),u("using htmlfile",c.htmlfileEnabled);var n=c.htmlfileEnabled?i.createHtmlfile:i.createIframe;r[i.WPrefix][this.id]={start:function(){u("start"),t.iframeObj.loaded()},message:function(e){u("message",e),t.emit("message",e)},stop:function(){u("stop"),t._cleanup(),t._close("network")}},this.iframeObj=n(e,(function(){u("callback"),t._cleanup(),t._close("permanent")}))}"production"!==n.env.NODE_ENV&&(u=e("debug")("sockjs-client:receiver:htmlfile")),s(c,a),c.prototype.abort=function(){u("abort"),this._cleanup(),this._close("user")},c.prototype._cleanup=function(){u("_cleanup"),this.iframeObj&&(this.iframeObj.cleanup(),this.iframeObj=null),delete r[i.WPrefix][this.id]},c.prototype._close=function(e){u("_close",e),this.emit("close",null,e),this.removeAllListeners()},c.htmlfileEnabled=!1;var d=["Active"].concat("Object").join("X");if(d in r)try{c.htmlfileEnabled=!!new r[d]("htmlfile")}catch(e){}c.enabled=c.htmlfileEnabled||i.iframeEnabled,t.exports=c}).call(this)}).call(this,{env:{}},void 0!==n.g?n.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"../../utils/iframe":47,"../../utils/random":50,"../../utils/url":52,debug:55,events:3,inherits:57}],31:[function(e,t,r){(function(n,r){(function(){"use strict";var s=e("../../utils/iframe"),i=e("../../utils/random"),o=e("../../utils/browser"),a=e("../../utils/url"),l=e("inherits"),u=e("events").EventEmitter,c=function(){};function d(e){c(e);var t=this;u.call(this),s.polluteGlobalNamespace(),this.id="a"+i.string(6);var n=a.addQuery(e,"c="+encodeURIComponent(s.WPrefix+"."+this.id));r[s.WPrefix][this.id]=this._callback.bind(this),this._createScript(n),this.timeoutId=setTimeout((function(){c("timeout"),t._abort(new Error("JSONP script loaded abnormally (timeout)"))}),d.timeout)}"production"!==n.env.NODE_ENV&&(c=e("debug")("sockjs-client:receiver:jsonp")),l(d,u),d.prototype.abort=function(){if(c("abort"),r[s.WPrefix][this.id]){var e=new Error("JSONP user aborted read");e.code=1e3,this._abort(e)}},d.timeout=35e3,d.scriptErrorTimeout=1e3,d.prototype._callback=function(e){c("_callback",e),this._cleanup(),this.aborting||(e&&(c("message",e),this.emit("message",e)),this.emit("close",null,"network"),this.removeAllListeners())},d.prototype._abort=function(e){c("_abort",e),this._cleanup(),this.aborting=!0,this.emit("close",e.code,e.message),this.removeAllListeners()},d.prototype._cleanup=function(){if(c("_cleanup"),clearTimeout(this.timeoutId),this.script2&&(this.script2.parentNode.removeChild(this.script2),this.script2=null),this.script){var e=this.script;e.parentNode.removeChild(e),e.onreadystatechange=e.onerror=e.onload=e.onclick=null,this.script=null}delete r[s.WPrefix][this.id]},d.prototype._scriptError=function(){c("_scriptError");var e=this;this.errorTimer||(this.errorTimer=setTimeout((function(){e.loadedOkay||e._abort(new Error("JSONP script loaded abnormally (onerror)"))}),d.scriptErrorTimeout))},d.prototype._createScript=function(e){c("_createScript",e);var t,n=this,s=this.script=r.document.createElement("script");if(s.id="a"+i.string(8),s.src=e,s.type="text/javascript",s.charset="UTF-8",s.onerror=this._scriptError.bind(this),s.onload=function(){c("onload"),n._abort(new Error("JSONP script loaded abnormally (onload)"))},s.onreadystatechange=function(){if(c("onreadystatechange",s.readyState),/loaded|closed/.test(s.readyState)){if(s&&s.htmlFor&&s.onclick){n.loadedOkay=!0;try{s.onclick()}catch(e){}}s&&n._abort(new Error("JSONP script loaded abnormally (onreadystatechange)"))}},void 0===s.async&&r.document.attachEvent)if(o.isOpera())(t=this.script2=r.document.createElement("script")).text="try{var a = document.getElementById('"+s.id+"'); if(a)a.onerror();}catch(x){};",s.async=t.async=!1;else{try{s.htmlFor=s.id,s.event="onclick"}catch(e){}s.async=!0}void 0!==s.async&&(s.async=!0);var a=r.document.getElementsByTagName("head")[0];a.insertBefore(s,a.firstChild),t&&a.insertBefore(t,a.firstChild)},t.exports=d}).call(this)}).call(this,{env:{}},void 0!==n.g?n.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"../../utils/browser":44,"../../utils/iframe":47,"../../utils/random":50,"../../utils/url":52,debug:55,events:3,inherits:57}],32:[function(e,t,n){(function(n){(function(){"use strict";var r=e("inherits"),s=e("events").EventEmitter,i=function(){};function o(e,t){i(e),s.call(this);var n=this;this.bufferPosition=0,this.xo=new t("POST",e,null),this.xo.on("chunk",this._chunkHandler.bind(this)),this.xo.once("finish",(function(e,t){i("finish",e,t),n._chunkHandler(e,t),n.xo=null;var r=200===e?"network":"permanent";i("close",r),n.emit("close",null,r),n._cleanup()}))}"production"!==n.env.NODE_ENV&&(i=e("debug")("sockjs-client:receiver:xhr")),r(o,s),o.prototype._chunkHandler=function(e,t){if(i("_chunkHandler",e),200===e&&t)for(var n=-1;;this.bufferPosition+=n+1){var r=t.slice(this.bufferPosition);if(-1===(n=r.indexOf("\n")))break;var s=r.slice(0,n);s&&(i("message",s),this.emit("message",s))}},o.prototype._cleanup=function(){i("_cleanup"),this.removeAllListeners()},o.prototype.abort=function(){i("abort"),this.xo&&(this.xo.close(),i("close"),this.emit("close",null,"user"),this.xo=null),this._cleanup()},t.exports=o}).call(this)}).call(this,{env:{}})},{debug:55,events:3,inherits:57}],33:[function(e,t,r){(function(n,r){(function(){"use strict";var s,i,o=e("../../utils/random"),a=e("../../utils/url"),l=function(){};function u(e){l("createIframe",e);try{return r.document.createElement('<iframe name="'+e+'">')}catch(n){var t=r.document.createElement("iframe");return t.name=e,t}}function c(){l("createForm"),(s=r.document.createElement("form")).style.display="none",s.style.position="absolute",s.method="POST",s.enctype="application/x-www-form-urlencoded",s.acceptCharset="UTF-8",(i=r.document.createElement("textarea")).name="d",s.appendChild(i),r.document.body.appendChild(s)}"production"!==n.env.NODE_ENV&&(l=e("debug")("sockjs-client:sender:jsonp")),t.exports=function(e,t,n){l(e,t),s||c();var r="a"+o.string(8);s.target=r,s.action=a.addQuery(a.addPath(e,"/jsonp_send"),"i="+r);var d=u(r);d.id=r,d.style.display="none",s.appendChild(d);try{i.value=t}catch(e){}s.submit();var h=function(e){l("completed",r,e),d.onerror&&(d.onreadystatechange=d.onerror=d.onload=null,setTimeout((function(){l("cleaning up",r),d.parentNode.removeChild(d),d=null}),500),i.value="",n(e))};return d.onerror=function(){l("onerror",r),h()},d.onload=function(){l("onload",r),h()},d.onreadystatechange=function(e){l("onreadystatechange",r,d.readyState,e),"complete"===d.readyState&&h()},function(){l("aborted",r),h(new Error("Aborted"))}}}).call(this)}).call(this,{env:{}},void 0!==n.g?n.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"../../utils/random":50,"../../utils/url":52,debug:55}],34:[function(e,t,r){(function(n,r){(function(){"use strict";var s=e("events").EventEmitter,i=e("inherits"),o=e("../../utils/event"),a=e("../../utils/browser"),l=e("../../utils/url"),u=function(){};function c(e,t,n){u(e,t);var r=this;s.call(this),setTimeout((function(){r._start(e,t,n)}),0)}"production"!==n.env.NODE_ENV&&(u=e("debug")("sockjs-client:sender:xdr")),i(c,s),c.prototype._start=function(e,t,n){u("_start");var s=this,i=new r.XDomainRequest;t=l.addQuery(t,"t="+ +new Date),i.onerror=function(){u("onerror"),s._error()},i.ontimeout=function(){u("ontimeout"),s._error()},i.onprogress=function(){u("progress",i.responseText),s.emit("chunk",200,i.responseText)},i.onload=function(){u("load"),s.emit("finish",200,i.responseText),s._cleanup(!1)},this.xdr=i,this.unloadRef=o.unloadAdd((function(){s._cleanup(!0)}));try{this.xdr.open(e,t),this.timeout&&(this.xdr.timeout=this.timeout),this.xdr.send(n)}catch(e){this._error()}},c.prototype._error=function(){this.emit("finish",0,""),this._cleanup(!1)},c.prototype._cleanup=function(e){if(u("cleanup",e),this.xdr){if(this.removeAllListeners(),o.unloadDel(this.unloadRef),this.xdr.ontimeout=this.xdr.onerror=this.xdr.onprogress=this.xdr.onload=null,e)try{this.xdr.abort()}catch(e){}this.unloadRef=this.xdr=null}},c.prototype.close=function(){u("close"),this._cleanup(!0)},c.enabled=!(!r.XDomainRequest||!a.hasDomain()),t.exports=c}).call(this)}).call(this,{env:{}},void 0!==n.g?n.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"../../utils/browser":44,"../../utils/event":46,"../../utils/url":52,debug:55,events:3,inherits:57}],35:[function(e,t,n){"use strict";var r=e("inherits"),s=e("../driver/xhr");function i(e,t,n,r){s.call(this,e,t,n,r)}r(i,s),i.enabled=s.enabled&&s.supportsCORS,t.exports=i},{"../driver/xhr":17,inherits:57}],36:[function(e,t,n){"use strict";var r=e("events").EventEmitter;function s(){var e=this;r.call(this),this.to=setTimeout((function(){e.emit("finish",200,"{}")}),s.timeout)}e("inherits")(s,r),s.prototype.close=function(){clearTimeout(this.to)},s.timeout=2e3,t.exports=s},{events:3,inherits:57}],37:[function(e,t,n){"use strict";var r=e("inherits"),s=e("../driver/xhr");function i(e,t,n){s.call(this,e,t,n,{noCredentials:!0})}r(i,s),i.enabled=s.enabled,t.exports=i},{"../driver/xhr":17,inherits:57}],38:[function(e,t,n){(function(n){(function(){"use strict";var r=e("../utils/event"),s=e("../utils/url"),i=e("inherits"),o=e("events").EventEmitter,a=e("./driver/websocket"),l=function(){};function u(e,t,n){if(!u.enabled())throw new Error("Transport created when disabled");o.call(this),l("constructor",e);var i=this,c=s.addPath(e,"/websocket");c="https"===c.slice(0,5)?"wss"+c.slice(5):"ws"+c.slice(4),this.url=c,this.ws=new a(this.url,[],n),this.ws.onmessage=function(e){l("message event",e.data),i.emit("message",e.data)},this.unloadRef=r.unloadAdd((function(){l("unload"),i.ws.close()})),this.ws.onclose=function(e){l("close event",e.code,e.reason),i.emit("close",e.code,e.reason),i._cleanup()},this.ws.onerror=function(e){l("error event",e),i.emit("close",1006,"WebSocket connection broken"),i._cleanup()}}"production"!==n.env.NODE_ENV&&(l=e("debug")("sockjs-client:websocket")),i(u,o),u.prototype.send=function(e){var t="["+e+"]";l("send",t),this.ws.send(t)},u.prototype.close=function(){l("close");var e=this.ws;this._cleanup(),e&&e.close()},u.prototype._cleanup=function(){l("_cleanup");var e=this.ws;e&&(e.onmessage=e.onclose=e.onerror=null),r.unloadDel(this.unloadRef),this.unloadRef=this.ws=null,this.removeAllListeners()},u.enabled=function(){return l("enabled"),!!a},u.transportName="websocket",u.roundTrips=2,t.exports=u}).call(this)}).call(this,{env:{}})},{"../utils/event":46,"../utils/url":52,"./driver/websocket":19,debug:55,events:3,inherits:57}],39:[function(e,t,n){"use strict";var r=e("inherits"),s=e("./lib/ajax-based"),i=e("./xdr-streaming"),o=e("./receiver/xhr"),a=e("./sender/xdr");function l(e){if(!a.enabled)throw new Error("Transport created when disabled");s.call(this,e,"/xhr",o,a)}r(l,s),l.enabled=i.enabled,l.transportName="xdr-polling",l.roundTrips=2,t.exports=l},{"./lib/ajax-based":24,"./receiver/xhr":32,"./sender/xdr":34,"./xdr-streaming":40,inherits:57}],40:[function(e,t,n){"use strict";var r=e("inherits"),s=e("./lib/ajax-based"),i=e("./receiver/xhr"),o=e("./sender/xdr");function a(e){if(!o.enabled)throw new Error("Transport created when disabled");s.call(this,e,"/xhr_streaming",i,o)}r(a,s),a.enabled=function(e){return!e.cookie_needed&&!e.nullOrigin&&o.enabled&&e.sameScheme},a.transportName="xdr-streaming",a.roundTrips=2,t.exports=a},{"./lib/ajax-based":24,"./receiver/xhr":32,"./sender/xdr":34,inherits:57}],41:[function(e,t,n){"use strict";var r=e("inherits"),s=e("./lib/ajax-based"),i=e("./receiver/xhr"),o=e("./sender/xhr-cors"),a=e("./sender/xhr-local");function l(e){if(!a.enabled&&!o.enabled)throw new Error("Transport created when disabled");s.call(this,e,"/xhr",i,o)}r(l,s),l.enabled=function(e){return!e.nullOrigin&&(!(!a.enabled||!e.sameOrigin)||o.enabled)},l.transportName="xhr-polling",l.roundTrips=2,t.exports=l},{"./lib/ajax-based":24,"./receiver/xhr":32,"./sender/xhr-cors":35,"./sender/xhr-local":37,inherits:57}],42:[function(e,t,r){(function(n){(function(){"use strict";var r=e("inherits"),s=e("./lib/ajax-based"),i=e("./receiver/xhr"),o=e("./sender/xhr-cors"),a=e("./sender/xhr-local"),l=e("../utils/browser");function u(e){if(!a.enabled&&!o.enabled)throw new Error("Transport created when disabled");s.call(this,e,"/xhr_streaming",i,o)}r(u,s),u.enabled=function(e){return!e.nullOrigin&&!l.isOpera()&&o.enabled},u.transportName="xhr-streaming",u.roundTrips=2,u.needBody=!!n.document,t.exports=u}).call(this)}).call(this,void 0!==n.g?n.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"../utils/browser":44,"./lib/ajax-based":24,"./receiver/xhr":32,"./sender/xhr-cors":35,"./sender/xhr-local":37,inherits:57}],43:[function(e,t,r){(function(e){(function(){"use strict";e.crypto&&e.crypto.getRandomValues?t.exports.randomBytes=function(t){var n=new Uint8Array(t);return e.crypto.getRandomValues(n),n}:t.exports.randomBytes=function(e){for(var t=new Array(e),n=0;n<e;n++)t[n]=Math.floor(256*Math.random());return t}}).call(this)}).call(this,void 0!==n.g?n.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],44:[function(e,t,r){(function(e){(function(){"use strict";t.exports={isOpera:function(){return e.navigator&&/opera/i.test(e.navigator.userAgent)},isKonqueror:function(){return e.navigator&&/konqueror/i.test(e.navigator.userAgent)},hasDomain:function(){if(!e.document)return!0;try{return!!e.document.domain}catch(e){return!1}}}}).call(this)}).call(this,void 0!==n.g?n.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],45:[function(e,t,n){"use strict";var r,s=/[\x00-\x1f\ud800-\udfff\ufffe\uffff\u0300-\u0333\u033d-\u0346\u034a-\u034c\u0350-\u0352\u0357-\u0358\u035c-\u0362\u0374\u037e\u0387\u0591-\u05af\u05c4\u0610-\u0617\u0653-\u0654\u0657-\u065b\u065d-\u065e\u06df-\u06e2\u06eb-\u06ec\u0730\u0732-\u0733\u0735-\u0736\u073a\u073d\u073f-\u0741\u0743\u0745\u0747\u07eb-\u07f1\u0951\u0958-\u095f\u09dc-\u09dd\u09df\u0a33\u0a36\u0a59-\u0a5b\u0a5e\u0b5c-\u0b5d\u0e38-\u0e39\u0f43\u0f4d\u0f52\u0f57\u0f5c\u0f69\u0f72-\u0f76\u0f78\u0f80-\u0f83\u0f93\u0f9d\u0fa2\u0fa7\u0fac\u0fb9\u1939-\u193a\u1a17\u1b6b\u1cda-\u1cdb\u1dc0-\u1dcf\u1dfc\u1dfe\u1f71\u1f73\u1f75\u1f77\u1f79\u1f7b\u1f7d\u1fbb\u1fbe\u1fc9\u1fcb\u1fd3\u1fdb\u1fe3\u1feb\u1fee-\u1fef\u1ff9\u1ffb\u1ffd\u2000-\u2001\u20d0-\u20d1\u20d4-\u20d7\u20e7-\u20e9\u2126\u212a-\u212b\u2329-\u232a\u2adc\u302b-\u302c\uaab2-\uaab3\uf900-\ufa0d\ufa10\ufa12\ufa15-\ufa1e\ufa20\ufa22\ufa25-\ufa26\ufa2a-\ufa2d\ufa30-\ufa6d\ufa70-\ufad9\ufb1d\ufb1f\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40-\ufb41\ufb43-\ufb44\ufb46-\ufb4e\ufff0-\uffff]/g,i=function(e){var t,n={},r=[];for(t=0;t<65536;t++)r.push(String.fromCharCode(t));return e.lastIndex=0,r.join("").replace(e,(function(e){return n[e]="\\u"+("0000"+e.charCodeAt(0).toString(16)).slice(-4),""})),e.lastIndex=0,n};t.exports={quote:function(e){var t=JSON.stringify(e);return s.lastIndex=0,s.test(t)?(r||(r=i(s)),t.replace(s,(function(e){return r[e]}))):t}}},{}],46:[function(e,t,r){(function(n){(function(){"use strict";var r=e("./random"),s={},i=!1,o=n.chrome&&n.chrome.app&&n.chrome.app.runtime;t.exports={attachEvent:function(e,t){void 0!==n.addEventListener?n.addEventListener(e,t,!1):n.document&&n.attachEvent&&(n.document.attachEvent("on"+e,t),n.attachEvent("on"+e,t))},detachEvent:function(e,t){void 0!==n.addEventListener?n.removeEventListener(e,t,!1):n.document&&n.detachEvent&&(n.document.detachEvent("on"+e,t),n.detachEvent("on"+e,t))},unloadAdd:function(e){if(o)return null;var t=r.string(8);return s[t]=e,i&&setTimeout(this.triggerUnloadCallbacks,0),t},unloadDel:function(e){e in s&&delete s[e]},triggerUnloadCallbacks:function(){for(var e in s)s[e](),delete s[e]}};var a=function(){i||(i=!0,t.exports.triggerUnloadCallbacks())};o||t.exports.attachEvent("unload",a)}).call(this)}).call(this,void 0!==n.g?n.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"./random":50}],47:[function(e,t,r){(function(n,r){(function(){"use strict";var s=e("./event"),i=e("./browser"),o=function(){};"production"!==n.env.NODE_ENV&&(o=e("debug")("sockjs-client:utils:iframe")),t.exports={WPrefix:"_jp",currentWindowId:null,polluteGlobalNamespace:function(){t.exports.WPrefix in r||(r[t.exports.WPrefix]={})},postMessage:function(e,n){r.parent!==r?r.parent.postMessage(JSON.stringify({windowId:t.exports.currentWindowId,type:e,data:n||""}),"*"):o("Cannot postMessage, no parent window.",e,n)},createIframe:function(e,t){var n,i,a=r.document.createElement("iframe"),l=function(){o("unattach"),clearTimeout(n);try{a.onload=null}catch(e){}a.onerror=null},u=function(){o("cleanup"),a&&(l(),setTimeout((function(){a&&a.parentNode.removeChild(a),a=null}),0),s.unloadDel(i))},c=function(e){o("onerror",e),a&&(u(),t(e))},d=function(e,t){o("post",e,t),setTimeout((function(){try{a&&a.contentWindow&&a.contentWindow.postMessage(e,t)}catch(e){}}),0)};return a.src=e,a.style.display="none",a.style.position="absolute",a.onerror=function(){c("onerror")},a.onload=function(){o("onload"),clearTimeout(n),n=setTimeout((function(){c("onload timeout")}),2e3)},r.document.body.appendChild(a),n=setTimeout((function(){c("timeout")}),15e3),i=s.unloadAdd(u),{post:d,cleanup:u,loaded:l}},createHtmlfile:function(e,n){var i,a,l,u=["Active"].concat("Object").join("X"),c=new r[u]("htmlfile"),d=function(){clearTimeout(i),l.onerror=null},h=function(){c&&(d(),s.unloadDel(a),l.parentNode.removeChild(l),l=c=null,CollectGarbage())},f=function(e){o("onerror",e),c&&(h(),n(e))},p=function(e,t){try{setTimeout((function(){l&&l.contentWindow&&l.contentWindow.postMessage(e,t)}),0)}catch(e){}};c.open(),c.write('<html><script>document.domain="'+r.document.domain+'";<\/script></html>'),c.close(),c.parentWindow[t.exports.WPrefix]=r[t.exports.WPrefix];var m=c.createElement("div");return c.body.appendChild(m),l=c.createElement("iframe"),m.appendChild(l),l.src=e,l.onerror=function(){f("onerror")},i=setTimeout((function(){f("timeout")}),15e3),a=s.unloadAdd(h),{post:p,cleanup:h,loaded:d}}},t.exports.iframeEnabled=!1,r.document&&(t.exports.iframeEnabled=("function"==typeof r.postMessage||"object"==typeof r.postMessage)&&!i.isKonqueror())}).call(this)}).call(this,{env:{}},void 0!==n.g?n.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"./browser":44,"./event":46,debug:55}],48:[function(e,t,r){(function(e){(function(){"use strict";var n={};["log","debug","warn"].forEach((function(t){var r;try{r=e.console&&e.console[t]&&e.console[t].apply}catch(e){}n[t]=r?function(){return e.console[t].apply(e.console,arguments)}:"log"===t?function(){}:n.log})),t.exports=n}).call(this)}).call(this,void 0!==n.g?n.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],49:[function(e,t,n){"use strict";t.exports={isObject:function(e){var t=typeof e;return"function"===t||"object"===t&&!!e},extend:function(e){if(!this.isObject(e))return e;for(var t,n,r=1,s=arguments.length;r<s;r++)for(n in t=arguments[r])Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e}}},{}],50:[function(e,t,n){"use strict";var r=e("crypto"),s="abcdefghijklmnopqrstuvwxyz012345";t.exports={string:function(e){for(var t=s.length,n=r.randomBytes(e),i=[],o=0;o<e;o++)i.push(s.substr(n[o]%t,1));return i.join("")},number:function(e){return Math.floor(Math.random()*e)},numberString:function(e){var t=(""+(e-1)).length;return(new Array(t+1).join("0")+this.number(e)).slice(-t)}}},{crypto:43}],51:[function(e,t,n){(function(n){(function(){"use strict";var r=function(){};"production"!==n.env.NODE_ENV&&(r=e("debug")("sockjs-client:utils:transport")),t.exports=function(e){return{filterToEnabled:function(t,n){var s={main:[],facade:[]};return t?"string"==typeof t&&(t=[t]):t=[],e.forEach((function(e){e&&("websocket"!==e.transportName||!1!==n.websocket?t.length&&-1===t.indexOf(e.transportName)?r("not in whitelist",e.transportName):e.enabled(n)?(r("enabled",e.transportName),s.main.push(e),e.facadeTransport&&s.facade.push(e.facadeTransport)):r("disabled",e.transportName):r("disabled from server","websocket"))})),s}}}}).call(this)}).call(this,{env:{}})},{debug:55}],52:[function(e,t,n){(function(n){(function(){"use strict";var r=e("url-parse"),s=function(){};"production"!==n.env.NODE_ENV&&(s=e("debug")("sockjs-client:utils:url")),t.exports={getOrigin:function(e){if(!e)return null;var t=new r(e);if("file:"===t.protocol)return null;var n=t.port;return n||(n="https:"===t.protocol?"443":"80"),t.protocol+"//"+t.hostname+":"+n},isOriginEqual:function(e,t){var n=this.getOrigin(e)===this.getOrigin(t);return s("same",e,t,n),n},isSchemeEqual:function(e,t){return e.split(":")[0]===t.split(":")[0]},addPath:function(e,t){var n=e.split("?");return n[0]+t+(n[1]?"?"+n[1]:"")},addQuery:function(e,t){return e+(-1===e.indexOf("?")?"?"+t:"&"+t)},isLoopbackAddr:function(e){return/^127\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})$/i.test(e)||/^\[::1\]$/.test(e)}}}).call(this)}).call(this,{env:{}})},{debug:55,"url-parse":60}],53:[function(e,t,n){t.exports="1.6.1"},{}],54:[function(e,t,n){var r=1e3,s=60*r,i=60*s,o=24*i,a=7*o,l=365.25*o;function u(e){if(!((e=String(e)).length>100)){var t=/^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(e);if(t){var n=parseFloat(t[1]);switch((t[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return n*l;case"weeks":case"week":case"w":return n*a;case"days":case"day":case"d":return n*o;case"hours":case"hour":case"hrs":case"hr":case"h":return n*i;case"minutes":case"minute":case"mins":case"min":case"m":return n*s;case"seconds":case"second":case"secs":case"sec":case"s":return n*r;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return n;default:return}}}}function c(e){var t=Math.abs(e);return t>=o?Math.round(e/o)+"d":t>=i?Math.round(e/i)+"h":t>=s?Math.round(e/s)+"m":t>=r?Math.round(e/r)+"s":e+"ms"}function d(e){var t=Math.abs(e);return t>=o?h(e,t,o,"day"):t>=i?h(e,t,i,"hour"):t>=s?h(e,t,s,"minute"):t>=r?h(e,t,r,"second"):e+" ms"}function h(e,t,n,r){var s=t>=1.5*n;return Math.round(e/n)+" "+r+(s?"s":"")}t.exports=function(e,t){t=t||{};var n=typeof e;if("string"===n&&e.length>0)return u(e);if("number"===n&&isFinite(e))return t.long?d(e):c(e);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(e))}},{}],55:[function(e,t,n){(function(r){(function(){function s(){return!("undefined"==typeof window||!window.process||"renderer"!==window.process.type&&!window.process.__nwjs)||("undefined"==typeof navigator||!navigator.userAgent||!navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))&&("undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/))}function i(e){if(e[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+e[0]+(this.useColors?"%c ":" ")+"+"+t.exports.humanize(this.diff),!this.useColors)return;const n="color: "+this.color;e.splice(1,0,n,"color: inherit");let r=0,s=0;e[0].replace(/%[a-zA-Z%]/g,(e=>{"%%"!==e&&(r++,"%c"===e&&(s=r))})),e.splice(s,0,n)}function o(e){try{e?n.storage.setItem("debug",e):n.storage.removeItem("debug")}catch(e){}}function a(){let e;try{e=n.storage.getItem("debug")}catch(e){}return!e&&void 0!==r&&"env"in r&&(e=r.env.DEBUG),e}function l(){try{return localStorage}catch(e){}}n.formatArgs=i,n.save=o,n.load=a,n.useColors=s,n.storage=l(),n.destroy=(()=>{let e=!1;return()=>{e||(e=!0,console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."))}})(),n.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],n.log=console.debug||console.log||(()=>{}),t.exports=e("./common")(n);const{formatters:u}=t.exports;u.j=function(e){try{return JSON.stringify(e)}catch(e){return"[UnexpectedJSONParseError]: "+e.message}}}).call(this)}).call(this,{env:{}})},{"./common":56}],56:[function(e,t,n){function r(t){function n(e){let t=0;for(let n=0;n<e.length;n++)t=(t<<5)-t+e.charCodeAt(n),t|=0;return r.colors[Math.abs(t)%r.colors.length]}function r(e){let t,n,i,o=null;function a(...e){if(!a.enabled)return;const n=a,s=Number(new Date),i=s-(t||s);n.diff=i,n.prev=t,n.curr=s,t=s,e[0]=r.coerce(e[0]),"string"!=typeof e[0]&&e.unshift("%O");let o=0;e[0]=e[0].replace(/%([a-zA-Z%])/g,((t,s)=>{if("%%"===t)return"%";o++;const i=r.formatters[s];if("function"==typeof i){const r=e[o];t=i.call(n,r),e.splice(o,1),o--}return t})),r.formatArgs.call(n,e),(n.log||r.log).apply(n,e)}return a.namespace=e,a.useColors=r.useColors(),a.color=r.selectColor(e),a.extend=s,a.destroy=r.destroy,Object.defineProperty(a,"enabled",{enumerable:!0,configurable:!1,get:()=>null!==o?o:(n!==r.namespaces&&(n=r.namespaces,i=r.enabled(e)),i),set:e=>{o=e}}),"function"==typeof r.init&&r.init(a),a}function s(e,t){const n=r(this.namespace+(void 0===t?":":t)+e);return n.log=this.log,n}function i(e){let t;r.save(e),r.namespaces=e,r.names=[],r.skips=[];const n=("string"==typeof e?e:"").split(/[\s,]+/),s=n.length;for(t=0;t<s;t++)n[t]&&("-"===(e=n[t].replace(/\*/g,".*?"))[0]?r.skips.push(new RegExp("^"+e.substr(1)+"$")):r.names.push(new RegExp("^"+e+"$")))}function o(){const e=[...r.names.map(l),...r.skips.map(l).map((e=>"-"+e))].join(",");return r.enable(""),e}function a(e){if("*"===e[e.length-1])return!0;let t,n;for(t=0,n=r.skips.length;t<n;t++)if(r.skips[t].test(e))return!1;for(t=0,n=r.names.length;t<n;t++)if(r.names[t].test(e))return!0;return!1}function l(e){return e.toString().substring(2,e.toString().length-2).replace(/\.\*\?$/,"*")}function u(e){return e instanceof Error?e.stack||e.message:e}function c(){console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.")}return r.debug=r,r.default=r,r.coerce=u,r.disable=o,r.enable=i,r.enabled=a,r.humanize=e("ms"),r.destroy=c,Object.keys(t).forEach((e=>{r[e]=t[e]})),r.names=[],r.skips=[],r.formatters={},r.selectColor=n,r.enable(r.load()),r}t.exports=r},{ms:54}],57:[function(e,t,n){"function"==typeof Object.create?t.exports=function(e,t){t&&(e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}))}:t.exports=function(e,t){if(t){e.super_=t;var n=function(){};n.prototype=t.prototype,e.prototype=new n,e.prototype.constructor=e}}},{}],58:[function(e,t,n){"use strict";var r,s=Object.prototype.hasOwnProperty;function i(e){try{return decodeURIComponent(e.replace(/\+/g," "))}catch(e){return null}}function o(e){for(var t,n=/([^=?&]+)=?([^&]*)/g,r={};t=n.exec(e);){var s=i(t[1]),o=i(t[2]);null===s||null===o||s in r||(r[s]=o)}return r}function a(e,t){t=t||"";var n,i,o=[];for(i in"string"!=typeof t&&(t="?"),e)if(s.call(e,i)){if((n=e[i])||null!==n&&n!==r&&!isNaN(n)||(n=""),i=encodeURIComponent(i),n=encodeURIComponent(n),null===i||null===n)continue;o.push(i+"="+n)}return o.length?t+o.join("&"):""}n.stringify=a,n.parse=o},{}],59:[function(e,t,n){"use strict";t.exports=function(e,t){if(t=t.split(":")[0],!(e=+e))return!1;switch(t){case"http":case"ws":return 80!==e;case"https":case"wss":return 443!==e;case"ftp":return 21!==e;case"gopher":return 70!==e;case"file":return!1}return 0!==e}},{}],60:[function(e,t,r){(function(n){(function(){"use strict";var r=e("requires-port"),s=e("querystringify"),i=/^[\x00-\x20\u00a0\u1680\u2000-\u200a\u2028\u2029\u202f\u205f\u3000\ufeff]+/,o=/[\n\r\t]/g,a=/^[A-Za-z][A-Za-z0-9+-.]*:\/\//,l=/:\d+$/,u=/^([a-z][a-z0-9.+-]*:)?(\/\/)?([\\/]+)?([\S\s]*)/i,c=/^[a-zA-Z]:/;function d(e){return(e||"").toString().replace(i,"")}var h=[["#","hash"],["?","query"],function(e,t){return m(t.protocol)?e.replace(/\\/g,"/"):e},["/","pathname"],["@","auth",1],[NaN,"host",void 0,1,1],[/:(\d*)$/,"port",void 0,1],[NaN,"hostname",void 0,1,1]],f={hash:1,query:1};function p(e){var t,r=("undefined"!=typeof window?window:void 0!==n?n:"undefined"!=typeof self?self:{}).location||{},s={},i=typeof(e=e||r);if("blob:"===e.protocol)s=new _(unescape(e.pathname),{});else if("string"===i)for(t in s=new _(e,{}),f)delete s[t];else if("object"===i){for(t in e)t in f||(s[t]=e[t]);void 0===s.slashes&&(s.slashes=a.test(e.href))}return s}function m(e){return"file:"===e||"ftp:"===e||"http:"===e||"https:"===e||"ws:"===e||"wss:"===e}function g(e,t){e=(e=d(e)).replace(o,""),t=t||{};var n,r=u.exec(e),s=r[1]?r[1].toLowerCase():"",i=!!r[2],a=!!r[3],l=0;return i?a?(n=r[2]+r[3]+r[4],l=r[2].length+r[3].length):(n=r[2]+r[4],l=r[2].length):a?(n=r[3]+r[4],l=r[3].length):n=r[4],"file:"===s?l>=2&&(n=n.slice(2)):m(s)?n=r[4]:s?i&&(n=n.slice(2)):l>=2&&m(t.protocol)&&(n=r[4]),{protocol:s,slashes:i||m(s),slashesCount:l,rest:n}}function v(e,t){if(""===e)return t;for(var n=(t||"/").split("/").slice(0,-1).concat(e.split("/")),r=n.length,s=n[r-1],i=!1,o=0;r--;)"."===n[r]?n.splice(r,1):".."===n[r]?(n.splice(r,1),o++):o&&(0===r&&(i=!0),n.splice(r,1),o--);return i&&n.unshift(""),"."!==s&&".."!==s||n.push(""),n.join("/")}function _(e,t,n){if(e=(e=d(e)).replace(o,""),!(this instanceof _))return new _(e,t,n);var i,a,l,u,f,y,b=h.slice(),w=typeof t,x=this,j=0;for("object"!==w&&"string"!==w&&(n=t,t=null),n&&"function"!=typeof n&&(n=s.parse),i=!(a=g(e||"",t=p(t))).protocol&&!a.slashes,x.slashes=a.slashes||i&&t.slashes,x.protocol=a.protocol||t.protocol||"",e=a.rest,("file:"===a.protocol&&(2!==a.slashesCount||c.test(e))||!a.slashes&&(a.protocol||a.slashesCount<2||!m(x.protocol)))&&(b[3]=[/(.*)/,"pathname"]);j<b.length;j++)"function"!=typeof(u=b[j])?(l=u[0],y=u[1],l!=l?x[y]=e:"string"==typeof l?~(f="@"===l?e.lastIndexOf(l):e.indexOf(l))&&("number"==typeof u[2]?(x[y]=e.slice(0,f),e=e.slice(f+u[2])):(x[y]=e.slice(f),e=e.slice(0,f))):(f=l.exec(e))&&(x[y]=f[1],e=e.slice(0,f.index)),x[y]=x[y]||i&&u[3]&&t[y]||"",u[4]&&(x[y]=x[y].toLowerCase())):e=u(e,x);n&&(x.query=n(x.query)),i&&t.slashes&&"/"!==x.pathname.charAt(0)&&(""!==x.pathname||""!==t.pathname)&&(x.pathname=v(x.pathname,t.pathname)),"/"!==x.pathname.charAt(0)&&m(x.protocol)&&(x.pathname="/"+x.pathname),r(x.port,x.protocol)||(x.host=x.hostname,x.port=""),x.username=x.password="",x.auth&&(~(f=x.auth.indexOf(":"))?(x.username=x.auth.slice(0,f),x.username=encodeURIComponent(decodeURIComponent(x.username)),x.password=x.auth.slice(f+1),x.password=encodeURIComponent(decodeURIComponent(x.password))):x.username=encodeURIComponent(decodeURIComponent(x.auth)),x.auth=x.password?x.username+":"+x.password:x.username),x.origin="file:"!==x.protocol&&m(x.protocol)&&x.host?x.protocol+"//"+x.host:"null",x.href=x.toString()}function y(e,t,n){var i=this;switch(e){case"query":"string"==typeof t&&t.length&&(t=(n||s.parse)(t)),i[e]=t;break;case"port":i[e]=t,r(t,i.protocol)?t&&(i.host=i.hostname+":"+t):(i.host=i.hostname,i[e]="");break;case"hostname":i[e]=t,i.port&&(t+=":"+i.port),i.host=t;break;case"host":i[e]=t,l.test(t)?(t=t.split(":"),i.port=t.pop(),i.hostname=t.join(":")):(i.hostname=t,i.port="");break;case"protocol":i.protocol=t.toLowerCase(),i.slashes=!n;break;case"pathname":case"hash":if(t){var o="pathname"===e?"/":"#";i[e]=t.charAt(0)!==o?o+t:t}else i[e]=t;break;case"username":case"password":i[e]=encodeURIComponent(t);break;case"auth":var a=t.indexOf(":");~a?(i.username=t.slice(0,a),i.username=encodeURIComponent(decodeURIComponent(i.username)),i.password=t.slice(a+1),i.password=encodeURIComponent(decodeURIComponent(i.password))):i.username=encodeURIComponent(decodeURIComponent(t))}for(var u=0;u<h.length;u++){var c=h[u];c[4]&&(i[c[1]]=i[c[1]].toLowerCase())}return i.auth=i.password?i.username+":"+i.password:i.username,i.origin="file:"!==i.protocol&&m(i.protocol)&&i.host?i.protocol+"//"+i.host:"null",i.href=i.toString(),i}function b(e){e&&"function"==typeof e||(e=s.stringify);var t,n=this,r=n.host,i=n.protocol;i&&":"!==i.charAt(i.length-1)&&(i+=":");var o=i+(n.protocol&&n.slashes||m(n.protocol)?"//":"");return n.username?(o+=n.username,n.password&&(o+=":"+n.password),o+="@"):n.password?(o+=":"+n.password,o+="@"):"file:"!==n.protocol&&m(n.protocol)&&!r&&"/"!==n.pathname&&(o+="@"),(":"===r[r.length-1]||l.test(n.hostname)&&!n.port)&&(r+=":"),o+=r+n.pathname,(t="object"==typeof n.query?e(n.query):n.query)&&(o+="?"!==t.charAt(0)?"?"+t:t),n.hash&&(o+=n.hash),o}_.prototype={set:y,toString:b},_.extractProtocol=g,_.location=p,_.trimLeft=d,_.qs=s,t.exports=_}).call(this)}).call(this,void 0!==n.g?n.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{querystringify:58,"requires-port":59}]},{},[1])(1)},"./node_modules/split-type/dist/index.js":(e,t,n)=>{"use strict";function r(e,t){return Object.getOwnPropertyNames(Object(e)).reduce(((n,r)=>{const s=Object.getOwnPropertyDescriptor(Object(e),r),i=Object.getOwnPropertyDescriptor(Object(t),r);return Object.defineProperty(n,r,i||s)}),{})}function s(e){return"string"==typeof e}function i(e){return Array.isArray(e)}function o(e={}){const t=r(e);let n;return void 0!==t.types?n=t.types:void 0!==t.split&&(n=t.split),void 0!==n&&(t.types=(s(n)||i(n)?String(n):"").split(",").map((e=>String(e).trim())).filter((e=>/((line)|(word)|(char))/i.test(e)))),(t.absolute||t.position)&&(t.absolute=t.absolute||/absolute/.test(e.position)),t}function a(e){const t=s(e)||i(e)?String(e):"";return{none:!t,lines:/line/i.test(t),words:/word/i.test(t),chars:/char/i.test(t)}}function l(e){return null!==e&&"object"==typeof e}function u(e){return l(e)&&/^(1|3|11)$/.test(e.nodeType)}function c(e){return i(e)?e:null==e?[]:function(e){return l(e)&&function(e){return"number"==typeof e&&e>-1&&e%1==0}(e.length)}(e)?Array.prototype.slice.call(e):[e]}function d(e){let t=e;return s(e)&&(t=/^(#[a-z]\w+)$/.test(e.trim())?document.getElementById(e.trim().slice(1)):document.querySelectorAll(e)),c(t).reduce(((e,t)=>[...e,...c(t).filter(u)]),[])}n.r(t),n.d(t,{default:()=>Y}),(()=>{function e(...e){const t=e.length;for(let n=0;n<t;n++){const t=e[n];1===t.nodeType||11===t.nodeType?this.appendChild(t):this.appendChild(document.createTextNode(String(t)))}}function t(...e){for(;this.lastChild;)this.removeChild(this.lastChild);e.length&&this.append(...e)}function n(...e){const t=this.parentNode;let n=e.length;if(t)for(n||t.removeChild(this);n--;){let r=e[n];"object"!=typeof r?r=this.ownerDocument.createTextNode(r):r.parentNode&&r.parentNode.removeChild(r),n?t.insertBefore(this.previousSibling,r):t.replaceChild(r,this)}}"undefined"!=typeof Element&&(Element.prototype.append||(Element.prototype.append=e,DocumentFragment.prototype.append=e),Element.prototype.replaceChildren||(Element.prototype.replaceChildren=t,DocumentFragment.prototype.replaceChildren=t),Element.prototype.replaceWith||(Element.prototype.replaceWith=n,DocumentFragment.prototype.replaceWith=n))})();const{entries:h,keys:f,values:p}=Object,m="_splittype",g={};let v=0;function _(e,t,n){if(!l(e))return console.warn("[data.set] owner is not an object"),null;const r=e[m]||(e[m]=++v),s=g[r]||(g[r]={});return void 0===n?t&&Object.getPrototypeOf(t)===Object.prototype&&(g[r]={...s,...t}):void 0!==t&&(s[t]=n),n}function y(e,t){const n=l(e)?e[m]:null,r=n&&g[n]||{};return void 0===t?r:r[t]}function b(e){const t=e&&e[m];t&&(delete e[t],delete g[t])}const w="\\ud800-\\udfff",x="\\u0300-\\u036f\\ufe20-\\ufe23",j="\\u20d0-\\u20f0",E="\\ufe0e\\ufe0f",k="[\\ud800-\\udfff]",S=`[${x}\\u20d0-\\u20f0]`,O="\\ud83c[\\udffb-\\udfff]",T="[^\\ud800-\\udfff]",C="(?:\\ud83c[\\udde6-\\uddff]){2}",A="[\\ud800-\\udbff][\\udc00-\\udfff]",P="\\u200d",L=`${`(?:${S}|${O})`}?`,D="[\\ufe0e\\ufe0f]?",M=D+L+("(?:\\u200d(?:"+[T,C,A].join("|")+")"+D+L+")*"),N=`(?:${[`${T}${S}?`,S,C,A,k].join("|")}\n)`,I=RegExp(`${O}(?=${O})|${N}${M}`,"g"),$=RegExp(`[${[P,w,x,j,E].join("")}]`);function R(e){return $.test(e)}function q(e){return R(e)?function(e){return e.match(I)||[]}(e):function(e){return e.split("")}(e)}function F(e,t=""){var n;return(e=null==(n=e)?"":String(n))&&s(e)&&!t&&R(e)?q(e):e.split(t)}function B(e,t){const n=document.createElement(e);return t?(Object.keys(t).forEach((e=>{const r=t[e],i=s(r)?r.trim():r;null!==i&&""!==i&&("children"===e?n.append(...c(i)):n.setAttribute(e,i))})),n):n}var U={splitClass:"",lineClass:"line",wordClass:"word",charClass:"char",types:["lines","words","chars"],absolute:!1,tagName:"div"};function W(e,t){const n=a((t=r(U,t)).types),s=t.tagName,i=e.nodeValue,o=document.createDocumentFragment();let l=[],u=[];return/^\s/.test(i)&&o.append(" "),l=function(e,t=" "){return(e?String(e):"").trim().replace(/\s+/g," ").split(t)}(i).reduce(((e,r,i,a)=>{let l,c;return n.chars&&(c=F(r).map((e=>{const n=B(s,{class:`${t.splitClass} ${t.charClass}`,style:"display: inline-block;",children:e});return _(n,"isChar",!0),u=[...u,n],n}))),n.words||n.lines?(l=B(s,{class:`${t.wordClass} ${t.splitClass}`,style:"display: inline-block; "+(n.words&&t.absolute?"position: relative;":""),children:n.chars?c:r}),_(l,{isWord:!0,isWordStart:!0,isWordEnd:!0}),o.appendChild(l)):c.forEach((e=>{o.appendChild(e)})),i<a.length-1&&o.append(" "),n.words?e.concat(l):e}),[]),/\s$/.test(i)&&o.append(" "),e.replaceWith(o),{words:l,chars:u}}function z(e,t){const n=e.nodeType,r={words:[],chars:[]};if(!/(1|3|11)/.test(n))return r;if(3===n&&/\S/.test(e.nodeValue))return W(e,t);const s=c(e.childNodes);if(s.length&&(_(e,"isSplit",!0),!y(e).isRoot)){e.style.display="inline-block",e.style.position="relative";const t=e.nextSibling,n=e.previousSibling,r=e.textContent||"",s=t?t.textContent:" ",i=n?n.textContent:" ";_(e,{isWordEnd:/\s$/.test(r)||/^\s/.test(s),isWordStart:/^\s/.test(r)||/\s$/.test(i)})}return s.reduce(((e,n)=>{const{words:r,chars:s}=z(n,t);return{words:[...e.words,...r],chars:[...e.chars,...s]}}),r)}function V(e){y(e).isWord?(b(e),e.replaceWith(...e.childNodes)):c(e.children).forEach((e=>V(e)))}function H(e,t,n){const r=a(t.types),s=t.tagName,i=e.getElementsByTagName("*"),o=[];let l,u,d,h=[],f=null,p=[];const m=e.parentElement,g=e.nextElementSibling,v=document.createDocumentFragment(),b=window.getComputedStyle(e),w=b.textAlign,x=.2*parseFloat(b.fontSize);return t.absolute&&(d={left:e.offsetLeft,top:e.offsetTop,width:e.offsetWidth},u=e.offsetWidth,l=e.offsetHeight,_(e,{cssWidth:e.style.width,cssHeight:e.style.height})),c(i).forEach((s=>{const i=s.parentElement===e,{width:a,height:l,top:u,left:c}=function(e,t,n,r){if(!n.absolute)return{top:t?e.offsetTop:null};const s=e.offsetParent,[i,o]=r;let a=0,l=0;if(s&&s!==document.body){const e=s.getBoundingClientRect();a=e.x+i,l=e.y+o}const{width:u,height:c,x:d,y:h}=e.getBoundingClientRect();return{width:u,height:c,top:h+o-l,left:d+i-a}}(s,i,t,n);/^br$/i.test(s.nodeName)||(r.lines&&i&&((null===f||u-f>=x)&&(f=u,o.push(h=[])),h.push(s)),t.absolute&&_(s,{top:u,left:c,width:a,height:l}))})),m&&m.removeChild(e),r.lines&&(p=o.map((e=>{const n=B(s,{class:`${t.splitClass} ${t.lineClass}`,style:`display: block; text-align: ${w}; width: 100%;`});_(n,"isLine",!0);const r={height:0,top:1e4};return v.appendChild(n),e.forEach(((e,t,s)=>{const{isWordEnd:i,top:o,height:a}=y(e),l=s[t+1];r.height=Math.max(r.height,a),r.top=Math.min(r.top,o),n.appendChild(e),i&&y(l).isWordStart&&n.append(" ")})),t.absolute&&_(n,{height:r.height,top:r.top}),n})),r.words||V(v),e.replaceChildren(v)),t.absolute&&(e.style.width=`${e.style.width||u}px`,e.style.height=`${l}px`,c(i).forEach((e=>{const{isLine:t,top:n,left:r,width:s,height:i}=y(e),o=y(e.parentElement),a=!t&&o.isLine;e.style.top=`${a?n-o.top:n}px`,e.style.left=t?`${d.left}px`:r-(a?d.left:0)+"px",e.style.height=`${i}px`,e.style.width=t?`${d.width}px`:`${s}px`,e.style.position="absolute"}))),m&&(g?m.insertBefore(e,g):m.appendChild(e)),p}let G=r(U,{});class Y{static get data(){return g}static get defaults(){return G}static set defaults(e){G=r(G,o(e))}static setDefaults(e){return G=r(G,o(e)),U}static revert(e){d(e).forEach((e=>{const{isSplit:t,html:n,cssWidth:r,cssHeight:s}=y(e);t&&(e.innerHTML=n,e.style.width=r||"",e.style.height=s||"",b(e))}))}static create(e,t){return new Y(e,t)}constructor(e,t){this.isSplit=!1,this.settings=r(G,o(t)),this.elements=d(e),this.revert(),this.elements.forEach((e=>{_(e,"html",e.innerHTML)})),this.split()}split(e){this.revert(),this.lines=[],this.words=[],this.chars=[];const t=[window.pageXOffset,window.pageYOffset];void 0!==e&&(this.settings=r(this.settings,o(e)));const n=a(this.settings.types);n.none||(this.elements.forEach((e=>{_(e,"isRoot",!0);const{words:t,chars:n}=z(e,this.settings);this.words=[...this.words,...t],this.chars=[...this.chars,...n]})),this.elements.forEach((e=>{if(n.lines||this.settings.absolute){const n=H(e,this.settings,t);this.lines=[...this.lines,...n]}})),this.isSplit=!0,window.scrollTo(t[0],t[1]),h(g).forEach((([e,{isRoot:t,isSplit:n}])=>{t&&n||(g[e]=null,delete g[e])})))}revert(){this.isSplit&&(this.lines=null,this.words=null,this.chars=null,this.isSplit=!1),Y.revert(this.elements)}}},"./node_modules/tiny-emitter/index.js":e=>{function t(){}t.prototype={on:function(e,t,n){var r=this.e||(this.e={});return(r[e]||(r[e]=[])).push({fn:t,ctx:n}),this},once:function(e,t,n){var r=this;function s(){r.off(e,s),t.apply(n,arguments)}return s._=t,this.on(e,s,n)},emit:function(e){for(var t=[].slice.call(arguments,1),n=((this.e||(this.e={}))[e]||[]).slice(),r=0,s=n.length;r<s;r++)n[r].fn.apply(n[r].ctx,t);return this},off:function(e,t){var n=this.e||(this.e={}),r=n[e],s=[];if(r&&t)for(var i=0,o=r.length;i<o;i++)r[i].fn!==t&&r[i].fn._!==t&&s.push(r[i]);return s.length?n[e]=s:delete n[e],this}},e.exports=t,e.exports.TinyEmitter=t},"./node_modules/tslib/tslib.es6.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{__assign:()=>i,__asyncDelegator:()=>w,__asyncGenerator:()=>b,__asyncValues:()=>x,__await:()=>y,__awaiter:()=>c,__classPrivateFieldGet:()=>O,__classPrivateFieldIn:()=>C,__classPrivateFieldSet:()=>T,__createBinding:()=>h,__decorate:()=>a,__exportStar:()=>f,__extends:()=>s,__generator:()=>d,__importDefault:()=>S,__importStar:()=>k,__makeTemplateObject:()=>j,__metadata:()=>u,__param:()=>l,__read:()=>m,__rest:()=>o,__spread:()=>g,__spreadArray:()=>_,__spreadArrays:()=>v,__values:()=>p});var r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},r(e,t)};function s(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}var i=function(){return i=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var s in t=arguments[n])Object.prototype.hasOwnProperty.call(t,s)&&(e[s]=t[s]);return e},i.apply(this,arguments)};function o(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var s=0;for(r=Object.getOwnPropertySymbols(e);s<r.length;s++)t.indexOf(r[s])<0&&Object.prototype.propertyIsEnumerable.call(e,r[s])&&(n[r[s]]=e[r[s]])}return n}function a(e,t,n,r){var s,i=arguments.length,o=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,n,r);else for(var a=e.length-1;a>=0;a--)(s=e[a])&&(o=(i<3?s(o):i>3?s(t,n,o):s(t,n))||o);return i>3&&o&&Object.defineProperty(t,n,o),o}function l(e,t){return function(n,r){t(n,r,e)}}function u(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)}function c(e,t,n,r){return new(n||(n=Promise))((function(s,i){function o(e){try{l(r.next(e))}catch(e){i(e)}}function a(e){try{l(r.throw(e))}catch(e){i(e)}}function l(e){var t;e.done?s(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,a)}l((r=r.apply(e,t||[])).next())}))}function d(e,t){var n,r,s,i,o={label:0,sent:function(){if(1&s[0])throw s[1];return s[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,r&&(s=2&i[0]?r.return:i[0]?r.throw||((s=r.return)&&s.call(r),0):r.next)&&!(s=s.call(r,i[1])).done)return s;switch(r=0,s&&(i=[2&i[0],s.value]),i[0]){case 0:case 1:s=i;break;case 4:return o.label++,{value:i[1],done:!1};case 5:o.label++,r=i[1],i=[0];continue;case 7:i=o.ops.pop(),o.trys.pop();continue;default:if(!(s=o.trys,(s=s.length>0&&s[s.length-1])||6!==i[0]&&2!==i[0])){o=0;continue}if(3===i[0]&&(!s||i[1]>s[0]&&i[1]<s[3])){o.label=i[1];break}if(6===i[0]&&o.label<s[1]){o.label=s[1],s=i;break}if(s&&o.label<s[2]){o.label=s[2],o.ops.push(i);break}s[2]&&o.ops.pop(),o.trys.pop();continue}i=t.call(e,o)}catch(e){i=[6,e],r=0}finally{n=s=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}}var h=Object.create?function(e,t,n,r){void 0===r&&(r=n);var s=Object.getOwnPropertyDescriptor(t,n);s&&!("get"in s?!t.__esModule:s.writable||s.configurable)||(s={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,s)}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]};function f(e,t){for(var n in e)"default"===n||Object.prototype.hasOwnProperty.call(t,n)||h(t,e,n)}function p(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}function m(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,s,i=n.call(e),o=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)o.push(r.value)}catch(e){s={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(s)throw s.error}}return o}function g(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(m(arguments[t]));return e}function v(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),s=0;for(t=0;t<n;t++)for(var i=arguments[t],o=0,a=i.length;o<a;o++,s++)r[s]=i[o];return r}function _(e,t,n){if(n||2===arguments.length)for(var r,s=0,i=t.length;s<i;s++)!r&&s in t||(r||(r=Array.prototype.slice.call(t,0,s)),r[s]=t[s]);return e.concat(r||Array.prototype.slice.call(t))}function y(e){return this instanceof y?(this.v=e,this):new y(e)}function b(e,t,n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,s=n.apply(e,t||[]),i=[];return r={},o("next"),o("throw"),o("return"),r[Symbol.asyncIterator]=function(){return this},r;function o(e){s[e]&&(r[e]=function(t){return new Promise((function(n,r){i.push([e,t,n,r])>1||a(e,t)}))})}function a(e,t){try{(n=s[e](t)).value instanceof y?Promise.resolve(n.value.v).then(l,u):c(i[0][2],n)}catch(e){c(i[0][3],e)}var n}function l(e){a("next",e)}function u(e){a("throw",e)}function c(e,t){e(t),i.shift(),i.length&&a(i[0][0],i[0][1])}}function w(e){var t,n;return t={},r("next"),r("throw",(function(e){throw e})),r("return"),t[Symbol.iterator]=function(){return this},t;function r(r,s){t[r]=e[r]?function(t){return(n=!n)?{value:y(e[r](t)),done:"return"===r}:s?s(t):t}:s}}function x(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t,n=e[Symbol.asyncIterator];return n?n.call(e):(e=p(e),t={},r("next"),r("throw"),r("return"),t[Symbol.asyncIterator]=function(){return this},t);function r(n){t[n]=e[n]&&function(t){return new Promise((function(r,s){(function(e,t,n,r){Promise.resolve(r).then((function(t){e({value:t,done:n})}),t)})(r,s,(t=e[n](t)).done,t.value)}))}}}function j(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e}var E=Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t};function k(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&h(t,e,n);return E(t,e),t}function S(e){return e&&e.__esModule?e:{default:e}}function O(e,t,n,r){if("a"===n&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!r:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?r:"a"===n?r.call(e):r?r.value:t.get(e)}function T(e,t,n,r,s){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!s)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!s:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===r?s.call(e,n):s?s.value=n:t.set(e,n),n}function C(e,t){if(null===t||"object"!=typeof t&&"function"!=typeof t)throw new TypeError("Cannot use 'in' operator on non-object");return"function"==typeof e?t===e:e.has(t)}},"./node_modules/url/node_modules/punycode/punycode.js":function(e,t,n){var r;e=n.nmd(e),function(s){t&&t.nodeType,e&&e.nodeType;var i="object"==typeof n.g&&n.g;i.global!==i&&i.window!==i&&i.self;var o,a=2147483647,l=36,u=/^xn--/,c=/[^\x20-\x7E]/,d=/[\x2E\u3002\uFF0E\uFF61]/g,h={overflow:"Overflow: input needs wider integers to process","not-basic":"Illegal input >= 0x80 (not a basic code point)","invalid-input":"Invalid input"},f=Math.floor,p=String.fromCharCode;function m(e){throw RangeError(h[e])}function g(e,t){for(var n=e.length,r=[];n--;)r[n]=t(e[n]);return r}function v(e,t){var n=e.split("@"),r="";return n.length>1&&(r=n[0]+"@",e=n[1]),r+g((e=e.replace(d,".")).split("."),t).join(".")}function _(e){for(var t,n,r=[],s=0,i=e.length;s<i;)(t=e.charCodeAt(s++))>=55296&&t<=56319&&s<i?56320==(64512&(n=e.charCodeAt(s++)))?r.push(((1023&t)<<10)+(1023&n)+65536):(r.push(t),s--):r.push(t);return r}function y(e){return g(e,(function(e){var t="";return e>65535&&(t+=p((e-=65536)>>>10&1023|55296),e=56320|1023&e),t+=p(e)})).join("")}function b(e,t){return e+22+75*(e<26)-((0!=t)<<5)}function w(e,t,n){var r=0;for(e=n?f(e/700):e>>1,e+=f(e/t);e>455;r+=l)e=f(e/35);return f(r+36*e/(e+38))}function x(e){var t,n,r,s,i,o,u,c,d,h,p,g=[],v=e.length,_=0,b=128,x=72;for((n=e.lastIndexOf("-"))<0&&(n=0),r=0;r<n;++r)e.charCodeAt(r)>=128&&m("not-basic"),g.push(e.charCodeAt(r));for(s=n>0?n+1:0;s<v;){for(i=_,o=1,u=l;s>=v&&m("invalid-input"),((c=(p=e.charCodeAt(s++))-48<10?p-22:p-65<26?p-65:p-97<26?p-97:l)>=l||c>f((a-_)/o))&&m("overflow"),_+=c*o,!(c<(d=u<=x?1:u>=x+26?26:u-x));u+=l)o>f(a/(h=l-d))&&m("overflow"),o*=h;x=w(_-i,t=g.length+1,0==i),f(_/t)>a-b&&m("overflow"),b+=f(_/t),_%=t,g.splice(_++,0,b)}return y(g)}function j(e){var t,n,r,s,i,o,u,c,d,h,g,v,y,x,j,E=[];for(v=(e=_(e)).length,t=128,n=0,i=72,o=0;o<v;++o)(g=e[o])<128&&E.push(p(g));for(r=s=E.length,s&&E.push("-");r<v;){for(u=a,o=0;o<v;++o)(g=e[o])>=t&&g<u&&(u=g);for(u-t>f((a-n)/(y=r+1))&&m("overflow"),n+=(u-t)*y,t=u,o=0;o<v;++o)if((g=e[o])<t&&++n>a&&m("overflow"),g==t){for(c=n,d=l;!(c<(h=d<=i?1:d>=i+26?26:d-i));d+=l)j=c-h,x=l-h,E.push(p(b(h+j%x,0))),c=f(j/x);E.push(p(b(c,0))),i=w(n,y,r==s),n=0,++r}++n,++t}return E.join("")}o={version:"1.3.2",ucs2:{decode:_,encode:y},decode:x,encode:j,toASCII:function(e){return v(e,(function(e){return c.test(e)?"xn--"+j(e):e}))},toUnicode:function(e){return v(e,(function(e){return u.test(e)?x(e.slice(4).toLowerCase()):e}))}},void 0===(r=function(){return o}.call(t,n,t,e))||(e.exports=r)}()},"./node_modules/url/url.js":(e,t,n)=>{"use strict";var r=n("./node_modules/url/node_modules/punycode/punycode.js"),s=n("./node_modules/url/util.js");function i(){this.protocol=null,this.slashes=null,this.auth=null,this.host=null,this.port=null,this.hostname=null,this.hash=null,this.search=null,this.query=null,this.pathname=null,this.path=null,this.href=null}t.parse=y,t.resolve=function(e,t){return y(e,!1,!0).resolve(t)},t.resolveObject=function(e,t){return e?y(e,!1,!0).resolveObject(t):t},t.format=function(e){s.isString(e)&&(e=y(e));return e instanceof i?e.format():i.prototype.format.call(e)},t.Url=i;var o=/^([a-z0-9.+-]+:)/i,a=/:[0-9]*$/,l=/^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,u=["{","}","|","\\","^","`"].concat(["<",">",'"',"`"," ","\r","\n","\t"]),c=["'"].concat(u),d=["%","/","?",";","#"].concat(c),h=["/","?","#"],f=/^[+a-z0-9A-Z_-]{0,63}$/,p=/^([+a-z0-9A-Z_-]{0,63})(.*)$/,m={javascript:!0,"javascript:":!0},g={javascript:!0,"javascript:":!0},v={http:!0,https:!0,ftp:!0,gopher:!0,file:!0,"http:":!0,"https:":!0,"ftp:":!0,"gopher:":!0,"file:":!0},_=n("./node_modules/querystring/index.js");function y(e,t,n){if(e&&s.isObject(e)&&e instanceof i)return e;var r=new i;return r.parse(e,t,n),r}i.prototype.parse=function(e,t,n){if(!s.isString(e))throw new TypeError("Parameter 'url' must be a string, not "+typeof e);var i=e.indexOf("?"),a=-1!==i&&i<e.indexOf("#")?"?":"#",u=e.split(a);u[0]=u[0].replace(/\\/g,"/");var y=e=u.join(a);if(y=y.trim(),!n&&1===e.split("#").length){var b=l.exec(y);if(b)return this.path=y,this.href=y,this.pathname=b[1],b[2]?(this.search=b[2],this.query=t?_.parse(this.search.substr(1)):this.search.substr(1)):t&&(this.search="",this.query={}),this}var w=o.exec(y);if(w){var x=(w=w[0]).toLowerCase();this.protocol=x,y=y.substr(w.length)}if(n||w||y.match(/^\/\/[^@\/]+@[^@\/]+/)){var j="//"===y.substr(0,2);!j||w&&g[w]||(y=y.substr(2),this.slashes=!0)}if(!g[w]&&(j||w&&!v[w])){for(var E,k,S=-1,O=0;O<h.length;O++){-1!==(T=y.indexOf(h[O]))&&(-1===S||T<S)&&(S=T)}-1!==(k=-1===S?y.lastIndexOf("@"):y.lastIndexOf("@",S))&&(E=y.slice(0,k),y=y.slice(k+1),this.auth=decodeURIComponent(E)),S=-1;for(O=0;O<d.length;O++){var T;-1!==(T=y.indexOf(d[O]))&&(-1===S||T<S)&&(S=T)}-1===S&&(S=y.length),this.host=y.slice(0,S),y=y.slice(S),this.parseHost(),this.hostname=this.hostname||"";var C="["===this.hostname[0]&&"]"===this.hostname[this.hostname.length-1];if(!C)for(var A=this.hostname.split(/\./),P=(O=0,A.length);O<P;O++){var L=A[O];if(L&&!L.match(f)){for(var D="",M=0,N=L.length;M<N;M++)L.charCodeAt(M)>127?D+="x":D+=L[M];if(!D.match(f)){var I=A.slice(0,O),$=A.slice(O+1),R=L.match(p);R&&(I.push(R[1]),$.unshift(R[2])),$.length&&(y="/"+$.join(".")+y),this.hostname=I.join(".");break}}}this.hostname.length>255?this.hostname="":this.hostname=this.hostname.toLowerCase(),C||(this.hostname=r.toASCII(this.hostname));var q=this.port?":"+this.port:"",F=this.hostname||"";this.host=F+q,this.href+=this.host,C&&(this.hostname=this.hostname.substr(1,this.hostname.length-2),"/"!==y[0]&&(y="/"+y))}if(!m[x])for(O=0,P=c.length;O<P;O++){var B=c[O];if(-1!==y.indexOf(B)){var U=encodeURIComponent(B);U===B&&(U=escape(B)),y=y.split(B).join(U)}}var W=y.indexOf("#");-1!==W&&(this.hash=y.substr(W),y=y.slice(0,W));var z=y.indexOf("?");if(-1!==z?(this.search=y.substr(z),this.query=y.substr(z+1),t&&(this.query=_.parse(this.query)),y=y.slice(0,z)):t&&(this.search="",this.query={}),y&&(this.pathname=y),v[x]&&this.hostname&&!this.pathname&&(this.pathname="/"),this.pathname||this.search){q=this.pathname||"";var V=this.search||"";this.path=q+V}return this.href=this.format(),this},i.prototype.format=function(){var e=this.auth||"";e&&(e=(e=encodeURIComponent(e)).replace(/%3A/i,":"),e+="@");var t=this.protocol||"",n=this.pathname||"",r=this.hash||"",i=!1,o="";this.host?i=e+this.host:this.hostname&&(i=e+(-1===this.hostname.indexOf(":")?this.hostname:"["+this.hostname+"]"),this.port&&(i+=":"+this.port)),this.query&&s.isObject(this.query)&&Object.keys(this.query).length&&(o=_.stringify(this.query));var a=this.search||o&&"?"+o||"";return t&&":"!==t.substr(-1)&&(t+=":"),this.slashes||(!t||v[t])&&!1!==i?(i="//"+(i||""),n&&"/"!==n.charAt(0)&&(n="/"+n)):i||(i=""),r&&"#"!==r.charAt(0)&&(r="#"+r),a&&"?"!==a.charAt(0)&&(a="?"+a),t+i+(n=n.replace(/[?#]/g,(function(e){return encodeURIComponent(e)})))+(a=a.replace("#","%23"))+r},i.prototype.resolve=function(e){return this.resolveObject(y(e,!1,!0)).format()},i.prototype.resolveObject=function(e){if(s.isString(e)){var t=new i;t.parse(e,!1,!0),e=t}for(var n=new i,r=Object.keys(this),o=0;o<r.length;o++){var a=r[o];n[a]=this[a]}if(n.hash=e.hash,""===e.href)return n.href=n.format(),n;if(e.slashes&&!e.protocol){for(var l=Object.keys(e),u=0;u<l.length;u++){var c=l[u];"protocol"!==c&&(n[c]=e[c])}return v[n.protocol]&&n.hostname&&!n.pathname&&(n.path=n.pathname="/"),n.href=n.format(),n}if(e.protocol&&e.protocol!==n.protocol){if(!v[e.protocol]){for(var d=Object.keys(e),h=0;h<d.length;h++){var f=d[h];n[f]=e[f]}return n.href=n.format(),n}if(n.protocol=e.protocol,e.host||g[e.protocol])n.pathname=e.pathname;else{for(var p=(e.pathname||"").split("/");p.length&&!(e.host=p.shift()););e.host||(e.host=""),e.hostname||(e.hostname=""),""!==p[0]&&p.unshift(""),p.length<2&&p.unshift(""),n.pathname=p.join("/")}if(n.search=e.search,n.query=e.query,n.host=e.host||"",n.auth=e.auth,n.hostname=e.hostname||e.host,n.port=e.port,n.pathname||n.search){var m=n.pathname||"",_=n.search||"";n.path=m+_}return n.slashes=n.slashes||e.slashes,n.href=n.format(),n}var y=n.pathname&&"/"===n.pathname.charAt(0),b=e.host||e.pathname&&"/"===e.pathname.charAt(0),w=b||y||n.host&&e.pathname,x=w,j=n.pathname&&n.pathname.split("/")||[],E=(p=e.pathname&&e.pathname.split("/")||[],n.protocol&&!v[n.protocol]);if(E&&(n.hostname="",n.port=null,n.host&&(""===j[0]?j[0]=n.host:j.unshift(n.host)),n.host="",e.protocol&&(e.hostname=null,e.port=null,e.host&&(""===p[0]?p[0]=e.host:p.unshift(e.host)),e.host=null),w=w&&(""===p[0]||""===j[0])),b)n.host=e.host||""===e.host?e.host:n.host,n.hostname=e.hostname||""===e.hostname?e.hostname:n.hostname,n.search=e.search,n.query=e.query,j=p;else if(p.length)j||(j=[]),j.pop(),j=j.concat(p),n.search=e.search,n.query=e.query;else if(!s.isNullOrUndefined(e.search)){if(E)n.hostname=n.host=j.shift(),(C=!!(n.host&&n.host.indexOf("@")>0)&&n.host.split("@"))&&(n.auth=C.shift(),n.host=n.hostname=C.shift());return n.search=e.search,n.query=e.query,s.isNull(n.pathname)&&s.isNull(n.search)||(n.path=(n.pathname?n.pathname:"")+(n.search?n.search:"")),n.href=n.format(),n}if(!j.length)return n.pathname=null,n.search?n.path="/"+n.search:n.path=null,n.href=n.format(),n;for(var k=j.slice(-1)[0],S=(n.host||e.host||j.length>1)&&("."===k||".."===k)||""===k,O=0,T=j.length;T>=0;T--)"."===(k=j[T])?j.splice(T,1):".."===k?(j.splice(T,1),O++):O&&(j.splice(T,1),O--);if(!w&&!x)for(;O--;O)j.unshift("..");!w||""===j[0]||j[0]&&"/"===j[0].charAt(0)||j.unshift(""),S&&"/"!==j.join("/").substr(-1)&&j.push("");var C,A=""===j[0]||j[0]&&"/"===j[0].charAt(0);E&&(n.hostname=n.host=A?"":j.length?j.shift():"",(C=!!(n.host&&n.host.indexOf("@")>0)&&n.host.split("@"))&&(n.auth=C.shift(),n.host=n.hostname=C.shift()));return(w=w||n.host&&j.length)&&!A&&j.unshift(""),j.length?n.pathname=j.join("/"):(n.pathname=null,n.path=null),s.isNull(n.pathname)&&s.isNull(n.search)||(n.path=(n.pathname?n.pathname:"")+(n.search?n.search:"")),n.auth=e.auth||n.auth,n.slashes=n.slashes||e.slashes,n.href=n.format(),n},i.prototype.parseHost=function(){var e=this.host,t=a.exec(e);t&&(":"!==(t=t[0])&&(this.port=t.substr(1)),e=e.substr(0,e.length-t.length)),e&&(this.hostname=e)}},"./node_modules/url/util.js":e=>{"use strict";e.exports={isString:function(e){return"string"==typeof e},isObject:function(e){return"object"==typeof e&&null!==e},isNull:function(e){return null===e},isNullOrUndefined:function(e){return null==e}}},"./node_modules/virtual-scroll/lib/virtualscroll.js":function(e){e.exports=function(){var e=0;function t(t){return"__private_"+e+++"_"+t}function n(e,t){if(!Object.prototype.hasOwnProperty.call(e,t))throw new TypeError("attempted to use private field on non-instance");return e}function r(){}r.prototype={on:function(e,t,n){var r=this.e||(this.e={});return(r[e]||(r[e]=[])).push({fn:t,ctx:n}),this},once:function(e,t,n){var r=this;function s(){r.off(e,s),t.apply(n,arguments)}return s._=t,this.on(e,s,n)},emit:function(e){for(var t=[].slice.call(arguments,1),n=((this.e||(this.e={}))[e]||[]).slice(),r=0,s=n.length;r<s;r++)n[r].fn.apply(n[r].ctx,t);return this},off:function(e,t){var n=this.e||(this.e={}),r=n[e],s=[];if(r&&t)for(var i=0,o=r.length;i<o;i++)r[i].fn!==t&&r[i].fn._!==t&&s.push(r[i]);return s.length?n[e]=s:delete n[e],this}};var s=r;s.TinyEmitter=r;var i,o="virtualscroll",a=t("options"),l=t("el"),u=t("emitter"),c=t("event"),d=t("touchStart"),h=t("bodyTouchAction");return function(){function e(e){var t=this;Object.defineProperty(this,a,{writable:!0,value:void 0}),Object.defineProperty(this,l,{writable:!0,value:void 0}),Object.defineProperty(this,u,{writable:!0,value:void 0}),Object.defineProperty(this,c,{writable:!0,value:void 0}),Object.defineProperty(this,d,{writable:!0,value:void 0}),Object.defineProperty(this,h,{writable:!0,value:void 0}),this._onWheel=function(e){var r=n(t,a)[a],s=n(t,c)[c];s.deltaX=e.wheelDeltaX||-1*e.deltaX,s.deltaY=e.wheelDeltaY||-1*e.deltaY,i.isFirefox&&1===e.deltaMode&&(s.deltaX*=r.firefoxMultiplier,s.deltaY*=r.firefoxMultiplier),s.deltaX*=r.mouseMultiplier,s.deltaY*=r.mouseMultiplier,t._notify(e)},this._onMouseWheel=function(e){var r=n(t,c)[c];r.deltaX=e.wheelDeltaX?e.wheelDeltaX:0,r.deltaY=e.wheelDeltaY?e.wheelDeltaY:e.wheelDelta,t._notify(e)},this._onTouchStart=function(e){var r=e.targetTouches?e.targetTouches[0]:e;n(t,d)[d].x=r.pageX,n(t,d)[d].y=r.pageY},this._onTouchMove=function(e){var r=n(t,a)[a];r.preventTouch&&!e.target.classList.contains(r.unpreventTouchClass)&&e.preventDefault();var s=n(t,c)[c],i=e.targetTouches?e.targetTouches[0]:e;s.deltaX=(i.pageX-n(t,d)[d].x)*r.touchMultiplier,s.deltaY=(i.pageY-n(t,d)[d].y)*r.touchMultiplier,n(t,d)[d].x=i.pageX,n(t,d)[d].y=i.pageY,t._notify(e)},this._onKeyDown=function(e){var r=n(t,c)[c];r.deltaX=r.deltaY=0;var s=window.innerHeight-40;switch(e.keyCode){case 37:case 38:r.deltaY=n(t,a)[a].keyStep;break;case 39:case 40:r.deltaY=-n(t,a)[a].keyStep;break;case 32:r.deltaY=s*(e.shiftKey?1:-1);break;default:return}t._notify(e)},n(this,l)[l]=window,e&&e.el&&(n(this,l)[l]=e.el,delete e.el),i||(i={hasWheelEvent:"onwheel"in document,hasMouseWheelEvent:"onmousewheel"in document,hasTouch:"ontouchstart"in document,hasTouchWin:navigator.msMaxTouchPoints&&navigator.msMaxTouchPoints>1,hasPointer:!!window.navigator.msPointerEnabled,hasKeyDown:"onkeydown"in document,isFirefox:navigator.userAgent.indexOf("Firefox")>-1}),n(this,a)[a]=Object.assign({mouseMultiplier:1,touchMultiplier:2,firefoxMultiplier:15,keyStep:120,preventTouch:!1,unpreventTouchClass:"vs-touchmove-allowed",useKeyboard:!0,useTouch:!0},e),n(this,u)[u]=new s,n(this,c)[c]={y:0,x:0,deltaX:0,deltaY:0},n(this,d)[d]={x:null,y:null},n(this,h)[h]=null,void 0!==n(this,a)[a].passive&&(this.listenerOptions={passive:n(this,a)[a].passive})}var t=e.prototype;return t._notify=function(e){var t=n(this,c)[c];t.x+=t.deltaX,t.y+=t.deltaY,n(this,u)[u].emit(o,{x:t.x,y:t.y,deltaX:t.deltaX,deltaY:t.deltaY,originalEvent:e})},t._bind=function(){i.hasWheelEvent&&n(this,l)[l].addEventListener("wheel",this._onWheel,this.listenerOptions),i.hasMouseWheelEvent&&n(this,l)[l].addEventListener("mousewheel",this._onMouseWheel,this.listenerOptions),i.hasTouch&&n(this,a)[a].useTouch&&(n(this,l)[l].addEventListener("touchstart",this._onTouchStart,this.listenerOptions),n(this,l)[l].addEventListener("touchmove",this._onTouchMove,this.listenerOptions)),i.hasPointer&&i.hasTouchWin&&(n(this,h)[h]=document.body.style.msTouchAction,document.body.style.msTouchAction="none",n(this,l)[l].addEventListener("MSPointerDown",this._onTouchStart,!0),n(this,l)[l].addEventListener("MSPointerMove",this._onTouchMove,!0)),i.hasKeyDown&&n(this,a)[a].useKeyboard&&document.addEventListener("keydown",this._onKeyDown)},t._unbind=function(){i.hasWheelEvent&&n(this,l)[l].removeEventListener("wheel",this._onWheel),i.hasMouseWheelEvent&&n(this,l)[l].removeEventListener("mousewheel",this._onMouseWheel),i.hasTouch&&(n(this,l)[l].removeEventListener("touchstart",this._onTouchStart),n(this,l)[l].removeEventListener("touchmove",this._onTouchMove)),i.hasPointer&&i.hasTouchWin&&(document.body.style.msTouchAction=n(this,h)[h],n(this,l)[l].removeEventListener("MSPointerDown",this._onTouchStart,!0),n(this,l)[l].removeEventListener("MSPointerMove",this._onTouchMove,!0)),i.hasKeyDown&&n(this,a)[a].useKeyboard&&document.removeEventListener("keydown",this._onKeyDown)},t.on=function(e,t){n(this,u)[u].on(o,e,t);var r=n(this,u)[u].e;r&&r[o]&&1===r[o].length&&this._bind()},t.off=function(e,t){n(this,u)[u].off(o,e,t);var r=n(this,u)[u].e;(!r[o]||r[o].length<=0)&&this._unbind()},t.destroy=function(){n(this,u)[u].off(),this._unbind()},e}()}()},"./node_modules/webpack-dev-server/client/clients/BaseClient.js":e=>{"use strict";function t(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}e.exports=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}var n,r,s;return n=e,s=[{key:"getClientPath",value:function(e){throw new Error("Client needs implementation")}}],(r=null)&&t(n.prototype,r),s&&t(n,s),e}()},"./node_modules/webpack-dev-server/client/clients/SockJSClient.js":(e,t,n)=>{"use strict";function r(e){return r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},r(e)}function s(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function i(e,t){return i=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},i(e,t)}function o(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=l(e);if(t){var s=l(this).constructor;n=Reflect.construct(r,arguments,s)}else n=r.apply(this,arguments);return a(this,n)}}function a(e,t){return!t||"object"!==r(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function l(e){return l=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},l(e)}var u=n("./node_modules/sockjs-client/dist/sockjs.js"),c=n("./node_modules/webpack-dev-server/client/clients/BaseClient.js");e.exports=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&i(e,t)}(l,e);var t,n,r,a=o(l);function l(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,l),(t=a.call(this)).sock=new u(e),t.sock.onerror=function(e){},t}return t=l,r=[{key:"getClientPath",value:function(e){return"./node_modules/webpack-dev-server/client/clients/SockJSClient.js"}}],(n=[{key:"onOpen",value:function(e){this.sock.onopen=e}},{key:"onClose",value:function(e){this.sock.onclose=e}},{key:"onMessage",value:function(e){this.sock.onmessage=function(t){e(t.data)}}}])&&s(t.prototype,n),r&&s(t,r),l}(c)},"./node_modules/webpack-dev-server/client/overlay.js":(e,t,n)=>{"use strict";var r=n("./node_modules/ansi-html-community/index.js"),s=new(0,n("./node_modules/html-entities/lib/index.js").AllHtmlEntities),i={reset:["transparent","transparent"],black:"181818",red:"E36049",green:"B3CB74",yellow:"FFD080",blue:"7CAFC2",magenta:"7FACCA",cyan:"C3C2EF",lightgrey:"EBE7E3",darkgrey:"6D7891"},o=null,a=null,l=null;function u(e){var t,n;a?e(a):(l=e,o||(t=function(){var e,t;(t=(e=o).contentDocument.createElement("div")).id="webpack-dev-server-client-overlay-div",t.style.position="fixed",t.style.boxSizing="border-box",t.style.left=0,t.style.top=0,t.style.right=0,t.style.bottom=0,t.style.width="100vw",t.style.height="100vh",t.style.backgroundColor="rgba(0, 0, 0, 0.85)",t.style.color="#E8E8E8",t.style.fontFamily="Menlo, Consolas, monospace",t.style.fontSize="large",t.style.padding="2rem",t.style.lineHeight="1.2",t.style.whiteSpace="pre-wrap",t.style.overflow="auto",e.contentDocument.body.appendChild(t),l(a=t)},(n=document.createElement("iframe")).id="webpack-dev-server-client-overlay",n.src="about:blank",n.style.position="fixed",n.style.left=0,n.style.top=0,n.style.right=0,n.style.bottom=0,n.style.width="100vw",n.style.height="100vh",n.style.border="none",n.style.zIndex=9999999999,n.onload=t,o=n,document.body.appendChild(o)))}r.setColors(i),e.exports={clear:function(){a&&(document.body.removeChild(o),a=null,o=null,l=null)},showMessage:function(e){u((function(t){t.innerHTML='<span style="color: #'.concat(i.red,'">Failed to compile.</span><br><br>').concat(r(s.encode(e[0])))}))}}},"./node_modules/webpack-dev-server/client/socket.js":(e,t,n)=>{"use strict";var r=n("./node_modules/webpack-dev-server/client/clients/SockJSClient.js"),s=void 0!==r?r:n("./node_modules/webpack-dev-server/client/clients/SockJSClient.js"),i=0,o=null,a=function(e,t){(o=new s(e)).onOpen((function(){i=0})),o.onClose((function(){if(0===i&&t.close(),o=null,i<=10){var n=1e3*Math.pow(2,i)+100*Math.random();i+=1,setTimeout((function(){a(e,t)}),n)}})),o.onMessage((function(e){var n=JSON.parse(e);t[n.type]&&t[n.type](n.data)}))};e.exports=a},"./node_modules/webpack-dev-server/client/utils/createSocketUrl.js":(e,t,n)=>{"use strict";var r=n("./node_modules/url/url.js"),s=n("./node_modules/webpack-dev-server/client/utils/getCurrentScriptSource.js");e.exports=function(e,t){var n;if("string"==typeof e&&""!==e)n=r.parse(e.substr(1).replace("&","?"),!0);else{var i=s();n=r.parse(i||"/",!0,!0)}return function(e,t){var n=e.auth,s=e.query,i=e.hostname,o=e.protocol,a=e.port;a&&"0"!==a||(a=t.port);"0.0.0.0"!==i&&"::"!==i||!t.hostname||0!==t.protocol.indexOf("http")||(i=t.hostname);!i||"127.0.0.1"===i||"https:"!==t.protocol&&"0.0.0.0"!==e.hostname||(o=t.protocol);var l=s.sockHost||i,u=s.sockPath||"/sockjs-node",c=s.sockPort||a;"location"===c&&(c=t.port);return r.format({protocol:o,auth:n,hostname:l,port:c,pathname:u})}(n,t="string"==typeof t&&""!==t?r.parse(t):self.location)}},"./node_modules/webpack-dev-server/client/utils/getCurrentScriptSource.js":e=>{"use strict";e.exports=function(){if(document.currentScript)return document.currentScript.getAttribute("src");var e=document.scripts||[],t=e[e.length-1];if(t)return t.getAttribute("src");throw new Error("[WDS] Failed to get current script source.")}},"./node_modules/webpack-dev-server/client/utils/log.js":(e,t,n)=>{"use strict";var r=n("./node_modules/loglevel/lib/loglevel.js").getLogger("webpack-dev-server"),s="info";r.setDefaultLevel(s),e.exports={log:r,setLogLevel:function(e){switch(e){case s:case"warn":case"error":case"debug":case"trace":r.setLevel(e);break;case"warning":r.setLevel("warn");break;case"none":case"silent":r.disableAll();break;default:r.error("[WDS] Unknown clientLogLevel '".concat(e,"'"))}}}},"./node_modules/webpack-dev-server/client/utils/reloadApp.js":(e,t,n)=>{"use strict";var r=n("./node_modules/webpack-dev-server/client/utils/log.js").log;e.exports=function(e,t){var s=e.hotReload,i=e.hot,o=e.liveReload,a=t.isUnloading,l=t.currentHash;if(!a&&s)if(i)r.info("[WDS] App hot update..."),n("./node_modules/webpack/hot/emitter.js").emit("webpackHotUpdate",l),"undefined"!=typeof self&&self.window&&self.postMessage("webpackHotUpdate".concat(l),"*");else if(o)var u=self,c=self.setInterval((function(){("about:"!==u.location.protocol||(u=u.parent).parent===u)&&d(u,c)}));function d(e,t){clearInterval(t),r.info("[WDS] App updated. Reloading..."),e.location.reload()}}},"./node_modules/webpack-dev-server/client/utils/sendMessage.js":e=>{"use strict";e.exports=function(e,t){"undefined"==typeof self||"undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope||self.postMessage({type:"webpack".concat(e),data:t},"*")}},"./node_modules/webpack-dev-server/node_modules/ansi-regex/index.js":e=>{"use strict";e.exports=function(){return/[\u001b\u009b][[()#;?]*(?:[0-9]{1,4}(?:;[0-9]{0,4})*)?[0-9A-PRZcf-nqry=><]/g}},"./node_modules/webpack-dev-server/node_modules/strip-ansi/index.js":(e,t,n)=>{"use strict";var r=n("./node_modules/webpack-dev-server/node_modules/ansi-regex/index.js")();e.exports=function(e){return"string"==typeof e?e.replace(r,""):e}},"./node_modules/webpack/hot/emitter.js":(e,t,n)=>{var r=n("./node_modules/events/events.js");e.exports=new r},"./node_modules/webpack/hot/log.js":e=>{var t="info";function n(){}function r(e){return"info"===t&&"info"===e||["info","warning"].indexOf(t)>=0&&"warning"===e||["info","warning","error"].indexOf(t)>=0&&"error"===e}function s(e){return function(t,n){r(t)&&e(n)}}e.exports=function(e,t){r(e)&&("info"===e?console.log(t):"warning"===e?console.warn(t):"error"===e&&console.error(t))};var i=console.group||n,o=console.groupCollapsed||n,a=console.groupEnd||n;e.exports.group=s(i),e.exports.groupCollapsed=s(o),e.exports.groupEnd=s(a),e.exports.setLogLevel=function(e){t=e},e.exports.formatError=function(e){var t=e.message,n=e.stack;return n?n.indexOf(t)<0?t+"\n"+n:n:t}},"./node_modules/webpack/hot sync ^\\.\\/log$":(e,t,n)=>{var r={"./log":"./node_modules/webpack/hot/log.js"};function s(e){var t=i(e);return n(t)}function i(e){if(!n.o(r,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return r[e]}s.keys=function(){return Object.keys(r)},s.resolve=i,e.exports=s,s.id="./node_modules/webpack/hot sync ^\\.\\/log$"},"./node_modules/@studio-freight/lenis/dist/lenis.modern.mjs":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>l});var r=n("./node_modules/tiny-emitter/index.js"),s=n("./node_modules/virtual-scroll/lib/virtualscroll.js");function i(){return i=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i.apply(this,arguments)}const o=["duration","easing"];class a{to(e,t={}){let{duration:n=1,easing:r=(e=>e)}=t,s=function(e,t){if(null==e)return{};var n,r,s={},i=Object.keys(e);for(r=0;r<i.length;r++)t.indexOf(n=i[r])>=0||(s[n]=e[n]);return s}(t,o);this.target=e,this.fromKeys=i({},s),this.toKeys=i({},s),this.keys=Object.keys(i({},s)),this.keys.forEach((t=>{this.fromKeys[t]=e[t]})),this.duration=n,this.easing=r,this.currentTime=0,this.isRunning=!0}raf(e){if(!this.isRunning)return;this.currentTime=Math.min(this.currentTime+.001*e,this.duration);const t=this.easing(this.progress);this.keys.forEach((e=>{const n=this.fromKeys[e];this.target[e]=n+(this.toKeys[e]-n)*t})),1===t&&(this.isRunning=!1)}get progress(){return this.currentTime/this.duration}}class l extends r{constructor({duration:e=1.2,easing:t=(e=>1===e?1:1-Math.pow(2,-10*e)),smooth:n=!0,smoothTouch:r=!1,touchMultiplier:i=2,direction:o="vertical",wrapper:l=window,content:u=document.body}={}){var c,d,h;super(),this.onWindowResize=()=>{this.wrapperWidth=window.innerWidth,this.wrapperHeight=window.innerHeight},this.onWrapperResize=([e])=>{if(e){const t=e.contentRect;this.wrapperWidth=t.width,this.wrapperHeight=t.height}},this.onContentResize=([e])=>{if(e){const t=e.contentRect;this.contentWidth=t.width,this.contentHeight=t.height}},this.onVirtualScroll=({deltaY:e,originalEvent:t})=>{t.ctrlKey||(this.smooth=t.changedTouches?this.smoothTouch:this.options.smooth,this.stopped?t.preventDefault():this.smooth&&4!==t.buttons&&(this.smooth&&t.preventDefault(),this.targetScroll-=e,this.targetScroll=Math.max(0,Math.min(this.targetScroll,this.limit)),this.scrollTo(this.targetScroll)))},this.onScroll=e=>{this.isScrolling&&this.smooth||(this.targetScroll=this.scroll=this.lastScroll=this.wrapperNode[this.scrollProperty],this.notify())},void 0!==arguments[0].lerp&&console.warn("Lenis: lerp option is deprecated, you must use duration and easing options instead. See documentation https://github.com/studio-freight/lenis"),window.lenisVersion="0.2.6",this.options={duration:e,easing:t,smooth:n,smoothTouch:r,touchMultiplier:i,direction:o,wrapper:l,content:u},this.wrapperNode=l,this.contentNode=u,this.duration=e,this.easing=t,this.smooth=n,this.smoothTouch=r,this.touchMultiplier=i,this.direction=o,this.wrapperNode.addEventListener("scroll",this.onScroll),this.wrapperNode===window?(this.wrapperNode.addEventListener("resize",this.onWindowResize),this.onWindowResize()):(this.wrapperHeight=this.wrapperNode.offsetHeight,this.wrapperWidth=this.wrapperNode.offsetWidth,this.wrapperObserver=new ResizeObserver(this.onWrapperResize),this.wrapperObserver.observe(this.wrapperNode)),this.contentHeight=this.contentNode.offsetHeight,this.contentWidth=this.contentNode.offsetWidth,this.contentObserver=new ResizeObserver(this.onContentResize),this.contentObserver.observe(this.contentNode),this.targetScroll=this.scroll=this.lastScroll=this.wrapperNode[this.scrollProperty],this.animate=new a;const f=(null==(c=navigator)||null==(d=c.userAgentData)?void 0:d.platform)||(null==(h=navigator)?void 0:h.platform)||"unknown";this.virtualScroll=new s({el:this.wrapperNode,firefoxMultiplier:50,mouseMultiplier:f.includes("Win")?1:.4,useKeyboard:!1,touchMultiplier:this.touchMultiplier,useTouch:!0,passive:!1}),this.virtualScroll.on(this.onVirtualScroll)}get scrollProperty(){let e;return e=this.wrapperNode===window?"horizontal"===this.direction?"scrollX":"scrollY":"horizontal"===this.direction?"scrollLeft":"scrollTop",e}start(){this.stopped=!1}stop(){this.stopped=!0}destroy(){var e;this.wrapperNode===window&&this.wrapperNode.removeEventListener("resize",this.onWindowResize),this.wrapperNode.removeEventListener("scroll",this.onScroll),this.virtualScroll.destroy(),null==(e=this.wrapperObserver)||e.disconnect(),this.contentObserver.disconnect()}get limit(){return"horizontal"===this.direction?this.contentWidth-this.wrapperWidth:this.contentHeight-this.wrapperHeight}raf(e){const t=e-(this.now||0);this.now=e,!this.stopped&&this.smooth&&(this.lastScroll=this.scroll,this.animate.raf(t),Math.round(this.scroll)===Math.round(this.targetScroll)&&(this.lastScroll=this.targetScroll),this.isScrolling&&(this.setScroll(this.scroll),this.notify()),this.isScrolling=this.scroll!==this.targetScroll)}get velocity(){return this.scroll-this.lastScroll}setScroll(e){"horizontal"===this.direction?this.wrapperNode.scrollTo(e,0):this.wrapperNode.scrollTo(0,e)}notify(){this.emit("scroll",{scroll:this.scroll,limit:this.limit,velocity:this.velocity,direction:this.direction,progress:this.scroll/this.limit})}scrollTo(e,{offset:t=0,immediate:n=!1,duration:r=this.duration,easing:s=this.easing}={}){let i;if("number"==typeof e)i=e;else if("top"===e||"#top"===e)i=0;else if("bottom"===e)i=this.limit;else{let t;if("string"==typeof e)t=document.querySelector(e);else{if(null==e||!e.nodeType)return;t=e}if(!e)return;let n=0;if(this.wrapperNode!==window){const e=this.wrapperNode.getBoundingClientRect();n="horizontal"===this.direction?e.left:e.top}const r=t.getBoundingClientRect();i=("horizontal"===this.direction?r.left:r.top)+this.scroll-n}i+=t,this.targetScroll=i,!this.smooth||n?this.setScroll(this.targetScroll):this.animate.to(this,{duration:r,easing:s,scroll:this.targetScroll})}}},"./node_modules/@studiometa/js-toolkit/Base/index.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>p});var r=n("./node_modules/@studiometa/js-toolkit/Base/utils.js"),s=n("./node_modules/@studiometa/js-toolkit/Base/managers/ChildrenManager.js"),i=n("./node_modules/@studiometa/js-toolkit/Base/managers/RefsManager.js"),o=n("./node_modules/@studiometa/js-toolkit/Base/managers/ServicesManager.js"),a=n("./node_modules/@studiometa/js-toolkit/Base/managers/EventsManager.js"),l=n("./node_modules/@studiometa/js-toolkit/Base/managers/OptionsManager.js"),u=n("./node_modules/@studiometa/js-toolkit/utils/is.js"),c=n("./node_modules/@studiometa/js-toolkit/utils/noop.js"),d=Object.defineProperty,h=(e,t,n)=>(((e,t,n)=>{t in e?d(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n})(e,"symbol"!=typeof t?t+"":t,n),n);let f=0;class p extends EventTarget{constructor(e){if(super(),h(this,"$parent",null),h(this,"$id"),h(this,"$el"),h(this,"$isMounted",!1),h(this,"__eventHandlers",new Map),h(this,"__services"),h(this,"__refs"),h(this,"__options"),h(this,"__children"),h(this,"__events"),!e){if(u.isDev)throw new Error("The root element must be defined.");return}const{__config:t}=this;var n;if("Base"!==t.name)this.$id=`${t.name}-${f}`,f+=1,this.$el=e,this.$el.__base__||(this.$el.__base__=new WeakMap),this.$el.__base__.set(this.__ctor,this),n=this,[{prop:"__options",constructorName:"OptionsManager",constructor:l.default},{prop:"__services",constructorName:"ServicesManager",constructor:o.default},{prop:"__events",constructorName:"EventsManager",constructor:a.default},{prop:"__refs",constructorName:"RefsManager",constructor:i.default},{prop:"__children",constructorName:"ChildrenManager",constructor:s.default}].forEach((({prop:e,constructorName:t,constructor:r})=>{if(n[e]=new n.__managers[t](n),u.isDev&&!(n[e]instanceof r))throw new Error(`The \`$managers.${t}\` must extend the \`${t}\` class.`)})),u.isDev&&this.__debug("constructor",this);else if(u.isDev)throw new Error("The `config.name` property is required.")}get $root(){if(!this.$parent)return this;let e=this.$parent,t=this.$parent;for(;e;)e.$parent||(t=e),e=e.$parent;return t}get __config(){var e,t,n;let r=Object.getPrototypeOf(this),{config:s}=r.constructor;for(;r.constructor.config&&r.constructor.$isBase;)s={...r.constructor.config,...s},r.constructor.config.options&&(s.options={...r.constructor.config.options,...s.options}),r.constructor.config.emits&&s.emits&&(s.emits=[...r.constructor.config.emits,...s.emits]),r=Object.getPrototypeOf(r);return s.options=null!=(e=s.options)?e:{},s.refs=null!=(t=s.refs)?t:[],s.components=null!=(n=s.components)?n:{},s}get $services(){return this.__services}get $refs(){return this.__refs}get $options(){return this.__options}get $children(){return this.__children}get $log(){return this.__options.log?window.console.log.bind(window,`[${this.__config.name}]`):c.noop}get __debug(){return u.isDev&&this.__options.debug?window.console.log.bind(window,`[debug] [${this.$id}]`):c.noop}get __managers(){return{ChildrenManager:s.default,EventsManager:a.default,OptionsManager:l.default,RefsManager:i.default,ServicesManager:o.default}}__callMethod(e,...t){return u.isDev&&this.__debug("callMethod",e,...t),this.$emit(e,...t),(0,u.isFunction)(this[e])?(u.isDev&&this.__debug(e,this,...t),this[e].call(this,...t)):null}__hasEvent(e){const t=this.__eventHandlers.get(e);return t&&t.size>0}$mount(){return this.$isMounted||(this.$emit("before-mounted"),this.$isMounted=!0,u.isDev&&this.__debug("$mount"),this.$children.registerAll(),this.$refs.registerAll(),this.__events.bindRootElement(),this.$services.enableAll(),this.$children.mountAll(),this.__callMethod("mounted")),this}$update(){return u.isDev&&this.__debug("$update"),this.$refs.unregisterAll(),this.$services.disableAll(),this.$children.registerAll(),this.$refs.registerAll(),this.$services.enableAll(),this.$children.updateAll(),this.__callMethod("updated"),this}$destroy(){return this.$isMounted?(this.$isMounted=!1,u.isDev&&this.__debug("$destroy"),this.__events.unbindRootElement(),this.$refs.unregisterAll(),this.$services.disableAll(),this.$children.destroyAll(),this.__callMethod("destroyed"),this):this}$terminate(){u.isDev&&this.__debug("$terminate"),this.$destroy(),this.__callMethod("terminated"),this.$el.__base__.set(this.__ctor,"terminated")}__addEmits(e){const t=this.__ctor;(0,u.isArray)(t.config.emits)?t.config.emits.push(e):t.config.emits=[e]}__removeEmits(e){const t=this.__ctor,n=t.config.emits.indexOf(e);t.config.emits.splice(n,1)}get __ctor(){return this.constructor}$on(e,t,n){u.isDev&&this.__debug("$on",e,t,n);let s=this.__eventHandlers.get(e);s||(s=new Set,this.__eventHandlers.set(e,s)),s.add(t);return(0,r.getEventTarget)(this,e,this.__config).addEventListener(e,t,n),()=>{this.$off(e,t,n)}}$off(e,t,n){u.isDev&&this.__debug("$off",e,t),this.__eventHandlers.get(e).delete(t);(0,r.getEventTarget)(this,e,this.__config).removeEventListener(e,t,n)}$emit(e,...t){u.isDev&&this.__debug("$emit",e,t),this.dispatchEvent(new CustomEvent(e,{detail:t}))}static $factory(e){if(u.isDev&&!e)throw new Error("The $factory method requires a component’s name or selector to be specified.");return(0,r.getComponentElements)(e).map((e=>new this(e).$mount()))}}h(p,"$isBase",!0),h(p,"config",{name:"Base",emits:["before-mounted","mounted","updated","destroyed","terminated","ticked","scrolled","resized","moved","loaded","keyed"]})},"./node_modules/@studiometa/js-toolkit/Base/managers/AbstractManager.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>i});var r=Object.defineProperty,s=(e,t,n)=>(((e,t,n)=>{t in e?r(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n})(e,"symbol"!=typeof t?t+"":t,n),n);class i{constructor(e){s(this,"__base"),this.__base=e,this.__hideProperties(["__base"])}get __element(){return this.__base.$el}get __config(){return this.__base.__config}get __eventsManager(){return this.__base.__events}__hideProperties(e){Object.defineProperties(this,Object.fromEntries(e.map((e=>[e,{enumerable:!1,writable:!1,value:this[e]}]))))}}},"./node_modules/@studiometa/js-toolkit/Base/managers/ChildrenManager.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>d});var r=n("./node_modules/@studiometa/js-toolkit/Base/managers/AbstractManager.js"),s=n("./node_modules/@studiometa/js-toolkit/Base/utils.js"),i=Object.defineProperty,o=(e,t,n)=>(((e,t,n)=>{t in e?i(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n})(e,"symbol"!=typeof t?t+"":t,n),n);function a(e,t,n,r){const s=e.__asyncComponentPromises.get(n);if("$isBase"in n||s&&"resolved"===s.status){let r=n;if(s&&(r=s.ctor),t.__base__&&t.__base__.has(r))return t.__base__.get(r);const i=new r(t);return Object.defineProperty(i,"$parent",{get:()=>e.__base}),i}const i=s?s.promise:n(e.__base);return s||e.__asyncComponentPromises.set(n,{promise:i,status:"pending",ctor:void 0}),i.then((s=>{var o;const l=null!=(o=s.default)?o:s;return e.__asyncComponentPromises.set(n,{promise:i,status:"resolved",ctor:l}),a(e,t,l,r)}))}function l(e,t,n){Object.defineProperty(e,t,{enumerable:!0,configurable:!0,get:()=>{const r=(0,s.getComponentElements)(t,e.__element);return 0===r.length?[]:r.map((r=>a(e,r,n,t))).filter((e=>"terminated"!==e))}})}function u(e,t,n,r){"$update"!==t||n.$isMounted||(t="$mount"),"$update"!==t&&"$destroy"!==t||e.__eventsManager.unbindChild(r,n),"$update"!==t&&"$mount"!==t||e.__eventsManager.bindChild(r,n),n[t]()}function c(e,t){e.registeredNames.forEach((n=>{e[n].forEach((r=>{r instanceof Promise?r.then((r=>u(e,t,r,n))):u(e,t,r,n)}))}))}class d extends r.default{constructor(){super(...arguments),o(this,"__asyncComponentPromises",new WeakMap)}get registeredNames(){return Object.keys(this).filter((e=>!e.startsWith("__")))}registerAll(){Object.entries(this.__config.components).forEach((([e,t])=>l(this,e,t)))}mountAll(){c(this,"$mount")}updateAll(){c(this,"$update")}destroyAll(){c(this,"$destroy")}}},"./node_modules/@studiometa/js-toolkit/Base/managers/EventsManager.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>w,normalizeEventName:()=>f,normalizeName:()=>d});var r=n("./node_modules/@studiometa/js-toolkit/utils/object/getAllProperties.js"),s=n("./node_modules/@studiometa/js-toolkit/utils/is.js"),i=n("./node_modules/@studiometa/js-toolkit/Base/utils.js"),o=n("./node_modules/@studiometa/js-toolkit/Base/managers/AbstractManager.js"),a=n("./node_modules/@studiometa/js-toolkit/Base/managers/RefsManager.js"),l=Object.defineProperty,u=(e,t,n)=>(((e,t,n)=>{t in e?l(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n})(e,"symbol"!=typeof t?t+"":t,n),n);const c=new Map;function d(e){return c.has(e)||c.set(e,e.replace(/[A-Z]([A-Z].*)/g,(e=>e.toLowerCase())).replace(/[^a-zA-Z\d\s:]/g," ").replace(/(^\w|\s+\w)/g,(e=>e.trim().toUpperCase())).trim()),c.get(e)}const h=new Map;function f(e){return h.has(e)||h.set(e,e.replace(/[A-Z]/g,(e=>`-${e.toLowerCase()}`)).replace(/^-/,"")),h.get(e)}const p=new Map;function m(e){return p.has(e)||p.set(e,new RegExp(e)),p.get(e)}function g(e,t=""){const n=m(`^on${d(t)}([A-Z].*)$`),[,r]=e.match(n);return f(r)}function v(e,t=""){const n=m(`^on${d(t)}[A-Z].*$`),s=n.toString();let i=e.__methodsCache.get(s);return i||(i=Array.from((0,r.default)(e.__base,[],(e=>n.test(e))).reduce(((e,[t])=>e.add(t)),new Set)),e.__methodsCache.set(s,i)),i}function _(e,t,n,r="add"){const s=`${r}EventListener`;v(e,t).forEach((r=>{const i=g(r,t);n.forEach((t=>t[s](i,e.__refsHandler)))}))}function y(e,t,n,r="add"){const s="add"===r?"$on":"$off";v(e,t).forEach((r=>{const i=g(r,t);n[s](i,e.__childrenHandler)}))}function b(e,t="add"){const n=`${t}EventListener`,r=v(e),{__base:s,__config:o}=e;r.map((e=>g(e))).filter((e=>(0,i.eventIsDefinedInConfig)(e,o)||(0,i.eventIsNative)(e,s.$el))).forEach((t=>{(0,i.getEventTarget)(s,t,o)[n](t,e.__rootElementHandler)}))}class w extends o.default{constructor(e){super(e),u(this,"__methodsCache",new Map),u(this,"__rootElementHandler",{handleEvent:e=>{const t=`on${d(e.type)}`;e instanceof CustomEvent&&(0,s.isArray)(e.detail)&&e.detail.length?this.__base[t](...e.detail,e):this.__base[t](e)}}),u(this,"__refsHandler",{handleEvent:e=>{const t=e.currentTarget,n=(0,a.normalizeRefName)(t.dataset.ref),r=`on${d(n)}${d(e.type)}`;let i=0;(0,s.isArray)(this.__base.$refs[n])&&(i=this.__base.$refs[n].indexOf(t)),this.__base[r](e,i)}}),u(this,"__childrenHandler",{handleEvent:e=>{const t=this.__base.$children,{name:n,child:r}=t.registeredNames.map((n=>({name:n,child:t[n].find((t=>t===e.currentTarget||t.$el===e.currentTarget))}))).find((({child:e})=>e)),i=`on${d(n)}${d(e.type)}`,o=t[n].indexOf(r),a=(0,s.isArray)(e.detail)?e.detail:[];this.__base[i](...a,o,e)}}),this.__hideProperties(["__methodsCache","__rootElementHandler","__refsHandler","__childrenHandler"])}bindRef(e,t){_(this,e,t)}unbindRef(e,t){_(this,e,t,"remove")}bindChild(e,t){y(this,e,t)}unbindChild(e,t){y(this,e,t,"remove")}bindRootElement(){b(this)}unbindRootElement(){b(this,"remove")}}},"./node_modules/@studiometa/js-toolkit/Base/managers/OptionsManager.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{__getPropertyName:()=>d,default:()=>h});var r=n("./node_modules/deepmerge/dist/cjs.js"),s=n("./node_modules/@studiometa/js-toolkit/Base/managers/AbstractManager.js"),i=n("./node_modules/@studiometa/js-toolkit/utils/is.js"),o=Object.defineProperty,a=(e,t,n)=>(((e,t,n)=>{t in e?o(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n})(e,"symbol"!=typeof t?t+"":t,n),n);const l=new Set([String,Number,Boolean,Array,Object]),u={String:"",Number:0,Boolean:!1,Array:()=>[],Object:()=>({})},c=new Map;function d(e,t=""){const n=e+t;if(c.has(n))return c.get(n);const r=`option${t}${e.replace(/^\w/,(e=>e.toUpperCase()))}`;return c.set(n,r),r}class h extends s.default{constructor(e){var t,n;super(e),a(this,"__values",{}),a(this,"name","Base"),a(this,"debug",!1),a(this,"log",!1),this.__hideProperties(["__values","__defaultValues"]);const r=this.__config.options||{};this.name=this.__config.name,r.debug={type:Boolean,default:null!=(t=this.__config.debug)&&t},r.log={type:Boolean,default:null!=(n=this.__config.log)&&n},Object.entries(r).forEach((([e,t])=>{!function(e,t,n){var r;if(l.has(n.type)){if(n.default=null!=(r=n.default)?r:u[n.type.name],n.type!==Array&&n.type!==Object||(0,i.isFunction)(n.default))Object.defineProperty(e,t,{get:()=>e.get(t,n),set:r=>{e.set(t,r,n)},enumerable:!0});else if(i.isDev)throw new Error(`The default value for options of type "${n.type.name}" must be returned by a function.`)}else if(i.isDev)throw new Error(`The "${t}" option has an invalid type. The allowed types are: String, Number, Boolean, Array and Object.`)}(this,e,l.has(t)?{type:t}:t)}))}get(e,t){const{type:n,default:s}=t,o=d(e),a=(0,i.isDefined)(this.__element.dataset[o]);if(n===Boolean){if(s){const t=d(e,"No");return!(0,i.isDefined)(this.__element.dataset[t])}return a||s}const l=this.__element.dataset[o];if(n===Number)return a?Number(l):s;if(n===Array||n===Object){if(!this.__values[e]){let n=a?JSON.parse(l):t.default();(0,i.isDefined)(t.merge)&&(n=(0,i.isBoolean)(t.merge)?r(t.default(),n):r(t.default(),n,t.merge)),this.__values[e]=n}return this.__values[e]}return a?l:s}set(e,t,n){const{type:r,default:s}=n,o=d(e);if(t.constructor.name===r.name)switch(r){case Boolean:if(s){const n=d(e,"No");t?delete this.__element.dataset[n]:this.__element.dataset[n]=""}else t?this.__element.dataset[o]="":delete this.__element.dataset[o];break;case Array:case Object:this.__values[e]=t;break;default:this.__element.dataset[o]=t}else if(i.isDev){const n=(0,i.isArray)(t)||(0,i.isObject)(t)?JSON.stringify(t):t;throw new TypeError(`The "${n}" value for the "${e}" option must be of type "${r.name}"`)}}}},"./node_modules/@studiometa/js-toolkit/Base/managers/RefsManager.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>a,normalizeRefName:()=>i});var r=n("./node_modules/@studiometa/js-toolkit/Base/managers/AbstractManager.js"),s=n("./node_modules/@studiometa/js-toolkit/utils/is.js");function i(e){return e.endsWith("[]")?e.replace(/\[\]$/,""):e}function o(e,t){const n=t.endsWith("[]"),r=i(t),o=Array.from(e.__element.querySelectorAll(`[data-ref="${t}"]`)).filter((t=>function(e,t){let n=t.parentElement;for(;n&&!(0,s.isDefined)(n.dataset.component);)n=n.parentElement;return null===n||n===e.__element}(e,t)));s.isDev&&!n&&o.length>1&&console.warn(`[${e.__base.$options.name}]`,`The "${t}" ref has been found multiple times.`,"Did you forgot to add the `[]` suffix to its name?"),!n&&o.length<=1&&!(0,s.isDefined)(o[0])?s.isDev&&console.warn(`[${e.__base.$options.name}]`,`The "${t}" ref is missing.`,`Is there an \`[data-ref="${t}"]\` element in the component's scope?`):(e.__eventsManager.bindRef(t,o),Object.defineProperty(e,r,{value:n||o.length>1?o:o[0],enumerable:!0,configurable:!0}))}class a extends r.default{get __refs(){var e;return null!=(e=this.__config.refs)?e:[]}registerAll(){this.__refs.forEach((e=>o(this,e)))}unregisterAll(){this.__refs.forEach((e=>function(e,t){const n=i(t),r=(0,s.isArray)(e[n])?e[n]:[e[n]];e.__eventsManager.unbindRef(t,r)}(this,e)))}}},"./node_modules/@studiometa/js-toolkit/Base/managers/ServicesManager.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>g});var r=n("./node_modules/@studiometa/js-toolkit/services/pointer.js"),s=n("./node_modules/@studiometa/js-toolkit/services/raf.js"),i=n("./node_modules/@studiometa/js-toolkit/services/resize.js"),o=n("./node_modules/@studiometa/js-toolkit/services/scroll.js"),a=n("./node_modules/@studiometa/js-toolkit/services/key.js"),l=n("./node_modules/@studiometa/js-toolkit/services/load.js"),u=n("./node_modules/@studiometa/js-toolkit/Base/managers/AbstractManager.js"),c=n("./node_modules/@studiometa/js-toolkit/utils/is.js"),d=n("./node_modules/@studiometa/js-toolkit/utils/noop.js"),h=Object.defineProperty,f=(e,t,n)=>(((e,t,n)=>{t in e?h(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n})(e,"symbol"!=typeof t?t+"":t,n),n);const p={scrolled:o.default,resized:i.default,ticked:s.default,moved:r.default,keyed:a.default,loaded:l.default},m=Object.keys(p);class g extends u.default{constructor(){super(...arguments),f(this,"__customServices",{})}get __services(){return{...this.__customServices,...p}}has(e){if(!(0,c.isFunction)(this.__base[e])&&!this.__base.__hasEvent(e)||!this.__services[e])return!1;const{has:t}=this.__services[e]();return t(this.__base.$id)}get(e){return this.__services[e]().props()}enable(e){if(this.has(e))return this.disable.bind(this,e);if(!(0,c.isFunction)(this.__base[e])&&!this.__base.__hasEvent(e)||!this.__services[e])return d.noop;const{add:t}=this.__services[e](),n=this;return t(this.__base.$id,(function(...t){return n.__base.__callMethod(e,...t)})),this.disable.bind(this,e)}enableAll(){return Object.keys(this.__services).map((e=>this.enable(e)))}disableAll(){Object.keys(this.__services).forEach((e=>{this.disable(e)}))}disable(e){if(!this.__services[e])return;const{remove:t}=this.__services[e]();t(this.__base.$id)}toggle(e,t){(0,c.isDefined)(t)?(t&&!this.has(e)&&this.enable(e),!t&&this.has(e)&&this.disable(e)):this.has(e)?this.disable(e):this.enable(e)}register(e,t){this.__customServices[e]=t,this.__base.__addEmits(e)}unregister(e){if(m.includes(e)){if(c.isDev)throw new Error(`[ServicesManager] The \`${e}\` core service can not be unregistered.`)}else this.__base.__removeEmits(e),delete this.__customServices[e]}}},"./node_modules/@studiometa/js-toolkit/Base/utils.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{eventIsDefinedInConfig:()=>i,eventIsNative:()=>o,getComponentElements:()=>s,getEventTarget:()=>a});var r=n("./node_modules/@studiometa/js-toolkit/utils/is.js");function s(e,t=document){const n=`[data-component="${e}"]`;let r=[];try{r=Array.from(t.querySelectorAll(n))}catch{}return 0===r.length&&(r=Array.from(t.querySelectorAll(e))),r}function i(e,t){return(0,r.isArray)(t.emits)&&t.emits.includes(e)}function o(e,t){return(0,r.isDefined)(t[`on${e}`])}function a(e,t,n){return i(t,n)?e:o(t,e.$el)?e.$el:(r.isDev&&console.warn(`[${n.name}]`,`The "${t}" event is missing from the configuration and is not a native`,`event for the root element of type \`${e.$el.constructor.name}\`.`),e)}},"./node_modules/@studiometa/js-toolkit/decorators/withBreakpointObserver.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>c});var r=n("./node_modules/@studiometa/js-toolkit/services/resize.js"),s=n("./node_modules/@studiometa/js-toolkit/utils/is.js"),i=Object.defineProperty,o=(e,t,n)=>(((e,t,n)=>{t in e?i(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n})(e,"symbol"!=typeof t?t+"":t,n),n);function a(e,t=(0,r.default)().props().breakpoint){const{activeBreakpoints:n,inactiveBreakpoints:s}=e.$options,i=n&&n.split(" ").includes(t),o=s&&s.split(" ").includes(t);return n&&i||s&&!o?"$mount":"$destroy"}function l(e){const{activeBreakpoints:t,inactiveBreakpoints:n}=e.$options;return Boolean(t||n)}function u(e,t){s.isDev&&function(e){const{activeBreakpoints:t,inactiveBreakpoints:n,name:r}=e.$options;if(t&&n)throw new Error(`[${r}] Incorrect configuration: the \`activeBreakpoints\` and \`inactiveBreakpoints\` are not compatible.`)}(t);const{add:n,has:i}=(0,r.default)();i(e)||n(e,(function({breakpoint:e}){const n=a(t,e);"$destroy"===n&&t.$isMounted?t[n]():"$mount"!==n||t.$isMounted||setTimeout((()=>t[n]()),0)}))}function c(e){var t,n;return o(n=class extends e{constructor(e){super(e);const{remove:t,props:n}=(0,r.default)(),{name:i}=this.$options;if(!n().breakpoint){if(s.isDev)throw new Error(`[${i}] The \`BreakpointObserver\` class requires breakpoints to be defined.`);return}const o=`BreakpointObserver-${this.$id}`;new MutationObserver((([e])=>{if("attributes"===e.type&&("data-options"===e.attributeName||e.attributeName.startsWith("data-option-"))){if(!l(this))return this.$mount(),void t(o);u(o,this)}})).observe(this.$el,{attributes:!0}),l(this)&&u(o,this)}$mount(){if(!l(this))return super.$mount();return"$mount"===a(this)?super.$mount():this}},"config",{...e.config,name:`${e.config.name}WithBreakpointObserver`,options:{...(null==(t=e.config)?void 0:t.options)||{},activeBreakpoints:String,inactiveBreakpoints:String}}),n}},"./node_modules/@studiometa/js-toolkit/decorators/withIntersectionObserver.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o});var r=Object.defineProperty,s=(e,t,n)=>(((e,t,n)=>{t in e?r(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n})(e,"symbol"!=typeof t?t+"":t,n),n);function i(e){return[...new Array(e+1)].map(((t,n)=>n/e))}function o(e,t={threshold:i(100)}){var n,r;return s(r=class extends e{constructor(e){super(e),this.$observer=new IntersectionObserver((e=>{this.__callMethod("intersected",e)}),{...t,...this.$options.intersectionObserver}),this.$on("mounted",(()=>{this.$observer.observe(this.$el)})),this.$on("destroyed",(()=>{this.$observer.unobserve(this.$el)}))}},"config",{...e.config,name:`${e.config.name}WithIntersectionObserver`,options:{...(null==(n=e.config)?void 0:n.options)||{},intersectionObserver:Object},emits:["intersected"]}),r}},"./node_modules/@studiometa/js-toolkit/decorators/withMountWhenInView.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>i});var r=Object.defineProperty,s=(e,t,n)=>(((e,t,n)=>{t in e?r(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n})(e,"symbol"!=typeof t?t+"":t,n),n);function i(e,t={threshold:[0,1]}){var n,r;return r=class extends e{constructor(e){super(e),s(this,"__isVisible",!1),s(this,"__observer"),this.__observer=new IntersectionObserver((e=>{const t=e.reduce(((e,t)=>e||t.isIntersecting),!1);this.__isVisible!==t&&(this.__isVisible=t,t?this.$mount():setTimeout((()=>this.$destroy())))}),{...t,...this.$options.intersectionObserver}),this.__observer.observe(this.$el),this.$on("terminated",(()=>{this.__observer.disconnect()}))}$mount(){return this.__isVisible&&super.$mount(),this}},s(r,"config",{...e.config,name:`${e.config.name}WithMountWhenInView`,options:{...(null==(n=e.config)?void 0:n.options)||{},intersectionObserver:Object}}),r}},"./node_modules/@studiometa/js-toolkit/decorators/withScrolledInView.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>f});var r=n("./node_modules/@studiometa/js-toolkit/decorators/withMountWhenInView.js"),s=n("./node_modules/@studiometa/js-toolkit/utils/scheduler.js"),i=n("./node_modules/@studiometa/js-toolkit/utils/math/clamp.js"),o=n("./node_modules/@studiometa/js-toolkit/utils/math/clamp01.js"),a=n("./node_modules/@studiometa/js-toolkit/utils/math/damp.js"),l=n("./node_modules/@studiometa/js-toolkit/utils/is.js"),u=n("./node_modules/@studiometa/js-toolkit/utils/css/getOffsetSizes.js"),c=Object.defineProperty,d=(e,t,n)=>(((e,t,n)=>{t in e?c(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n})(e,"symbol"!=typeof t?t+"":t,n),n);const h=(0,s.useScheduler)(["update","render"]);function f(e,t={}){var n;return n=class extends((0,r.default)(e,t)){constructor(e){super(e),d(this,"__props",{start:{x:0,y:0},end:{x:0,y:0},current:{x:0,y:0},progress:{x:0,y:0},dampedProgress:{x:0,y:0}}),d(this,"dampFactor",.1),d(this,"dampPrecision",.001);const t={handleEvent(e){t[e.type](e.detail[0])},resized:()=>{this.__setProps()},scrolled:e=>{(!this.$services.has("ticked")&&e.changed.y||e.changed.x)&&this.$services.enable("ticked")},ticked:()=>{this.__props.current.x=(0,i.default)(window.pageXOffset,this.__props.start.x,this.__props.end.x),this.__props.progress.x=(0,o.default)((this.__props.current.x-this.__props.start.x)/(this.__props.end.x-this.__props.start.x)),this.__props.dampedProgress.x=(0,a.default)(this.__props.progress.x,this.__props.dampedProgress.x,this.dampFactor,this.dampPrecision),this.__props.current.y=(0,i.default)(window.pageYOffset,this.__props.start.y,this.__props.end.y),this.__props.progress.y=(0,o.default)((this.__props.current.y-this.__props.start.y)/(this.__props.end.y-this.__props.start.y)),this.__props.dampedProgress.y=(0,a.default)(this.__props.progress.y,this.__props.dampedProgress.y,this.dampFactor,this.dampPrecision),this.__props.dampedProgress.x===this.__props.progress.x&&this.__props.dampedProgress.y===this.__props.progress.y&&this.$services.disable("ticked"),h.update((()=>{const e=this.__callMethod("scrolledInView",this.__props);(0,l.isFunction)(e)&&h.render((()=>{e(this.__props)}))}))}};this.$on("before-mounted",(()=>{this.$on("resized",t),this.$on("scrolled",t),this.$on("ticked",t)})),this.$on("mounted",(()=>{this.__setProps()})),this.$on("destroyed",(()=>{this.$off("resized",t),this.$off("scrolled",t),this.$off("ticked",t)}))}mounted(){(0,l.isFunction)(super.mounted)&&super.mounted()}resized(e){(0,l.isFunction)(super.resized)&&super.resized(e)}scrolled(e){(0,l.isFunction)(super.scrolled)&&super.scrolled(e)}ticked(e){(0,l.isFunction)(super.ticked)&&super.ticked(e)}destroyed(){(0,l.isFunction)(super.destroyed)&&super.destroyed()}__setProps(){const e=t.useOffsetSizes?(0,u.default)(this.$el):this.$el.getBoundingClientRect(),n=e.y+window.pageYOffset+e.height,r=n-window.innerHeight-e.height,s=(0,i.default)(window.pageYOffset,r,n),l=(0,o.default)((s-r)/(n-r)),c=e.x+window.pageXOffset+e.width,d=c-window.innerWidth-e.width,h=(0,i.default)(window.pageXOffset,d,c),f=(0,o.default)((h-d)/(c-d));this.__props.start.x=d,this.__props.start.y=r,this.__props.end.x=c,this.__props.end.y=n,this.__props.current.x=h,this.__props.current.y=s,this.__props.progress.x=f,this.__props.progress.y=l,this.__props.dampedProgress.x=(0,a.default)(f,this.__props.dampedProgress.x),this.__props.dampedProgress.y=(0,a.default)(l,this.__props.dampedProgress.y)}},d(n,"config",{name:`${e.config.name}WithMountWhenInView`,emits:["scrolledInView"]}),n}},"./node_modules/@studiometa/js-toolkit/helpers/getInstanceFromElement.js":(e,t,n)=>{"use strict";function r(e,t){var n;return e.__base__&&null!=(n=e.__base__.get(t))?n:null}n.r(t),n.d(t,{default:()=>r})},"./node_modules/@studiometa/js-toolkit/services/key.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>a});var r=n("./node_modules/@studiometa/js-toolkit/services/service.js"),s=n("./node_modules/@studiometa/js-toolkit/utils/keyCodes.js");function i(){let e;function t(t){a(function(t){return l.event=t,Object.entries(s.default).forEach((([e,n])=>{l[e]=n===t.keyCode})),e||(l.triggered=0),"keydown"===l.event.type&&"keydown"===(null==e?void 0:e.type)?l.triggered+=1:l.triggered=1,e=l.event,l.direction="keydown"===l.event.type?"down":"up",l.isUp="keyup"===l.event.type,l.isDown="keydown"===l.event.type,l}(t))}const{add:n,remove:i,has:o,trigger:a,props:l}=(0,r.useService)({props:{event:null,triggered:0,isUp:!1,isDown:!1,direction:"none",...Object.fromEntries(Object.keys(s.default).map((e=>[e,!1])))},init(){document.addEventListener("keydown",t),document.addEventListener("keyup",t)},kill(){document.removeEventListener("keydown",t),document.removeEventListener("keyup",t)}});return{add:n,remove:i,has:o,props:()=>l}}let o;function a(){return o||(o=i()),o}},"./node_modules/@studiometa/js-toolkit/services/load.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>i});var r=n("./node_modules/@studiometa/js-toolkit/services/service.js");let s;function i(){return s||(s=function(){function e(){i.time=window.performance.now(),o(i)}const{add:t,remove:n,has:s,props:i,trigger:o}=(0,r.useService)({props:{time:performance.now()},init(){window.addEventListener("load",e)},kill(){window.removeEventListener("load",e)}});return{add:t,remove:n,has:s,props:()=>i}}()),s}},"./node_modules/@studiometa/js-toolkit/services/pointer.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>l});var r=n("./node_modules/@studiometa/js-toolkit/services/service.js");function s(e){return"undefined"!=typeof TouchEvent&&e instanceof TouchEvent}const i=["mousemove","touchmove","mousedown","touchstart","mouseup","touchend"];function o(){function e(e){switch(e.type){case"mouseenter":case"mousemove":case"touchmove":a(function(e){var t,n;l.event=e;const r=l.y,i=l.x,o=s(e)?null==(t=e.touches[0])?void 0:t.clientY:e.clientY;o!==l.y&&(l.y=o);const a=s(e)?null==(n=e.touches[0])?void 0:n.clientX:e.clientX;return a!==l.x&&(l.x=a),l.changed.x=l.x!==i,l.changed.y=l.y!==r,l.last.x=i,l.last.y=r,l.delta.x=l.x-i,l.delta.y=l.y-r,l.max.x=window.innerWidth,l.max.y=window.innerHeight,l.progress.x=l.x/l.max.x,l.progress.y=l.y/l.max.y,l}(e));break;case"mousedown":case"touchstart":l.isDown=!0,a(l);break;case"mouseup":case"touchend":l.isDown=!1,a(l)}}const{add:t,remove:n,has:o,trigger:a,props:l}=(0,r.useService)({props:{event:null,isDown:!1,x:window.innerWidth/2,y:window.innerHeight/2,changed:{x:!1,y:!1},last:{x:window.innerWidth/2,y:window.innerHeight/2},delta:{x:0,y:0},progress:{x:.5,y:.5},max:{x:window.innerWidth,y:window.innerHeight}},init(){document.documentElement.addEventListener("mouseenter",e,{once:!0,capture:!0});const t={passive:!0,capture:!0};i.forEach((n=>{document.addEventListener(n,e,t)}))},kill(){i.forEach((t=>{document.removeEventListener(t,e)}))}});return{add:t,remove:n,has:o,props:()=>l}}let a;function l(){return a||(a=o()),a}},"./node_modules/@studiometa/js-toolkit/services/raf.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>c});var r=n("./node_modules/@studiometa/js-toolkit/services/service.js"),s=n("./node_modules/@studiometa/js-toolkit/utils/nextFrame.js"),i=n("./node_modules/@studiometa/js-toolkit/utils/scheduler.js"),o=n("./node_modules/@studiometa/js-toolkit/utils/is.js");const a=(0,i.useScheduler)(["update","render"]);function l(){let e=!1;const t=(0,s.getRaf)();function n(){var r;c.time=performance.now(),r=c,d.forEach((function(e){a.update((function(){const t=e(r);(0,o.isFunction)(t)&&a.render((function(){t(r)}))}))})),e&&t(n)}const{add:i,remove:l,has:u,props:c,callbacks:d}=(0,r.useService)({props:{time:performance.now()},init(){e=!0,t(n)},kill(){e=!1}});return{add:i,remove:l,has:u,props:()=>c}}let u;function c(){return u||(u=l()),u}},"./node_modules/@studiometa/js-toolkit/services/resize.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>c});var r=n("./node_modules/@studiometa/js-toolkit/services/service.js"),s=n("./node_modules/@studiometa/js-toolkit/utils/debounce.js");let i,o,a=[];function l(){return i||(i=document.querySelector("[data-breakpoint]")),i}function u(){const e=(0,s.default)((()=>{o((u.width=window.innerWidth,u.height=window.innerHeight,u.ratio=window.innerWidth/window.innerHeight,u.orientation="square",u.ratio>1&&(u.orientation="landscape"),u.ratio<1&&(u.orientation="portrait"),u))})),{add:t,remove:n,has:i,trigger:o,props:u}=(0,r.useService)({props:{width:window.innerWidth,height:window.innerHeight,ratio:window.innerWidth/window.innerHeight,orientation:"square",get breakpoint(){return l()?window.getComputedStyle(l(),"::before").getPropertyValue("content").replaceAll('"',""):void 0},get breakpoints(){return!l()||a.length||(a=window.getComputedStyle(l(),"::after").getPropertyValue("content").replaceAll('"',"").split(",")),a}},init(){window.addEventListener("resize",e)},kill(){window.removeEventListener("resize",e)}});return{add:t,remove:n,has:i,props:()=>u}}function c(){return o||(o=u()),o}},"./node_modules/@studiometa/js-toolkit/services/scroll.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o});var r=n("./node_modules/@studiometa/js-toolkit/services/service.js"),s=n("./node_modules/@studiometa/js-toolkit/utils/debounce.js");let i;function o(){return i||(i=function(){function e(){const e=l.y,t=l.x;return window.pageYOffset!==l.y&&(l.y=window.pageYOffset),window.pageXOffset!==l.x&&(l.x=window.pageXOffset),l.changed.x=l.x!==t,l.changed.y=l.y!==e,l.last.x=t,l.last.y=e,l.delta.x=l.x-t,l.delta.y=l.y-e,l.max.x=(document.scrollingElement||document.body).scrollWidth-window.innerWidth,l.max.y=(document.scrollingElement||document.body).scrollHeight-window.innerHeight,l.progress.x=0===l.max.x?1:l.x/l.max.x,l.progress.y=0===l.max.y?1:l.y/l.max.y,l.direction.x=l.x>t?"RIGHT":l.x<t?"LEFT":"NONE",l.direction.y=l.y>e?"DOWN":l.y<e?"UP":"NONE",l}const t=(0,s.default)((()=>{u(e())}),100);function n(){u(e()),t()}const{add:i,remove:o,has:a,props:l,trigger:u}=(0,r.useService)({props:{x:window.pageXOffset,y:window.pageYOffset,changed:{x:!1,y:!1},last:{x:window.pageXOffset,y:window.pageYOffset},delta:{x:0,y:0},max:{x:(document.scrollingElement||document.body).scrollWidth-window.innerWidth,y:(document.scrollingElement||document.body).scrollHeight-window.innerHeight},progress:{x:0,y:0},direction:{x:"NONE",y:"NONE"}},init(){document.addEventListener("scroll",n,{passive:!0,capture:!0})},kill(){document.removeEventListener("scroll",n)}});return{add:i,remove:o,has:a,props:()=>l}}()),i}},"./node_modules/@studiometa/js-toolkit/services/service.js":(e,t,n)=>{"use strict";function r(e){const t=new Map;let n=!1;const{init:r,kill:s,props:i}=e;function o(e){return t.has(e)}return{callbacks:t,props:i,add:function(e,s){o(e)?console.warn(`The key \`${e}\` has already been added.`):(0!==t.size||n||(r(),n=!0),t.set(e,s))},remove:function(e){t.delete(e),0===t.size&&n&&(s(),n=!1)},has:o,get:function(e){return t.get(e)},trigger:function(e){t.forEach((function(t){t(e)}))}}}n.r(t),n.d(t,{useService:()=>r})},"./node_modules/@studiometa/js-toolkit/utils/css/classes.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{add:()=>i,remove:()=>o,toggle:()=>a});var r=n("./node_modules/@studiometa/js-toolkit/utils/is.js");function s(e,t,n,s){if(!e||!t)return;const i=(0,r.isArray)(t)?t:t.split(" ");"toggle"!==n?e.classList[n](...i):i.forEach((t=>e.classList[n](t,s)))}function i(e,t){s(e,t,"add")}function o(e,t){s(e,t,"remove")}function a(e,t,n){s(e,t,"toggle",n)}},"./node_modules/@studiometa/js-toolkit/utils/css/getOffsetSizes.js":(e,t,n)=>{"use strict";function r(e){let t=e,n=-window.pageXOffset,r=-window.pageYOffset;for(;t;)n+=t.offsetLeft,r+=t.offsetTop,t=t.offsetParent;const s=e.offsetWidth,i=e.offsetWidth;return{x:n,y:r,width:s,height:i,top:r,right:s+n,bottom:i+r,left:n}}n.r(t),n.d(t,{default:()=>r})},"./node_modules/@studiometa/js-toolkit/utils/debounce.js":(e,t,n)=>{"use strict";function r(e,t=300){let n;return function(...r){clearTimeout(n),n=setTimeout((()=>{e(...r)}),t)}}n.r(t),n.d(t,{default:()=>r})},"./node_modules/@studiometa/js-toolkit/utils/has.js":(e,t,n)=>{"use strict";function r(){return"undefined"!=typeof window}n.r(t),n.d(t,{hasWindow:()=>r})},"./node_modules/@studiometa/js-toolkit/utils/is.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{isArray:()=>c,isBoolean:()=>u,isDefined:()=>i,isDev:()=>r,isFunction:()=>s,isNumber:()=>l,isObject:()=>a,isString:()=>o});const r="undefined"!=typeof __DEV__&&__DEV__,s=e=>"function"==typeof e,i=e=>void 0!==e,o=e=>"string"==typeof e,a=e=>"object"==typeof e&&!!e&&"[object Object]"===e.toString(),l=e=>"number"==typeof e,u=e=>"boolean"==typeof e,c=Array.isArray},"./node_modules/@studiometa/js-toolkit/utils/keyCodes.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>r});var r={ENTER:13,SPACE:32,TAB:9,ESC:27,LEFT:37,UP:38,RIGHT:39,DOWN:40}},"./node_modules/@studiometa/js-toolkit/utils/math/clamp.js":(e,t,n)=>{"use strict";function r(e,t,n){return t<n?e<t?t:e>n?n:e:e<n?n:e>t?t:e}n.r(t),n.d(t,{default:()=>r})},"./node_modules/@studiometa/js-toolkit/utils/math/clamp01.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>s});var r=n("./node_modules/@studiometa/js-toolkit/utils/math/clamp.js");function s(e){return(0,r.default)(e,0,1)}},"./node_modules/@studiometa/js-toolkit/utils/math/createEases.js":(e,t,n)=>{"use strict";function r(e){return t=>1-e(1-t)}function s(e){return t=>0===t?0:1===t?1:t<.5?e(2*t)/2:1-e(2*(1-t))/2}n.r(t),n.d(t,{createEaseInOut:()=>s,createEaseOut:()=>r})},"./node_modules/@studiometa/js-toolkit/utils/math/damp.js":(e,t,n)=>{"use strict";function r(e,t,n=.5,r=.01){return Math.abs(e-t)<r?e:t+(e-t)*n}n.r(t),n.d(t,{default:()=>r})},"./node_modules/@studiometa/js-toolkit/utils/math/ease.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{easeInCirc:()=>y,easeInCubic:()=>a,easeInExpo:()=>x,easeInOutCirc:()=>w,easeInOutCubic:()=>u,easeInOutExpo:()=>E,easeInOutQuad:()=>o,easeInOutQuart:()=>h,easeInOutQuint:()=>m,easeInOutSine:()=>_,easeInQuad:()=>s,easeInQuart:()=>c,easeInQuint:()=>f,easeInSine:()=>g,easeOutCirc:()=>b,easeOutCubic:()=>l,easeOutExpo:()=>j,easeOutQuad:()=>i,easeOutQuart:()=>d,easeOutQuint:()=>p,easeOutSine:()=>v});var r=n("./node_modules/@studiometa/js-toolkit/utils/math/createEases.js");function s(e){return e**2}const i=(0,r.createEaseOut)(s),o=(0,r.createEaseInOut)(s);function a(e){return e**3}const l=(0,r.createEaseOut)(a),u=(0,r.createEaseInOut)(a);function c(e){return e**4}const d=(0,r.createEaseOut)(c),h=(0,r.createEaseInOut)(c);function f(e){return e**5}const p=(0,r.createEaseOut)(f),m=(0,r.createEaseInOut)(f);function g(e){return 1===e?1:1-Math.cos(e*Math.PI/2)}const v=(0,r.createEaseOut)(g),_=(0,r.createEaseInOut)(g);function y(e){return-(Math.sqrt(1-e*e)-1)}const b=(0,r.createEaseOut)(y),w=(0,r.createEaseInOut)(y);function x(e){return 2**(10*(e-1))}const j=(0,r.createEaseOut)(x),E=(0,r.createEaseInOut)(x)},"./node_modules/@studiometa/js-toolkit/utils/math/lerp.js":(e,t,n)=>{"use strict";function r(e,t,n){return(1-n)*e+n*t}n.r(t),n.d(t,{default:()=>r})},"./node_modules/@studiometa/js-toolkit/utils/math/map.js":(e,t,n)=>{"use strict";function r(e,t,n,r,s){return(e-t)*(s-r)/(n-t)+r}n.r(t),n.d(t,{default:()=>r})},"./node_modules/@studiometa/js-toolkit/utils/nextFrame.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{getCancelRaf:()=>o,getRaf:()=>i,nextFrame:()=>a});var r=n("./node_modules/@studiometa/js-toolkit/utils/is.js"),s=n("./node_modules/@studiometa/js-toolkit/utils/has.js");function i(){return(0,s.hasWindow)()&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):setTimeout}function o(){return(0,s.hasWindow)()&&window.cancelAnimationFrame?window.cancelAnimationFrame.bind(window):clearTimeout}function a(e){return new Promise((t=>{i()((()=>t((0,r.isFunction)(e)&&e())))}))}},"./node_modules/@studiometa/js-toolkit/utils/noop.js":(e,t,n)=>{"use strict";function r(){}function s(e){return e}n.r(t),n.d(t,{noop:()=>r,noopValue:()=>s})},"./node_modules/@studiometa/js-toolkit/utils/object/getAllProperties.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>s});var r=n("./node_modules/@studiometa/js-toolkit/utils/is.js");function s(e,t=[],n=null){const i=Object.getPrototypeOf(e);if(i===Object.prototype||null===i)return t;let o=Object.getOwnPropertyNames(i);return(0,r.isFunction)(n)&&(o=o.filter((e=>n(e,i)))),o=o.map((e=>[e,i])).reduce(((e,t)=>[...e,t]),t),s(i,o,n)}},"./node_modules/@studiometa/js-toolkit/utils/scheduler.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{domScheduler:()=>o,useScheduler:()=>i});const r=new Map,s=["read","write","afterWrite"];function i(e=s){const t=e.join("-");if(r.has(t))return r.get(t);const n=function(e){const t={},n={};let r=!1;const s=Promise.resolve();function i(){e.forEach((function(e){!function(e){let t;for(;t=e.shift();)t()}(t[e])})),r=!1,e.reduce(((e,n)=>e+t[n].length),0)>0&&o()}function o(){r||(r=!0,s.then(i))}return e.forEach((e=>{t[e]=[],n[e]=function(n){t[e].push(n),o()}})),n}(e);return r.set(t,n),n}const o=i(s)},"./node_modules/@studiometa/js-toolkit/utils/tween.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{normalizeEase:()=>d,tween:()=>h});var r=n("./node_modules/@motionone/easing/dist/cubic-bezier.es.js"),s=n("./node_modules/@studiometa/js-toolkit/utils/math/clamp01.js"),i=n("./node_modules/@studiometa/js-toolkit/utils/math/map.js"),o=n("./node_modules/@studiometa/js-toolkit/utils/math/lerp.js"),a=n("./node_modules/@studiometa/js-toolkit/utils/is.js"),l=n("./node_modules/@studiometa/js-toolkit/utils/noop.js"),u=n("./node_modules/@studiometa/js-toolkit/services/raf.js");let c=0;function d(e){return(0,a.isDefined)(e)?(0,a.isArray)(e)?(0,r.cubicBezier)(...e):e:l.noopValue}function h(e,t={}){var n;const r=(0,u.default)();let a=0,h=0;const f=d(t.easing);let p=null!=(n=t.duration)?n:1;p*=1e3;let m=performance.now(),g=m+p;const v=`tw-${c}`;c+=1;const{onStart:_=l.noop,onProgress:y=l.noop,onFinish:b=l.noop}=t;let w=!1;function x(){w=!1,r.remove(v)}function j(t){return void 0===t?h:(a=t,h=f(a),Math.abs(1-h)<1e-4&&(a=1,h=1),e(h),y(a,h),1===h&&(x(),requestAnimationFrame((()=>b(a,h)))),a)}function E(e){w?j((0,s.default)((0,i.default)(e.time,m,g,0,1))):r.remove(v)}return{start:function(){_(),m=performance.now(),g=m+p,a=0,h=0,w=!0,r.add(v,E)},finish:()=>j(1),pause:x,play:function(){w||(m=performance.now()-(0,o.default)(0,p,a),g=m+p,w=!0,r.add(v,E))},progress:j}}}},t={};function n(r){var s=t[r];if(void 0!==s)return s.exports;var i=t[r]={id:r,loaded:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.loaded=!0,i.exports}n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.nmd=e=>(e.paths=[],e.children||(e.children=[]),e),(()=>{"use strict";n.r({});var e=n("./app/containers/AppEvents.js"),t=n("./node_modules/@studiometa/js-toolkit/helpers/getInstanceFromElement.js"),r=n("./app/components/Cursor.js"),s=n("./app/pages/Home.js"),i=n("./app/pages/About.js"),o=n("./app/pages/Projects.js"),a=n("./app/pages/Ui.js"),l=n("./app/components/ScribbleLink.js"),u=n("./app/utils/dom.js"),c=n("./app/components/Preloader.js"),d=n("./app/components/Parallax.js"),h=n("./node_modules/@studio-freight/lenis/dist/lenis.modern.mjs"),f=n("./app/components/Title.js");class p extends e.default{static config={name:"App",components:{Cursor:r.default,ScribbleLink:l.default,Parallax:d.default,Home:s.default,About:i.default,Projects:o.default,Ui:a.default,Title:f.default},refs:[...e.default.config.refs,"pageContainer"]};currentPageInstance=null;DOMParser=new DOMParser;internalLinks=[];mounted(){super.mounted(),this.removeAppOverlay(),this.updateCurrentPageInstance(),this.setupListeners(),this.setupInternalLinks(),this.createLenis().stop()}removeAppOverlay(){const e=document.getElementById("appOverlay");e&&e.remove()}ticked({time:e}){window.lenis.raf(e)}showCurrentPage(){window.lenis.start(),this.currentPageInstance.animateIn()}setupListeners(){window.addEventListener("popstate",(()=>this.onUrlChange({url:window.location.pathname,push:!1})))}setupInternalLinks(){this.internalLinks=(0,u.getInternalLinks)(),this.addInternalLinkListeners()}async onUrlChange({url:e,push:t=!0}){m.animatePageTransitionIn().then((()=>{window.lenis.destroy()}));this.cursor&&this.cursor.disable();const n=await window.fetch(e);if(200!==n.status)return void console.error("Handle request error.");t&&window.history.pushState({},"",e);let r=await n.text();r=this.DOMParser.parseFromString(r,"text/html");const s=(0,u.preloadImages)(r);await Promise.all([new Promise((e=>{setTimeout(e,700)})),...s]),this.currentPageInstance.$destroy(),window.scrollTo(0,0),this.replacePage(r),this.$update(),this.updateCurrentPageInstance(),this.updateNavigationColor(),this.setupInternalLinks(),this.createLenis(),this.showCurrentPage(),m.animatePageTransitionOut()}replacePage(e){const t=e.getElementById("page");this.$refs.pageContainer.replaceChildren(t)}addInternalLinkListeners(){for(const e of this.internalLinks)e.onclick=t=>{t.preventDefault(),e.href!==window.location.href&&this.onUrlChange({url:e.href})}}createLenis(){return window.lenis&&window.lenis.destroy(),window.lenis=new h.default({duration:1.2,easing:e=>1===e?1:1-Math.pow(2,-10*e),direction:"vertical",smooth:!0,smoothTouch:!1,touchMultiplier:2})}updateCurrentPageInstance(){const e=document.getElementById("page"),n=e.getAttribute("data-component");this.currentPageInstance=(0,t.default)(e,p.config.components[n])}updateNavigationColor(){const e=this.currentPageInstance.$el.classList.contains("is-dark");document.querySelector(".component-navigation").classList.toggle("of-dark-page",e)}}const[m]=c.default.$factory("Preloader"),[g]=p.$factory("App"),v=new Promise((e=>{window.addEventListener("load",e)}));Promise.all([v,m.animateIn()]).then((async()=>{await m.animateOut(),g.showCurrentPage()}))})(),(()=>{"use strict";n.r({})})(),(()=>{"use strict";var e=n("./node_modules/webpack-dev-server/node_modules/strip-ansi/index.js"),t=n("./node_modules/webpack-dev-server/client/socket.js"),r=n("./node_modules/webpack-dev-server/client/overlay.js"),s=n("./node_modules/webpack-dev-server/client/utils/log.js"),i=s.log,o=s.setLogLevel,a=n("./node_modules/webpack-dev-server/client/utils/sendMessage.js"),l=n("./node_modules/webpack-dev-server/client/utils/reloadApp.js"),u=n("./node_modules/webpack-dev-server/client/utils/createSocketUrl.js"),c={isUnloading:!1,currentHash:""},d={hot:!1,hotReload:!0,liveReload:!1,initial:!0,useWarningOverlay:!1,useErrorOverlay:!1,useProgress:!1},h=u("?http://0.0.0.0:8080");if(self.addEventListener("beforeunload",(function(){c.isUnloading=!0})),"undefined"!=typeof window){var f=window.location.search.toLowerCase();d.hotReload=-1===f.indexOf("hotreload=false")}t(h,{hot:function(){d.hot=!0,i.info("[WDS] Hot Module Replacement enabled.")},liveReload:function(){d.liveReload=!0,i.info("[WDS] Live Reloading enabled.")},invalid:function(){i.info("[WDS] App updated. Recompiling..."),(d.useWarningOverlay||d.useErrorOverlay)&&r.clear(),a("Invalid")},hash:function(e){c.currentHash=e},"still-ok":function(){i.info("[WDS] Nothing changed."),(d.useWarningOverlay||d.useErrorOverlay)&&r.clear(),a("StillOk")},"log-level":function(e){var t=n("./node_modules/webpack/hot sync ^\\.\\/log$");-1!==t.keys().indexOf("./log")&&t("./log").setLogLevel(e),o(e)},overlay:function(e){"undefined"!=typeof document&&("boolean"==typeof e?(d.useWarningOverlay=!1,d.useErrorOverlay=e):e&&(d.useWarningOverlay=e.warnings,d.useErrorOverlay=e.errors))},progress:function(e){"undefined"!=typeof document&&(d.useProgress=e)},"progress-update":function(e){d.useProgress&&i.info("[WDS] ".concat(e.percent,"% - ").concat(e.msg,".")),a("Progress",e)},ok:function(){if(a("Ok"),(d.useWarningOverlay||d.useErrorOverlay)&&r.clear(),d.initial)return d.initial=!1;l(d,c)},"content-changed":function(){i.info("[WDS] Content base changed. Reloading..."),self.location.reload()},warnings:function(t){i.warn("[WDS] Warnings while compiling.");var n=t.map((function(t){return e(t)}));a("Warnings",n);for(var s=0;s<n.length;s++)i.warn(n[s]);if(d.useWarningOverlay&&r.showMessage(t),d.initial)return d.initial=!1;l(d,c)},errors:function(t){i.error("[WDS] Errors while compiling. Reload prevented.");var n=t.map((function(t){return e(t)}));a("Errors",n);for(var s=0;s<n.length;s++)i.error(n[s]);d.useErrorOverlay&&r.showMessage(t),d.initial=!1},error:function(e){i.error(e)},close:function(){i.error("[WDS] Disconnected!"),a("Close")}})})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LFNBQVUsT0FBUSxTQUFVLFNBQVUsU0FBVSxTQUFVLFFBQVMsT0FBUSxTQUFVLFFBQVMsT0FBUSxPQUFRLE1BQU8sS0FBTSxLQUFNLFFBQVMsUUFBUyxTQUFVLFNBQVUsT0FBUSxPQUFRLFFBQVMsT0FBUSxPQUFRLFNBQVUsT0FBUSxNQUFPLE1BQU8sTUFBTyxRQUFTLFFBQVMsUUFBUyxRQUFTLFFBQVMsUUFBUyxRQUFTLFFBQVMsU0FBVSxTQUFVLFNBQVUsU0FBVSxTQUFVLE9BQVEsT0FBUSxRQUFTLE9BQVEsUUFBUyxRQUFTLFVBQVcsT0FBUSxNQUFPLFFBQVMsT0FBUSxRQUFTLFNBQVUsS0FBTSxLQUFNLEtBQU0sVUFBVyxLQUFNLE1BQU8sUUFBUyxNQUFPLFVBQVcsTUFBTyxNQUFPLE1BQU8sUUFBUyxRQUFTLE9BQVEsUUFBUyxRQUFTLFVBQVcsT0FBUSxNQUFPLFFBQVMsT0FBUSxRQUFTLFNBQVUsS0FBTSxLQUFNLEtBQU0sVUFBVyxLQUFNLE1BQU8sU0FBVSxRQUFTLE1BQU8sVUFBVyxNQUFPLE1BQU8sTUFBTyxRQUFTLFdBQVksUUFBUyxNQUFPLE9BQVEsU0FBVSxRQUFTLFFBQVMsUUFBUyxRQUFTLFNBQVUsUUFBUyxPQUFRLFFBQVMsVUFBVyxPQUFRLE9BQVEsT0FBUSxPQUFRLE9BQVEsUUFBUyxPQUFRLE9BQVEsT0FBUSxPQUFRLE9BQVEsU0FBVSxPQUFRLFFBQVMsUUFBUyxRQUFTLE9BQVEsUUFBUyxLQUFNLE9BQVEsTUFBTyxRQUFTLFNBQVUsUUFBUyxPQUFRLFFBQVMsTUFBTyxNQUFPLEtBQU0sTUFBTyxNQUFPLE1BQU8sU0FBVSxNQUFPLE9BQVEsUUFBUyxLQUFNLFFBQVMsS0FBTSxLQUFNLE1BQU8sTUFBTyxPQUFRLE9BQVEsT0FBUSxRQUFTLFNBQVUsT0FBUSxPQUFRLFFBQVMsUUFBUyxTQUFVLFNBQVUsT0FBUSxPQUFRLE1BQU8sU0FBVSxRQUFTLFNBQVUsU0FDem9FQyxFQUFhLENBQUMsR0FBSSxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxHQUFJLEdBQUksR0FBSSxHQUFJLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxL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QU8sQ0FBQyxNQUFPLENBQUMsT0FBUSxDQUFDLE1BQU8sQ0FBQyxPQUFRLENBQUMsUUFBUyxDQUFDLE1BQU8sQ0FBQyxRQUFTLENBQUMsTUFBTyxDQUFDLEtBQU0sQ0FBQyxPQUFRLENBQUMsTUFBTyxDQUFDLFNBQVUsQ0FBQyxNQUFPLENBQUMsU0FBVSxDQUFDLFNBQVUsQ0FBQyxNQUFPLENBQUMsU0FBVSxDQUFDLE1BQU8sQ0FBQyxVQUFXLENBQUMsT0FBUSxDQUFDLFFBQVMsQ0FBQyxPQUFRLENBQUMsUUFBUyxDQUFDLE1BQU8sQ0FBQyxRQUFTLENBQUMsTUFBTyxDQUFDLFFBQVMsQ0FBQyxNQUFPLENBQUMsUUFBUyxDQUFDLE1BQU8sQ0FBQyxRQUFTLENBQUMsUUFBUyxDQUFDLE1BQU8sQ0FBQyxLQUFNLENBQUMsTUFBTyxDQUFDLEtBQU0sQ0FBQyxTQUFVLENBQUMsUUFBUyxDQUFDLE1BQU8sQ0FBQyxRQUFTLENBQUMsTUFBTyxDQUFDLE9BQVEsQ0FBQyxPQUFRLENBQUMsUUFBUyxDQUFDLFdBQVksQ0FBQyxRQUFTLENBQUMsT0FBUSxDQUFDLFFBQVMsQ0FBQyxNQUFPLENBQUMsT0FBUSxDQUFDLE9BQVEsQ0FBQyxRQUFTLENBQUMsUUFBUyxDQUFDLE9BQVEsQ0FBQyxXQUFZLENBQUMsUUFBUyxDQUFDLFdBQVksQ0FBQyxRQUFTLENBQUMsV0FBWSxDQUFDLFFBQVMsQ0FBQyxXQUFZLENBQUMsUUFBUyxDQUFDLFdBQVksQ0FBQyxRQUFTLENBQUMsV0FBWSxDQUFDLFFBQVMsQ0FBQyxXQUFZLENBQUMsUUFBUyxDQUFDLFdBQVksQ0FBQyxRQUFTLENBQUMsU0FBVSxDQUFDLE9BQVEsQ0FBQyxRQUFTLENBQUMsT0FBUSxDQUFDLFVBQVcsQ0FBQyxPQUFRLENBQUMsV0FBWSxDQUFDLFFBQVMsQ0FBQyxTQUFVLENBQUMsT0FBUSxDQUFDLFFBQVMsQ0FBQyxNQUFPLENBQUMsVUFBVyxDQUFDLE9BQVEsQ0FBQyxRQUFTLENBQUMsTUFBTyxDQUFDLFFBQVMsQ0FBQyxNQUFPLENBQUMsT0FBUSxDQUFDLFNBQVUsQ0FBQyxPQUFRLENBQUMsU0FBVSxDQUFDLFNBQVUsQ0FBQyxRQUFTLENBQUMsS0FBTSxDQUFDLE9BQVEsQ0FBQyxNQUFPLENBQUMsUUFBUyxDQUFDLE1BQU8sQ0FBQyxPQUFRLENBQUMsT0FBUSxDQUFDLE9BQVEsQ0FBQyxPQUFRLENBQUMsS0FBTSxDQUFDLGdCQUFpQixDQUFDLE9BQVEsQ0FBQyxTQUFVLENBQUMsT0FBUSxDQUFDLFdBQVksQ0FBQyxPQUFRLENBQUMsUUFBUyxDQUFDLE1BQU8sQ0FBQyxRQUFTLENBQUMsTUFBTyxDQUFDLE9BQVEsQ0FBQyxTQUFVLENBQUMsT0FBUSxDQUFDLFNBQVUsQ0FBQyxTQUFVLENBQUMsT0FBUSxDQUFDLE1BQU8sQ0FBQyxLQUFNLENBQUMsUUFBUyxDQUFDLE9BQVEsQ0FBQyxVQUFXLENBQUMsT0FBUSxDQUFDLFNBQVUsQ0FBQyxNQUFPLENBQUMsU0FBVSxDQUFDLE1BQU8sQ0FBQyxPQUFRLENBQUMsTUFBTyxDQUFDLE9BQVEsQ0FBQyxNQUFPLENBQUMsV0FBWSxDQUFDLE9BQVEsQ0FBQyxRQUFTLENBQUMsUUFBUyxDQUFDLFdBQVksQ0FBQyxPQUFRLENBQUMsY0FBZSxDQUFDLE9BQVEsQ0FBQyxZQUFhLENBQUMsT0FBUSxDQUFDLFVBQVcsQ0FBQyxPQUFRLENBQUMsWUFBYSxDQUFDLE9BQVEsQ0FBQyxZQUFhLENBQUMsT0FBUSxDQUFDLE9BQVEsQ0FBQyxRQUFTLENBQUMsU0FBVSxDQUFDLE9BQVEsQ0FBQyxTQUFVLENBQUMsT0FBUSxDQUFDLFNBQVUsQ0FBQyxPQUFRLENBQUMsV0FBWSxDQUFDLE9BQVEsQ0FBQyxPQUFRLENBQUMsT0FBUSxDQUFDLFdBQVksQ0FBQyxPQUFRLENBQUMsUUFBUyxDQUFDLE9BQVEsQ0FBQyxNQUFPLENBQUMsT0FBUSxDQUFDLE1BQU8sQ0FBQyxPQUFRLENBQUMsUUFBUyxDQUFDLE9BQVEsQ0FBQyxTQUFVLENBQUMsT0FBUSxDQUFDLFVBQVcsQ0FBQyxPQUFRLENBQUMsVUFBVyxDQUFDLE9BQVEsQ0FBQyxVQUFXLENBQUMsUUFBUyxDQUFDLFFBQVMsQ0FBQyxPQUFRLENBQUMsU0FBVSxDQUFDLE9BQVEsQ0FBQyxhQUFjLENBQUMsT0FBUSxDQUFDLE9BQVEsQ0FBQyxNQUFPLENBQUMsT0FBUSxDQUFDLE1BQU8sQ0FBQyxPQUFRLENBQUMsT0FBUSxDQUFDLFVBQVcsQ0FBQyxPQUFRLENBQUMsTUFBTyxDQUFDLFNBQVUsQ0FBQyxNQUFPLENBQUMsU0FBVSxDQUFDLFNBQVUsQ0FBQyxPQUFRLENBQUMsVUFBVyxDQUFDLE9BQVEsQ0FBQyxTQUFVLENBQUMsT0FBUSxDQUFDLFVBQVcsQ0FBQyxRQUFTLENBQUMsV0FBWSxDQUFDLFFBQVMsQ0FBQyxZQUFhLENBQUMsUUFBUyxDQUFDLFdBQVksQ0FBQyxRQUFTLENBQUMsVUFBVyxDQUFDLE9BQVEsQ0FBQyxrQkFBbUIsQ0FBQyxPQUFRLENBQUMsZ0JBQWlCLENBQUMsT0FBUSxDQUFDLFdBQVksQ0FBQyxRQUFTLENBQUMsU0FBVSxDQUFDLE9BQVEsQ0FBQyxXQUFZLENBQUMsT0FBUSxDQUFDLFNBQVUsQ0FBQyxRQUFTLENBQUMsZUFBZ0IsQ0FBQyxRQUFTLENBQUMsY0FBZSxDQUFDLE9BQVEsQ0FBQyxnQkFBaUIsQ0FBQyxPQUFRLENBQUMsb0JBQXFCLENBQUMsT0FBUSxDQUFDLG9CQUFxQixDQUFDLE9BQVEsQ0FBQyxxQkFBc0IsQ0FBQyxPQUFRLENBQUMsUUFBUyxDQUFDLE9BQVEsQ0FBQyxRQUFTLENBQUMsT0FBUSxDQUFDLFFBQVMsQ0FBQyxPQUFRLENBQUMsUUFBUyxDQUFDLE9BQVEsQ0FBQyxRQUFTLENBQUMsT0FBUSxDQUFDLE1BQU8sQ0FBQyxHQUFJLE9BQVEsQ0FBQyxVQUFXLENBQUMsS0FBTSxPQUFRLENBQUMsT0FBUSxDQUFDLFFBQVMsQ0FBQyxPQUFRLENBQUMsT0FBUSxDQUFDLE9BQVEsQ0FBQyxTQUFVLENBQUMsT0FBUSxDQUFDLFNBQVUsQ0FBQyxNQUFPLENBQUMsT0FBUSxDQUFDLFNBQVUsQ0FBQyxPQUFRLENBQUMsU0FBVSxDQUFDLE9BQVEsQ0FBQyxTQUFVLENBQUMsUUFBUyxDQUFDLFFBQVMsQ0FBQyxPQUFRLENBQUMsUUFBUyxDQUFDLE9BQVEsQ0FBQyxRQUFTLENBQUMsT0FBUSxDQUFDLFFBQVMsQ0FBQyxPQUFRLENBQUMsUUFBUyxDQUFDLE9BQVEsQ0FBQyxRQUFTLENBQUMsT0FBUSxDQUFDLFFBQVMsQ0FBQyxPQUFRLENBQUMsUUFBUyxDQUFDLE9BQVEsQ0FBQyxPQUFRLENBQUMsT0FBUSxDQUFDLE9BQVEsQ0FBQyxPQUFRLENBQUMsUUFBUyxDQUFDLE9BQVEsQ0FBQyxRQUFTLENBQUMsT0FBUSxDQUFDLFFBQVMsQ0FBQyxPQUFRLENBQUMsUUFBUyxDQUFDLE9BQVEsQ0FBQyxRQUFTLENBQUMsT0FBUSxDQUFDLFFBQVMsQ0FBQyxPQUFRLENBQUMsUUFBUyxDQUFDLE9BQVEsQ0FBQyxRQUFTLENBQUMsT0FBUSxDQUFDLFdBQVksQ0FBQyxPQUFRLENBQUMsVUFBVyxDQUFDLE9BQVEsQ0FBQyxXQUFZLENBQUMsT0FBUSxDQUFDLFFBQVMsQ0FBQyxPQUFRLENBQUMsUUFBUyxDQUFDLE9BQVEsQ0FBQyxRQUFTLENBQUMsT0FBUSxDQUFDLFFBQVMsQ0FBQyxPQUFRLENBQUMsUUFBUyxDQUFDLE9BQVEsQ0FBQyxRQUFTLENBQUMsT0FBUSxDQUFDLFFBQVMsQ0FBQyxPQUFRLENBQUMsUUFBUyxDQUFDLE9BQVEsQ0FBQyxPQUFRLENBQUMsT0FBUSxDQUFDLE9BQVEsQ0FBQyxPQUFRLENBQUMsUUFBUyxDQUFDLE9BQVEsQ0FBQyxRQUFTLENBQUMsT0FBUSxDQUFDLFFBQVMsQ0FBQyxPQUFRLENBQUMsUUFBUyxDQUFDLE9BQVEsQ0FBQyxRQUFTLENBQUMsT0FBUSxDQUFDLFFBQVMsQ0FBQyxPQUFRLENBQUMsUUFBUyxDQUFDLE9BQVEsQ0FBQyxRQUFTLENBQUMsT0FBUSxDQUFDLFFBQVMsQ0FBQyxPQUFRLENBQUMsUUFBUyxDQUFDLE9BQVEsQ0FBQyxRQUFTLENBQUMsT0FBUSxDQUFDLFFBQVMsQ0FBQyxPQUFRLENBQUMsU0FBVSxDQUFDLE9BQVEsQ0FBQyxRQUFTLENBQUMsTUFBTyxDQUFDLFFBQVMsQ0FBQyxNQUFPLENBQUMsU0FBVSxDQUFDLE1BQU8sQ0FBQyxPQUFRLENBQUMsU0FBVSxDQUFDLE9BQVEsQ0FBQyxPQUFRLENBQUMsUUFBUyxDQUFDLE9BQVEsQ0FBQyxPQUFRLENBQUMsT0FBUSxDQUFDLFFBQVMsQ0FBQyxPQUFRLENBQUMsUUFBUyxDQUFDLFFBQVMsQ0FBQyxPQUFRLENBQUMsS0FBTSxDQUFDLFdBQVksQ0FBQyxRQUFTLENBQUMsT0FBUSxDQUFDLE9BQVEsQ0FBQyxTQUFVLENBQUMsT0FBUSxDQUFDLE9BQVEsQ0FBQyxPQUFRLENBQUMsUUFBUyxDQUFDLFFBQVMsQ0FBQyxRQUFTLENBQUMsT0FBUSxDQUFDLFNBQVUsQ0FBQyxPQUFRLENBQUMsU0FBVSxDQUFDLE9BQVEsQ0FBQyxTQUFVLENBQUMsTUFBTyxDQUFDLFNBQVUsQ0FBQyxNQUFPLENBQUMsU0FBVSxDQUFDLFFBQVMsQ0FBQyxXQUFZLENBQUMsUUFBUyxDQUFDLFNBQVUsQ0FBQyxRQUFTLENBQUMsTUFBTyxDQUFDLE9BQVEsQ0FBQyxNQUFPLENBQUMsT0FBUSxDQUFDLFNBQVUsQ0FBQyxRQUFTLENBQUMsU0FBVSxDQUFDLFFBQVMsQ0FBQyx1QkFBd0IsQ0FBQyxPQUFRLENBQUMsT0FBUSxDQUFDLEtBQU0sUUFBUyxDQUFDLFFBQVMsQ0FBQyxPQUFRLENBQUMsUUFBUyxDQUFDLE1BQU8sQ0FBQyxVQUFXLENBQUMsT0FBUSxDQUFDLFFBQVMsQ0FBQyxRQUFTLENBQUMsU0FBVSxDQUFDLE1BQU8sQ0FBQyxTQUFVLENBQUMsTUFBTyxDQUFDLFNBQVUsQ0FBQyxNQUFPLENBQUMsU0FBVSxDQUFDLE1BQU8sQ0FBQyxRQUFTLENBQUMsTUFBTyxDQUFDLFFBQVMsQ0FBQyxNQUFPLENBQUMsVUFBVyxDQUFDLE9BQVEsQ0FBQyxRQUFTLENBQUMsUUFBUyxDQUFDLFVBQVcsQ0FBQyxRQUFTLENBQUMsT0FBUSxDQUFDLE1BQU8sQ0FBQyxPQUFRLENBQUMsTUFBTyxDQUFDLFFBQVMsQ0FBQyxNQUFPLENBQUMsVUFBVyxDQUFDLE1BQU8sQ0FBQyxVQUFXLENBQUMsUUFBUyxDQUFDLE9BQVEsQ0FBQyxNQUFPLENBQUMsWUFBYSxDQUFDLE1BQU8sQ0FBQyxZQUFhLENBQUMsTUFBTyxDQUFDLE1BQU8sQ0FBQyxTQUFVLENBQUMsTUFBTyxDQUFDLE9BQVEsQ0FBQyxPQUFRLENBQUMsT0FBUSxDQUFDLE9BQVEsQ0FBQyxPQUFRLENBQUMsUUFBUyxDQUFDLFFBQVMsQ0FBQyxZQUFhLENBQUMsUUFBUyxDQUFDLE1BQU8sQ0FBQyxNQUFPLENBQUMsTUFBTyxDQUFDLE1BQU8sQ0FBQyxPQUFRLENBQUMsTUFBTyxDQUFDLFNBQVUsQ0FBQyxPQUFRLENBQUMsa0JBQW1CLENBQUMsT0FBUSxDQUFDLG1CQUFvQixDQUFDLE9BQVEsQ0FBQyxhQUFjLENBQUMsT0FBUSxDQUFDLGNBQWUsQ0FBQyxPQUFRLENBQUMsY0FBZSxDQUFDLE9BQVEsQ0FBQyxZQUFhLENBQUMsT0FBUSxDQUFDLFdBQVksQ0FBQyxNQUFPLENBQUMsV0FBWSxDQUFDLE9BQVEsQ0FBQyxjQUFlLENBQUMsT0FBUSxDQUFDLGFBQWMsQ0FBQyxPQUFRLENBQUMsY0FBZSxDQUFDLE9BQVEsQ0FBQyxNQUFPLENBQUMsT0FBUSxDQUFDLE9BQVEsQ0FBQyxRQUFTLENBQUMsT0FBUSxDQUFDLE9BQVEsQ0FBQyxXQUFZLENBQUMsUUFBUyxDQUFDLFNBQVUsQ0FBQyxRQUFTLENBQUMsVUFBVyxDQUFDLFFBQVMsQ0FBQywyQkFBNEIsQ0FBQyxPQUFRLENBQUMsUUFBUyxDQUFDLE9BQVEsQ0FBQyxXQUFZLENBQUMsT0FBUSxDQUFDLFFBQVMsQ0FBQyxLQUFNLENBQUMsUUFBUyxDQUFDLE9BQVEsQ0FBQyxTQUFVLENBQUMsUUFBUyxDQUFDLFNBQVUsQ0FBQyxPQUFRLENBQUMsVUFBVyxDQUFDLE9BQVEsQ0FBQyxRQUFTLENBQUMsS0FBTSxDQUFDLFNBQVUsQ0FBQyxLQUFNLENBQUMsT0FBUSxDQUFDLE9BQVEsQ0FBQyxTQUFVLENBQUMsT0FBUSxDQUFDLGFBQWMsQ0FBQyxPQUFRLENBQUMsWUFBYSxDQUFDLE9BQVEsQ0FBQyxPQUFRLENBQUMsT0FBUSxDQUFDLFVBQVcsQ0FBQyxRQUFTLENBQUMsWUFBYSxDQUFDLE9BQVEsQ0FBQyxTQUFVLENBQUMsT0FBUSxDQUFDLFNBQVUsQ0FBQyxPQUFRLENBQUMsa0JBQW1CLENBQUMsT0FBUSxDQUFDLE9BQVEsQ0FBQyxTQUFVLENBQUMsT0FBUSxDQUFDLE9BQVEsQ0FBQyxTQUFVLENBQUMsT0FBUSxDQUFDLFlBQWEsQ0FBQyxPQUFRLENBQUMsT0FBUSxDQUFDLE1BQU8sQ0FBQyxPQUFRLENBQUMsTUFBTyxDQUFDLFNBQVUsQ0FBQyxPQUFRLENBQUMsa0NBQW1DLENBQUMsT0FBUSxDQUFDLFFBQVMsQ0FBQyxPQUFRLENBQUMsUUFBUyxDQUFDLFFBQVMsQ0FBQyxRQUFTLENBQUMsUUFBUyxDQUFDLE9BQVEsQ0FBQyxTQUFVLENBQUMsT0FBUSxDQUFDLFNBQVUsQ0FBQyxPQUFRLENBQUMsUUFBUyxDQUFDLFFBQVMsQ0FBQyxRQUFTLENBQUMsT0FBUSxDQUFDLFFBQVMsQ0FBQyxRQUFTLENBQUMsUUFBUyxDQUFDLFFBQVMsQ0FBQyxPQUFRLENBQUMsVUFBVyxDQUFDLFFBQVMsQ0FBQyxVQUFXLENBQUMsUUFBUyxDQUFDLFFBQVMsQ0FBQyxPQUFRLENBQUMsUUFBUyxDQUFDLE9BQVEsQ0FBQyxTQUFVLENBQUMsT0FBUSxDQUFDLFVBQVcsQ0FBQyxRQUFTLENBQUMsV0FBWSxDQUFDLFFBQVMsQ0FBQyxTQUFVLENBQUMsUUFBUyxDQUFDLFNBQVUsQ0FBQyxPQUFRLENBQUMsTUFBTyxDQUFDLE9BQVEsQ0FBQyxNQUFPLENBQUMsT0FBUSxDQUFDLFNBQVUsQ0FBQyxRQUFTLENBQUMsU0FBVSxDQUFDLE9BQVEsQ0FBQyxRQUFTLENBQUMsUUFBUyxDQUFDLE9BQVEsQ0FBQyxLQUFNLFFBQVMsQ0FBQyxTQUFVLENBQUMsT0FBUSxDQUFDLFVBQVcsQ0FBQyxRQUFTLENBQUMsY0FBZSxDQUFDLE9BQVEsQ0FBQyxjQUFlLENBQUMsT0FBUSxDQUFDLFdBQVksQ0FBQyxPQUFRLENBQUMsYUFBYyxDQUFDLE9BQVEsQ0FBQyxTQUFVLENBQUMsTUFBTyxDQUFDLGlCQUFrQixDQUFDLE9BQVEsQ0FBQyxrQkFBbUIsQ0FBQyxPQUFRLENBQUMsUUFBUyxDQUFDLE9BQVEsQ0FBQyxRQUFTLENBQUMsT0FBUSxDQUFDLFdBQVksQ0FBQyxPQUFRLENBQUMsUUFBUyxDQUFDLE9BQVEsQ0FBQyxTQUFVLENBQUMsT0FBUSxDQUFDLFNBQVUsQ0FBQyxPQUFRLENBQUMsU0FBVSxDQUFDLE9BQVEsQ0FBQyxTQUFVLENBQUMsT0FBUSxDQUFDLE9BQVEsQ0FBQyxPQUFRLENBQUMsT0FBUSxDQUFDLE9BQVEsQ0FBQyxPQUFRLENBQUMsT0FBUSxDQUFDLE9BQVEsQ0FBQyxPQUFRLENBQUMsUUFBUyxDQUFDLFFBQVMsQ0FBQyxRQUFTLENBQUMsT0FBUSxDQUFDLFVBQVcsQ0FBQyxRQUFTLENBQUMsUUFBUyxDQUFDLE1BQU8sQ0FBQyxTQUFVLENBQUMsTUFBTyxDQUFDLFNBQVUsQ0FBQyxNQUFPLENBQUMsTUFBTyxDQUFDLE9BQVEsQ0FBQyxNQUFPLENBQUMsT0FBUSxDQUFDLFVBQVcsQ0FBQyxPQUFRLENBQUMsUUFBUyxDQUFDLE9BQVEsQ0FBQyxLQUFNLENBQUMsT0FBUSxDQUFDLEtBQU0sQ0FBQyxPQUFRLENBQUMsV0FBWSxDQUFDLFFBQVMsQ0FBQyxVQUFXLENBQUMsUUFBUyxDQUFDLE1BQU8sQ0FBQyxNQUFPLENBQUMsTUFBTyxDQUFDLE9BQVEsQ0FBQyxRQUFTLENBQUMsTUFBTyxDQUFDLFFBQVMsQ0FBQyxNQUFPLENBQUMsVUFBVyxDQUFDLFFBQVMsQ0FBQyxTQUFVLENBQUMsUUFBUyxDQUFDLE1BQU8sQ0FBQyxTQUFVLENBQUMsTUFBTyxDQUFDLFNBQVUsQ0FBQyxPQUFRLENBQUMsUUFBUyxDQUFDLFFBQVMsQ0FBQyxPQUFRLENBQUMsUUFBUyxDQUFDLE9BQVEsQ0FBQyxtQkFBb0IsQ0FBQyxNQUFPLENBQUMsaUJBQWtCLENBQUMsTUFBTyxDQUFDLHlCQUEwQixDQUFDLE1BQU8s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Q0FBQyxTQUFVLENBQUMsTUFBTyxDQUFDLFFBQVMsQ0FBQyxNQUFPLENBQUMsUUFBUyxDQUFDLE1BQU8sQ0FBQyxPQUFRLENBQUMsT0FBUSxDQUFDLFNBQVUsQ0FBQyxPQUFRLENBQUMsTUFBTyxDQUFDLE9BQVEsQ0FBQyxNQUFPLENBQUMsT0FBUSxDQUFDLFFBQVMsQ0FBQyxRQUFTLENBQUMsT0FBUSxDQUFDLE1BQU8sQ0FBQyxPQUFRLENBQUMsTUFBTyxDQUFDLE9BQVEsQ0FBQyxPQUFRLENBQUMsS0FBTSxDQUFDLE9BQVEsQ0FBQyxRQUFTLENBQUMsT0FBUSxDQUFDLE1BQU8sQ0FBQyxTQUFVLENBQUMsTUFBTyxDQUFDLFNBQVUsQ0FBQyxLQUFNLENBQUMsUUFBUyxDQUFDLFNBQVUsQ0FBQyxNQUFPLENBQUMsU0FBVSxDQUFDLE1BQU8sQ0FBQyxNQUFPLENBQUMsUUFBUyxDQUFDLFNBQVUsQ0FBQyxRQUFTLENBQUMsS0FBTSxDQUFDLFFBQVMsQ0FBQyxVQUFXLENBQUMsT0FBUSxDQUFDLFdBQVksQ0FBQyxPQUFRLENBQUMsTUFBTyxDQUFDLE9BQVEsQ0FBQyxNQUFPLENBQUMsUUFBUyxDQUFDLFNBQVUsQ0FBQyxRQUFTLENBQUMsUUFBUyxDQUFDLE1BQU8sQ0FBQyxRQUFTLENBQUMsTUFBTyxDQUFDLFFBQVMsQ0FBQyxPQUFRLENBQUMsV0FBWSxDQUFDLE9BQVEsQ0FBQyxtQkFBb0IsQ0FBQyxPQUFRLENBQUMsU0FBVSxDQUFDLE9BQVEsQ0FBQyx1QkFBd0IsQ0FBQyxPQUFRLENBQUMsU0FBVSxDQUFDLE9BQVEsQ0FBQyxTQUFVLENBQUMsT0FBUSxDQUFDLE9BQVEsQ0FBQyxPQUFRLENBQUMsTUFBTyxDQUFDLE1BQU8sQ0FBQyxNQUFPLENBQUMsTUFBTyxDQUFDLE9BQVEsQ0FBQyxPQUFRLENBQUMsUUFBUyxDQUFDLE1BQU8sQ0FBQyxRQUFTLENBQUMsTUFBTyxDQUFDLE9BQVEsQ0FBQyxTQUFVLENBQUMsT0FBUSxDQUFDLFNBQVUsQ0FBQyxPQUFRLENBQUMsT0FBUSxDQUFDLFNBQVUsQ0FBQyxRQUFTLENBQUMsUUFBUyxDQUFDLFFBQVMsQ0FBQyxPQUFRLENBQUMsTUFBTyxDQUFDLFVBQVcsQ0FBQyxNQUFPLENBQUMsVUFBVyxDQUFDLE1BQU8sQ0FBQyxRQUFTLENBQUMsT0FBUSxDQUFDLFNBQVUsQ0FBQyxPQUFRLENBQUMsVUFBVyxDQUFDLE9BQVEsQ0FBQyxRQUFTLENBQUMsT0FBUSxDQUFDLGFBQWMsQ0FBQyxRQUFTLENBQUMsY0FBZSxDQUFDLFFBQVMsQ0FBQyxRQUFTLENBQUMsUUFBUyxDQUFDLFNBQVUsQ0FBQyxLQUFNLENBQUMsYUFBYyxDQUFDLE9BQVEsQ0FBQyxTQUFVLENBQUMsT0FBUSxDQUFDLGNBQWUsQ0FBQyxPQUFRLENBQUMsUUFBUyxDQUFDLE9BQVEsQ0FBQyxVQUFXLENBQUMsUUFBUyxDQUFDLFdBQVksQ0FBQyxRQUFTLENBQUMsUUFBUyxDQUFDLFFBQVMsQ0FBQyxRQUFTLENBQUMsT0FBUSxDQUFDLE9BQVEsQ0FBQyxPQUFRLENBQUMsT0FBUSxDQUFDLE9BQVEsQ0FBQyxRQUFTLENBQUMsT0FBUSxDQUFDLE9BQVEsQ0FBQyxRQUFTLENBQUMsT0FBUSxDQUFDLE9BQVEsQ0FBQyxNQUFPLENBQUMsTUFBTyxDQUFDLE1BQU8sQ0FBQyxNQUFPLENBQUMsTUFBTyxDQUFDLE1BQU8sQ0FBQyxNQUFPLENBQUMsTUFBTyxDQUFDLE9BQVEsQ0FBQyxNQUFPLENBQUMsT0FBUSxDQUFDLE1BQU8sQ0FBQyxPQUFRLENBQUMsT0FBUSxDQUFDLE9BQVEsQ0FBQyxLQUFNLENBQUMsUUFBUyxDQUFDLE9BQVEsQ0FBQyxTQUFVLENBQUMsT0FBUSxDQUFDLGNBQWUsQ0FBQyxPQUFRLENBQUMsZUFBZ0IsQ0FBQyxPQUFRLENBQUMsZUFBZ0IsQ0FBQyxPQUFRLENBQUMsZ0JBQWlCLENBQUMsT0FBUSxDQUFDLE1BQU8sQ0FBQyxPQUFRLENBQUMsTUFBTyxDQUFDLE9BQVEsQ0FBQyxTQUFVLENBQUMsT0FBUSxDQUFDLFNBQVUsQ0FBQyxRQUFTLENBQUMsUUFBUyxDQUFDLFFBQVMsQ0FBQyxTQUFVLENBQUMsUUFBUyxDQUFDLE1BQU8sQ0FBQyxTQUFVLENBQUMsTUFBTyxDQUFDLFNBQVUsQ0FBQyxRQUFTLENBQUMsUUFBUyxDQUFDLG9CQUFxQixDQUFDLE9BQVEsQ0FBQyx3QkFBeUIsQ0FBQyxPQUFRLENBQUMsUUFBUyxDQUFDLElBQUssTUFBTyxDQUFDLE9BQVEsQ0FBQyxPQUFRLENBQUMsUUFBUyxDQUFDLFFBQVMsQ0FBQyxRQUFTLENBQUMsT0FBUSxDQUFDLE9BQVEsQ0FBQyxNQUFPLENBQUMsT0FBUSxDQUFDLFNBQVUsQ0FBQyxPQUFRLENBQUMsU0FBVSxDQUFDLFNBQVUsQ0FBQyxPQUFRLENBQUMsU0FBVSxDQUFDLE9BQVEsQ0FBQyxPQUFRLENBQUMsT0FBUSxDQUFDLFFBQVMsQ0FBQyxRQUFTLENBQUMsYUFBYyxDQUFDLE9BQVEsQ0FBQyxXQUFZLENBQUMsUUFBUyxDQUFDLFNBQVUsQ0FBQyxNQUFPLENBQUMsU0FBVSxDQUFDLE9BQVEsQ0FBQyxTQUFVLENBQUMsTUFBTyxDQUFDLFNBQVUsQ0FBQyxPQUFRLENBQUMsU0FBVSxDQUFDLE9BQVEsQ0FBQyxTQUFVLENBQUMsT0FBUSxDQUFDLFNBQVUsQ0FBQyxPQUFRLENBQUMsU0FBVSxDQUFDLE9BQVEsQ0FBQyxTQUFVLENBQUMsTUFBTyxDQUFDLFNBQVUsQ0FBQyxPQUFRLENBQUMsU0FBVSxDQUFDLE9BQVEsQ0FBQyxTQUFVLENBQUMsT0FBUSxDQUFDLFNBQVUsQ0FBQyxPQUFRLENBQUMsU0FBVSxDQUFDLE9BQVEsQ0FBQyxTQUFVLENBQUMsT0FBUSxDQUFDLFFBQVMsQ0FBQyxPQUFRLENBQUMsUUFBUyxDQUFDLE9BQVEsQ0FBQyxPQUFRLENBQUMsU0FBVSxDQUFDLE9BQVEsQ0FBQyxPQUFRLENBQUMsU0FBVSxDQUFDLE1BQU8sQ0FBQyxRQUFTLENBQUMsTUFBTyxDQUFDLFFBQVMsQ0FBQyxNQUFPLENBQUMsU0FBVSxDQUFDLE1BQU8sQ0FBQyxTQUFVLENBQUMsTUFBTyxDQUFDLE1BQU8sQ0FBQyxRQUFTLENBQUMsU0FBVSxDQUFDLE1BQU8sQ0FBQyxTQUFVLENBQUMsTUFBTyxDQUFDLFNBQVUsQ0FBQyxNQUFPLENBQUMsUUFBUyxDQUFDLE1BQU8sQ0FBQyxRQUFTLENBQUMsTUFBTyxDQUFDLE1BQU8sQ0FBQyxPQUFRLENBQUMsTUFBTyxDQUFDLE9BQVEsQ0FBQyxPQUFRLENBQUMsTUFBTyxDQUFDLE9BQVEsQ0FBQyxNQUFPLENBQUMsS0FBTSxDQUFDLE9BQVEsQ0FBQyxLQUFNLENBQUMsT0FBUSxDQUFDLE1BQU8sQ0FBQyxRQUFTLENBQUMsTUFBTyxDQUFDLE9BQVEsQ0FBQyxNQUFPLENBQUMsT0FBUSxDQUFDLE9BQVEsQ0FBQyxPQUFRLENBQUMsV0FBWSxDQUFDLFFBQVMsQ0FBQyxRQUFTLENBQUMsUUFBUyxDQUFDLE1BQU8sQ0FBQyxRQUFTLENBQUMsU0FBVSxDQUFDLFFBQVMsQ0FBQyxVQUFXLENBQUMsUUFBUyxDQUFDLFdBQVksQ0FBQyxRQUFTLENBQUMsT0FBUSxDQUFDLEtBQU0sUUFBUyxDQUFDLFNBQVUsQ0FBQyxRQUFTLENBQUMsTUFBTyxDQUFDLFNBQVUsQ0FBQyxNQUFPLENBQUMsU0FBVSxDQUFDLEtBQU0sQ0FBQyxPQUFRLENBQUMsS0FBTSxDQUFDLE9BQVEsQ0FBQyxNQUFPLENBQUMsT0FBUSxDQUFDLFFBQVMsQ0FBQyxPQUFRLENBQUMsT0FBUSxDQUFDLE9BQVEsQ0FBQyxPQUFRLENBQUMsT0FBUSxDQUFDLE1BQU8sQ0FBQyxRQUFTLENBQUMsS0FBTSxDQUFDLE9BQVEsQ0FBQyxNQUFPLENBQUMsUUFBUyxDQUFDLE1BQU8sQ0FBQyxRQUFTLENBQUMsT0FBUSxDQUFDLFFBQVMsQ0FBQyxXQUFZLENBQUMsUUFBUyxDQUFDLE1BQU8sQ0FBQyxRQUFTLENBQUMsTUFBTyxDQUFDLE9BQVEsQ0FBQyxPQUFRLENBQUMsUUFBUyxDQUFDLFFBQVMsQ0FBQyxPQUFRLENBQUMsUUFBUyxDQUFDLE9BQVEsQ0FBQyxPQUFRLENBQUMsU0FBVSxDQUFDLE9BQVEsQ0FBQyxTQUFVLENBQUMsUUFBUyxDQUFDLEtBQU0sQ0FBQyxlQUFnQixDQUFDLE9BQVEsQ0FBQyxtQkFBb0IsQ0FBQyxPQUFRLENBQUMsbUJBQW9CLENBQUMsT0FBUSxDQUFDLGlCQUFrQixDQUFDLFFBQVMsQ0FBQyxjQUFlLENBQUMsT0FBUSxDQUFDLG9CQUFxQixDQUFDLFFBQVMsQ0FBQyxlQUFnQixDQUFDLE9BQVEsQ0FBQyxPQUFRLENBQUMsU0FBVSxDQUFDLE9BQVEsQ0FBQyxPQUFRLENBQUMsT0FBUSxDQUFDLE9BQVEsQ0FBQyxRQUFTLENBQUMsUUFBUyxDQUFDLFFBQVMsQ0FBQyxRQUFTLENBQUMsT0FBUSxDQUFDLFFBQVMsQ0FBQyxRQUFTLENBQUMsUUFBUyxDQUFDLEtBQU0sQ0FBQyxLQUFNLENBQUMsS0FBTSxDQUFDLEtBQU0sQ0FBQyxLQUFNLENBQUMsT0FBUSxDQUFDLFFBQVMsQ0FBQyxPQUFRLENBQUMsU0FBVSxDQUFDLFFBQVMsQ0FBQyxVQUFXLENBQUMsUUFBUyxDQUFDLFlBQWEsQ0FBQyxRQUFTLENBQUMsU0FBVSxDQUFDLFFBQVMsQ0FBQyxTQUFVLENBQUMsT0FBUSxDQUFDLFlBQWEsQ0FBQyxPQUFRLENBQUMsYUFBYyxDQUFDLFFBQVMsQ0FBQyxVQUFXLENBQUMsT0FBUSxDQUFDLFNBQVUsQ0FBQyxPQUFRLENBQUMsWUFBYSxDQUFDLEtBQU0sUUFBUyxDQUFDLE9BQVEsQ0FBQyxLQUFNLFFBQVMsQ0FBQyxRQUFTLENBQUMsTUFBTyxDQUFDLFNBQVUsQ0FBQyxPQUFRLENBQUMsT0FBUSxDQUFDLE1BQU8sQ0FBQyxTQUFVLENBQUMsT0FBUSxDQUFDLFNBQVUsQ0FBQyxPQUFRLENBQUMsU0FBVSxDQUFDLE9BQVEsQ0FBQyxVQUFXLENBQUMsUUFBUyxDQUFDLE9BQVEsQ0FBQyxPQUFRLENBQUMsT0FBUSxDQUFDLE9BQVEsQ0FBQyxRQUFTLENBQUMsT0FBUSxDQUFDLE1BQU8sQ0FBQyxLQUFNLENBQUMsT0FBUSxDQUFDLE9BQVEsQ0FBQyxRQUFTLENBQUMsTUFBTyxDQUFDLFFBQVMsQ0FBQyxNQUFPLENBQUMsU0FBVSxDQUFDLE9BQVEsQ0FBQyxZQUFhLENBQUMsT0FBUSxDQUFDLFNBQVUsQ0FBQyxPQUFRLENBQUMsU0FBVSxDQUFDLE9BQVEsQ0FBQyxNQUFPLENBQUMsU0FBVSxDQUFDLE1BQU8sQ0FBQyxPQUFRLENBQUMsZUFBZ0IsQ0FBQyxPQUFRLENBQUMsV0FBWSxDQUFDLFFBQVMsQ0FBQyxXQUFZLENBQUMsUUFBUyxDQUFDLFFBQVMsQ0FBQyxPQUFRLENBQUMsU0FBVSxDQUFDLE9BQVEsQ0FBQyxnQkFBaUIsQ0FBQyxPQUFRLENBQUMsaUJBQWtCLENBQUMsT0FBUSxDQUFDLE9BQVEsQ0FBQyxTQUFVLENBQUMsT0FBUSxDQUFDLE9BQVEsQ0FBQyxTQUFVLENBQUMsT0FBUSxDQUFDLGlCQUFrQixDQUFDLE9BQVEsQ0FBQyxPQUFRLENBQUMsU0FBVSxDQUFDLE9BQVEsQ0FBQyxPQUFRLENBQUMsU0FBVSxDQUFDLE9BQVEsQ0FBQyxTQUFVLENBQUMsTUFBTyxDQUFDLFNBQVUsQ0FBQyxNQUFPLENBQUMsZUFBZ0IsQ0FBQyxPQUFRLENBQUMsWUFBYSxDQUFDLE9BQVEsQ0FBQyxTQUFVLENBQUMsT0FBUSxDQUFDLFNBQVUsQ0FBQyxPQUFRLENBQUMsU0FBVSxDQUFDLE1BQU8sQ0FBQyxTQUFVLENBQUMsTUFBTyxDQUFDLEtBQU0sQ0FBQyxPQUFRLENBQUMsUUFBUyxDQUFDLE1BQU8sQ0FBQyxRQUFTLENBQUMsTUFBTyxDQUFDLE1BQU8sQ0FBQyxPQUFRLENBQUMsTUFBTyxDQUFDLE9BQVEsQ0FBQyxPQUFRLENBQUMsTUFBTyxDQUFDLE9BQVEsQ0FBQyxPQUFRLENBQUMsT0FBUSxDQUFDLE9BQVEsQ0FBQyxRQUFTLENBQUMsTUFBTyxDQUFDLE1BQU8sQ0FBQyxPQUFRLENBQUMsTUFBTyxDQUFDLFNBQVUsQ0FBQyxNQUFPLENBQUMsT0FBUSxDQUFDLFNBQVUsQ0FBQyxNQUFPLENBQUMsU0FBVSxDQUFDLE1BQU8sQ0FBQyxLQUFNLENBQUMsT0FBUSxDQUFDLFNBQVUsQ0FBQyxRQUFTLENBQUMsUUFBUyxDQUFDLE9BQVEsQ0FBQyxTQUFVLENBQUMsUUFBUyxDQUFDLFFBQVMsQ0FBQyxPQUFRLENBQUMsUUFBUyxDQUFDLE1BQU8sQ0FBQyxRQUFTLENBQUMsTUFBTyxDQUFDLFFBQVMsQ0FBQyxNQUFPLENBQUMsUUFBUyxDQUFDLE1BQU8sQ0FBQyxRQUFTLENBQUMsT0FBUSxDQUFDLGFBQWMsQ0FBQyxPQUFRLENBQUMsV0FBWSxDQUFDLE9BQVEsQ0FBQyxXQUFZLENBQUMsT0FBUSxDQUFDLFFBQVMsQ0FBQyxNQUFPLENBQUMsS0FBTSxDQUFDLE9BQVEsQ0FBQyxPQUFRLENBQUMsT0FBUSxDQUFDLFFBQVMsQ0FBQyxNQUFPLENBQUMsVUFBVyxDQUFDLE9BQVEsQ0FBQyxTQUFVLENBQUMsT0FBUSxDQUFDLEtBQU0sQ0FBQyxPQUFRLENBQUMsUUFBUyxDQUFDLE9BQVEsQ0FBQyxXQUFZLENBQUMsUUFBUyxDQUFDLFNBQVUsQ0FBQyxNQUFPLENBQUMsU0FBVSxDQUFDLE9BQVEsQ0FBQyxNQUFPLENBQUMsT0FBUSxDQUFDLE1BQU8sQ0FBQyxPQUFRLENBQUMsV0FBWSxDQUFDLE9BQVEsQ0FBQyxXQUFZLENBQUMsT0FBUSxDQUFDLFdBQVksQ0FBQyxPQUFRLENBQUMsZUFBZ0IsQ0FBQyxPQUFRLENBQUMsV0FBWSxDQUFDLFFBQVMsQ0FBQyxVQUFXLENBQUMsUUFBUyxDQUFDLGlCQUFrQixDQUFDLE9BQVEsQ0FBQyxpQkFBa0IsQ0FBQyxPQUFRLENBQUMsT0FBUSxDQUFDLE9BQVEsQ0FBQyxPQUFRLENBQUMsT0FBUSxDQUFDLFFBQVMsQ0FBQyxNQUFPLENBQUMsUUFBUyxDQUFDLE1BQU8sQ0FBQyxPQUFRLENBQUMsU0FBVSxDQUFDLE9BQVEsQ0FBQyxTQUFVLENBQUMsT0FBUSxDQUFDLE1BQU8sQ0FBQyxPQUFRLENBQUMsTUFBTyxDQUFDLFFBQVMsQ0FBQyxRQUFTLENBQUMsU0FBVSxDQUFDLE1BQU8sQ0FBQyxPQUFRLENBQUMsU0FBVSxDQUFDLE9BQVEsQ0FBQyxPQUFRLENBQUMsT0FBUSxDQUFDLE9BQVEsQ0FBQyxVQUFXLENBQUMsT0FBUSxDQUFDLFFBQVMsQ0FBQyxPQUFRLENBQUMsUUFBUyxDQUFDLE9BQVEsQ0FBQyxTQUFVLENBQUMsT0FBUSxDQUFDLFFBQVMsQ0FBQyxPQUFRLENBQUMsS0FBTSxDQUFDLE9BQVEsQ0FBQyxTQUFVLENBQUMsTUFBTyxDQUFDLFNBQVUsQ0FBQyxNQUFPLENBQUMsUUFBUyxDQUFDLE9BQVEsQ0FBQyxRQUFTLENBQUMsT0FBUSxDQUFDLE9BQVEsQ0FBQyxNQUFPLENBQUMsT0FBUSxDQUFDLE1BQU8sQ0FBQyxRQUFTLENBQUMsTUFBTyxDQUFDLFFBQVMsQ0FBQyxNQUFPLENBQUMsTUFBTyxDQUFDLE9BQVEsQ0FBQyxNQUFPLENBQUMsT0FBUSxDQUFDLE1BQU8sQ0FBQyxTQUFVLENBQUMsTUFBTyxDQUFDLFNBQVUsQ0FBQyxRQUFTLENBQUMsTUFBTyxDQUFDLE9BQVEsQ0FBQyxTQUFVLENBQUMsT0FBUSxDQUFDLFNBQVUsQ0FBQyxPQUFRLENBQUMsU0FBVSxDQUFDLE9BQVEsQ0FBQyxTQUFVLENBQUMsU0FBVSxDQUFDLE9BQVEsQ0FBQyxTQUFVLENBQUMsT0FBUSxDQUFDLFFBQVMsQ0FBQyxPQUFRLENBQUMsUUFBUyxDQUFDLE9BQVEsQ0FBQyxRQUFTLENBQUMsTUFBTyxDQUFDLFFBQVMsQ0FBQyxNQUFPLENBQUMsU0FBVSxDQUFDLE9BQVEsQ0FBQyxTQUFVLENBQUMsTUFBTyxDQUFDLFNBQVUsQ0FBQyxNQUFPLENBQUMsTUFBTyxDQUFDLE9BQVEsQ0FBQyxNQUFPLENBQUMsT0FBUSxDQUFDLE1BQU8sQ0FBQyxTQUFVLENBQUMsTUFBTyxDQUFDLFNBQVUsQ0FBQyxTQUFVLENBQUMsTUFBTyxDQUFDLE9BQVEsQ0FBQyxPQUFRLENBQUMsT0FBUSxDQUFDLE9BQVEsQ0FBQyxPQUFRLENBQUMsT0FBUSxDQUFDLE9BQVEsQ0FBQyxPQUFRLENBQUMsT0FBUSxDQUFDLFNBQVUsQ0FBQyxPQUFRLENBQUMsU0FBVSxDQUFDLE9BQVEsQ0FBQyxTQUFVLENBQUMsT0FBUSxDQUFDLE9BQVUsQ0FBQyxRQUFTLENBQUMsT0FBUSxDQUFDLFNBQVUsQ0FBQyxNQUFPLENBQUMsU0FBVSxDQUFDLE1BQU8sQ0FBQyxXQUFZLENBQUMsUUFBUyxDQUFDLFNBQVUsQ0FBQyxPQUFRLENBQUMsU0FBVSxDQUFDLE1BQU8sQ0FBQyxTQUFVLENBQUMsTUFBTyxDQUFDLE9BQVEsQ0FBQyxRQUFTLENBQUMsT0FBUSxDQUFDLFFBQVMsQ0FBQyxRQUFTLENBQUMsUUFBUyxDQUFDLFNBQVUsQ0FBQyxRQUFTLENBQUMsTUFBTyxDQUFDLFFBQVMsQ0FBQyxhQUFjLENBQUMsT0FBUSxDQUFDLFFBQVMsQ0FBQyxNQUFPLENBQUMsUUFBUyxDQUFDLE9BQVEsQ0FBQyxVQUFXLENBQUMsUUFBUyxDQUFDLE9BQVEsQ0FBQyxPQUFRLENBQUMsT0FBUSxDQUFDLE9BQVEsQ0FBQyxPQUFRLENBQUMsT0FBUSxDQUFDLFNBQVUsQ0FBQyxRQUFTLENBQUMsU0FBVSxDQUFDLE9BQVEsQ0FBQyxTQUFVLENBQUMsT0FBUSxDQUFDLFNBQVUsQ0FBQyxRQUFTLENBQUMsVUFBVyxDQUFDLFFBQVMsQ0FBQyxTQUFVLENBQUMsT0FBUSxDQUFDLFNBQVUsQ0FBQyxRQUFTLENBQUMsU0FBVSxDQUFDLFFBQVMsQ0FBQyxNQUFPLENBQUMsUUFBUyxDQUFDLE9BQVEsQ0FBQyxRQUFTLENBQUMsUUFBUyxDQUFDLE1BQU8sUUFBUyxDQUFDLFFBQVMsQ0FBQyxRQUFTLENBQUMsUUFBUyxDQUFDLFFBQVMsQ0FBQyxRQUFTLENBQUMsUUFBUyxDQUFDLFNBQVUsQ0FBQyxNQUFPLENBQUMsU0FBVSxDQUFDLEtBQU0sQ0FBQyxRQUFTLENBQUMsUUFBUyxDQUFDLFVBQVcsQ0FBQyxRQUFTLENBQUMsVUFBVyxDQUFDLFFBQVMsQ0FBQyxTQUFVLENBQUMsTUFBTyxDQUFDLFNBQVUsQ0FBQyxNQUFPLENBQUMsU0FBVSxDQUFDLE1BQU8sQ0FBQyxTQUFVLENBQUMsTUFBTyxDQUFDLFFBQVMsQ0FBQyxPQUFRLENBQUMsT0FBUSxDQUFDLE1BQU8sQ0FBQyxNQUFPLENBQUMsT0FBUSxDQUFDLE1BQU8sQ0FBQyxPQUFRLENBQUMsT0FBUSxDQUFDLFFBQVMsQ0FBQyxRQUFTLENBQUMsT0FBUSxDQUFDLFNBQVUsQ0FBQyxPQUFRLENBQUMsVUFBVyxDQUFDLFFBQVMsQ0FBQyxXQUFZLENBQUMsUUFBUyxDQUFDLE9BQVEsQ0FBQyxPQUFRLENBQUMsS0FBTSxDQUFDLE9BQVEsQ0FBQyxLQUFNLENBQUMsT0FBUSxDQUFDLG1CQUFvQixDQUFDLFFBQVMsQ0FBQyxlQUFnQixDQUFDLE9BQVEsQ0FBQyxZQUFhLENBQUMsT0FBUSxDQUFDLFlBQWEsQ0FBQyxPQUFRLENBQUMsWUFBYSxDQUFDLE9BQVEsQ0FBQyxzQkFBdUIsQ0FBQyxPQUFRLENBQUMsZ0JBQWlCLENBQUMsT0FBUSxDQUFDLGNBQWUsQ0FBQyxPQUFRLENBQUMsb0JBQXFCLENBQUMsUUFBUyxDQUFDLG9CQUFxQixDQUFDLFFBQVMsQ0FBQyxvQkFBcUIsQ0FBQyxRQUFTLENBQUMsaUJBQWtCLENBQUMsT0FBUSxDQUFDLFlBQWEsQ0FBQyxPQUFRLENBQUMsa0JBQW1CLENBQUMsT0FBUSxDQUFDLGdCQUFpQixDQUFDLE9BQVEsQ0FBQyxpQkFBa0IsQ0FBQyxPQUFRLENBQUMsaUJBQWtCLENBQUMsT0FBUSxDQUFDLGlCQUFrQixDQUFDLE9BQVEsQ0FBQyxpQkFBa0IsQ0FBQyxPQUFRLENBQUMsa0JBQW1CLENBQUMsT0FBUSxDQUFDLG9CQUFxQixDQUFDLE9BQVEsQ0FBQyxzQkFBdUIsQ0FBQyxPQUFRLENBQUMsa0JBQW1CLENBQUMsUUFBUyxDQUFDLGVBQWdCLENBQUMsT0FBUSxDQUFDLFVBQVcsQ0FBQyxPQUFRLENBQUMsZ0JBQWlCLENBQUMsUUFBUyxDQUFDLGlCQUFrQixDQUFDLE9BQVEsQ0FBQyxrQkFBbUIsQ0FBQyxRQUFTLENBQUMsZUFBZ0IsQ0FBQyxPQUFRLENBQUMsb0JBQXFCLENBQUMsT0FBUSxDQUFDLG1CQUFvQixDQUFDLFFBQVMsQ0FBQyxrQkFBbUIsQ0FBQyxRQUFTLENBQUMsa0JBQW1CLENBQUMsUUFBUyxDQUFDLGVBQWdCLENBQUMsT0FBUSxDQUFDLGdCQUFpQixDQUFDLFFBQVMsQ0FBQyxhQUFjLENBQUMsT0FBUSxDQUFDLE1BQU8sQ0FBQyxRQUFTLENBQUMsTUFBTyxDQUFDLE9BQVEsQ0FBQyxNQUFPLENBQUMsT0FBUSxDQUFDLE9BQVEsQ0FBQyxPQUFRLENBQUMsV0FBWSxDQUFDLFFBQVMsQ0FBQyxRQUFTLENBQUMsUUFBUyxDQUFDLE1BQU8sQ0FBQyxRQUFTLENBQUMsU0FBVSxDQUFDLFFBQVMsQ0FBQyxVQUFXLENBQUMsUUFBUyxDQUFDLFdBQVksQ0FBQyxRQUFTLENBQUMsT0FBUSxDQUFDLEtBQU0sUUFBUyxDQUFDLFNBQVUsQ0FBQyxRQUFTLENBQUMsYUFBYyxDQUFDLFFBQVMsQ0FBQyxVQUFXLENBQUMsT0FBUSxDQUFDLFlBQWEsQ0FBQyxPQUFRLENBQUMsYUFBYyxDQUFDLFFBQVMsQ0FBQyxtQkFBb0IsQ0FBQyxPQUFRLENBQUMsZ0JBQWlCLENBQUMsT0FBUSxDQUFDLGNBQWUsQ0FBQyxPQUFRLENBQUMsVUFBVyxDQUFDLE9BQVEsQ0FBQyxXQUFZLENBQUMsUUFBUyxDQUFDLFVBQVcsQ0FBQyxPQUFRLENBQUMsaUJBQWtCLENBQUMsUUFBUyxDQUFDLFlBQWEsQ0FBQyxPQUFRLENBQUMsU0FBVSxDQUFDLFFBQVMsQ0FBQyxTQUFVLENBQUMsT0FBUSxDQUFDLE1BQU8sQ0FBQyxTQUFVLENBQUMsTUFBTyxDQUFDLFNBQVUsQ0FBQyxLQUFNLENBQUMsT0FBUSxDQUFDLE1BQU8sQ0FBQyxRQUFTLENBQUMsT0FBUSxDQUFDLFFBQVMsQ0FBQyxRQUFTLENBQUMsT0FBUSxDQUFDLFFBQVMsQ0FBQyxPQUFRLENBQUMsU0FBVSxDQUFDLFFBQVMsQ0FBQyxRQUFTLENBQUMsT0FBUSxDQUFDLE9BQVEsQ0FBQyxPQUFRLENBQUMsT0FBUSxDQUFDLE9BQVEsQ0FBQyxRQUFTLENBQUMsT0FBUSxDQUFDLEtBQU0sQ0FBQyxPQUFRLENBQUMsS0FBTSxDQUFDLE9BQVEsQ0FBQyxXQUFZLENBQUMsT0FBUSxDQUFDLGFBQWMsQ0FBQyxPQUFRLENBQUMsU0FBVSxDQUFDLFFBQVMsQ0FBQyxRQUFTLENBQUMsT0FBUSxDQUFDLFNBQVUsQ0FBQyxNQUFPLENBQUMsU0FBVSxDQUFDLE1BQU8sQ0FBQyxhQUFjLENBQUMsT0FBUSxDQUFDLFNBQVUsQ0FBQyxPQUFRLENBQUMsT0FBUSxDQUFDLFFBQVMsQ0FBQyxXQUFZLENBQUMsUUFBUyxDQUFDLE1BQU8sQ0FBQyxRQUFTLENBQUMsTUFBTyxDQUFDLE9BQVEsQ0FBQyxPQUFRLENBQUMsUUFBUyxDQUFDLFFBQVMsQ0FBQyxPQUFRLENBQUMsUUFBUyxDQUFDLE9BQVEsQ0FBQyxRQUFTLENBQUMsUUFBUyxDQUFDLFFBQVMsQ0FBQyxPQUFRLENBQUMsUUFBUyxDQUFDLFFBQVMsQ0FBQyxnQkFBaUIsQ0FBQyxRQUFTLENBQUMsZ0JBQWlCLENBQUMsUUFBUyxDQUFDLGdCQUFpQixDQUFDLFFBQVMsQ0FBQyxxQkFBc0IsQ0FBQyxRQUFTLENBQUMscUJBQXNCLENBQUMsUUFBUyxDQUFDLHFCQUFzQixDQUFDLFFBQVMsQ0FBQyxhQUFjLENBQUMsUUFBUyxDQUFDLGlCQUFrQixDQUFDLFFBQVMsQ0FBQyxpQkFBa0IsQ0FBQyxRQUFTLENBQUMsaUJBQWtCLENBQUMsUUFBUyxDQUFDLGdCQUFpQixDQUFDLE9BQVEsQ0FBQyxpQkFBa0IsQ0FBQyxPQUFRLENBQUMsUUFBUyxDQUFDLFFBQVMsQ0FBQyxPQUFRLENBQUMsU0FBVSxDQUFDLE9BQVEsQ0FBQyxTQUFVLENBQUMsU0FBVSxDQUFDLFFBQVMsQ0FBQyxVQUFXLENBQUMsUUFBUyxDQUFDLFNBQVUsQ0FBQyxPQUFRLENBQUMsU0FBVSxDQUFDLEtBQU0sQ0FBQyxpQkFBa0IsQ0FBQyxPQUFRLENBQUMsa0JBQW1CLENBQUMsT0FBUSxDQUFDLE1BQU8sQ0FBQyxPQUFRLENBQUMsVUFBVyxDQUFDLE9BQVEsQ0FBQyxPQUFRLENBQUMsUUFBUyxDQUFDLE9BQVEsQ0FBQyxLQUFNLENBQUMsU0FBVSxDQUFDLFFBQVMsQ0FBQyxRQUFTLENBQUMsT0FBUSxDQUFDLFdBQVksQ0FBQyxPQUFRLENBQUMsUUFBUyxDQUFDLE9BQVEsQ0FBQyxTQUFVLENBQUMsUUFBUyxDQUFDLE1BQU8sQ0FBQyxPQUFRLENBQUMsUUFBUyxDQUFDLE9BQVEsQ0FBQyxTQUFVLENBQUMsT0FBUSxDQUFDLE9BQVEsQ0FBQyxTQUFVLENBQUMsT0FBUSxDQUFDLE9BQVEsQ0FBQyxNQUFPLENBQUMsT0FBUSxDQUFDLE1BQU8sQ0FBQyxPQUFRLENBQUMsT0FBUSxDQUFDLE9BQVEsQ0FBQyxRQUFTLENBQUMsUUFBUyxDQUFDLFFBQVMsQ0FBQyxRQUFTLENBQUMsT0FBUSxDQUFDLEtBQU0sQ0FBQyxRQUFTLENBQUMsT0FBUSxDQUFDLFNBQVUsQ0FBQyxPQUFRLENBQUMsU0FBVSxDQUFDLE1BQU8sQ0FBQyxTQUFVLENBQUMsTUFBTyxDQUFDLE9BQVEsQ0FBQyxRQUFTLENBQUMsUUFBUyxDQUFDLFFBQVMsQ0FBQyxLQUFNLENBQUMsS0FBTSxDQUFDLEtBQU0sQ0FBQyxLQUFNLENBQUMsS0FBTSxDQUFDLE9BQVEsQ0FBQyxRQUFTLENBQUMsT0FBUSxDQUFDLFNBQVUsQ0FBQyxPQUFRLENBQUMsU0FBVSxDQUFDLE9BQVEsQ0FBQyxTQUFVLENBQUMsUUFBUyxDQUFDLFVBQVcsQ0FBQyxRQUFTLENBQUMsT0FBUSxDQUFDLE9BQVEsQ0FBQyxRQUFTLENBQUMsT0FBUSxDQUFDLFFBQVMsQ0FBQyxPQUFRLENBQUMsU0FBVSxDQUFDLFFBQVMsQ0FBQyxXQUFZLENBQUMsUUFBUyxDQUFDLFVBQVcsQ0FBQyxRQUFTLENBQUMsWUFBYSxDQUFDLEtBQU0sUUFBUyxDQUFDLE9BQVEsQ0FBQyxLQUFNLFFBQVMsQ0FBQyxPQUFRLENBQUMsTUFBTyxDQUFDLE9BQVEsQ0FBQyxPQUFRLENBQUMsT0FBUSxDQUFDLFFBQVMsQ0FBQyxVQUFXLENBQUMsUUFBUyxDQUFDLE1BQU8sQ0FBQyxRQUFTLENBQUMsTUFBTyxDQUFDLE9BQVEsQ0FBQyxTQUFVLENBQUMsT0FBUSxDQUFDLGFBQWMsQ0FBQyxPQUFRLENBQUMsYUFBYyxDQUFDLE9BQVEsQ0FBQyxXQUFZLENBQUMsT0FBUSxDQUFDLFNBQVUsQ0FBQyxPQUFRLENBQUMsU0FBVSxDQUFDLFFBQVMsQ0FBQyxNQUFPLENBQUMsT0FBUSxDQUFDLE1BQU8sQ0FBQyxPQUFRLENBQUMsUUFBUyxDQUFDLE9BQVEsQ0FBQyxRQUFTLENBQUMsT0FBUSxDQUFDLGdCQUFpQixDQUFDLE9BQVEsQ0FBQyxjQUFlLENBQUMsT0FBUSxDQUFDLFlBQWEsQ0FBQyxPQUFRLENBQUMsTUFBTyxDQUFDLFNBQVUsQ0FBQyxNQUFPLENBQUMsU0FBVSxDQUFDLE1BQU8sQ0FBQyxPQUFRLENBQUMsUUFBUyxDQUFDLE1BQU8sQ0FBQyxTQUFVLENBQUMsS0FBTSxDQUFDLFNBQVUsQ0FBQyxRQUFTLENBQUMsTUFBTyxDQUFDLE9BQVEsQ0FBQyxTQUFVLENBQUMsTUFBTyxDQUFDLFNBQVUsQ0FBQyxPQUFRLENBQUMsUUFBUyxDQUFDLE9BQVEsQ0FBQyxTQUFVLENBQUMsT0FBUSxDQUFDLFVBQVcsQ0FBQyxRQUFTLENBQUMsWUFBYSxDQUFDLE9BQVEsQ0FBQyxPQUFRLENBQUMsUUFBUyxDQUFDLE9BQVEsQ0FBQyxPQUFRLENBQUMsU0FBVSxDQUFDLE9BQVEsQ0FBQyxTQUFVLENBQUMsT0FBUSxDQUFDLE9BQVEsQ0FBQyxTQUFVLENBQUMsT0FBUSxDQUFDLFNBQVUsQ0FBQyxLQUFNLENBQUMsT0FBUSxDQUFDLE9BQVEsQ0FBQyxTQUFVLENBQUMsT0FBUSxDQUFDLE9BQVEsQ0FBQyxTQUFVLENBQUMsT0FBUSxDQUFDLEtBQU0sQ0FBQyxNQUFPLENBQUMsS0FBTSxDQUFDLE1BQU8sQ0FBQyxXQUFZLENBQUMsT0FBUSxDQUFDLFFBQVMsQ0FBQyxPQUFRLENBQUMsUUFBUyxDQUFDLE9BQVEsQ0FBQyxTQUFVLENBQUMsTUFBTyxDQUFDLFNBQVUsQ0FBQyxNQUFPLENBQUMsT0FBUSxDQUFDLEtBQU0sT0FBUSxDQUFDLE1BQU8sQ0FBQyxPQUFRLENBQUMsT0FBUSxDQUFDLE1BQU8sTUFBTyxDQUFDLFFBQVMsQ0FBQyxLQUFNLE1BQU8sQ0FBQyxRQUFTLENBQUMsTUFBTyxDQUFDLFVBQVcsQ0FBQyxPQUFRLENBQUMsVUFBVyxDQUFDLE9BQVEsQ0FBQyxXQUFZLENBQUMsT0FBUSxDQUFDLFFBQVMsQ0FBQyxPQUFRLENBQUMsT0FBUSxDQUFDLE1BQU8sQ0FBQyxRQUFTLENBQUMsS0FBTSxNQUFPLENBQUMsU0FBVSxDQUFDLEtBQU0sTUFBTyxDQUFDLE9BQVEsQ0FBQyxRQUFTLENBQUMsU0FBVSxDQUFDLE1BQU8sQ0FBQyxTQUFVLENBQUMsTUFBTyxDQUFDLFNBQVUsQ0FBQyxNQUFPLENBQUMsU0FBVSxDQUFDLE1BQU8sQ0FBQyxRQUFTLENBQUMsT0FBUSxDQUFDLFdBQVksQ0FBQyxNQUFPLE1BQU8sQ0FBQyxPQUFRLENBQUMsUUFBUyxDQUFDLE1BQU8sQ0FBQyxPQUFRLENBQUMsTUFBTyxDQUFDLE9BQVEsQ0FBQyxRQUFTLENBQUMsT0FBUSxDQUFDLFNBQVUsQ0FBQyxRQUFTLENBQUMsUUFBUyxDQUFDLE9BQVEsQ0FBQyxRQUFTLENBQUMsT0FBUSxDQUFDLFVBQVcsQ0FBQyxPQUFRLENBQUMsS0FBTSxDQUFDLE9BQVEsQ0FBQyxRQUFTLENBQUMsS0FBTSxNQUFPLENBQUMsc0JBQXVCLENBQUMsT0FBUSxDQUFDLHFCQUFzQixDQUFDLE9BQVEsQ0FBQyxvQkFBcUIsQ0FBQyxPQUFRLENBQUMsd0JBQXlCLENBQUMsT0FBUSxDQUFDLFNBQVUsQ0FBQyxPQUFRLENBQUMsU0FBVSxDQUFDLFFBQVMsQ0FBQyxRQUFTLENBQUMsS0FBTSxNQUFPLENBQUMsdUJBQXdCLENBQUMsT0FBUSxDQUFDLGlCQUFrQixDQUFDLE9BQVEsQ0FBQyxTQUFVLENBQUMsT0FBUSxDQUFDLFVBQVcsQ0FBQyxPQUFRLENBQUMsTUFBTyxDQUFDLFNBQVUsQ0FBQyxNQUFPLENBQUMsU0FBVSxDQUFDLE1BQU8sQ0FBQyxLQUFNLE1BQU8sQ0FBQyxNQUFPLENBQUMsT0FBUSxDQUFDLE9BQVEsQ0FBQyxPQUFRLENBQUMsUUFBUyxDQUFDLEtBQU0sTUFBTyxDQUFDLFlBQWEsQ0FBQyxNQUFPLE1BQU8sQ0FBQyxPQUFRLENBQUMsTUFBTyxNQUFPLENBQUMsTUFBTyxDQUFDLEtBQU0sTUFBTyxDQUFDLFFBQVMsQ0FBQyxPQUFRLENBQUMsTUFBTyxDQUFDLEtBQU0sT0FBUSxDQUFDLE1BQU8sQ0FBQyxPQUFRLENBQUMsT0FBUSxDQUFDLE9BQVEsQ0FBQyxPQUFRLENBQUMsS0FBTSxNQUFPLENBQUMsUUFBUyxDQUFDLE9BQVEsQ0FBQyxRQUFTLENBQUMsT0FBUSxDQUFDLFFBQVMsQ0FBQyxRQUFTLENBQUMsS0FBTSxDQUFDLE9BQVEsQ0FBQyxNQUFPLENBQUMsT0FBUSxDQUFDLE9BQVEsQ0FBQyxPQUFRLENBQUMsTUFBTyxDQUFDLE9BQVEsQ0FBQyxPQUFRLENBQUMsT0FBUSxDQUFDLE9BQVEsQ0FBQyxPQUFRLENBQUMsUUFBUyxDQUFDLE9BQVEsQ0FBQyxRQUFTLENBQUMsT0FBUSxDQUFDLE9BQVEsQ0FBQyxPQUFRLENBQUMsTUFBTyxDQUFDLEtBQU0sTUFBTyxDQUFDLE1BQU8sQ0FBQyxPQUFRLENBQUMsYUFBYyxDQUFDLE9BQVEsQ0FBQyxhQUFjLENBQUMsT0FBUSxDQUFDLGtCQUFtQixDQUFDLE9BQVEsQ0FBQyxrQkFBbUIsQ0FBQyxPQUFRLENBQUMsT0FBUSxDQUFDLE9BQVEsQ0FBQyxRQUFTLENBQUMsS0FBTSxNQUFPLENBQUMsWUFBYSxDQUFDLE1BQU8sTUFBTyxDQUFDLE9BQVEsQ0FBQyxNQUFPLE1BQU8sQ0FBQyxRQUFTLENBQUMsT0FBUSxDQUFDLE1BQU8sQ0FBQyxLQUFNLE1BQU8sQ0FBQyxRQUFTLENBQUMsT0FBUSxDQUFDLE1BQU8sQ0FBQyxLQUFNLE9BQVEsQ0FBQyxNQUFPLENBQUMsT0FBUSxDQUFDLFFBQVMsQ0FBQyxPQUFRLENBQUMsU0FBVSxDQUFDLE9BQVEsQ0FBQyxPQUFRLENBQUMsS0FBTSxNQUFPLENBQUMsT0FBUSxDQUFDLE9BQVEsQ0FBQyxVQUFXLENBQUMsT0FBUSxDQUFDLG1CQUFvQixDQUFDLE1BQU8sQ0FBQyxPQUFRLENBQUMsU0FBVSxDQUFDLE9BQVEsQ0FBQyxPQUFRLENBQUMsTUFBTyxDQUFDLFFBQVMsQ0FBQyxNQUFP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Q0FBQyxNQUFPLENBQUMsT0FBUSxDQUFDLFNBQVUsQ0FBQyxPQUFRLENBQUMsT0FBUSxDQUFDLE1BQU8sTUFBTyxDQUFDLE9BQVEsQ0FBQyxTQUFVLENBQUMsT0FBUSxDQUFDLFNBQVUsQ0FBQyxZQUFhLENBQUMsT0FBUSxDQUFDLGlCQUFrQixDQUFDLE9BQVEsQ0FBQyxPQUFRLENBQUMsT0FBUSxDQUFDLFFBQVMsQ0FBQyxPQUFRLENBQUMsU0FBVSxDQUFDLE9BQVEsQ0FBQyxRQUFTLENBQUMsT0FBUSxDQUFDLFFBQVMsQ0FBQyxPQUFRLENBQUMsVUFBVyxDQUFDLE9BQVEsQ0FBQyxVQUFXLENBQUMsT0FBUSxDQUFDLE9BQVEsQ0FBQyxPQUFRLENBQUMsUUFBUyxDQUFDLE1BQU8sTUFBTyxDQUFDLFFBQVMsQ0FBQyxPQUFRLENBQUMsVUFBVyxDQUFDLEtBQU0sT0FBUSxDQUFDLFlBQWEsQ0FBQyxPQUFRLENBQUMsYUFBYyxDQUFDLE1BQU8sTUFBTyxDQUFDLFFBQVMsQ0FBQyxPQUFRLENBQUMsVUFBVyxDQUFDLE1BQU8sTUFBTyxDQUFDLE9BQVEsQ0FBQyxPQUFRLENBQUMsUUFBUyxDQUFDLE1BQU8sTUFBTyxDQUFDLFFBQVMsQ0FBQyxPQUFRLENBQUMsVUFBVyxDQUFDLEtBQU0sT0FBUSxDQUFDLFlBQWEsQ0FBQyxPQUFRLENBQUMsYUFBYyxDQUFDLE1BQU8sTUFBTyxDQUFDLE9BQVEsQ0FBQyxPQUFRLENBQUMsU0FBVSxDQUFDLE1BQU8sQ0FBQyxTQUFVLENBQUMsTUFBTyxDQUFDLE9BQVEsQ0FBQyxPQUFRLENBQUMsZ0JBQWlCLENBQUMsT0FBUSxDQUFDLGtCQUFtQixDQUFDLE9BQVEsQ0FBQyxpQkFBa0IsQ0FBQyxPQUFRLENBQUMsbUJBQW9CLENBQUMsT0FBUSxDQUFDLEtBQU0sQ0FBQyxNQUFPLENBQUMsS0FBTSxDQUFDLE1BQU8sQ0FBQyxNQUFPLENBQUMsS0FBTSxDQUFDLFNBQVUsQ0FBQyxPQUFRLENBQUMsUUFBUyxDQUFDLE9BQVEsQ0FBQyxPQUFRLENBQUMsS0FBTSxPQUFRLENBQUMsU0FBVSxDQUFDLE9BQVEsQ0FBQyxTQUFVLENBQUMsT0FBUSxDQUFDLFNBQVUsQ0FBQyxPQUFRLENBQUMsU0FBVSxDQUFDLE9BQVEsQ0FBQyxPQUFRLENBQUMsS0FBTSxPQUFRLENBQUMsT0FBUSxDQUFDLEdBQUksT0FBUSxDQUFDLFNBQVUsQ0FBQyxRQUFTLENBQUMsVUFBVyxDQUFDLFFBQVMsQ0FBQyxTQUFVLENBQUMsUUFBUyxDQUFDLE9BQVEsQ0FBQyxLQUFNLE9BQVEsQ0FBQyxPQUFRLENBQUMsR0FBSSxPQUFRLENBQUMsVUFBVyxDQUFDLEtBQU0sT0FBUSxDQUFDLFNBQVUsQ0FBQyxRQUFTLENBQUMsVUFBVyxDQUFDLEtBQU0sT0FBUSxDQUFDLFFBQVMsQ0FBQyxLQUFNLE9BQVEsQ0FBQyxTQUFVLENBQUMsUUFBUyxDQUFDLFFBQVMsQ0FBQyxPQUFRLENBQUMsUUFBUyxDQUFDLE9BQVEsQ0FBQyxVQUFXLENBQUMsT0FBUSxDQUFDLFNBQVUsQ0FBQyxRQUFTLENBQUMsU0FBVSxDQUFDLE1BQU8sQ0FBQyxTQUFVLENBQUMsTUFBTyxDQUFDLE9BQVEsQ0FBQyxPQUFRLENBQUMsUUFBUyxDQUFDLE1BQU8sQ0FBQyxRQUFTLENBQUMsTUFBTyxDQUFDLE9BQVEsQ0FBQyxPQUFRLENBQUMsTUFBTyxDQUFDLE9BQVEsQ0FBQyxNQUFPLENBQUMsT0FBUSxDQUFDLFFBQVMsQ0FBQyxPQUFRLENBQUMsU0FBVSxDQUFDLE1BQU8sQ0FBQyxTQUFVLENBQUMsTUFBTyxDQUFDLE9BQVEsQ0FBQyxRQUFTLENBQUMsT0FBUSxDQUFDLE9BQVEsQ0FBQyxTQUFVLENBQUMsUUFBUyxDQUFDLFFBQVMsQ0FBQyxNQUFPLENBQUMsUUFBUyxDQUFDLE1BQU8sQ0FBQyxRQUFTLENBQUMsUUFBUyxDQUFDLE1BQU8sQ0FBQyxTQUFVLENBQUMsTUFBTyxDQUFDLFNBQVUsQ0FBQyxPQUFRLENBQUMsTUFBTyxDQUFDLFNBQVUsQ0FBQyxNQUFPLENBQUMsU0FBVSxDQUFDLE1BQU8sQ0FBQyxNQUFPLENBQUMsUUFBUyxDQUFDLFFBQVMsQ0FBQyxRQUFTLENBQUMsTUFBTyxDQUFDLE1BQU8sQ0FBQyxPQUFRLENBQUMsT0FBUSxDQUFDLFFBQVMsQ0FBQyxPQUFRLENBQUMsUUFBUyxDQUFDLFFBQVMsQ0FBQyxVQUFXLENBQUMsUUFBUyxDQUFDLFFBQVMsQ0FBQyxPQUFRLENBQUMsTUFBTyxDQUFDLFFBQVMsQ0FBQyxRQUFTLENBQUMsTUFBTyxDQUFDLFFBQVMsQ0FBQyxNQUFPLENBQUMsUUFBUyxDQUFDLE1BQU8sQ0FBQyxRQUFTLENBQUMsTUFBTyxDQUFDLFVBQVcsQ0FBQyxNQUFPLENBQUMsVUFBVyxDQUFDLE1BQU8sQ0FBQyxPQUFRLENBQUMsUUFBUyxDQUFDLFNBQVUsQ0FBQyxPQUFRLENBQUMsT0FBUSxDQUFDLFNBQVUsQ0FBQyxPQUFRLENBQUMsU0FBVSxDQUFDLE9BQVEsQ0FBQyxRQUFTLENBQUMsdUJBQXdCLENBQUMsT0FBUSxDQUFDLGlCQUFrQixDQUFDLE9BQVEsQ0FBQyxRQUFTLENBQUMsUUFBUyxDQUFDLFFBQVMsQ0FBQyxPQUFRLENBQUMsUUFBUyxDQUFDLE9BQVEsQ0FBQyxLQUFNLENBQUMsUUFBUyxDQUFDLEtBQU0sQ0FBQyxPQUFRLENBQUMsTUFBTyxDQUFDLFFBQVMsQ0FBQyxRQUFTLENBQUMsT0FBUSxDQUFDLFVBQVcsQ0FBQyxPQUFRLENBQUMsT0FBUSxDQUFDLE1BQU8sQ0FBQyxPQUFRLENBQUMsTUFBTyxDQUFDLFNBQVUsQ0FBQyxPQUFRLENBQUMsT0FBUSxDQUFDLFFBQVMsQ0FBQyxVQUFXLENBQUMsUUFBUyxDQUFDLE1BQU8sQ0FBQyxRQUFTLENBQUMsS0FBTSxDQUFDLE9BQVEsQ0FBQyxPQUFRLENBQUMsU0FBVSxDQUFDLE9BQVEsQ0FBQyxPQUFRLENBQUMsU0FBVSxDQUFDLE1BQU8sQ0FBQyxTQUFVLENBQUMsTUFBTyxDQUFDLE9BQVEsQ0FBQyxPQUFRLENBQUMsU0FBVSxDQUFDLE1BQU8sQ0FBQyxTQUFVLENBQUMsTUFBTyxDQUFDLFdBQVksQ0FBQyxRQUFTLENBQUMsU0FBVSxDQUFDLFFBQVMsQ0FBQyxTQUFVLENBQUMsT0FBUSxDQUFDLE9BQVEsQ0FBQyxNQUFPLENBQUMsT0FBUSxDQUFDLE1BQU8sQ0FBQyxRQUFTLENBQUMsT0FBUSxDQUFDLFVBQVcsQ0FBQyxPQUFRLENBQUMsWUFBYSxDQUFDLE9BQVEsQ0FBQyxjQUFlLENBQUMsT0FBUSxDQUFDLGtCQUFtQixDQUFDLE9BQVEsQ0FBQyxPQUFRLENBQUMsTUFBTyxDQUFDLFdBQVksQ0FBQyxPQUFRLENBQUMsTUFBTyxDQUFDLE9BQVEsQ0FBQyxTQUFVLENBQUMsUUFBUyxDQUFDLFFBQVMsQ0FBQyxRQUFTLENBQUMsT0FBUSxDQUFDLE9BQVEsQ0FBQyxXQUFZLENBQUMsT0FBUSxDQUFDLE1BQU8sQ0FBQyxPQUFRLENBQUMsTUFBTyxDQUFDLE9BQVEsQ0FBQyxTQUFVLENBQUMsS0FBTSxDQUFDLFNBQVUsQ0FBQyxLQUFNLENBQUMsU0FBVSxDQUFDLE9BQVEsQ0FBQyxPQUFRLENBQUMsT0FBUSxDQUFDLFVBQVcsQ0FBQyxPQUFRLENBQUMsTUFBTyxDQUFDLFNBQVUsQ0FBQyxNQUFPLENBQUMsU0FBVSxDQUFDLE1BQU8sQ0FBQyxNQUFPLENBQUMsTUFBTyxDQUFDLE1BQU8sQ0FBQyxPQUFRLENBQUMsTUFBTyxDQUFDLFNBQVUsQ0FBQyxPQUFRLENBQUMsUUFBUyxDQUFDLE9BQVEsQ0FBQyxLQUFNLENBQUMsTUFBTyxDQUFDLEtBQU0sQ0FBQyxNQUFPLENBQUMsWUFBYSxDQUFDLE9BQVEsQ0FBQyxNQUFPLENBQUMsTUFBTyxDQUFDLFNBQVUsQ0FBQyxPQUFRLENBQUMsVUFBVyxDQUFDLE9BQVEsQ0FBQyxTQUFVLENBQUMsT0FBUSxDQUFDLFdBQVksQ0FBQyxRQUFTLENBQUMsUUFBUyxDQUFDLE9BQVEsQ0FBQyxVQUFXLENBQUMsUUFBUyxDQUFDLE9BQVEsQ0FBQyxLQUFNLENBQUMsU0FBVSxDQUFDLE9BQVEsQ0FBQyxTQUFVLENBQUMsUUFBUyxDQUFDLFFBQVMsQ0FBQyxRQUFTLENBQUMsWUFBYSxDQUFDLE1BQU8sQ0FBQyxTQUFVLENBQUMsTUFBTyxDQUFDLFVBQVcsQ0FBQyxRQUFTLENBQUMsVUFBVyxDQUFDLFFBQVMsQ0FBQyxLQUFNLENBQUMsTUFBTyxDQUFDLGdCQUFpQixDQUFDLE9BQVEsQ0FBQyxXQUFZLENBQUMsUUFBUyxDQUFDLE9BQVEsQ0FBQyxTQUFVLENBQUMsT0FBUSxDQUFDLE9BQVEsQ0FBQyxRQUFTLENBQUMsTUFBTyxDQUFDLE9BQVEsQ0FBQyxRQUFTLENBQUMsS0FBTSxDQUFDLFFBQVMsQ0FBQyxLQUFNLENBQUMsT0FBUSxDQUFDLFFBQVMsQ0FBQyxPQUFRLENBQUMsYUFBYyxDQUFDLFFBQVMsQ0FBQyxPQUFRLENBQUMsT0FBUSxDQUFDLGNBQWUsQ0FBQyxPQUFRLENBQUMsV0FBWSxDQUFDLE9BQVEsQ0FBQyxnQkFBaUIsQ0FBQyxRQUFTLENBQUMscUJBQXNCLENBQUMsT0FBUSxDQUFDLGdCQUFpQixDQUFDLE9BQVEsQ0FBQyxTQUFVLENBQUMsUUFBUyxDQUFDLGNBQWUsQ0FBQyxRQUFTLENBQUMsV0FBWSxDQUFDLFFBQVMsQ0FBQyxXQUFZLENBQUMsT0FBUSxDQUFDLE1BQU8sQ0FBQyxRQUFTLENBQUMsTUFBTyxDQUFDLFFBQVMsQ0FBQyxVQUFXLENBQUMsT0FBUSxDQUFDLFFBQVMsQ0FBQyxPQUFRLENBQUMsUUFBUyxDQUFDLE9BQVEsQ0FBQyxTQUFVLENBQUMsT0FBUSxDQUFDLFFBQVMsQ0FBQyxRQUFTLENBQUMsT0FBUSxDQUFDLFFBQVMsQ0FBQyxTQUFVLENBQUMsT0FBUSxDQUFDLE9BQVEsQ0FBQyxPQUFRLENBQUMsVUFBVyxDQUFDLE9BQVEsQ0FBQyxXQUFZLENBQUMsT0FBUSxDQUFDLFdBQVksQ0FBQyxPQUFRLENBQUMsV0FBWSxDQUFDLE9BQVEsQ0FBQyxPQUFRLENBQUMsT0FBUSxDQUFDLGVBQWdCLENBQUMsT0FBUSxDQUFDLGFBQWMsQ0FBQyxPQUFRLENBQUMsU0FBVSxDQUFDLE9BQVEsQ0FBQyxRQUFTLENBQUMsT0FBUSxDQUFDLFNBQVUsQ0FBQyxPQUFRLENBQUMsT0FBUSxDQUFDLFNBQVUsQ0FBQyxPQUFRLENBQUMsU0FBVSxDQUFDLE1BQU8sQ0FBQyxNQUFPLENBQUMsTUFBTyxDQUFDLE1BQU8sQ0FBQyxTQUFVLENBQUMsT0FBUSxDQUFDLE1BQU8sQ0FBQyxTQUFVLENBQUMsTUFBTyxDQUFDLFNBQVUsQ0FBQyxPQUFRLENBQUMsUUFBUyxDQUFDLE9BQVEsQ0FBQyxTQUFVLENBQUMsT0FBUSxDQUFDLE9BQVEsQ0FBQyxTQUFVLENBQUMsT0FBUSxDQUFDLE9BQVEsQ0FBQyxTQUFVLENBQUMsT0FBUSxDQUFDLFNBQVUsQ0FBQyxjQUFlLENBQUMsT0FBUSxDQUFDLFVBQVcsQ0FBQyxRQUFTLENBQUMsUUFBUyxDQUFDLEtBQU0sQ0FBQyxVQUFXLENBQUMsT0FBUSxDQUFDLE9BQVEsQ0FBQyxLQUFNLENBQUMsT0FBUSxDQUFDLEtBQU0sQ0FBQyxRQUFTLENBQUMsT0FBUSxDQUFDLE9BQVEsQ0FBQyxLQUFNLE1BQU8sQ0FBQyxTQUFVLENBQUMsTUFBTyxDQUFDLFNBQVUsQ0FBQyxNQUFPLENBQUMsUUFBUyxDQUFDLE9BQVEsQ0FBQyxXQUFZLENBQUMsUUFBUyxDQUFDLE9BQVEsQ0FBQyxRQUFTLENBQUMsT0FBUSxDQUFDLFFBQVMsQ0FBQyxRQUFTLENBQUMsUUFBUyxDQUFDLFFBQVMsQ0FBQyxRQUFTLENBQUMsU0FBVSxDQUFDLFFBQVMsQ0FBQyxRQUFTLENBQUMsTUFBTyxDQUFDLFNBQVUsQ0FBQyxRQUFTLENBQUMsUUFBUyxDQUFDLE9BQVEsQ0FBQyxVQUFXLENBQUMsUUFBUyxDQUFDLFFBQVMsQ0FBQyxRQUFTLENBQUMsT0FBUSxDQUFDLE9BQVEsQ0FBQyxPQUFRLENBQUMsT0FBUSxDQUFDLE9BQVEsQ0FBQyxPQUFRLENBQUMsU0FBVSxDQUFDLFFBQVMsQ0FBQyxTQUFVLENBQUMsT0FBUSxDQUFDLFNBQVUsQ0FBQyxPQUFRLENBQUMsU0FBVSxDQUFDLFFBQVMsQ0FBQyxVQUFXLENBQUMsUUFBUyxDQUFDLFNBQVUsQ0FBQyxRQUFTLENBQUMsU0FBVSxDQUFDLE9BQVEsQ0FBQyxRQUFTLENBQUMsT0FBUSxDQUFDLFNBQVUsQ0FBQyxRQUFTLENBQUMsU0FBVSxDQUFDLFFBQVMsQ0FBQyxRQUFTLENBQUMsT0FBUSxDQUFDLFlBQWEsQ0FBQyxPQUFRLENBQUMsUUFBUyxDQUFDLFFBQVMsQ0FBQyxRQUFTLENBQUMsUUFBUyxDQUFDLFFBQVMsQ0FBQyxRQUFTLENBQUMsUUFBUyxDQUFDLFFBQVMsQ0FBQyxTQUFVLENBQUMsTUFBTyxDQUFDLFNBQVUsQ0FBQyxLQUFNLENBQUMsUUFBUyxDQUFDLFFBQVMsQ0FBQyxVQUFXLENBQUMsUUFBUyxDQUFDLFVBQVcsQ0FBQyxRQUFTLENBQUMsU0FBVSxDQUFDLE1BQU8sQ0FBQyxTQUFVLENBQUMsTUFBTyxDQUFDLFNBQVUsQ0FBQyxNQUFPLENBQUMsU0FBVSxDQUFDLE1BQU8sQ0FBQyxRQUFTLENBQUMsT0FBUSxDQUFDLE9BQVEsQ0FBQyxNQUFPLENBQUMsTUFBTyxDQUFDLE9BQVEsQ0FBQyxNQUFPLENBQUMsT0FBUSxDQUFDLE9BQVEsQ0FBQyxRQUFTLENBQUMsVUFBVyxDQUFDLFFBQVMsQ0FBQyxRQUFTLENBQUMsT0FBUSxDQUFDLFNBQVUsQ0FBQyxPQUFRLENBQUMsd0JBQXlCLENBQUMsT0FBUSxDQUFDLE9BQVEsQ0FBQyxPQUFRLENBQUMsT0FBUSxDQUFDLE9BQVEsQ0FBQyxVQUFXLENBQUMsT0FBUSxDQUFDLFdBQVksQ0FBQyxPQUFRLENBQUMsUUFBUyxDQUFDLE9BQVEsQ0FBQyxLQUFNLENBQUMsT0FBUSxDQUFDLE9BQVEsQ0FBQyxPQUFRLENBQUMsTUFBTyxDQUFDLE1BQU8sQ0FBQyxNQUFPLENBQUMsTUFBTyxDQUFDLGlCQUFrQixDQUFDLE9BQVEsQ0FBQyxxQkFBc0IsQ0FBQyxPQUFRLENBQUMsdUJBQXdCLENBQUMsUUFBUyxDQUFDLFNBQVUsQ0FBQyxRQUFTLENBQUMsU0FBVSxDQUFDLE9BQVEsQ0FBQyxNQUFPLENBQUMsU0FBVSxDQUFDLE1BQU8sQ0FBQyxPQUFRLENBQUMsT0FBUSxDQUFDLFFBQVMsQ0FBQyxRQUFTLENBQUMsT0FBUSxDQUFDLFFBQVMsQ0FBQyxPQUFRLENBQUMsU0FBVSxDQUFDLFFBQVMsQ0FBQyxNQUFPLENBQUMsTUFBTyxDQUFDLE1BQU8sQ0FBQyxNQUFPLENBQUMsT0FBUSxDQUFDLE9BQVEsQ0FBQyxvQkFBcUIsQ0FBQyxRQUFTLENBQUMsZ0JBQWlCLENBQUMsT0FBUSxDQUFDLGFBQWMsQ0FBQyxPQUFRLENBQUMsYUFBYyxDQUFDLE9BQVEsQ0FBQyxhQUFjLENBQUMsT0FBUSxDQUFDLHNCQUF1QixDQUFDLE9BQVEsQ0FBQyxpQkFBa0IsQ0FBQyxPQUFRLENBQUMsZUFBZ0IsQ0FBQyxPQUFRLENBQUMscUJBQXNCLENBQUMsUUFBUyxDQUFDLHFCQUFzQixDQUFDLFFBQVMsQ0FBQyxxQkFBc0IsQ0FBQyxRQUFTLENBQUMsa0JBQW1CLENBQUMsT0FBUSxDQUFDLGFBQWMsQ0FBQyxPQUFRLENBQUMsbUJBQW9CLENBQUMsT0FBUSxDQUFDLGlCQUFrQixDQUFDLE9BQVEsQ0FBQyxrQkFBbUIsQ0FBQyxPQUFRLENBQUMsb0JBQXFCLENBQUMsT0FBUSxDQUFDLG1CQUFvQixDQUFDLE9BQVEsQ0FBQyxrQkFBbUIsQ0FBQyxPQUFRLENBQUMsZ0JBQWlCLENBQUMsT0FBUSxDQUFDLFdBQVksQ0FBQyxPQUFRLENBQUMsaUJBQWtCLENBQUMsUUFBUyxDQUFDLGtCQUFtQixDQUFDLE9BQVEsQ0FBQyxtQkFBb0IsQ0FBQyxRQUFTLENBQUMsZ0JBQWlCLENBQUMsT0FBUSxDQUFDLHFCQUFzQixDQUFDLE9BQVEsQ0FBQyxvQkFBcUIsQ0FBQyxRQUFTLENBQUMsbUJBQW9CLENBQUMsUUFBUyxDQUFDLG1CQUFvQixDQUFDLFFBQVMsQ0FBQyxnQkFBaUIsQ0FBQyxPQUFRLENBQUMsaUJBQWtCLENBQUMsUUFBUyxDQUFDLGNBQWUsQ0FBQyxPQUFRLENBQUMsT0FBUSxDQUFDLE1BQU8sQ0FBQyxlQUFnQixDQUFDLE9BQVEsQ0FBQyxRQUFTLENBQUMsT0FBUSxDQUFDLFFBQVMsQ0FBQyxPQUFRLENBQUMsTUFBTyxDQUFDLE9BQVEsQ0FBQyxhQUFjLENBQUMsT0FBUSxDQUFDLFNBQVUsQ0FBQyxPQUFRLENBQUMsUUFBUyxDQUFDLFFBQVMsQ0FBQyxRQUFTLENBQUMsUUFBUyxDQUFDLFFBQVMsQ0FBQyxPQUFRLENBQUMsUUFBUyxDQUFDLFFBQVMsQ0FBQyxRQUFTLENBQUMsUUFBUyxDQUFDLE9BQVEsQ0FBQyxTQUFVLENBQUMsT0FBUSxDQUFDLE9BQVEsQ0FBQyxTQUFVLENBQUMsUUFBUyxDQUFDLFVBQVcsQ0FBQyxRQUFTLENBQUMsZUFBZ0IsQ0FBQyxRQUFTLENBQUMsT0FBUSxDQUFDLEtBQU0sQ0FBQyxTQUFVLENBQUMsUUFBUyxDQUFDLFdBQVksQ0FBQyxRQUFTLENBQUMsUUFBUyxDQUFDLE9BQVEsQ0FBQyxjQUFlLENBQUMsT0FBUSxDQUFDLFNBQVUsQ0FBQyxPQUFRLENBQUMsT0FBUSxDQUFDLFNBQVUsQ0FBQyxPQUFRLENBQUMsT0FBUSxDQUFDLE1BQU8sQ0FBQyxPQUFRLENBQUMsTUFBTyxDQUFDLE9BQVEsQ0FBQyxPQUFRLENBQUMsS0FBTSxDQUFDLFFBQVMsQ0FBQyxPQUFRLENBQUMsU0FBVSxDQUFDLE9BQVEsQ0FBQyxrQkFBbUIsQ0FBQyxPQUFRLENBQUMsU0FBVSxDQUFDLE9BQVEsQ0FBQyxTQUFVLENBQUMsT0FBUSxDQUFDLE9BQVEsQ0FBQyxPQUFRLENBQUMsUUFBUyxDQUFDLE9BQVEsQ0FBQyxRQUFTLENBQUMsT0FBUSxDQUFDLFdBQVksQ0FBQyxRQUFTLENBQUMsY0FBZSxDQUFDLFFBQVMsQ0FBQyxVQUFXLENBQUMsUUFBUyxDQUFDLEtBQU0sQ0FBQyxPQUFRLENBQUMsU0FBVSxDQUFDLE1BQU8sQ0FBQyxTQUFVLENBQUMsTUFBTyxDQUFDLFFBQVMsQ0FBQyxPQUFRLENBQUMsT0FBUSxDQUFDLFFBQVMsQ0FBQyxTQUFVLENBQUMsTUFBTyxDQUFDLFNBQVUsQ0FBQyxNQUFPLENBQUMsS0FBTSxDQUFDLFFBQVMsQ0FBQyxLQUFNLENBQUMsT0FBUSxDQUFDLFFBQVMsQ0FBQyxPQUFRLENBQUMsTUFBTyxDQUFDLFFBQVMsQ0FBQyxNQUFPLENBQUMsUUFBUyxDQUFDLFNBQVUsQ0FBQyxNQUFPLENBQUMsU0FBVSxDQUFDLE1BQU8sQ0FBQyxRQUFTLENBQUMsTUFBTyxDQUFDLFFBQVMsQ0FBQyxNQUFPLENBQUMsUUFBUyxDQUFDLFFBQVMsQ0FBQyxPQUFRLENBQUMsUUFBUyxDQUFDLFNBQVUsQ0FBQyxPQUFRLENBQUMsV0FBWSxDQUFDLFFBQVMsQ0FBQyxRQUFTLENBQUMsT0FBUSxDQUFDLE1BQU8sQ0FBQyxPQUFRLENBQUMsTUFBTyxDQUFDLE9BQVEsQ0FBQyxRQUFTLENBQUMsT0FBUSxDQUFDLE9BQVEsQ0FBQyxPQUFRLENBQUMsUUFBUyxDQUFDLFFBQVMsQ0FBQyxTQUFVLENBQUMsUUFBUyxDQUFDLFFBQVMsQ0FBQyxPQUFRLENBQUMsUUFBUyxDQUFDLE9BQVEsQ0FBQyxVQUFXLENBQUMsT0FBUSxDQUFDLE9BQVEsQ0FBQyxNQUFPLENBQUMsT0FBUSxDQUFDLEtBQU0sQ0FBQyxTQUFVLENBQUMsUUFBUyxDQUFDLFdBQVksQ0FBQyxPQUFRLENBQUMsUUFBUyxDQUFDLE9BQVEsQ0FBQyxPQUFRLENBQUMsUUFBUyxDQUFDLE1BQU8sQ0FBQyxTQUFVLENBQUMsTUFBTyxDQUFDLFNBQVUsQ0FBQyxTQUFVLENBQUMsT0FBUSxDQUFDLFFBQVMsQ0FBQyxPQUFRLENBQUMsU0FBVSxDQUFDLE9BQVEsQ0FBQyxTQUFVLENBQUMsT0FBUSxDQUFDLE9BQVEsQ0FBQyxPQUFRLENBQUMsT0FBUSxDQUFDLE9BQVEsQ0FBQyxpQkFBa0IsQ0FBQyxPQUFRLENBQUMsaUJBQWtCLENBQUMsT0FBUSxDQUFDLFdBQVksQ0FBQyxPQUFRLENBQUMsZ0JBQWlCLENBQUMsT0FBUSxDQUFDLGtCQUFtQixDQUFDLE9BQVEsQ0FBQyxlQUFnQixDQUFDLE9BQVEsQ0FBQyxNQUFPLENBQUMsTUFBTyxDQUFDLFFBQVMsQ0FBQyxNQUFPLENBQUMsUUFBUyxDQUFDLE1BQU8sQ0FBQyxTQUFVLENBQUMsTUFBTyxDQUFDLFNBQVUsQ0FBQyxNQUFPLENBQUMsTUFBTyxDQUFDLE9BQVEsQ0FBQyxTQUFVLENBQUMsUUFBUyxDQUFDLE9BQVEsQ0FBQyxPQUFRLENBQUMsUUFBUyxDQUFDLE9BQVEsQ0FBQyxPQUFRLENBQUMsUUFBUyxDQUFDLFFBQVMsQ0FBQyxRQUFTLENBQUMsT0FBUSxDQUFDLFFBQVMsQ0FBQyxRQUFTLENBQUMsUUFBUyxDQUFDLFFBQVMsQ0FBQyxPQUFRLENBQUMsVUFBVyxDQUFDLFFBQVMsQ0FBQyxVQUFXLENBQUMsUUFBUyxDQUFDLFFBQVMsQ0FBQyxPQUFRLENBQUMsY0FBZSxDQUFDLE9BQVEsQ0FBQyxnQkFBaUIsQ0FBQyxPQUFRLENBQUMsU0FBVSxDQUFDLFFBQVMsQ0FBQyxXQUFZLENBQUMsUUFBUyxDQUFDLE9BQVEsQ0FBQyxPQUFRLENBQUMsUUFBUyxDQUFDLE9BQVEsQ0FBQyxNQUFPLENBQUMsUUFBUyxDQUFDLE9BQVEsQ0FBQyxRQUFTLENBQUMsUUFBUyxDQUFDLE1BQU8sUUFBUyxDQUFDLFNBQVUsQ0FBQyxPQUFRLENBQUMsU0FBVSxDQUFDLE9BQVEsQ0FBQyxTQUFVLENBQUMsT0FBUSxDQUFDLE9BQVEsQ0FBQyxRQUFTLENBQUMsTUFBTyxDQUFDLEtBQU0sQ0FBQyxPQUFRLENBQUMsU0FBVSxDQUFDLE9BQVEsQ0FBQyxTQUFVLENBQUMsU0FBVSxDQUFDLE9BQVEsQ0FBQyxZQUFhLENBQUMsT0FBUSxDQUFDLE9BQVEsQ0FBQyxPQUFRLENBQUMsUUFBUyxDQUFDLE9BQVEsQ0FBQyxTQUFVLENBQUMsS0FBTSxRQUFTLENBQUMsUUFBUyxDQUFDLE9BQVEsQ0FBQyxTQUFVLENBQUMsS0FBTSxRQUFTLENBQUMsT0FBUSxDQUFDLE9BQVEsQ0FBQyxRQUFTLENBQUMsT0FBUSxDQUFDLFNBQVUsQ0FBQyxPQUFRLENBQUMsV0FBWSxDQUFDLE9BQVEsQ0FBQyxhQUFjLENBQUMsT0FBUSxDQUFDLFFBQVMsQ0FBQyxPQUFRLENBQUMsU0FBVSxDQUFDLE9BQVEsQ0FBQyxXQUFZLENBQUMsT0FBUSxDQUFDLGFBQWMsQ0FBQyxPQUFRLENBQUMsU0FBVSxDQUFDLE9BQVEsQ0FBQyxTQUFVLENBQUMsT0FBUSxDQUFDLHFCQUFzQixDQUFDLE9BQVEsQ0FBQyxlQUFnQixDQUFDLE9BQVEsQ0FBQyxvQkFBcUIsQ0FBQyxPQUFRLENBQUMsaUJBQWtCLENBQUMsT0FBUSxDQUFDLHNCQUF1QixDQUFDLE9BQVEsQ0FBQyxjQUFlLENBQUMsT0FBUSxDQUFDLFNBQVUsQ0FBQyxPQUFRLENBQUMsTUFBTyxDQUFDLE9BQVEsQ0FBQyxPQUFRLENBQUMsT0FBUSxDQUFDLFFBQVMsQ0FBQyxPQUFRLENBQUMsT0FBUSxDQUFDLFNBQVUsQ0FBQyxPQUFRLENBQUMsU0FBVSxDQUFDLFNBQVUsQ0FBQyxPQUFRLENBQUMsU0FBVSxDQUFDLE9BQVEsQ0FBQyxTQUFVLENBQUMsT0FBUSxDQUFDLE9BQVEsQ0FBQyxPQUFRLENBQUMsT0FBUSxDQUFDLE9BQVEsQ0FBQyxRQUFTLENBQUMsT0FBUSxDQUFDLGtCQUFtQixDQUFDLE9BQVEsQ0FBQyxjQUFlLENBQUMsTUFBTyxDQUFDLFFBQVMsQ0FBQyxNQUFPLENBQUMsTUFBTyxDQUFDLE9BQVEsQ0FBQyxNQUFPLENBQUMsT0FBUSxDQUFDLFNBQVUsQ0FBQyxRQUFTLENBQUMsT0FBUSxDQUFDLFFBQVMsQ0FBQyxPQUFRLENBQUMsT0FBUSxDQUFDLFVBQVcsQ0FBQyxRQUFTLENBQUMsVUFBVyxDQUFDLFFBQVMsQ0FBQyxRQUFTLENBQUMsUUFBUyxDQUFDLFFBQVMsQ0FBQyxPQUFRLENBQUMsVUFBVyxDQUFDLFFBQVMsQ0FBQyxVQUFXLENBQUMsUUFBUyxDQUFDLFNBQVUsQ0FBQyxPQUFRLENBQUMsU0FBVSxDQUFDLE9BQVEsQ0FBQyxXQUFZLENBQUMsT0FBUSxDQUFDLFlBQWEsQ0FBQyxRQUFTLENBQUMsY0FBZSxDQUFDLE9BQVEsQ0FBQyxZQUFhLENBQUMsT0FBUSxDQUFDLGFBQWMsQ0FBQyxRQUFTLENBQUMsU0FBVSxDQUFDLFFBQVMsQ0FBQyxTQUFVLENBQUMsUUFBUyxDQUFDLFNBQVUsQ0FBQyxRQUFTLENBQUMsYUFBYyxDQUFDLFFBQVMsQ0FBQyxPQUFRLENBQUMsT0FBUSxDQUFDLGNBQWUsQ0FBQyxPQUFRLENBQUMsV0FBWSxDQUFDLE9BQVEsQ0FBQyxnQkFBaUIsQ0FBQyxRQUFTLENBQUMscUJBQXNCLENBQUMsT0FBUSxDQUFDLGdCQUFpQixDQUFDLE9BQVEsQ0FBQyxTQUFVLENBQUMsUUFBUyxDQUFDLGNBQWUsQ0FBQyxRQUFTLENBQUMsV0FBWSxDQUFDLFFBQVMsQ0FBQyxXQUFZLENBQUMsT0FBUSxDQUFDLFVBQVcsQ0FBQyxPQUFRLENBQUMsV0FBWSxDQUFDLE9BQVEsQ0FBQyxNQUFPLENBQUMsT0FBUSxDQUFDLE1BQU8sQ0FBQyxPQUFRLENBQUMsT0FBUSxDQUFDLE9BQVEsQ0FBQyxPQUFRLENBQUMsTUFBTyxDQUFDLE9BQVEsQ0FBQyxNQUFPLENBQUMsT0FBUSxDQUFDLE1BQU8sQ0FBQyxNQUFPLENBQUMsT0FBUSxDQUFDLE1BQU8sQ0FBQyxPQUFRLENBQUMsU0FBVSxDQUFDLFFBQVMsQ0FBQyxVQUFXLENBQUMsUUFBUyxDQUFDLE9BQVEsQ0FBQyxRQUFTLENBQUMsT0FBUSxDQUFDLE9BQVEsQ0FBQyxVQUFXLENBQUMsUUFBUyxDQUFDLFdBQVksQ0FBQyxPQUFRLENBQUMsZ0JBQWlCLENBQUMsT0FBUSxDQUFDLFVBQVcsQ0FBQyxRQUFTLENBQUMsVUFBVyxDQUFDLFFBQVMsQ0FBQyxVQUFXLENBQUMsUUFBUyxDQUFDLFVBQVcsQ0FBQyxRQUFTLENBQUMsUUFBUyxDQUFDLFFBQVMsQ0FBQyxRQUFTLENBQUMsT0FBUSxDQUFDLFVBQVcsQ0FBQyxRQUFTLENBQUMsU0FBVSxDQUFDLE9BQVEsQ0FBQyxTQUFVLENBQUMsT0FBUSxDQUFDLFdBQVksQ0FBQyxPQUFRLENBQUMsWUFBYSxDQUFDLFFBQVMsQ0FBQyxZQUFhLENBQUMsT0FBUSxDQUFDLGFBQWMsQ0FBQyxRQUFTLENBQUMsU0FBVSxDQUFDLFFBQVMsQ0FBQyxTQUFVLENBQUMsUUFBUyxDQUFDLFNBQVUsQ0FBQyxRQUFTLENBQUMsU0FBVSxDQUFDLFFBQVMsQ0FBQyxRQUFTLENBQUMsT0FBUSxDQUFDLFFBQVMsQ0FBQyxPQUFRLENBQUMsVUFBVyxDQUFDLE9BQVEsQ0FBQyxTQUFVLENBQUMsUUFBUyxDQUFDLFFBQVMsQ0FBQyxNQUFPLENBQUMsTUFBTyxDQUFDLElBQUssQ0FBQyxTQUFVLENBQUMsT0FBUSxDQUFDLE1BQU8sQ0FBQyxNQUFPLENBQUMsTUFBTyxDQUFDLE1BQU8sQ0FBQyxPQUFRLENBQUMsT0FBUSxDQUFDLFNBQVUsQ0FBQyxNQUFPLENBQUMsU0FBVSxDQUFDLE1BQU8sQ0FBQyxTQUFVLENBQUMsTUFBTyxDQUFDLFNBQVUsQ0FBQyxNQUFPLENBQUMsTUFBTyxDQUFDLE9BQVEsQ0FBQyxNQUFPLENBQUMsT0FBUSxDQUFDLE9BQVEsQ0FBQyxPQUFRLENBQUMsU0FBVSxDQUFDLE9BQVEsQ0FBQyxNQUFPLENBQUMsU0FBVSxDQUFDLE1BQU8sQ0FBQyxTQUFVLENBQUMsU0FBVSxDQUFDLE9BQVEsQ0FBQyxZQUFhLENBQUMsT0FBUSxDQUFDLFlBQWEsQ0FBQyxPQUFRLENBQUMsUUFBUyxDQUFDLE1BQU8sQ0FBQyxRQUFTLENBQUMsTUFBTyxDQUFDLFdBQVksQ0FBQyxNQUFPLENBQUMsU0FBVSxDQUFDLE1BQU8sQ0FBQyxjQUFlLENBQUMsT0FBUSxDQUFDLFdBQVksQ0FBQyxPQUFRLENBQUMsYUFBYyxDQUFDLEtBQU0sT0FBUSxDQUFDLFlBQWEsQ0FBQyxPQUFRLENBQUMsU0FBVSxDQUFDLE9BQVEsQ0FBQyxRQUFTLENBQUMsT0FBUSxDQUFDLFNBQVUsQ0FBQyxPQUFRLENBQUMsUUFBUyxDQUFDLE1BQU8sQ0FBQyxRQUFTLENBQUMsTUFBTyxDQUFDLFFBQVMsQ0FBQyxNQUFPLENBQUMsUUFBUyxDQUFDLE9BQVEsQ0FBQyxhQUFjLENBQUMsT0FBUSxDQUFDLGlCQUFrQixDQUFDLE9BQVEsQ0FBQyxhQUFjLENBQUMsT0FBUSxDQUFDLFdBQVksQ0FBQyxRQUFTLENBQUMsU0FBVSxDQUFDLE9BQVEsQ0FBQyxRQUFTLENBQUMsTUFBTyxDQUFDLFNBQVUsQ0FBQyxRQUFTLENBQUMsT0FBUSxDQUFDLE9BQVEsQ0FBQyxPQUFRLENBQUMsUUFBUyxDQUFDLFNBQVUsQ0FBQyxPQUFRLENBQUMsU0FBVSxDQUFDLFFBQVMsQ0FBQyxNQUFPLENBQUMsT0FBUSxDQUFDLE9BQVEsQ0FBQyxTQUFVLENBQUMsT0FBUSxDQUFDLFNBQVUsQ0FBQyxVQUFXLENBQUMsUUFBUyxDQUFDLE9BQVEsQ0FBQyxRQUFTLENBQUMsU0FBVSxDQUFDLE9BQVEsQ0FBQyxRQUFTLENBQUMsT0FBUSxDQUFDLFFBQVMsQ0FBQyxPQUFRLENBQUMsV0FBWSxDQUFDLE9BQVEsQ0FBQyxlQUFnQixDQUFDLE9BQVEsQ0FBQyxlQUFnQixDQUFDLE9BQVEsQ0FBQyxpQkFBa0IsQ0FBQyxPQUFRLENBQUMsWUFBYSxDQUFDLE9BQVEsQ0FBQyxnQkFBaUIsQ0FBQyxPQUFRLENBQUMsa0JBQW1CLENBQUMsT0FBUSxDQUFDLFNBQVUsQ0FBQyxPQUFRLENBQUMsT0FBUSxDQUFDLE9BQVEsQ0FBQyxXQUFZLENBQUMsUUFBUyxDQUFDLFlBQWEsQ0FBQyxPQUFRLENBQUMsVUFBVyxDQUFDLFFBQVMsQ0FBQyxRQUFTLENBQUMsUUFBUyxDQUFDLFVBQVcsQ0FBQyxRQUFTLENBQUMsV0FBWSxDQUFDLE9BQVEsQ0FBQyxPQUFRLENBQUMsU0FBVSxDQUFDLE9BQVEsQ0FBQyxTQUFVLENBQUMsT0FBUSxDQUFDLE9BQVEsQ0FBQyxPQUFRLENBQUMsT0FBUSxDQUFDLFFBQVMsQ0FBQyxPQUFRLENBQUMsUUFBUyxDQUFDLE9BQVEsQ0FBQyxTQUFVLENBQUMsTUFBTyxDQUFDLFNBQVUsQ0FBQyxNQUFPLENBQUMsUUFBUyxDQUFDLE9BQVEsQ0FBQyxtQkFBb0IsQ0FBQyxPQUFRLENBQUMsb0JBQXFCLENBQUMsT0FBUSxDQUFDLFNBQVUsQ0FBQyxNQUFPLENBQUMsU0FBVSxDQUFDLE1BQU8sQ0FBQyxPQUFRLENBQUMsT0FBUSxDQUFDLE9BQVEsQ0FBQyxPQUFRLENBQUMsT0FBUSxDQUFDLE9BQVEsQ0FBQyxXQUFZLENBQUMsUUFBUyxDQUFDLFFBQVMsQ0FBQyxPQUFRLENBQUMsUUFBUyxDQUFDLE9BQVEsQ0FBQyxTQUFVLENBQUMsTUFBTyxDQUFDLFNBQVUsQ0FBQyxNQUFPLENBQUMsUUFBUyxDQUFDLE1BQU8sQ0FBQyxRQUFTLENBQUMsTUFBTyxDQUFDLE1BQU8sQ0FBQyxPQUFRLENBQUMsTUFBTyxDQUFDLE9BQVEsQ0FBQyxRQUFTLENBQUMsT0FBUSxDQUFDLFNBQVUsQ0FBQyxNQUFPLENBQUMsU0FBVSxDQUFDLE1BQU8sQ0FBQyxRQUFTLENBQUMsUUFBUyxDQUFDLFNBQVUsQ0FBQyxRQUFTLENBQUMsTUFBTyxDQUFDLFNBQVUsQ0FBQyxNQUFPLENBQUMsU0FBVSxDQUFDLFNBQVUsQ0FBQyxNQUFPLENBQUMsU0FBVSxDQUFDLE1BQU8sQ0FBQyxPQUFRLENBQUMsUUFBUyxDQUFDLFFBQVMsQ0FBQyxPQUFRLENBQUMsUUFBUyxDQUFDLE9BQVEsQ0FBQyxRQUFTLENBQUMsT0FBUSxDQUFDLFNBQVUsQ0FBQyxPQUFRLENBQUMsV0FBWSxDQUFDLE9BQVEsQ0FBQyxTQUFVLENBQUMsT0FBUSxDQUFDLFFBQVMsQ0FBQyxPQUFRLENBQUMsUUFBUyxDQUFDLE1BQU8sQ0FBQyxRQUFTLENBQUMsTUFBTyxDQUFDLE1BQU8sQ0FBQyxNQUFPLENBQUMsV0FBWSxDQUFDLEtBQU0sQ0FBQyxhQUFjLENBQUMsT0FBUSxDQUFDLGVBQWdCLENBQUMsT0FBUSxDQUFDLG1CQUFvQixDQUFDLE9BQVEsQ0FBQyxRQUFTLENBQUMsT0FBUSxDQUFDLFlBQWEsQ0FBQyxPQUFRLENBQUMsUUFBUyxDQUFDLE1BQU8sQ0FBQyxRQUFTLENBQUMsTUFBTyxDQUFDLE9BQVEsQ0FBQyxTQUFVLENBQUMsT0FBUSxDQUFDLFNBQVUsQ0FBQyxhQUFjLENBQUMsUUFBUyxDQUFDLFVBQVcsQ0FBQyxPQUFRLENBQUMsVUFBVyxDQUFDLE9BQVEsQ0FBQyxVQUFXLENBQUMsT0FBUSxDQUFDLG1CQUFvQixDQUFDLE9BQVEsQ0FBQyxjQUFlLENBQUMsT0FBUSxDQUFDLGNBQWUsQ0FBQyxPQUFRLENBQUMsY0FBZSxDQUFDLE9BQVEsQ0FBQyxnQkFBaUIsQ0FBQyxRQUFTLENBQUMsZ0JBQWlCLENBQUMsT0FBUSxDQUFDLGlCQUFrQixDQUFDLE9BQVEsQ0FBQyxRQUFTLENBQUMsT0FBUSxDQUFDLGlCQUFrQixDQUFDLE9BQVEsQ0FBQyxrQkFBbUIsQ0FBQyxPQUFRLENBQUMsT0FBUSxDQUFDLE1BQU8sQ0FBQyxPQUFRLENBQUMsTUFBTyxDQUFDLFFBQVMsQ0FBQyxNQUFPLENBQUMsVUFBVyxDQUFDLE1BQU8sQ0FBQyxVQUFXLENBQUMsTUFBTyxDQUFDLGFBQWMsQ0FBQyxPQUFRLENBQUMsUUFBUyxDQUFDLE9BQVEsQ0FBQyxhQUFjLENBQUMsT0FBUSxDQUFDLFNBQVUsQ0FBQyxPQUFRLENBQUMsV0FBWSxDQUFDLE9BQVEsQ0FBQyxTQUFVLENBQUMsT0FBUSxDQUFDLFFBQVMsQ0FBQyxNQUFPLENBQUMsUUFBUyxDQUFDLE1BQU8sQ0FBQyxRQUFTLENBQUMsT0FBUSxDQUFDLE9BQVEsQ0FBQyxTQUFVLENBQUMsT0FBUSxDQUFDLFNBQVUsQ0FBQyxRQUFTLENBQUMsT0FBUSxDQUFDLFNBQVUsQ0FBQyxNQUFPLENBQUMsU0FBVSxDQUFDLE1BQU8sQ0FBQyxPQUFRLENBQUMsT0FBUSxDQUFDLFFBQVMsQ0FBQyxPQUFRLENBQUMsUUFBUyxDQUFDLE9BQVEsQ0FBQyxPQUFRLENBQUMsTUFBTyxDQUFDLE9BQVEsQ0FBQyxNQUFPLENBQUMsVUFBVyxDQUFDLFFBQVMsQ0FBQyxTQUFVLENBQUMsUUFBUyxDQUFDLGFBQWMsQ0FBQyxPQUFRLENBQUMsV0FBWSxDQUFDLE9BQVEsQ0FBQyxhQUFjLENBQUMsT0FBUSxDQUFDLFNBQVUsQ0FBQyxNQUFPLENBQUMsUUFBUyxDQUFDLE1BQU8sQ0FBQyxZQUFhLENBQUMsT0FBUSxDQUFDLE9BQVEsQ0FBQyxPQUFRLENBQUMsT0FBUSxDQUFDLE9BQVEsQ0FBQyxTQUFVLENBQUMsT0FBUSxDQUFDLFdBQVksQ0FBQyxNQUFPLENBQUMsZUFBZ0IsQ0FBQyxLQUFNLFFBQVMsQ0FBQyxnQkFBaUIsQ0FBQyxNQUFPLFFBQVMsQ0FBQyxlQUFnQixDQUFDLEtBQU0sUUFBUyxDQUFDLGdCQUFpQixDQUFDLE1BQU8sUUFBUyxDQUFDLFdBQVksQ0FBQyxNQUFPLENBQUMsa0JBQW1CLENBQUMsT0FBUSxDQUFDLG1CQUFvQixDQUFDLE9BQVEsQ0FBQyxPQUFRLENBQUMsUUFBUyxDQUFDLE9BQVEsQ0FBQyxRQUFTLENBQUMsUUFBUyxDQUFDLFFBQVMsQ0FBQyxNQUFPLENBQUMsT0FBUSxDQUFDLE1BQU8sQ0FBQyxPQUFRLENBQUMsUUFBUyxDQUFDLE9BQVEsQ0FBQyxRQUFTLENBQUMsT0FBUSxDQUFDLFFBQVMsQ0FBQyxPQUFRLENBQUMsUUFBUyxDQUFDLE9BQVEsQ0FBQyxTQUFVLENBQUMsUUFBUyxDQUFDLFNBQVUsQ0FBQyxPQUFRLENBQUMsTUFBTyxDQUFDLE9BQVEsQ0FBQyxNQUFPLENBQUMsT0FBUSxDQUFDLFFBQVMsQ0FBQyxPQUFRLENBQUMsU0FBVSxDQUFDLE9BQVEsQ0FBQyxTQUFVLENBQUMsTUFBTyxDQUFDLFNBQVUsQ0FBQyxPQUFRLENBQUMsT0FBUSxDQUFDLE1BQU8sQ0FBQyxPQUFRLENBQUMsT0FBUSxDQUFDLGNBQWUsQ0FBQyxPQUFRLENBQUMsZUFBZ0IsQ0FBQyxNQUFPLENBQUMsb0JBQXFCLENBQUMsUUFBUyxDQUFDLGdCQUFpQixDQUFDLE9BQVEsQ0FBQyxnQkFBaUIsQ0FBQyxPQUFRLENBQUMsTUFBTyxDQUFDLFNBQVUsQ0FBQyxNQUFPLENBQUMsU0FBVSxDQUFDLFFBQVMsQ0FBQyxPQUFRLENBQUMsUUFBUyxDQUFDLEtBQU0sT0FBUSxDQUFDLFFBQVMsQ0FBQyxLQUFNLE9BQVEsQ0FBQyxPQUFRLENBQUMsU0FBVSxDQUFDLE9BQVEsQ0FBQyxTQUFVLENBQUMsUUFBUyxDQUFDLE9BQVEsQ0FBQyxRQUFTLENBQUMsT0FBUSxDQUFDLE9BQVEsQ0FBQyxTQUFVLENBQUMsT0FBUSxDQUFDLFNBQVUsQ0FBQyxTQUFVLENBQUMsTUFBTyxRQUFTLENBQUMsU0FBVSxDQUFDLEtBQU0sUUFBUyxDQUFDLFNBQVUsQ0FBQyxNQUFPLFFBQVMsQ0FBQyxTQUFVLENBQUMsS0FBTSxRQUFTLENBQUMsU0FBVSxDQUFDLE9BQVEsQ0FBQyxVQUFXLENBQUMsUUFBUyxDQUFDLFFBQVMsQ0FBQyxNQUFPLENBQUMsUUFBUyxDQUFDLE1BQU8sQ0FBQyxTQUFVLENBQUMsUUFBUyxDQUFDLFFBQVMsQ0FBQyxPQUFRLENBQUMsUUFBUyxDQUFDLE9BQVEsQ0FBQyxTQUFVLENBQUMsT0FBUSxDQUFDLFNBQVUsQ0FBQyxPQUFRLENBQUMsTUFBTyxDQUFDLFNBQVUsQ0FBQyxNQUFPLENBQUMsU0FBVSxDQUFDLE9BQVEsQ0FBQyxTQUFVLENBQUMsT0FBUSxDQUFDLFNBQVUsQ0FBQyxLQUFNLENBQUMsT0FBUSxDQUFDLEtBQU0sQ0FBQyxPQUFRLENBQUMsU0FBVSxDQUFDLE9BQVEsQ0FBQyxPQUFRLENBQUMsU0FBVSxDQUFDLE9BQVEsQ0FBQyxTQUFVLENBQUMsT0FBUSxDQUFDLE9BQVEsQ0FBQyxRQUFTLENBQUMsT0FBUSxDQUFDLE9BQVEsQ0FBQyxPQUFRLENBQUMsUUFBUyxDQUFDLE9BQVEsQ0FBQyxNQUFPLENBQUMsU0FBVSxDQUFDLE1BQU8sQ0FBQyxTQUFVLENBQUMsUUFBUyxDQUFDLFFBQVMsQ0FBQyxRQUFTLENBQUMsUUFBUyxDQUFDLEtBQU0sQ0FBQyxNQUFPLENBQUMsS0FBTSxDQUFDLE1BQU8sQ0FBQyxRQUFTLENBQUMsUUFBUyxDQUFDLFFBQVMsQ0FBQyxRQUFTLENBQUMsT0FBUSxDQUFDLFFBQVMsQ0FBQyxPQUFRLENBQUMsT0FBUSxDQUFDLFFBQVMsQ0FBQyxRQUFTLENBQUMsT0FBUSxDQUFDLFNBQVUsQ0FBQyxPQUFRLENBQUMsU0FBVSxDQUFDLFNBQVUsQ0FBQyxRQUFTLENBQUMsU0FBVSxDQUFDLFFBQVMsQ0FBQyxRQUFTLENBQUMsUUFBUyxDQUFDLFFBQVMsQ0FBQyxRQUFTLENBQUMsT0FBUSxDQUFDLFNBQVUsQ0FBQyxPQUFRLENBQUMsU0FBVSxDQUFDLFNBQVUsQ0FBQyxRQUFTLENBQUMsU0FBVSxDQUFDLFFBQVMsQ0FBQyxRQUFTLENBQUMsT0FBUSxDQUFDLE9BQVEsQ0FBQyxPQUFRLENBQUMsU0FBVSxDQUFDLE9BQVEsQ0FBQyxTQUFVLENBQUMsTUFBTyxDQUFDLFNBQVUsQ0FBQyxNQUFPLENBQUMsT0FBUSxDQUFDLE9BQVEsQ0FBQyxPQUFRLENBQUMsT0FBUSxDQUFDLFFBQVMsQ0FBQyxNQUFPLENBQUMsUUFBUyxDQUFDLE1BQU8sQ0FBQyxNQUFPLENBQUMsT0FBUSxDQUFDLE1BQU8sQ0FBQyxPQUFRLENBQUMsTUFBTyxDQUFDLE1BQU8sQ0FBQyxNQUFPLENBQUMsU0FBVSxDQUFDLE1BQU8sQ0FBQyxTQUFVLENBQUMsT0FBUSxDQUFDLE9BQVEsQ0FBQyxPQUFRLENBQUMsT0FBUSxDQUFDLE9BQVEsQ0FBQyxTQUFVLENBQUMsT0FBUSxDQUFDLFNBQVUsQ0FBQyxPQUFRLENBQUMsU0FBVSxDQUFDLE9BQVEsQ0FBQyxTQUFVLENBQUMsT0FBUSxDQUFDLE9BQVEsQ0FBQyxPQUFRLENBQUMsT0FBUSxDQUFDLE9BQVEsQ0FBQyxNQUFPLENBQUMsT0FBUSxDQUFDLE1BQU8sQ0FBQyxTQUFVLENBQUMsTUFBTyxDQUFDLFNBQVUsQ0FBQyxNQUFPLENBQUMsU0FBVSxDQUFDLE1BQU8sQ0FBQyxTQUFVLENBQUMsTUFBTyxDQUFDLE1BQU8sQ0FBQyxPQUFRLENBQUMsTUFBTyxDQUFDLE9BQVEsQ0FBQyxPQUFRLENBQUMsTUFBTyxDQUFDLE9BQVEsQ0FBQyxNQUFPLENBQUMsU0FBVSxDQUFDLE9BQVEsQ0FBQyxpQkFBa0IsQ0FBQyxPQUFRLENBQUMsT0FBUSxDQUFDLE1BQU8sQ0FBQyxPQUFRLENBQUMsTUFBTyxDQUFDLE1BQU8sQ0FBQyxTQUFVLENBQUMsTUFBTyxDQUFDLE9BQVEsQ0FBQyxPQUFRLENBQUMsT0FBUSxDQUFDLE9BQVEsQ0FBQyxPQUFRLENBQUMsVUFBVyxDQUFDLE9BQVEsQ0FBQyxPQUFRLENBQUMsU0FBVSxDQUFDLE9BQVEsQ0FBQyxPQUFRLENBQUMsT0FBUSxDQUFDLFNBQVUsQ0FBQyxPQUFRLENBQUMsU0FBVSxDQUFDLE1BQU8sQ0FBQyxPQUFR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LEVBQVE0cUYsUUFDVixPQUFPNXFGLEVBQVE0cUYsU0FBVSxFQUkzQkYsRUFBVTFxRixFQUFTMnRELEVBQ3BCLEVBQ0RnWCxPQUFRLFNBQWdCOG1CLEdBQ3RCdndGLEVBQUltc0IsTUFBTSxtREFFVixJQUFJcWtFLEVBQWlCRCxFQUFRaG1GLEtBQUksU0FBVTRoQixHQUN6QyxPQUFPa2pFLEVBQVVsakUsRUFDbEIsSUFFRG9qRSxFQUFZLFNBQVVpQixHQUV0QixJQUFLLElBQUk3bEYsRUFBSSxFQUFHQSxFQUFJNmxGLEVBQWU1bkYsT0FBUStCLElBQ3pDM0ssRUFBSW1zQixNQUFNcWtFLEVBQWU3bEYsSUFHdkI3RixFQUFROHFGLGlCQUNWcHJGLEVBQVE0dkUsWUFBWW1jLEdBR3RCenJGLEVBQVE0cUYsU0FBVSxDQUNuQixFQUNEdmpFLE1BQU8sU0FBZXFxQyxHQUNwQngyRCxFQUFJbXNCLE1BQU1xcUMsRUFDWCxFQUNEL3dDLE1BQU8sV0FDTHpsQixFQUFJbXNCLE1BQU0sdUJBQ1ZvakUsRUFBWSxRQUNiIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2Fzc2FuZHJlLy4vYXBwL2NvbXBvbmVudHMvQ3Vyc29yLmpzIiwid2VicGFjazovL2Nhc3NhbmRyZS8uL2FwcC9jb21wb25lbnRzL0Zvb3Rlci5qcyIsIndlYnBhY2s6Ly9jYXNzYW5kcmUvLi9hcHAvY29tcG9uZW50cy9QYXJhZ3JhcGguanMiLCJ3ZWJwYWNrOi8vY2Fzc2FuZHJlLy4vYXBwL2NvbXBvbmVudHMvUGFyYWxsYXguanMiLCJ3ZWJwYWNrOi8vY2Fzc2FuZHJlLy4vYXBwL2NvbXBvbmVudHMvUHJlbG9hZGVyLmpzIiwid2VicGFjazovL2Nhc3NhbmRyZS8uL2FwcC9jb21wb25lbnRzL1NWR1JldmVhbC5qcyIsIndlYnBhY2s6Ly9jYXNzYW5kcmUvLi9hcHAvY29tcG9uZW50cy9TY3JpYmJsZUxpbmsuanMiLCJ3ZWJwYWNrOi8vY2Fzc2FuZHJlLy4vYXBwL2NvbXBvbmVudHMvVGl0bGUuanMiLCJ3ZWJwYWNrOi8vY2Fzc2FuZHJlLy4vYXBwL2NvbXBvbmVudHMvV29yay5qcyIsIndlYnBhY2s6Ly9jYXNzYW5kcmUvLi9hcHAvY29tcG9uZW50cy9Xb3JrQ2FyZC5qcyIsIndlYnBhY2s6Ly9jYXNzYW5kcmUvLi9hcHAvY29udGFpbmVycy9BcHBFdmVudHMuanMiLCJ3ZWJwYWNrOi8vY2Fzc2FuZHJlLy4vYXBwL2NvbnRhaW5lcnMvUGFnZS5qcyIsIndlYnBhY2s6Ly9jYXNzYW5kcmUvLi9hcHAvcGFnZXMvQWJvdXQuanMiLCJ3ZWJwYWNrOi8vY2Fzc2FuZHJlLy4vYXBwL3BhZ2VzL0hvbWUuanMiLCJ3ZWJwYWNrOi8vY2Fzc2FuZHJlLy4vYXBwL3BhZ2VzL1Byb2plY3RzLmpzIiwid2VicGFjazovL2Nhc3NhbmRyZS8uL2FwcC9wYWdlcy9VaS5qcyIsIndlYnBhY2s6Ly9jYXNzYW5kcmUvLi9hcHAvdXRpbHMvU3ZnLmpzIiwid2VicGFjazovL2Nhc3NhbmRyZS8uL2FwcC91dGlscy9kb20uanMiLCJ3ZWJwYWNrOi8vY2Fzc2FuZHJlLy4vYXBwL3V0aWxzL2ludGVydmFsUHJvbWlzZS5qcyIsIndlYnBhY2s6Ly9jYXNzYW5kcmUvLi9ub2RlX21vZHVsZXMvQG1vdGlvbm9uZS9hbmltYXRpb24vZGlzdC9BbmltYXRpb24uZXMuanMiLCJ3ZWJwYWNrOi8vY2Fzc2FuZHJlLy4vbm9kZV9tb2R1bGVzL0Btb3Rpb25vbmUvYW5pbWF0aW9uL2Rpc3QvdXRpbHMvZWFzaW5nLmVzLmpzIiwid2VicGFjazovL2Nhc3NhbmRyZS8uL25vZGVfbW9kdWxlcy9AbW90aW9ub25lL2RvbS9kaXN0L2FuaW1hdGUvYW5pbWF0ZS1zdHlsZS5lcy5qcyIsIndlYnBhY2s6Ly9jYXNzYW5kcmUvLi9ub2RlX21vZHVsZXMvQG1vdGlvbm9uZS9kb20vZGlzdC9hbmltYXRlL2RhdGEuZXMuanMiLCJ3ZWJwYWNrOi8vY2Fzc2FuZHJlLy4vbm9kZV9tb2R1bGVzL0Btb3Rpb25vbmUvZG9tL2Rpc3QvYW5pbWF0ZS9pbmRleC5lcy5qcyIsIndlYnBhY2s6Ly9jYXNzYW5kcmUvLi9ub2RlX21vZHVsZXMvQG1vdGlvbm9uZS9kb20vZGlzdC9hbmltYXRlL3N0eWxlLmVzLmpzIiwid2VicGFjazovL2Nhc3NhbmRyZS8uL25vZGVfbW9kdWxlcy9AbW90aW9ub25lL2RvbS9kaXN0L2FuaW1hdGUvdXRpbHMvY29udHJvbHMuZXMuanMiLCJ3ZWJwYWNrOi8vY2Fzc2FuZHJlLy4vbm9kZV9tb2R1bGVzL0Btb3Rpb25vbmUvZG9tL2Rpc3QvYW5pbWF0ZS91dGlscy9jc3MtdmFyLmVzLmpzIiwid2VicGFjazovL2Nhc3NhbmRyZS8uL25vZGVfbW9kdWxlcy9AbW90aW9ub25lL2RvbS9kaXN0L2FuaW1hdGUvdXRpbHMvZWFzaW5nLmVzLmpzIiwid2VicGFjazovL2Nhc3NhbmRyZS8uL25vZGVfbW9kdWxlcy9AbW90aW9ub25lL2RvbS9kaXN0L2FuaW1hdGUvdXRpbHMvZmVhdHVyZS1kZXRlY3Rpb24uZXMuanMiLCJ3ZWJwYWNrOi8vY2Fzc2FuZHJlLy4vbm9kZV9tb2R1bGVzL0Btb3Rpb25vbmUvZG9tL2Rpc3QvYW5pbWF0ZS91dGlscy9nZXQtc3R5bGUtbmFtZS5lcy5qcyIsIndlYnBhY2s6Ly9jYXNzYW5kcmUvLi9ub2RlX21vZHVsZXMvQG1vdGlvbm9uZS9kb20vZGlzdC9hbmltYXRlL3V0aWxzL2tleWZyYW1lcy5lcy5qcyIsIndlYnBhY2s6Ly9jYXNzYW5kcmUvLi9ub2RlX21vZHVsZXMvQG1vdGlvbm9uZS9kb20vZGlzdC9hbmltYXRlL3V0aWxzL29wdGlvbnMuZXMuanMiLCJ3ZWJwYWNrOi8vY2Fzc2FuZHJlLy4vbm9kZV9tb2R1bGVzL0Btb3Rpb25vbmUvZG9tL2Rpc3QvYW5pbWF0ZS91dGlscy9zdG9wLWFuaW1hdGlvbi5lcy5qcyIsIndlYnBhY2s6Ly9jYXNzYW5kcmUvLi9ub2RlX21vZHVsZXMvQG1vdGlvbm9uZS9kb20vZGlzdC9hbmltYXRlL3V0aWxzL3RyYW5zZm9ybXMuZXMuanMiLCJ3ZWJwYWNrOi8vY2Fzc2FuZHJlLy4vbm9kZV9tb2R1bGVzL0Btb3Rpb25vbmUvZG9tL2Rpc3QvdGltZWxpbmUvaW5kZXguZXMuanMiLCJ3ZWJwYWNrOi8vY2Fzc2FuZHJlLy4vbm9kZV9tb2R1bGVzL0Btb3Rpb25vbmUvZG9tL2Rpc3QvdGltZWxpbmUvdXRpbHMvY2FsYy10aW1lLmVzLmpzIiwid2VicGFjazovL2Nhc3NhbmRyZS8uL25vZGVfbW9kdWxlcy9AbW90aW9ub25lL2RvbS9kaXN0L3RpbWVsaW5lL3V0aWxzL2VkaXQuZXMuanMiLCJ3ZWJwYWNrOi8vY2Fzc2FuZHJlLy4vbm9kZV9tb2R1bGVzL0Btb3Rpb25vbmUvZG9tL2Rpc3QvdGltZWxpbmUvdXRpbHMvc29ydC5lcy5qcyIsIndlYnBhY2s6Ly9jYXNzYW5kcmUvLi9ub2RlX21vZHVsZXMvQG1vdGlvbm9uZS9kb20vZGlzdC91dGlscy9yZXNvbHZlLWVsZW1lbnRzLmVzLmpzIiwid2VicGFjazovL2Nhc3NhbmRyZS8uL25vZGVfbW9kdWxlcy9AbW90aW9ub25lL2RvbS9kaXN0L3V0aWxzL3N0YWdnZXIuZXMuanMiLCJ3ZWJwYWNrOi8vY2Fzc2FuZHJlLy4vbm9kZV9tb2R1bGVzL0Btb3Rpb25vbmUvZWFzaW5nL2Rpc3QvY3ViaWMtYmV6aWVyLmVzLmpzIiwid2VicGFjazovL2Nhc3NhbmRyZS8uL25vZGVfbW9kdWxlcy9AbW90aW9ub25lL2Vhc2luZy9kaXN0L3N0ZXBzLmVzLmpzIiwid2VicGFjazovL2Nhc3NhbmRyZS8uL25vZGVfbW9kdWxlcy9AbW90aW9ub25lL3R5cGVzL2Rpc3QvTW90aW9uVmFsdWUuZXMuanMiLCJ3ZWJwYWNrOi8vY2Fzc2FuZHJlLy4vbm9kZV9tb2R1bGVzL0Btb3Rpb25vbmUvdXRpbHMvZGlzdC9hcnJheS5lcy5qcyIsIndlYnBhY2s6Ly9jYXNzYW5kcmUvLi9ub2RlX21vZHVsZXMvQG1vdGlvbm9uZS91dGlscy9kaXN0L2NsYW1wLmVzLmpzIiwid2VicGFjazovL2Nhc3NhbmRyZS8uL25vZGVfbW9kdWxlcy9AbW90aW9ub25lL3V0aWxzL2Rpc3QvZGVmYXVsdHMuZXMuanMiLCJ3ZWJwYWNrOi8vY2Fzc2FuZHJlLy4vbm9kZV9tb2R1bGVzL0Btb3Rpb25vbmUvdXRpbHMvZGlzdC9lYXNpbmcuZXMuanMiLCJ3ZWJwYWNrOi8vY2Fzc2FuZHJlLy4vbm9kZV9tb2R1bGVzL0Btb3Rpb25vbmUvdXRpbHMvZGlzdC9pbnRlcnBvbGF0ZS5lcy5qcyIsIndlYnBhY2s6Ly9jYXNzYW5kcmUvLi9ub2RlX21vZHVsZXMvQG1vdGlvbm9uZS91dGlscy9kaXN0L2lzLWN1YmljLWJlemllci5lcy5qcyIsIndlYnBhY2s6Ly9jYXNzYW5kcmUvLi9ub2RlX21vZHVsZXMvQG1vdGlvbm9uZS91dGlscy9kaXN0L2lzLWVhc2luZy1nZW5lcmF0b3IuZXMuanMiLCJ3ZWJwYWNrOi8vY2Fzc2FuZHJlLy4vbm9kZV9tb2R1bGVzL0Btb3Rpb25vbmUvdXRpbHMvZGlzdC9pcy1lYXNpbmctbGlzdC5lcy5qcyIsIndlYnBhY2s6Ly9jYXNzYW5kcmUvLi9ub2RlX21vZHVsZXMvQG1vdGlvbm9uZS91dGlscy9kaXN0L2lzLWZ1bmN0aW9uLmVzLmpzIiwid2VicGFjazovL2Nhc3NhbmRyZS8uL25vZGVfbW9kdWxlcy9AbW90aW9ub25lL3V0aWxzL2Rpc3QvaXMtbnVtYmVyLmVzLmpzIiwid2VicGFjazovL2Nhc3NhbmRyZS8uL25vZGVfbW9kdWxlcy9AbW90aW9ub25lL3V0aWxzL2Rpc3QvaXMtc3RyaW5nLmVzLmpzIiwid2VicGFjazovL2Nhc3NhbmRyZS8uL25vZGVfbW9kdWxlcy9AbW90aW9ub25lL3V0aWxzL2Rpc3QvbWl4LmVzLmpzIiwid2VicGFjazovL2Nhc3NhbmRyZS8uL25vZGVfbW9kdWxlcy9AbW90aW9ub25lL3V0aWxzL2Rpc3Qvbm9vcC5lcy5qcyIsIndlYnBhY2s6Ly9jYXNzYW5kcmUvLi9ub2RlX21vZHVsZXMvQG1vdGlvbm9uZS91dGlscy9kaXN0L29mZnNldC5lcy5qcyIsIndlYnBhY2s6Ly9jYXNzYW5kcmUvLi9ub2RlX21vZHVsZXMvQG1vdGlvbm9uZS91dGlscy9kaXN0L3Byb2dyZXNzLmVzLmpzIiwid2VicGFjazovL2Nhc3NhbmRyZS8uL25vZGVfbW9kdWxlcy9AbW90aW9ub25lL3V0aWxzL2Rpc3QvdGltZS5lcy5qcyIsIndlYnBhY2s6Ly9jYXNzYW5kcmUvLi9ub2RlX21vZHVsZXMvQG1vdGlvbm9uZS91dGlscy9kaXN0L3dyYXAuZXMuanMiLCJ3ZWJwYWNrOi8vY2Fzc2FuZHJlLy4vbm9kZV9tb2R1bGVzL2Fuc2ktaHRtbC1jb21tdW5pdHkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vY2Fzc2FuZHJlLy4vbm9kZV9tb2R1bGVzL2RlZXBtZXJnZS9kaXN0L2Nqcy5qcyIsIndlYnBhY2s6Ly9jYXNzYW5kcmUvLi9ub2RlX21vZHVsZXMvZXZlbnRzL2V2ZW50cy5qcyIsIndlYnBhY2s6Ly9jYXNzYW5kcmUvLi9ub2RlX21vZHVsZXMvZ3NhcC9DU1NQbHVnaW4uanMiLCJ3ZWJwYWNrOi8vY2Fzc2FuZHJlLy4vbm9kZV9tb2R1bGVzL2dzYXAvZ3NhcC1jb3JlLmpzIiwid2VicGFjazovL2Nhc3NhbmRyZS8uL25vZGVfbW9kdWxlcy9nc2FwL2luZGV4LmpzIiwid2VicGFjazovL2Nhc3NhbmRyZS8uL25vZGVfbW9kdWxlcy9oZXktbGlzdGVuL2Rpc3QvaGV5LWxpc3Rlbi5lcy5qcyIsIndlYnBhY2s6Ly9jYXNzYW5kcmUvLi9ub2RlX21vZHVsZXMvaHRtbC1lbnRpdGllcy9saWIvaHRtbDQtZW50aXRpZXMuanMiLCJ3ZWJwYWNrOi8vY2Fzc2FuZHJlLy4vbm9kZV9tb2R1bGVzL2h0bWwtZW50aXRpZXMvbGliL2h0bWw1LWVudGl0aWVzLmpzIiwid2VicGFjazovL2Nhc3NhbmRyZS8uL25vZGVfbW9kdWxlcy9odG1sLWVudGl0aWVzL2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly9jYXNzYW5kcmUvLi9ub2RlX21vZHVsZXMvaHRtbC1lbnRpdGllcy9saWIvc3Vycm9nYXRlLXBhaXJzLmpzIiwid2VicGFjazovL2Nhc3NhbmRyZS8uL25vZGVfbW9kdWxlcy9odG1sLWVudGl0aWVzL2xpYi94bWwtZW50aXRpZXMuanMiLCJ3ZWJwYWNrOi8vY2Fzc2FuZHJlLy4vbm9kZV9tb2R1bGVzL2xvZ2xldmVsL2xpYi9sb2dsZXZlbC5qcyIsIndlYnBhY2s6Ly9jYXNzYW5kcmUvLi9ub2RlX21vZHVsZXMvbW90aW9uL2Rpc3QvYW5pbWF0ZS5lcy5qcyIsIndlYnBhY2s6Ly9jYXNzYW5kcmUvLi9ub2RlX21vZHVsZXMvcXVlcnlzdHJpbmcvZGVjb2RlLmpzIiwid2VicGFjazovL2Nhc3NhbmRyZS8uL25vZGVfbW9kdWxlcy9xdWVyeXN0cmluZy9lbmNvZGUuanMiLCJ3ZWJwYWNrOi8vY2Fzc2FuZHJlLy4vbm9kZV9tb2R1bGVzL3F1ZXJ5c3RyaW5nL2luZGV4LmpzIiwid2VicGFjazovL2Nhc3NhbmRyZS9ub2RlX21vZHVsZXMvYnJvd3Nlci1wYWNrL19wcmVsdWRlLmpzIiwid2VicGFjazovL2Nhc3NhbmRyZS9saWIvZW50cnkuanMiLCJ3ZWJwYWNrOi8vY2Fzc2FuZHJlL2xpYi9ldmVudC9jbG9zZS5qcyIsIndlYnBhY2s6Ly9jYXNzYW5kcmUvbGliL2V2ZW50L2VtaXR0ZXIuanMiLCJ3ZWJwYWNrOi8vY2Fzc2FuZHJlL2xpYi9ldmVudC9ldmVudC5qcyIsIndlYnBhY2s6Ly9jYXNzYW5kcmUvbGliL2V2ZW50L2V2ZW50dGFyZ2V0LmpzIiwid2VicGFjazovL2Nhc3NhbmRyZS9saWIvZXZlbnQvdHJhbnMtbWVzc2FnZS5qcyIsIndlYnBhY2s6Ly9jYXNzYW5kcmUvbGliL2ZhY2FkZS5qcyIsIndlYnBhY2s6Ly9jYXNzYW5kcmUvbGliL2lmcmFtZS1ib290c3RyYXAuanMiLCJ3ZWJwYWNrOi8vY2Fzc2FuZHJlL2xpYi9pbmZvLWFqYXguanMiLCJ3ZWJwYWNrOi8vY2Fzc2FuZHJlL2xpYi9pbmZvLWlmcmFtZS1yZWNlaXZlci5qcyIsIndlYnBhY2s6Ly9jYXNzYW5kcmUvbGliL2luZm8taWZyYW1lLmpzIiwid2VicGFjazovL2Nhc3NhbmRyZS9saWIvaW5mby1yZWNlaXZlci5qcyIsIndlYnBhY2s6Ly9jYXNzYW5kcmUvbGliL2xvY2F0aW9uLmpzIiwid2VicGFjazovL2Nhc3NhbmRyZS9saWIvbWFpbi5qcyIsIndlYnBhY2s6Ly9jYXNzYW5kcmUvbGliL3NoaW1zLmpzIiwid2VicGFjazovL2Nhc3NhbmRyZS9saWIvdHJhbnNwb3J0LWxpc3QuanMiLCJ3ZWJwYWNrOi8vY2Fzc2FuZHJlL2xpYi90cmFuc3BvcnQvYnJvd3Nlci9hYnN0cmFjdC14aHIuanMiLCJ3ZWJwYWNrOi8vY2Fzc2FuZHJlL2xpYi90cmFuc3BvcnQvYnJvd3Nlci9ldmVudHNvdXJjZS5qcyIsIndlYnBhY2s6Ly9jYXNzYW5kcmUvbGliL3RyYW5zcG9ydC9icm93c2VyL3dlYnNvY2tldC5qcyIsIndlYnBhY2s6Ly9jYXNzYW5kcmUvbGliL3RyYW5zcG9ydC9ldmVudHNvdXJjZS5qcyIsIndlYnBhY2s6Ly9jYXNzYW5kcmUvbGliL3RyYW5zcG9ydC9odG1sZmlsZS5qcyIsIndlYnBhY2s6Ly9jYXNzYW5kcmUvbGliL3RyYW5zcG9ydC9pZnJhbWUuanMiLCJ3ZWJwYWNrOi8vY2Fzc2FuZHJlL2xpYi90cmFuc3BvcnQvanNvbnAtcG9sbGluZy5qcyIsIndlYnBhY2s6Ly9jYXNzYW5kcmUvbGliL3RyYW5zcG9ydC9saWIvYWpheC1iYXNlZC5qcyIsIndlYnBhY2s6Ly9jYXNzYW5kcmUvbGliL3RyYW5zcG9ydC9saWIvYnVmZmVyZWQtc2VuZGVyLmpzIiwid2VicGFjazovL2Nhc3NhbmRyZS9saWIvdHJhbnNwb3J0L2xpYi9pZnJhbWUtd3JhcC5qcyIsIndlYnBhY2s6Ly9jYXNzYW5kcmUvbGliL3RyYW5zcG9ydC9saWIvcG9sbGluZy5qcyIsIndlYnBhY2s6Ly9jYXNzYW5kcmUvbGliL3RyYW5zcG9ydC9saWIvc2VuZGVyLXJlY2VpdmVyLmpzIiwid2VicGFjazovL2Nhc3NhbmRyZS9saWIvdHJhbnNwb3J0L3JlY2VpdmVyL2V2ZW50c291cmNlLmpzIiwid2VicGFjazovL2Nhc3NhbmRyZS9saWIvdHJhbnNwb3J0L3JlY2VpdmVyL2h0bWxmaWxlLmpzIiwid2VicGFjazovL2Nhc3NhbmRyZS9saWIvdHJhbnNwb3J0L3JlY2VpdmVyL2pzb25wLmpzIiwid2VicGFjazovL2Nhc3NhbmRyZS9saWIvdHJhbnNwb3J0L3JlY2VpdmVyL3hoci5qcyIsIndlYnBhY2s6Ly9jYXNzYW5kcmUvbGliL3RyYW5zcG9ydC9zZW5kZXIvanNvbnAuanMiLCJ3ZWJwYWNrOi8vY2Fzc2FuZHJlL2xpYi90cmFuc3BvcnQvc2VuZGVyL3hkci5qcyIsIndlYnBhY2s6Ly9jYXNzYW5kcmUvbGliL3RyYW5zcG9ydC9zZW5kZXIveGhyLWNvcnMuanMiLCJ3ZWJwYWNrOi8vY2Fzc2FuZHJlL2xpYi90cmFuc3BvcnQvc2VuZGVyL3hoci1mYWtlLmpzIiwid2VicGFjazovL2Nhc3NhbmRyZS9saWIvdHJhbnNwb3J0L3NlbmRlci94aHItbG9jYWwuanMiLCJ3ZWJwYWNrOi8vY2Fzc2FuZHJlL2xpYi90cmFuc3BvcnQvd2Vic29ja2V0LmpzIiwid2VicGFjazovL2Nhc3NhbmRyZS9saWIvdHJhbnNwb3J0L3hkci1wb2xsaW5nLmpzIiwid2VicGFjazovL2Nhc3NhbmRyZS9saWIvdHJhbnNwb3J0L3hkci1zdHJlYW1pbmcuanMiLCJ3ZWJwYWNrOi8vY2Fzc2FuZHJlL2xpYi90cmFuc3BvcnQveGhyLXBvbGxpbmcuanMiLCJ3ZWJwYWNrOi8vY2Fzc2FuZHJlL2xpYi90cmFuc3BvcnQveGhyLXN0cmVhbWluZy5qcyIsIndlYnBhY2s6Ly9jYXNzYW5kcmUvbGliL3V0aWxzL2Jyb3dzZXItY3J5cHRvLmpzIiwid2VicGFjazovL2Nhc3NhbmRyZS9saWIvdXRpbHMvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly9jYXNzYW5kcmUvbGliL3V0aWxzL2VzY2FwZS5qcyIsIndlYnBhY2s6Ly9jYXNzYW5kcmUvbGliL3V0aWxzL2V2ZW50LmpzIiwid2VicGFjazovL2Nhc3NhbmRyZS9saWIvdXRpbHMvaWZyYW1lLmpzIiwid2VicGFjazovL2Nhc3NhbmRyZS9saWIvdXRpbHMvbG9nLmpzIiwid2VicGFjazovL2Nhc3NhbmRyZS9saWIvdXRpbHMvb2JqZWN0LmpzIiwid2VicGFjazovL2Nhc3NhbmRyZS9saWIvdXRpbHMvcmFuZG9tLmpzIiwid2VicGFjazovL2Nhc3NhbmRyZS9saWIvdXRpbHMvdHJhbnNwb3J0LmpzIiwid2VicGFjazovL2Nhc3NhbmRyZS9saWIvdXRpbHMvdXJsLmpzIiwid2VicGFjazovL2Nhc3NhbmRyZS9saWIvdmVyc2lvbi5qcyIsIndlYnBhY2s6Ly9jYXNzYW5kcmUvbm9kZV9tb2R1bGVzL2RlYnVnL25vZGVfbW9kdWxlcy9tcy9pbmRleC5qcyIsIndlYnBhY2s6Ly9jYXNzYW5kcmUvbm9kZV9tb2R1bGVzL2RlYnVnL3NyYy9icm93c2VyLmpzIiwid2VicGFjazovL2Nhc3NhbmRyZS9ub2RlX21vZHVsZXMvZGVidWcvc3JjL2NvbW1vbi5qcyIsIndlYnBhY2s6Ly9jYXNzYW5kcmUvbm9kZV9tb2R1bGVzL2luaGVyaXRzL2luaGVyaXRzX2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vY2Fzc2FuZHJlL25vZGVfbW9kdWxlcy9xdWVyeXN0cmluZ2lmeS9pbmRleC5qcyIsIndlYnBhY2s6Ly9jYXNzYW5kcmUvbm9kZV9tb2R1bGVzL3JlcXVpcmVzLXBvcnQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vY2Fzc2FuZHJlL25vZGVfbW9kdWxlcy91cmwtcGFyc2UvaW5kZXguanMiLCJ3ZWJwYWNrOi8vY2Fzc2FuZHJlLy4vbm9kZV9tb2R1bGVzL3NwbGl0LXR5cGUvZGlzdC9pbmRleC5qcyIsIndlYnBhY2s6Ly9jYXNzYW5kcmUvLi9ub2RlX21vZHVsZXMvdGlueS1lbWl0dGVyL2luZGV4LmpzIiwid2VicGFjazovL2Nhc3NhbmRyZS8uL25vZGVfbW9kdWxlcy90c2xpYi90c2xpYi5lczYuanMiLCJ3ZWJwYWNrOi8vY2Fzc2FuZHJlLy4vbm9kZV9tb2R1bGVzL3VybC9ub2RlX21vZHVsZXMvcHVueWNvZGUvcHVueWNvZGUuanMiLCJ3ZWJwYWNrOi8vY2Fzc2FuZHJlLy4vbm9kZV9tb2R1bGVzL3VybC91cmwuanMiLCJ3ZWJwYWNrOi8vY2Fzc2FuZHJlLy4vbm9kZV9tb2R1bGVzL3VybC91dGlsLmpzIiwid2VicGFjazovL2Nhc3NhbmRyZS8uL25vZGVfbW9kdWxlcy92aXJ0dWFsLXNjcm9sbC9saWIvdmlydHVhbHNjcm9sbC5qcyIsIndlYnBhY2s6Ly9jYXNzYW5kcmUvLi9ub2RlX21vZHVsZXMvd2VicGFjay1kZXYtc2VydmVyL2NsaWVudC9jbGllbnRzL0Jhc2VDbGllbnQuanMiLCJ3ZWJwYWNrOi8vY2Fzc2FuZHJlLy4vbm9kZV9tb2R1bGVzL3dlYnBhY2stZGV2LXNlcnZlci9jbGllbnQvY2xpZW50cy9Tb2NrSlNDbGllbnQuanMiLCJ3ZWJwYWNrOi8vY2Fzc2FuZHJlLy4vbm9kZV9tb2R1bGVzL3dlYnBhY2stZGV2LXNlcnZlci9jbGllbnQvb3ZlcmxheS5qcyIsIndlYnBhY2s6Ly9jYXNzYW5kcmUvLi9ub2RlX21vZHVsZXMvd2VicGFjay1kZXYtc2VydmVyL2NsaWVudC9zb2NrZXQuanMiLCJ3ZWJwYWNrOi8vY2Fzc2FuZHJlLy4vbm9kZV9tb2R1bGVzL3dlYnBhY2stZGV2LXNlcnZlci9jbGllbnQvdXRpbHMvY3JlYXRlU29ja2V0VXJsLmpzIiwid2VicGFjazovL2Nhc3NhbmRyZS8uL25vZGVfbW9kdWxlcy93ZWJwYWNrLWRldi1zZXJ2ZXIvY2xpZW50L3V0aWxzL2dldEN1cnJlbnRTY3JpcHRTb3VyY2UuanMiLCJ3ZWJwYWNrOi8vY2Fzc2FuZHJlLy4vbm9kZV9tb2R1bGVzL3dlYnBhY2stZGV2LXNlcnZlci9jbGllbnQvdXRpbHMvbG9nLmpzIiwid2VicGFjazovL2Nhc3NhbmRyZS8uL25vZGVfbW9kdWxlcy93ZWJwYWNrLWRldi1zZXJ2ZXIvY2xpZW50L3V0aWxzL3JlbG9hZEFwcC5qcyIsIndlYnBhY2s6Ly9jYXNzYW5kcmUvLi9ub2RlX21vZHVsZXMvd2VicGFjay1kZXYtc2VydmVyL2NsaWVudC91dGlscy9zZW5kTWVzc2FnZS5qcyIsIndlYnBhY2s6Ly9jYXNzYW5kcmUvLi9ub2RlX21vZHVsZXMvd2VicGFjay1kZXYtc2VydmVyL25vZGVfbW9kdWxlcy9hbnNpLXJlZ2V4L2luZGV4LmpzIiwid2VicGFjazovL2Nhc3NhbmRyZS8uL25vZGVfbW9kdWxlcy93ZWJwYWNrLWRldi1zZXJ2ZXIvbm9kZV9tb2R1bGVzL3N0cmlwLWFuc2kvaW5kZXguanMiLCJ3ZWJwYWNrOi8vY2Fzc2FuZHJlLy4vbm9kZV9tb2R1bGVzL3dlYnBhY2svaG90L2VtaXR0ZXIuanMiLCJ3ZWJwYWNrOi8vY2Fzc2FuZHJlLy4vbm9kZV9tb2R1bGVzL3dlYnBhY2svaG90L2xvZy5qcyIsIndlYnBhY2s6Ly9jYXNzYW5kcmUvLi9ub2RlX21vZHVsZXMvd2VicGFjay9ob3QvIHN5bmMgbm9ucmVjdXJzaXZlIF5cXC5cXC9sb2ckIiwid2VicGFjazovL2Nhc3NhbmRyZS8uL25vZGVfbW9kdWxlcy9Ac3R1ZGlvLWZyZWlnaHQvbGVuaXMvZGlzdC9sZW5pcy5tb2Rlcm4ubWpzIiwid2VicGFjazovL2Nhc3NhbmRyZS8uL25vZGVfbW9kdWxlcy9Ac3R1ZGlvbWV0YS9qcy10b29sa2l0L0Jhc2UvaW5kZXguanMiLCJ3ZWJwYWNrOi8vY2Fzc2FuZHJlLy4vbm9kZV9tb2R1bGVzL0BzdHVkaW9tZXRhL2pzLXRvb2xraXQvQmFzZS9tYW5hZ2Vycy9BYnN0cmFjdE1hbmFnZXIuanMiLCJ3ZWJwYWNrOi8vY2Fzc2FuZHJlLy4vbm9kZV9tb2R1bGVzL0BzdHVkaW9tZXRhL2pzLXRvb2xraXQvQmFzZS9tYW5hZ2Vycy9DaGlsZHJlbk1hbmFnZXIuanMiLCJ3ZWJwYWNrOi8vY2Fzc2FuZHJlLy4vbm9kZV9tb2R1bGVzL0BzdHVkaW9tZXRhL2pzLXRvb2xraXQvQmFzZS9tYW5hZ2Vycy9FdmVudHNNYW5hZ2VyLmpzIiwid2VicGFjazovL2Nhc3NhbmRyZS8uL25vZGVfbW9kdWxlcy9Ac3R1ZGlvbWV0YS9qcy10b29sa2l0L0Jhc2UvbWFuYWdlcnMvT3B0aW9uc01hbmFnZXIuanMiLCJ3ZWJwYWNrOi8vY2Fzc2FuZHJlLy4vbm9kZV9tb2R1bGVzL0BzdHVkaW9tZXRhL2pzLXRvb2xraXQvQmFzZS9tYW5hZ2Vycy9SZWZzTWFuYWdlci5qcyIsIndlYnBhY2s6Ly9jYXNzYW5kcmUvLi9ub2RlX21vZHVsZXMvQHN0dWRpb21ldGEvanMtdG9vbGtpdC9CYXNlL21hbmFnZXJzL1NlcnZpY2VzTWFuYWdlci5qcyIsIndlYnBhY2s6Ly9jYXNzYW5kcmUvLi9ub2RlX21vZHVsZXMvQHN0dWRpb21ldGEvanMtdG9vbGtpdC9CYXNlL3V0aWxzLmpzIiwid2VicGFjazovL2Nhc3NhbmRyZS8uL25vZGVfbW9kdWxlcy9Ac3R1ZGlvbWV0YS9qcy10b29sa2l0L2RlY29yYXRvcnMvd2l0aEJyZWFrcG9pbnRPYnNlcnZlci5qcyIsIndlYnBhY2s6Ly9jYXNzYW5kcmUvLi9ub2RlX21vZHVsZXMvQHN0dWRpb21ldGEvanMtdG9vbGtpdC9kZWNvcmF0b3JzL3dpdGhJbnRlcnNlY3Rpb25PYnNlcnZlci5qcyIsIndlYnBhY2s6Ly9jYXNzYW5kcmUvLi9ub2RlX21vZHVsZXMvQHN0dWRpb21ldGEvanMtdG9vbGtpdC9kZWNvcmF0b3JzL3dpdGhNb3VudFdoZW5JblZpZXcuanMiLCJ3ZWJwYWNrOi8vY2Fzc2FuZHJlLy4vbm9kZV9tb2R1bGVzL0BzdHVkaW9tZXRhL2pzLXRvb2xraXQvZGVjb3JhdG9ycy93aXRoU2Nyb2xsZWRJblZpZXcuanMiLCJ3ZWJwYWNrOi8vY2Fzc2FuZHJlLy4vbm9kZV9tb2R1bGVzL0BzdHVkaW9tZXRhL2pzLXRvb2xraXQvaGVscGVycy9nZXRJbnN0YW5jZUZyb21FbGVtZW50LmpzIiwid2VicGFjazovL2Nhc3NhbmRyZS8uL25vZGVfbW9kdWxlcy9Ac3R1ZGlvbWV0YS9qcy10b29sa2l0L3NlcnZpY2VzL2tleS5qcyIsIndlYnBhY2s6Ly9jYXNzYW5kcmUvLi9ub2RlX21vZHVsZXMvQHN0dWRpb21ldGEvanMtdG9vbGtpdC9zZXJ2aWNlcy9sb2FkLmpzIiwid2VicGFjazovL2Nhc3NhbmRyZS8uL25vZGVfbW9kdWxlcy9Ac3R1ZGlvbWV0YS9qcy10b29sa2l0L3NlcnZpY2VzL3BvaW50ZXIuanMiLCJ3ZWJwYWNrOi8vY2Fzc2FuZHJlLy4vbm9kZV9tb2R1bGVzL0BzdHVkaW9tZXRhL2pzLXRvb2xraXQvc2VydmljZXMvcmFmLmpzIiwid2VicGFjazovL2Nhc3NhbmRyZS8uL25vZGVfbW9kdWxlcy9Ac3R1ZGlvbWV0YS9qcy10b29sa2l0L3NlcnZpY2VzL3Jlc2l6ZS5qcyIsIndlYnBhY2s6Ly9jYXNzYW5kcmUvLi9ub2RlX21vZHVsZXMvQHN0dWRpb21ldGEvanMtdG9vbGtpdC9zZXJ2aWNlcy9zY3JvbGwuanMiLCJ3ZWJwYWNrOi8vY2Fzc2FuZHJlLy4vbm9kZV9tb2R1bGVzL0BzdHVkaW9tZXRhL2pzLXRvb2xraXQvc2VydmljZXMvc2VydmljZS5qcyIsIndlYnBhY2s6Ly9jYXNzYW5kcmUvLi9ub2RlX21vZHVsZXMvQHN0dWRpb21ldGEvanMtdG9vbGtpdC91dGlscy9jc3MvY2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly9jYXNzYW5kcmUvLi9ub2RlX21vZHVsZXMvQHN0dWRpb21ldGEvanMtdG9vbGtpdC91dGlscy9jc3MvZ2V0T2Zmc2V0U2l6ZXMuanMiLCJ3ZWJwYWNrOi8vY2Fzc2FuZHJlLy4vbm9kZV9tb2R1bGVzL0BzdHVkaW9tZXRhL2pzLXRvb2xraXQvdXRpbHMvZGVib3VuY2UuanMiLCJ3ZWJwYWNrOi8vY2Fzc2FuZHJlLy4vbm9kZV9tb2R1bGVzL0BzdHVkaW9tZXRhL2pzLXRvb2xraXQvdXRpbHMvaGFzLmpzIiwid2VicGFjazovL2Nhc3NhbmRyZS8uL25vZGVfbW9kdWxlcy9Ac3R1ZGlvbWV0YS9qcy10b29sa2l0L3V0aWxzL2lzLmpzIiwid2VicGFjazovL2Nhc3NhbmRyZS8uL25vZGVfbW9kdWxlcy9Ac3R1ZGlvbWV0YS9qcy10b29sa2l0L3V0aWxzL2tleUNvZGVzLmpzIiwid2VicGFjazovL2Nhc3NhbmRyZS8uL25vZGVfbW9kdWxlcy9Ac3R1ZGlvbWV0YS9qcy10b29sa2l0L3V0aWxzL21hdGgvY2xhbXAuanMiLCJ3ZWJwYWNrOi8vY2Fzc2FuZHJlLy4vbm9kZV9tb2R1bGVzL0BzdHVkaW9tZXRhL2pzLXRvb2xraXQvdXRpbHMvbWF0aC9jbGFtcDAxLmpzIiwid2VicGFjazovL2Nhc3NhbmRyZS8uL25vZGVfbW9kdWxlcy9Ac3R1ZGlvbWV0YS9qcy10b29sa2l0L3V0aWxzL21hdGgvY3JlYXRlRWFzZXMuanMiLCJ3ZWJwYWNrOi8vY2Fzc2FuZHJlLy4vbm9kZV9tb2R1bGVzL0BzdHVkaW9tZXRhL2pzLXRvb2xraXQvdXRpbHMvbWF0aC9kYW1wLmpzIiwid2VicGFjazovL2Nhc3NhbmRyZS8uL25vZGVfbW9kdWxlcy9Ac3R1ZGlvbWV0YS9qcy10b29sa2l0L3V0aWxzL21hdGgvZWFzZS5qcyIsIndlYnBhY2s6Ly9jYXNzYW5kcmUvLi9ub2RlX21vZHVsZXMvQHN0dWRpb21ldGEvanMtdG9vbGtpdC91dGlscy9tYXRoL2xlcnAuanMiLCJ3ZWJwYWNrOi8vY2Fzc2FuZHJlLy4vbm9kZV9tb2R1bGVzL0BzdHVkaW9tZXRhL2pzLXRvb2xraXQvdXRpbHMvbWF0aC9tYXAuanMiLCJ3ZWJwYWNrOi8vY2Fzc2FuZHJlLy4vbm9kZV9tb2R1bGVzL0BzdHVkaW9tZXRhL2pzLXRvb2xraXQvdXRpbHMvbmV4dEZyYW1lLmpzIiwid2VicGFjazovL2Nhc3NhbmRyZS8uL25vZGVfbW9kdWxlcy9Ac3R1ZGlvbWV0YS9qcy10b29sa2l0L3V0aWxzL25vb3AuanMiLCJ3ZWJwYWNrOi8vY2Fzc2FuZHJlLy4vbm9kZV9tb2R1bGVzL0BzdHVkaW9tZXRhL2pzLXRvb2xraXQvdXRpbHMvb2JqZWN0L2dldEFsbFByb3BlcnRpZXMuanMiLCJ3ZWJwYWNrOi8vY2Fzc2FuZHJlLy4vbm9kZV9tb2R1bGVzL0BzdHVkaW9tZXRhL2pzLXRvb2xraXQvdXRpbHMvc2NoZWR1bGVyLmpzIiwid2VicGFjazovL2Nhc3NhbmRyZS8uL25vZGVfbW9kdWxlcy9Ac3R1ZGlvbWV0YS9qcy10b29sa2l0L3V0aWxzL3R3ZWVuLmpzIiwid2VicGFjazovL2Nhc3NhbmRyZS93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9jYXNzYW5kcmUvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL2Nhc3NhbmRyZS93ZWJwYWNrL3J1bnRpbWUvZ2xvYmFsIiwid2VicGFjazovL2Nhc3NhbmRyZS93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL2Nhc3NhbmRyZS93ZWJwYWNrL3J1bnRpbWUvbWFrZSBuYW1lc3BhY2Ugb2JqZWN0Iiwid2VicGFjazovL2Nhc3NhbmRyZS93ZWJwYWNrL3J1bnRpbWUvbm9kZSBtb2R1bGUgZGVjb3JhdG9yIiwid2VicGFjazovL2Nhc3NhbmRyZS8uL2FwcC9BcHAuanMiLCJ3ZWJwYWNrOi8vY2Fzc2FuZHJlLy4vbm9kZV9tb2R1bGVzL3dlYnBhY2stZGV2LXNlcnZlci9jbGllbnQvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQmFzZSwgd2l0aEJyZWFrcG9pbnRPYnNlcnZlciB9IGZyb20gJ0BzdHVkaW9tZXRhL2pzLXRvb2xraXQnO1xuaW1wb3J0IHsgYWRkQ2xhc3MsIGNsYW1wLCBnZXRPZmZzZXRTaXplcywgcmVtb3ZlQ2xhc3MsIHRvZ2dsZUNsYXNzIH0gZnJvbSAnQHN0dWRpb21ldGEvanMtdG9vbGtpdC91dGlscyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEN1cnNvciBleHRlbmRzIHdpdGhCcmVha3BvaW50T2JzZXJ2ZXIoQmFzZSkge1xuICAgIHN0YXRpYyBjb25maWcgPSB7XG4gICAgICAgIG5hbWU6ICdDdXJzb3InLFxuICAgICAgICByZWZzOiBbJ2lubmVyJ10sXG4gICAgICAgIGxvZzogdHJ1ZSxcbiAgICB9O1xuXG4gICAgaXNPbkxpbmsgPSBmYWxzZTtcbiAgICBpc09uU2xpZGVyID0gZmFsc2U7XG4gICAgaXNMaXN0ZW5pbmcgPSB0cnVlO1xuICAgIHBvc2l0aW9uID0ge1xuICAgICAgICB4OiAwLFxuICAgICAgICB5OiAwLFxuICAgIH07XG4gICAgc2Nyb2xsID0ge1xuICAgICAgICBpc0FjdGl2ZTogZmFsc2UsXG4gICAgICAgIGRlbHRhWTogMCxcbiAgICB9O1xuICAgIGNvbG9yID0gbnVsbDtcbiAgICBzdGlja3kgPSB7XG4gICAgICAgIGlzQWN0aXZlOiBmYWxzZSxcbiAgICAgICAgc2lkZTogbnVsbCxcbiAgICB9O1xuICAgIGN1cnJlbnRUYXJnZXQgPSB7XG4gICAgICAgIGVsZW1lbnQ6IG51bGwsXG4gICAgICAgIGJveDogbnVsbCxcbiAgICB9O1xuXG4gICAgbW92ZWQgKHsgeCwgeSwgbGFzdCwgaXNEb3duIH0pIHtcbiAgICAgICAgdG9nZ2xlQ2xhc3ModGhpcy4kZWwsICdpcy1kb3duJywgaXNEb3duKTtcbiAgICAgICAgdGhpcy5zY3JvbGwuaXNBY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5zY3JvbGwuZGVsdGFZID0gMDtcblxuICAgICAgICBpZiAodGhpcy5zdGlja3kuaXNBY3RpdmUpIHJldHVybjtcbiAgICAgICAgdGhpcy5wb3NpdGlvbiA9IHsgeCwgeSB9O1xuICAgICAgICB0aGlzLnNldFZhcmlhYmxlcyh7XG4gICAgICAgICAgICB0cmFuc2xhdGVYOiB0aGlzLnBvc2l0aW9uLngsXG4gICAgICAgICAgICB0cmFuc2xhdGVZOiB0aGlzLnBvc2l0aW9uLnksXG4gICAgICAgICAgICBza2V3WDogY2xhbXAoeCAtIGxhc3QueCwgLTEwLCAxMCksXG4gICAgICAgICAgICBza2V3WTogY2xhbXAoeSAtIGxhc3QueSwgLTEwLCAxMCksXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHNjcm9sbGVkICh7IGRlbHRhIH0pIHtcbiAgICAgICAgaWYgKCF0aGlzLmN1cnJlbnRUYXJnZXQuZWxlbWVudCkgcmV0dXJuO1xuXG4gICAgICAgIHRoaXMuc2Nyb2xsLmlzQWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5zY3JvbGwuZGVsdGFZICs9IGRlbHRhLnk7XG5cbiAgICAgICAgaWYgKHRoaXMucG9zaXRpb24ueSArIHRoaXMuc2Nyb2xsLmRlbHRhWSA8IHRoaXMuY3VycmVudFRhcmdldC5ib3gudG9wIHx8IHRoaXMucG9zaXRpb24ueSArIHRoaXMuc2Nyb2xsLmRlbHRhWSA+IHRoaXMuY3VycmVudFRhcmdldC5ib3guYm90dG9tKSB7XG4gICAgICAgICAgICB0aGlzLm9uTGVhdmVMaW5rKHsgLi4udGhpcy5jdXJyZW50VGFyZ2V0LmVsZW1lbnQgfSk7XG4gICAgICAgICAgICB0aGlzLm9uTGVhdmVTbGlkZXIoeyAuLi50aGlzLmN1cnJlbnRUYXJnZXQuZWxlbWVudCB9KTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLnN0aWNreS5pc0FjdGl2ZSkge1xuICAgICAgICAgICAgdGhpcy5zZXRTdGlja3kodGhpcy5jdXJyZW50VGFyZ2V0LmVsZW1lbnQsIHRydWUsIHRoaXMuc3RpY2t5LnNpZGUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc2V0Q29sb3IgKG5ld0N1cnNvckNvbG9yKSB7XG4gICAgICAgIGlmICghbmV3Q3Vyc29yQ29sb3IpIHtcbiAgICAgICAgICAgIHJlbW92ZUNsYXNzKHRoaXMuJGVsLCBgaXMtJHsgdGhpcy5jb2xvciB9YCk7XG4gICAgICAgICAgICB0aGlzLmNvbG9yID0gbnVsbDtcbiAgICAgICAgfSBlbHNlIGlmIChuZXdDdXJzb3JDb2xvciAhPT0gdGhpcy5jb2xvcikge1xuICAgICAgICAgICAgcmVtb3ZlQ2xhc3ModGhpcy4kZWwsIGBpcy0keyB0aGlzLmNvbG9yIH1gKTtcbiAgICAgICAgICAgIHRoaXMuY29sb3IgPSBuZXdDdXJzb3JDb2xvcjtcbiAgICAgICAgICAgIGFkZENsYXNzKHRoaXMuJGVsLCBgaXMtJHsgdGhpcy5jb2xvciB9YCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzZXRTdGlja3kgKHRhcmdldCwgaXNTdGlja3ksIGN1cnNvclN0aWNreVNpZGUgPSAnY2VudGVyJykge1xuICAgICAgICBpZiAoaXNTdGlja3kgPT09IHVuZGVmaW5lZCB8fCBpc1N0aWNreSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHRoaXMuc3RpY2t5LmlzQWN0aXZlID0gZmFsc2U7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnN0aWNreS5pc0FjdGl2ZSA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLnN0aWNreS5zaWRlID0gY3Vyc29yU3RpY2t5U2lkZTtcbiAgICAgICAgICAgIGNvbnN0IHN0aWNreVRhcmdldCA9IHRhcmdldC5xdWVyeVNlbGVjdG9yKCdbZGF0YS1jdXJzb3ItdGFyZ2V0XScpID8/IHRhcmdldDtcbiAgICAgICAgICAgIGNvbnN0IHRhcmdldEJveCA9IHN0aWNreVRhcmdldC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgICAgIGNvbnN0IGN1cnNvckJveCA9IGdldE9mZnNldFNpemVzKHRoaXMuJHJlZnMuaW5uZXIpO1xuICAgICAgICAgICAgY29uc3Qgb2Zmc2V0WCA9IGN1cnNvclN0aWNreVNpZGUgPT09ICdyaWdodCdcbiAgICAgICAgICAgICAgICA/IHRhcmdldEJveC53aWR0aCAvIDIgKyBjdXJzb3JCb3gud2lkdGggLyA0XG4gICAgICAgICAgICAgICAgOiBjdXJzb3JTdGlja3lTaWRlID09PSAnbGVmdCdcbiAgICAgICAgICAgICAgICAgICAgPyAtIHRhcmdldEJveC53aWR0aCAvIDJcbiAgICAgICAgICAgICAgICAgICAgOiAwO1xuICAgICAgICAgICAgY29uc3QgdHJhbnNsYXRlWCA9IHRhcmdldEJveC54ICsgdGFyZ2V0Qm94LndpZHRoIC8gMiAtIGN1cnNvckJveC53aWR0aCAvIDIgKyBvZmZzZXRYO1xuICAgICAgICAgICAgY29uc3QgdHJhbnNsYXRlWSA9IHRhcmdldEJveC55ICsgdGFyZ2V0Qm94LmhlaWdodCAvIDIgLSBjdXJzb3JCb3guaGVpZ2h0IC8gMiArIDY7XG4gICAgICAgICAgICB0aGlzLnNldFZhcmlhYmxlcyh7IHRyYW5zbGF0ZVgsIHRyYW5zbGF0ZVksIHNrZXdYOiAwLCBza2V3WTogMCwgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBvbkVudGVyTGluayAoeyB0YXJnZXQgfSkge1xuICAgICAgICBpZiAoIXRoaXMuaXNMaXN0ZW5pbmcpIHJldHVybjtcbiAgICAgICAgdGhpcy5pc09uTGluayA9IHRydWU7XG4gICAgICAgIHRoaXMuY3VycmVudFRhcmdldC5lbGVtZW50ID0gdGFyZ2V0O1xuICAgICAgICB0aGlzLmN1cnJlbnRUYXJnZXQuYm94ID0gdGFyZ2V0LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICBjb25zdCB7IGN1cnNvckNvbG9yLCBjdXJzb3JTdGlja3ksIGN1cnNvclN0aWNreVNpZGUgfSA9IHRoaXMuY3VycmVudFRhcmdldC5lbGVtZW50LmRhdGFzZXQ7XG4gICAgICAgIHRoaXMuc2V0Q29sb3IoY3Vyc29yQ29sb3IpO1xuICAgICAgICB0aGlzLnNldFN0aWNreSh0YXJnZXQsIGN1cnNvclN0aWNreSwgY3Vyc29yU3RpY2t5U2lkZSk7XG4gICAgICAgIGFkZENsYXNzKHRoaXMuJGVsLCAnb24tbGluaycpO1xuICAgIH1cblxuICAgIG9uTGVhdmVMaW5rICh7IHRhcmdldCB9KSB7XG4gICAgICAgIHRoaXMuaXNPbkxpbmsgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5jdXJyZW50VGFyZ2V0LmVsZW1lbnQgPSBudWxsO1xuICAgICAgICB0aGlzLmN1cnJlbnRUYXJnZXQuYm94ID0gbnVsbDtcbiAgICAgICAgdGhpcy5zZXRTdGlja3kodGFyZ2V0LCBmYWxzZSk7XG4gICAgICAgIHJlbW92ZUNsYXNzKHRoaXMuJGVsLCAnb24tbGluaycpO1xuICAgIH1cblxuICAgIG9uRW50ZXJTbGlkZXIgKHsgdGFyZ2V0IH0pIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzTGlzdGVuaW5nKSByZXR1cm47XG4gICAgICAgIHRoaXMuaXNPblNsaWRlciA9IHRydWU7XG4gICAgICAgIHRoaXMuY3VycmVudFRhcmdldC5lbGVtZW50ID0gdGFyZ2V0O1xuICAgICAgICB0aGlzLmN1cnJlbnRUYXJnZXQuYm94ID0gdGFyZ2V0LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICB0aGlzLnNldENvbG9yKHRhcmdldCk7XG4gICAgICAgIGFkZENsYXNzKHRoaXMuJGVsLCAnb24tc2xpZGVyJyk7XG4gICAgfVxuXG4gICAgb25MZWF2ZVNsaWRlciAoeyB0YXJnZXQgfSkge1xuICAgICAgICB0aGlzLmlzT25TbGlkZXIgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5jdXJyZW50VGFyZ2V0LmVsZW1lbnQgPSBudWxsO1xuICAgICAgICB0aGlzLmN1cnJlbnRUYXJnZXQuYm94ID0gbnVsbDtcbiAgICAgICAgcmVtb3ZlQ2xhc3ModGhpcy4kZWwsICdvbi1zbGlkZXInKTtcbiAgICB9XG5cbiAgICBzZXRWYXJpYWJsZXMgKHsgdHJhbnNsYXRlWCwgdHJhbnNsYXRlWSwgc2tld1gsIHNrZXdZIH0pIHtcbiAgICAgICAgdGhpcy4kZWwuc3R5bGUuc2V0UHJvcGVydHkoJy0tdHJhbnNsYXRlWCcsIGAkeyB0cmFuc2xhdGVYIH1weGApO1xuICAgICAgICB0aGlzLiRlbC5zdHlsZS5zZXRQcm9wZXJ0eSgnLS10cmFuc2xhdGVZJywgYCR7IHRyYW5zbGF0ZVkgfXB4YCk7XG4gICAgICAgIHRoaXMuJGVsLnN0eWxlLnNldFByb3BlcnR5KCctLXNrZXdYJywgYCR7IHNrZXdYIH1kZWdgKTtcbiAgICAgICAgdGhpcy4kZWwuc3R5bGUuc2V0UHJvcGVydHkoJy0tc2tld1knLCBgJHsgc2tld1kgfWRlZ2ApO1xuICAgIH1cblxuICAgIGRpc2FibGUoKSB7XG4gICAgICAgIHRoaXMuaXNMaXN0ZW5pbmcgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5vbkxlYXZlTGluayh7IC4uLnRoaXMuY3VycmVudFRhcmdldC5lbGVtZW50IH0pO1xuICAgICAgICB0aGlzLm9uTGVhdmVTbGlkZXIoeyAuLi50aGlzLmN1cnJlbnRUYXJnZXQuZWxlbWVudCB9KTtcbiAgICB9XG5cbiAgICBlbmFibGUoKSB7XG4gICAgICAgIHRoaXMuaXNMaXN0ZW5pbmcgPSB0cnVlO1xuICAgICAgICBpZiAodGhpcy5pc09uU2xpZGVyKSB7XG4gICAgICAgICAgICB0aGlzLnNldENvbG9yKHRhcmdldCk7XG4gICAgICAgICAgICBhZGRDbGFzcyh0aGlzLiRlbCwgJ29uLXNsaWRlcicpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmlzT25MaW5rKSB7XG4gICAgICAgICAgICBjb25zdCB7IGN1cnNvckNvbG9yLCBjdXJzb3JTdGlja3ksIGN1cnNvclN0aWNreVNpZGUgfSA9IHRoaXMuY3VycmVudFRhcmdldC5lbGVtZW50LmRhdGFzZXQ7XG4gICAgICAgICAgICB0aGlzLnNldENvbG9yKGN1cnNvckNvbG9yKTtcbiAgICAgICAgICAgIHRoaXMuc2V0U3RpY2t5KHRoaXMuY3VycmVudFRhcmdldC5lbGVtZW50LCBjdXJzb3JTdGlja3ksIGN1cnNvclN0aWNreVNpZGUpO1xuICAgICAgICAgICAgYWRkQ2xhc3ModGhpcy4kZWwsICdvbi1saW5rJyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzZXQgaXNMaXN0ZW5pbmcodmFsdWUpIHtcbiAgICAgICAgdGhpcy5pc0xpc3RlbmluZyA9IHZhbHVlO1xuICAgIH1cbn1cbiIsImltcG9ydCBBcHBFdmVudHMgZnJvbSAnLi4vY29udGFpbmVycy9BcHBFdmVudHMnO1xuaW1wb3J0IHsgd2l0aFNjcm9sbGVkSW5WaWV3IH0gZnJvbSAnQHN0dWRpb21ldGEvanMtdG9vbGtpdCc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEZvb3RlciBleHRlbmRzIHdpdGhTY3JvbGxlZEluVmlldyhBcHBFdmVudHMpIHtcbiAgICBzdGF0aWMgY29uZmlnID0ge1xuICAgICAgICAuLi5BcHBFdmVudHMuY29uZmlnLFxuICAgICAgICBuYW1lOiAnQ29tcG9uZW50JyxcbiAgICAgICAgcmVmczogWy4uLkFwcEV2ZW50cy5jb25maWcucmVmcywgJ292ZXJsYXknLCAnZ3JhZGllbnQnLCAnd3JhcHBlciddLFxuICAgIH07XG5cbiAgICBzY3JvbGxlZEluVmlldyh7IGN1cnJlbnQsIHN0YXJ0IH0pIHtcbiAgICAgICAgY29uc3QgbWF4ID0gc3RhcnQueSArIHRoaXMuJGVsLm9mZnNldEhlaWdodDtcbiAgICAgICAgY29uc3QgcmV2ZXJzZVByb2dyZXNzID0gMSAtIChjdXJyZW50LnkgLSBzdGFydC55KSAvIChtYXgtIHN0YXJ0LnkpO1xuXG4gICAgICAgIGNvbnN0IGhlaWdodCA9IHJldmVyc2VQcm9ncmVzcyAqIDEwMDtcbiAgICAgICAgY29uc3QgdHJhbnNsYXRlWSA9IHJldmVyc2VQcm9ncmVzcyAqIC0xMDA7XG5cbiAgICAgICAgdGhpcy4kcmVmcy5vdmVybGF5LnN0eWxlLmhlaWdodCA9IGAke2hlaWdodH1weGA7XG4gICAgICAgIHRoaXMuJHJlZnMuZ3JhZGllbnQuc3R5bGUub3BhY2l0eSA9IGAke3JldmVyc2VQcm9ncmVzc31gO1xuICAgICAgICB0aGlzLiRyZWZzLndyYXBwZXIuc3R5bGUudHJhbnNmb3JtID0gYHRyYW5zbGF0ZTNkKDAsICR7dHJhbnNsYXRlWX1weCwgMClgO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IEJhc2UgfSBmcm9tICdAc3R1ZGlvbWV0YS9qcy10b29sa2l0JztcbmltcG9ydCBnc2FwIGZyb20gJ2dzYXAnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQYXJhZ3JhcGggZXh0ZW5kcyBCYXNlIHtcbiAgICBzdGF0aWMgY29uZmlnID0ge1xuICAgICAgICBuYW1lOiAnUGFyYWdyYXBoJyxcbiAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgICAgZGVsYXk6IE51bWJlcixcbiAgICAgICAgfSxcbiAgICB9O1xuXG4gICAgYW5pbWF0ZUluICgpIHtcbiAgICAgICAgZ3NhcC5mcm9tVG8odGhpcy4kZWwsIHtcbiAgICAgICAgICAgIHk6IDEyLFxuICAgICAgICAgICAgb3BhY2l0eTogMCxcbiAgICAgICAgfSwge1xuICAgICAgICAgICAgeTogMCxcbiAgICAgICAgICAgIG9wYWNpdHk6IDEsXG4gICAgICAgICAgICBkdXJhdGlvbjogMSxcbiAgICAgICAgICAgIGRlbGF5OiB0aGlzLiRvcHRpb25zLmRlbGF5LFxuICAgICAgICAgICAgZWFzZTogJ3Bvd2VyMy5vdXQnLFxuICAgICAgICAgICAgY2xlYXJQcm9wczogJ2FsbCcsXG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgYW5pbWF0ZU91dCAoKSB7XG4gICAgICAgIGdzYXAuZnJvbVRvKHRoaXMuJGVsLCB7XG4gICAgICAgICAgICB5OiAwLFxuICAgICAgICAgICAgb3BhY2l0eTogMSxcbiAgICAgICAgfSwge1xuICAgICAgICAgICAgeTogLTEyLFxuICAgICAgICAgICAgb3BhY2l0eTogMCxcbiAgICAgICAgICAgIGR1cmF0aW9uOiAwLjMsXG4gICAgICAgICAgICBjbGVhclByb3BzOiAnYWxsJyxcbiAgICAgICAgfSlcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBCYXNlLCB3aXRoU2Nyb2xsZWRJblZpZXcgfSBmcm9tICdAc3R1ZGlvbWV0YS9qcy10b29sa2l0JztcbmltcG9ydCB7IG1hcCB9IGZyb20gJ0BzdHVkaW9tZXRhL2pzLXRvb2xraXQvdXRpbHMnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQYXJhbGxheCBleHRlbmRzIHdpdGhTY3JvbGxlZEluVmlldyhCYXNlKSB7XG5cbiAgICBzdGF0aWMgY29uZmlnID0ge1xuICAgICAgICBuYW1lOiAnUGFyYWxsYXgnLFxuICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgICBwZXJjZW50OiB7XG4gICAgICAgICAgICAgICAgdHlwZTogTnVtYmVyLFxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6IDEwLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJldmVyc2U6IHtcbiAgICAgICAgICAgICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6IGZhbHNlLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgICAgcmVmczogWydpbWFnZSddLFxuICAgIH07XG5cbiAgICBtb3VudGVkKCkge1xuICAgICAgICB0aGlzLiRyZWZzLmltYWdlLnN0eWxlLndpbGxDaGFuZ2UgPSAndHJhbnNmb3JtJztcbiAgICAgICAgdGhpcy4kb3B0aW9ucy5yZXZlcnNlID8gdGhpcy4kcmVmcy5pbWFnZS5zdHlsZS50b3AgPSAnMCcgOiB0aGlzLiRyZWZzLmltYWdlLnN0eWxlLmJvdHRvbSA9ICcwJztcbiAgICAgICAgdGhpcy4kcmVmcy5pbWFnZS5zdHlsZS5oZWlnaHQgPSBgJHsxMDAgKyB0aGlzLiRvcHRpb25zLnBlcmNlbnR9JWA7XG4gICAgfVxuXG4gICAgc2Nyb2xsZWRJblZpZXcoeyBkYW1wZWRQcm9ncmVzcyB9KSB7XG4gICAgICAgIGNvbnN0IHkgPSBkYW1wZWRQcm9ncmVzcy55ICogdGhpcy4kb3B0aW9ucy5wZXJjZW50ICogKHRoaXMuJG9wdGlvbnMucmV2ZXJzZSA/IC0xIDogMSk7XG4gICAgICAgIHRoaXMuJHJlZnMuaW1hZ2Uuc3R5bGUudHJhbnNmb3JtID0gYHRyYW5zbGF0ZVkoJHt5fSUpYDtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBCYXNlIH0gZnJvbSAnQHN0dWRpb21ldGEvanMtdG9vbGtpdCc7XG5pbXBvcnQgeyBpbnRlcnZhbFByb21pc2UgfSBmcm9tICcuLi91dGlscy9pbnRlcnZhbFByb21pc2UnO1xuaW1wb3J0IGdzYXAgZnJvbSAnZ3NhcCc7XG5pbXBvcnQgeyByZW1vdmVDbGFzcyB9IGZyb20gJ0BzdHVkaW9tZXRhL2pzLXRvb2xraXQvdXRpbHMnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQcmVsb2FkZXIgZXh0ZW5kcyBCYXNlIHtcbiAgICBzdGF0aWMgY29uZmlnID0ge1xuICAgICAgICBuYW1lOiAnUHJlbG9hZGVyJyxcbiAgICAgICAgcmVmczogWyd3cmFwcGVyJywgJ2xvZ29GcmFtZXNbXScsICduYW1lJywgJ25hbWVQYXRoJywgJ25hbWVXb3JkJywgJ292ZXJsYXknXSxcbiAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgICAgbmFtZToge1xuICAgICAgICAgICAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgICAgICAgICAgICBkZWZhdWx0OiAnY2Fzc2FuZHJlJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgfTtcblxuICAgIG1vdW50ZWQgKCkge1xuICAgICAgICB0aGlzLmxvZ29GcmFtZXNBbmltYXRpb24gPSBudWxsO1xuICAgICAgICB0aGlzLm92ZXJsYXkgPSB7XG4gICAgICAgICAgICBjb250ZXh0OiB0aGlzLiRyZWZzLm92ZXJsYXkuZ2V0Q29udGV4dCgnMmQnKSxcbiAgICAgICAgICAgIHdpZHRoOiB3aW5kb3cuaW5uZXJXaWR0aCAqIHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvLFxuICAgICAgICAgICAgaGVpZ2h0OiB3aW5kb3cuaW5uZXJIZWlnaHQgKiB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyxcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy4kcmVmcy5vdmVybGF5LndpZHRoID0gdGhpcy5vdmVybGF5LndpZHRoO1xuICAgICAgICB0aGlzLiRyZWZzLm92ZXJsYXkuaGVpZ2h0ID0gdGhpcy5vdmVybGF5LmhlaWdodDtcbiAgICB9XG5cbiAgICBhc3luYyBhbmltYXRlSW4gKCkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICAgICAgICBnc2FwLnRpbWVsaW5lKHtcbiAgICAgICAgICAgICAgICBvblN0YXJ0OiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJlbW92ZUNsYXNzKHRoaXMuJGVsLCAnaXMtaGlkZGVuJyk7XG4gICAgICAgICAgICAgICAgICAgIGdzYXAuc2V0KHRoaXMuJHJlZnMubG9nb0ZyYW1lcywgeyBhdXRvQWxwaGE6IDAgfSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG5hbWVQYXRoTGVuZ3RoID0gdGhpcy4kcmVmcy5uYW1lUGF0aC5nZXRUb3RhbExlbmd0aCgpO1xuICAgICAgICAgICAgICAgICAgICBnc2FwLnNldCh0aGlzLiRyZWZzLm5hbWVQYXRoLCB7IHN0cm9rZURhc2hhcnJheTogYCR7bmFtZVBhdGhMZW5ndGh9ICR7bmFtZVBhdGhMZW5ndGh9YCB9KTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIG9uQ29tcGxldGU6IHJlc29sdmUsXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC50byh0aGlzLiRyZWZzLmxvZ29GcmFtZXMsIHtcbiAgICAgICAgICAgICAgICAgICAga2V5ZnJhbWVzOiBbeyBhdXRvQWxwaGE6IDAsIGR1cmF0aW9uOiAwIH0sIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF1dG9BbHBoYTogMSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uOiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGVsYXk6IDAuMDUsXG4gICAgICAgICAgICAgICAgICAgIH0sIHsgYXV0b0FscGhhOiAwLCBkdXJhdGlvbjogMCwgZGVsYXk6IDAuMDUgfV0sXG4gICAgICAgICAgICAgICAgICAgIHN0YWdnZXI6IDAuMDUsXG4gICAgICAgICAgICAgICAgICAgIGRlbGF5OiAxLFxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLmFkZCh0aGlzLmFuaW1hdGVMb2dvRnJhbWVzKCkpXG4gICAgICAgICAgICAgICAgLnNldCh0aGlzLiRyZWZzLm5hbWUsIHsgYXV0b0FscGhhOiAxIH0pXG4gICAgICAgICAgICAgICAgLmNhbGwodGhpcy5hbmltYXRlTmFtZS5iaW5kKHRoaXMpLCBbeyBsZXR0ZXJzSW50ZXJ2YWw6IDMwIH1dKVxuICAgICAgICAgICAgICAgIC5mcm9tVG8odGhpcy4kcmVmcy5uYW1lUGF0aCwge1xuICAgICAgICAgICAgICAgICAgICBzdHJva2VEYXNob2Zmc2V0OiB0aGlzLiRyZWZzLm5hbWVQYXRoLmdldFRvdGFsTGVuZ3RoKCksXG4gICAgICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgICAgICBzdHJva2VEYXNob2Zmc2V0OiAwLFxuICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbjogMC43LFxuICAgICAgICAgICAgICAgICAgICBlYXNlOiAncXVpbnQub3V0JyxcbiAgICAgICAgICAgICAgICB9LCAnPCs9MC4zMicpXG4gICAgICAgICAgICAgICAgLnNldCh0aGlzLiRyZWZzLm92ZXJsYXksIHsgYXV0b0FscGhhOiAxIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBhc3luYyBhbmltYXRlT3V0ICgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgICAgICAgZ3NhcC50aW1lbGluZSh7XG4gICAgICAgICAgICAgICAgb25Db21wbGV0ZTogKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBnc2FwLnNldCh0aGlzLiRlbCwgeyBhdXRvQWxwaGE6IDAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAuYWRkKGdzYXAudG8odGhpcy5vdmVybGF5LCB7XG4gICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uOiAxLFxuICAgICAgICAgICAgICAgICAgICBlYXNlOiAnZXhwby5pbk91dCcsXG4gICAgICAgICAgICAgICAgICAgIG9uVXBkYXRlOiB0aGlzLmFuaW1hdGVPdmVybGF5LFxuICAgICAgICAgICAgICAgICAgICBvblVwZGF0ZVBhcmFtczogW3RoaXMub3ZlcmxheSwgdGhpcy5vdmVybGF5LmhlaWdodCwgJyNGRjZDM0MnXSxcbiAgICAgICAgICAgICAgICB9KSlcbiAgICAgICAgICAgICAgICAuc2V0KHRoaXMuJHJlZnMud3JhcHBlciwgeyBhdXRvQWxwaGE6IDAgfSlcbiAgICAgICAgICAgICAgICAuYWRkKGdzYXAudG8odGhpcy5vdmVybGF5LCB7XG4gICAgICAgICAgICAgICAgICAgIG9uU3RhcnQ6ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdzYXAuc2V0KHRoaXMuJHJlZnMud3JhcHBlciwgeyBhdXRvQWxwaGE6IDAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIG9uQ29tcGxldGU6ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdzYXAuc2V0KHRoaXMuJHJlZnMud3JhcHBlciwgeyBhdXRvQWxwaGE6IDEgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uOiAxLFxuICAgICAgICAgICAgICAgICAgICBlYXNlOiAnZXhwby5pbk91dCcsXG4gICAgICAgICAgICAgICAgICAgIG9uVXBkYXRlOiB0aGlzLmFuaW1hdGVPdmVybGF5LFxuICAgICAgICAgICAgICAgICAgICBvblVwZGF0ZVBhcmFtczogW3RoaXMub3ZlcmxheSwgMCwgJyNGRjZDM0MnXSxcbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGFzeW5jIGFuaW1hdGVQYWdlVHJhbnNpdGlvbkluICgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgICAgICAgZ3NhcC50aW1lbGluZSh7XG4gICAgICAgICAgICAgICAgb25TdGFydDogKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBnc2FwLnNldCh0aGlzLiRyZWZzLm5hbWUsIHsgYXV0b0FscGhhOiAwIH0pO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZ29GcmFtZXNBbmltYXRpb24gPSB0aGlzLmFuaW1hdGVMb2dvRnJhbWVzKCkucmVwZWF0KC0xKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIG9uQ29tcGxldGU6IHJlc29sdmUsXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC50byh0aGlzLiRlbCwge1xuICAgICAgICAgICAgICAgICAgICBhdXRvQWxwaGE6IDEsXG4gICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uOiAwLjIsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGFzeW5jIGFuaW1hdGVQYWdlVHJhbnNpdGlvbk91dCAoKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgICAgICAgIGdzYXAudGltZWxpbmUoe1xuICAgICAgICAgICAgICAgIG9uU3RhcnQ6ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2dvRnJhbWVzQW5pbWF0aW9uLnBhdXNlKCk7XG4gICAgICAgICAgICAgICAgICAgIGdzYXAuc2V0KHRoaXMuJHJlZnMubG9nb0ZyYW1lcywgeyBhdXRvQWxwaGE6IDAgfSk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBvbkNvbXBsZXRlOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubG9nb0ZyYW1lc0FuaW1hdGlvbi5raWxsKCk7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAudG8odGhpcy4kZWwsIHtcbiAgICAgICAgICAgICAgICAgICAgYXV0b0FscGhhOiAwLFxuICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbjogMC40LFxuICAgICAgICAgICAgICAgICAgICBvbkNvbXBsZXRlOiByZXNvbHZlLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBhc3luYyBhbmltYXRlTmFtZSAoeyBsZXR0ZXJzSW50ZXJ2YWwgfSkge1xuICAgICAgICByZXR1cm4gaW50ZXJ2YWxQcm9taXNlKGNhbGxzQW1vdW50ID0+IHtcbiAgICAgICAgICAgIHRoaXMuJHJlZnMubmFtZVdvcmQuaW5uZXJUZXh0ID0gdGhpcy4kb3B0aW9ucy5uYW1lLnNsaWNlKDAsIGNhbGxzQW1vdW50KTtcbiAgICAgICAgfSwgdGhpcy4kb3B0aW9ucy5uYW1lLmxlbmd0aCwgbGV0dGVyc0ludGVydmFsKTtcbiAgICB9XG5cbiAgICBhbmltYXRlTG9nb0ZyYW1lcyAoKSB7XG4gICAgICAgIGlmICh0aGlzLmxvZ29GcmFtZXNBbmltYXRpb24pIHRoaXMubG9nb0ZyYW1lc0FuaW1hdGlvbi5raWxsKCk7XG4gICAgICAgIHJldHVybiBnc2FwLnRvKHRoaXMuJHJlZnMubG9nb0ZyYW1lcywge1xuICAgICAgICAgICAgb25TdGFydDogKCkgPT4ge1xuICAgICAgICAgICAgICAgIGdzYXAuc2V0KHRoaXMuJHJlZnMubG9nb0ZyYW1lcywgeyBhdXRvQWxwaGE6IDAgfSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAga2V5ZnJhbWVzOiBbeyBhdXRvQWxwaGE6IDAsIGR1cmF0aW9uOiAwIH0sIHsgYXV0b0FscGhhOiAxLCBkdXJhdGlvbjogMCwgZGVsYXk6IDAuMDUsIH0sIHsgYXV0b0FscGhhOiAwLCBkdXJhdGlvbjogMCwgZGVsYXk6IDAuMDUgfV0sXG4gICAgICAgICAgICBzdGFnZ2VyOiAwLjA1LFxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBhbmltYXRlT3ZlcmxheSAob3ZlcmxheSwgYmFzZVksIGZpbGxDb2xvcikge1xuICAgICAgICBvdmVybGF5LmNvbnRleHQuY2xlYXJSZWN0KDAsIDAsIG92ZXJsYXkud2lkdGgsIG92ZXJsYXkuaGVpZ2h0KTtcbiAgICAgICAgb3ZlcmxheS5jb250ZXh0LnNhdmUoKTtcbiAgICAgICAgb3ZlcmxheS5jb250ZXh0LmJlZ2luUGF0aCgpO1xuXG4gICAgICAgIG92ZXJsYXkuY29udGV4dC5tb3ZlVG8ob3ZlcmxheS53aWR0aCwgYmFzZVkpO1xuICAgICAgICBvdmVybGF5LmNvbnRleHQubGluZVRvKDAsIGJhc2VZKTtcblxuICAgICAgICBjb25zdCB3aWR0aFNlZ21lbnRzID0gTWF0aC5jZWlsKG92ZXJsYXkud2lkdGggLyA0MCk7XG4gICAgICAgIGNvbnN0IHQgPSAoMSAtIHRoaXMucmF0aW8pICogb3ZlcmxheS5oZWlnaHQ7XG4gICAgICAgIGNvbnN0IGFtcGxpdHVkZSA9ICh3aW5kb3cuaW5uZXJXaWR0aCAvIDUpICogTWF0aC5zaW4odGhpcy5yYXRpbyAqIE1hdGguUEkpO1xuXG4gICAgICAgIG92ZXJsYXkuY29udGV4dC5saW5lVG8oMCwgdCk7XG5cbiAgICAgICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8PSB3aWR0aFNlZ21lbnRzOyBpbmRleCsrKSB7XG4gICAgICAgICAgICBjb25zdCBuID0gNDAgKiBpbmRleDtcbiAgICAgICAgICAgIGNvbnN0IHIgPSB0IC0gTWF0aC5zaW4oKG4gLyBvdmVybGF5LndpZHRoKSAqIE1hdGguUEkpICogYW1wbGl0dWRlO1xuXG4gICAgICAgICAgICBvdmVybGF5LmNvbnRleHQubGluZVRvKG4sIHIpO1xuICAgICAgICB9XG5cbiAgICAgICAgb3ZlcmxheS5jb250ZXh0LmZpbGxTdHlsZSA9IGZpbGxDb2xvcjtcbiAgICAgICAgb3ZlcmxheS5jb250ZXh0LmZpbGwoKTtcbiAgICAgICAgb3ZlcmxheS5jb250ZXh0LnJlc3RvcmUoKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBCYXNlIH0gZnJvbSAnQHN0dWRpb21ldGEvanMtdG9vbGtpdCc7XG5pbXBvcnQgZ3NhcCBmcm9tICdnc2FwJztcbmltcG9ydCBTVkcgZnJvbSAnLi4vdXRpbHMvU3ZnJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU1ZHUmV2ZWFsIGV4dGVuZHMgQmFzZSB7XG4gICAgc3RhdGljIGNvbmZpZyA9IHtcbiAgICAgICAgbmFtZTogJ1NWR1JldmVhbCcsXG4gICAgICAgIHJlZnM6IFsnc3ZnJ10sXG4gICAgICAgIGxvZzogdHJ1ZSxcbiAgICB9O1xuXG4gICAgc2hhcGVzID0gW107XG4gICAgZHJhd24gPSBmYWxzZTtcblxuICAgIG1vdW50ZWQgKCkge1xuICAgICAgICBpZiAodGhpcy5kcmF3bikgcmV0dXJuO1xuICAgICAgICB0aGlzLnNoYXBlcyA9IFNWRy5nZXRTaGFwZXModGhpcy4kcmVmcy5zdmcpLm1hcChzaGFwZSA9PiBzaGFwZS5lbCk7XG4gICAgICAgIHRoaXMuaGlkZVNoYXBlcygpO1xuICAgIH1cblxuICAgIGhpZGVTaGFwZXMgKCkge1xuICAgICAgICBnc2FwLnNldCh0aGlzLnNoYXBlcywge1xuICAgICAgICAgICAgc3Ryb2tlRGFzaGFycmF5OiAoaSwgdGFyZ2V0KSA9PiBgJHsgdGFyZ2V0LmdldFRvdGFsTGVuZ3RoKCkgfSAkeyB0YXJnZXQuZ2V0VG90YWxMZW5ndGgoKSB9YCxcbiAgICAgICAgICAgIHN0cm9rZURhc2hvZmZzZXQ6IChpLCB0YXJnZXQpID0+IGAkeyB0YXJnZXQuZ2V0VG90YWxMZW5ndGgoKSB9YCxcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZHJhd1N0cm9rZXMgKHtcbiAgICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uID0gMS4zLFxuICAgICAgICAgICAgICAgICAgICAgZGVsYXkgPSAwLjYsXG4gICAgICAgICAgICAgICAgICAgICBlYXNlID0gJ3Bvd2VyMy5vdXQnLFxuICAgICAgICAgICAgICAgICB9ID0ge1xuICAgICAgICBkdXJhdGlvbjogMS4zLFxuICAgICAgICBkZWxheTogMC42LFxuICAgICAgICBlYXNlOiAncG93ZXIzLm91dCcsXG4gICAgfSkge1xuICAgICAgICB0aGlzLmRyYXduID0gdHJ1ZTtcbiAgICAgICAgZ3NhcC5mcm9tVG8odGhpcy5zaGFwZXMsIHtcbiAgICAgICAgICAgIHN0cm9rZURhc2hvZmZzZXQ6IChpLCB0YXJnZXQpID0+IGAkeyB0YXJnZXQuZ2V0VG90YWxMZW5ndGgoKSB9YCxcbiAgICAgICAgfSwge1xuICAgICAgICAgICAgc3Ryb2tlRGFzaG9mZnNldDogMCxcbiAgICAgICAgICAgIGR1cmF0aW9uLFxuICAgICAgICAgICAgZGVsYXksXG4gICAgICAgICAgICBlYXNlLFxuICAgICAgICAgICAgY2xlYXJQcm9wczogJ2FsbCcsXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IEJhc2UgfSBmcm9tICdAc3R1ZGlvbWV0YS9qcy10b29sa2l0JztcbmltcG9ydCBTVkcgZnJvbSAnLi4vdXRpbHMvU3ZnJztcbmltcG9ydCB7IGVhc2VPdXRRdWFkLCBtYXAsIHR3ZWVuIH0gZnJvbSAnQHN0dWRpb21ldGEvanMtdG9vbGtpdC91dGlscyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNjcmliYmxlTGluayBleHRlbmRzIEJhc2Uge1xuXG4gICAgc2hhcGVzO1xuICAgIHR3ZWVuSW47XG4gICAgdHdlZW5PdXQ7XG5cbiAgICBzdGF0aWMgY29uZmlnID0ge1xuICAgICAgICBuYW1lOiAnU2NyaWJibGVMaW5rJyxcbiAgICAgICAgcmVmczogWydzY3JpYmJsZSddLFxuICAgIH07XG5cbiAgICBtb3VudGVkICgpIHtcbiAgICAgICAgdGhpcy5zaGFwZXMgPSBTVkcuZ2V0U2hhcGVzKHRoaXMuJHJlZnMuc2NyaWJibGUpO1xuICAgICAgICBTVkcuc2V0SW5pdGlhbEF0dHJpYnV0ZXNTaGFwZXModGhpcy5zaGFwZXMpO1xuICAgICAgICB0aGlzLnNldHVwVHdlZW5zKCk7XG4gICAgfVxuXG4gICAgb25Nb3VzZWVudGVyICgpIHtcbiAgICAgICAgdGhpcy50d2Vlbk91dC5maW5pc2goKTtcbiAgICAgICAgaWYgKHRoaXMudHdlZW5Jbi5wcm9ncmVzcygpID09PSAxKSB0aGlzLnR3ZWVuSW4ucHJvZ3Jlc3MoMCk7XG4gICAgICAgIHRoaXMudHdlZW5Jbi5wbGF5KCk7XG4gICAgfVxuXG4gICAgb25Nb3VzZWxlYXZlICgpIHtcbiAgICAgICAgdGhpcy50d2VlbkluLmZpbmlzaCgpO1xuICAgICAgICBpZiAodGhpcy50d2Vlbk91dC5wcm9ncmVzcygpID09PSAxKSB0aGlzLnR3ZWVuT3V0LnByb2dyZXNzKDApO1xuICAgICAgICB0aGlzLnR3ZWVuT3V0LnBsYXkoKTtcbiAgICB9XG5cbiAgICBzZXR1cFR3ZWVucyAoKSB7XG4gICAgICAgIHRoaXMudHdlZW5JbiA9IHR3ZWVuKFxuICAgICAgICAgICAgKHByb2dyZXNzKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmV2ZXJzZVByb2dyZXNzID0gbWFwKHByb2dyZXNzLCAwLCAxLCAxLCAwKTtcbiAgICAgICAgICAgICAgICB0aGlzLnNldFN0cm9rZURhc2hPZmZzZXRTaGFwZXMocmV2ZXJzZVByb2dyZXNzKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgZHVyYXRpb246IDAuNyxcbiAgICAgICAgICAgICAgICBlYXNpbmc6IGVhc2VPdXRRdWFkLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy50d2Vlbk91dCA9IHR3ZWVuKFxuICAgICAgICAgICAgKHByb2dyZXNzKSA9PiB0aGlzLnNldFN0cm9rZURhc2hPZmZzZXRTaGFwZXMoLXByb2dyZXNzKSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBkdXJhdGlvbjogMC4zLFxuICAgICAgICAgICAgICAgIGVhc2luZzogZWFzZU91dFF1YWQsXG4gICAgICAgICAgICAgICAgb25GaW5pc2g6ICgpID0+IHRoaXMuc2V0U3Ryb2tlRGFzaE9mZnNldFNoYXBlcygxKSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMudHdlZW5Jbi5wYXVzZSgpO1xuICAgICAgICB0aGlzLnR3ZWVuT3V0LnBhdXNlKCk7XG4gICAgfVxuXG4gICAgc2V0U3Ryb2tlRGFzaE9mZnNldFNoYXBlcyAob2Zmc2V0KSB7XG4gICAgICAgIGZvciAoY29uc3Qgc2hhcGUgb2YgdGhpcy5zaGFwZXMpIHtcbiAgICAgICAgICAgIHNoYXBlLmVsLnNldEF0dHJpYnV0ZSgnc3Ryb2tlLWRhc2hvZmZzZXQnLCBgJHsgc2hhcGUubGVuZ3RoICogb2Zmc2V0IH1gKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsImltcG9ydCB7IEJhc2UgfSBmcm9tICdAc3R1ZGlvbWV0YS9qcy10b29sa2l0JztcbmltcG9ydCBnc2FwIGZyb20gJ2dzYXAnO1xuaW1wb3J0IFNwbGl0VHlwZSBmcm9tICdzcGxpdC10eXBlJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVGl0bGUgZXh0ZW5kcyBCYXNlIHtcbiAgICBzdGF0aWMgY29uZmlnID0ge1xuICAgICAgICBuYW1lOiAnVGl0bGUnLFxuICAgIH07XG5cbiAgICBzcGxpdFRleHQgPSBudWxsO1xuXG4gICAgc3BsaXQgKCkge1xuICAgICAgICB0aGlzLiRlbC5zdHlsZS5mb250S2VybmluZyA9ICdub25lJztcbiAgICAgICAgdGhpcy5zcGxpdFRleHQgPSBuZXcgU3BsaXRUeXBlKHRoaXMuJGVsLCB7XG4gICAgICAgICAgICB0eXBlczogJ3dvcmRzLCBjaGFycycsXG4gICAgICAgICAgICB0YWdOYW1lOiAnc3BhbicsXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldmVydCAoKSB7XG4gICAgICAgIHRoaXMuJGVsLnN0eWxlLmZvbnRLZXJuaW5nID0gJyc7XG4gICAgICAgIHRoaXMuc3BsaXRUZXh0LnJldmVydCgpO1xuICAgIH1cblxuICAgIGFuaW1hdGVJbiAoKSB7XG4gICAgICAgIHRoaXMuc3BsaXQoKTtcbiAgICAgICAgZ3NhcC5mcm9tVG8odGhpcy5zcGxpdFRleHQuY2hhcnMsIHtcbiAgICAgICAgICAgIHlQZXJjZW50OiAxMDAsXG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIHlQZXJjZW50OiAwLFxuICAgICAgICAgICAgZHVyYXRpb246IDAuNixcbiAgICAgICAgICAgIGVhc2U6ICdwb3dlcjIub3V0JyxcbiAgICAgICAgICAgIHN0YWdnZXI6IDAuMDI1LFxuICAgICAgICAgICAgb25Db21wbGV0ZTogKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMucmV2ZXJ0KCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBhbmltYXRlT3V0ICgpIHtcbiAgICAgICAgdGhpcy5zcGxpdCgpO1xuICAgICAgICBnc2FwLnRvKHRoaXMuc3BsaXRUZXh0LmNoYXJzLCB7XG4gICAgICAgICAgICB5UGVyY2VudDogLTEwMCxcbiAgICAgICAgICAgIGR1cmF0aW9uOiAwLjMsXG4gICAgICAgICAgICBvbkNvbXBsZXRlOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5yZXZlcnQoKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IHdpdGhJbnRlcnNlY3Rpb25PYnNlcnZlciwgd2l0aFNjcm9sbGVkSW5WaWV3IH0gZnJvbSAnQHN0dWRpb21ldGEvanMtdG9vbGtpdCc7XG5pbXBvcnQgQXBwRXZlbnRzIGZyb20gJy4uL2NvbnRhaW5lcnMvQXBwRXZlbnRzJztcbmltcG9ydCBTVkdSZXZlYWwgZnJvbSAnLi9TVkdSZXZlYWwnO1xuaW1wb3J0IHsgYWRkQ2xhc3MgfSBmcm9tICdAc3R1ZGlvbWV0YS9qcy10b29sa2l0L3V0aWxzJztcbmltcG9ydCBUaXRsZSBmcm9tICcuL1RpdGxlJztcbmltcG9ydCBQYXJhZ3JhcGggZnJvbSAnLi9QYXJhZ3JhcGgnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBXb3JrIGV4dGVuZHMgd2l0aFNjcm9sbGVkSW5WaWV3KHdpdGhJbnRlcnNlY3Rpb25PYnNlcnZlcihBcHBFdmVudHMsIHtcbiAgICByb290TWFyZ2luOiAnMHB4IDBweCAtMjUlIDBweCcsXG59KSkge1xuICAgIHN0YXRpYyBjb25maWcgPSB7XG4gICAgICAgIC4uLkFwcEV2ZW50cy5jb25maWcsXG4gICAgICAgIG5hbWU6ICdXb3JrJyxcbiAgICAgICAgcmVmczogWy4uLkFwcEV2ZW50cy5jb25maWcucmVmcywgJ2NvdmVyJywgJ3NjcmliYmxlJ10sXG4gICAgICAgIGNvbXBvbmVudHM6IHtcbiAgICAgICAgICAgIFRpdGxlLFxuICAgICAgICAgICAgUGFyYWdyYXBoLFxuICAgICAgICAgICAgU1ZHUmV2ZWFsLFxuICAgICAgICB9LFxuICAgIH07XG5cbiAgICBpc1Zpc2libGUgPSBmYWxzZTtcblxuICAgIGludGVyc2VjdGVkIChbeyBpc0ludGVyc2VjdGluZyB9XSkge1xuICAgICAgICBpZiAoaXNJbnRlcnNlY3RpbmcpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmlzVmlzaWJsZSkgcmV0dXJuO1xuICAgICAgICAgICAgdGhpcy5pc1Zpc2libGUgPSB0cnVlO1xuICAgICAgICAgICAgYWRkQ2xhc3ModGhpcy4kZWwsICdpcy12aXNpYmxlJyk7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IFNWR1JldmVhbCBvZiB0aGlzLiRjaGlsZHJlbi5TVkdSZXZlYWwpIHtcbiAgICAgICAgICAgICAgICBTVkdSZXZlYWwuZHJhd1N0cm9rZXMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAoY29uc3QgVGl0bGUgb2YgdGhpcy4kY2hpbGRyZW4uVGl0bGUpIHtcbiAgICAgICAgICAgICAgICBUaXRsZS5hbmltYXRlSW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAoY29uc3QgUGFyYWdyYXBoIG9mIHRoaXMuJGNoaWxkcmVuLlBhcmFncmFwaCkge1xuICAgICAgICAgICAgICAgIFBhcmFncmFwaC5hbmltYXRlSW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHNjcm9sbGVkSW5WaWV3ICh7IHByb2dyZXNzIH0pIHtcbiAgICAgICAgdGhpcy4kcmVmcy5jb3Zlci5zdHlsZS50cmFuc2Zvcm0gPSBgdHJhbnNsYXRlWSgkeyAocHJvZ3Jlc3MueSAtIDAuNSkgKiAtMTAwIH1weCkgcm90YXRlKCR7IChwcm9ncmVzcy55IC0gMC41KSAqIDUgfWRlZylgO1xuICAgICAgICB0aGlzLiRyZWZzLnNjcmliYmxlLnN0eWxlLnRyYW5zZm9ybSA9IGB0cmFuc2xhdGVZKCR7IChwcm9ncmVzcy55IC0gMC41KSAqIC0xMDAgfXB4KWA7XG4gICAgfVxufVxuIiwiaW1wb3J0IEFwcEV2ZW50cyBmcm9tICcuLi9jb250YWluZXJzL0FwcEV2ZW50cyc7XG5pbXBvcnQgeyB3aXRoSW50ZXJzZWN0aW9uT2JzZXJ2ZXIgfSBmcm9tICdAc3R1ZGlvbWV0YS9qcy10b29sa2l0JztcbmltcG9ydCB7IHJlbW92ZUNsYXNzIH0gZnJvbSAnQHN0dWRpb21ldGEvanMtdG9vbGtpdC91dGlscyc7XG5pbXBvcnQgeyBhbmltYXRlIH0gZnJvbSAnbW90aW9uJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgV29ya0NhcmQgZXh0ZW5kcyB3aXRoSW50ZXJzZWN0aW9uT2JzZXJ2ZXIoQXBwRXZlbnRzLCB7XG4gICAgcm9vdE1hcmdpbjogJzBweCcsXG4gICAgdGhyZXNob2xkOiBbMCwgMC4zXSxcbn0pIHtcbiAgICBzdGF0aWMgY29uZmlnID0ge1xuICAgICAgICAuLi5BcHBFdmVudHMuY29uZmlnLFxuICAgICAgICBuYW1lOiAnV29ya0NhcmQnLFxuICAgICAgICByZWZzOiBbLi4uQXBwRXZlbnRzLmNvbmZpZy5yZWZzLCAnbmFtZUlubmVyc1tdJ10sXG4gICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICAgIHRyYW5zaXRpb25EZWxheToge1xuICAgICAgICAgICAgICAgIHR5cGU6IE51bWJlcixcbiAgICAgICAgICAgICAgICBkZWZhdWx0OiAwLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICB9O1xuXG4gICAgaXNWaXNpYmxlID0gZmFsc2U7XG5cbiAgICBvbk1vdXNlZW50ZXIoKSB7XG4gICAgICAgIFsuLi50aGlzLiRyZWZzLm5hbWVJbm5lcnNdLmZvckVhY2gobmFtZUlubmVyID0+IHtcbiAgICAgICAgICAgIGFuaW1hdGUobmFtZUlubmVyLFxuICAgICAgICAgICAgICAgIHsgdHJhbnNmb3JtOiAndHJhbnNsYXRlM2QoMCwgLTEwMCUsIDApJyB9LFxuICAgICAgICAgICAgICAgIHsgZHVyYXRpb246IDEuNCwgZWFzaW5nOiBbLjEyLCAuODIsIDAsIC45OV0gfSxcbiAgICAgICAgICAgICk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIG9uTW91c2VsZWF2ZSgpIHtcbiAgICAgICAgWy4uLnRoaXMuJHJlZnMubmFtZUlubmVyc10uZm9yRWFjaChuYW1lSW5uZXIgPT4ge1xuICAgICAgICAgICAgYW5pbWF0ZShuYW1lSW5uZXIsXG4gICAgICAgICAgICAgICAgeyB0cmFuc2Zvcm06ICd0cmFuc2xhdGUzZCgwLCAwLCAwKScgfSxcbiAgICAgICAgICAgICAgICB7IGR1cmF0aW9uOiAwLjgsIGVhc2luZzogWy4xMiwgLjgyLCAwLCAuOTldIH0sXG4gICAgICAgICAgICApO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBpbnRlcnNlY3RlZChlbnRyaWVzKSB7XG4gICAgICAgIGNvbnN0IHRhcmdldCA9IGVudHJpZXNbMF07XG5cbiAgICAgICAgaWYgKCF0aGlzLmlzVmlzaWJsZSAmJiB0YXJnZXQuaW50ZXJzZWN0aW9uUmF0aW8gPj0gMC4zKSB7XG4gICAgICAgICAgICB0aGlzLmlzVmlzaWJsZSA9IHRydWU7XG4gICAgICAgICAgICBjb25zdCByZW1vdmVIaWRkZW5DbGFzc1RpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICByZW1vdmVDbGFzcyh0aGlzLiRlbCwgJ2lzLWhpZGRlbicpO1xuICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dChyZW1vdmVIaWRkZW5DbGFzc1RpbWVvdXQpO1xuICAgICAgICAgICAgfSwgdGhpcy4kb3B0aW9ucy50cmFuc2l0aW9uRGVsYXkgKiAxMDAwKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsImltcG9ydCB7IEJhc2UsIGdldEluc3RhbmNlRnJvbUVsZW1lbnQgfSBmcm9tICdAc3R1ZGlvbWV0YS9qcy10b29sa2l0JztcbmltcG9ydCBDdXJzb3IgZnJvbSAnLi4vY29tcG9uZW50cy9DdXJzb3InO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBcHBFdmVudHMgZXh0ZW5kcyBCYXNlIHtcbiAgICBzdGF0aWMgY29uZmlnID0ge1xuICAgICAgICByZWZzOiBbJ2N1cnNvckxpbmtbXScsICdjdXJzb3JTbGlkZXJbXSddLFxuICAgICAgICBsb2c6IHRydWUsXG4gICAgfTtcblxuICAgIGN1cnNvcjtcblxuICAgIG1vdW50ZWQgKCkge1xuICAgICAgICB0aGlzLiRsb2coJ01vdW50ZWQnKTtcbiAgICAgICAgY29uc3QgY3Vyc29yRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLWNvbXBvbmVudD1cIkN1cnNvclwiXScpO1xuICAgICAgICB0aGlzLmN1cnNvciA9IGdldEluc3RhbmNlRnJvbUVsZW1lbnQoY3Vyc29yRWxlbWVudCwgQ3Vyc29yKTtcbiAgICB9XG5cbiAgICBkZXN0cm95ZWQgKCkge1xuICAgICAgICB0aGlzLiRsb2coJ0Rlc3Ryb3llZCcpO1xuICAgIH1cblxuICAgIG9uQ3Vyc29yTGlua01vdXNlZW50ZXIgKGUpIHtcbiAgICAgICAgaWYgKHRoaXMuY3Vyc29yICYmIHRoaXMuY3Vyc29yLiRpc01vdW50ZWQpIHRoaXMuY3Vyc29yLm9uRW50ZXJMaW5rKGUpO1xuICAgIH1cblxuICAgIG9uQ3Vyc29yTGlua01vdXNlbGVhdmUgKGUpIHtcbiAgICAgICAgaWYgKHRoaXMuY3Vyc29yICYmIHRoaXMuY3Vyc29yLiRpc01vdW50ZWQpIHRoaXMuY3Vyc29yLm9uTGVhdmVMaW5rKGUpO1xuICAgIH1cblxuICAgIG9uQ3Vyc29yU2xpZGVyTW91c2VlbnRlciAoZSkge1xuICAgICAgICBpZiAodGhpcy5jdXJzb3IgJiYgdGhpcy5jdXJzb3IuJGlzTW91bnRlZCkgdGhpcy5jdXJzb3Iub25FbnRlclNsaWRlcihlKTtcbiAgICB9XG5cbiAgICBvbkN1cnNvclNsaWRlck1vdXNlbGVhdmUgKGUpIHtcbiAgICAgICAgaWYgKHRoaXMuY3Vyc29yICYmIHRoaXMuY3Vyc29yLiRpc01vdW50ZWQpIHRoaXMuY3Vyc29yLm9uTGVhdmVTbGlkZXIoZSk7XG4gICAgfVxufVxuIiwiaW1wb3J0IEFwcEV2ZW50cyBmcm9tICcuL0FwcEV2ZW50cyc7XG5pbXBvcnQgeyB0aW1lbGluZSB9IGZyb20gJ21vdGlvbic7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBhZ2UgZXh0ZW5kcyBBcHBFdmVudHMge1xuXG4gICAgc3RhdGljIGNvbmZpZyA9IHtcbiAgICAgICAgLi4uQXBwRXZlbnRzLmNvbmZpZyxcbiAgICAgICAgcmVmczogWy4uLkFwcEV2ZW50cy5jb25maWcucmVmc10sXG4gICAgfTtcblxuICAgIGFzeW5jIG1vdW50ZWQoKSB7XG4gICAgICAgIHN1cGVyLm1vdW50ZWQoKTtcbiAgICAgICAgaWYgKHRoaXMuY3Vyc29yKSB0aGlzLmN1cnNvci5lbmFibGUoKTtcbiAgICB9XG5cbiAgICBkZXN0cm95ZWQoKSB7XG4gICAgICAgIHN1cGVyLmRlc3Ryb3llZCgpO1xuICAgICAgICBpZiAodGhpcy5jdXJzb3IpIHRoaXMuY3Vyc29yLmRpc2FibGUoKTtcbiAgICB9XG5cbiAgICBhbmltYXRlSW4oKSB7XG4gICAgICAgIHJldHVybiB0aW1lbGluZShbXG4gICAgICAgIF0pLmZpbmlzaGVkO1xuICAgIH1cblxuICAgIGFuaW1hdGVPdXQoKSB7XG4gICAgICAgIHJldHVybiB0aW1lbGluZShbXG4gICAgICAgICAgICBbdGhpcy4kZWwsIHsgcG9pbnRlckV2ZW50czogJ25vbmUnIH0sIHsgZHVyYXRpb246IDAgfV0sXG4gICAgICAgICAgICBbdGhpcy4kZWwsIHsgb3BhY2l0eTogMCB9LCB7IGR1cmF0aW9uOiAwLjUsIGVhc2luZzogJ2Vhc2Utb3V0JyB9XSxcbiAgICAgICAgICAgIFt0aGlzLiRlbCwgeyBwb2ludGVyRXZlbnRzOiAnYXV0bycgfSwgeyBkdXJhdGlvbjogMCB9XSxcbiAgICAgICAgXSkuZmluaXNoZWQ7XG4gICAgfVxuXG59XG4iLCJpbXBvcnQgUGFnZSBmcm9tICcuLi9jb250YWluZXJzL1BhZ2UnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBYm91dCBleHRlbmRzIFBhZ2Uge1xuICAgIHN0YXRpYyBjb25maWcgPSB7XG4gICAgICAgIC4uLlBhZ2UuY29uZmlnLFxuICAgICAgICBuYW1lOiAnQWJvdXQnLFxuICAgICAgICByZWZzOiBbLi4uUGFnZS5jb25maWcucmVmc10sXG4gICAgfVxufVxuIiwiaW1wb3J0IFBhZ2UgZnJvbSAnLi4vY29udGFpbmVycy9QYWdlJztcbmltcG9ydCBXb3JrIGZyb20gJy4uL2NvbXBvbmVudHMvV29yayc7XG5pbXBvcnQgRm9vdGVyIGZyb20gJy4uL2NvbXBvbmVudHMvRm9vdGVyJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUHJvamVjdHMgZXh0ZW5kcyBQYWdlIHtcbiAgICBzdGF0aWMgY29uZmlnID0ge1xuICAgICAgICAuLi5QYWdlLmNvbmZpZyxcbiAgICAgICAgbmFtZTogJ0hvbWUnLFxuICAgICAgICByZWZzOiBbLi4uUGFnZS5jb25maWcucmVmc10sXG4gICAgICAgIGNvbXBvbmVudHM6IHtcbiAgICAgICAgICAgIFdvcmssXG4gICAgICAgICAgICBGb290ZXIsXG4gICAgICAgIH0sXG4gICAgfTtcbn1cbiIsImltcG9ydCBQYWdlIGZyb20gJy4uL2NvbnRhaW5lcnMvUGFnZSc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFByb2plY3RzIGV4dGVuZHMgUGFnZSB7XG4gICAgc3RhdGljIGNvbmZpZyA9IHtcbiAgICAgICAgLi4uUGFnZS5jb25maWcsXG4gICAgICAgIG5hbWU6ICdQcm9qZWN0cycsXG4gICAgICAgIHJlZnM6IFsuLi5QYWdlLmNvbmZpZy5yZWZzXSxcbiAgICB9XG5cbn1cbiIsImltcG9ydCBQYWdlIGZyb20gJy4uL2NvbnRhaW5lcnMvUGFnZSc7XG5pbXBvcnQgV29ya0NhcmQgZnJvbSAnLi4vY29tcG9uZW50cy9Xb3JrQ2FyZCc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFVpIGV4dGVuZHMgUGFnZSB7XG4gICAgc3RhdGljIGNvbmZpZyA9IHtcbiAgICAgICAgLi4uUGFnZS5jb25maWcsXG4gICAgICAgIG5hbWU6ICdVaScsXG4gICAgICAgIGNvbXBvbmVudHM6IHtcbiAgICAgICAgICAgIFdvcmtDYXJkLFxuICAgICAgICB9LFxuICAgICAgICByZWZzOiBbLi4uUGFnZS5jb25maWcucmVmc10sXG4gICAgfTtcblxufTtcbiIsImltcG9ydCB7IGVhc2VPdXRRdWFkLCBtYXAsIHR3ZWVuIH0gZnJvbSAnQHN0dWRpb21ldGEvanMtdG9vbGtpdC91dGlscyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNWRyB7XG4gICAgc3RhdGljIGdldFNoYXBlcyhzdmcpIHtcbiAgICAgICAgY29uc3Qgc2hhcGVzID0gW107XG4gICAgICAgIGNvbnN0IHRyYWNrU2hhcGVzID0gZWxlbWVudCA9PiB7XG4gICAgICAgICAgICBpZiAoZWxlbWVudC5jaGlsZHJlbi5sZW5ndGggPiAwKSBbLi4uZWxlbWVudC5jaGlsZHJlbl0uZm9yRWFjaChzdWJDaGlsZEVsZW1lbnQgPT4gdHJhY2tTaGFwZXMoc3ViQ2hpbGRFbGVtZW50KSk7XG4gICAgICAgICAgICBpZiAoIWVsZW1lbnQuaGFzQXR0cmlidXRlKCdzdHJva2UnKSB8fCBlbGVtZW50Lmhhc0F0dHJpYnV0ZSgnZGF0YS1zdGF0aWMtc3Ryb2tlJykpIHJldHVybjtcbiAgICAgICAgICAgIGNvbnN0IHNoYXBlTGVuZ3RoID0gU1ZHLmdldFNoYXBlTGVuZ3RoKGVsZW1lbnQpO1xuICAgICAgICAgICAgaWYgKHNoYXBlTGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgc2hhcGVzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICBlbDogZWxlbWVudCxcbiAgICAgICAgICAgICAgICAgICAgbGVuZ3RoOiBzaGFwZUxlbmd0aCxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgdHJhY2tTaGFwZXMoc3ZnKTtcbiAgICAgICAgcmV0dXJuIHNoYXBlcztcbiAgICB9XG5cbiAgICBzdGF0aWMgZ2V0U2hhcGVMZW5ndGgoc2hhcGUpIHtcbiAgICAgICAgaWYgKCEoc2hhcGUgaW5zdGFuY2VvZiBTVkdHZW9tZXRyeUVsZW1lbnQpKSByZXR1cm4gbnVsbDtcbiAgICAgICAgaWYgKHNoYXBlIGluc3RhbmNlb2YgU1ZHUG9seWdvbkVsZW1lbnQpIHJldHVybiBzaGFwZS5nZXRUb3RhbExlbmd0aCgpO1xuICAgICAgICBpZiAoc2hhcGUgaW5zdGFuY2VvZiBTVkdQb2x5bGluZUVsZW1lbnQpIHJldHVybiBzaGFwZS5nZXRUb3RhbExlbmd0aCgpO1xuICAgICAgICBpZiAoc2hhcGUgaW5zdGFuY2VvZiBTVkdDaXJjbGVFbGVtZW50KSByZXR1cm4gTWF0aC5yb3VuZCgyICogTWF0aC5QSSAqIHBhcnNlSW50KHNoYXBlLmdldEF0dHJpYnV0ZSgncicpLCAxMCkpO1xuICAgICAgICBpZiAoc2hhcGUgaW5zdGFuY2VvZiBTVkdSZWN0RWxlbWVudCkgcmV0dXJuIE1hdGgucm91bmQoMiAqIHBhcnNlSW50KHNoYXBlLmdldEF0dHJpYnV0ZSgnd2lkdGgnKSkgKyAyICogcGFyc2VJbnQoc2hhcGUuZ2V0QXR0cmlidXRlKCdoZWlnaHQnKSkpO1xuICAgICAgICBpZiAoc2hhcGUgaW5zdGFuY2VvZiBTVkdFbGxpcHNlRWxlbWVudCkge1xuICAgICAgICAgICAgY29uc3QgcnggPSBwYXJzZUludChzaGFwZS5nZXRBdHRyaWJ1dGUoJ3J4JykpO1xuICAgICAgICAgICAgY29uc3QgcnkgPSBwYXJzZUludChzaGFwZS5nZXRBdHRyaWJ1dGUoJ3J5JykpO1xuICAgICAgICAgICAgY29uc3QgaCA9IChyeCAtIHJ5KSAqKiAyIC8gKHJ4ICsgcnkpICoqIDI7XG4gICAgICAgICAgICByZXR1cm4gKE1hdGguUEkgKiAocnggKyByeSkpICogKDEgKyAoKDMgKiBoKSAvICgxMCArIE1hdGguc3FydCg0IC0gKDMgKiBoKSkpKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNoYXBlIGluc3RhbmNlb2YgU1ZHTGluZUVsZW1lbnQpIHtcbiAgICAgICAgICAgIGNvbnN0IHgxID0gcGFyc2VJbnQoc2hhcGUuZ2V0QXR0cmlidXRlKCd4MScpKTtcbiAgICAgICAgICAgIGNvbnN0IHgyID0gcGFyc2VJbnQoc2hhcGUuZ2V0QXR0cmlidXRlKCd4MicpKTtcbiAgICAgICAgICAgIGNvbnN0IHkxID0gcGFyc2VJbnQoc2hhcGUuZ2V0QXR0cmlidXRlKCd5MScpKTtcbiAgICAgICAgICAgIGNvbnN0IHkyID0gcGFyc2VJbnQoc2hhcGUuZ2V0QXR0cmlidXRlKCd5MicpKTtcbiAgICAgICAgICAgIHJldHVybiBNYXRoLnNxcnQoKHgyIC0geDEpICoqIDIgKyAoeTIgLSB5MSkgKiogMik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNoYXBlIGluc3RhbmNlb2YgU1ZHUGF0aEVsZW1lbnQpIHJldHVybiBzaGFwZS5nZXRUb3RhbExlbmd0aCgpO1xuICAgIH1cblxuICAgIHN0YXRpYyBzZXRJbml0aWFsQXR0cmlidXRlc1NoYXBlcyhzaGFwZXMsIHJldmVyc2UgPSBmYWxzZSkge1xuICAgICAgICBzaGFwZXMuZm9yRWFjaChzaGFwZSA9PiB7XG4gICAgICAgICAgICBzaGFwZS5lbC5zZXRBdHRyaWJ1dGUoJ3N0cm9rZS1kYXNoYXJyYXknLCBgJHtzaGFwZS5sZW5ndGh9ICR7c2hhcGUubGVuZ3RofWApO1xuICAgICAgICAgICAgc2hhcGUuZWwuc2V0QXR0cmlidXRlKCdzdHJva2UtZGFzaG9mZnNldCcsIGAkeyhyZXZlcnNlID8gLTEgOiAxKSAqIHNoYXBlLmxlbmd0aH1gKTtcbiAgICAgICAgICAgIHNoYXBlLmVsLnNldEF0dHJpYnV0ZSgnZGF0YS1zdHJva2UtbGVuZ3RoJywgc2hhcGUubGVuZ3RoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBzaGFwZXM7XG4gICAgfVxuXG4gICAgc3RhdGljIGRyYXdTaGFwZXMoc2hhcGVzLCB7XG4gICAgICAgIHJldmVyc2UgPSBmYWxzZSwgZHVyYXRpb24gPSAxLCBlYXNpbmcgPSBlYXNlT3V0UXVhZCwgb25GaW5pc2ggPSAoKSA9PiB7fSwgZnJvbUZ1bGxEcmF3biA9IGZhbHNlLFxuICAgIH0pIHtcbiAgICAgICAgdHdlZW4oXG4gICAgICAgICAgICBwcm9ncmVzcyA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHJldmVyc2UpIHByb2dyZXNzID0gbWFwKHByb2dyZXNzLCAwLCAxLCAxLCAwKTtcbiAgICAgICAgICAgICAgICBTVkcuc2V0U3Ryb2tlRGFzaE9mZnNldFNoYXBlcyhzaGFwZXMsIHByb2dyZXNzLCBmcm9tRnVsbERyYXduKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgZHVyYXRpb24sXG4gICAgICAgICAgICAgICAgZWFzaW5nLFxuICAgICAgICAgICAgICAgIG9uRmluaXNoLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgKS5zdGFydCgpO1xuICAgIH1cblxuICAgIHN0YXRpYyBzZXRTdHJva2VEYXNoT2Zmc2V0U2hhcGVzKHNoYXBlcywgZmFjdG9yLCBmcm9tRnVsbERyYXduID0gZmFsc2UpIHtcbiAgICAgICAgbGV0IG9mZnNldCA9IDA7XG4gICAgICAgIGZvciAoY29uc3Qgc2hhcGUgb2Ygc2hhcGVzKSB7XG4gICAgICAgICAgICBpZiAoZnJvbUZ1bGxEcmF3bikgb2Zmc2V0ID0gc2hhcGUubGVuZ3RoO1xuICAgICAgICAgICAgc2hhcGUuZWwuc2V0QXR0cmlidXRlKCdzdHJva2UtZGFzaG9mZnNldCcsIGAke3NoYXBlLmxlbmd0aCAqIGZhY3RvciArIG9mZnNldH1gKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsImV4cG9ydCBjb25zdCBnZXRJbnRlcm5hbExpbmtzID0gKCkgPT4ge1xuICAgIGNvbnN0IGxpbmtFbGVtZW50cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ2EnKTtcblxuICAgIHJldHVybiBbLi4ubGlua0VsZW1lbnRzXS5maWx0ZXIobGlua0VsZW1lbnQgPT4ge1xuICAgICAgICBjb25zdCBpc0xvY2FsID0gbGlua0VsZW1lbnQuaHJlZi5pbmRleE9mKHdpbmRvdy5sb2NhdGlvbi5vcmlnaW4pID4gLTE7XG4gICAgICAgIGNvbnN0IGlzTm90RW1haWwgPSBsaW5rRWxlbWVudC5ocmVmLmluZGV4T2YoJ21haWx0bycpID09PSAtMTtcbiAgICAgICAgY29uc3QgaXNOb3RQaG9uZSA9IGxpbmtFbGVtZW50LmhyZWYuaW5kZXhPZigndGVsJykgPT09IC0xO1xuICAgICAgICBjb25zdCBoUmVmID0gbGlua0VsZW1lbnQuZ2V0QXR0cmlidXRlKCdocmVmJyk7XG4gICAgICAgIGNvbnN0IGlzQW5jaG9yID0gaFJlZiA/IGhSZWYuc3RhcnRzV2l0aCgnIycpIDogZmFsc2U7XG4gICAgICAgIHJldHVybiAoaXNMb2NhbCAmJiBpc05vdFBob25lICYmIGlzTm90RW1haWwgJiYgIWlzQW5jaG9yKTtcbiAgICB9KTtcbn07XG5cbmV4cG9ydCBjb25zdCBwcmVsb2FkSW1hZ2VzID0gKHRhcmdldEVsZW1lbnQgPSBkb2N1bWVudCwgc2VsZWN0b3IgPSAnaW1nJykgPT4ge1xuICAgIGNvbnN0IGltYWdlcyA9IFsuLi50YXJnZXRFbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpXS5maWx0ZXIoaW1hZ2UgPT4gaW1hZ2UuZ2V0QXR0cmlidXRlKCdsb2FkaW5nJykgIT09ICdsYXp5Jyk7XG4gICAgcmV0dXJuIFsuLi5pbWFnZXNdLm1hcChpbWFnZUVsZW1lbnQgPT4gKFxuICAgICAgICBuZXcgUHJvbWlzZShyZXMgPT4ge1xuICAgICAgICAgICAgY29uc3QgaW1hZ2UgPSBuZXcgSW1hZ2UoKTtcbiAgICAgICAgICAgIGltYWdlLm9ubG9hZCA9ICgpID0+IHJlcyhpbWFnZUVsZW1lbnQpO1xuICAgICAgICAgICAgaW1hZ2Uub25lcnJvciA9ICgpID0+IHJlcyhpbWFnZUVsZW1lbnQpO1xuICAgICAgICAgICAgaW1hZ2Uuc3JjID0gaW1hZ2VFbGVtZW50LmdldEF0dHJpYnV0ZSgnc3JjJyk7XG4gICAgICAgIH0pXG4gICAgKSk7XG59O1xuIiwiZXhwb3J0IGNvbnN0IGludGVydmFsUHJvbWlzZSA9IChjYWxsYmFjaywgbWF4Q2FsbHNBbW91bnQsIG1pbGxpc2Vjb25kcykgPT4ge1xuICAgIGxldCBjYWxsc0Ftb3VudCA9IDA7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgICBjb25zdCBpbnRlcnZhbCA9IHNldEludGVydmFsKCgpID0+IHtcbiAgICAgICAgICAgIGlmIChjYWxsc0Ftb3VudCA+IG1heENhbGxzQW1vdW50KSB7XG4gICAgICAgICAgICAgICAgY2xlYXJJbnRlcnZhbChpbnRlcnZhbCk7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChjYWxsc0Ftb3VudCA8PSBtYXhDYWxsc0Ftb3VudCkge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKGNhbGxzQW1vdW50KTtcbiAgICAgICAgICAgICAgICBjYWxsc0Ftb3VudCsrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCBtaWxsaXNlY29uZHMpO1xuICAgIH0pO1xufTtcbiIsImltcG9ydCB7IG5vb3BSZXR1cm4sIGRlZmF1bHRzLCBpc0Vhc2luZ0dlbmVyYXRvciwgaXNFYXNpbmdMaXN0LCBpbnRlcnBvbGF0ZSB9IGZyb20gJ0Btb3Rpb25vbmUvdXRpbHMnO1xuaW1wb3J0IHsgZ2V0RWFzaW5nRnVuY3Rpb24gfSBmcm9tICcuL3V0aWxzL2Vhc2luZy5lcy5qcyc7XG5cbmNsYXNzIEFuaW1hdGlvbiB7XG4gICAgY29uc3RydWN0b3Iob3V0cHV0LCBrZXlmcmFtZXMgPSBbMCwgMV0sIHsgZWFzaW5nLCBkdXJhdGlvbjogaW5pdGlhbER1cmF0aW9uID0gZGVmYXVsdHMuZHVyYXRpb24sIGRlbGF5ID0gZGVmYXVsdHMuZGVsYXksIGVuZERlbGF5ID0gZGVmYXVsdHMuZW5kRGVsYXksIHJlcGVhdCA9IGRlZmF1bHRzLnJlcGVhdCwgb2Zmc2V0LCBkaXJlY3Rpb24gPSBcIm5vcm1hbFwiLCB9ID0ge30pIHtcbiAgICAgICAgdGhpcy5zdGFydFRpbWUgPSBudWxsO1xuICAgICAgICB0aGlzLnJhdGUgPSAxO1xuICAgICAgICB0aGlzLnQgPSAwO1xuICAgICAgICB0aGlzLmNhbmNlbFRpbWVzdGFtcCA9IG51bGw7XG4gICAgICAgIHRoaXMuZWFzaW5nID0gbm9vcFJldHVybjtcbiAgICAgICAgdGhpcy5kdXJhdGlvbiA9IDA7XG4gICAgICAgIHRoaXMudG90YWxEdXJhdGlvbiA9IDA7XG4gICAgICAgIHRoaXMucmVwZWF0ID0gMDtcbiAgICAgICAgdGhpcy5wbGF5U3RhdGUgPSBcImlkbGVcIjtcbiAgICAgICAgdGhpcy5maW5pc2hlZCA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIHRoaXMucmVzb2x2ZSA9IHJlc29sdmU7XG4gICAgICAgICAgICB0aGlzLnJlamVjdCA9IHJlamVjdDtcbiAgICAgICAgfSk7XG4gICAgICAgIGVhc2luZyA9IGVhc2luZyB8fCBkZWZhdWx0cy5lYXNpbmc7XG4gICAgICAgIGlmIChpc0Vhc2luZ0dlbmVyYXRvcihlYXNpbmcpKSB7XG4gICAgICAgICAgICBjb25zdCBjdXN0b20gPSBlYXNpbmcuY3JlYXRlQW5pbWF0aW9uKGtleWZyYW1lcywgKCkgPT4gXCIwXCIsIHRydWUpO1xuICAgICAgICAgICAgZWFzaW5nID0gY3VzdG9tLmVhc2luZztcbiAgICAgICAgICAgIGlmIChjdXN0b20ua2V5ZnJhbWVzICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICAgICAga2V5ZnJhbWVzID0gY3VzdG9tLmtleWZyYW1lcztcbiAgICAgICAgICAgIGlmIChjdXN0b20uZHVyYXRpb24gIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICBpbml0aWFsRHVyYXRpb24gPSBjdXN0b20uZHVyYXRpb247XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yZXBlYXQgPSByZXBlYXQ7XG4gICAgICAgIHRoaXMuZWFzaW5nID0gaXNFYXNpbmdMaXN0KGVhc2luZykgPyBub29wUmV0dXJuIDogZ2V0RWFzaW5nRnVuY3Rpb24oZWFzaW5nKTtcbiAgICAgICAgdGhpcy51cGRhdGVEdXJhdGlvbihpbml0aWFsRHVyYXRpb24pO1xuICAgICAgICBjb25zdCBpbnRlcnBvbGF0ZSQxID0gaW50ZXJwb2xhdGUoa2V5ZnJhbWVzLCBvZmZzZXQsIGlzRWFzaW5nTGlzdChlYXNpbmcpID8gZWFzaW5nLm1hcChnZXRFYXNpbmdGdW5jdGlvbikgOiBub29wUmV0dXJuKTtcbiAgICAgICAgdGhpcy50aWNrID0gKHRpbWVzdGFtcCkgPT4ge1xuICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgLy8gVE9ETzogVGVtcG9yYXJ5IGZpeCBmb3IgT3B0aW9uc1Jlc29sdmVyIHR5cGluZ1xuICAgICAgICAgICAgZGVsYXkgPSBkZWxheTtcbiAgICAgICAgICAgIGxldCB0ID0gMDtcbiAgICAgICAgICAgIGlmICh0aGlzLnBhdXNlVGltZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgdCA9IHRoaXMucGF1c2VUaW1lO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdCA9ICh0aW1lc3RhbXAgLSB0aGlzLnN0YXJ0VGltZSkgKiB0aGlzLnJhdGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnQgPSB0O1xuICAgICAgICAgICAgLy8gQ29udmVydCB0byBzZWNvbmRzXG4gICAgICAgICAgICB0IC89IDEwMDA7XG4gICAgICAgICAgICAvLyBSZWJhc2Ugb24gZGVsYXlcbiAgICAgICAgICAgIHQgPSBNYXRoLm1heCh0IC0gZGVsYXksIDApO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBJZiB0aGlzIGFuaW1hdGlvbiBoYXMgZmluaXNoZWQsIHNldCB0aGUgY3VycmVudCB0aW1lXG4gICAgICAgICAgICAgKiB0byB0aGUgdG90YWwgZHVyYXRpb24uXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGlmICh0aGlzLnBsYXlTdGF0ZSA9PT0gXCJmaW5pc2hlZFwiICYmIHRoaXMucGF1c2VUaW1lID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB0ID0gdGhpcy50b3RhbER1cmF0aW9uO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBHZXQgdGhlIGN1cnJlbnQgcHJvZ3Jlc3MgKDAtMSkgb2YgdGhlIGFuaW1hdGlvbi4gSWYgdCBpcyA+XG4gICAgICAgICAgICAgKiB0aGFuIGR1cmF0aW9uIHdlJ2xsIGdldCB2YWx1ZXMgbGlrZSAyLjUgKG1pZHdheSB0aHJvdWdoIHRoZVxuICAgICAgICAgICAgICogdGhpcmQgaXRlcmF0aW9uKVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBjb25zdCBwcm9ncmVzcyA9IHQgLyB0aGlzLmR1cmF0aW9uO1xuICAgICAgICAgICAgLy8gVE9ETyBwcm9ncmVzcyArPSBpdGVyYXRpb25TdGFydFxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBHZXQgdGhlIGN1cnJlbnQgaXRlcmF0aW9uICgwIGluZGV4ZWQpLiBGb3IgaW5zdGFuY2UgdGhlIGZsb29yIG9mXG4gICAgICAgICAgICAgKiAyLjUgaXMgMi5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgbGV0IGN1cnJlbnRJdGVyYXRpb24gPSBNYXRoLmZsb29yKHByb2dyZXNzKTtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogR2V0IHRoZSBjdXJyZW50IHByb2dyZXNzIG9mIHRoZSBpdGVyYXRpb24gYnkgdGFraW5nIHRoZSByZW1haW5kZXJcbiAgICAgICAgICAgICAqIHNvIDIuNSBpcyAwLjUgdGhyb3VnaCBpdGVyYXRpb24gMlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBsZXQgaXRlcmF0aW9uUHJvZ3Jlc3MgPSBwcm9ncmVzcyAlIDEuMDtcbiAgICAgICAgICAgIGlmICghaXRlcmF0aW9uUHJvZ3Jlc3MgJiYgcHJvZ3Jlc3MgPj0gMSkge1xuICAgICAgICAgICAgICAgIGl0ZXJhdGlvblByb2dyZXNzID0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogSWYgaXRlcmF0aW9uIHByb2dyZXNzIGlzIDEgd2UgY291bnQgdGhhdCBhcyB0aGUgZW5kXG4gICAgICAgICAgICAgKiBvZiB0aGUgcHJldmlvdXMgaXRlcmF0aW9uLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBpdGVyYXRpb25Qcm9ncmVzcyA9PT0gMSAmJiBjdXJyZW50SXRlcmF0aW9uLS07XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFJldmVyc2UgcHJvZ3Jlc3MgaWYgd2UncmUgbm90IHJ1bm5pbmcgaW4gXCJub3JtYWxcIiBkaXJlY3Rpb25cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgY29uc3QgaXRlcmF0aW9uSXNPZGQgPSBjdXJyZW50SXRlcmF0aW9uICUgMjtcbiAgICAgICAgICAgIGlmIChkaXJlY3Rpb24gPT09IFwicmV2ZXJzZVwiIHx8XG4gICAgICAgICAgICAgICAgKGRpcmVjdGlvbiA9PT0gXCJhbHRlcm5hdGVcIiAmJiBpdGVyYXRpb25Jc09kZCkgfHxcbiAgICAgICAgICAgICAgICAoZGlyZWN0aW9uID09PSBcImFsdGVybmF0ZS1yZXZlcnNlXCIgJiYgIWl0ZXJhdGlvbklzT2RkKSkge1xuICAgICAgICAgICAgICAgIGl0ZXJhdGlvblByb2dyZXNzID0gMSAtIGl0ZXJhdGlvblByb2dyZXNzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgcCA9IHQgPj0gdGhpcy50b3RhbER1cmF0aW9uID8gMSA6IE1hdGgubWluKGl0ZXJhdGlvblByb2dyZXNzLCAxKTtcbiAgICAgICAgICAgIGNvbnN0IGxhdGVzdCA9IGludGVycG9sYXRlJDEodGhpcy5lYXNpbmcocCkpO1xuICAgICAgICAgICAgb3V0cHV0KGxhdGVzdCk7XG4gICAgICAgICAgICBjb25zdCBpc0FuaW1hdGlvbkZpbmlzaGVkID0gdGhpcy5wYXVzZVRpbWUgPT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgICAgICh0aGlzLnBsYXlTdGF0ZSA9PT0gXCJmaW5pc2hlZFwiIHx8IHQgPj0gdGhpcy50b3RhbER1cmF0aW9uICsgZW5kRGVsYXkpO1xuICAgICAgICAgICAgaWYgKGlzQW5pbWF0aW9uRmluaXNoZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnBsYXlTdGF0ZSA9IFwiZmluaXNoZWRcIjtcbiAgICAgICAgICAgICAgICAoX2EgPSB0aGlzLnJlc29sdmUpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jYWxsKHRoaXMsIGxhdGVzdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLnBsYXlTdGF0ZSAhPT0gXCJpZGxlXCIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmZyYW1lUmVxdWVzdElkID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHRoaXMudGljayk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMucGxheSgpO1xuICAgIH1cbiAgICBwbGF5KCkge1xuICAgICAgICBjb25zdCBub3cgPSBwZXJmb3JtYW5jZS5ub3coKTtcbiAgICAgICAgdGhpcy5wbGF5U3RhdGUgPSBcInJ1bm5pbmdcIjtcbiAgICAgICAgaWYgKHRoaXMucGF1c2VUaW1lICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuc3RhcnRUaW1lID0gbm93IC0gdGhpcy5wYXVzZVRpbWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoIXRoaXMuc3RhcnRUaW1lKSB7XG4gICAgICAgICAgICB0aGlzLnN0YXJ0VGltZSA9IG5vdztcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNhbmNlbFRpbWVzdGFtcCA9IHRoaXMuc3RhcnRUaW1lO1xuICAgICAgICB0aGlzLnBhdXNlVGltZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5mcmFtZVJlcXVlc3RJZCA9IHJlcXVlc3RBbmltYXRpb25GcmFtZSh0aGlzLnRpY2spO1xuICAgIH1cbiAgICBwYXVzZSgpIHtcbiAgICAgICAgdGhpcy5wbGF5U3RhdGUgPSBcInBhdXNlZFwiO1xuICAgICAgICB0aGlzLnBhdXNlVGltZSA9IHRoaXMudDtcbiAgICB9XG4gICAgZmluaXNoKCkge1xuICAgICAgICB0aGlzLnBsYXlTdGF0ZSA9IFwiZmluaXNoZWRcIjtcbiAgICAgICAgdGhpcy50aWNrKDApO1xuICAgIH1cbiAgICBzdG9wKCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHRoaXMucGxheVN0YXRlID0gXCJpZGxlXCI7XG4gICAgICAgIGlmICh0aGlzLmZyYW1lUmVxdWVzdElkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGNhbmNlbEFuaW1hdGlvbkZyYW1lKHRoaXMuZnJhbWVSZXF1ZXN0SWQpO1xuICAgICAgICB9XG4gICAgICAgIChfYSA9IHRoaXMucmVqZWN0KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY2FsbCh0aGlzLCBmYWxzZSk7XG4gICAgfVxuICAgIGNhbmNlbCgpIHtcbiAgICAgICAgdGhpcy5zdG9wKCk7XG4gICAgICAgIHRoaXMudGljayh0aGlzLmNhbmNlbFRpbWVzdGFtcCk7XG4gICAgfVxuICAgIHJldmVyc2UoKSB7XG4gICAgICAgIHRoaXMucmF0ZSAqPSAtMTtcbiAgICB9XG4gICAgY29tbWl0U3R5bGVzKCkgeyB9XG4gICAgdXBkYXRlRHVyYXRpb24oZHVyYXRpb24pIHtcbiAgICAgICAgdGhpcy5kdXJhdGlvbiA9IGR1cmF0aW9uO1xuICAgICAgICB0aGlzLnRvdGFsRHVyYXRpb24gPSBkdXJhdGlvbiAqICh0aGlzLnJlcGVhdCArIDEpO1xuICAgIH1cbiAgICBnZXQgY3VycmVudFRpbWUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnQ7XG4gICAgfVxuICAgIHNldCBjdXJyZW50VGltZSh0KSB7XG4gICAgICAgIGlmICh0aGlzLnBhdXNlVGltZSAhPT0gdW5kZWZpbmVkIHx8IHRoaXMucmF0ZSA9PT0gMCkge1xuICAgICAgICAgICAgdGhpcy5wYXVzZVRpbWUgPSB0O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zdGFydFRpbWUgPSBwZXJmb3JtYW5jZS5ub3coKSAtIHQgLyB0aGlzLnJhdGU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0IHBsYXliYWNrUmF0ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmF0ZTtcbiAgICB9XG4gICAgc2V0IHBsYXliYWNrUmF0ZShyYXRlKSB7XG4gICAgICAgIHRoaXMucmF0ZSA9IHJhdGU7XG4gICAgfVxufVxuXG5leHBvcnQgeyBBbmltYXRpb24gfTtcbiIsImltcG9ydCB7IGN1YmljQmV6aWVyLCBzdGVwcyB9IGZyb20gJ0Btb3Rpb25vbmUvZWFzaW5nJztcbmltcG9ydCB7IGlzRnVuY3Rpb24sIG5vb3BSZXR1cm4gfSBmcm9tICdAbW90aW9ub25lL3V0aWxzJztcblxuY29uc3QgbmFtZWRFYXNpbmdzID0ge1xuICAgIGVhc2U6IGN1YmljQmV6aWVyKDAuMjUsIDAuMSwgMC4yNSwgMS4wKSxcbiAgICBcImVhc2UtaW5cIjogY3ViaWNCZXppZXIoMC40MiwgMC4wLCAxLjAsIDEuMCksXG4gICAgXCJlYXNlLWluLW91dFwiOiBjdWJpY0JlemllcigwLjQyLCAwLjAsIDAuNTgsIDEuMCksXG4gICAgXCJlYXNlLW91dFwiOiBjdWJpY0JlemllcigwLjAsIDAuMCwgMC41OCwgMS4wKSxcbn07XG5jb25zdCBmdW5jdGlvbkFyZ3NSZWdleCA9IC9cXCgoLio/KVxcKS87XG5mdW5jdGlvbiBnZXRFYXNpbmdGdW5jdGlvbihkZWZpbml0aW9uKSB7XG4gICAgLy8gSWYgYWxyZWFkeSBhbiBlYXNpbmcgZnVuY3Rpb24sIHJldHVyblxuICAgIGlmIChpc0Z1bmN0aW9uKGRlZmluaXRpb24pKVxuICAgICAgICByZXR1cm4gZGVmaW5pdGlvbjtcbiAgICAvLyBJZiBhbiBlYXNpbmcgY3VydmUgZGVmaW5pdGlvbiwgcmV0dXJuIGJlemllciBmdW5jdGlvblxuICAgIGlmIChBcnJheS5pc0FycmF5KGRlZmluaXRpb24pKVxuICAgICAgICByZXR1cm4gY3ViaWNCZXppZXIoLi4uZGVmaW5pdGlvbik7XG4gICAgLy8gSWYgd2UgaGF2ZSBhIHByZWRlZmluZWQgZWFzaW5nIGZ1bmN0aW9uLCByZXR1cm5cbiAgICBpZiAobmFtZWRFYXNpbmdzW2RlZmluaXRpb25dKVxuICAgICAgICByZXR1cm4gbmFtZWRFYXNpbmdzW2RlZmluaXRpb25dO1xuICAgIC8vIElmIHRoaXMgaXMgYSBzdGVwcyBmdW5jdGlvbiwgYXR0ZW1wdCB0byBjcmVhdGUgZWFzaW5nIGN1cnZlXG4gICAgaWYgKGRlZmluaXRpb24uc3RhcnRzV2l0aChcInN0ZXBzXCIpKSB7XG4gICAgICAgIGNvbnN0IGFyZ3MgPSBmdW5jdGlvbkFyZ3NSZWdleC5leGVjKGRlZmluaXRpb24pO1xuICAgICAgICBpZiAoYXJncykge1xuICAgICAgICAgICAgY29uc3QgYXJnc0FycmF5ID0gYXJnc1sxXS5zcGxpdChcIixcIik7XG4gICAgICAgICAgICByZXR1cm4gc3RlcHMocGFyc2VGbG9hdChhcmdzQXJyYXlbMF0pLCBhcmdzQXJyYXlbMV0udHJpbSgpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbm9vcFJldHVybjtcbn1cblxuZXhwb3J0IHsgZ2V0RWFzaW5nRnVuY3Rpb24gfTtcbiIsImltcG9ydCB7IGdldEFuaW1hdGlvbkRhdGEsIGdldE1vdGlvblZhbHVlIH0gZnJvbSAnLi9kYXRhLmVzLmpzJztcbmltcG9ydCB7IGlzQ3NzVmFyLCByZWdpc3RlckNzc1ZhcmlhYmxlIH0gZnJvbSAnLi91dGlscy9jc3MtdmFyLmVzLmpzJztcbmltcG9ydCB7IEFuaW1hdGlvbiB9IGZyb20gJ0Btb3Rpb25vbmUvYW5pbWF0aW9uJztcbmltcG9ydCB7IGRlZmF1bHRzLCBpc0Vhc2luZ0dlbmVyYXRvciwgaXNGdW5jdGlvbiwgaXNFYXNpbmdMaXN0LCBpc051bWJlciwgdGltZSwgbm9vcCB9IGZyb20gJ0Btb3Rpb25vbmUvdXRpbHMnO1xuaW1wb3J0IHsgaXNUcmFuc2Zvcm0sIGFkZFRyYW5zZm9ybVRvRWxlbWVudCwgdHJhbnNmb3JtRGVmaW5pdGlvbnMgfSBmcm9tICcuL3V0aWxzL3RyYW5zZm9ybXMuZXMuanMnO1xuaW1wb3J0IHsgY29udmVydEVhc2luZyB9IGZyb20gJy4vdXRpbHMvZWFzaW5nLmVzLmpzJztcbmltcG9ydCB7IHN1cHBvcnRzIH0gZnJvbSAnLi91dGlscy9mZWF0dXJlLWRldGVjdGlvbi5lcy5qcyc7XG5pbXBvcnQgeyBoeWRyYXRlS2V5ZnJhbWVzLCBrZXlmcmFtZXNMaXN0IH0gZnJvbSAnLi91dGlscy9rZXlmcmFtZXMuZXMuanMnO1xuaW1wb3J0IHsgc3R5bGUgfSBmcm9tICcuL3N0eWxlLmVzLmpzJztcbmltcG9ydCB7IGdldFN0eWxlTmFtZSB9IGZyb20gJy4vdXRpbHMvZ2V0LXN0eWxlLW5hbWUuZXMuanMnO1xuaW1wb3J0IHsgc3RvcEFuaW1hdGlvbiB9IGZyb20gJy4vdXRpbHMvc3RvcC1hbmltYXRpb24uZXMuanMnO1xuXG5mdW5jdGlvbiBnZXREZXZUb29sc1JlY29yZCgpIHtcbiAgICByZXR1cm4gd2luZG93Ll9fTU9USU9OX0RFVl9UT09MU19SRUNPUkQ7XG59XG5mdW5jdGlvbiBhbmltYXRlU3R5bGUoZWxlbWVudCwga2V5LCBrZXlmcmFtZXNEZWZpbml0aW9uLCBvcHRpb25zID0ge30pIHtcbiAgICBjb25zdCByZWNvcmQgPSBnZXREZXZUb29sc1JlY29yZCgpO1xuICAgIGNvbnN0IGlzUmVjb3JkaW5nID0gb3B0aW9ucy5yZWNvcmQgIT09IGZhbHNlICYmIHJlY29yZDtcbiAgICBsZXQgYW5pbWF0aW9uO1xuICAgIGxldCB7IGR1cmF0aW9uID0gZGVmYXVsdHMuZHVyYXRpb24sIGRlbGF5ID0gZGVmYXVsdHMuZGVsYXksIGVuZERlbGF5ID0gZGVmYXVsdHMuZW5kRGVsYXksIHJlcGVhdCA9IGRlZmF1bHRzLnJlcGVhdCwgZWFzaW5nID0gZGVmYXVsdHMuZWFzaW5nLCBkaXJlY3Rpb24sIG9mZnNldCwgYWxsb3dXZWJraXRBY2NlbGVyYXRpb24gPSBmYWxzZSwgfSA9IG9wdGlvbnM7XG4gICAgY29uc3QgZGF0YSA9IGdldEFuaW1hdGlvbkRhdGEoZWxlbWVudCk7XG4gICAgY29uc3QgdmFsdWVJc1RyYW5zZm9ybSA9IGlzVHJhbnNmb3JtKGtleSk7XG4gICAgbGV0IGNhbkFuaW1hdGVOYXRpdmVseSA9IHN1cHBvcnRzLndhYXBpKCk7XG4gICAgLyoqXG4gICAgICogSWYgdGhpcyBpcyBhbiBpbmRpdmlkdWFsIHRyYW5zZm9ybSwgd2UgbmVlZCB0byBtYXAgaXRzXG4gICAgICoga2V5IHRvIGEgQ1NTIHZhcmlhYmxlIGFuZCB1cGRhdGUgdGhlIGVsZW1lbnQncyB0cmFuc2Zvcm0gc3R5bGVcbiAgICAgKi9cbiAgICB2YWx1ZUlzVHJhbnNmb3JtICYmIGFkZFRyYW5zZm9ybVRvRWxlbWVudChlbGVtZW50LCBrZXkpO1xuICAgIGNvbnN0IG5hbWUgPSBnZXRTdHlsZU5hbWUoa2V5KTtcbiAgICBjb25zdCBtb3Rpb25WYWx1ZSA9IGdldE1vdGlvblZhbHVlKGRhdGEudmFsdWVzLCBuYW1lKTtcbiAgICAvKipcbiAgICAgKiBHZXQgZGVmaW5pdGlvbiBvZiB2YWx1ZSwgdGhpcyB3aWxsIGJlIHVzZWQgdG8gY29udmVydCBudW1lcmljYWxcbiAgICAgKiBrZXlmcmFtZXMgaW50byB0aGUgZGVmYXVsdCB2YWx1ZSB0eXBlLlxuICAgICAqL1xuICAgIGNvbnN0IGRlZmluaXRpb24gPSB0cmFuc2Zvcm1EZWZpbml0aW9ucy5nZXQobmFtZSk7XG4gICAgLyoqXG4gICAgICogU3RvcCB0aGUgY3VycmVudCBhbmltYXRpb24sIGlmIGFueS4gQmVjYXVzZSB0aGlzIHdpbGwgdHJpZ2dlclxuICAgICAqIGNvbW1pdFN0eWxlcyAoRE9NIHdyaXRlcykgYW5kIHdlIG1pZ2h0IGxhdGVyIHRyaWdnZXIgRE9NIHJlYWRzLFxuICAgICAqIHRoaXMgaXMgZmlyZWQgbm93IGFuZCB3ZSByZXR1cm4gYSBmYWN0b3J5IGZ1bmN0aW9uIHRvIGNyZWF0ZVxuICAgICAqIHRoZSBhY3R1YWwgYW5pbWF0aW9uIHRoYXQgY2FuIGdldCBjYWxsZWQgaW4gYmF0Y2gsXG4gICAgICovXG4gICAgc3RvcEFuaW1hdGlvbihtb3Rpb25WYWx1ZS5hbmltYXRpb24sICEoaXNFYXNpbmdHZW5lcmF0b3IoZWFzaW5nKSAmJiBtb3Rpb25WYWx1ZS5nZW5lcmF0b3IpICYmXG4gICAgICAgIG9wdGlvbnMucmVjb3JkICE9PSBmYWxzZSk7XG4gICAgLyoqXG4gICAgICogQmF0Y2hhYmxlIGZhY3RvcnkgZnVuY3Rpb24gY29udGFpbmluZyBhbGwgRE9NIHJlYWRzLlxuICAgICAqL1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHJlYWRJbml0aWFsVmFsdWUgPSAoKSA9PiB7IHZhciBfYSwgX2I7IHJldHVybiAoX2IgPSAoX2EgPSBzdHlsZS5nZXQoZWxlbWVudCwgbmFtZSkpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IGRlZmluaXRpb24gPT09IG51bGwgfHwgZGVmaW5pdGlvbiA9PT0gdm9pZCAwID8gdm9pZCAwIDogZGVmaW5pdGlvbi5pbml0aWFsVmFsdWUpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IDA7IH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZXBsYWNlIG51bGwgdmFsdWVzIHdpdGggdGhlIHByZXZpb3VzIGtleWZyYW1lIHZhbHVlLCBvciByZWFkXG4gICAgICAgICAqIGl0IGZyb20gdGhlIERPTSBpZiBpdCdzIHRoZSBmaXJzdCBrZXlmcmFtZS5cbiAgICAgICAgICovXG4gICAgICAgIGxldCBrZXlmcmFtZXMgPSBoeWRyYXRlS2V5ZnJhbWVzKGtleWZyYW1lc0xpc3Qoa2V5ZnJhbWVzRGVmaW5pdGlvbiksIHJlYWRJbml0aWFsVmFsdWUpO1xuICAgICAgICBpZiAoaXNFYXNpbmdHZW5lcmF0b3IoZWFzaW5nKSkge1xuICAgICAgICAgICAgY29uc3QgY3VzdG9tID0gZWFzaW5nLmNyZWF0ZUFuaW1hdGlvbihrZXlmcmFtZXMsIHJlYWRJbml0aWFsVmFsdWUsIHZhbHVlSXNUcmFuc2Zvcm0sIG5hbWUsIG1vdGlvblZhbHVlKTtcbiAgICAgICAgICAgIGVhc2luZyA9IGN1c3RvbS5lYXNpbmc7XG4gICAgICAgICAgICBpZiAoY3VzdG9tLmtleWZyYW1lcyAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgIGtleWZyYW1lcyA9IGN1c3RvbS5rZXlmcmFtZXM7XG4gICAgICAgICAgICBpZiAoY3VzdG9tLmR1cmF0aW9uICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgZHVyYXRpb24gPSBjdXN0b20uZHVyYXRpb247XG4gICAgICAgIH1cbiAgICAgICAgLyoqXG4gICAgICAgICAqIElmIHRoaXMgaXMgYSBDU1MgdmFyaWFibGUgd2UgbmVlZCB0byByZWdpc3RlciBpdCB3aXRoIHRoZSBicm93c2VyXG4gICAgICAgICAqIGJlZm9yZSBpdCBjYW4gYmUgYW5pbWF0ZWQgbmF0aXZlbHkuIFdlIGFsc28gc2V0IGl0IHdpdGggc2V0UHJvcGVydHlcbiAgICAgICAgICogcmF0aGVyIHRoYW4gZGlyZWN0bHkgb250byB0aGUgZWxlbWVudC5zdHlsZSBvYmplY3QuXG4gICAgICAgICAqL1xuICAgICAgICBpZiAoaXNDc3NWYXIobmFtZSkpIHtcbiAgICAgICAgICAgIGlmIChzdXBwb3J0cy5jc3NSZWdpc3RlclByb3BlcnR5KCkpIHtcbiAgICAgICAgICAgICAgICByZWdpc3RlckNzc1ZhcmlhYmxlKG5hbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY2FuQW5pbWF0ZU5hdGl2ZWx5ID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLyoqXG4gICAgICAgICAqIElmIHdlJ3ZlIGJlZW4gcGFzc2VkIGEgY3VzdG9tIGVhc2luZyBmdW5jdGlvbiwgYW5kIHRoaXMgYnJvd3NlclxuICAgICAgICAgKiBkb2VzICoqbm90Kiogc3VwcG9ydCBsaW5lYXIoKSBlYXNpbmcsIGFuZCB0aGUgdmFsdWUgaXMgYSB0cmFuc2Zvcm1cbiAgICAgICAgICogKGFuZCB0aHVzIGEgcHVyZSBudW1iZXIpIHdlIGNhbiBzdGlsbCBzdXBwb3J0IHRoZSBjdXN0b20gZWFzaW5nXG4gICAgICAgICAqIGJ5IGZhbGxpbmcgYmFjayB0byB0aGUgYW5pbWF0aW9uIHBvbHlmaWxsLlxuICAgICAgICAgKi9cbiAgICAgICAgaWYgKHZhbHVlSXNUcmFuc2Zvcm0gJiZcbiAgICAgICAgICAgICFzdXBwb3J0cy5saW5lYXJFYXNpbmcoKSAmJlxuICAgICAgICAgICAgKGlzRnVuY3Rpb24oZWFzaW5nKSB8fCAoaXNFYXNpbmdMaXN0KGVhc2luZykgJiYgZWFzaW5nLnNvbWUoaXNGdW5jdGlvbikpKSkge1xuICAgICAgICAgICAgY2FuQW5pbWF0ZU5hdGl2ZWx5ID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgLyoqXG4gICAgICAgICAqIElmIHdlIGNhbiBhbmltYXRlIHRoaXMgdmFsdWUgd2l0aCBXQUFQSSwgZG8gc28uXG4gICAgICAgICAqL1xuICAgICAgICBpZiAoY2FuQW5pbWF0ZU5hdGl2ZWx5KSB7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIENvbnZlcnQgbnVtYmVycyB0byBkZWZhdWx0IHZhbHVlIHR5cGVzLiBDdXJyZW50bHkgdGhpcyBvbmx5IHN1cHBvcnRzXG4gICAgICAgICAgICAgKiB0cmFuc2Zvcm1zIGJ1dCBpdCBjb3VsZCBhbHNvIHN1cHBvcnQgb3RoZXIgdmFsdWUgdHlwZXMuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGlmIChkZWZpbml0aW9uKSB7XG4gICAgICAgICAgICAgICAga2V5ZnJhbWVzID0ga2V5ZnJhbWVzLm1hcCgodmFsdWUpID0+IGlzTnVtYmVyKHZhbHVlKSA/IGRlZmluaXRpb24udG9EZWZhdWx0VW5pdCh2YWx1ZSkgOiB2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIElmIHRoaXMgYnJvd3NlciBkb2Vzbid0IHN1cHBvcnQgcGFydGlhbC9pbXBsaWNpdCBrZXlmcmFtZXMgd2UgbmVlZCB0b1xuICAgICAgICAgICAgICogZXhwbGljaXRseSBwcm92aWRlIG9uZS5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgaWYgKGtleWZyYW1lcy5sZW5ndGggPT09IDEgJiZcbiAgICAgICAgICAgICAgICAoIXN1cHBvcnRzLnBhcnRpYWxLZXlmcmFtZXMoKSB8fCBpc1JlY29yZGluZykpIHtcbiAgICAgICAgICAgICAgICBrZXlmcmFtZXMudW5zaGlmdChyZWFkSW5pdGlhbFZhbHVlKCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgYW5pbWF0aW9uT3B0aW9ucyA9IHtcbiAgICAgICAgICAgICAgICBkZWxheTogdGltZS5tcyhkZWxheSksXG4gICAgICAgICAgICAgICAgZHVyYXRpb246IHRpbWUubXMoZHVyYXRpb24pLFxuICAgICAgICAgICAgICAgIGVuZERlbGF5OiB0aW1lLm1zKGVuZERlbGF5KSxcbiAgICAgICAgICAgICAgICBlYXNpbmc6ICFpc0Vhc2luZ0xpc3QoZWFzaW5nKVxuICAgICAgICAgICAgICAgICAgICA/IGNvbnZlcnRFYXNpbmcoZWFzaW5nLCBkdXJhdGlvbilcbiAgICAgICAgICAgICAgICAgICAgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgZGlyZWN0aW9uLFxuICAgICAgICAgICAgICAgIGl0ZXJhdGlvbnM6IHJlcGVhdCArIDEsXG4gICAgICAgICAgICAgICAgZmlsbDogXCJib3RoXCIsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgYW5pbWF0aW9uID0gZWxlbWVudC5hbmltYXRlKHtcbiAgICAgICAgICAgICAgICBbbmFtZV06IGtleWZyYW1lcyxcbiAgICAgICAgICAgICAgICBvZmZzZXQsXG4gICAgICAgICAgICAgICAgZWFzaW5nOiBpc0Vhc2luZ0xpc3QoZWFzaW5nKVxuICAgICAgICAgICAgICAgICAgICA/IGVhc2luZy5tYXAoKHRoaXNFYXNpbmcpID0+IGNvbnZlcnRFYXNpbmcodGhpc0Vhc2luZywgZHVyYXRpb24pKVxuICAgICAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIH0sIGFuaW1hdGlvbk9wdGlvbnMpO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBQb2x5ZmlsbCBmaW5pc2hlZCBQcm9taXNlIGluIGJyb3dzZXJzIHRoYXQgZG9uJ3Qgc3VwcG9ydCBpdFxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBpZiAoIWFuaW1hdGlvbi5maW5pc2hlZCkge1xuICAgICAgICAgICAgICAgIGFuaW1hdGlvbi5maW5pc2hlZCA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uLm9uZmluaXNoID0gcmVzb2x2ZTtcbiAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uLm9uY2FuY2VsID0gcmVqZWN0O1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgdGFyZ2V0ID0ga2V5ZnJhbWVzW2tleWZyYW1lcy5sZW5ndGggLSAxXTtcbiAgICAgICAgICAgIGFuaW1hdGlvbi5maW5pc2hlZFxuICAgICAgICAgICAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICAvLyBBcHBseSBzdHlsZXMgdG8gdGFyZ2V0XG4gICAgICAgICAgICAgICAgc3R5bGUuc2V0KGVsZW1lbnQsIG5hbWUsIHRhcmdldCk7XG4gICAgICAgICAgICAgICAgLy8gRW5zdXJlIGZpbGwgbW9kZXMgZG9uJ3QgcGVyc2lzdFxuICAgICAgICAgICAgICAgIGFuaW1hdGlvbi5jYW5jZWwoKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLmNhdGNoKG5vb3ApO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBUaGlzIGZvcmNlcyBXZWJraXQgdG8gcnVuIGFuaW1hdGlvbnMgb24gdGhlIG1haW4gdGhyZWFkIGJ5IGV4cGxvaXRpbmdcbiAgICAgICAgICAgICAqIHRoaXMgY29uZGl0aW9uOlxuICAgICAgICAgICAgICogaHR0cHM6Ly90cmFjLndlYmtpdC5vcmcvYnJvd3Nlci93ZWJraXQvdHJ1bmsvU291cmNlL1dlYkNvcmUvcGxhdGZvcm0vZ3JhcGhpY3MvY2EvR3JhcGhpY3NMYXllckNBLmNwcD9yZXY9MjgxMjM4I0wxMDk5XG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogVGhpcyBmaXhlcyBXZWJraXQncyB0aW1pbmcgYnVncywgbGlrZSBhY2NlbGVyYXRlZCBhbmltYXRpb25zIGZhbGxpbmdcbiAgICAgICAgICAgICAqIG91dCBvZiBzeW5jIHdpdGggbWFpbiB0aHJlYWQgYW5pbWF0aW9ucyBhbmQgbWFzc2l2ZSBkZWxheXMgaW4gc3RhcnRpbmdcbiAgICAgICAgICAgICAqIGFjY2VsZXJhdGVkIGFuaW1hdGlvbnMgaW4gV0tXZWJWaWV3LlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBpZiAoIWFsbG93V2Via2l0QWNjZWxlcmF0aW9uKVxuICAgICAgICAgICAgICAgIGFuaW1hdGlvbi5wbGF5YmFja1JhdGUgPSAxLjAwMDAwMTtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogSWYgd2UgY2FuJ3QgYW5pbWF0ZSB0aGUgdmFsdWUgbmF0aXZlbHkgdGhlbiB3ZSBjYW4gZmFsbGJhY2sgdG8gdGhlIG51bWJlcnMtb25seVxuICAgICAgICAgICAgICogcG9seWZpbGwgZm9yIHRyYW5zZm9ybXMuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh2YWx1ZUlzVHJhbnNmb3JtKSB7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIElmIGFueSBrZXlmcmFtZSBpcyBhIHN0cmluZyAoYmVjYXVzZSB3ZSBtZWFzdXJlZCBpdCBmcm9tIHRoZSBET00pLCB3ZSBuZWVkIHRvIGNvbnZlcnRcbiAgICAgICAgICAgICAqIGl0IGludG8gYSBudW1iZXIgYmVmb3JlIHBhc3NpbmcgdG8gdGhlIEFuaW1hdGlvbiBwb2x5ZmlsbC5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAga2V5ZnJhbWVzID0ga2V5ZnJhbWVzLm1hcCgodmFsdWUpID0+IHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiA/IHBhcnNlRmxvYXQodmFsdWUpIDogdmFsdWUpO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBJZiB3ZSBvbmx5IGhhdmUgYSBzaW5nbGUga2V5ZnJhbWUsIHdlIG5lZWQgdG8gY3JlYXRlIGFuIGluaXRpYWwga2V5ZnJhbWUgYnkgcmVhZGluZ1xuICAgICAgICAgICAgICogdGhlIGN1cnJlbnQgdmFsdWUgZnJvbSB0aGUgRE9NLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBpZiAoa2V5ZnJhbWVzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgICAgIGtleWZyYW1lcy51bnNoaWZ0KHBhcnNlRmxvYXQocmVhZEluaXRpYWxWYWx1ZSgpKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCByZW5kZXIgPSAobGF0ZXN0KSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGRlZmluaXRpb24pXG4gICAgICAgICAgICAgICAgICAgIGxhdGVzdCA9IGRlZmluaXRpb24udG9EZWZhdWx0VW5pdChsYXRlc3QpO1xuICAgICAgICAgICAgICAgIHN0eWxlLnNldChlbGVtZW50LCBuYW1lLCBsYXRlc3QpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGFuaW1hdGlvbiA9IG5ldyBBbmltYXRpb24ocmVuZGVyLCBrZXlmcmFtZXMsIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgb3B0aW9ucyksIHsgZHVyYXRpb24sXG4gICAgICAgICAgICAgICAgZWFzaW5nIH0pKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IHRhcmdldCA9IGtleWZyYW1lc1trZXlmcmFtZXMubGVuZ3RoIC0gMV07XG4gICAgICAgICAgICBzdHlsZS5zZXQoZWxlbWVudCwgbmFtZSwgZGVmaW5pdGlvbiAmJiBpc051bWJlcih0YXJnZXQpXG4gICAgICAgICAgICAgICAgPyBkZWZpbml0aW9uLnRvRGVmYXVsdFVuaXQodGFyZ2V0KVxuICAgICAgICAgICAgICAgIDogdGFyZ2V0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNSZWNvcmRpbmcpIHtcbiAgICAgICAgICAgIHJlY29yZChlbGVtZW50LCBrZXksIGtleWZyYW1lcywge1xuICAgICAgICAgICAgICAgIGR1cmF0aW9uLFxuICAgICAgICAgICAgICAgIGRlbGF5OiBkZWxheSxcbiAgICAgICAgICAgICAgICBlYXNpbmcsXG4gICAgICAgICAgICAgICAgcmVwZWF0LFxuICAgICAgICAgICAgICAgIG9mZnNldCxcbiAgICAgICAgICAgIH0sIFwibW90aW9uLW9uZVwiKTtcbiAgICAgICAgfVxuICAgICAgICBtb3Rpb25WYWx1ZS5zZXRBbmltYXRpb24oYW5pbWF0aW9uKTtcbiAgICAgICAgcmV0dXJuIGFuaW1hdGlvbjtcbiAgICB9O1xufVxuXG5leHBvcnQgeyBhbmltYXRlU3R5bGUgfTtcbiIsImltcG9ydCB7IE1vdGlvblZhbHVlIH0gZnJvbSAnQG1vdGlvbm9uZS90eXBlcyc7XG5cbmNvbnN0IGRhdGEgPSBuZXcgV2Vha01hcCgpO1xuZnVuY3Rpb24gZ2V0QW5pbWF0aW9uRGF0YShlbGVtZW50KSB7XG4gICAgaWYgKCFkYXRhLmhhcyhlbGVtZW50KSkge1xuICAgICAgICBkYXRhLnNldChlbGVtZW50LCB7XG4gICAgICAgICAgICB0cmFuc2Zvcm1zOiBbXSxcbiAgICAgICAgICAgIHZhbHVlczogbmV3IE1hcCgpLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGRhdGEuZ2V0KGVsZW1lbnQpO1xufVxuZnVuY3Rpb24gZ2V0TW90aW9uVmFsdWUobW90aW9uVmFsdWVzLCBuYW1lKSB7XG4gICAgaWYgKCFtb3Rpb25WYWx1ZXMuaGFzKG5hbWUpKSB7XG4gICAgICAgIG1vdGlvblZhbHVlcy5zZXQobmFtZSwgbmV3IE1vdGlvblZhbHVlKCkpO1xuICAgIH1cbiAgICByZXR1cm4gbW90aW9uVmFsdWVzLmdldChuYW1lKTtcbn1cblxuZXhwb3J0IHsgZ2V0QW5pbWF0aW9uRGF0YSwgZ2V0TW90aW9uVmFsdWUgfTtcbiIsImltcG9ydCB7IGFuaW1hdGVTdHlsZSB9IGZyb20gJy4vYW5pbWF0ZS1zdHlsZS5lcy5qcyc7XG5pbXBvcnQgeyBnZXRPcHRpb25zIH0gZnJvbSAnLi91dGlscy9vcHRpb25zLmVzLmpzJztcbmltcG9ydCB7IHJlc29sdmVFbGVtZW50cyB9IGZyb20gJy4uL3V0aWxzL3Jlc29sdmUtZWxlbWVudHMuZXMuanMnO1xuaW1wb3J0IHsgd2l0aENvbnRyb2xzIH0gZnJvbSAnLi91dGlscy9jb250cm9scy5lcy5qcyc7XG5pbXBvcnQgeyByZXNvbHZlT3B0aW9uIH0gZnJvbSAnLi4vdXRpbHMvc3RhZ2dlci5lcy5qcyc7XG5cbmZ1bmN0aW9uIGFuaW1hdGUoZWxlbWVudHMsIGtleWZyYW1lcywgb3B0aW9ucyA9IHt9KSB7XG4gICAgZWxlbWVudHMgPSByZXNvbHZlRWxlbWVudHMoZWxlbWVudHMpO1xuICAgIGNvbnN0IG51bUVsZW1lbnRzID0gZWxlbWVudHMubGVuZ3RoO1xuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhbmQgc3RhcnQgbmV3IGFuaW1hdGlvbnNcbiAgICAgKi9cbiAgICBjb25zdCBhbmltYXRpb25GYWN0b3JpZXMgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG51bUVsZW1lbnRzOyBpKyspIHtcbiAgICAgICAgY29uc3QgZWxlbWVudCA9IGVsZW1lbnRzW2ldO1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBrZXlmcmFtZXMpIHtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlT3B0aW9ucyA9IGdldE9wdGlvbnMob3B0aW9ucywga2V5KTtcbiAgICAgICAgICAgIHZhbHVlT3B0aW9ucy5kZWxheSA9IHJlc29sdmVPcHRpb24odmFsdWVPcHRpb25zLmRlbGF5LCBpLCBudW1FbGVtZW50cyk7XG4gICAgICAgICAgICBjb25zdCBhbmltYXRpb24gPSBhbmltYXRlU3R5bGUoZWxlbWVudCwga2V5LCBrZXlmcmFtZXNba2V5XSwgdmFsdWVPcHRpb25zKTtcbiAgICAgICAgICAgIGFuaW1hdGlvbkZhY3Rvcmllcy5wdXNoKGFuaW1hdGlvbik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHdpdGhDb250cm9scyhhbmltYXRpb25GYWN0b3JpZXMsIG9wdGlvbnMsIFxuICAgIC8qKlxuICAgICAqIFRPRE86XG4gICAgICogSWYgZWFzaW5nIGlzIHNldCB0byBzcHJpbmcgb3IgZ2xpZGUsIGR1cmF0aW9uIHdpbGwgYmUgZHluYW1pY2FsbHlcbiAgICAgKiBnZW5lcmF0ZWQuIElkZWFsbHkgd2Ugd291bGQgZHluYW1pY2FsbHkgZ2VuZXJhdGUgdGhpcyBmcm9tXG4gICAgICogYW5pbWF0aW9uLmVmZmVjdC5nZXRDb21wdXRlZFRpbWluZygpLmR1cmF0aW9uIGJ1dCB0aGlzIGlzbid0XG4gICAgICogc3VwcG9ydGVkIGluIGlPUzEzIG9yIG91ciBudW1iZXIgcG9seWZpbGwuIFBlcmhhcHMgaXQncyBwb3NzaWJsZVxuICAgICAqIHRvIFByb3h5IGFuaW1hdGlvbnMgcmV0dXJuZWQgZnJvbSBhbmltYXRlU3R5bGUgdGhhdCBoYXMgZHVyYXRpb25cbiAgICAgKiBhcyBhIGdldHRlci5cbiAgICAgKi9cbiAgICBvcHRpb25zLmR1cmF0aW9uKTtcbn1cblxuZXhwb3J0IHsgYW5pbWF0ZSB9O1xuIiwiaW1wb3J0IHsgaXNDc3NWYXIgfSBmcm9tICcuL3V0aWxzL2Nzcy12YXIuZXMuanMnO1xuaW1wb3J0IHsgZ2V0U3R5bGVOYW1lIH0gZnJvbSAnLi91dGlscy9nZXQtc3R5bGUtbmFtZS5lcy5qcyc7XG5pbXBvcnQgeyB0cmFuc2Zvcm1EZWZpbml0aW9ucyB9IGZyb20gJy4vdXRpbHMvdHJhbnNmb3Jtcy5lcy5qcyc7XG5cbmNvbnN0IHN0eWxlID0ge1xuICAgIGdldDogKGVsZW1lbnQsIG5hbWUpID0+IHtcbiAgICAgICAgbmFtZSA9IGdldFN0eWxlTmFtZShuYW1lKTtcbiAgICAgICAgbGV0IHZhbHVlID0gaXNDc3NWYXIobmFtZSlcbiAgICAgICAgICAgID8gZWxlbWVudC5zdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKG5hbWUpXG4gICAgICAgICAgICA6IGdldENvbXB1dGVkU3R5bGUoZWxlbWVudClbbmFtZV07XG4gICAgICAgIGlmICghdmFsdWUgJiYgdmFsdWUgIT09IDApIHtcbiAgICAgICAgICAgIGNvbnN0IGRlZmluaXRpb24gPSB0cmFuc2Zvcm1EZWZpbml0aW9ucy5nZXQobmFtZSk7XG4gICAgICAgICAgICBpZiAoZGVmaW5pdGlvbilcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IGRlZmluaXRpb24uaW5pdGlhbFZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9LFxuICAgIHNldDogKGVsZW1lbnQsIG5hbWUsIHZhbHVlKSA9PiB7XG4gICAgICAgIG5hbWUgPSBnZXRTdHlsZU5hbWUobmFtZSk7XG4gICAgICAgIGlmIChpc0Nzc1ZhcihuYW1lKSkge1xuICAgICAgICAgICAgZWxlbWVudC5zdHlsZS5zZXRQcm9wZXJ0eShuYW1lLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBlbGVtZW50LnN0eWxlW25hbWVdID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICB9LFxufTtcblxuZXhwb3J0IHsgc3R5bGUgfTtcbiIsImltcG9ydCB7IGRlZmF1bHRzLCBub29wLCB0aW1lIH0gZnJvbSAnQG1vdGlvbm9uZS91dGlscyc7XG5pbXBvcnQgeyBzdG9wQW5pbWF0aW9uIH0gZnJvbSAnLi9zdG9wLWFuaW1hdGlvbi5lcy5qcyc7XG5cbmNvbnN0IGNyZWF0ZUFuaW1hdGlvbiA9IChmYWN0b3J5KSA9PiBmYWN0b3J5KCk7XG5jb25zdCB3aXRoQ29udHJvbHMgPSAoYW5pbWF0aW9uRmFjdG9yeSwgb3B0aW9ucywgZHVyYXRpb24gPSBkZWZhdWx0cy5kdXJhdGlvbikgPT4ge1xuICAgIHJldHVybiBuZXcgUHJveHkoe1xuICAgICAgICBhbmltYXRpb25zOiBhbmltYXRpb25GYWN0b3J5Lm1hcChjcmVhdGVBbmltYXRpb24pLmZpbHRlcihCb29sZWFuKSxcbiAgICAgICAgZHVyYXRpb24sXG4gICAgICAgIG9wdGlvbnMsXG4gICAgfSwgY29udHJvbHMpO1xufTtcbi8qKlxuICogVE9ETzpcbiAqIEN1cnJlbnRseSB0aGlzIHJldHVybnMgdGhlIGZpcnN0IGFuaW1hdGlvbiwgaWRlYWxseSBpdCB3b3VsZCByZXR1cm5cbiAqIHRoZSBmaXJzdCBhY3RpdmUgYW5pbWF0aW9uLlxuICovXG5jb25zdCBnZXRBY3RpdmVBbmltYXRpb24gPSAoc3RhdGUpID0+IHN0YXRlLmFuaW1hdGlvbnNbMF07XG5jb25zdCBjb250cm9scyA9IHtcbiAgICBnZXQ6ICh0YXJnZXQsIGtleSkgPT4ge1xuICAgICAgICBjb25zdCBhY3RpdmVBbmltYXRpb24gPSBnZXRBY3RpdmVBbmltYXRpb24odGFyZ2V0KTtcbiAgICAgICAgc3dpdGNoIChrZXkpIHtcbiAgICAgICAgICAgIGNhc2UgXCJkdXJhdGlvblwiOlxuICAgICAgICAgICAgICAgIHJldHVybiB0YXJnZXQuZHVyYXRpb247XG4gICAgICAgICAgICBjYXNlIFwiY3VycmVudFRpbWVcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGltZS5zKChhY3RpdmVBbmltYXRpb24gPT09IG51bGwgfHwgYWN0aXZlQW5pbWF0aW9uID09PSB2b2lkIDAgPyB2b2lkIDAgOiBhY3RpdmVBbmltYXRpb25ba2V5XSkgfHwgMCk7XG4gICAgICAgICAgICBjYXNlIFwicGxheWJhY2tSYXRlXCI6XG4gICAgICAgICAgICBjYXNlIFwicGxheVN0YXRlXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFjdGl2ZUFuaW1hdGlvbiA9PT0gbnVsbCB8fCBhY3RpdmVBbmltYXRpb24gPT09IHZvaWQgMCA/IHZvaWQgMCA6IGFjdGl2ZUFuaW1hdGlvbltrZXldO1xuICAgICAgICAgICAgY2FzZSBcImZpbmlzaGVkXCI6XG4gICAgICAgICAgICAgICAgaWYgKCF0YXJnZXQuZmluaXNoZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0LmZpbmlzaGVkID0gUHJvbWlzZS5hbGwodGFyZ2V0LmFuaW1hdGlvbnMubWFwKHNlbGVjdEZpbmlzaGVkKSkuY2F0Y2gobm9vcCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB0YXJnZXQuZmluaXNoZWQ7XG4gICAgICAgICAgICBjYXNlIFwic3RvcFwiOlxuICAgICAgICAgICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldC5hbmltYXRpb25zLmZvckVhY2goKGFuaW1hdGlvbikgPT4gc3RvcEFuaW1hdGlvbihhbmltYXRpb24pKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgY2FzZSBcImZvckVhY2hOYXRpdmVcIjpcbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgKiBUaGlzIGlzIGZvciBpbnRlcm5hbCB1c2Ugb25seSwgZmlyZSBhIGNhbGxiYWNrIGZvciBlYWNoXG4gICAgICAgICAgICAgICAgICogdW5kZXJseWluZyBhbmltYXRpb24uXG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgcmV0dXJuIChjYWxsYmFjaykgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXQuYW5pbWF0aW9ucy5mb3JFYWNoKChhbmltYXRpb24pID0+IGNhbGxiYWNrKGFuaW1hdGlvbiwgdGFyZ2V0KSk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHR5cGVvZiAoYWN0aXZlQW5pbWF0aW9uID09PSBudWxsIHx8IGFjdGl2ZUFuaW1hdGlvbiA9PT0gdm9pZCAwID8gdm9pZCAwIDogYWN0aXZlQW5pbWF0aW9uW2tleV0pID09PSBcInVuZGVmaW5lZFwiXG4gICAgICAgICAgICAgICAgICAgID8gdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgICAgIDogKCkgPT4gdGFyZ2V0LmFuaW1hdGlvbnMuZm9yRWFjaCgoYW5pbWF0aW9uKSA9PiBhbmltYXRpb25ba2V5XSgpKTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgc2V0OiAodGFyZ2V0LCBrZXksIHZhbHVlKSA9PiB7XG4gICAgICAgIHN3aXRjaCAoa2V5KSB7XG4gICAgICAgICAgICBjYXNlIFwiY3VycmVudFRpbWVcIjpcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHRpbWUubXModmFsdWUpO1xuICAgICAgICAgICAgY2FzZSBcImN1cnJlbnRUaW1lXCI6XG4gICAgICAgICAgICBjYXNlIFwicGxheWJhY2tSYXRlXCI6XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0YXJnZXQuYW5pbWF0aW9ucy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXQuYW5pbWF0aW9uc1tpXVtrZXldID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9LFxufTtcbmNvbnN0IHNlbGVjdEZpbmlzaGVkID0gKGFuaW1hdGlvbikgPT4gYW5pbWF0aW9uLmZpbmlzaGVkO1xuXG5leHBvcnQgeyBjb250cm9scywgd2l0aENvbnRyb2xzIH07XG4iLCJpbXBvcnQgeyB0cmFuc2Zvcm1EZWZpbml0aW9ucyB9IGZyb20gJy4vdHJhbnNmb3Jtcy5lcy5qcyc7XG5cbmNvbnN0IGlzQ3NzVmFyID0gKG5hbWUpID0+IG5hbWUuc3RhcnRzV2l0aChcIi0tXCIpO1xuY29uc3QgcmVnaXN0ZXJlZFByb3BlcnRpZXMgPSBuZXcgU2V0KCk7XG5mdW5jdGlvbiByZWdpc3RlckNzc1ZhcmlhYmxlKG5hbWUpIHtcbiAgICBpZiAocmVnaXN0ZXJlZFByb3BlcnRpZXMuaGFzKG5hbWUpKVxuICAgICAgICByZXR1cm47XG4gICAgcmVnaXN0ZXJlZFByb3BlcnRpZXMuYWRkKG5hbWUpO1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHsgc3ludGF4LCBpbml0aWFsVmFsdWUgfSA9IHRyYW5zZm9ybURlZmluaXRpb25zLmhhcyhuYW1lKVxuICAgICAgICAgICAgPyB0cmFuc2Zvcm1EZWZpbml0aW9ucy5nZXQobmFtZSlcbiAgICAgICAgICAgIDoge307XG4gICAgICAgIENTUy5yZWdpc3RlclByb3BlcnR5KHtcbiAgICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgICBpbmhlcml0czogZmFsc2UsXG4gICAgICAgICAgICBzeW50YXgsXG4gICAgICAgICAgICBpbml0aWFsVmFsdWUsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBjYXRjaCAoZSkgeyB9XG59XG5cbmV4cG9ydCB7IGlzQ3NzVmFyLCByZWdpc3RlckNzc1ZhcmlhYmxlLCByZWdpc3RlcmVkUHJvcGVydGllcyB9O1xuIiwiaW1wb3J0IHsgaXNGdW5jdGlvbiwgZGVmYXVsdHMsIGlzQ3ViaWNCZXppZXIsIHByb2dyZXNzIH0gZnJvbSAnQG1vdGlvbm9uZS91dGlscyc7XG5pbXBvcnQgeyBzdXBwb3J0cyB9IGZyb20gJy4vZmVhdHVyZS1kZXRlY3Rpb24uZXMuanMnO1xuXG4vLyBDcmVhdGUgYSBsaW5lYXIgZWFzaW5nIHBvaW50IGZvciBldmVyeSB4IHNlY29uZFxuY29uc3QgcmVzb2x1dGlvbiA9IDAuMDE1O1xuY29uc3QgZ2VuZXJhdGVMaW5lYXJFYXNpbmdQb2ludHMgPSAoZWFzaW5nLCBkdXJhdGlvbikgPT4ge1xuICAgIGxldCBwb2ludHMgPSBcIlwiO1xuICAgIGNvbnN0IG51bVBvaW50cyA9IE1hdGgucm91bmQoZHVyYXRpb24gLyByZXNvbHV0aW9uKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG51bVBvaW50czsgaSsrKSB7XG4gICAgICAgIHBvaW50cyArPSBlYXNpbmcocHJvZ3Jlc3MoMCwgbnVtUG9pbnRzIC0gMSwgaSkpICsgXCIsIFwiO1xuICAgIH1cbiAgICByZXR1cm4gcG9pbnRzLnN1YnN0cmluZygwLCBwb2ludHMubGVuZ3RoIC0gMik7XG59O1xuY29uc3QgY29udmVydEVhc2luZyA9IChlYXNpbmcsIGR1cmF0aW9uKSA9PiB7XG4gICAgaWYgKGlzRnVuY3Rpb24oZWFzaW5nKSkge1xuICAgICAgICByZXR1cm4gc3VwcG9ydHMubGluZWFyRWFzaW5nKClcbiAgICAgICAgICAgID8gYGxpbmVhcigke2dlbmVyYXRlTGluZWFyRWFzaW5nUG9pbnRzKGVhc2luZywgZHVyYXRpb24pfSlgXG4gICAgICAgICAgICA6IGRlZmF1bHRzLmVhc2luZztcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBpc0N1YmljQmV6aWVyKGVhc2luZykgPyBjdWJpY0JlemllckFzU3RyaW5nKGVhc2luZykgOiBlYXNpbmc7XG4gICAgfVxufTtcbmNvbnN0IGN1YmljQmV6aWVyQXNTdHJpbmcgPSAoW2EsIGIsIGMsIGRdKSA9PiBgY3ViaWMtYmV6aWVyKCR7YX0sICR7Yn0sICR7Y30sICR7ZH0pYDtcblxuZXhwb3J0IHsgY29udmVydEVhc2luZywgY3ViaWNCZXppZXJBc1N0cmluZywgZ2VuZXJhdGVMaW5lYXJFYXNpbmdQb2ludHMgfTtcbiIsImNvbnN0IHRlc3RBbmltYXRpb24gPSAoa2V5ZnJhbWVzLCBvcHRpb25zKSA9PiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLmFuaW1hdGUoa2V5ZnJhbWVzLCBvcHRpb25zKTtcbmNvbnN0IGZlYXR1cmVUZXN0cyA9IHtcbiAgICBjc3NSZWdpc3RlclByb3BlcnR5OiAoKSA9PiB0eXBlb2YgQ1NTICE9PSBcInVuZGVmaW5lZFwiICYmXG4gICAgICAgIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKENTUywgXCJyZWdpc3RlclByb3BlcnR5XCIpLFxuICAgIHdhYXBpOiAoKSA9PiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChFbGVtZW50LnByb3RvdHlwZSwgXCJhbmltYXRlXCIpLFxuICAgIHBhcnRpYWxLZXlmcmFtZXM6ICgpID0+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRlc3RBbmltYXRpb24oeyBvcGFjaXR5OiBbMV0gfSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9LFxuICAgIGZpbmlzaGVkOiAoKSA9PiBCb29sZWFuKHRlc3RBbmltYXRpb24oeyBvcGFjaXR5OiBbMCwgMV0gfSwgeyBkdXJhdGlvbjogMC4wMDEgfSkuZmluaXNoZWQpLFxuICAgIGxpbmVhckVhc2luZzogKCkgPT4ge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGVzdEFuaW1hdGlvbih7IG9wYWNpdHk6IDAgfSwgeyBlYXNpbmc6IFwibGluZWFyKDAsIDEpXCIgfSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9LFxufTtcbmNvbnN0IHJlc3VsdHMgPSB7fTtcbmNvbnN0IHN1cHBvcnRzID0ge307XG5mb3IgKGNvbnN0IGtleSBpbiBmZWF0dXJlVGVzdHMpIHtcbiAgICBzdXBwb3J0c1trZXldID0gKCkgPT4ge1xuICAgICAgICBpZiAocmVzdWx0c1trZXldID09PSB1bmRlZmluZWQpXG4gICAgICAgICAgICByZXN1bHRzW2tleV0gPSBmZWF0dXJlVGVzdHNba2V5XSgpO1xuICAgICAgICByZXR1cm4gcmVzdWx0c1trZXldO1xuICAgIH07XG59XG5cbmV4cG9ydCB7IHN1cHBvcnRzIH07XG4iLCJpbXBvcnQgeyBpc1RyYW5zZm9ybSwgYXNUcmFuc2Zvcm1Dc3NWYXIsIHRyYW5zZm9ybUFsaWFzIH0gZnJvbSAnLi90cmFuc2Zvcm1zLmVzLmpzJztcblxuZnVuY3Rpb24gZ2V0U3R5bGVOYW1lKGtleSkge1xuICAgIGlmICh0cmFuc2Zvcm1BbGlhc1trZXldKVxuICAgICAgICBrZXkgPSB0cmFuc2Zvcm1BbGlhc1trZXldO1xuICAgIHJldHVybiBpc1RyYW5zZm9ybShrZXkpID8gYXNUcmFuc2Zvcm1Dc3NWYXIoa2V5KSA6IGtleTtcbn1cblxuZXhwb3J0IHsgZ2V0U3R5bGVOYW1lIH07XG4iLCJmdW5jdGlvbiBoeWRyYXRlS2V5ZnJhbWVzKGtleWZyYW1lcywgcmVhZEluaXRpYWxWYWx1ZSkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwga2V5ZnJhbWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChrZXlmcmFtZXNbaV0gPT09IG51bGwpIHtcbiAgICAgICAgICAgIGtleWZyYW1lc1tpXSA9IGkgPyBrZXlmcmFtZXNbaSAtIDFdIDogcmVhZEluaXRpYWxWYWx1ZSgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBrZXlmcmFtZXM7XG59XG5jb25zdCBrZXlmcmFtZXNMaXN0ID0gKGtleWZyYW1lcykgPT4gQXJyYXkuaXNBcnJheShrZXlmcmFtZXMpID8ga2V5ZnJhbWVzIDogW2tleWZyYW1lc107XG5cbmV4cG9ydCB7IGh5ZHJhdGVLZXlmcmFtZXMsIGtleWZyYW1lc0xpc3QgfTtcbiIsImNvbnN0IGdldE9wdGlvbnMgPSAob3B0aW9ucywga2V5KSA9PiBcbi8qKlxuICogVE9ETzogTWFrZSB0ZXN0IGZvciB0aGlzXG4gKiBBbHdheXMgcmV0dXJuIGEgbmV3IG9iamVjdCBvdGhlcndpc2UgZGVsYXkgaXMgb3ZlcndyaXR0ZW4gYnkgcmVzdWx0cyBvZiBzdGFnZ2VyXG4gKiBhbmQgdGhpcyByZXN1bHRzIGluIG5vIHN0YWdnZXJcbiAqL1xub3B0aW9uc1trZXldID8gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBvcHRpb25zKSwgb3B0aW9uc1trZXldKSA6IE9iamVjdC5hc3NpZ24oe30sIG9wdGlvbnMpO1xuXG5leHBvcnQgeyBnZXRPcHRpb25zIH07XG4iLCJmdW5jdGlvbiBzdG9wQW5pbWF0aW9uKGFuaW1hdGlvbiwgbmVlZHNDb21taXQgPSB0cnVlKSB7XG4gICAgaWYgKCFhbmltYXRpb24gfHwgYW5pbWF0aW9uLnBsYXlTdGF0ZSA9PT0gXCJmaW5pc2hlZFwiKVxuICAgICAgICByZXR1cm47XG4gICAgLy8gU3VwcHJlc3MgZXJyb3IgdGhyb3duIGJ5IFdBQVBJXG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKGFuaW1hdGlvbi5zdG9wKSB7XG4gICAgICAgICAgICBhbmltYXRpb24uc3RvcCgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbmVlZHNDb21taXQgJiYgYW5pbWF0aW9uLmNvbW1pdFN0eWxlcygpO1xuICAgICAgICAgICAgYW5pbWF0aW9uLmNhbmNlbCgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNhdGNoIChlKSB7IH1cbn1cblxuZXhwb3J0IHsgc3RvcEFuaW1hdGlvbiB9O1xuIiwiaW1wb3J0IHsgbm9vcFJldHVybiwgYWRkVW5pcXVlSXRlbSB9IGZyb20gJ0Btb3Rpb25vbmUvdXRpbHMnO1xuaW1wb3J0IHsgZ2V0QW5pbWF0aW9uRGF0YSB9IGZyb20gJy4uL2RhdGEuZXMuanMnO1xuXG4vKipcbiAqIEEgbGlzdCBvZiBhbGwgdHJhbnNmb3JtYWJsZSBheGVzLiBXZSdsbCB1c2UgdGhpcyBsaXN0IHRvIGdlbmVyYXRlZCBhIHZlcnNpb25cbiAqIG9mIGVhY2ggYXhlcyBmb3IgZWFjaCB0cmFuc2Zvcm0uXG4gKi9cbmNvbnN0IGF4ZXMgPSBbXCJcIiwgXCJYXCIsIFwiWVwiLCBcIlpcIl07XG4vKipcbiAqIEFuIG9yZGVyZWQgYXJyYXkgb2YgZWFjaCB0cmFuc2Zvcm1hYmxlIHZhbHVlLiBCeSBkZWZhdWx0LCB0cmFuc2Zvcm0gdmFsdWVzXG4gKiB3aWxsIGJlIHNvcnRlZCB0byB0aGlzIG9yZGVyLlxuICovXG5jb25zdCBvcmRlciA9IFtcInRyYW5zbGF0ZVwiLCBcInNjYWxlXCIsIFwicm90YXRlXCIsIFwic2tld1wiXTtcbmNvbnN0IHRyYW5zZm9ybUFsaWFzID0ge1xuICAgIHg6IFwidHJhbnNsYXRlWFwiLFxuICAgIHk6IFwidHJhbnNsYXRlWVwiLFxuICAgIHo6IFwidHJhbnNsYXRlWlwiLFxufTtcbmNvbnN0IHJvdGF0aW9uID0ge1xuICAgIHN5bnRheDogXCI8YW5nbGU+XCIsXG4gICAgaW5pdGlhbFZhbHVlOiBcIjBkZWdcIixcbiAgICB0b0RlZmF1bHRVbml0OiAodikgPT4gdiArIFwiZGVnXCIsXG59O1xuY29uc3QgYmFzZVRyYW5zZm9ybVByb3BlcnRpZXMgPSB7XG4gICAgdHJhbnNsYXRlOiB7XG4gICAgICAgIHN5bnRheDogXCI8bGVuZ3RoLXBlcmNlbnRhZ2U+XCIsXG4gICAgICAgIGluaXRpYWxWYWx1ZTogXCIwcHhcIixcbiAgICAgICAgdG9EZWZhdWx0VW5pdDogKHYpID0+IHYgKyBcInB4XCIsXG4gICAgfSxcbiAgICByb3RhdGU6IHJvdGF0aW9uLFxuICAgIHNjYWxlOiB7XG4gICAgICAgIHN5bnRheDogXCI8bnVtYmVyPlwiLFxuICAgICAgICBpbml0aWFsVmFsdWU6IDEsXG4gICAgICAgIHRvRGVmYXVsdFVuaXQ6IG5vb3BSZXR1cm4sXG4gICAgfSxcbiAgICBza2V3OiByb3RhdGlvbixcbn07XG5jb25zdCB0cmFuc2Zvcm1EZWZpbml0aW9ucyA9IG5ldyBNYXAoKTtcbmNvbnN0IGFzVHJhbnNmb3JtQ3NzVmFyID0gKG5hbWUpID0+IGAtLW1vdGlvbi0ke25hbWV9YDtcbi8qKlxuICogR2VuZXJhdGUgYSBsaXN0IG9mIGV2ZXJ5IHBvc3NpYmxlIHRyYW5zZm9ybSBrZXlcbiAqL1xuY29uc3QgdHJhbnNmb3JtcyA9IFtcInhcIiwgXCJ5XCIsIFwielwiXTtcbm9yZGVyLmZvckVhY2goKG5hbWUpID0+IHtcbiAgICBheGVzLmZvckVhY2goKGF4aXMpID0+IHtcbiAgICAgICAgdHJhbnNmb3Jtcy5wdXNoKG5hbWUgKyBheGlzKTtcbiAgICAgICAgdHJhbnNmb3JtRGVmaW5pdGlvbnMuc2V0KGFzVHJhbnNmb3JtQ3NzVmFyKG5hbWUgKyBheGlzKSwgYmFzZVRyYW5zZm9ybVByb3BlcnRpZXNbbmFtZV0pO1xuICAgIH0pO1xufSk7XG4vKipcbiAqIEEgZnVuY3Rpb24gdG8gdXNlIHdpdGggQXJyYXkuc29ydCB0byBzb3J0IHRyYW5zZm9ybSBrZXlzIGJ5IHRoZWlyIGRlZmF1bHQgb3JkZXIuXG4gKi9cbmNvbnN0IGNvbXBhcmVUcmFuc2Zvcm1PcmRlciA9IChhLCBiKSA9PiB0cmFuc2Zvcm1zLmluZGV4T2YoYSkgLSB0cmFuc2Zvcm1zLmluZGV4T2YoYik7XG4vKipcbiAqIFByb3ZpZGUgYSBxdWljayB3YXkgdG8gY2hlY2sgaWYgYSBzdHJpbmcgaXMgdGhlIG5hbWUgb2YgYSB0cmFuc2Zvcm1cbiAqL1xuY29uc3QgdHJhbnNmb3JtTG9va3VwID0gbmV3IFNldCh0cmFuc2Zvcm1zKTtcbmNvbnN0IGlzVHJhbnNmb3JtID0gKG5hbWUpID0+IHRyYW5zZm9ybUxvb2t1cC5oYXMobmFtZSk7XG5jb25zdCBhZGRUcmFuc2Zvcm1Ub0VsZW1lbnQgPSAoZWxlbWVudCwgbmFtZSkgPT4ge1xuICAgIC8vIE1hcCB4IHRvIHRyYW5zbGF0ZVggZXRjXG4gICAgaWYgKHRyYW5zZm9ybUFsaWFzW25hbWVdKVxuICAgICAgICBuYW1lID0gdHJhbnNmb3JtQWxpYXNbbmFtZV07XG4gICAgY29uc3QgeyB0cmFuc2Zvcm1zIH0gPSBnZXRBbmltYXRpb25EYXRhKGVsZW1lbnQpO1xuICAgIGFkZFVuaXF1ZUl0ZW0odHJhbnNmb3JtcywgbmFtZSk7XG4gICAgLyoqXG4gICAgICogVE9ETzogQW4gb3B0aW1pc2F0aW9uIGhlcmUgY291bGQgYmUgdG8gY2FjaGUgdGhlIHRyYW5zZm9ybSBpbiBlbGVtZW50IGRhdGFcbiAgICAgKiBhbmQgb25seSB1cGRhdGUgaWYgdGhpcyBoYXMgY2hhbmdlZC5cbiAgICAgKi9cbiAgICBlbGVtZW50LnN0eWxlLnRyYW5zZm9ybSA9IGJ1aWxkVHJhbnNmb3JtVGVtcGxhdGUodHJhbnNmb3Jtcyk7XG59O1xuY29uc3QgYnVpbGRUcmFuc2Zvcm1UZW1wbGF0ZSA9ICh0cmFuc2Zvcm1zKSA9PiB0cmFuc2Zvcm1zXG4gICAgLnNvcnQoY29tcGFyZVRyYW5zZm9ybU9yZGVyKVxuICAgIC5yZWR1Y2UodHJhbnNmb3JtTGlzdFRvU3RyaW5nLCBcIlwiKVxuICAgIC50cmltKCk7XG5jb25zdCB0cmFuc2Zvcm1MaXN0VG9TdHJpbmcgPSAodGVtcGxhdGUsIG5hbWUpID0+IGAke3RlbXBsYXRlfSAke25hbWV9KHZhcigke2FzVHJhbnNmb3JtQ3NzVmFyKG5hbWUpfSkpYDtcblxuZXhwb3J0IHsgYWRkVHJhbnNmb3JtVG9FbGVtZW50LCBhc1RyYW5zZm9ybUNzc1ZhciwgYXhlcywgYnVpbGRUcmFuc2Zvcm1UZW1wbGF0ZSwgY29tcGFyZVRyYW5zZm9ybU9yZGVyLCBpc1RyYW5zZm9ybSwgdHJhbnNmb3JtQWxpYXMsIHRyYW5zZm9ybURlZmluaXRpb25zIH07XG4iLCJpbXBvcnQgeyBfX3Jlc3QgfSBmcm9tICd0c2xpYic7XG5pbXBvcnQgeyBpbnZhcmlhbnQgfSBmcm9tICdoZXktbGlzdGVuJztcbmltcG9ydCB7IGlzU3RyaW5nLCBkZWZhdWx0cywgaXNFYXNpbmdHZW5lcmF0b3IsIGRlZmF1bHRPZmZzZXQsIGZpbGxPZmZzZXQsIHByb2dyZXNzIH0gZnJvbSAnQG1vdGlvbm9uZS91dGlscyc7XG5pbXBvcnQgeyByZXNvbHZlT3B0aW9uIH0gZnJvbSAnLi4vdXRpbHMvc3RhZ2dlci5lcy5qcyc7XG5pbXBvcnQgeyBhbmltYXRlU3R5bGUgfSBmcm9tICcuLi9hbmltYXRlL2FuaW1hdGUtc3R5bGUuZXMuanMnO1xuaW1wb3J0IHsgd2l0aENvbnRyb2xzIH0gZnJvbSAnLi4vYW5pbWF0ZS91dGlscy9jb250cm9scy5lcy5qcyc7XG5pbXBvcnQgeyBrZXlmcmFtZXNMaXN0IH0gZnJvbSAnLi4vYW5pbWF0ZS91dGlscy9rZXlmcmFtZXMuZXMuanMnO1xuaW1wb3J0IHsgZ2V0T3B0aW9ucyB9IGZyb20gJy4uL2FuaW1hdGUvdXRpbHMvb3B0aW9ucy5lcy5qcyc7XG5pbXBvcnQgeyByZXNvbHZlRWxlbWVudHMgfSBmcm9tICcuLi91dGlscy9yZXNvbHZlLWVsZW1lbnRzLmVzLmpzJztcbmltcG9ydCB7IGlzVHJhbnNmb3JtIH0gZnJvbSAnLi4vYW5pbWF0ZS91dGlscy90cmFuc2Zvcm1zLmVzLmpzJztcbmltcG9ydCB7IGNhbGNOZXh0VGltZSB9IGZyb20gJy4vdXRpbHMvY2FsYy10aW1lLmVzLmpzJztcbmltcG9ydCB7IGFkZEtleWZyYW1lcyB9IGZyb20gJy4vdXRpbHMvZWRpdC5lcy5qcyc7XG5pbXBvcnQgeyBjb21wYXJlQnlUaW1lIH0gZnJvbSAnLi91dGlscy9zb3J0LmVzLmpzJztcblxuZnVuY3Rpb24gdGltZWxpbmUoZGVmaW5pdGlvbiwgb3B0aW9ucyA9IHt9KSB7XG4gICAgdmFyIF9hO1xuICAgIGNvbnN0IGFuaW1hdGlvbkRlZmluaXRpb25zID0gY3JlYXRlQW5pbWF0aW9uc0Zyb21UaW1lbGluZShkZWZpbml0aW9uLCBvcHRpb25zKTtcbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYW5kIHN0YXJ0IGFuaW1hdGlvbnNcbiAgICAgKi9cbiAgICBjb25zdCBhbmltYXRpb25GYWN0b3JpZXMgPSBhbmltYXRpb25EZWZpbml0aW9uc1xuICAgICAgICAubWFwKChkZWZpbml0aW9uKSA9PiBhbmltYXRlU3R5bGUoLi4uZGVmaW5pdGlvbikpXG4gICAgICAgIC5maWx0ZXIoQm9vbGVhbik7XG4gICAgcmV0dXJuIHdpdGhDb250cm9scyhhbmltYXRpb25GYWN0b3JpZXMsIG9wdGlvbnMsIFxuICAgIC8vIEdldCB0aGUgZHVyYXRpb24gZnJvbSB0aGUgZmlyc3QgYW5pbWF0aW9uIGRlZmluaXRpb25cbiAgICAoX2EgPSBhbmltYXRpb25EZWZpbml0aW9uc1swXSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hWzNdLmR1cmF0aW9uKTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUFuaW1hdGlvbnNGcm9tVGltZWxpbmUoZGVmaW5pdGlvbiwgX2EgPSB7fSkge1xuICAgIHZhciB7IGRlZmF1bHRPcHRpb25zID0ge30gfSA9IF9hLCB0aW1lbGluZU9wdGlvbnMgPSBfX3Jlc3QoX2EsIFtcImRlZmF1bHRPcHRpb25zXCJdKTtcbiAgICBjb25zdCBhbmltYXRpb25EZWZpbml0aW9ucyA9IFtdO1xuICAgIGNvbnN0IGVsZW1lbnRTZXF1ZW5jZXMgPSBuZXcgTWFwKCk7XG4gICAgY29uc3QgZWxlbWVudENhY2hlID0ge307XG4gICAgY29uc3QgdGltZUxhYmVscyA9IG5ldyBNYXAoKTtcbiAgICBsZXQgcHJldlRpbWUgPSAwO1xuICAgIGxldCBjdXJyZW50VGltZSA9IDA7XG4gICAgbGV0IHRvdGFsRHVyYXRpb24gPSAwO1xuICAgIC8qKlxuICAgICAqIEJ1aWxkIHRoZSB0aW1lbGluZSBieSBtYXBwaW5nIG92ZXIgdGhlIGRlZmluaXRpb24gYXJyYXkgYW5kIGNvbnZlcnRpbmdcbiAgICAgKiB0aGUgZGVmaW5pdGlvbnMgaW50byBrZXlmcmFtZXMgYW5kIG9mZnNldHMgd2l0aCBhYnNvbHV0ZSB0aW1lIHZhbHVlcy5cbiAgICAgKiBUaGVzZSB3aWxsIGxhdGVyIGdldCBjb252ZXJ0ZWQgaW50byByZWxhdGl2ZSBvZmZzZXRzIGluIGEgc2Vjb25kIHBhc3MuXG4gICAgICovXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkZWZpbml0aW9uLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IHNlZ21lbnQgPSBkZWZpbml0aW9uW2ldO1xuICAgICAgICAvKipcbiAgICAgICAgICogSWYgdGhpcyBpcyBhIHRpbWVsaW5lIGxhYmVsLCBtYXJrIGl0IGFuZCBza2lwIHRoZSByZXN0IG9mIHRoaXMgaXRlcmF0aW9uLlxuICAgICAgICAgKi9cbiAgICAgICAgaWYgKGlzU3RyaW5nKHNlZ21lbnQpKSB7XG4gICAgICAgICAgICB0aW1lTGFiZWxzLnNldChzZWdtZW50LCBjdXJyZW50VGltZSk7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICghQXJyYXkuaXNBcnJheShzZWdtZW50KSkge1xuICAgICAgICAgICAgdGltZUxhYmVscy5zZXQoc2VnbWVudC5uYW1lLCBjYWxjTmV4dFRpbWUoY3VycmVudFRpbWUsIHNlZ21lbnQuYXQsIHByZXZUaW1lLCB0aW1lTGFiZWxzKSk7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBbZWxlbWVudERlZmluaXRpb24sIGtleWZyYW1lcywgb3B0aW9ucyA9IHt9XSA9IHNlZ21lbnQ7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJZiBhIHJlbGF0aXZlIG9yIGFic29sdXRlIHRpbWUgdmFsdWUgaGFzIGJlZW4gc3BlY2lmaWVkIHdlIG5lZWQgdG8gcmVzb2x2ZVxuICAgICAgICAgKiBpdCBpbiByZWxhdGlvbiB0byB0aGUgY3VycmVudFRpbWUuXG4gICAgICAgICAqL1xuICAgICAgICBpZiAob3B0aW9ucy5hdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBjdXJyZW50VGltZSA9IGNhbGNOZXh0VGltZShjdXJyZW50VGltZSwgb3B0aW9ucy5hdCwgcHJldlRpbWUsIHRpbWVMYWJlbHMpO1xuICAgICAgICB9XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBLZWVwIHRyYWNrIG9mIHRoZSBtYXhpbXVtIGR1cmF0aW9uIGluIHRoaXMgZGVmaW5pdGlvbi4gVGhpcyB3aWxsIGJlXG4gICAgICAgICAqIGFwcGxpZWQgdG8gY3VycmVudFRpbWUgb25jZSB0aGUgZGVmaW5pdGlvbiBoYXMgYmVlbiBwYXJzZWQuXG4gICAgICAgICAqL1xuICAgICAgICBsZXQgbWF4RHVyYXRpb24gPSAwO1xuICAgICAgICAvKipcbiAgICAgICAgICogRmluZCBhbGwgdGhlIGVsZW1lbnRzIHNwZWNpZmllZCBpbiB0aGUgZGVmaW5pdGlvbiBhbmQgcGFyc2UgdmFsdWVcbiAgICAgICAgICoga2V5ZnJhbWVzIGZyb20gdGhlaXIgdGltZWxpbmUgZGVmaW5pdGlvbnMuXG4gICAgICAgICAqL1xuICAgICAgICBjb25zdCBlbGVtZW50cyA9IHJlc29sdmVFbGVtZW50cyhlbGVtZW50RGVmaW5pdGlvbiwgZWxlbWVudENhY2hlKTtcbiAgICAgICAgY29uc3QgbnVtRWxlbWVudHMgPSBlbGVtZW50cy5sZW5ndGg7XG4gICAgICAgIGZvciAobGV0IGVsZW1lbnRJbmRleCA9IDA7IGVsZW1lbnRJbmRleCA8IG51bUVsZW1lbnRzOyBlbGVtZW50SW5kZXgrKykge1xuICAgICAgICAgICAgY29uc3QgZWxlbWVudCA9IGVsZW1lbnRzW2VsZW1lbnRJbmRleF07XG4gICAgICAgICAgICBjb25zdCBlbGVtZW50U2VxdWVuY2UgPSBnZXRFbGVtZW50U2VxdWVuY2UoZWxlbWVudCwgZWxlbWVudFNlcXVlbmNlcyk7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBrZXlmcmFtZXMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZVNlcXVlbmNlID0gZ2V0VmFsdWVTZXF1ZW5jZShrZXksIGVsZW1lbnRTZXF1ZW5jZSk7XG4gICAgICAgICAgICAgICAgbGV0IHZhbHVlS2V5ZnJhbWVzID0ga2V5ZnJhbWVzTGlzdChrZXlmcmFtZXNba2V5XSk7XG4gICAgICAgICAgICAgICAgY29uc3QgdmFsdWVPcHRpb25zID0gZ2V0T3B0aW9ucyhvcHRpb25zLCBrZXkpO1xuICAgICAgICAgICAgICAgIGxldCB7IGR1cmF0aW9uID0gZGVmYXVsdE9wdGlvbnMuZHVyYXRpb24gfHwgZGVmYXVsdHMuZHVyYXRpb24sIGVhc2luZyA9IGRlZmF1bHRPcHRpb25zLmVhc2luZyB8fCBkZWZhdWx0cy5lYXNpbmcsIH0gPSB2YWx1ZU9wdGlvbnM7XG4gICAgICAgICAgICAgICAgaWYgKGlzRWFzaW5nR2VuZXJhdG9yKGVhc2luZykpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdmFsdWVJc1RyYW5zZm9ybSA9IGlzVHJhbnNmb3JtKGtleSk7XG4gICAgICAgICAgICAgICAgICAgIGludmFyaWFudCh2YWx1ZUtleWZyYW1lcy5sZW5ndGggPT09IDIgfHwgIXZhbHVlSXNUcmFuc2Zvcm0sIFwic3ByaW5nIG11c3QgYmUgcHJvdmlkZWQgMiBrZXlmcmFtZXMgd2l0aGluIHRpbWVsaW5lXCIpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjdXN0b20gPSBlYXNpbmcuY3JlYXRlQW5pbWF0aW9uKHZhbHVlS2V5ZnJhbWVzLCBcbiAgICAgICAgICAgICAgICAgICAgLy8gVE9ETyBXZSBjdXJyZW50bHkgb25seSBzdXBwb3J0IGV4cGxpY2l0IGtleWZyYW1lc1xuICAgICAgICAgICAgICAgICAgICAvLyBzbyB0aGlzIGRvZXNuJ3QgY3VycmVudGx5IHJlYWQgZnJvbSB0aGUgRE9NXG4gICAgICAgICAgICAgICAgICAgICgpID0+IFwiMFwiLCB2YWx1ZUlzVHJhbnNmb3JtKTtcbiAgICAgICAgICAgICAgICAgICAgZWFzaW5nID0gY3VzdG9tLmVhc2luZztcbiAgICAgICAgICAgICAgICAgICAgaWYgKGN1c3RvbS5rZXlmcmFtZXMgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlS2V5ZnJhbWVzID0gY3VzdG9tLmtleWZyYW1lcztcbiAgICAgICAgICAgICAgICAgICAgaWYgKGN1c3RvbS5kdXJhdGlvbiAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgICAgICAgICAgZHVyYXRpb24gPSBjdXN0b20uZHVyYXRpb247XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IGRlbGF5ID0gcmVzb2x2ZU9wdGlvbihvcHRpb25zLmRlbGF5LCBlbGVtZW50SW5kZXgsIG51bUVsZW1lbnRzKSB8fCAwO1xuICAgICAgICAgICAgICAgIGNvbnN0IHN0YXJ0VGltZSA9IGN1cnJlbnRUaW1lICsgZGVsYXk7XG4gICAgICAgICAgICAgICAgY29uc3QgdGFyZ2V0VGltZSA9IHN0YXJ0VGltZSArIGR1cmF0aW9uO1xuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgbGV0IHsgb2Zmc2V0ID0gZGVmYXVsdE9mZnNldCh2YWx1ZUtleWZyYW1lcy5sZW5ndGgpIH0gPSB2YWx1ZU9wdGlvbnM7XG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICogSWYgdGhlcmUncyBvbmx5IG9uZSBvZmZzZXQgb2YgMCwgZmlsbCBpbiBhIHNlY29uZCB3aXRoIGxlbmd0aCAxXG4gICAgICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAgICAgKiBUT0RPOiBFbnN1cmUgdGhlcmUncyBhIHRlc3QgdGhhdCBjb3ZlcnMgdGhpcyByZW1vdmFsXG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgaWYgKG9mZnNldC5sZW5ndGggPT09IDEgJiYgb2Zmc2V0WzBdID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIG9mZnNldFsxXSA9IDE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAqIEZpbGwgb3V0IGlmIG9mZnNldCBpZiBmZXdlciBvZmZzZXRzIHRoYW4ga2V5ZnJhbWVzXG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgY29uc3QgcmVtYWluZGVyID0gbGVuZ3RoIC0gdmFsdWVLZXlmcmFtZXMubGVuZ3RoO1xuICAgICAgICAgICAgICAgIHJlbWFpbmRlciA+IDAgJiYgZmlsbE9mZnNldChvZmZzZXQsIHJlbWFpbmRlcik7XG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICogSWYgb25seSBvbmUgdmFsdWUgaGFzIGJlZW4gc2V0LCBpZSBbMV0sIHB1c2ggYSBudWxsIHRvIHRoZSBzdGFydCBvZlxuICAgICAgICAgICAgICAgICAqIHRoZSBrZXlmcmFtZSBhcnJheS4gVGhpcyB3aWxsIGxldCB1cyBtYXJrIGEga2V5ZnJhbWUgYXQgdGhpcyBwb2ludFxuICAgICAgICAgICAgICAgICAqIHRoYXQgd2lsbCBsYXRlciBiZSBoeWRyYXRlZCB3aXRoIHRoZSBwcmV2aW91cyB2YWx1ZS5cbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICB2YWx1ZUtleWZyYW1lcy5sZW5ndGggPT09IDEgJiYgdmFsdWVLZXlmcmFtZXMudW5zaGlmdChudWxsKTtcbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgKiBBZGQga2V5ZnJhbWVzLCBtYXBwaW5nIG9mZnNldHMgdG8gYWJzb2x1dGUgdGltZS5cbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICBhZGRLZXlmcmFtZXModmFsdWVTZXF1ZW5jZSwgdmFsdWVLZXlmcmFtZXMsIGVhc2luZywgb2Zmc2V0LCBzdGFydFRpbWUsIHRhcmdldFRpbWUpO1xuICAgICAgICAgICAgICAgIG1heER1cmF0aW9uID0gTWF0aC5tYXgoZGVsYXkgKyBkdXJhdGlvbiwgbWF4RHVyYXRpb24pO1xuICAgICAgICAgICAgICAgIHRvdGFsRHVyYXRpb24gPSBNYXRoLm1heCh0YXJnZXRUaW1lLCB0b3RhbER1cmF0aW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBwcmV2VGltZSA9IGN1cnJlbnRUaW1lO1xuICAgICAgICBjdXJyZW50VGltZSArPSBtYXhEdXJhdGlvbjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRm9yIGV2ZXJ5IGVsZW1lbnQgYW5kIHZhbHVlIGNvbWJpbmF0aW9uIGNyZWF0ZSBhIG5ldyBhbmltYXRpb24uXG4gICAgICovXG4gICAgZWxlbWVudFNlcXVlbmNlcy5mb3JFYWNoKCh2YWx1ZVNlcXVlbmNlcywgZWxlbWVudCkgPT4ge1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiB2YWx1ZVNlcXVlbmNlcykge1xuICAgICAgICAgICAgY29uc3QgdmFsdWVTZXF1ZW5jZSA9IHZhbHVlU2VxdWVuY2VzW2tleV07XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEFycmFuZ2UgYWxsIHRoZSBrZXlmcmFtZXMgaW4gYXNjZW5kaW5nIHRpbWUgb3JkZXIuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHZhbHVlU2VxdWVuY2Uuc29ydChjb21wYXJlQnlUaW1lKTtcbiAgICAgICAgICAgIGNvbnN0IGtleWZyYW1lcyA9IFtdO1xuICAgICAgICAgICAgY29uc3QgdmFsdWVPZmZzZXQgPSBbXTtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlRWFzaW5nID0gW107XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEZvciBlYWNoIGtleWZyYW1lLCB0cmFuc2xhdGUgYWJzb2x1dGUgdGltZXMgaW50b1xuICAgICAgICAgICAgICogcmVsYXRpdmUgb2Zmc2V0cyBiYXNlZCBvbiB0aGUgdG90YWwgZHVyYXRpb24gb2YgdGhlIHRpbWVsaW5lLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHZhbHVlU2VxdWVuY2UubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBjb25zdCB7IGF0LCB2YWx1ZSwgZWFzaW5nIH0gPSB2YWx1ZVNlcXVlbmNlW2ldO1xuICAgICAgICAgICAgICAgIGtleWZyYW1lcy5wdXNoKHZhbHVlKTtcbiAgICAgICAgICAgICAgICB2YWx1ZU9mZnNldC5wdXNoKHByb2dyZXNzKDAsIHRvdGFsRHVyYXRpb24sIGF0KSk7XG4gICAgICAgICAgICAgICAgdmFsdWVFYXNpbmcucHVzaChlYXNpbmcgfHwgZGVmYXVsdHMuZWFzaW5nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogSWYgdGhlIGZpcnN0IGtleWZyYW1lIGRvZXNuJ3QgbGFuZCBvbiBvZmZzZXQ6IDBcbiAgICAgICAgICAgICAqIHByb3ZpZGUgb25lIGJ5IGR1cGxpY2F0aW5nIHRoZSBpbml0aWFsIGtleWZyYW1lLiBUaGlzIGVuc3VyZXNcbiAgICAgICAgICAgICAqIGl0IHNuYXBzIHRvIHRoZSBmaXJzdCBrZXlmcmFtZSB3aGVuIHRoZSBhbmltYXRpb24gc3RhcnRzLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBpZiAodmFsdWVPZmZzZXRbMF0gIT09IDApIHtcbiAgICAgICAgICAgICAgICB2YWx1ZU9mZnNldC51bnNoaWZ0KDApO1xuICAgICAgICAgICAgICAgIGtleWZyYW1lcy51bnNoaWZ0KGtleWZyYW1lc1swXSk7XG4gICAgICAgICAgICAgICAgdmFsdWVFYXNpbmcudW5zaGlmdChcImxpbmVhclwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogSWYgdGhlIGxhc3Qga2V5ZnJhbWUgZG9lc24ndCBsYW5kIG9uIG9mZnNldDogMVxuICAgICAgICAgICAgICogcHJvdmlkZSBvbmUgd2l0aCBhIG51bGwgd2lsZGNhcmQgdmFsdWUuIFRoaXMgd2lsbCBlbnN1cmUgaXRcbiAgICAgICAgICAgICAqIHN0YXlzIHN0YXRpYyB1bnRpbCB0aGUgZW5kIG9mIHRoZSBhbmltYXRpb24uXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGlmICh2YWx1ZU9mZnNldFt2YWx1ZU9mZnNldC5sZW5ndGggLSAxXSAhPT0gMSkge1xuICAgICAgICAgICAgICAgIHZhbHVlT2Zmc2V0LnB1c2goMSk7XG4gICAgICAgICAgICAgICAga2V5ZnJhbWVzLnB1c2gobnVsbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhbmltYXRpb25EZWZpbml0aW9ucy5wdXNoKFtcbiAgICAgICAgICAgICAgICBlbGVtZW50LFxuICAgICAgICAgICAgICAgIGtleSxcbiAgICAgICAgICAgICAgICBrZXlmcmFtZXMsXG4gICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGRlZmF1bHRPcHRpb25zKSwgeyBkdXJhdGlvbjogdG90YWxEdXJhdGlvbiwgZWFzaW5nOiB2YWx1ZUVhc2luZywgb2Zmc2V0OiB2YWx1ZU9mZnNldCB9KSwgdGltZWxpbmVPcHRpb25zKSxcbiAgICAgICAgICAgIF0pO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIGFuaW1hdGlvbkRlZmluaXRpb25zO1xufVxuZnVuY3Rpb24gZ2V0RWxlbWVudFNlcXVlbmNlKGVsZW1lbnQsIHNlcXVlbmNlcykge1xuICAgICFzZXF1ZW5jZXMuaGFzKGVsZW1lbnQpICYmIHNlcXVlbmNlcy5zZXQoZWxlbWVudCwge30pO1xuICAgIHJldHVybiBzZXF1ZW5jZXMuZ2V0KGVsZW1lbnQpO1xufVxuZnVuY3Rpb24gZ2V0VmFsdWVTZXF1ZW5jZShuYW1lLCBzZXF1ZW5jZXMpIHtcbiAgICBpZiAoIXNlcXVlbmNlc1tuYW1lXSlcbiAgICAgICAgc2VxdWVuY2VzW25hbWVdID0gW107XG4gICAgcmV0dXJuIHNlcXVlbmNlc1tuYW1lXTtcbn1cblxuZXhwb3J0IHsgY3JlYXRlQW5pbWF0aW9uc0Zyb21UaW1lbGluZSwgdGltZWxpbmUgfTtcbiIsImltcG9ydCB7IGlzTnVtYmVyIH0gZnJvbSAnQG1vdGlvbm9uZS91dGlscyc7XG5cbmZ1bmN0aW9uIGNhbGNOZXh0VGltZShjdXJyZW50LCBuZXh0LCBwcmV2LCBsYWJlbHMpIHtcbiAgICB2YXIgX2E7XG4gICAgaWYgKGlzTnVtYmVyKG5leHQpKSB7XG4gICAgICAgIHJldHVybiBuZXh0O1xuICAgIH1cbiAgICBlbHNlIGlmIChuZXh0LnN0YXJ0c1dpdGgoXCItXCIpIHx8IG5leHQuc3RhcnRzV2l0aChcIitcIikpIHtcbiAgICAgICAgcmV0dXJuIE1hdGgubWF4KDAsIGN1cnJlbnQgKyBwYXJzZUZsb2F0KG5leHQpKTtcbiAgICB9XG4gICAgZWxzZSBpZiAobmV4dCA9PT0gXCI8XCIpIHtcbiAgICAgICAgcmV0dXJuIHByZXY7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gKF9hID0gbGFiZWxzLmdldChuZXh0KSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogY3VycmVudDtcbiAgICB9XG59XG5cbmV4cG9ydCB7IGNhbGNOZXh0VGltZSB9O1xuIiwiaW1wb3J0IHsgbWl4LCBnZXRFYXNpbmdGb3JTZWdtZW50LCByZW1vdmVJdGVtIH0gZnJvbSAnQG1vdGlvbm9uZS91dGlscyc7XG5cbmZ1bmN0aW9uIGVyYXNlS2V5ZnJhbWVzKHNlcXVlbmNlLCBzdGFydFRpbWUsIGVuZFRpbWUpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNlcXVlbmNlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGtleWZyYW1lID0gc2VxdWVuY2VbaV07XG4gICAgICAgIGlmIChrZXlmcmFtZS5hdCA+IHN0YXJ0VGltZSAmJiBrZXlmcmFtZS5hdCA8IGVuZFRpbWUpIHtcbiAgICAgICAgICAgIHJlbW92ZUl0ZW0oc2VxdWVuY2UsIGtleWZyYW1lKTtcbiAgICAgICAgICAgIC8vIElmIHdlIHJlbW92ZSB0aGlzIGl0ZW0gd2UgaGF2ZSB0byBwdXNoIHRoZSBwb2ludGVyIGJhY2sgb25lXG4gICAgICAgICAgICBpLS07XG4gICAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiBhZGRLZXlmcmFtZXMoc2VxdWVuY2UsIGtleWZyYW1lcywgZWFzaW5nLCBvZmZzZXQsIHN0YXJ0VGltZSwgZW5kVGltZSkge1xuICAgIC8qKlxuICAgICAqIEVyYXNlIGV2ZXJ5IGV4aXN0aW5nIHZhbHVlIGJldHdlZW4gY3VycmVudFRpbWUgYW5kIHRhcmdldFRpbWUsXG4gICAgICogdGhpcyB3aWxsIGVzc2VudGlhbGx5IHNwbGljZSB0aGlzIHRpbWVsaW5lIGludG8gYW55IGN1cnJlbnRseVxuICAgICAqIGRlZmluZWQgb25lcy5cbiAgICAgKi9cbiAgICBlcmFzZUtleWZyYW1lcyhzZXF1ZW5jZSwgc3RhcnRUaW1lLCBlbmRUaW1lKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGtleWZyYW1lcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBzZXF1ZW5jZS5wdXNoKHtcbiAgICAgICAgICAgIHZhbHVlOiBrZXlmcmFtZXNbaV0sXG4gICAgICAgICAgICBhdDogbWl4KHN0YXJ0VGltZSwgZW5kVGltZSwgb2Zmc2V0W2ldKSxcbiAgICAgICAgICAgIGVhc2luZzogZ2V0RWFzaW5nRm9yU2VnbWVudChlYXNpbmcsIGkpLFxuICAgICAgICB9KTtcbiAgICB9XG59XG5cbmV4cG9ydCB7IGFkZEtleWZyYW1lcywgZXJhc2VLZXlmcmFtZXMgfTtcbiIsImZ1bmN0aW9uIGNvbXBhcmVCeVRpbWUoYSwgYikge1xuICAgIGlmIChhLmF0ID09PSBiLmF0KSB7XG4gICAgICAgIHJldHVybiBhLnZhbHVlID09PSBudWxsID8gMSA6IC0xO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGEuYXQgLSBiLmF0O1xuICAgIH1cbn1cblxuZXhwb3J0IHsgY29tcGFyZUJ5VGltZSB9O1xuIiwiZnVuY3Rpb24gcmVzb2x2ZUVsZW1lbnRzKGVsZW1lbnRzLCBzZWxlY3RvckNhY2hlKSB7XG4gICAgdmFyIF9hO1xuICAgIGlmICh0eXBlb2YgZWxlbWVudHMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgaWYgKHNlbGVjdG9yQ2FjaGUpIHtcbiAgICAgICAgICAgIChfYSA9IHNlbGVjdG9yQ2FjaGVbZWxlbWVudHNdKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiAoc2VsZWN0b3JDYWNoZVtlbGVtZW50c10gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKGVsZW1lbnRzKSk7XG4gICAgICAgICAgICBlbGVtZW50cyA9IHNlbGVjdG9yQ2FjaGVbZWxlbWVudHNdO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZWxlbWVudHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKGVsZW1lbnRzKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmIChlbGVtZW50cyBpbnN0YW5jZW9mIEVsZW1lbnQpIHtcbiAgICAgICAgZWxlbWVudHMgPSBbZWxlbWVudHNdO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm4gYW4gZW1wdHkgYXJyYXlcbiAgICAgKi9cbiAgICByZXR1cm4gQXJyYXkuZnJvbShlbGVtZW50cyB8fCBbXSk7XG59XG5cbmV4cG9ydCB7IHJlc29sdmVFbGVtZW50cyB9O1xuIiwiaW1wb3J0IHsgaXNOdW1iZXIsIGlzRnVuY3Rpb24gfSBmcm9tICdAbW90aW9ub25lL3V0aWxzJztcbmltcG9ydCB7IGdldEVhc2luZ0Z1bmN0aW9uIH0gZnJvbSAnQG1vdGlvbm9uZS9hbmltYXRpb24nO1xuXG5mdW5jdGlvbiBzdGFnZ2VyKGR1cmF0aW9uID0gMC4xLCB7IHN0YXJ0ID0gMCwgZnJvbSA9IDAsIGVhc2luZyB9ID0ge30pIHtcbiAgICByZXR1cm4gKGksIHRvdGFsKSA9PiB7XG4gICAgICAgIGNvbnN0IGZyb21JbmRleCA9IGlzTnVtYmVyKGZyb20pID8gZnJvbSA6IGdldEZyb21JbmRleChmcm9tLCB0b3RhbCk7XG4gICAgICAgIGNvbnN0IGRpc3RhbmNlID0gTWF0aC5hYnMoZnJvbUluZGV4IC0gaSk7XG4gICAgICAgIGxldCBkZWxheSA9IGR1cmF0aW9uICogZGlzdGFuY2U7XG4gICAgICAgIGlmIChlYXNpbmcpIHtcbiAgICAgICAgICAgIGNvbnN0IG1heERlbGF5ID0gdG90YWwgKiBkdXJhdGlvbjtcbiAgICAgICAgICAgIGNvbnN0IGVhc2luZ0Z1bmN0aW9uID0gZ2V0RWFzaW5nRnVuY3Rpb24oZWFzaW5nKTtcbiAgICAgICAgICAgIGRlbGF5ID0gZWFzaW5nRnVuY3Rpb24oZGVsYXkgLyBtYXhEZWxheSkgKiBtYXhEZWxheTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3RhcnQgKyBkZWxheTtcbiAgICB9O1xufVxuZnVuY3Rpb24gZ2V0RnJvbUluZGV4KGZyb20sIHRvdGFsKSB7XG4gICAgaWYgKGZyb20gPT09IFwiZmlyc3RcIikge1xuICAgICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGNvbnN0IGxhc3RJbmRleCA9IHRvdGFsIC0gMTtcbiAgICAgICAgcmV0dXJuIGZyb20gPT09IFwibGFzdFwiID8gbGFzdEluZGV4IDogbGFzdEluZGV4IC8gMjtcbiAgICB9XG59XG5mdW5jdGlvbiByZXNvbHZlT3B0aW9uKG9wdGlvbiwgaSwgdG90YWwpIHtcbiAgICByZXR1cm4gaXNGdW5jdGlvbihvcHRpb24pID8gb3B0aW9uKGksIHRvdGFsKSA6IG9wdGlvbjtcbn1cblxuZXhwb3J0IHsgZ2V0RnJvbUluZGV4LCByZXNvbHZlT3B0aW9uLCBzdGFnZ2VyIH07XG4iLCJpbXBvcnQgeyBub29wUmV0dXJuIH0gZnJvbSAnQG1vdGlvbm9uZS91dGlscyc7XG5cbi8qXG4gIEJlemllciBmdW5jdGlvbiBnZW5lcmF0b3JcblxuICBUaGlzIGhhcyBiZWVuIG1vZGlmaWVkIGZyb20gR2HDq3RhbiBSZW5hdWRlYXUncyBCZXppZXJFYXNpbmdcbiAgaHR0cHM6Ly9naXRodWIuY29tL2dyZS9iZXppZXItZWFzaW5nL2Jsb2IvbWFzdGVyL3NyYy9pbmRleC5qc1xuICBodHRwczovL2dpdGh1Yi5jb20vZ3JlL2Jlemllci1lYXNpbmcvYmxvYi9tYXN0ZXIvTElDRU5TRVxuICBcbiAgSSd2ZSByZW1vdmVkIHRoZSBuZXd0b25SYXBoc29uSXRlcmF0ZSBhbGdvIGJlY2F1c2UgaW4gYmVuY2htYXJraW5nIGl0XG4gIHdhc24ndCBub3RpY2lhYmx5IGZhc3RlciB0aGFuIGJpbmFyeVN1YmRpdmlzaW9uLCBpbmRlZWQgcmVtb3ZpbmcgaXRcbiAgdXN1YWxseSBpbXByb3ZlZCB0aW1lcywgZGVwZW5kaW5nIG9uIHRoZSBjdXJ2ZS5cblxuICBJIGFsc28gcmVtb3ZlZCB0aGUgbG9va3VwIHRhYmxlLCBhcyBmb3IgdGhlIGFkZGVkIGJ1bmRsZSBzaXplIGFuZCBsb29wIHdlJ3JlXG4gIG9ubHkgY3V0dGluZyB+NCBvciBzbyBzdWJkaXZpc2lvbiBpdGVyYXRpb25zLiBJIGJ1bXBlZCB0aGUgbWF4IGl0ZXJhdGlvbnMgdXBcbiAgdG8gMTIgdG8gY29tcGVuc2F0ZSBhbmQgdGhpcyBzdGlsbCB0ZW5kZWQgdG8gYmUgZmFzdGVyIGZvciBubyBwZXJjZWl2YWJsZVxuICBsb3NzIGluIGFjY3VyYWN5LlxuXG4gIFVzYWdlXG4gICAgY29uc3QgZWFzZU91dCA9IGN1YmljQmV6aWVyKC4xNywuNjcsLjgzLC42Nyk7XG4gICAgY29uc3QgeCA9IGVhc2VPdXQoMC41KTsgLy8gcmV0dXJucyAwLjYyNy4uLlxuKi9cbi8vIFJldHVybnMgeCh0KSBnaXZlbiB0LCB4MSwgYW5kIHgyLCBvciB5KHQpIGdpdmVuIHQsIHkxLCBhbmQgeTIuXG5jb25zdCBjYWxjQmV6aWVyID0gKHQsIGExLCBhMikgPT4gKCgoMS4wIC0gMy4wICogYTIgKyAzLjAgKiBhMSkgKiB0ICsgKDMuMCAqIGEyIC0gNi4wICogYTEpKSAqIHQgKyAzLjAgKiBhMSkgKiB0O1xuY29uc3Qgc3ViZGl2aXNpb25QcmVjaXNpb24gPSAwLjAwMDAwMDE7XG5jb25zdCBzdWJkaXZpc2lvbk1heEl0ZXJhdGlvbnMgPSAxMjtcbmZ1bmN0aW9uIGJpbmFyeVN1YmRpdmlkZSh4LCBsb3dlckJvdW5kLCB1cHBlckJvdW5kLCBtWDEsIG1YMikge1xuICAgIGxldCBjdXJyZW50WDtcbiAgICBsZXQgY3VycmVudFQ7XG4gICAgbGV0IGkgPSAwO1xuICAgIGRvIHtcbiAgICAgICAgY3VycmVudFQgPSBsb3dlckJvdW5kICsgKHVwcGVyQm91bmQgLSBsb3dlckJvdW5kKSAvIDIuMDtcbiAgICAgICAgY3VycmVudFggPSBjYWxjQmV6aWVyKGN1cnJlbnRULCBtWDEsIG1YMikgLSB4O1xuICAgICAgICBpZiAoY3VycmVudFggPiAwLjApIHtcbiAgICAgICAgICAgIHVwcGVyQm91bmQgPSBjdXJyZW50VDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGxvd2VyQm91bmQgPSBjdXJyZW50VDtcbiAgICAgICAgfVxuICAgIH0gd2hpbGUgKE1hdGguYWJzKGN1cnJlbnRYKSA+IHN1YmRpdmlzaW9uUHJlY2lzaW9uICYmXG4gICAgICAgICsraSA8IHN1YmRpdmlzaW9uTWF4SXRlcmF0aW9ucyk7XG4gICAgcmV0dXJuIGN1cnJlbnRUO1xufVxuZnVuY3Rpb24gY3ViaWNCZXppZXIobVgxLCBtWTEsIG1YMiwgbVkyKSB7XG4gICAgLy8gSWYgdGhpcyBpcyBhIGxpbmVhciBncmFkaWVudCwgcmV0dXJuIGxpbmVhciBlYXNpbmdcbiAgICBpZiAobVgxID09PSBtWTEgJiYgbVgyID09PSBtWTIpXG4gICAgICAgIHJldHVybiBub29wUmV0dXJuO1xuICAgIGNvbnN0IGdldFRGb3JYID0gKGFYKSA9PiBiaW5hcnlTdWJkaXZpZGUoYVgsIDAsIDEsIG1YMSwgbVgyKTtcbiAgICAvLyBJZiBhbmltYXRpb24gaXMgYXQgc3RhcnQvZW5kLCByZXR1cm4gdCB3aXRob3V0IGVhc2luZ1xuICAgIHJldHVybiAodCkgPT4gdCA9PT0gMCB8fCB0ID09PSAxID8gdCA6IGNhbGNCZXppZXIoZ2V0VEZvclgodCksIG1ZMSwgbVkyKTtcbn1cblxuZXhwb3J0IHsgY3ViaWNCZXppZXIgfTtcbiIsImltcG9ydCB7IGNsYW1wIH0gZnJvbSAnQG1vdGlvbm9uZS91dGlscyc7XG5cbmNvbnN0IHN0ZXBzID0gKHN0ZXBzLCBkaXJlY3Rpb24gPSBcImVuZFwiKSA9PiAocHJvZ3Jlc3MpID0+IHtcbiAgICBwcm9ncmVzcyA9XG4gICAgICAgIGRpcmVjdGlvbiA9PT0gXCJlbmRcIlxuICAgICAgICAgICAgPyBNYXRoLm1pbihwcm9ncmVzcywgMC45OTkpXG4gICAgICAgICAgICA6IE1hdGgubWF4KHByb2dyZXNzLCAwLjAwMSk7XG4gICAgY29uc3QgZXhwYW5kZWQgPSBwcm9ncmVzcyAqIHN0ZXBzO1xuICAgIGNvbnN0IHJvdW5kZWQgPSBkaXJlY3Rpb24gPT09IFwiZW5kXCIgPyBNYXRoLmZsb29yKGV4cGFuZGVkKSA6IE1hdGguY2VpbChleHBhbmRlZCk7XG4gICAgcmV0dXJuIGNsYW1wKDAsIDEsIHJvdW5kZWQgLyBzdGVwcyk7XG59O1xuXG5leHBvcnQgeyBzdGVwcyB9O1xuIiwiLyoqXG4gKiBUaGUgTW90aW9uVmFsdWUgdHJhY2tzIHRoZSBzdGF0ZSBvZiBhIHNpbmdsZSBhbmltYXRhYmxlXG4gKiB2YWx1ZS4gQ3VycmVudGx5LCB1cGRhdGVkQXQgYW5kIGN1cnJlbnQgYXJlIHVudXNlZC4gVGhlXG4gKiBsb25nIHRlcm0gaWRlYSBpcyB0byB1c2UgdGhpcyB0byBtaW5pbWlzZSB0aGUgbnVtYmVyXG4gKiBvZiBET00gcmVhZHMsIGFuZCB0byBhYnN0cmFjdCB0aGUgRE9NIGludGVyYWN0aW9ucyBoZXJlLlxuICovXG5jbGFzcyBNb3Rpb25WYWx1ZSB7XG4gICAgc2V0QW5pbWF0aW9uKGFuaW1hdGlvbikge1xuICAgICAgICB0aGlzLmFuaW1hdGlvbiA9IGFuaW1hdGlvbjtcbiAgICAgICAgYW5pbWF0aW9uID09PSBudWxsIHx8IGFuaW1hdGlvbiA9PT0gdm9pZCAwID8gdm9pZCAwIDogYW5pbWF0aW9uLmZpbmlzaGVkLnRoZW4oKCkgPT4gdGhpcy5jbGVhckFuaW1hdGlvbigpKS5jYXRjaCgoKSA9PiB7IH0pO1xuICAgIH1cbiAgICBjbGVhckFuaW1hdGlvbigpIHtcbiAgICAgICAgdGhpcy5hbmltYXRpb24gPSB0aGlzLmdlbmVyYXRvciA9IHVuZGVmaW5lZDtcbiAgICB9XG59XG5cbmV4cG9ydCB7IE1vdGlvblZhbHVlIH07XG4iLCJmdW5jdGlvbiBhZGRVbmlxdWVJdGVtKGFycmF5LCBpdGVtKSB7XG4gICAgYXJyYXkuaW5kZXhPZihpdGVtKSA9PT0gLTEgJiYgYXJyYXkucHVzaChpdGVtKTtcbn1cbmZ1bmN0aW9uIHJlbW92ZUl0ZW0oYXJyLCBpdGVtKSB7XG4gICAgY29uc3QgaW5kZXggPSBhcnIuaW5kZXhPZihpdGVtKTtcbiAgICBpbmRleCA+IC0xICYmIGFyci5zcGxpY2UoaW5kZXgsIDEpO1xufVxuXG5leHBvcnQgeyBhZGRVbmlxdWVJdGVtLCByZW1vdmVJdGVtIH07XG4iLCJjb25zdCBjbGFtcCA9IChtaW4sIG1heCwgdikgPT4gTWF0aC5taW4oTWF0aC5tYXgodiwgbWluKSwgbWF4KTtcblxuZXhwb3J0IHsgY2xhbXAgfTtcbiIsImNvbnN0IGRlZmF1bHRzID0ge1xuICAgIGR1cmF0aW9uOiAwLjMsXG4gICAgZGVsYXk6IDAsXG4gICAgZW5kRGVsYXk6IDAsXG4gICAgcmVwZWF0OiAwLFxuICAgIGVhc2luZzogXCJlYXNlXCIsXG59O1xuXG5leHBvcnQgeyBkZWZhdWx0cyB9O1xuIiwiaW1wb3J0IHsgaXNFYXNpbmdMaXN0IH0gZnJvbSAnLi9pcy1lYXNpbmctbGlzdC5lcy5qcyc7XG5pbXBvcnQgeyB3cmFwIH0gZnJvbSAnLi93cmFwLmVzLmpzJztcblxuZnVuY3Rpb24gZ2V0RWFzaW5nRm9yU2VnbWVudChlYXNpbmcsIGkpIHtcbiAgICByZXR1cm4gaXNFYXNpbmdMaXN0KGVhc2luZylcbiAgICAgICAgPyBlYXNpbmdbd3JhcCgwLCBlYXNpbmcubGVuZ3RoLCBpKV1cbiAgICAgICAgOiBlYXNpbmc7XG59XG5cbmV4cG9ydCB7IGdldEVhc2luZ0ZvclNlZ21lbnQgfTtcbiIsImltcG9ydCB7IG1peCB9IGZyb20gJy4vbWl4LmVzLmpzJztcbmltcG9ydCB7IG5vb3BSZXR1cm4gfSBmcm9tICcuL25vb3AuZXMuanMnO1xuaW1wb3J0IHsgZmlsbE9mZnNldCwgZGVmYXVsdE9mZnNldCB9IGZyb20gJy4vb2Zmc2V0LmVzLmpzJztcbmltcG9ydCB7IHByb2dyZXNzIH0gZnJvbSAnLi9wcm9ncmVzcy5lcy5qcyc7XG5pbXBvcnQgeyBnZXRFYXNpbmdGb3JTZWdtZW50IH0gZnJvbSAnLi9lYXNpbmcuZXMuanMnO1xuaW1wb3J0IHsgY2xhbXAgfSBmcm9tICcuL2NsYW1wLmVzLmpzJztcblxuZnVuY3Rpb24gaW50ZXJwb2xhdGUob3V0cHV0LCBpbnB1dCA9IGRlZmF1bHRPZmZzZXQob3V0cHV0Lmxlbmd0aCksIGVhc2luZyA9IG5vb3BSZXR1cm4pIHtcbiAgICBjb25zdCBsZW5ndGggPSBvdXRwdXQubGVuZ3RoO1xuICAgIC8qKlxuICAgICAqIElmIHRoZSBpbnB1dCBsZW5ndGggaXMgbG93ZXIgdGhhbiB0aGUgb3V0cHV0IHdlXG4gICAgICogZmlsbCB0aGUgaW5wdXQgdG8gbWF0Y2guIFRoaXMgY3VycmVudGx5IGFzc3VtZXMgdGhlIGlucHV0XG4gICAgICogaXMgYW4gYW5pbWF0aW9uIHByb2dyZXNzIHZhbHVlIHNvIGlzIGEgZ29vZCBjYW5kaWRhdGUgZm9yXG4gICAgICogbW92aW5nIG91dHNpZGUgdGhlIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGNvbnN0IHJlbWFpbmRlciA9IGxlbmd0aCAtIGlucHV0Lmxlbmd0aDtcbiAgICByZW1haW5kZXIgPiAwICYmIGZpbGxPZmZzZXQoaW5wdXQsIHJlbWFpbmRlcik7XG4gICAgcmV0dXJuICh0KSA9PiB7XG4gICAgICAgIGxldCBpID0gMDtcbiAgICAgICAgZm9yICg7IGkgPCBsZW5ndGggLSAyOyBpKyspIHtcbiAgICAgICAgICAgIGlmICh0IDwgaW5wdXRbaSArIDFdKVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGxldCBwcm9ncmVzc0luUmFuZ2UgPSBjbGFtcCgwLCAxLCBwcm9ncmVzcyhpbnB1dFtpXSwgaW5wdXRbaSArIDFdLCB0KSk7XG4gICAgICAgIGNvbnN0IHNlZ21lbnRFYXNpbmcgPSBnZXRFYXNpbmdGb3JTZWdtZW50KGVhc2luZywgaSk7XG4gICAgICAgIHByb2dyZXNzSW5SYW5nZSA9IHNlZ21lbnRFYXNpbmcocHJvZ3Jlc3NJblJhbmdlKTtcbiAgICAgICAgcmV0dXJuIG1peChvdXRwdXRbaV0sIG91dHB1dFtpICsgMV0sIHByb2dyZXNzSW5SYW5nZSk7XG4gICAgfTtcbn1cblxuZXhwb3J0IHsgaW50ZXJwb2xhdGUgfTtcbiIsImltcG9ydCB7IGlzTnVtYmVyIH0gZnJvbSAnLi9pcy1udW1iZXIuZXMuanMnO1xuXG5jb25zdCBpc0N1YmljQmV6aWVyID0gKGVhc2luZykgPT4gQXJyYXkuaXNBcnJheShlYXNpbmcpICYmIGlzTnVtYmVyKGVhc2luZ1swXSk7XG5cbmV4cG9ydCB7IGlzQ3ViaWNCZXppZXIgfTtcbiIsImNvbnN0IGlzRWFzaW5nR2VuZXJhdG9yID0gKGVhc2luZykgPT4gdHlwZW9mIGVhc2luZyA9PT0gXCJvYmplY3RcIiAmJlxuICAgIEJvb2xlYW4oZWFzaW5nLmNyZWF0ZUFuaW1hdGlvbik7XG5cbmV4cG9ydCB7IGlzRWFzaW5nR2VuZXJhdG9yIH07XG4iLCJpbXBvcnQgeyBpc051bWJlciB9IGZyb20gJy4vaXMtbnVtYmVyLmVzLmpzJztcblxuY29uc3QgaXNFYXNpbmdMaXN0ID0gKGVhc2luZykgPT4gQXJyYXkuaXNBcnJheShlYXNpbmcpICYmICFpc051bWJlcihlYXNpbmdbMF0pO1xuXG5leHBvcnQgeyBpc0Vhc2luZ0xpc3QgfTtcbiIsImNvbnN0IGlzRnVuY3Rpb24gPSAodmFsdWUpID0+IHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiO1xuXG5leHBvcnQgeyBpc0Z1bmN0aW9uIH07XG4iLCJjb25zdCBpc051bWJlciA9ICh2YWx1ZSkgPT4gdHlwZW9mIHZhbHVlID09PSBcIm51bWJlclwiO1xuXG5leHBvcnQgeyBpc051bWJlciB9O1xuIiwiY29uc3QgaXNTdHJpbmcgPSAodmFsdWUpID0+IHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIjtcblxuZXhwb3J0IHsgaXNTdHJpbmcgfTtcbiIsImNvbnN0IG1peCA9IChtaW4sIG1heCwgcHJvZ3Jlc3MpID0+IC1wcm9ncmVzcyAqIG1pbiArIHByb2dyZXNzICogbWF4ICsgbWluO1xuXG5leHBvcnQgeyBtaXggfTtcbiIsImNvbnN0IG5vb3AgPSAoKSA9PiB7IH07XG5jb25zdCBub29wUmV0dXJuID0gKHYpID0+IHY7XG5cbmV4cG9ydCB7IG5vb3AsIG5vb3BSZXR1cm4gfTtcbiIsImltcG9ydCB7IG1peCB9IGZyb20gJy4vbWl4LmVzLmpzJztcbmltcG9ydCB7IHByb2dyZXNzIH0gZnJvbSAnLi9wcm9ncmVzcy5lcy5qcyc7XG5cbmZ1bmN0aW9uIGZpbGxPZmZzZXQob2Zmc2V0LCByZW1haW5pbmcpIHtcbiAgICBjb25zdCBtaW4gPSBvZmZzZXRbb2Zmc2V0Lmxlbmd0aCAtIDFdO1xuICAgIGZvciAobGV0IGkgPSAxOyBpIDw9IHJlbWFpbmluZzsgaSsrKSB7XG4gICAgICAgIGNvbnN0IG9mZnNldFByb2dyZXNzID0gcHJvZ3Jlc3MoMCwgcmVtYWluaW5nLCBpKTtcbiAgICAgICAgb2Zmc2V0LnB1c2gobWl4KG1pbiwgMSwgb2Zmc2V0UHJvZ3Jlc3MpKTtcbiAgICB9XG59XG5mdW5jdGlvbiBkZWZhdWx0T2Zmc2V0KGxlbmd0aCkge1xuICAgIGNvbnN0IG9mZnNldCA9IFswXTtcbiAgICBmaWxsT2Zmc2V0KG9mZnNldCwgbGVuZ3RoIC0gMSk7XG4gICAgcmV0dXJuIG9mZnNldDtcbn1cblxuZXhwb3J0IHsgZGVmYXVsdE9mZnNldCwgZmlsbE9mZnNldCB9O1xuIiwiY29uc3QgcHJvZ3Jlc3MgPSAobWluLCBtYXgsIHZhbHVlKSA9PiBtYXggLSBtaW4gPT09IDAgPyAxIDogKHZhbHVlIC0gbWluKSAvIChtYXggLSBtaW4pO1xuXG5leHBvcnQgeyBwcm9ncmVzcyB9O1xuIiwiY29uc3QgdGltZSA9IHtcbiAgICBtczogKHNlY29uZHMpID0+IHNlY29uZHMgKiAxMDAwLFxuICAgIHM6IChtaWxsaXNlY29uZHMpID0+IG1pbGxpc2Vjb25kcyAvIDEwMDAsXG59O1xuXG5leHBvcnQgeyB0aW1lIH07XG4iLCJjb25zdCB3cmFwID0gKG1pbiwgbWF4LCB2KSA9PiB7XG4gICAgY29uc3QgcmFuZ2VTaXplID0gbWF4IC0gbWluO1xuICAgIHJldHVybiAoKCgodiAtIG1pbikgJSByYW5nZVNpemUpICsgcmFuZ2VTaXplKSAlIHJhbmdlU2l6ZSkgKyBtaW47XG59O1xuXG5leHBvcnQgeyB3cmFwIH07XG4iLCIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSBhbnNpSFRNTFxuXG4vLyBSZWZlcmVuY2UgdG8gaHR0cHM6Ly9naXRodWIuY29tL3NpbmRyZXNvcmh1cy9hbnNpLXJlZ2V4XG52YXIgX3JlZ0FOU0kgPSAvKD86KD86XFx1MDAxYlxcWyl8XFx1MDA5YikoPzooPzpbMC05XXsxLDN9KT8oPzooPzo7WzAtOV17MCwzfSkqKT9bQS1NfGYtbV0pfFxcdTAwMWJbQS1NXS9cblxudmFyIF9kZWZDb2xvcnMgPSB7XG4gIHJlc2V0OiBbJ2ZmZicsICcwMDAnXSwgLy8gW0ZPUkVHUk9VRF9DT0xPUiwgQkFDS0dST1VORF9DT0xPUl1cbiAgYmxhY2s6ICcwMDAnLFxuICByZWQ6ICdmZjAwMDAnLFxuICBncmVlbjogJzIwOTgwNScsXG4gIHllbGxvdzogJ2U4YmYwMycsXG4gIGJsdWU6ICcwMDAwZmYnLFxuICBtYWdlbnRhOiAnZmYwMGZmJyxcbiAgY3lhbjogJzAwZmZlZScsXG4gIGxpZ2h0Z3JleTogJ2YwZjBmMCcsXG4gIGRhcmtncmV5OiAnODg4J1xufVxudmFyIF9zdHlsZXMgPSB7XG4gIDMwOiAnYmxhY2snLFxuICAzMTogJ3JlZCcsXG4gIDMyOiAnZ3JlZW4nLFxuICAzMzogJ3llbGxvdycsXG4gIDM0OiAnYmx1ZScsXG4gIDM1OiAnbWFnZW50YScsXG4gIDM2OiAnY3lhbicsXG4gIDM3OiAnbGlnaHRncmV5J1xufVxudmFyIF9vcGVuVGFncyA9IHtcbiAgJzEnOiAnZm9udC13ZWlnaHQ6Ym9sZCcsIC8vIGJvbGRcbiAgJzInOiAnb3BhY2l0eTowLjUnLCAvLyBkaW1cbiAgJzMnOiAnPGk+JywgLy8gaXRhbGljXG4gICc0JzogJzx1PicsIC8vIHVuZGVyc2NvcmVcbiAgJzgnOiAnZGlzcGxheTpub25lJywgLy8gaGlkZGVuXG4gICc5JzogJzxkZWw+JyAvLyBkZWxldGVcbn1cbnZhciBfY2xvc2VUYWdzID0ge1xuICAnMjMnOiAnPC9pPicsIC8vIHJlc2V0IGl0YWxpY1xuICAnMjQnOiAnPC91PicsIC8vIHJlc2V0IHVuZGVyc2NvcmVcbiAgJzI5JzogJzwvZGVsPicgLy8gcmVzZXQgZGVsZXRlXG59XG5cbjtbMCwgMjEsIDIyLCAyNywgMjgsIDM5LCA0OV0uZm9yRWFjaChmdW5jdGlvbiAobikge1xuICBfY2xvc2VUYWdzW25dID0gJzwvc3Bhbj4nXG59KVxuXG4vKipcbiAqIENvbnZlcnRzIHRleHQgd2l0aCBBTlNJIGNvbG9yIGNvZGVzIHRvIEhUTUwgbWFya3VwLlxuICogQHBhcmFtIHtTdHJpbmd9IHRleHRcbiAqIEByZXR1cm5zIHsqfVxuICovXG5mdW5jdGlvbiBhbnNpSFRNTCAodGV4dCkge1xuICAvLyBSZXR1cm5zIHRoZSB0ZXh0IGlmIHRoZSBzdHJpbmcgaGFzIG5vIEFOU0kgZXNjYXBlIGNvZGUuXG4gIGlmICghX3JlZ0FOU0kudGVzdCh0ZXh0KSkge1xuICAgIHJldHVybiB0ZXh0XG4gIH1cblxuICAvLyBDYWNoZSBvcGVuZWQgc2VxdWVuY2UuXG4gIHZhciBhbnNpQ29kZXMgPSBbXVxuICAvLyBSZXBsYWNlIHdpdGggbWFya3VwLlxuICB2YXIgcmV0ID0gdGV4dC5yZXBsYWNlKC9cXDAzM1xcWyhcXGQrKW0vZywgZnVuY3Rpb24gKG1hdGNoLCBzZXEpIHtcbiAgICB2YXIgb3QgPSBfb3BlblRhZ3Nbc2VxXVxuICAgIGlmIChvdCkge1xuICAgICAgLy8gSWYgY3VycmVudCBzZXF1ZW5jZSBoYXMgYmVlbiBvcGVuZWQsIGNsb3NlIGl0LlxuICAgICAgaWYgKCEhfmFuc2lDb2Rlcy5pbmRleE9mKHNlcSkpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1leHRyYS1ib29sZWFuLWNhc3RcbiAgICAgICAgYW5zaUNvZGVzLnBvcCgpXG4gICAgICAgIHJldHVybiAnPC9zcGFuPidcbiAgICAgIH1cbiAgICAgIC8vIE9wZW4gdGFnLlxuICAgICAgYW5zaUNvZGVzLnB1c2goc2VxKVxuICAgICAgcmV0dXJuIG90WzBdID09PSAnPCcgPyBvdCA6ICc8c3BhbiBzdHlsZT1cIicgKyBvdCArICc7XCI+J1xuICAgIH1cblxuICAgIHZhciBjdCA9IF9jbG9zZVRhZ3Nbc2VxXVxuICAgIGlmIChjdCkge1xuICAgICAgLy8gUG9wIHNlcXVlbmNlXG4gICAgICBhbnNpQ29kZXMucG9wKClcbiAgICAgIHJldHVybiBjdFxuICAgIH1cbiAgICByZXR1cm4gJydcbiAgfSlcblxuICAvLyBNYWtlIHN1cmUgdGFncyBhcmUgY2xvc2VkLlxuICB2YXIgbCA9IGFuc2lDb2Rlcy5sZW5ndGhcbiAgOyhsID4gMCkgJiYgKHJldCArPSBBcnJheShsICsgMSkuam9pbignPC9zcGFuPicpKVxuXG4gIHJldHVybiByZXRcbn1cblxuLyoqXG4gKiBDdXN0b21pemUgY29sb3JzLlxuICogQHBhcmFtIHtPYmplY3R9IGNvbG9ycyByZWZlcmVuY2UgdG8gX2RlZkNvbG9yc1xuICovXG5hbnNpSFRNTC5zZXRDb2xvcnMgPSBmdW5jdGlvbiAoY29sb3JzKSB7XG4gIGlmICh0eXBlb2YgY29sb3JzICE9PSAnb2JqZWN0Jykge1xuICAgIHRocm93IG5ldyBFcnJvcignYGNvbG9yc2AgcGFyYW1ldGVyIG11c3QgYmUgYW4gT2JqZWN0LicpXG4gIH1cblxuICB2YXIgX2ZpbmFsQ29sb3JzID0ge31cbiAgZm9yICh2YXIga2V5IGluIF9kZWZDb2xvcnMpIHtcbiAgICB2YXIgaGV4ID0gY29sb3JzLmhhc093blByb3BlcnR5KGtleSkgPyBjb2xvcnNba2V5XSA6IG51bGxcbiAgICBpZiAoIWhleCkge1xuICAgICAgX2ZpbmFsQ29sb3JzW2tleV0gPSBfZGVmQ29sb3JzW2tleV1cbiAgICAgIGNvbnRpbnVlXG4gICAgfVxuICAgIGlmICgncmVzZXQnID09PSBrZXkpIHtcbiAgICAgIGlmICh0eXBlb2YgaGV4ID09PSAnc3RyaW5nJykge1xuICAgICAgICBoZXggPSBbaGV4XVxuICAgICAgfVxuICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGhleCkgfHwgaGV4Lmxlbmd0aCA9PT0gMCB8fCBoZXguc29tZShmdW5jdGlvbiAoaCkge1xuICAgICAgICByZXR1cm4gdHlwZW9mIGggIT09ICdzdHJpbmcnXG4gICAgICB9KSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZSB2YWx1ZSBvZiBgJyArIGtleSArICdgIHByb3BlcnR5IG11c3QgYmUgYW4gQXJyYXkgYW5kIGVhY2ggaXRlbSBjb3VsZCBvbmx5IGJlIGEgaGV4IHN0cmluZywgZS5nLjogRkYwMDAwJylcbiAgICAgIH1cbiAgICAgIHZhciBkZWZIZXhDb2xvciA9IF9kZWZDb2xvcnNba2V5XVxuICAgICAgaWYgKCFoZXhbMF0pIHtcbiAgICAgICAgaGV4WzBdID0gZGVmSGV4Q29sb3JbMF1cbiAgICAgIH1cbiAgICAgIGlmIChoZXgubGVuZ3RoID09PSAxIHx8ICFoZXhbMV0pIHtcbiAgICAgICAgaGV4ID0gW2hleFswXV1cbiAgICAgICAgaGV4LnB1c2goZGVmSGV4Q29sb3JbMV0pXG4gICAgICB9XG5cbiAgICAgIGhleCA9IGhleC5zbGljZSgwLCAyKVxuICAgIH0gZWxzZSBpZiAodHlwZW9mIGhleCAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignVGhlIHZhbHVlIG9mIGAnICsga2V5ICsgJ2AgcHJvcGVydHkgbXVzdCBiZSBhIGhleCBzdHJpbmcsIGUuZy46IEZGMDAwMCcpXG4gICAgfVxuICAgIF9maW5hbENvbG9yc1trZXldID0gaGV4XG4gIH1cbiAgX3NldFRhZ3MoX2ZpbmFsQ29sb3JzKVxufVxuXG4vKipcbiAqIFJlc2V0IGNvbG9ycy5cbiAqL1xuYW5zaUhUTUwucmVzZXQgPSBmdW5jdGlvbiAoKSB7XG4gIF9zZXRUYWdzKF9kZWZDb2xvcnMpXG59XG5cbi8qKlxuICogRXhwb3NlIHRhZ3MsIGluY2x1ZGluZyBvcGVuIGFuZCBjbG9zZS5cbiAqIEB0eXBlIHtPYmplY3R9XG4gKi9cbmFuc2lIVE1MLnRhZ3MgPSB7fVxuXG5pZiAoT2JqZWN0LmRlZmluZVByb3BlcnR5KSB7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShhbnNpSFRNTC50YWdzLCAnb3BlbicsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIF9vcGVuVGFncyB9XG4gIH0pXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShhbnNpSFRNTC50YWdzLCAnY2xvc2UnLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBfY2xvc2VUYWdzIH1cbiAgfSlcbn0gZWxzZSB7XG4gIGFuc2lIVE1MLnRhZ3Mub3BlbiA9IF9vcGVuVGFnc1xuICBhbnNpSFRNTC50YWdzLmNsb3NlID0gX2Nsb3NlVGFnc1xufVxuXG5mdW5jdGlvbiBfc2V0VGFncyAoY29sb3JzKSB7XG4gIC8vIHJlc2V0IGFsbFxuICBfb3BlblRhZ3NbJzAnXSA9ICdmb250LXdlaWdodDpub3JtYWw7b3BhY2l0eToxO2NvbG9yOiMnICsgY29sb3JzLnJlc2V0WzBdICsgJztiYWNrZ3JvdW5kOiMnICsgY29sb3JzLnJlc2V0WzFdXG4gIC8vIGludmVyc2VcbiAgX29wZW5UYWdzWyc3J10gPSAnY29sb3I6IycgKyBjb2xvcnMucmVzZXRbMV0gKyAnO2JhY2tncm91bmQ6IycgKyBjb2xvcnMucmVzZXRbMF1cbiAgLy8gZGFyayBncmV5XG4gIF9vcGVuVGFnc1snOTAnXSA9ICdjb2xvcjojJyArIGNvbG9ycy5kYXJrZ3JleVxuXG4gIGZvciAodmFyIGNvZGUgaW4gX3N0eWxlcykge1xuICAgIHZhciBjb2xvciA9IF9zdHlsZXNbY29kZV1cbiAgICB2YXIgb3JpQ29sb3IgPSBjb2xvcnNbY29sb3JdIHx8ICcwMDAnXG4gICAgX29wZW5UYWdzW2NvZGVdID0gJ2NvbG9yOiMnICsgb3JpQ29sb3JcbiAgICBjb2RlID0gcGFyc2VJbnQoY29kZSlcbiAgICBfb3BlblRhZ3NbKGNvZGUgKyAxMCkudG9TdHJpbmcoKV0gPSAnYmFja2dyb3VuZDojJyArIG9yaUNvbG9yXG4gIH1cbn1cblxuYW5zaUhUTUwucmVzZXQoKVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaXNNZXJnZWFibGVPYmplY3QgPSBmdW5jdGlvbiBpc01lcmdlYWJsZU9iamVjdCh2YWx1ZSkge1xuXHRyZXR1cm4gaXNOb25OdWxsT2JqZWN0KHZhbHVlKVxuXHRcdCYmICFpc1NwZWNpYWwodmFsdWUpXG59O1xuXG5mdW5jdGlvbiBpc05vbk51bGxPYmplY3QodmFsdWUpIHtcblx0cmV0dXJuICEhdmFsdWUgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0J1xufVxuXG5mdW5jdGlvbiBpc1NwZWNpYWwodmFsdWUpIHtcblx0dmFyIHN0cmluZ1ZhbHVlID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKTtcblxuXHRyZXR1cm4gc3RyaW5nVmFsdWUgPT09ICdbb2JqZWN0IFJlZ0V4cF0nXG5cdFx0fHwgc3RyaW5nVmFsdWUgPT09ICdbb2JqZWN0IERhdGVdJ1xuXHRcdHx8IGlzUmVhY3RFbGVtZW50KHZhbHVlKVxufVxuXG4vLyBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2Jsb2IvYjVhYzk2M2ZiNzkxZDEyOThlN2YzOTYyMzYzODNiYzk1NWY5MTZjMS9zcmMvaXNvbW9ycGhpYy9jbGFzc2ljL2VsZW1lbnQvUmVhY3RFbGVtZW50LmpzI0wyMS1MMjVcbnZhciBjYW5Vc2VTeW1ib2wgPSB0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIFN5bWJvbC5mb3I7XG52YXIgUkVBQ1RfRUxFTUVOVF9UWVBFID0gY2FuVXNlU3ltYm9sID8gU3ltYm9sLmZvcigncmVhY3QuZWxlbWVudCcpIDogMHhlYWM3O1xuXG5mdW5jdGlvbiBpc1JlYWN0RWxlbWVudCh2YWx1ZSkge1xuXHRyZXR1cm4gdmFsdWUuJCR0eXBlb2YgPT09IFJFQUNUX0VMRU1FTlRfVFlQRVxufVxuXG5mdW5jdGlvbiBlbXB0eVRhcmdldCh2YWwpIHtcblx0cmV0dXJuIEFycmF5LmlzQXJyYXkodmFsKSA/IFtdIDoge31cbn1cblxuZnVuY3Rpb24gY2xvbmVVbmxlc3NPdGhlcndpc2VTcGVjaWZpZWQodmFsdWUsIG9wdGlvbnMpIHtcblx0cmV0dXJuIChvcHRpb25zLmNsb25lICE9PSBmYWxzZSAmJiBvcHRpb25zLmlzTWVyZ2VhYmxlT2JqZWN0KHZhbHVlKSlcblx0XHQ/IGRlZXBtZXJnZShlbXB0eVRhcmdldCh2YWx1ZSksIHZhbHVlLCBvcHRpb25zKVxuXHRcdDogdmFsdWVcbn1cblxuZnVuY3Rpb24gZGVmYXVsdEFycmF5TWVyZ2UodGFyZ2V0LCBzb3VyY2UsIG9wdGlvbnMpIHtcblx0cmV0dXJuIHRhcmdldC5jb25jYXQoc291cmNlKS5tYXAoZnVuY3Rpb24oZWxlbWVudCkge1xuXHRcdHJldHVybiBjbG9uZVVubGVzc090aGVyd2lzZVNwZWNpZmllZChlbGVtZW50LCBvcHRpb25zKVxuXHR9KVxufVxuXG5mdW5jdGlvbiBnZXRNZXJnZUZ1bmN0aW9uKGtleSwgb3B0aW9ucykge1xuXHRpZiAoIW9wdGlvbnMuY3VzdG9tTWVyZ2UpIHtcblx0XHRyZXR1cm4gZGVlcG1lcmdlXG5cdH1cblx0dmFyIGN1c3RvbU1lcmdlID0gb3B0aW9ucy5jdXN0b21NZXJnZShrZXkpO1xuXHRyZXR1cm4gdHlwZW9mIGN1c3RvbU1lcmdlID09PSAnZnVuY3Rpb24nID8gY3VzdG9tTWVyZ2UgOiBkZWVwbWVyZ2Vcbn1cblxuZnVuY3Rpb24gZ2V0RW51bWVyYWJsZU93blByb3BlcnR5U3ltYm9scyh0YXJnZXQpIHtcblx0cmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHNcblx0XHQ/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHModGFyZ2V0KS5maWx0ZXIoZnVuY3Rpb24oc3ltYm9sKSB7XG5cdFx0XHRyZXR1cm4gdGFyZ2V0LnByb3BlcnR5SXNFbnVtZXJhYmxlKHN5bWJvbClcblx0XHR9KVxuXHRcdDogW11cbn1cblxuZnVuY3Rpb24gZ2V0S2V5cyh0YXJnZXQpIHtcblx0cmV0dXJuIE9iamVjdC5rZXlzKHRhcmdldCkuY29uY2F0KGdldEVudW1lcmFibGVPd25Qcm9wZXJ0eVN5bWJvbHModGFyZ2V0KSlcbn1cblxuZnVuY3Rpb24gcHJvcGVydHlJc09uT2JqZWN0KG9iamVjdCwgcHJvcGVydHkpIHtcblx0dHJ5IHtcblx0XHRyZXR1cm4gcHJvcGVydHkgaW4gb2JqZWN0XG5cdH0gY2F0Y2goXykge1xuXHRcdHJldHVybiBmYWxzZVxuXHR9XG59XG5cbi8vIFByb3RlY3RzIGZyb20gcHJvdG90eXBlIHBvaXNvbmluZyBhbmQgdW5leHBlY3RlZCBtZXJnaW5nIHVwIHRoZSBwcm90b3R5cGUgY2hhaW4uXG5mdW5jdGlvbiBwcm9wZXJ0eUlzVW5zYWZlKHRhcmdldCwga2V5KSB7XG5cdHJldHVybiBwcm9wZXJ0eUlzT25PYmplY3QodGFyZ2V0LCBrZXkpIC8vIFByb3BlcnRpZXMgYXJlIHNhZmUgdG8gbWVyZ2UgaWYgdGhleSBkb24ndCBleGlzdCBpbiB0aGUgdGFyZ2V0IHlldCxcblx0XHQmJiAhKE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKHRhcmdldCwga2V5KSAvLyB1bnNhZmUgaWYgdGhleSBleGlzdCB1cCB0aGUgcHJvdG90eXBlIGNoYWluLFxuXHRcdFx0JiYgT2JqZWN0LnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwodGFyZ2V0LCBrZXkpKSAvLyBhbmQgYWxzbyB1bnNhZmUgaWYgdGhleSdyZSBub25lbnVtZXJhYmxlLlxufVxuXG5mdW5jdGlvbiBtZXJnZU9iamVjdCh0YXJnZXQsIHNvdXJjZSwgb3B0aW9ucykge1xuXHR2YXIgZGVzdGluYXRpb24gPSB7fTtcblx0aWYgKG9wdGlvbnMuaXNNZXJnZWFibGVPYmplY3QodGFyZ2V0KSkge1xuXHRcdGdldEtleXModGFyZ2V0KS5mb3JFYWNoKGZ1bmN0aW9uKGtleSkge1xuXHRcdFx0ZGVzdGluYXRpb25ba2V5XSA9IGNsb25lVW5sZXNzT3RoZXJ3aXNlU3BlY2lmaWVkKHRhcmdldFtrZXldLCBvcHRpb25zKTtcblx0XHR9KTtcblx0fVxuXHRnZXRLZXlzKHNvdXJjZSkuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcblx0XHRpZiAocHJvcGVydHlJc1Vuc2FmZSh0YXJnZXQsIGtleSkpIHtcblx0XHRcdHJldHVyblxuXHRcdH1cblxuXHRcdGlmIChwcm9wZXJ0eUlzT25PYmplY3QodGFyZ2V0LCBrZXkpICYmIG9wdGlvbnMuaXNNZXJnZWFibGVPYmplY3Qoc291cmNlW2tleV0pKSB7XG5cdFx0XHRkZXN0aW5hdGlvbltrZXldID0gZ2V0TWVyZ2VGdW5jdGlvbihrZXksIG9wdGlvbnMpKHRhcmdldFtrZXldLCBzb3VyY2Vba2V5XSwgb3B0aW9ucyk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGRlc3RpbmF0aW9uW2tleV0gPSBjbG9uZVVubGVzc090aGVyd2lzZVNwZWNpZmllZChzb3VyY2Vba2V5XSwgb3B0aW9ucyk7XG5cdFx0fVxuXHR9KTtcblx0cmV0dXJuIGRlc3RpbmF0aW9uXG59XG5cbmZ1bmN0aW9uIGRlZXBtZXJnZSh0YXJnZXQsIHNvdXJjZSwgb3B0aW9ucykge1xuXHRvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblx0b3B0aW9ucy5hcnJheU1lcmdlID0gb3B0aW9ucy5hcnJheU1lcmdlIHx8IGRlZmF1bHRBcnJheU1lcmdlO1xuXHRvcHRpb25zLmlzTWVyZ2VhYmxlT2JqZWN0ID0gb3B0aW9ucy5pc01lcmdlYWJsZU9iamVjdCB8fCBpc01lcmdlYWJsZU9iamVjdDtcblx0Ly8gY2xvbmVVbmxlc3NPdGhlcndpc2VTcGVjaWZpZWQgaXMgYWRkZWQgdG8gYG9wdGlvbnNgIHNvIHRoYXQgY3VzdG9tIGFycmF5TWVyZ2UoKVxuXHQvLyBpbXBsZW1lbnRhdGlvbnMgY2FuIHVzZSBpdC4gVGhlIGNhbGxlciBtYXkgbm90IHJlcGxhY2UgaXQuXG5cdG9wdGlvbnMuY2xvbmVVbmxlc3NPdGhlcndpc2VTcGVjaWZpZWQgPSBjbG9uZVVubGVzc090aGVyd2lzZVNwZWNpZmllZDtcblxuXHR2YXIgc291cmNlSXNBcnJheSA9IEFycmF5LmlzQXJyYXkoc291cmNlKTtcblx0dmFyIHRhcmdldElzQXJyYXkgPSBBcnJheS5pc0FycmF5KHRhcmdldCk7XG5cdHZhciBzb3VyY2VBbmRUYXJnZXRUeXBlc01hdGNoID0gc291cmNlSXNBcnJheSA9PT0gdGFyZ2V0SXNBcnJheTtcblxuXHRpZiAoIXNvdXJjZUFuZFRhcmdldFR5cGVzTWF0Y2gpIHtcblx0XHRyZXR1cm4gY2xvbmVVbmxlc3NPdGhlcndpc2VTcGVjaWZpZWQoc291cmNlLCBvcHRpb25zKVxuXHR9IGVsc2UgaWYgKHNvdXJjZUlzQXJyYXkpIHtcblx0XHRyZXR1cm4gb3B0aW9ucy5hcnJheU1lcmdlKHRhcmdldCwgc291cmNlLCBvcHRpb25zKVxuXHR9IGVsc2Uge1xuXHRcdHJldHVybiBtZXJnZU9iamVjdCh0YXJnZXQsIHNvdXJjZSwgb3B0aW9ucylcblx0fVxufVxuXG5kZWVwbWVyZ2UuYWxsID0gZnVuY3Rpb24gZGVlcG1lcmdlQWxsKGFycmF5LCBvcHRpb25zKSB7XG5cdGlmICghQXJyYXkuaXNBcnJheShhcnJheSkpIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoJ2ZpcnN0IGFyZ3VtZW50IHNob3VsZCBiZSBhbiBhcnJheScpXG5cdH1cblxuXHRyZXR1cm4gYXJyYXkucmVkdWNlKGZ1bmN0aW9uKHByZXYsIG5leHQpIHtcblx0XHRyZXR1cm4gZGVlcG1lcmdlKHByZXYsIG5leHQsIG9wdGlvbnMpXG5cdH0sIHt9KVxufTtcblxudmFyIGRlZXBtZXJnZV8xID0gZGVlcG1lcmdlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGRlZXBtZXJnZV8xO1xuIiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFIgPSB0eXBlb2YgUmVmbGVjdCA9PT0gJ29iamVjdCcgPyBSZWZsZWN0IDogbnVsbFxudmFyIFJlZmxlY3RBcHBseSA9IFIgJiYgdHlwZW9mIFIuYXBwbHkgPT09ICdmdW5jdGlvbidcbiAgPyBSLmFwcGx5XG4gIDogZnVuY3Rpb24gUmVmbGVjdEFwcGx5KHRhcmdldCwgcmVjZWl2ZXIsIGFyZ3MpIHtcbiAgICByZXR1cm4gRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5LmNhbGwodGFyZ2V0LCByZWNlaXZlciwgYXJncyk7XG4gIH1cblxudmFyIFJlZmxlY3RPd25LZXlzXG5pZiAoUiAmJiB0eXBlb2YgUi5vd25LZXlzID09PSAnZnVuY3Rpb24nKSB7XG4gIFJlZmxlY3RPd25LZXlzID0gUi5vd25LZXlzXG59IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgUmVmbGVjdE93bktleXMgPSBmdW5jdGlvbiBSZWZsZWN0T3duS2V5cyh0YXJnZXQpIHtcbiAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGFyZ2V0KVxuICAgICAgLmNvbmNhdChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHRhcmdldCkpO1xuICB9O1xufSBlbHNlIHtcbiAgUmVmbGVjdE93bktleXMgPSBmdW5jdGlvbiBSZWZsZWN0T3duS2V5cyh0YXJnZXQpIHtcbiAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGFyZ2V0KTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gUHJvY2Vzc0VtaXRXYXJuaW5nKHdhcm5pbmcpIHtcbiAgaWYgKGNvbnNvbGUgJiYgY29uc29sZS53YXJuKSBjb25zb2xlLndhcm4od2FybmluZyk7XG59XG5cbnZhciBOdW1iZXJJc05hTiA9IE51bWJlci5pc05hTiB8fCBmdW5jdGlvbiBOdW1iZXJJc05hTih2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT09IHZhbHVlO1xufVxuXG5mdW5jdGlvbiBFdmVudEVtaXR0ZXIoKSB7XG4gIEV2ZW50RW1pdHRlci5pbml0LmNhbGwodGhpcyk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IEV2ZW50RW1pdHRlcjtcbm1vZHVsZS5leHBvcnRzLm9uY2UgPSBvbmNlO1xuXG4vLyBCYWNrd2FyZHMtY29tcGF0IHdpdGggbm9kZSAwLjEwLnhcbkV2ZW50RW1pdHRlci5FdmVudEVtaXR0ZXIgPSBFdmVudEVtaXR0ZXI7XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuX2V2ZW50cyA9IHVuZGVmaW5lZDtcbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuX2V2ZW50c0NvdW50ID0gMDtcbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuX21heExpc3RlbmVycyA9IHVuZGVmaW5lZDtcblxuLy8gQnkgZGVmYXVsdCBFdmVudEVtaXR0ZXJzIHdpbGwgcHJpbnQgYSB3YXJuaW5nIGlmIG1vcmUgdGhhbiAxMCBsaXN0ZW5lcnMgYXJlXG4vLyBhZGRlZCB0byBpdC4gVGhpcyBpcyBhIHVzZWZ1bCBkZWZhdWx0IHdoaWNoIGhlbHBzIGZpbmRpbmcgbWVtb3J5IGxlYWtzLlxudmFyIGRlZmF1bHRNYXhMaXN0ZW5lcnMgPSAxMDtcblxuZnVuY3Rpb24gY2hlY2tMaXN0ZW5lcihsaXN0ZW5lcikge1xuICBpZiAodHlwZW9mIGxpc3RlbmVyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIFwibGlzdGVuZXJcIiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgRnVuY3Rpb24uIFJlY2VpdmVkIHR5cGUgJyArIHR5cGVvZiBsaXN0ZW5lcik7XG4gIH1cbn1cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KEV2ZW50RW1pdHRlciwgJ2RlZmF1bHRNYXhMaXN0ZW5lcnMnLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGRlZmF1bHRNYXhMaXN0ZW5lcnM7XG4gIH0sXG4gIHNldDogZnVuY3Rpb24oYXJnKSB7XG4gICAgaWYgKHR5cGVvZiBhcmcgIT09ICdudW1iZXInIHx8IGFyZyA8IDAgfHwgTnVtYmVySXNOYU4oYXJnKSkge1xuICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RoZSB2YWx1ZSBvZiBcImRlZmF1bHRNYXhMaXN0ZW5lcnNcIiBpcyBvdXQgb2YgcmFuZ2UuIEl0IG11c3QgYmUgYSBub24tbmVnYXRpdmUgbnVtYmVyLiBSZWNlaXZlZCAnICsgYXJnICsgJy4nKTtcbiAgICB9XG4gICAgZGVmYXVsdE1heExpc3RlbmVycyA9IGFyZztcbiAgfVxufSk7XG5cbkV2ZW50RW1pdHRlci5pbml0ID0gZnVuY3Rpb24oKSB7XG5cbiAgaWYgKHRoaXMuX2V2ZW50cyA9PT0gdW5kZWZpbmVkIHx8XG4gICAgICB0aGlzLl9ldmVudHMgPT09IE9iamVjdC5nZXRQcm90b3R5cGVPZih0aGlzKS5fZXZlbnRzKSB7XG4gICAgdGhpcy5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB0aGlzLl9ldmVudHNDb3VudCA9IDA7XG4gIH1cblxuICB0aGlzLl9tYXhMaXN0ZW5lcnMgPSB0aGlzLl9tYXhMaXN0ZW5lcnMgfHwgdW5kZWZpbmVkO1xufTtcblxuLy8gT2J2aW91c2x5IG5vdCBhbGwgRW1pdHRlcnMgc2hvdWxkIGJlIGxpbWl0ZWQgdG8gMTAuIFRoaXMgZnVuY3Rpb24gYWxsb3dzXG4vLyB0aGF0IHRvIGJlIGluY3JlYXNlZC4gU2V0IHRvIHplcm8gZm9yIHVubGltaXRlZC5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuc2V0TWF4TGlzdGVuZXJzID0gZnVuY3Rpb24gc2V0TWF4TGlzdGVuZXJzKG4pIHtcbiAgaWYgKHR5cGVvZiBuICE9PSAnbnVtYmVyJyB8fCBuIDwgMCB8fCBOdW1iZXJJc05hTihuKSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdUaGUgdmFsdWUgb2YgXCJuXCIgaXMgb3V0IG9mIHJhbmdlLiBJdCBtdXN0IGJlIGEgbm9uLW5lZ2F0aXZlIG51bWJlci4gUmVjZWl2ZWQgJyArIG4gKyAnLicpO1xuICB9XG4gIHRoaXMuX21heExpc3RlbmVycyA9IG47XG4gIHJldHVybiB0aGlzO1xufTtcblxuZnVuY3Rpb24gX2dldE1heExpc3RlbmVycyh0aGF0KSB7XG4gIGlmICh0aGF0Ll9tYXhMaXN0ZW5lcnMgPT09IHVuZGVmaW5lZClcbiAgICByZXR1cm4gRXZlbnRFbWl0dGVyLmRlZmF1bHRNYXhMaXN0ZW5lcnM7XG4gIHJldHVybiB0aGF0Ll9tYXhMaXN0ZW5lcnM7XG59XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuZ2V0TWF4TGlzdGVuZXJzID0gZnVuY3Rpb24gZ2V0TWF4TGlzdGVuZXJzKCkge1xuICByZXR1cm4gX2dldE1heExpc3RlbmVycyh0aGlzKTtcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuZW1pdCA9IGZ1bmN0aW9uIGVtaXQodHlwZSkge1xuICB2YXIgYXJncyA9IFtdO1xuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgYXJncy5wdXNoKGFyZ3VtZW50c1tpXSk7XG4gIHZhciBkb0Vycm9yID0gKHR5cGUgPT09ICdlcnJvcicpO1xuXG4gIHZhciBldmVudHMgPSB0aGlzLl9ldmVudHM7XG4gIGlmIChldmVudHMgIT09IHVuZGVmaW5lZClcbiAgICBkb0Vycm9yID0gKGRvRXJyb3IgJiYgZXZlbnRzLmVycm9yID09PSB1bmRlZmluZWQpO1xuICBlbHNlIGlmICghZG9FcnJvcilcbiAgICByZXR1cm4gZmFsc2U7XG5cbiAgLy8gSWYgdGhlcmUgaXMgbm8gJ2Vycm9yJyBldmVudCBsaXN0ZW5lciB0aGVuIHRocm93LlxuICBpZiAoZG9FcnJvcikge1xuICAgIHZhciBlcjtcbiAgICBpZiAoYXJncy5sZW5ndGggPiAwKVxuICAgICAgZXIgPSBhcmdzWzBdO1xuICAgIGlmIChlciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAvLyBOb3RlOiBUaGUgY29tbWVudHMgb24gdGhlIGB0aHJvd2AgbGluZXMgYXJlIGludGVudGlvbmFsLCB0aGV5IHNob3dcbiAgICAgIC8vIHVwIGluIE5vZGUncyBvdXRwdXQgaWYgdGhpcyByZXN1bHRzIGluIGFuIHVuaGFuZGxlZCBleGNlcHRpb24uXG4gICAgICB0aHJvdyBlcjsgLy8gVW5oYW5kbGVkICdlcnJvcicgZXZlbnRcbiAgICB9XG4gICAgLy8gQXQgbGVhc3QgZ2l2ZSBzb21lIGtpbmQgb2YgY29udGV4dCB0byB0aGUgdXNlclxuICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoJ1VuaGFuZGxlZCBlcnJvci4nICsgKGVyID8gJyAoJyArIGVyLm1lc3NhZ2UgKyAnKScgOiAnJykpO1xuICAgIGVyci5jb250ZXh0ID0gZXI7XG4gICAgdGhyb3cgZXJyOyAvLyBVbmhhbmRsZWQgJ2Vycm9yJyBldmVudFxuICB9XG5cbiAgdmFyIGhhbmRsZXIgPSBldmVudHNbdHlwZV07XG5cbiAgaWYgKGhhbmRsZXIgPT09IHVuZGVmaW5lZClcbiAgICByZXR1cm4gZmFsc2U7XG5cbiAgaWYgKHR5cGVvZiBoYW5kbGVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgUmVmbGVjdEFwcGx5KGhhbmRsZXIsIHRoaXMsIGFyZ3MpO1xuICB9IGVsc2Uge1xuICAgIHZhciBsZW4gPSBoYW5kbGVyLmxlbmd0aDtcbiAgICB2YXIgbGlzdGVuZXJzID0gYXJyYXlDbG9uZShoYW5kbGVyLCBsZW4pO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyArK2kpXG4gICAgICBSZWZsZWN0QXBwbHkobGlzdGVuZXJzW2ldLCB0aGlzLCBhcmdzKTtcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufTtcblxuZnVuY3Rpb24gX2FkZExpc3RlbmVyKHRhcmdldCwgdHlwZSwgbGlzdGVuZXIsIHByZXBlbmQpIHtcbiAgdmFyIG07XG4gIHZhciBldmVudHM7XG4gIHZhciBleGlzdGluZztcblxuICBjaGVja0xpc3RlbmVyKGxpc3RlbmVyKTtcblxuICBldmVudHMgPSB0YXJnZXQuX2V2ZW50cztcbiAgaWYgKGV2ZW50cyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgZXZlbnRzID0gdGFyZ2V0Ll9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHRhcmdldC5fZXZlbnRzQ291bnQgPSAwO1xuICB9IGVsc2Uge1xuICAgIC8vIFRvIGF2b2lkIHJlY3Vyc2lvbiBpbiB0aGUgY2FzZSB0aGF0IHR5cGUgPT09IFwibmV3TGlzdGVuZXJcIiEgQmVmb3JlXG4gICAgLy8gYWRkaW5nIGl0IHRvIHRoZSBsaXN0ZW5lcnMsIGZpcnN0IGVtaXQgXCJuZXdMaXN0ZW5lclwiLlxuICAgIGlmIChldmVudHMubmV3TGlzdGVuZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdGFyZ2V0LmVtaXQoJ25ld0xpc3RlbmVyJywgdHlwZSxcbiAgICAgICAgICAgICAgICAgIGxpc3RlbmVyLmxpc3RlbmVyID8gbGlzdGVuZXIubGlzdGVuZXIgOiBsaXN0ZW5lcik7XG5cbiAgICAgIC8vIFJlLWFzc2lnbiBgZXZlbnRzYCBiZWNhdXNlIGEgbmV3TGlzdGVuZXIgaGFuZGxlciBjb3VsZCBoYXZlIGNhdXNlZCB0aGVcbiAgICAgIC8vIHRoaXMuX2V2ZW50cyB0byBiZSBhc3NpZ25lZCB0byBhIG5ldyBvYmplY3RcbiAgICAgIGV2ZW50cyA9IHRhcmdldC5fZXZlbnRzO1xuICAgIH1cbiAgICBleGlzdGluZyA9IGV2ZW50c1t0eXBlXTtcbiAgfVxuXG4gIGlmIChleGlzdGluZyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgLy8gT3B0aW1pemUgdGhlIGNhc2Ugb2Ygb25lIGxpc3RlbmVyLiBEb24ndCBuZWVkIHRoZSBleHRyYSBhcnJheSBvYmplY3QuXG4gICAgZXhpc3RpbmcgPSBldmVudHNbdHlwZV0gPSBsaXN0ZW5lcjtcbiAgICArK3RhcmdldC5fZXZlbnRzQ291bnQ7XG4gIH0gZWxzZSB7XG4gICAgaWYgKHR5cGVvZiBleGlzdGluZyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgLy8gQWRkaW5nIHRoZSBzZWNvbmQgZWxlbWVudCwgbmVlZCB0byBjaGFuZ2UgdG8gYXJyYXkuXG4gICAgICBleGlzdGluZyA9IGV2ZW50c1t0eXBlXSA9XG4gICAgICAgIHByZXBlbmQgPyBbbGlzdGVuZXIsIGV4aXN0aW5nXSA6IFtleGlzdGluZywgbGlzdGVuZXJdO1xuICAgICAgLy8gSWYgd2UndmUgYWxyZWFkeSBnb3QgYW4gYXJyYXksIGp1c3QgYXBwZW5kLlxuICAgIH0gZWxzZSBpZiAocHJlcGVuZCkge1xuICAgICAgZXhpc3RpbmcudW5zaGlmdChsaXN0ZW5lcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGV4aXN0aW5nLnB1c2gobGlzdGVuZXIpO1xuICAgIH1cblxuICAgIC8vIENoZWNrIGZvciBsaXN0ZW5lciBsZWFrXG4gICAgbSA9IF9nZXRNYXhMaXN0ZW5lcnModGFyZ2V0KTtcbiAgICBpZiAobSA+IDAgJiYgZXhpc3RpbmcubGVuZ3RoID4gbSAmJiAhZXhpc3Rpbmcud2FybmVkKSB7XG4gICAgICBleGlzdGluZy53YXJuZWQgPSB0cnVlO1xuICAgICAgLy8gTm8gZXJyb3IgY29kZSBmb3IgdGhpcyBzaW5jZSBpdCBpcyBhIFdhcm5pbmdcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLXN5bnRheFxuICAgICAgdmFyIHcgPSBuZXcgRXJyb3IoJ1Bvc3NpYmxlIEV2ZW50RW1pdHRlciBtZW1vcnkgbGVhayBkZXRlY3RlZC4gJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGV4aXN0aW5nLmxlbmd0aCArICcgJyArIFN0cmluZyh0eXBlKSArICcgbGlzdGVuZXJzICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAnYWRkZWQuIFVzZSBlbWl0dGVyLnNldE1heExpc3RlbmVycygpIHRvICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAnaW5jcmVhc2UgbGltaXQnKTtcbiAgICAgIHcubmFtZSA9ICdNYXhMaXN0ZW5lcnNFeGNlZWRlZFdhcm5pbmcnO1xuICAgICAgdy5lbWl0dGVyID0gdGFyZ2V0O1xuICAgICAgdy50eXBlID0gdHlwZTtcbiAgICAgIHcuY291bnQgPSBleGlzdGluZy5sZW5ndGg7XG4gICAgICBQcm9jZXNzRW1pdFdhcm5pbmcodyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5hZGRMaXN0ZW5lciA9IGZ1bmN0aW9uIGFkZExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyKSB7XG4gIHJldHVybiBfYWRkTGlzdGVuZXIodGhpcywgdHlwZSwgbGlzdGVuZXIsIGZhbHNlKTtcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUub24gPSBFdmVudEVtaXR0ZXIucHJvdG90eXBlLmFkZExpc3RlbmVyO1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnByZXBlbmRMaXN0ZW5lciA9XG4gICAgZnVuY3Rpb24gcHJlcGVuZExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyKSB7XG4gICAgICByZXR1cm4gX2FkZExpc3RlbmVyKHRoaXMsIHR5cGUsIGxpc3RlbmVyLCB0cnVlKTtcbiAgICB9O1xuXG5mdW5jdGlvbiBvbmNlV3JhcHBlcigpIHtcbiAgaWYgKCF0aGlzLmZpcmVkKSB7XG4gICAgdGhpcy50YXJnZXQucmVtb3ZlTGlzdGVuZXIodGhpcy50eXBlLCB0aGlzLndyYXBGbik7XG4gICAgdGhpcy5maXJlZCA9IHRydWU7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApXG4gICAgICByZXR1cm4gdGhpcy5saXN0ZW5lci5jYWxsKHRoaXMudGFyZ2V0KTtcbiAgICByZXR1cm4gdGhpcy5saXN0ZW5lci5hcHBseSh0aGlzLnRhcmdldCwgYXJndW1lbnRzKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfb25jZVdyYXAodGFyZ2V0LCB0eXBlLCBsaXN0ZW5lcikge1xuICB2YXIgc3RhdGUgPSB7IGZpcmVkOiBmYWxzZSwgd3JhcEZuOiB1bmRlZmluZWQsIHRhcmdldDogdGFyZ2V0LCB0eXBlOiB0eXBlLCBsaXN0ZW5lcjogbGlzdGVuZXIgfTtcbiAgdmFyIHdyYXBwZWQgPSBvbmNlV3JhcHBlci5iaW5kKHN0YXRlKTtcbiAgd3JhcHBlZC5saXN0ZW5lciA9IGxpc3RlbmVyO1xuICBzdGF0ZS53cmFwRm4gPSB3cmFwcGVkO1xuICByZXR1cm4gd3JhcHBlZDtcbn1cblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbmNlID0gZnVuY3Rpb24gb25jZSh0eXBlLCBsaXN0ZW5lcikge1xuICBjaGVja0xpc3RlbmVyKGxpc3RlbmVyKTtcbiAgdGhpcy5vbih0eXBlLCBfb25jZVdyYXAodGhpcywgdHlwZSwgbGlzdGVuZXIpKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnByZXBlbmRPbmNlTGlzdGVuZXIgPVxuICAgIGZ1bmN0aW9uIHByZXBlbmRPbmNlTGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHtcbiAgICAgIGNoZWNrTGlzdGVuZXIobGlzdGVuZXIpO1xuICAgICAgdGhpcy5wcmVwZW5kTGlzdGVuZXIodHlwZSwgX29uY2VXcmFwKHRoaXMsIHR5cGUsIGxpc3RlbmVyKSk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4vLyBFbWl0cyBhICdyZW1vdmVMaXN0ZW5lcicgZXZlbnQgaWYgYW5kIG9ubHkgaWYgdGhlIGxpc3RlbmVyIHdhcyByZW1vdmVkLlxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lciA9XG4gICAgZnVuY3Rpb24gcmVtb3ZlTGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHtcbiAgICAgIHZhciBsaXN0LCBldmVudHMsIHBvc2l0aW9uLCBpLCBvcmlnaW5hbExpc3RlbmVyO1xuXG4gICAgICBjaGVja0xpc3RlbmVyKGxpc3RlbmVyKTtcblxuICAgICAgZXZlbnRzID0gdGhpcy5fZXZlbnRzO1xuICAgICAgaWYgKGV2ZW50cyA9PT0gdW5kZWZpbmVkKVxuICAgICAgICByZXR1cm4gdGhpcztcblxuICAgICAgbGlzdCA9IGV2ZW50c1t0eXBlXTtcbiAgICAgIGlmIChsaXN0ID09PSB1bmRlZmluZWQpXG4gICAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgICBpZiAobGlzdCA9PT0gbGlzdGVuZXIgfHwgbGlzdC5saXN0ZW5lciA9PT0gbGlzdGVuZXIpIHtcbiAgICAgICAgaWYgKC0tdGhpcy5fZXZlbnRzQ291bnQgPT09IDApXG4gICAgICAgICAgdGhpcy5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgZGVsZXRlIGV2ZW50c1t0eXBlXTtcbiAgICAgICAgICBpZiAoZXZlbnRzLnJlbW92ZUxpc3RlbmVyKVxuICAgICAgICAgICAgdGhpcy5lbWl0KCdyZW1vdmVMaXN0ZW5lcicsIHR5cGUsIGxpc3QubGlzdGVuZXIgfHwgbGlzdGVuZXIpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBsaXN0ICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHBvc2l0aW9uID0gLTE7XG5cbiAgICAgICAgZm9yIChpID0gbGlzdC5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgIGlmIChsaXN0W2ldID09PSBsaXN0ZW5lciB8fCBsaXN0W2ldLmxpc3RlbmVyID09PSBsaXN0ZW5lcikge1xuICAgICAgICAgICAgb3JpZ2luYWxMaXN0ZW5lciA9IGxpc3RbaV0ubGlzdGVuZXI7XG4gICAgICAgICAgICBwb3NpdGlvbiA9IGk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocG9zaXRpb24gPCAwKVxuICAgICAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgICAgIGlmIChwb3NpdGlvbiA9PT0gMClcbiAgICAgICAgICBsaXN0LnNoaWZ0KCk7XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIHNwbGljZU9uZShsaXN0LCBwb3NpdGlvbik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobGlzdC5sZW5ndGggPT09IDEpXG4gICAgICAgICAgZXZlbnRzW3R5cGVdID0gbGlzdFswXTtcblxuICAgICAgICBpZiAoZXZlbnRzLnJlbW92ZUxpc3RlbmVyICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgdGhpcy5lbWl0KCdyZW1vdmVMaXN0ZW5lcicsIHR5cGUsIG9yaWdpbmFsTGlzdGVuZXIgfHwgbGlzdGVuZXIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9mZiA9IEV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXI7XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlQWxsTGlzdGVuZXJzID1cbiAgICBmdW5jdGlvbiByZW1vdmVBbGxMaXN0ZW5lcnModHlwZSkge1xuICAgICAgdmFyIGxpc3RlbmVycywgZXZlbnRzLCBpO1xuXG4gICAgICBldmVudHMgPSB0aGlzLl9ldmVudHM7XG4gICAgICBpZiAoZXZlbnRzID09PSB1bmRlZmluZWQpXG4gICAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgICAvLyBub3QgbGlzdGVuaW5nIGZvciByZW1vdmVMaXN0ZW5lciwgbm8gbmVlZCB0byBlbWl0XG4gICAgICBpZiAoZXZlbnRzLnJlbW92ZUxpc3RlbmVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICB0aGlzLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICAgIHRoaXMuX2V2ZW50c0NvdW50ID0gMDtcbiAgICAgICAgfSBlbHNlIGlmIChldmVudHNbdHlwZV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGlmICgtLXRoaXMuX2V2ZW50c0NvdW50ID09PSAwKVxuICAgICAgICAgICAgdGhpcy5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgICBlbHNlXG4gICAgICAgICAgICBkZWxldGUgZXZlbnRzW3R5cGVdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICAvLyBlbWl0IHJlbW92ZUxpc3RlbmVyIGZvciBhbGwgbGlzdGVuZXJzIG9uIGFsbCBldmVudHNcbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMoZXZlbnRzKTtcbiAgICAgICAgdmFyIGtleTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGtleXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICBrZXkgPSBrZXlzW2ldO1xuICAgICAgICAgIGlmIChrZXkgPT09ICdyZW1vdmVMaXN0ZW5lcicpIGNvbnRpbnVlO1xuICAgICAgICAgIHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKGtleSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoJ3JlbW92ZUxpc3RlbmVyJyk7XG4gICAgICAgIHRoaXMuX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgIHRoaXMuX2V2ZW50c0NvdW50ID0gMDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIGxpc3RlbmVycyA9IGV2ZW50c1t0eXBlXTtcblxuICAgICAgaWYgKHR5cGVvZiBsaXN0ZW5lcnMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcnMpO1xuICAgICAgfSBlbHNlIGlmIChsaXN0ZW5lcnMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAvLyBMSUZPIG9yZGVyXG4gICAgICAgIGZvciAoaSA9IGxpc3RlbmVycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgIHRoaXMucmVtb3ZlTGlzdGVuZXIodHlwZSwgbGlzdGVuZXJzW2ldKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG5mdW5jdGlvbiBfbGlzdGVuZXJzKHRhcmdldCwgdHlwZSwgdW53cmFwKSB7XG4gIHZhciBldmVudHMgPSB0YXJnZXQuX2V2ZW50cztcblxuICBpZiAoZXZlbnRzID09PSB1bmRlZmluZWQpXG4gICAgcmV0dXJuIFtdO1xuXG4gIHZhciBldmxpc3RlbmVyID0gZXZlbnRzW3R5cGVdO1xuICBpZiAoZXZsaXN0ZW5lciA9PT0gdW5kZWZpbmVkKVxuICAgIHJldHVybiBbXTtcblxuICBpZiAodHlwZW9mIGV2bGlzdGVuZXIgPT09ICdmdW5jdGlvbicpXG4gICAgcmV0dXJuIHVud3JhcCA/IFtldmxpc3RlbmVyLmxpc3RlbmVyIHx8IGV2bGlzdGVuZXJdIDogW2V2bGlzdGVuZXJdO1xuXG4gIHJldHVybiB1bndyYXAgP1xuICAgIHVud3JhcExpc3RlbmVycyhldmxpc3RlbmVyKSA6IGFycmF5Q2xvbmUoZXZsaXN0ZW5lciwgZXZsaXN0ZW5lci5sZW5ndGgpO1xufVxuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmxpc3RlbmVycyA9IGZ1bmN0aW9uIGxpc3RlbmVycyh0eXBlKSB7XG4gIHJldHVybiBfbGlzdGVuZXJzKHRoaXMsIHR5cGUsIHRydWUpO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yYXdMaXN0ZW5lcnMgPSBmdW5jdGlvbiByYXdMaXN0ZW5lcnModHlwZSkge1xuICByZXR1cm4gX2xpc3RlbmVycyh0aGlzLCB0eXBlLCBmYWxzZSk7XG59O1xuXG5FdmVudEVtaXR0ZXIubGlzdGVuZXJDb3VudCA9IGZ1bmN0aW9uKGVtaXR0ZXIsIHR5cGUpIHtcbiAgaWYgKHR5cGVvZiBlbWl0dGVyLmxpc3RlbmVyQ291bnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gZW1pdHRlci5saXN0ZW5lckNvdW50KHR5cGUpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBsaXN0ZW5lckNvdW50LmNhbGwoZW1pdHRlciwgdHlwZSk7XG4gIH1cbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUubGlzdGVuZXJDb3VudCA9IGxpc3RlbmVyQ291bnQ7XG5mdW5jdGlvbiBsaXN0ZW5lckNvdW50KHR5cGUpIHtcbiAgdmFyIGV2ZW50cyA9IHRoaXMuX2V2ZW50cztcblxuICBpZiAoZXZlbnRzICE9PSB1bmRlZmluZWQpIHtcbiAgICB2YXIgZXZsaXN0ZW5lciA9IGV2ZW50c1t0eXBlXTtcblxuICAgIGlmICh0eXBlb2YgZXZsaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmV0dXJuIDE7XG4gICAgfSBlbHNlIGlmIChldmxpc3RlbmVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBldmxpc3RlbmVyLmxlbmd0aDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gMDtcbn1cblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5ldmVudE5hbWVzID0gZnVuY3Rpb24gZXZlbnROYW1lcygpIHtcbiAgcmV0dXJuIHRoaXMuX2V2ZW50c0NvdW50ID4gMCA/IFJlZmxlY3RPd25LZXlzKHRoaXMuX2V2ZW50cykgOiBbXTtcbn07XG5cbmZ1bmN0aW9uIGFycmF5Q2xvbmUoYXJyLCBuKSB7XG4gIHZhciBjb3B5ID0gbmV3IEFycmF5KG4pO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IG47ICsraSlcbiAgICBjb3B5W2ldID0gYXJyW2ldO1xuICByZXR1cm4gY29weTtcbn1cblxuZnVuY3Rpb24gc3BsaWNlT25lKGxpc3QsIGluZGV4KSB7XG4gIGZvciAoOyBpbmRleCArIDEgPCBsaXN0Lmxlbmd0aDsgaW5kZXgrKylcbiAgICBsaXN0W2luZGV4XSA9IGxpc3RbaW5kZXggKyAxXTtcbiAgbGlzdC5wb3AoKTtcbn1cblxuZnVuY3Rpb24gdW53cmFwTGlzdGVuZXJzKGFycikge1xuICB2YXIgcmV0ID0gbmV3IEFycmF5KGFyci5sZW5ndGgpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHJldC5sZW5ndGg7ICsraSkge1xuICAgIHJldFtpXSA9IGFycltpXS5saXN0ZW5lciB8fCBhcnJbaV07XG4gIH1cbiAgcmV0dXJuIHJldDtcbn1cblxuZnVuY3Rpb24gb25jZShlbWl0dGVyLCBuYW1lKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgZnVuY3Rpb24gZXJyb3JMaXN0ZW5lcihlcnIpIHtcbiAgICAgIGVtaXR0ZXIucmVtb3ZlTGlzdGVuZXIobmFtZSwgcmVzb2x2ZXIpO1xuICAgICAgcmVqZWN0KGVycik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVzb2x2ZXIoKSB7XG4gICAgICBpZiAodHlwZW9mIGVtaXR0ZXIucmVtb3ZlTGlzdGVuZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgZW1pdHRlci5yZW1vdmVMaXN0ZW5lcignZXJyb3InLCBlcnJvckxpc3RlbmVyKTtcbiAgICAgIH1cbiAgICAgIHJlc29sdmUoW10uc2xpY2UuY2FsbChhcmd1bWVudHMpKTtcbiAgICB9O1xuXG4gICAgZXZlbnRUYXJnZXRBZ25vc3RpY0FkZExpc3RlbmVyKGVtaXR0ZXIsIG5hbWUsIHJlc29sdmVyLCB7IG9uY2U6IHRydWUgfSk7XG4gICAgaWYgKG5hbWUgIT09ICdlcnJvcicpIHtcbiAgICAgIGFkZEVycm9ySGFuZGxlcklmRXZlbnRFbWl0dGVyKGVtaXR0ZXIsIGVycm9yTGlzdGVuZXIsIHsgb25jZTogdHJ1ZSB9KTtcbiAgICB9XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBhZGRFcnJvckhhbmRsZXJJZkV2ZW50RW1pdHRlcihlbWl0dGVyLCBoYW5kbGVyLCBmbGFncykge1xuICBpZiAodHlwZW9mIGVtaXR0ZXIub24gPT09ICdmdW5jdGlvbicpIHtcbiAgICBldmVudFRhcmdldEFnbm9zdGljQWRkTGlzdGVuZXIoZW1pdHRlciwgJ2Vycm9yJywgaGFuZGxlciwgZmxhZ3MpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGV2ZW50VGFyZ2V0QWdub3N0aWNBZGRMaXN0ZW5lcihlbWl0dGVyLCBuYW1lLCBsaXN0ZW5lciwgZmxhZ3MpIHtcbiAgaWYgKHR5cGVvZiBlbWl0dGVyLm9uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgaWYgKGZsYWdzLm9uY2UpIHtcbiAgICAgIGVtaXR0ZXIub25jZShuYW1lLCBsaXN0ZW5lcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVtaXR0ZXIub24obmFtZSwgbGlzdGVuZXIpO1xuICAgIH1cbiAgfSBlbHNlIGlmICh0eXBlb2YgZW1pdHRlci5hZGRFdmVudExpc3RlbmVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgLy8gRXZlbnRUYXJnZXQgZG9lcyBub3QgaGF2ZSBgZXJyb3JgIGV2ZW50IHNlbWFudGljcyBsaWtlIE5vZGVcbiAgICAvLyBFdmVudEVtaXR0ZXJzLCB3ZSBkbyBub3QgbGlzdGVuIGZvciBgZXJyb3JgIGV2ZW50cyBoZXJlLlxuICAgIGVtaXR0ZXIuYWRkRXZlbnRMaXN0ZW5lcihuYW1lLCBmdW5jdGlvbiB3cmFwTGlzdGVuZXIoYXJnKSB7XG4gICAgICAvLyBJRSBkb2VzIG5vdCBoYXZlIGJ1aWx0aW4gYHsgb25jZTogdHJ1ZSB9YCBzdXBwb3J0IHNvIHdlXG4gICAgICAvLyBoYXZlIHRvIGRvIGl0IG1hbnVhbGx5LlxuICAgICAgaWYgKGZsYWdzLm9uY2UpIHtcbiAgICAgICAgZW1pdHRlci5yZW1vdmVFdmVudExpc3RlbmVyKG5hbWUsIHdyYXBMaXN0ZW5lcik7XG4gICAgICB9XG4gICAgICBsaXN0ZW5lcihhcmcpO1xuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBcImVtaXR0ZXJcIiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgRXZlbnRFbWl0dGVyLiBSZWNlaXZlZCB0eXBlICcgKyB0eXBlb2YgZW1pdHRlcik7XG4gIH1cbn1cbiIsIi8qIVxuICogQ1NTUGx1Z2luIDMuMTEuMFxuICogaHR0cHM6Ly9ncmVlbnNvY2suY29tXG4gKlxuICogQ29weXJpZ2h0IDIwMDgtMjAyMiwgR3JlZW5Tb2NrLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogU3ViamVjdCB0byB0aGUgdGVybXMgYXQgaHR0cHM6Ly9ncmVlbnNvY2suY29tL3N0YW5kYXJkLWxpY2Vuc2Ugb3IgZm9yXG4gKiBDbHViIEdyZWVuU29jayBtZW1iZXJzLCB0aGUgYWdyZWVtZW50IGlzc3VlZCB3aXRoIHRoYXQgbWVtYmVyc2hpcC5cbiAqIEBhdXRob3I6IEphY2sgRG95bGUsIGphY2tAZ3JlZW5zb2NrLmNvbVxuKi9cblxuLyogZXNsaW50LWRpc2FibGUgKi9cbmltcG9ydCB7IGdzYXAsIF9nZXRQcm9wZXJ0eSwgX251bUV4cCwgX251bVdpdGhVbml0RXhwLCBnZXRVbml0LCBfaXNTdHJpbmcsIF9pc1VuZGVmaW5lZCwgX3JlbmRlckNvbXBsZXhTdHJpbmcsIF9yZWxFeHAsIF9mb3JFYWNoTmFtZSwgX3NvcnRQcm9wVHdlZW5zQnlQcmlvcml0eSwgX2NvbG9yU3RyaW5nRmlsdGVyLCBfY2hlY2tQbHVnaW4sIF9yZXBsYWNlUmFuZG9tLCBfcGx1Z2lucywgR1NDYWNoZSwgUHJvcFR3ZWVuLCBfY29uZmlnLCBfdGlja2VyLCBfcm91bmQsIF9taXNzaW5nUGx1Z2luLCBfZ2V0U2V0dGVyLCBfZ2V0Q2FjaGUsIF9jb2xvckV4cCwgX3BhcnNlUmVsYXRpdmUsIF9zZXREZWZhdWx0cywgX3JlbW92ZUxpbmtlZExpc3RJdGVtIC8vZm9yIHRoZSBjb21tZW50ZWQtb3V0IGNsYXNzTmFtZSBmZWF0dXJlLlxufSBmcm9tIFwiLi9nc2FwLWNvcmUuanNcIjtcblxudmFyIF93aW4sXG4gICAgX2RvYyxcbiAgICBfZG9jRWxlbWVudCxcbiAgICBfcGx1Z2luSW5pdHRlZCxcbiAgICBfdGVtcERpdixcbiAgICBfdGVtcERpdlN0eWxlcixcbiAgICBfcmVjZW50U2V0dGVyUGx1Z2luLFxuICAgIF9yZXZlcnRpbmcsXG4gICAgX3dpbmRvd0V4aXN0cyA9IGZ1bmN0aW9uIF93aW5kb3dFeGlzdHMoKSB7XG4gIHJldHVybiB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiO1xufSxcbiAgICBfdHJhbnNmb3JtUHJvcHMgPSB7fSxcbiAgICBfUkFEMkRFRyA9IDE4MCAvIE1hdGguUEksXG4gICAgX0RFRzJSQUQgPSBNYXRoLlBJIC8gMTgwLFxuICAgIF9hdGFuMiA9IE1hdGguYXRhbjIsXG4gICAgX2JpZ051bSA9IDFlOCxcbiAgICBfY2Fwc0V4cCA9IC8oW0EtWl0pL2csXG4gICAgX2hvcml6b250YWxFeHAgPSAvKGxlZnR8cmlnaHR8d2lkdGh8bWFyZ2lufHBhZGRpbmd8eCkvaSxcbiAgICBfY29tcGxleEV4cCA9IC9bXFxzLFxcKF1cXFMvLFxuICAgIF9wcm9wZXJ0eUFsaWFzZXMgPSB7XG4gIGF1dG9BbHBoYTogXCJvcGFjaXR5LHZpc2liaWxpdHlcIixcbiAgc2NhbGU6IFwic2NhbGVYLHNjYWxlWVwiLFxuICBhbHBoYTogXCJvcGFjaXR5XCJcbn0sXG4gICAgX3JlbmRlckNTU1Byb3AgPSBmdW5jdGlvbiBfcmVuZGVyQ1NTUHJvcChyYXRpbywgZGF0YSkge1xuICByZXR1cm4gZGF0YS5zZXQoZGF0YS50LCBkYXRhLnAsIE1hdGgucm91bmQoKGRhdGEucyArIGRhdGEuYyAqIHJhdGlvKSAqIDEwMDAwKSAvIDEwMDAwICsgZGF0YS51LCBkYXRhKTtcbn0sXG4gICAgX3JlbmRlclByb3BXaXRoRW5kID0gZnVuY3Rpb24gX3JlbmRlclByb3BXaXRoRW5kKHJhdGlvLCBkYXRhKSB7XG4gIHJldHVybiBkYXRhLnNldChkYXRhLnQsIGRhdGEucCwgcmF0aW8gPT09IDEgPyBkYXRhLmUgOiBNYXRoLnJvdW5kKChkYXRhLnMgKyBkYXRhLmMgKiByYXRpbykgKiAxMDAwMCkgLyAxMDAwMCArIGRhdGEudSwgZGF0YSk7XG59LFxuICAgIF9yZW5kZXJDU1NQcm9wV2l0aEJlZ2lubmluZyA9IGZ1bmN0aW9uIF9yZW5kZXJDU1NQcm9wV2l0aEJlZ2lubmluZyhyYXRpbywgZGF0YSkge1xuICByZXR1cm4gZGF0YS5zZXQoZGF0YS50LCBkYXRhLnAsIHJhdGlvID8gTWF0aC5yb3VuZCgoZGF0YS5zICsgZGF0YS5jICogcmF0aW8pICogMTAwMDApIC8gMTAwMDAgKyBkYXRhLnUgOiBkYXRhLmIsIGRhdGEpO1xufSxcbiAgICAvL2lmIHVuaXRzIGNoYW5nZSwgd2UgbmVlZCBhIHdheSB0byByZW5kZXIgdGhlIG9yaWdpbmFsIHVuaXQvdmFsdWUgd2hlbiB0aGUgdHdlZW4gZ29lcyBhbGwgdGhlIHdheSBiYWNrIHRvIHRoZSBiZWdpbm5pbmcgKHJhdGlvOjApXG5fcmVuZGVyUm91bmRlZENTU1Byb3AgPSBmdW5jdGlvbiBfcmVuZGVyUm91bmRlZENTU1Byb3AocmF0aW8sIGRhdGEpIHtcbiAgdmFyIHZhbHVlID0gZGF0YS5zICsgZGF0YS5jICogcmF0aW87XG4gIGRhdGEuc2V0KGRhdGEudCwgZGF0YS5wLCB+fih2YWx1ZSArICh2YWx1ZSA8IDAgPyAtLjUgOiAuNSkpICsgZGF0YS51LCBkYXRhKTtcbn0sXG4gICAgX3JlbmRlck5vblR3ZWVuaW5nVmFsdWUgPSBmdW5jdGlvbiBfcmVuZGVyTm9uVHdlZW5pbmdWYWx1ZShyYXRpbywgZGF0YSkge1xuICByZXR1cm4gZGF0YS5zZXQoZGF0YS50LCBkYXRhLnAsIHJhdGlvID8gZGF0YS5lIDogZGF0YS5iLCBkYXRhKTtcbn0sXG4gICAgX3JlbmRlck5vblR3ZWVuaW5nVmFsdWVPbmx5QXRFbmQgPSBmdW5jdGlvbiBfcmVuZGVyTm9uVHdlZW5pbmdWYWx1ZU9ubHlBdEVuZChyYXRpbywgZGF0YSkge1xuICByZXR1cm4gZGF0YS5zZXQoZGF0YS50LCBkYXRhLnAsIHJhdGlvICE9PSAxID8gZGF0YS5iIDogZGF0YS5lLCBkYXRhKTtcbn0sXG4gICAgX3NldHRlckNTU1N0eWxlID0gZnVuY3Rpb24gX3NldHRlckNTU1N0eWxlKHRhcmdldCwgcHJvcGVydHksIHZhbHVlKSB7XG4gIHJldHVybiB0YXJnZXQuc3R5bGVbcHJvcGVydHldID0gdmFsdWU7XG59LFxuICAgIF9zZXR0ZXJDU1NQcm9wID0gZnVuY3Rpb24gX3NldHRlckNTU1Byb3AodGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgcmV0dXJuIHRhcmdldC5zdHlsZS5zZXRQcm9wZXJ0eShwcm9wZXJ0eSwgdmFsdWUpO1xufSxcbiAgICBfc2V0dGVyVHJhbnNmb3JtID0gZnVuY3Rpb24gX3NldHRlclRyYW5zZm9ybSh0YXJnZXQsIHByb3BlcnR5LCB2YWx1ZSkge1xuICByZXR1cm4gdGFyZ2V0Ll9nc2FwW3Byb3BlcnR5XSA9IHZhbHVlO1xufSxcbiAgICBfc2V0dGVyU2NhbGUgPSBmdW5jdGlvbiBfc2V0dGVyU2NhbGUodGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgcmV0dXJuIHRhcmdldC5fZ3NhcC5zY2FsZVggPSB0YXJnZXQuX2dzYXAuc2NhbGVZID0gdmFsdWU7XG59LFxuICAgIF9zZXR0ZXJTY2FsZVdpdGhSZW5kZXIgPSBmdW5jdGlvbiBfc2V0dGVyU2NhbGVXaXRoUmVuZGVyKHRhcmdldCwgcHJvcGVydHksIHZhbHVlLCBkYXRhLCByYXRpbykge1xuICB2YXIgY2FjaGUgPSB0YXJnZXQuX2dzYXA7XG4gIGNhY2hlLnNjYWxlWCA9IGNhY2hlLnNjYWxlWSA9IHZhbHVlO1xuICBjYWNoZS5yZW5kZXJUcmFuc2Zvcm0ocmF0aW8sIGNhY2hlKTtcbn0sXG4gICAgX3NldHRlclRyYW5zZm9ybVdpdGhSZW5kZXIgPSBmdW5jdGlvbiBfc2V0dGVyVHJhbnNmb3JtV2l0aFJlbmRlcih0YXJnZXQsIHByb3BlcnR5LCB2YWx1ZSwgZGF0YSwgcmF0aW8pIHtcbiAgdmFyIGNhY2hlID0gdGFyZ2V0Ll9nc2FwO1xuICBjYWNoZVtwcm9wZXJ0eV0gPSB2YWx1ZTtcbiAgY2FjaGUucmVuZGVyVHJhbnNmb3JtKHJhdGlvLCBjYWNoZSk7XG59LFxuICAgIF90cmFuc2Zvcm1Qcm9wID0gXCJ0cmFuc2Zvcm1cIixcbiAgICBfdHJhbnNmb3JtT3JpZ2luUHJvcCA9IF90cmFuc2Zvcm1Qcm9wICsgXCJPcmlnaW5cIixcbiAgICBfc2F2ZVN0eWxlID0gZnVuY3Rpb24gX3NhdmVTdHlsZShwcm9wZXJ0eSkge1xuICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gIHZhciB0YXJnZXQgPSB0aGlzLnRhcmdldCxcbiAgICAgIHN0eWxlID0gdGFyZ2V0LnN0eWxlO1xuXG4gIGlmIChwcm9wZXJ0eSBpbiBfdHJhbnNmb3JtUHJvcHMpIHtcbiAgICB0aGlzLnRmbSA9IHRoaXMudGZtIHx8IHt9O1xuXG4gICAgaWYgKHByb3BlcnR5ICE9PSBcInRyYW5zZm9ybVwiKSB7XG4gICAgICBwcm9wZXJ0eSA9IF9wcm9wZXJ0eUFsaWFzZXNbcHJvcGVydHldIHx8IHByb3BlcnR5O1xuICAgICAgfnByb3BlcnR5LmluZGV4T2YoXCIsXCIpID8gcHJvcGVydHkuc3BsaXQoXCIsXCIpLmZvckVhY2goZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLnRmbVthXSA9IF9nZXQodGFyZ2V0LCBhKTtcbiAgICAgIH0pIDogdGhpcy50Zm1bcHJvcGVydHldID0gdGFyZ2V0Ll9nc2FwLnggPyB0YXJnZXQuX2dzYXBbcHJvcGVydHldIDogX2dldCh0YXJnZXQsIHByb3BlcnR5KTsgLy8gbm90ZTogc2NhbGUgd291bGQgbWFwIHRvIFwic2NhbGVYLHNjYWxlWVwiLCB0aHVzIHdlIGxvb3AgYW5kIGFwcGx5IHRoZW0gYm90aC5cbiAgICB9XG5cbiAgICB0YXJnZXQuX2dzYXAuc3ZnICYmICh0aGlzLnN2ZyA9IHRhcmdldC5nZXRBdHRyaWJ1dGUocHJvcGVydHkpIHx8IFwiXCIpO1xuXG4gICAgaWYgKHRoaXMucHJvcHMuaW5kZXhPZihfdHJhbnNmb3JtUHJvcCkgPj0gMCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHByb3BlcnR5ID0gX3RyYW5zZm9ybVByb3A7XG4gIH1cblxuICBzdHlsZSAmJiB0aGlzLnByb3BzLnB1c2gocHJvcGVydHksIHN0eWxlW3Byb3BlcnR5XSk7XG59LFxuICAgIF9yZW1vdmVJbmRlcGVuZGVudFRyYW5zZm9ybXMgPSBmdW5jdGlvbiBfcmVtb3ZlSW5kZXBlbmRlbnRUcmFuc2Zvcm1zKHN0eWxlKSB7XG4gIGlmIChzdHlsZS50cmFuc2xhdGUpIHtcbiAgICBzdHlsZS5yZW1vdmVQcm9wZXJ0eShcInRyYW5zbGF0ZVwiKTtcbiAgICBzdHlsZS5yZW1vdmVQcm9wZXJ0eShcInNjYWxlXCIpO1xuICAgIHN0eWxlLnJlbW92ZVByb3BlcnR5KFwicm90YXRlXCIpO1xuICB9XG59LFxuICAgIF9yZXZlcnRTdHlsZSA9IGZ1bmN0aW9uIF9yZXZlcnRTdHlsZSgpIHtcbiAgdmFyIHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgIHRhcmdldCA9IHRoaXMudGFyZ2V0LFxuICAgICAgc3R5bGUgPSB0YXJnZXQuc3R5bGUsXG4gICAgICBjYWNoZSA9IHRhcmdldC5fZ3NhcCxcbiAgICAgIGksXG4gICAgICBwO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkgKz0gMikge1xuICAgIHByb3BzW2kgKyAxXSA/IHN0eWxlW3Byb3BzW2ldXSA9IHByb3BzW2kgKyAxXSA6IHN0eWxlLnJlbW92ZVByb3BlcnR5KHByb3BzW2ldLnJlcGxhY2UoX2NhcHNFeHAsIFwiLSQxXCIpLnRvTG93ZXJDYXNlKCkpO1xuICB9XG5cbiAgaWYgKHRoaXMudGZtKSB7XG4gICAgY2FjaGUuc3ZnICYmIHRhcmdldC5zZXRBdHRyaWJ1dGUoXCJ0cmFuc2Zvcm1cIiwgdGhpcy5zdmcgfHwgXCJcIik7XG5cbiAgICBmb3IgKHAgaW4gdGhpcy50Zm0pIHtcbiAgICAgIGNhY2hlW3BdID0gdGhpcy50Zm1bcF07XG4gICAgfVxuXG4gICAgaSA9IF9yZXZlcnRpbmcoKTtcblxuICAgIGlmIChpICYmICFpLmlzU3RhcnQgJiYgIXN0eWxlW190cmFuc2Zvcm1Qcm9wXSkge1xuICAgICAgX3JlbW92ZUluZGVwZW5kZW50VHJhbnNmb3JtcyhzdHlsZSk7XG5cbiAgICAgIGNhY2hlLnVuY2FjaGUgPSAxOyAvLyBpZiBpdCdzIGEgc3RhcnRBdCB0aGF0J3MgYmVpbmcgcmV2ZXJ0ZWQgaW4gdGhlIF9pbml0VHdlZW4oKSBvZiB0aGUgY29yZSwgd2UgZG9uJ3QgbmVlZCB0byB1bmNhY2hlIHRyYW5zZm9ybXMuIFRoaXMgaXMgcHVyZWx5IGEgcGVyZm9ybWFuY2Ugb3B0aW1pemF0aW9uLlxuICAgIH1cbiAgfVxufSxcbiAgICBfZ2V0U3R5bGVTYXZlciA9IGZ1bmN0aW9uIF9nZXRTdHlsZVNhdmVyKHRhcmdldCwgcHJvcGVydGllcykge1xuICB2YXIgc2F2ZXIgPSB7XG4gICAgdGFyZ2V0OiB0YXJnZXQsXG4gICAgcHJvcHM6IFtdLFxuICAgIHJldmVydDogX3JldmVydFN0eWxlLFxuICAgIHNhdmU6IF9zYXZlU3R5bGVcbiAgfTtcbiAgcHJvcGVydGllcyAmJiBwcm9wZXJ0aWVzLnNwbGl0KFwiLFwiKS5mb3JFYWNoKGZ1bmN0aW9uIChwKSB7XG4gICAgcmV0dXJuIHNhdmVyLnNhdmUocCk7XG4gIH0pO1xuICByZXR1cm4gc2F2ZXI7XG59LFxuICAgIF9zdXBwb3J0czNELFxuICAgIF9jcmVhdGVFbGVtZW50ID0gZnVuY3Rpb24gX2NyZWF0ZUVsZW1lbnQodHlwZSwgbnMpIHtcbiAgdmFyIGUgPSBfZG9jLmNyZWF0ZUVsZW1lbnROUyA/IF9kb2MuY3JlYXRlRWxlbWVudE5TKChucyB8fCBcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIikucmVwbGFjZSgvXmh0dHBzLywgXCJodHRwXCIpLCB0eXBlKSA6IF9kb2MuY3JlYXRlRWxlbWVudCh0eXBlKTsgLy9zb21lIHNlcnZlcnMgc3dhcCBpbiBodHRwcyBmb3IgaHR0cCBpbiB0aGUgbmFtZXNwYWNlIHdoaWNoIGNhbiBicmVhayB0aGluZ3MsIG1ha2luZyBcInN0eWxlXCIgaW5hY2Nlc3NpYmxlLlxuXG4gIHJldHVybiBlLnN0eWxlID8gZSA6IF9kb2MuY3JlYXRlRWxlbWVudCh0eXBlKTsgLy9zb21lIGVudmlyb25tZW50cyB3b24ndCBhbGxvdyBhY2Nlc3MgdG8gdGhlIGVsZW1lbnQncyBzdHlsZSB3aGVuIGNyZWF0ZWQgd2l0aCBhIG5hbWVzcGFjZSBpbiB3aGljaCBjYXNlIHdlIGRlZmF1bHQgdG8gdGhlIHN0YW5kYXJkIGNyZWF0ZUVsZW1lbnQoKSB0byB3b3JrIGFyb3VuZCB0aGUgaXNzdWUuIEFsc28gbm90ZSB0aGF0IHdoZW4gR1NBUCBpcyBlbWJlZGRlZCBkaXJlY3RseSBpbnNpZGUgYW4gU1ZHIGZpbGUsIGNyZWF0ZUVsZW1lbnQoKSB3b24ndCBhbGxvdyBhY2Nlc3MgdG8gdGhlIHN0eWxlIG9iamVjdCBpbiBGaXJlZm94IChzZWUgaHR0cHM6Ly9ncmVlbnNvY2suY29tL2ZvcnVtcy90b3BpYy8yMDIxNS1wcm9ibGVtLXVzaW5nLXR3ZWVubWF4LWluLXN0YW5kYWxvbmUtc2VsZi1jb250YWluaW5nLXN2Zy1maWxlLWVyci1jYW5ub3Qtc2V0LXByb3BlcnR5LWNzc3RleHQtb2YtdW5kZWZpbmVkLykuXG59LFxuICAgIF9nZXRDb21wdXRlZFByb3BlcnR5ID0gZnVuY3Rpb24gX2dldENvbXB1dGVkUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eSwgc2tpcFByZWZpeEZhbGxiYWNrKSB7XG4gIHZhciBjcyA9IGdldENvbXB1dGVkU3R5bGUodGFyZ2V0KTtcbiAgcmV0dXJuIGNzW3Byb3BlcnR5XSB8fCBjcy5nZXRQcm9wZXJ0eVZhbHVlKHByb3BlcnR5LnJlcGxhY2UoX2NhcHNFeHAsIFwiLSQxXCIpLnRvTG93ZXJDYXNlKCkpIHx8IGNzLmdldFByb3BlcnR5VmFsdWUocHJvcGVydHkpIHx8ICFza2lwUHJlZml4RmFsbGJhY2sgJiYgX2dldENvbXB1dGVkUHJvcGVydHkodGFyZ2V0LCBfY2hlY2tQcm9wUHJlZml4KHByb3BlcnR5KSB8fCBwcm9wZXJ0eSwgMSkgfHwgXCJcIjsgLy9jc3MgdmFyaWFibGVzIG1heSBub3QgbmVlZCBjYXBzIHN3YXBwZWQgb3V0IGZvciBkYXNoZXMgYW5kIGxvd2VyY2FzZS5cbn0sXG4gICAgX3ByZWZpeGVzID0gXCJPLE1veixtcyxNcyxXZWJraXRcIi5zcGxpdChcIixcIiksXG4gICAgX2NoZWNrUHJvcFByZWZpeCA9IGZ1bmN0aW9uIF9jaGVja1Byb3BQcmVmaXgocHJvcGVydHksIGVsZW1lbnQsIHByZWZlclByZWZpeCkge1xuICB2YXIgZSA9IGVsZW1lbnQgfHwgX3RlbXBEaXYsXG4gICAgICBzID0gZS5zdHlsZSxcbiAgICAgIGkgPSA1O1xuXG4gIGlmIChwcm9wZXJ0eSBpbiBzICYmICFwcmVmZXJQcmVmaXgpIHtcbiAgICByZXR1cm4gcHJvcGVydHk7XG4gIH1cblxuICBwcm9wZXJ0eSA9IHByb3BlcnR5LmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgcHJvcGVydHkuc3Vic3RyKDEpO1xuXG4gIHdoaWxlIChpLS0gJiYgIShfcHJlZml4ZXNbaV0gKyBwcm9wZXJ0eSBpbiBzKSkge31cblxuICByZXR1cm4gaSA8IDAgPyBudWxsIDogKGkgPT09IDMgPyBcIm1zXCIgOiBpID49IDAgPyBfcHJlZml4ZXNbaV0gOiBcIlwiKSArIHByb3BlcnR5O1xufSxcbiAgICBfaW5pdENvcmUgPSBmdW5jdGlvbiBfaW5pdENvcmUoKSB7XG4gIGlmIChfd2luZG93RXhpc3RzKCkgJiYgd2luZG93LmRvY3VtZW50KSB7XG4gICAgX3dpbiA9IHdpbmRvdztcbiAgICBfZG9jID0gX3dpbi5kb2N1bWVudDtcbiAgICBfZG9jRWxlbWVudCA9IF9kb2MuZG9jdW1lbnRFbGVtZW50O1xuICAgIF90ZW1wRGl2ID0gX2NyZWF0ZUVsZW1lbnQoXCJkaXZcIikgfHwge1xuICAgICAgc3R5bGU6IHt9XG4gICAgfTtcbiAgICBfdGVtcERpdlN0eWxlciA9IF9jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIF90cmFuc2Zvcm1Qcm9wID0gX2NoZWNrUHJvcFByZWZpeChfdHJhbnNmb3JtUHJvcCk7XG4gICAgX3RyYW5zZm9ybU9yaWdpblByb3AgPSBfdHJhbnNmb3JtUHJvcCArIFwiT3JpZ2luXCI7XG4gICAgX3RlbXBEaXYuc3R5bGUuY3NzVGV4dCA9IFwiYm9yZGVyLXdpZHRoOjA7bGluZS1oZWlnaHQ6MDtwb3NpdGlvbjphYnNvbHV0ZTtwYWRkaW5nOjBcIjsgLy9tYWtlIHN1cmUgdG8gb3ZlcnJpZGUgY2VydGFpbiBwcm9wZXJ0aWVzIHRoYXQgbWF5IGNvbnRhbWluYXRlIG1lYXN1cmVtZW50cywgaW4gY2FzZSB0aGUgdXNlciBoYXMgb3ZlcnJlYWNoaW5nIHN0eWxlIHNoZWV0cy5cblxuICAgIF9zdXBwb3J0czNEID0gISFfY2hlY2tQcm9wUHJlZml4KFwicGVyc3BlY3RpdmVcIik7XG4gICAgX3JldmVydGluZyA9IGdzYXAuY29yZS5yZXZlcnRpbmc7XG4gICAgX3BsdWdpbkluaXR0ZWQgPSAxO1xuICB9XG59LFxuICAgIF9nZXRCQm94SGFjayA9IGZ1bmN0aW9uIF9nZXRCQm94SGFjayhzd2FwSWZQb3NzaWJsZSkge1xuICAvL3dvcmtzIGFyb3VuZCBpc3N1ZXMgaW4gc29tZSBicm93c2VycyAobGlrZSBGaXJlZm94KSB0aGF0IGRvbid0IGNvcnJlY3RseSByZXBvcnQgZ2V0QkJveCgpIG9uIFNWRyBlbGVtZW50cyBpbnNpZGUgYSA8ZGVmcz4gZWxlbWVudCBhbmQvb3IgPG1hc2s+LiBXZSB0cnkgY3JlYXRpbmcgYW4gU1ZHLCBhZGRpbmcgaXQgdG8gdGhlIGRvY3VtZW50RWxlbWVudCBhbmQgdG9zcyB0aGUgZWxlbWVudCBpbiB0aGVyZSBzbyB0aGF0IGl0J3MgZGVmaW5pdGVseSBwYXJ0IG9mIHRoZSByZW5kZXJpbmcgdHJlZSwgdGhlbiBncmFiIHRoZSBiYm94IGFuZCBpZiBpdCB3b3Jrcywgd2UgYWN0dWFsbHkgc3dhcCBvdXQgdGhlIG9yaWdpbmFsIGdldEJCb3goKSBtZXRob2QgZm9yIG91ciBvd24gdGhhdCBkb2VzIHRoZXNlIGV4dHJhIHN0ZXBzIHdoZW5ldmVyIGdldEJCb3ggaXMgbmVlZGVkLiBUaGlzIGhlbHBzIGVuc3VyZSB0aGF0IHBlcmZvcm1hbmNlIGlzIG9wdGltYWwgKG9ubHkgZG8gYWxsIHRoZXNlIGV4dHJhIHN0ZXBzIHdoZW4gYWJzb2x1dGVseSBuZWNlc3NhcnkuLi5tb3N0IGVsZW1lbnRzIGRvbid0IG5lZWQgaXQpLlxuICB2YXIgc3ZnID0gX2NyZWF0ZUVsZW1lbnQoXCJzdmdcIiwgdGhpcy5vd25lclNWR0VsZW1lbnQgJiYgdGhpcy5vd25lclNWR0VsZW1lbnQuZ2V0QXR0cmlidXRlKFwieG1sbnNcIikgfHwgXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiKSxcbiAgICAgIG9sZFBhcmVudCA9IHRoaXMucGFyZW50Tm9kZSxcbiAgICAgIG9sZFNpYmxpbmcgPSB0aGlzLm5leHRTaWJsaW5nLFxuICAgICAgb2xkQ1NTID0gdGhpcy5zdHlsZS5jc3NUZXh0LFxuICAgICAgYmJveDtcblxuICBfZG9jRWxlbWVudC5hcHBlbmRDaGlsZChzdmcpO1xuXG4gIHN2Zy5hcHBlbmRDaGlsZCh0aGlzKTtcbiAgdGhpcy5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xuXG4gIGlmIChzd2FwSWZQb3NzaWJsZSkge1xuICAgIHRyeSB7XG4gICAgICBiYm94ID0gdGhpcy5nZXRCQm94KCk7XG4gICAgICB0aGlzLl9nc2FwQkJveCA9IHRoaXMuZ2V0QkJveDsgLy9zdG9yZSB0aGUgb3JpZ2luYWxcblxuICAgICAgdGhpcy5nZXRCQm94ID0gX2dldEJCb3hIYWNrO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG4gIH0gZWxzZSBpZiAodGhpcy5fZ3NhcEJCb3gpIHtcbiAgICBiYm94ID0gdGhpcy5fZ3NhcEJCb3goKTtcbiAgfVxuXG4gIGlmIChvbGRQYXJlbnQpIHtcbiAgICBpZiAob2xkU2libGluZykge1xuICAgICAgb2xkUGFyZW50Lmluc2VydEJlZm9yZSh0aGlzLCBvbGRTaWJsaW5nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgb2xkUGFyZW50LmFwcGVuZENoaWxkKHRoaXMpO1xuICAgIH1cbiAgfVxuXG4gIF9kb2NFbGVtZW50LnJlbW92ZUNoaWxkKHN2Zyk7XG5cbiAgdGhpcy5zdHlsZS5jc3NUZXh0ID0gb2xkQ1NTO1xuICByZXR1cm4gYmJveDtcbn0sXG4gICAgX2dldEF0dHJpYnV0ZUZhbGxiYWNrcyA9IGZ1bmN0aW9uIF9nZXRBdHRyaWJ1dGVGYWxsYmFja3ModGFyZ2V0LCBhdHRyaWJ1dGVzQXJyYXkpIHtcbiAgdmFyIGkgPSBhdHRyaWJ1dGVzQXJyYXkubGVuZ3RoO1xuXG4gIHdoaWxlIChpLS0pIHtcbiAgICBpZiAodGFyZ2V0Lmhhc0F0dHJpYnV0ZShhdHRyaWJ1dGVzQXJyYXlbaV0pKSB7XG4gICAgICByZXR1cm4gdGFyZ2V0LmdldEF0dHJpYnV0ZShhdHRyaWJ1dGVzQXJyYXlbaV0pO1xuICAgIH1cbiAgfVxufSxcbiAgICBfZ2V0QkJveCA9IGZ1bmN0aW9uIF9nZXRCQm94KHRhcmdldCkge1xuICB2YXIgYm91bmRzO1xuXG4gIHRyeSB7XG4gICAgYm91bmRzID0gdGFyZ2V0LmdldEJCb3goKTsgLy9GaXJlZm94IHRocm93cyBlcnJvcnMgaWYgeW91IHRyeSBjYWxsaW5nIGdldEJCb3goKSBvbiBhbiBTVkcgZWxlbWVudCB0aGF0J3Mgbm90IHJlbmRlcmVkIChsaWtlIGluIGEgPHN5bWJvbD4gb3IgPGRlZnM+KS4gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9NjEyMTE4XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgYm91bmRzID0gX2dldEJCb3hIYWNrLmNhbGwodGFyZ2V0LCB0cnVlKTtcbiAgfVxuXG4gIGJvdW5kcyAmJiAoYm91bmRzLndpZHRoIHx8IGJvdW5kcy5oZWlnaHQpIHx8IHRhcmdldC5nZXRCQm94ID09PSBfZ2V0QkJveEhhY2sgfHwgKGJvdW5kcyA9IF9nZXRCQm94SGFjay5jYWxsKHRhcmdldCwgdHJ1ZSkpOyAvL3NvbWUgYnJvd3NlcnMgKGxpa2UgRmlyZWZveCkgbWlzcmVwb3J0IHRoZSBib3VuZHMgaWYgdGhlIGVsZW1lbnQgaGFzIHplcm8gd2lkdGggYW5kIGhlaWdodCAoaXQganVzdCBhc3N1bWVzIGl0J3MgYXQgeDowLCB5OjApLCB0aHVzIHdlIG5lZWQgdG8gbWFudWFsbHkgZ3JhYiB0aGUgcG9zaXRpb24gaW4gdGhhdCBjYXNlLlxuXG4gIHJldHVybiBib3VuZHMgJiYgIWJvdW5kcy53aWR0aCAmJiAhYm91bmRzLnggJiYgIWJvdW5kcy55ID8ge1xuICAgIHg6ICtfZ2V0QXR0cmlidXRlRmFsbGJhY2tzKHRhcmdldCwgW1wieFwiLCBcImN4XCIsIFwieDFcIl0pIHx8IDAsXG4gICAgeTogK19nZXRBdHRyaWJ1dGVGYWxsYmFja3ModGFyZ2V0LCBbXCJ5XCIsIFwiY3lcIiwgXCJ5MVwiXSkgfHwgMCxcbiAgICB3aWR0aDogMCxcbiAgICBoZWlnaHQ6IDBcbiAgfSA6IGJvdW5kcztcbn0sXG4gICAgX2lzU1ZHID0gZnVuY3Rpb24gX2lzU1ZHKGUpIHtcbiAgcmV0dXJuICEhKGUuZ2V0Q1RNICYmICghZS5wYXJlbnROb2RlIHx8IGUub3duZXJTVkdFbGVtZW50KSAmJiBfZ2V0QkJveChlKSk7XG59LFxuICAgIC8vcmVwb3J0cyBpZiB0aGUgZWxlbWVudCBpcyBhbiBTVkcgb24gd2hpY2ggZ2V0QkJveCgpIGFjdHVhbGx5IHdvcmtzXG5fcmVtb3ZlUHJvcGVydHkgPSBmdW5jdGlvbiBfcmVtb3ZlUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eSkge1xuICBpZiAocHJvcGVydHkpIHtcbiAgICB2YXIgc3R5bGUgPSB0YXJnZXQuc3R5bGU7XG5cbiAgICBpZiAocHJvcGVydHkgaW4gX3RyYW5zZm9ybVByb3BzICYmIHByb3BlcnR5ICE9PSBfdHJhbnNmb3JtT3JpZ2luUHJvcCkge1xuICAgICAgcHJvcGVydHkgPSBfdHJhbnNmb3JtUHJvcDtcbiAgICB9XG5cbiAgICBpZiAoc3R5bGUucmVtb3ZlUHJvcGVydHkpIHtcbiAgICAgIGlmIChwcm9wZXJ0eS5zdWJzdHIoMCwgMikgPT09IFwibXNcIiB8fCBwcm9wZXJ0eS5zdWJzdHIoMCwgNikgPT09IFwid2Via2l0XCIpIHtcbiAgICAgICAgLy9NaWNyb3NvZnQgYW5kIHNvbWUgV2Via2l0IGJyb3dzZXJzIGRvbid0IGNvbmZvcm0gdG8gdGhlIHN0YW5kYXJkIG9mIGNhcGl0YWxpemluZyB0aGUgZmlyc3QgcHJlZml4IGNoYXJhY3Rlciwgc28gd2UgYWRqdXN0IHNvIHRoYXQgd2hlbiB3ZSBwcmVmaXggdGhlIGNhcHMgd2l0aCBhIGRhc2gsIGl0J3MgY29ycmVjdCAob3RoZXJ3aXNlIGl0J2QgYmUgXCJtcy10cmFuc2Zvcm1cIiBpbnN0ZWFkIG9mIFwiLW1zLXRyYW5zZm9ybVwiIGZvciBJRTksIGZvciBleGFtcGxlKVxuICAgICAgICBwcm9wZXJ0eSA9IFwiLVwiICsgcHJvcGVydHk7XG4gICAgICB9XG5cbiAgICAgIHN0eWxlLnJlbW92ZVByb3BlcnR5KHByb3BlcnR5LnJlcGxhY2UoX2NhcHNFeHAsIFwiLSQxXCIpLnRvTG93ZXJDYXNlKCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvL25vdGU6IG9sZCB2ZXJzaW9ucyBvZiBJRSB1c2UgXCJyZW1vdmVBdHRyaWJ1dGUoKVwiIGluc3RlYWQgb2YgXCJyZW1vdmVQcm9wZXJ0eSgpXCJcbiAgICAgIHN0eWxlLnJlbW92ZUF0dHJpYnV0ZShwcm9wZXJ0eSk7XG4gICAgfVxuICB9XG59LFxuICAgIF9hZGROb25Ud2VlbmluZ1BUID0gZnVuY3Rpb24gX2FkZE5vblR3ZWVuaW5nUFQocGx1Z2luLCB0YXJnZXQsIHByb3BlcnR5LCBiZWdpbm5pbmcsIGVuZCwgb25seVNldEF0RW5kKSB7XG4gIHZhciBwdCA9IG5ldyBQcm9wVHdlZW4ocGx1Z2luLl9wdCwgdGFyZ2V0LCBwcm9wZXJ0eSwgMCwgMSwgb25seVNldEF0RW5kID8gX3JlbmRlck5vblR3ZWVuaW5nVmFsdWVPbmx5QXRFbmQgOiBfcmVuZGVyTm9uVHdlZW5pbmdWYWx1ZSk7XG4gIHBsdWdpbi5fcHQgPSBwdDtcbiAgcHQuYiA9IGJlZ2lubmluZztcbiAgcHQuZSA9IGVuZDtcblxuICBwbHVnaW4uX3Byb3BzLnB1c2gocHJvcGVydHkpO1xuXG4gIHJldHVybiBwdDtcbn0sXG4gICAgX25vbkNvbnZlcnRpYmxlVW5pdHMgPSB7XG4gIGRlZzogMSxcbiAgcmFkOiAxLFxuICB0dXJuOiAxXG59LFxuICAgIF9ub25TdGFuZGFyZExheW91dHMgPSB7XG4gIGdyaWQ6IDEsXG4gIGZsZXg6IDFcbn0sXG4gICAgLy90YWtlcyBhIHNpbmdsZSB2YWx1ZSBsaWtlIDIwcHggYW5kIGNvbnZlcnRzIGl0IHRvIHRoZSB1bml0IHNwZWNpZmllZCwgbGlrZSBcIiVcIiwgcmV0dXJuaW5nIG9ubHkgdGhlIG51bWVyaWMgYW1vdW50LlxuX2NvbnZlcnRUb1VuaXQgPSBmdW5jdGlvbiBfY29udmVydFRvVW5pdCh0YXJnZXQsIHByb3BlcnR5LCB2YWx1ZSwgdW5pdCkge1xuICB2YXIgY3VyVmFsdWUgPSBwYXJzZUZsb2F0KHZhbHVlKSB8fCAwLFxuICAgICAgY3VyVW5pdCA9ICh2YWx1ZSArIFwiXCIpLnRyaW0oKS5zdWJzdHIoKGN1clZhbHVlICsgXCJcIikubGVuZ3RoKSB8fCBcInB4XCIsXG4gICAgICAvLyBzb21lIGJyb3dzZXJzIGxlYXZlIGV4dHJhIHdoaXRlc3BhY2UgYXQgdGhlIGJlZ2lubmluZyBvZiBDU1MgdmFyaWFibGVzLCBoZW5jZSB0aGUgbmVlZCB0byB0cmltKClcbiAgc3R5bGUgPSBfdGVtcERpdi5zdHlsZSxcbiAgICAgIGhvcml6b250YWwgPSBfaG9yaXpvbnRhbEV4cC50ZXN0KHByb3BlcnR5KSxcbiAgICAgIGlzUm9vdFNWRyA9IHRhcmdldC50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwic3ZnXCIsXG4gICAgICBtZWFzdXJlUHJvcGVydHkgPSAoaXNSb290U1ZHID8gXCJjbGllbnRcIiA6IFwib2Zmc2V0XCIpICsgKGhvcml6b250YWwgPyBcIldpZHRoXCIgOiBcIkhlaWdodFwiKSxcbiAgICAgIGFtb3VudCA9IDEwMCxcbiAgICAgIHRvUGl4ZWxzID0gdW5pdCA9PT0gXCJweFwiLFxuICAgICAgdG9QZXJjZW50ID0gdW5pdCA9PT0gXCIlXCIsXG4gICAgICBweCxcbiAgICAgIHBhcmVudCxcbiAgICAgIGNhY2hlLFxuICAgICAgaXNTVkc7XG5cbiAgaWYgKHVuaXQgPT09IGN1clVuaXQgfHwgIWN1clZhbHVlIHx8IF9ub25Db252ZXJ0aWJsZVVuaXRzW3VuaXRdIHx8IF9ub25Db252ZXJ0aWJsZVVuaXRzW2N1clVuaXRdKSB7XG4gICAgcmV0dXJuIGN1clZhbHVlO1xuICB9XG5cbiAgY3VyVW5pdCAhPT0gXCJweFwiICYmICF0b1BpeGVscyAmJiAoY3VyVmFsdWUgPSBfY29udmVydFRvVW5pdCh0YXJnZXQsIHByb3BlcnR5LCB2YWx1ZSwgXCJweFwiKSk7XG4gIGlzU1ZHID0gdGFyZ2V0LmdldENUTSAmJiBfaXNTVkcodGFyZ2V0KTtcblxuICBpZiAoKHRvUGVyY2VudCB8fCBjdXJVbml0ID09PSBcIiVcIikgJiYgKF90cmFuc2Zvcm1Qcm9wc1twcm9wZXJ0eV0gfHwgfnByb3BlcnR5LmluZGV4T2YoXCJhZGl1c1wiKSkpIHtcbiAgICBweCA9IGlzU1ZHID8gdGFyZ2V0LmdldEJCb3goKVtob3Jpem9udGFsID8gXCJ3aWR0aFwiIDogXCJoZWlnaHRcIl0gOiB0YXJnZXRbbWVhc3VyZVByb3BlcnR5XTtcbiAgICByZXR1cm4gX3JvdW5kKHRvUGVyY2VudCA/IGN1clZhbHVlIC8gcHggKiBhbW91bnQgOiBjdXJWYWx1ZSAvIDEwMCAqIHB4KTtcbiAgfVxuXG4gIHN0eWxlW2hvcml6b250YWwgPyBcIndpZHRoXCIgOiBcImhlaWdodFwiXSA9IGFtb3VudCArICh0b1BpeGVscyA/IGN1clVuaXQgOiB1bml0KTtcbiAgcGFyZW50ID0gfnByb3BlcnR5LmluZGV4T2YoXCJhZGl1c1wiKSB8fCB1bml0ID09PSBcImVtXCIgJiYgdGFyZ2V0LmFwcGVuZENoaWxkICYmICFpc1Jvb3RTVkcgPyB0YXJnZXQgOiB0YXJnZXQucGFyZW50Tm9kZTtcblxuICBpZiAoaXNTVkcpIHtcbiAgICBwYXJlbnQgPSAodGFyZ2V0Lm93bmVyU1ZHRWxlbWVudCB8fCB7fSkucGFyZW50Tm9kZTtcbiAgfVxuXG4gIGlmICghcGFyZW50IHx8IHBhcmVudCA9PT0gX2RvYyB8fCAhcGFyZW50LmFwcGVuZENoaWxkKSB7XG4gICAgcGFyZW50ID0gX2RvYy5ib2R5O1xuICB9XG5cbiAgY2FjaGUgPSBwYXJlbnQuX2dzYXA7XG5cbiAgaWYgKGNhY2hlICYmIHRvUGVyY2VudCAmJiBjYWNoZS53aWR0aCAmJiBob3Jpem9udGFsICYmIGNhY2hlLnRpbWUgPT09IF90aWNrZXIudGltZSAmJiAhY2FjaGUudW5jYWNoZSkge1xuICAgIHJldHVybiBfcm91bmQoY3VyVmFsdWUgLyBjYWNoZS53aWR0aCAqIGFtb3VudCk7XG4gIH0gZWxzZSB7XG4gICAgKHRvUGVyY2VudCB8fCBjdXJVbml0ID09PSBcIiVcIikgJiYgIV9ub25TdGFuZGFyZExheW91dHNbX2dldENvbXB1dGVkUHJvcGVydHkocGFyZW50LCBcImRpc3BsYXlcIildICYmIChzdHlsZS5wb3NpdGlvbiA9IF9nZXRDb21wdXRlZFByb3BlcnR5KHRhcmdldCwgXCJwb3NpdGlvblwiKSk7XG4gICAgcGFyZW50ID09PSB0YXJnZXQgJiYgKHN0eWxlLnBvc2l0aW9uID0gXCJzdGF0aWNcIik7IC8vIGxpa2UgZm9yIGJvcmRlclJhZGl1cywgaWYgaXQncyBhICUgd2UgbXVzdCBoYXZlIGl0IHJlbGF0aXZlIHRvIHRoZSB0YXJnZXQgaXRzZWxmIGJ1dCB0aGF0IG1heSBub3QgaGF2ZSBwb3NpdGlvbjogcmVsYXRpdmUgb3IgcG9zaXRpb246IGFic29sdXRlIGluIHdoaWNoIGNhc2UgaXQnZCBnbyB1cCB0aGUgY2hhaW4gdW50aWwgaXQgZmluZHMgaXRzIG9mZnNldFBhcmVudCAoYmFkKS4gcG9zaXRpb246IHN0YXRpYyBwcm90ZWN0cyBhZ2FpbnN0IHRoYXQuXG5cbiAgICBwYXJlbnQuYXBwZW5kQ2hpbGQoX3RlbXBEaXYpO1xuICAgIHB4ID0gX3RlbXBEaXZbbWVhc3VyZVByb3BlcnR5XTtcbiAgICBwYXJlbnQucmVtb3ZlQ2hpbGQoX3RlbXBEaXYpO1xuICAgIHN0eWxlLnBvc2l0aW9uID0gXCJhYnNvbHV0ZVwiO1xuXG4gICAgaWYgKGhvcml6b250YWwgJiYgdG9QZXJjZW50KSB7XG4gICAgICBjYWNoZSA9IF9nZXRDYWNoZShwYXJlbnQpO1xuICAgICAgY2FjaGUudGltZSA9IF90aWNrZXIudGltZTtcbiAgICAgIGNhY2hlLndpZHRoID0gcGFyZW50W21lYXN1cmVQcm9wZXJ0eV07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIF9yb3VuZCh0b1BpeGVscyA/IHB4ICogY3VyVmFsdWUgLyBhbW91bnQgOiBweCAmJiBjdXJWYWx1ZSA/IGFtb3VudCAvIHB4ICogY3VyVmFsdWUgOiAwKTtcbn0sXG4gICAgX2dldCA9IGZ1bmN0aW9uIF9nZXQodGFyZ2V0LCBwcm9wZXJ0eSwgdW5pdCwgdW5jYWNoZSkge1xuICB2YXIgdmFsdWU7XG4gIF9wbHVnaW5Jbml0dGVkIHx8IF9pbml0Q29yZSgpO1xuXG4gIGlmIChwcm9wZXJ0eSBpbiBfcHJvcGVydHlBbGlhc2VzICYmIHByb3BlcnR5ICE9PSBcInRyYW5zZm9ybVwiKSB7XG4gICAgcHJvcGVydHkgPSBfcHJvcGVydHlBbGlhc2VzW3Byb3BlcnR5XTtcblxuICAgIGlmICh+cHJvcGVydHkuaW5kZXhPZihcIixcIikpIHtcbiAgICAgIHByb3BlcnR5ID0gcHJvcGVydHkuc3BsaXQoXCIsXCIpWzBdO1xuICAgIH1cbiAgfVxuXG4gIGlmIChfdHJhbnNmb3JtUHJvcHNbcHJvcGVydHldICYmIHByb3BlcnR5ICE9PSBcInRyYW5zZm9ybVwiKSB7XG4gICAgdmFsdWUgPSBfcGFyc2VUcmFuc2Zvcm0odGFyZ2V0LCB1bmNhY2hlKTtcbiAgICB2YWx1ZSA9IHByb3BlcnR5ICE9PSBcInRyYW5zZm9ybU9yaWdpblwiID8gdmFsdWVbcHJvcGVydHldIDogdmFsdWUuc3ZnID8gdmFsdWUub3JpZ2luIDogX2ZpcnN0VHdvT25seShfZ2V0Q29tcHV0ZWRQcm9wZXJ0eSh0YXJnZXQsIF90cmFuc2Zvcm1PcmlnaW5Qcm9wKSkgKyBcIiBcIiArIHZhbHVlLnpPcmlnaW4gKyBcInB4XCI7XG4gIH0gZWxzZSB7XG4gICAgdmFsdWUgPSB0YXJnZXQuc3R5bGVbcHJvcGVydHldO1xuXG4gICAgaWYgKCF2YWx1ZSB8fCB2YWx1ZSA9PT0gXCJhdXRvXCIgfHwgdW5jYWNoZSB8fCB+KHZhbHVlICsgXCJcIikuaW5kZXhPZihcImNhbGMoXCIpKSB7XG4gICAgICB2YWx1ZSA9IF9zcGVjaWFsUHJvcHNbcHJvcGVydHldICYmIF9zcGVjaWFsUHJvcHNbcHJvcGVydHldKHRhcmdldCwgcHJvcGVydHksIHVuaXQpIHx8IF9nZXRDb21wdXRlZFByb3BlcnR5KHRhcmdldCwgcHJvcGVydHkpIHx8IF9nZXRQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5KSB8fCAocHJvcGVydHkgPT09IFwib3BhY2l0eVwiID8gMSA6IDApOyAvLyBub3RlOiBzb21lIGJyb3dzZXJzLCBsaWtlIEZpcmVmb3gsIGRvbid0IHJlcG9ydCBib3JkZXJSYWRpdXMgY29ycmVjdGx5ISBJbnN0ZWFkLCBpdCBvbmx5IHJlcG9ydHMgZXZlcnkgY29ybmVyIGxpa2UgIGJvcmRlclRvcExlZnRSYWRpdXNcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdW5pdCAmJiAhfih2YWx1ZSArIFwiXCIpLnRyaW0oKS5pbmRleE9mKFwiIFwiKSA/IF9jb252ZXJ0VG9Vbml0KHRhcmdldCwgcHJvcGVydHksIHZhbHVlLCB1bml0KSArIHVuaXQgOiB2YWx1ZTtcbn0sXG4gICAgX3R3ZWVuQ29tcGxleENTU1N0cmluZyA9IGZ1bmN0aW9uIF90d2VlbkNvbXBsZXhDU1NTdHJpbmcodGFyZ2V0LCBwcm9wLCBzdGFydCwgZW5kKSB7XG4gIC8vIG5vdGU6IHdlIGNhbGwgX3R3ZWVuQ29tcGxleENTU1N0cmluZy5jYWxsKHBsdWdpbkluc3RhbmNlLi4uKSB0byBlbnN1cmUgdGhhdCBpdCdzIHNjb3BlZCBwcm9wZXJseS4gV2UgbWF5IGNhbGwgaXQgZnJvbSB3aXRoaW4gYSBwbHVnaW4gdG9vLCB0aHVzIFwidGhpc1wiIHdvdWxkIHJlZmVyIHRvIHRoZSBwbHVnaW4uXG4gIGlmICghc3RhcnQgfHwgc3RhcnQgPT09IFwibm9uZVwiKSB7XG4gICAgLy8gc29tZSBicm93c2VycyBsaWtlIFNhZmFyaSBhY3R1YWxseSBQUkVGRVIgdGhlIHByZWZpeGVkIHByb3BlcnR5IGFuZCBtaXMtcmVwb3J0IHRoZSB1bnByZWZpeGVkIHZhbHVlIGxpa2UgY2xpcFBhdGggKEJVRykuIEluIG90aGVyIHdvcmRzLCBldmVuIHRob3VnaCBjbGlwUGF0aCBleGlzdHMgaW4gdGhlIHN0eWxlIChcImNsaXBQYXRoXCIgaW4gdGFyZ2V0LnN0eWxlKSBhbmQgaXQncyBzZXQgaW4gdGhlIENTUyBwcm9wZXJseSAoYWxvbmcgd2l0aCAtd2Via2l0LWNsaXAtcGF0aCksIFNhZmFyaSByZXBvcnRzIGNsaXBQYXRoIGFzIFwibm9uZVwiIHdoZXJlYXMgV2Via2l0Q2xpcFBhdGggcmVwb3J0cyBhY2N1cmF0ZWx5IGxpa2UgXCJlbGxpcHNlKDEwMCUgMCUgYXQgNTAlIDAlKVwiLCBzbyBpbiB0aGlzIGNhc2Ugd2UgbXVzdCBTV0lUQ0ggdG8gdXNpbmcgdGhlIHByZWZpeGVkIHByb3BlcnR5IGluc3RlYWQuIFNlZSBodHRwczovL2dyZWVuc29jay5jb20vZm9ydW1zL3RvcGljLzE4MzEwLWNsaXBwYXRoLWRvZXNudC13b3JrLW9uLWlvcy9cbiAgICB2YXIgcCA9IF9jaGVja1Byb3BQcmVmaXgocHJvcCwgdGFyZ2V0LCAxKSxcbiAgICAgICAgcyA9IHAgJiYgX2dldENvbXB1dGVkUHJvcGVydHkodGFyZ2V0LCBwLCAxKTtcblxuICAgIGlmIChzICYmIHMgIT09IHN0YXJ0KSB7XG4gICAgICBwcm9wID0gcDtcbiAgICAgIHN0YXJ0ID0gcztcbiAgICB9IGVsc2UgaWYgKHByb3AgPT09IFwiYm9yZGVyQ29sb3JcIikge1xuICAgICAgc3RhcnQgPSBfZ2V0Q29tcHV0ZWRQcm9wZXJ0eSh0YXJnZXQsIFwiYm9yZGVyVG9wQ29sb3JcIik7IC8vIEZpcmVmb3ggYnVnOiBhbHdheXMgcmVwb3J0cyBcImJvcmRlckNvbG9yXCIgYXMgXCJcIiwgc28gd2UgbXVzdCBmYWxsIGJhY2sgdG8gYm9yZGVyVG9wQ29sb3IuIFNlZSBodHRwczovL2dyZWVuc29jay5jb20vZm9ydW1zL3RvcGljLzI0NTgzLWhvdy10by1yZXR1cm4tY29sb3JzLXRoYXQtaS1oYWQtYWZ0ZXItcmV2ZXJzZS9cbiAgICB9XG4gIH1cblxuICB2YXIgcHQgPSBuZXcgUHJvcFR3ZWVuKHRoaXMuX3B0LCB0YXJnZXQuc3R5bGUsIHByb3AsIDAsIDEsIF9yZW5kZXJDb21wbGV4U3RyaW5nKSxcbiAgICAgIGluZGV4ID0gMCxcbiAgICAgIG1hdGNoSW5kZXggPSAwLFxuICAgICAgYSxcbiAgICAgIHJlc3VsdCxcbiAgICAgIHN0YXJ0VmFsdWVzLFxuICAgICAgc3RhcnROdW0sXG4gICAgICBjb2xvcixcbiAgICAgIHN0YXJ0VmFsdWUsXG4gICAgICBlbmRWYWx1ZSxcbiAgICAgIGVuZE51bSxcbiAgICAgIGNodW5rLFxuICAgICAgZW5kVW5pdCxcbiAgICAgIHN0YXJ0VW5pdCxcbiAgICAgIGVuZFZhbHVlcztcbiAgcHQuYiA9IHN0YXJ0O1xuICBwdC5lID0gZW5kO1xuICBzdGFydCArPSBcIlwiOyAvLyBlbnN1cmUgdmFsdWVzIGFyZSBzdHJpbmdzXG5cbiAgZW5kICs9IFwiXCI7XG5cbiAgaWYgKGVuZCA9PT0gXCJhdXRvXCIpIHtcbiAgICB0YXJnZXQuc3R5bGVbcHJvcF0gPSBlbmQ7XG4gICAgZW5kID0gX2dldENvbXB1dGVkUHJvcGVydHkodGFyZ2V0LCBwcm9wKSB8fCBlbmQ7XG4gICAgdGFyZ2V0LnN0eWxlW3Byb3BdID0gc3RhcnQ7XG4gIH1cblxuICBhID0gW3N0YXJ0LCBlbmRdO1xuXG4gIF9jb2xvclN0cmluZ0ZpbHRlcihhKTsgLy8gcGFzcyBhbiBhcnJheSB3aXRoIHRoZSBzdGFydGluZyBhbmQgZW5kaW5nIHZhbHVlcyBhbmQgbGV0IHRoZSBmaWx0ZXIgZG8gd2hhdGV2ZXIgaXQgbmVlZHMgdG8gdGhlIHZhbHVlcy4gSWYgY29sb3JzIGFyZSBmb3VuZCwgaXQgcmV0dXJucyB0cnVlIGFuZCB0aGVuIHdlIG11c3QgbWF0Y2ggd2hlcmUgdGhlIGNvbG9yIHNob3dzIHVwIG9yZGVyLXdpc2UgYmVjYXVzZSBmb3IgdGhpbmdzIGxpa2UgYm94U2hhZG93LCBzb21ldGltZXMgdGhlIGJyb3dzZXIgcHJvdmlkZXMgdGhlIGNvbXB1dGVkIHZhbHVlcyB3aXRoIHRoZSBjb2xvciBGSVJTVCwgYnV0IHRoZSB1c2VyIHByb3ZpZGVzIGl0IHdpdGggdGhlIGNvbG9yIExBU1QsIHNvIGZsaXAgdGhlbSBpZiBuZWNlc3NhcnkuIFNhbWUgZm9yIGRyb3Atc2hhZG93KCkuXG5cblxuICBzdGFydCA9IGFbMF07XG4gIGVuZCA9IGFbMV07XG4gIHN0YXJ0VmFsdWVzID0gc3RhcnQubWF0Y2goX251bVdpdGhVbml0RXhwKSB8fCBbXTtcbiAgZW5kVmFsdWVzID0gZW5kLm1hdGNoKF9udW1XaXRoVW5pdEV4cCkgfHwgW107XG5cbiAgaWYgKGVuZFZhbHVlcy5sZW5ndGgpIHtcbiAgICB3aGlsZSAocmVzdWx0ID0gX251bVdpdGhVbml0RXhwLmV4ZWMoZW5kKSkge1xuICAgICAgZW5kVmFsdWUgPSByZXN1bHRbMF07XG4gICAgICBjaHVuayA9IGVuZC5zdWJzdHJpbmcoaW5kZXgsIHJlc3VsdC5pbmRleCk7XG5cbiAgICAgIGlmIChjb2xvcikge1xuICAgICAgICBjb2xvciA9IChjb2xvciArIDEpICUgNTtcbiAgICAgIH0gZWxzZSBpZiAoY2h1bmsuc3Vic3RyKC01KSA9PT0gXCJyZ2JhKFwiIHx8IGNodW5rLnN1YnN0cigtNSkgPT09IFwiaHNsYShcIikge1xuICAgICAgICBjb2xvciA9IDE7XG4gICAgICB9XG5cbiAgICAgIGlmIChlbmRWYWx1ZSAhPT0gKHN0YXJ0VmFsdWUgPSBzdGFydFZhbHVlc1ttYXRjaEluZGV4KytdIHx8IFwiXCIpKSB7XG4gICAgICAgIHN0YXJ0TnVtID0gcGFyc2VGbG9hdChzdGFydFZhbHVlKSB8fCAwO1xuICAgICAgICBzdGFydFVuaXQgPSBzdGFydFZhbHVlLnN1YnN0cigoc3RhcnROdW0gKyBcIlwiKS5sZW5ndGgpO1xuICAgICAgICBlbmRWYWx1ZS5jaGFyQXQoMSkgPT09IFwiPVwiICYmIChlbmRWYWx1ZSA9IF9wYXJzZVJlbGF0aXZlKHN0YXJ0TnVtLCBlbmRWYWx1ZSkgKyBzdGFydFVuaXQpO1xuICAgICAgICBlbmROdW0gPSBwYXJzZUZsb2F0KGVuZFZhbHVlKTtcbiAgICAgICAgZW5kVW5pdCA9IGVuZFZhbHVlLnN1YnN0cigoZW5kTnVtICsgXCJcIikubGVuZ3RoKTtcbiAgICAgICAgaW5kZXggPSBfbnVtV2l0aFVuaXRFeHAubGFzdEluZGV4IC0gZW5kVW5pdC5sZW5ndGg7XG5cbiAgICAgICAgaWYgKCFlbmRVbml0KSB7XG4gICAgICAgICAgLy9pZiBzb21ldGhpbmcgbGlrZSBcInBlcnNwZWN0aXZlOjMwMFwiIGlzIHBhc3NlZCBpbiBhbmQgd2UgbXVzdCBhZGQgYSB1bml0IHRvIHRoZSBlbmRcbiAgICAgICAgICBlbmRVbml0ID0gZW5kVW5pdCB8fCBfY29uZmlnLnVuaXRzW3Byb3BdIHx8IHN0YXJ0VW5pdDtcblxuICAgICAgICAgIGlmIChpbmRleCA9PT0gZW5kLmxlbmd0aCkge1xuICAgICAgICAgICAgZW5kICs9IGVuZFVuaXQ7XG4gICAgICAgICAgICBwdC5lICs9IGVuZFVuaXQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHN0YXJ0VW5pdCAhPT0gZW5kVW5pdCkge1xuICAgICAgICAgIHN0YXJ0TnVtID0gX2NvbnZlcnRUb1VuaXQodGFyZ2V0LCBwcm9wLCBzdGFydFZhbHVlLCBlbmRVbml0KSB8fCAwO1xuICAgICAgICB9IC8vIHRoZXNlIG5lc3RlZCBQcm9wVHdlZW5zIGFyZSBoYW5kbGVkIGluIGEgc3BlY2lhbCB3YXkgLSB3ZSdsbCBuZXZlciBhY3R1YWxseSBjYWxsIGEgcmVuZGVyIG9yIHNldHRlciBtZXRob2Qgb24gdGhlbS4gV2UnbGwganVzdCBsb29wIHRocm91Z2ggdGhlbSBpbiB0aGUgcGFyZW50IGNvbXBsZXggc3RyaW5nIFByb3BUd2VlbidzIHJlbmRlciBtZXRob2QuXG5cblxuICAgICAgICBwdC5fcHQgPSB7XG4gICAgICAgICAgX25leHQ6IHB0Ll9wdCxcbiAgICAgICAgICBwOiBjaHVuayB8fCBtYXRjaEluZGV4ID09PSAxID8gY2h1bmsgOiBcIixcIixcbiAgICAgICAgICAvL25vdGU6IFNWRyBzcGVjIGFsbG93cyBvbWlzc2lvbiBvZiBjb21tYS9zcGFjZSB3aGVuIGEgbmVnYXRpdmUgc2lnbiBpcyB3ZWRnZWQgYmV0d2VlbiB0d28gbnVtYmVycywgbGlrZSAyLjUtNS4zIGluc3RlYWQgb2YgMi41LC01LjMgYnV0IHdoZW4gdHdlZW5pbmcsIHRoZSBuZWdhdGl2ZSB2YWx1ZSBtYXkgc3dpdGNoIHRvIHBvc2l0aXZlLCBzbyB3ZSBpbnNlcnQgdGhlIGNvbW1hIGp1c3QgaW4gY2FzZS5cbiAgICAgICAgICBzOiBzdGFydE51bSxcbiAgICAgICAgICBjOiBlbmROdW0gLSBzdGFydE51bSxcbiAgICAgICAgICBtOiBjb2xvciAmJiBjb2xvciA8IDQgfHwgcHJvcCA9PT0gXCJ6SW5kZXhcIiA/IE1hdGgucm91bmQgOiAwXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfVxuXG4gICAgcHQuYyA9IGluZGV4IDwgZW5kLmxlbmd0aCA/IGVuZC5zdWJzdHJpbmcoaW5kZXgsIGVuZC5sZW5ndGgpIDogXCJcIjsgLy93ZSB1c2UgdGhlIFwiY1wiIG9mIHRoZSBQcm9wVHdlZW4gdG8gc3RvcmUgdGhlIGZpbmFsIHBhcnQgb2YgdGhlIHN0cmluZyAoYWZ0ZXIgdGhlIGxhc3QgbnVtYmVyKVxuICB9IGVsc2Uge1xuICAgIHB0LnIgPSBwcm9wID09PSBcImRpc3BsYXlcIiAmJiBlbmQgPT09IFwibm9uZVwiID8gX3JlbmRlck5vblR3ZWVuaW5nVmFsdWVPbmx5QXRFbmQgOiBfcmVuZGVyTm9uVHdlZW5pbmdWYWx1ZTtcbiAgfVxuXG4gIF9yZWxFeHAudGVzdChlbmQpICYmIChwdC5lID0gMCk7IC8vaWYgdGhlIGVuZCBzdHJpbmcgY29udGFpbnMgcmVsYXRpdmUgdmFsdWVzIG9yIGR5bmFtaWMgcmFuZG9tKC4uLikgdmFsdWVzLCBkZWxldGUgdGhlIGVuZCBpdCBzbyB0aGF0IG9uIHRoZSBmaW5hbCByZW5kZXIgd2UgZG9uJ3QgYWN0dWFsbHkgc2V0IGl0IHRvIHRoZSBzdHJpbmcgd2l0aCArPSBvciAtPSBjaGFyYWN0ZXJzIChmb3JjZXMgaXQgdG8gdXNlIHRoZSBjYWxjdWxhdGVkIHZhbHVlKS5cblxuICB0aGlzLl9wdCA9IHB0OyAvL3N0YXJ0IHRoZSBsaW5rZWQgbGlzdCB3aXRoIHRoaXMgbmV3IFByb3BUd2Vlbi4gUmVtZW1iZXIsIHdlIGNhbGwgX3R3ZWVuQ29tcGxleENTU1N0cmluZy5jYWxsKHBsdWdpbkluc3RhbmNlLi4uKSB0byBlbnN1cmUgdGhhdCBpdCdzIHNjb3BlZCBwcm9wZXJseS4gV2UgbWF5IGNhbGwgaXQgZnJvbSB3aXRoaW4gYW5vdGhlciBwbHVnaW4gdG9vLCB0aHVzIFwidGhpc1wiIHdvdWxkIHJlZmVyIHRvIHRoZSBwbHVnaW4uXG5cbiAgcmV0dXJuIHB0O1xufSxcbiAgICBfa2V5d29yZFRvUGVyY2VudCA9IHtcbiAgdG9wOiBcIjAlXCIsXG4gIGJvdHRvbTogXCIxMDAlXCIsXG4gIGxlZnQ6IFwiMCVcIixcbiAgcmlnaHQ6IFwiMTAwJVwiLFxuICBjZW50ZXI6IFwiNTAlXCJcbn0sXG4gICAgX2NvbnZlcnRLZXl3b3Jkc1RvUGVyY2VudGFnZXMgPSBmdW5jdGlvbiBfY29udmVydEtleXdvcmRzVG9QZXJjZW50YWdlcyh2YWx1ZSkge1xuICB2YXIgc3BsaXQgPSB2YWx1ZS5zcGxpdChcIiBcIiksXG4gICAgICB4ID0gc3BsaXRbMF0sXG4gICAgICB5ID0gc3BsaXRbMV0gfHwgXCI1MCVcIjtcblxuICBpZiAoeCA9PT0gXCJ0b3BcIiB8fCB4ID09PSBcImJvdHRvbVwiIHx8IHkgPT09IFwibGVmdFwiIHx8IHkgPT09IFwicmlnaHRcIikge1xuICAgIC8vdGhlIHVzZXIgcHJvdmlkZWQgdGhlbSBpbiB0aGUgd3Jvbmcgb3JkZXIsIHNvIGZsaXAgdGhlbVxuICAgIHZhbHVlID0geDtcbiAgICB4ID0geTtcbiAgICB5ID0gdmFsdWU7XG4gIH1cblxuICBzcGxpdFswXSA9IF9rZXl3b3JkVG9QZXJjZW50W3hdIHx8IHg7XG4gIHNwbGl0WzFdID0gX2tleXdvcmRUb1BlcmNlbnRbeV0gfHwgeTtcbiAgcmV0dXJuIHNwbGl0LmpvaW4oXCIgXCIpO1xufSxcbiAgICBfcmVuZGVyQ2xlYXJQcm9wcyA9IGZ1bmN0aW9uIF9yZW5kZXJDbGVhclByb3BzKHJhdGlvLCBkYXRhKSB7XG4gIGlmIChkYXRhLnR3ZWVuICYmIGRhdGEudHdlZW4uX3RpbWUgPT09IGRhdGEudHdlZW4uX2R1cikge1xuICAgIHZhciB0YXJnZXQgPSBkYXRhLnQsXG4gICAgICAgIHN0eWxlID0gdGFyZ2V0LnN0eWxlLFxuICAgICAgICBwcm9wcyA9IGRhdGEudSxcbiAgICAgICAgY2FjaGUgPSB0YXJnZXQuX2dzYXAsXG4gICAgICAgIHByb3AsXG4gICAgICAgIGNsZWFyVHJhbnNmb3JtcyxcbiAgICAgICAgaTtcblxuICAgIGlmIChwcm9wcyA9PT0gXCJhbGxcIiB8fCBwcm9wcyA9PT0gdHJ1ZSkge1xuICAgICAgc3R5bGUuY3NzVGV4dCA9IFwiXCI7XG4gICAgICBjbGVhclRyYW5zZm9ybXMgPSAxO1xuICAgIH0gZWxzZSB7XG4gICAgICBwcm9wcyA9IHByb3BzLnNwbGl0KFwiLFwiKTtcbiAgICAgIGkgPSBwcm9wcy5sZW5ndGg7XG5cbiAgICAgIHdoaWxlICgtLWkgPiAtMSkge1xuICAgICAgICBwcm9wID0gcHJvcHNbaV07XG5cbiAgICAgICAgaWYgKF90cmFuc2Zvcm1Qcm9wc1twcm9wXSkge1xuICAgICAgICAgIGNsZWFyVHJhbnNmb3JtcyA9IDE7XG4gICAgICAgICAgcHJvcCA9IHByb3AgPT09IFwidHJhbnNmb3JtT3JpZ2luXCIgPyBfdHJhbnNmb3JtT3JpZ2luUHJvcCA6IF90cmFuc2Zvcm1Qcm9wO1xuICAgICAgICB9XG5cbiAgICAgICAgX3JlbW92ZVByb3BlcnR5KHRhcmdldCwgcHJvcCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGNsZWFyVHJhbnNmb3Jtcykge1xuICAgICAgX3JlbW92ZVByb3BlcnR5KHRhcmdldCwgX3RyYW5zZm9ybVByb3ApO1xuXG4gICAgICBpZiAoY2FjaGUpIHtcbiAgICAgICAgY2FjaGUuc3ZnICYmIHRhcmdldC5yZW1vdmVBdHRyaWJ1dGUoXCJ0cmFuc2Zvcm1cIik7XG5cbiAgICAgICAgX3BhcnNlVHJhbnNmb3JtKHRhcmdldCwgMSk7IC8vIGZvcmNlIGFsbCB0aGUgY2FjaGVkIHZhbHVlcyBiYWNrIHRvIFwibm9ybWFsXCIvaWRlbnRpdHksIG90aGVyd2lzZSBpZiB0aGVyZSdzIGFub3RoZXIgdHdlZW4gdGhhdCdzIGFscmVhZHkgc2V0IHRvIHJlbmRlciB0cmFuc2Zvcm1zIG9uIHRoaXMgZWxlbWVudCwgaXQgY291bGQgZGlzcGxheSB0aGUgd3JvbmcgdmFsdWVzLlxuXG5cbiAgICAgICAgY2FjaGUudW5jYWNoZSA9IDE7XG5cbiAgICAgICAgX3JlbW92ZUluZGVwZW5kZW50VHJhbnNmb3JtcyhzdHlsZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59LFxuICAgIC8vIG5vdGU6IHNwZWNpYWxQcm9wcyBzaG91bGQgcmV0dXJuIDEgaWYgKGFuZCBvbmx5IGlmKSB0aGV5IGhhdmUgYSBub24temVybyBwcmlvcml0eS4gSXQgaW5kaWNhdGVzIHdlIG5lZWQgdG8gc29ydCB0aGUgbGlua2VkIGxpc3QuXG5fc3BlY2lhbFByb3BzID0ge1xuICBjbGVhclByb3BzOiBmdW5jdGlvbiBjbGVhclByb3BzKHBsdWdpbiwgdGFyZ2V0LCBwcm9wZXJ0eSwgZW5kVmFsdWUsIHR3ZWVuKSB7XG4gICAgaWYgKHR3ZWVuLmRhdGEgIT09IFwiaXNGcm9tU3RhcnRcIikge1xuICAgICAgdmFyIHB0ID0gcGx1Z2luLl9wdCA9IG5ldyBQcm9wVHdlZW4ocGx1Z2luLl9wdCwgdGFyZ2V0LCBwcm9wZXJ0eSwgMCwgMCwgX3JlbmRlckNsZWFyUHJvcHMpO1xuICAgICAgcHQudSA9IGVuZFZhbHVlO1xuICAgICAgcHQucHIgPSAtMTA7XG4gICAgICBwdC50d2VlbiA9IHR3ZWVuO1xuXG4gICAgICBwbHVnaW4uX3Byb3BzLnB1c2gocHJvcGVydHkpO1xuXG4gICAgICByZXR1cm4gMTtcbiAgICB9XG4gIH1cbiAgLyogY2xhc3NOYW1lIGZlYXR1cmUgKGFib3V0IDAuNGtiIGd6aXBwZWQpLlxuICAsIGNsYXNzTmFtZShwbHVnaW4sIHRhcmdldCwgcHJvcGVydHksIGVuZFZhbHVlLCB0d2Vlbikge1xuICBcdGxldCBfcmVuZGVyQ2xhc3NOYW1lID0gKHJhdGlvLCBkYXRhKSA9PiB7XG4gIFx0XHRcdGRhdGEuY3NzLnJlbmRlcihyYXRpbywgZGF0YS5jc3MpO1xuICBcdFx0XHRpZiAoIXJhdGlvIHx8IHJhdGlvID09PSAxKSB7XG4gIFx0XHRcdFx0bGV0IGlubGluZSA9IGRhdGEucm12LFxuICBcdFx0XHRcdFx0dGFyZ2V0ID0gZGF0YS50LFxuICBcdFx0XHRcdFx0cDtcbiAgXHRcdFx0XHR0YXJnZXQuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgcmF0aW8gPyBkYXRhLmUgOiBkYXRhLmIpO1xuICBcdFx0XHRcdGZvciAocCBpbiBpbmxpbmUpIHtcbiAgXHRcdFx0XHRcdF9yZW1vdmVQcm9wZXJ0eSh0YXJnZXQsIHApO1xuICBcdFx0XHRcdH1cbiAgXHRcdFx0fVxuICBcdFx0fSxcbiAgXHRcdF9nZXRBbGxTdHlsZXMgPSAodGFyZ2V0KSA9PiB7XG4gIFx0XHRcdGxldCBzdHlsZXMgPSB7fSxcbiAgXHRcdFx0XHRjb21wdXRlZCA9IGdldENvbXB1dGVkU3R5bGUodGFyZ2V0KSxcbiAgXHRcdFx0XHRwO1xuICBcdFx0XHRmb3IgKHAgaW4gY29tcHV0ZWQpIHtcbiAgXHRcdFx0XHRpZiAoaXNOYU4ocCkgJiYgcCAhPT0gXCJjc3NUZXh0XCIgJiYgcCAhPT0gXCJsZW5ndGhcIikge1xuICBcdFx0XHRcdFx0c3R5bGVzW3BdID0gY29tcHV0ZWRbcF07XG4gIFx0XHRcdFx0fVxuICBcdFx0XHR9XG4gIFx0XHRcdF9zZXREZWZhdWx0cyhzdHlsZXMsIF9wYXJzZVRyYW5zZm9ybSh0YXJnZXQsIDEpKTtcbiAgXHRcdFx0cmV0dXJuIHN0eWxlcztcbiAgXHRcdH0sXG4gIFx0XHRzdGFydENsYXNzTGlzdCA9IHRhcmdldC5nZXRBdHRyaWJ1dGUoXCJjbGFzc1wiKSxcbiAgXHRcdHN0eWxlID0gdGFyZ2V0LnN0eWxlLFxuICBcdFx0Y3NzVGV4dCA9IHN0eWxlLmNzc1RleHQsXG4gIFx0XHRjYWNoZSA9IHRhcmdldC5fZ3NhcCxcbiAgXHRcdGNsYXNzUFQgPSBjYWNoZS5jbGFzc1BULFxuICBcdFx0aW5saW5lVG9SZW1vdmVBdEVuZCA9IHt9LFxuICBcdFx0ZGF0YSA9IHt0OnRhcmdldCwgcGx1Z2luOnBsdWdpbiwgcm12OmlubGluZVRvUmVtb3ZlQXRFbmQsIGI6c3RhcnRDbGFzc0xpc3QsIGU6KGVuZFZhbHVlLmNoYXJBdCgxKSAhPT0gXCI9XCIpID8gZW5kVmFsdWUgOiBzdGFydENsYXNzTGlzdC5yZXBsYWNlKG5ldyBSZWdFeHAoXCIoPzpcXFxcc3xeKVwiICsgZW5kVmFsdWUuc3Vic3RyKDIpICsgXCIoPyFbXFxcXHctXSlcIiksIFwiXCIpICsgKChlbmRWYWx1ZS5jaGFyQXQoMCkgPT09IFwiK1wiKSA/IFwiIFwiICsgZW5kVmFsdWUuc3Vic3RyKDIpIDogXCJcIil9LFxuICBcdFx0Y2hhbmdpbmdWYXJzID0ge30sXG4gIFx0XHRzdGFydFZhcnMgPSBfZ2V0QWxsU3R5bGVzKHRhcmdldCksXG4gIFx0XHR0cmFuc2Zvcm1SZWxhdGVkID0gLyh0cmFuc2Zvcm18cGVyc3BlY3RpdmUpL2ksXG4gIFx0XHRlbmRWYXJzLCBwO1xuICBcdGlmIChjbGFzc1BUKSB7XG4gIFx0XHRjbGFzc1BULnIoMSwgY2xhc3NQVC5kKTtcbiAgXHRcdF9yZW1vdmVMaW5rZWRMaXN0SXRlbShjbGFzc1BULmQucGx1Z2luLCBjbGFzc1BULCBcIl9wdFwiKTtcbiAgXHR9XG4gIFx0dGFyZ2V0LnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIGRhdGEuZSk7XG4gIFx0ZW5kVmFycyA9IF9nZXRBbGxTdHlsZXModGFyZ2V0LCB0cnVlKTtcbiAgXHR0YXJnZXQuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgc3RhcnRDbGFzc0xpc3QpO1xuICBcdGZvciAocCBpbiBlbmRWYXJzKSB7XG4gIFx0XHRpZiAoZW5kVmFyc1twXSAhPT0gc3RhcnRWYXJzW3BdICYmICF0cmFuc2Zvcm1SZWxhdGVkLnRlc3QocCkpIHtcbiAgXHRcdFx0Y2hhbmdpbmdWYXJzW3BdID0gZW5kVmFyc1twXTtcbiAgXHRcdFx0aWYgKCFzdHlsZVtwXSAmJiBzdHlsZVtwXSAhPT0gXCIwXCIpIHtcbiAgXHRcdFx0XHRpbmxpbmVUb1JlbW92ZUF0RW5kW3BdID0gMTtcbiAgXHRcdFx0fVxuICBcdFx0fVxuICBcdH1cbiAgXHRjYWNoZS5jbGFzc1BUID0gcGx1Z2luLl9wdCA9IG5ldyBQcm9wVHdlZW4ocGx1Z2luLl9wdCwgdGFyZ2V0LCBcImNsYXNzTmFtZVwiLCAwLCAwLCBfcmVuZGVyQ2xhc3NOYW1lLCBkYXRhLCAwLCAtMTEpO1xuICBcdGlmIChzdHlsZS5jc3NUZXh0ICE9PSBjc3NUZXh0KSB7IC8vb25seSBhcHBseSBpZiB0aGluZ3MgY2hhbmdlLiBPdGhlcndpc2UsIGluIGNhc2VzIGxpa2UgYSBiYWNrZ3JvdW5kLWltYWdlIHRoYXQncyBwdWxsZWQgZHluYW1pY2FsbHksIGl0IGNvdWxkIGNhdXNlIGEgcmVmcmVzaC4gU2VlIGh0dHBzOi8vZ3JlZW5zb2NrLmNvbS9mb3J1bXMvdG9waWMvMjAzNjgtcG9zc2libGUtZ3NhcC1idWctc3dpdGNoaW5nLWNsYXNzbmFtZXMtaW4tY2hyb21lLy5cbiAgXHRcdHN0eWxlLmNzc1RleHQgPSBjc3NUZXh0OyAvL3dlIHJlY29yZGVkIGNzc1RleHQgYmVmb3JlIHdlIHN3YXBwZWQgY2xhc3NlcyBhbmQgcmFuIF9nZXRBbGxTdHlsZXMoKSBiZWNhdXNlIGluIGNhc2VzIHdoZW4gYSBjbGFzc05hbWUgdHdlZW4gaXMgb3ZlcndyaXR0ZW4sIHdlIHJlbW92ZSBhbGwgdGhlIHJlbGF0ZWQgdHdlZW5pbmcgcHJvcGVydGllcyBmcm9tIHRoYXQgY2xhc3MgY2hhbmdlIChvdGhlcndpc2UgY2xhc3Mtc3BlY2lmaWMgc3R1ZmYgY2FuJ3Qgb3ZlcnJpZGUgcHJvcGVydGllcyB3ZSd2ZSBkaXJlY3RseSBzZXQgb24gdGhlIHRhcmdldCdzIHN0eWxlIG9iamVjdCBkdWUgdG8gc3BlY2lmaWNpdHkpLlxuICBcdH1cbiAgXHRfcGFyc2VUcmFuc2Zvcm0odGFyZ2V0LCB0cnVlKTsgLy90byBjbGVhciB0aGUgY2FjaGluZyBvZiB0cmFuc2Zvcm1zXG4gIFx0ZGF0YS5jc3MgPSBuZXcgZ3NhcC5wbHVnaW5zLmNzcygpO1xuICBcdGRhdGEuY3NzLmluaXQodGFyZ2V0LCBjaGFuZ2luZ1ZhcnMsIHR3ZWVuKTtcbiAgXHRwbHVnaW4uX3Byb3BzLnB1c2goLi4uZGF0YS5jc3MuX3Byb3BzKTtcbiAgXHRyZXR1cm4gMTtcbiAgfVxuICAqL1xuXG59LFxuXG4vKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIFRSQU5TRk9STVNcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cbl9pZGVudGl0eTJETWF0cml4ID0gWzEsIDAsIDAsIDEsIDAsIDBdLFxuICAgIF9yb3RhdGlvbmFsUHJvcGVydGllcyA9IHt9LFxuICAgIF9pc051bGxUcmFuc2Zvcm0gPSBmdW5jdGlvbiBfaXNOdWxsVHJhbnNmb3JtKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSA9PT0gXCJtYXRyaXgoMSwgMCwgMCwgMSwgMCwgMClcIiB8fCB2YWx1ZSA9PT0gXCJub25lXCIgfHwgIXZhbHVlO1xufSxcbiAgICBfZ2V0Q29tcHV0ZWRUcmFuc2Zvcm1NYXRyaXhBc0FycmF5ID0gZnVuY3Rpb24gX2dldENvbXB1dGVkVHJhbnNmb3JtTWF0cml4QXNBcnJheSh0YXJnZXQpIHtcbiAgdmFyIG1hdHJpeFN0cmluZyA9IF9nZXRDb21wdXRlZFByb3BlcnR5KHRhcmdldCwgX3RyYW5zZm9ybVByb3ApO1xuXG4gIHJldHVybiBfaXNOdWxsVHJhbnNmb3JtKG1hdHJpeFN0cmluZykgPyBfaWRlbnRpdHkyRE1hdHJpeCA6IG1hdHJpeFN0cmluZy5zdWJzdHIoNykubWF0Y2goX251bUV4cCkubWFwKF9yb3VuZCk7XG59LFxuICAgIF9nZXRNYXRyaXggPSBmdW5jdGlvbiBfZ2V0TWF0cml4KHRhcmdldCwgZm9yY2UyRCkge1xuICB2YXIgY2FjaGUgPSB0YXJnZXQuX2dzYXAgfHwgX2dldENhY2hlKHRhcmdldCksXG4gICAgICBzdHlsZSA9IHRhcmdldC5zdHlsZSxcbiAgICAgIG1hdHJpeCA9IF9nZXRDb21wdXRlZFRyYW5zZm9ybU1hdHJpeEFzQXJyYXkodGFyZ2V0KSxcbiAgICAgIHBhcmVudCxcbiAgICAgIG5leHRTaWJsaW5nLFxuICAgICAgdGVtcCxcbiAgICAgIGFkZGVkVG9ET007XG5cbiAgaWYgKGNhY2hlLnN2ZyAmJiB0YXJnZXQuZ2V0QXR0cmlidXRlKFwidHJhbnNmb3JtXCIpKSB7XG4gICAgdGVtcCA9IHRhcmdldC50cmFuc2Zvcm0uYmFzZVZhbC5jb25zb2xpZGF0ZSgpLm1hdHJpeDsgLy9lbnN1cmVzIHRoYXQgZXZlbiBjb21wbGV4IHZhbHVlcyBsaWtlIFwidHJhbnNsYXRlKDUwLDYwKSByb3RhdGUoMTM1LDAsMClcIiBhcmUgcGFyc2VkIGJlY2F1c2UgaXQgbWFzaGVzIGl0IGludG8gYSBtYXRyaXguXG5cbiAgICBtYXRyaXggPSBbdGVtcC5hLCB0ZW1wLmIsIHRlbXAuYywgdGVtcC5kLCB0ZW1wLmUsIHRlbXAuZl07XG4gICAgcmV0dXJuIG1hdHJpeC5qb2luKFwiLFwiKSA9PT0gXCIxLDAsMCwxLDAsMFwiID8gX2lkZW50aXR5MkRNYXRyaXggOiBtYXRyaXg7XG4gIH0gZWxzZSBpZiAobWF0cml4ID09PSBfaWRlbnRpdHkyRE1hdHJpeCAmJiAhdGFyZ2V0Lm9mZnNldFBhcmVudCAmJiB0YXJnZXQgIT09IF9kb2NFbGVtZW50ICYmICFjYWNoZS5zdmcpIHtcbiAgICAvL25vdGU6IGlmIG9mZnNldFBhcmVudCBpcyBudWxsLCB0aGF0IG1lYW5zIHRoZSBlbGVtZW50IGlzbid0IGluIHRoZSBub3JtYWwgZG9jdW1lbnQgZmxvdywgbGlrZSBpZiBpdCBoYXMgZGlzcGxheTpub25lIG9yIG9uZSBvZiBpdHMgYW5jZXN0b3JzIGhhcyBkaXNwbGF5Om5vbmUpLiBGaXJlZm94IHJldHVybnMgbnVsbCBmb3IgZ2V0Q29tcHV0ZWRTdHlsZSgpIGlmIHRoZSBlbGVtZW50IGlzIGluIGFuIGlmcmFtZSB0aGF0IGhhcyBkaXNwbGF5Om5vbmUuIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTU0ODM5N1xuICAgIC8vYnJvd3NlcnMgZG9uJ3QgcmVwb3J0IHRyYW5zZm9ybXMgYWNjdXJhdGVseSB1bmxlc3MgdGhlIGVsZW1lbnQgaXMgaW4gdGhlIERPTSBhbmQgaGFzIGEgZGlzcGxheSB2YWx1ZSB0aGF0J3Mgbm90IFwibm9uZVwiLiBGaXJlZm94IGFuZCBNaWNyb3NvZnQgYnJvd3NlcnMgaGF2ZSBhIHBhcnRpYWwgYnVnIHdoZXJlIHRoZXknbGwgcmVwb3J0IHRyYW5zZm9ybXMgZXZlbiBpZiBkaXNwbGF5Om5vbmUgQlVUIG5vdCBhbnkgcGVyY2VudGFnZS1iYXNlZCB2YWx1ZXMgbGlrZSB0cmFuc2xhdGUoLTUwJSwgOHB4KSB3aWxsIGJlIHJlcG9ydGVkIGFzIGlmIGl0J3MgdHJhbnNsYXRlKDAsIDhweCkuXG4gICAgdGVtcCA9IHN0eWxlLmRpc3BsYXk7XG4gICAgc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcbiAgICBwYXJlbnQgPSB0YXJnZXQucGFyZW50Tm9kZTtcblxuICAgIGlmICghcGFyZW50IHx8ICF0YXJnZXQub2Zmc2V0UGFyZW50KSB7XG4gICAgICAvLyBub3RlOiBpbiAzLjMuMCB3ZSBzd2l0Y2hlZCB0YXJnZXQub2Zmc2V0UGFyZW50IHRvIF9kb2MuYm9keS5jb250YWlucyh0YXJnZXQpIHRvIGF2b2lkIFtzb21ldGltZXMgdW5uZWNlc3NhcnldIE11dGF0aW9uT2JzZXJ2ZXIgY2FsbHMgYnV0IHRoYXQgd2Fzbid0IGFkZXF1YXRlIGJlY2F1c2UgdGhlcmUgYXJlIGVkZ2UgY2FzZXMgd2hlcmUgbmVzdGVkIHBvc2l0aW9uOiBmaXhlZCBlbGVtZW50cyBuZWVkIHRvIGdldCByZXBhcmVudGVkIHRvIGFjY3VyYXRlbHkgc2Vuc2UgdHJhbnNmb3Jtcy4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9ncmVlbnNvY2svR1NBUC9pc3N1ZXMvMzg4IGFuZCBodHRwczovL2dpdGh1Yi5jb20vZ3JlZW5zb2NrL0dTQVAvaXNzdWVzLzM3NVxuICAgICAgYWRkZWRUb0RPTSA9IDE7IC8vZmxhZ1xuXG4gICAgICBuZXh0U2libGluZyA9IHRhcmdldC5uZXh0RWxlbWVudFNpYmxpbmc7XG5cbiAgICAgIF9kb2NFbGVtZW50LmFwcGVuZENoaWxkKHRhcmdldCk7IC8vd2UgbXVzdCBhZGQgaXQgdG8gdGhlIERPTSBpbiBvcmRlciB0byBnZXQgdmFsdWVzIHByb3Blcmx5XG5cbiAgICB9XG5cbiAgICBtYXRyaXggPSBfZ2V0Q29tcHV0ZWRUcmFuc2Zvcm1NYXRyaXhBc0FycmF5KHRhcmdldCk7XG4gICAgdGVtcCA/IHN0eWxlLmRpc3BsYXkgPSB0ZW1wIDogX3JlbW92ZVByb3BlcnR5KHRhcmdldCwgXCJkaXNwbGF5XCIpO1xuXG4gICAgaWYgKGFkZGVkVG9ET00pIHtcbiAgICAgIG5leHRTaWJsaW5nID8gcGFyZW50Lmluc2VydEJlZm9yZSh0YXJnZXQsIG5leHRTaWJsaW5nKSA6IHBhcmVudCA/IHBhcmVudC5hcHBlbmRDaGlsZCh0YXJnZXQpIDogX2RvY0VsZW1lbnQucmVtb3ZlQ2hpbGQodGFyZ2V0KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZm9yY2UyRCAmJiBtYXRyaXgubGVuZ3RoID4gNiA/IFttYXRyaXhbMF0sIG1hdHJpeFsxXSwgbWF0cml4WzRdLCBtYXRyaXhbNV0sIG1hdHJpeFsxMl0sIG1hdHJpeFsxM11dIDogbWF0cml4O1xufSxcbiAgICBfYXBwbHlTVkdPcmlnaW4gPSBmdW5jdGlvbiBfYXBwbHlTVkdPcmlnaW4odGFyZ2V0LCBvcmlnaW4sIG9yaWdpbklzQWJzb2x1dGUsIHNtb290aCwgbWF0cml4QXJyYXksIHBsdWdpblRvQWRkUHJvcFR3ZWVuc1RvKSB7XG4gIHZhciBjYWNoZSA9IHRhcmdldC5fZ3NhcCxcbiAgICAgIG1hdHJpeCA9IG1hdHJpeEFycmF5IHx8IF9nZXRNYXRyaXgodGFyZ2V0LCB0cnVlKSxcbiAgICAgIHhPcmlnaW5PbGQgPSBjYWNoZS54T3JpZ2luIHx8IDAsXG4gICAgICB5T3JpZ2luT2xkID0gY2FjaGUueU9yaWdpbiB8fCAwLFxuICAgICAgeE9mZnNldE9sZCA9IGNhY2hlLnhPZmZzZXQgfHwgMCxcbiAgICAgIHlPZmZzZXRPbGQgPSBjYWNoZS55T2Zmc2V0IHx8IDAsXG4gICAgICBhID0gbWF0cml4WzBdLFxuICAgICAgYiA9IG1hdHJpeFsxXSxcbiAgICAgIGMgPSBtYXRyaXhbMl0sXG4gICAgICBkID0gbWF0cml4WzNdLFxuICAgICAgdHggPSBtYXRyaXhbNF0sXG4gICAgICB0eSA9IG1hdHJpeFs1XSxcbiAgICAgIG9yaWdpblNwbGl0ID0gb3JpZ2luLnNwbGl0KFwiIFwiKSxcbiAgICAgIHhPcmlnaW4gPSBwYXJzZUZsb2F0KG9yaWdpblNwbGl0WzBdKSB8fCAwLFxuICAgICAgeU9yaWdpbiA9IHBhcnNlRmxvYXQob3JpZ2luU3BsaXRbMV0pIHx8IDAsXG4gICAgICBib3VuZHMsXG4gICAgICBkZXRlcm1pbmFudCxcbiAgICAgIHgsXG4gICAgICB5O1xuXG4gIGlmICghb3JpZ2luSXNBYnNvbHV0ZSkge1xuICAgIGJvdW5kcyA9IF9nZXRCQm94KHRhcmdldCk7XG4gICAgeE9yaWdpbiA9IGJvdW5kcy54ICsgKH5vcmlnaW5TcGxpdFswXS5pbmRleE9mKFwiJVwiKSA/IHhPcmlnaW4gLyAxMDAgKiBib3VuZHMud2lkdGggOiB4T3JpZ2luKTtcbiAgICB5T3JpZ2luID0gYm91bmRzLnkgKyAofihvcmlnaW5TcGxpdFsxXSB8fCBvcmlnaW5TcGxpdFswXSkuaW5kZXhPZihcIiVcIikgPyB5T3JpZ2luIC8gMTAwICogYm91bmRzLmhlaWdodCA6IHlPcmlnaW4pO1xuICB9IGVsc2UgaWYgKG1hdHJpeCAhPT0gX2lkZW50aXR5MkRNYXRyaXggJiYgKGRldGVybWluYW50ID0gYSAqIGQgLSBiICogYykpIHtcbiAgICAvL2lmIGl0J3MgemVybyAobGlrZSBpZiBzY2FsZVggYW5kIHNjYWxlWSBhcmUgemVybyksIHNraXAgaXQgdG8gYXZvaWQgZXJyb3JzIHdpdGggZGl2aWRpbmcgYnkgemVyby5cbiAgICB4ID0geE9yaWdpbiAqIChkIC8gZGV0ZXJtaW5hbnQpICsgeU9yaWdpbiAqICgtYyAvIGRldGVybWluYW50KSArIChjICogdHkgLSBkICogdHgpIC8gZGV0ZXJtaW5hbnQ7XG4gICAgeSA9IHhPcmlnaW4gKiAoLWIgLyBkZXRlcm1pbmFudCkgKyB5T3JpZ2luICogKGEgLyBkZXRlcm1pbmFudCkgLSAoYSAqIHR5IC0gYiAqIHR4KSAvIGRldGVybWluYW50O1xuICAgIHhPcmlnaW4gPSB4O1xuICAgIHlPcmlnaW4gPSB5O1xuICB9XG5cbiAgaWYgKHNtb290aCB8fCBzbW9vdGggIT09IGZhbHNlICYmIGNhY2hlLnNtb290aCkge1xuICAgIHR4ID0geE9yaWdpbiAtIHhPcmlnaW5PbGQ7XG4gICAgdHkgPSB5T3JpZ2luIC0geU9yaWdpbk9sZDtcbiAgICBjYWNoZS54T2Zmc2V0ID0geE9mZnNldE9sZCArICh0eCAqIGEgKyB0eSAqIGMpIC0gdHg7XG4gICAgY2FjaGUueU9mZnNldCA9IHlPZmZzZXRPbGQgKyAodHggKiBiICsgdHkgKiBkKSAtIHR5O1xuICB9IGVsc2Uge1xuICAgIGNhY2hlLnhPZmZzZXQgPSBjYWNoZS55T2Zmc2V0ID0gMDtcbiAgfVxuXG4gIGNhY2hlLnhPcmlnaW4gPSB4T3JpZ2luO1xuICBjYWNoZS55T3JpZ2luID0geU9yaWdpbjtcbiAgY2FjaGUuc21vb3RoID0gISFzbW9vdGg7XG4gIGNhY2hlLm9yaWdpbiA9IG9yaWdpbjtcbiAgY2FjaGUub3JpZ2luSXNBYnNvbHV0ZSA9ICEhb3JpZ2luSXNBYnNvbHV0ZTtcbiAgdGFyZ2V0LnN0eWxlW190cmFuc2Zvcm1PcmlnaW5Qcm9wXSA9IFwiMHB4IDBweFwiOyAvL290aGVyd2lzZSwgaWYgc29tZW9uZSBzZXRzICBhbiBvcmlnaW4gdmlhIENTUywgaXQgd2lsbCBsaWtlbHkgaW50ZXJmZXJlIHdpdGggdGhlIFNWRyB0cmFuc2Zvcm0gYXR0cmlidXRlIG9uZXMgKGJlY2F1c2UgcmVtZW1iZXIsIHdlJ3JlIGJha2luZyB0aGUgb3JpZ2luIGludG8gdGhlIG1hdHJpeCgpIHZhbHVlKS5cblxuICBpZiAocGx1Z2luVG9BZGRQcm9wVHdlZW5zVG8pIHtcbiAgICBfYWRkTm9uVHdlZW5pbmdQVChwbHVnaW5Ub0FkZFByb3BUd2VlbnNUbywgY2FjaGUsIFwieE9yaWdpblwiLCB4T3JpZ2luT2xkLCB4T3JpZ2luKTtcblxuICAgIF9hZGROb25Ud2VlbmluZ1BUKHBsdWdpblRvQWRkUHJvcFR3ZWVuc1RvLCBjYWNoZSwgXCJ5T3JpZ2luXCIsIHlPcmlnaW5PbGQsIHlPcmlnaW4pO1xuXG4gICAgX2FkZE5vblR3ZWVuaW5nUFQocGx1Z2luVG9BZGRQcm9wVHdlZW5zVG8sIGNhY2hlLCBcInhPZmZzZXRcIiwgeE9mZnNldE9sZCwgY2FjaGUueE9mZnNldCk7XG5cbiAgICBfYWRkTm9uVHdlZW5pbmdQVChwbHVnaW5Ub0FkZFByb3BUd2VlbnNUbywgY2FjaGUsIFwieU9mZnNldFwiLCB5T2Zmc2V0T2xkLCBjYWNoZS55T2Zmc2V0KTtcbiAgfVxuXG4gIHRhcmdldC5zZXRBdHRyaWJ1dGUoXCJkYXRhLXN2Zy1vcmlnaW5cIiwgeE9yaWdpbiArIFwiIFwiICsgeU9yaWdpbik7XG59LFxuICAgIF9wYXJzZVRyYW5zZm9ybSA9IGZ1bmN0aW9uIF9wYXJzZVRyYW5zZm9ybSh0YXJnZXQsIHVuY2FjaGUpIHtcbiAgdmFyIGNhY2hlID0gdGFyZ2V0Ll9nc2FwIHx8IG5ldyBHU0NhY2hlKHRhcmdldCk7XG5cbiAgaWYgKFwieFwiIGluIGNhY2hlICYmICF1bmNhY2hlICYmICFjYWNoZS51bmNhY2hlKSB7XG4gICAgcmV0dXJuIGNhY2hlO1xuICB9XG5cbiAgdmFyIHN0eWxlID0gdGFyZ2V0LnN0eWxlLFxuICAgICAgaW52ZXJ0ZWRTY2FsZVggPSBjYWNoZS5zY2FsZVggPCAwLFxuICAgICAgcHggPSBcInB4XCIsXG4gICAgICBkZWcgPSBcImRlZ1wiLFxuICAgICAgY3MgPSBnZXRDb21wdXRlZFN0eWxlKHRhcmdldCksXG4gICAgICBvcmlnaW4gPSBfZ2V0Q29tcHV0ZWRQcm9wZXJ0eSh0YXJnZXQsIF90cmFuc2Zvcm1PcmlnaW5Qcm9wKSB8fCBcIjBcIixcbiAgICAgIHgsXG4gICAgICB5LFxuICAgICAgeixcbiAgICAgIHNjYWxlWCxcbiAgICAgIHNjYWxlWSxcbiAgICAgIHJvdGF0aW9uLFxuICAgICAgcm90YXRpb25YLFxuICAgICAgcm90YXRpb25ZLFxuICAgICAgc2tld1gsXG4gICAgICBza2V3WSxcbiAgICAgIHBlcnNwZWN0aXZlLFxuICAgICAgeE9yaWdpbixcbiAgICAgIHlPcmlnaW4sXG4gICAgICBtYXRyaXgsXG4gICAgICBhbmdsZSxcbiAgICAgIGNvcyxcbiAgICAgIHNpbixcbiAgICAgIGEsXG4gICAgICBiLFxuICAgICAgYyxcbiAgICAgIGQsXG4gICAgICBhMTIsXG4gICAgICBhMjIsXG4gICAgICB0MSxcbiAgICAgIHQyLFxuICAgICAgdDMsXG4gICAgICBhMTMsXG4gICAgICBhMjMsXG4gICAgICBhMzMsXG4gICAgICBhNDIsXG4gICAgICBhNDMsXG4gICAgICBhMzI7XG4gIHggPSB5ID0geiA9IHJvdGF0aW9uID0gcm90YXRpb25YID0gcm90YXRpb25ZID0gc2tld1ggPSBza2V3WSA9IHBlcnNwZWN0aXZlID0gMDtcbiAgc2NhbGVYID0gc2NhbGVZID0gMTtcbiAgY2FjaGUuc3ZnID0gISEodGFyZ2V0LmdldENUTSAmJiBfaXNTVkcodGFyZ2V0KSk7XG5cbiAgaWYgKGNzLnRyYW5zbGF0ZSkge1xuICAgIC8vIGFjY29tbW9kYXRlIGluZGVwZW5kZW50IHRyYW5zZm9ybXMgYnkgY29tYmluaW5nIHRoZW0gaW50byBub3JtYWwgb25lcy5cbiAgICBpZiAoY3MudHJhbnNsYXRlICE9PSBcIm5vbmVcIiB8fCBjcy5zY2FsZSAhPT0gXCJub25lXCIgfHwgY3Mucm90YXRlICE9PSBcIm5vbmVcIikge1xuICAgICAgc3R5bGVbX3RyYW5zZm9ybVByb3BdID0gKGNzLnRyYW5zbGF0ZSAhPT0gXCJub25lXCIgPyBcInRyYW5zbGF0ZTNkKFwiICsgKGNzLnRyYW5zbGF0ZSArIFwiIDAgMFwiKS5zcGxpdChcIiBcIikuc2xpY2UoMCwgMykuam9pbihcIiwgXCIpICsgXCIpIFwiIDogXCJcIikgKyAoY3Mucm90YXRlICE9PSBcIm5vbmVcIiA/IFwicm90YXRlKFwiICsgY3Mucm90YXRlICsgXCIpIFwiIDogXCJcIikgKyAoY3Muc2NhbGUgIT09IFwibm9uZVwiID8gXCJzY2FsZShcIiArIGNzLnNjYWxlLnNwbGl0KFwiIFwiKS5qb2luKFwiLFwiKSArIFwiKSBcIiA6IFwiXCIpICsgY3NbX3RyYW5zZm9ybVByb3BdO1xuICAgIH1cblxuICAgIHN0eWxlLnNjYWxlID0gc3R5bGUucm90YXRlID0gc3R5bGUudHJhbnNsYXRlID0gXCJub25lXCI7XG4gIH1cblxuICBtYXRyaXggPSBfZ2V0TWF0cml4KHRhcmdldCwgY2FjaGUuc3ZnKTtcblxuICBpZiAoY2FjaGUuc3ZnKSB7XG4gICAgdDEgPSAoIWNhY2hlLnVuY2FjaGUgfHwgb3JpZ2luID09PSBcIjBweCAwcHhcIikgJiYgIXVuY2FjaGUgJiYgdGFyZ2V0LmdldEF0dHJpYnV0ZShcImRhdGEtc3ZnLW9yaWdpblwiKTsgLy8gaWYgb3JpZ2luIGlzIDAsMCBhbmQgY2FjaGUudW5jYWNoZSBpcyB0cnVlLCBsZXQgdGhlIHJlY29yZGVkIGRhdGEtc3ZnLW9yaWdpbiBzdGF5LiBPdGhlcndpc2UsIHdoZW5ldmVyIHdlIHNldCBjYWNoZS51bmNhY2hlIHRvIHRydWUsIHdlJ2QgbmVlZCB0byBzZXQgZWxlbWVudC5zdHlsZS50cmFuc2Zvcm1PcmlnaW4gPSAoY2FjaGUueE9yaWdpbiAtIGJib3gueCkgKyBcInB4IFwiICsgKGNhY2hlLnlPcmlnaW4gLSBiYm94LnkpICsgXCJweFwiLiBSZW1lbWJlciwgdG8gd29yayBhcm91bmQgYnJvd3NlciBpbmNvbnNpc3RlbmNpZXMgd2UgYWx3YXlzIGZvcmNlIFNWRyBlbGVtZW50cycgdHJhbnNmb3JtT3JpZ2luIHRvIDAsMCBhbmQgb2Zmc2V0IHRoZSB0cmFuc2xhdGlvbiBhY2NvcmRpbmdseS5cblxuICAgIF9hcHBseVNWR09yaWdpbih0YXJnZXQsIHQxIHx8IG9yaWdpbiwgISF0MSB8fCBjYWNoZS5vcmlnaW5Jc0Fic29sdXRlLCBjYWNoZS5zbW9vdGggIT09IGZhbHNlLCBtYXRyaXgpO1xuICB9XG5cbiAgeE9yaWdpbiA9IGNhY2hlLnhPcmlnaW4gfHwgMDtcbiAgeU9yaWdpbiA9IGNhY2hlLnlPcmlnaW4gfHwgMDtcblxuICBpZiAobWF0cml4ICE9PSBfaWRlbnRpdHkyRE1hdHJpeCkge1xuICAgIGEgPSBtYXRyaXhbMF07IC8vYTExXG5cbiAgICBiID0gbWF0cml4WzFdOyAvL2EyMVxuXG4gICAgYyA9IG1hdHJpeFsyXTsgLy9hMzFcblxuICAgIGQgPSBtYXRyaXhbM107IC8vYTQxXG5cbiAgICB4ID0gYTEyID0gbWF0cml4WzRdO1xuICAgIHkgPSBhMjIgPSBtYXRyaXhbNV07IC8vMkQgbWF0cml4XG5cbiAgICBpZiAobWF0cml4Lmxlbmd0aCA9PT0gNikge1xuICAgICAgc2NhbGVYID0gTWF0aC5zcXJ0KGEgKiBhICsgYiAqIGIpO1xuICAgICAgc2NhbGVZID0gTWF0aC5zcXJ0KGQgKiBkICsgYyAqIGMpO1xuICAgICAgcm90YXRpb24gPSBhIHx8IGIgPyBfYXRhbjIoYiwgYSkgKiBfUkFEMkRFRyA6IDA7IC8vbm90ZTogaWYgc2NhbGVYIGlzIDAsIHdlIGNhbm5vdCBhY2N1cmF0ZWx5IG1lYXN1cmUgcm90YXRpb24uIFNhbWUgZm9yIHNrZXdYIHdpdGggYSBzY2FsZVkgb2YgMC4gVGhlcmVmb3JlLCB3ZSBkZWZhdWx0IHRvIHRoZSBwcmV2aW91c2x5IHJlY29yZGVkIHZhbHVlIChvciB6ZXJvIGlmIHRoYXQgZG9lc24ndCBleGlzdCkuXG5cbiAgICAgIHNrZXdYID0gYyB8fCBkID8gX2F0YW4yKGMsIGQpICogX1JBRDJERUcgKyByb3RhdGlvbiA6IDA7XG4gICAgICBza2V3WCAmJiAoc2NhbGVZICo9IE1hdGguYWJzKE1hdGguY29zKHNrZXdYICogX0RFRzJSQUQpKSk7XG5cbiAgICAgIGlmIChjYWNoZS5zdmcpIHtcbiAgICAgICAgeCAtPSB4T3JpZ2luIC0gKHhPcmlnaW4gKiBhICsgeU9yaWdpbiAqIGMpO1xuICAgICAgICB5IC09IHlPcmlnaW4gLSAoeE9yaWdpbiAqIGIgKyB5T3JpZ2luICogZCk7XG4gICAgICB9IC8vM0QgbWF0cml4XG5cbiAgICB9IGVsc2Uge1xuICAgICAgYTMyID0gbWF0cml4WzZdO1xuICAgICAgYTQyID0gbWF0cml4WzddO1xuICAgICAgYTEzID0gbWF0cml4WzhdO1xuICAgICAgYTIzID0gbWF0cml4WzldO1xuICAgICAgYTMzID0gbWF0cml4WzEwXTtcbiAgICAgIGE0MyA9IG1hdHJpeFsxMV07XG4gICAgICB4ID0gbWF0cml4WzEyXTtcbiAgICAgIHkgPSBtYXRyaXhbMTNdO1xuICAgICAgeiA9IG1hdHJpeFsxNF07XG4gICAgICBhbmdsZSA9IF9hdGFuMihhMzIsIGEzMyk7XG4gICAgICByb3RhdGlvblggPSBhbmdsZSAqIF9SQUQyREVHOyAvL3JvdGF0aW9uWFxuXG4gICAgICBpZiAoYW5nbGUpIHtcbiAgICAgICAgY29zID0gTWF0aC5jb3MoLWFuZ2xlKTtcbiAgICAgICAgc2luID0gTWF0aC5zaW4oLWFuZ2xlKTtcbiAgICAgICAgdDEgPSBhMTIgKiBjb3MgKyBhMTMgKiBzaW47XG4gICAgICAgIHQyID0gYTIyICogY29zICsgYTIzICogc2luO1xuICAgICAgICB0MyA9IGEzMiAqIGNvcyArIGEzMyAqIHNpbjtcbiAgICAgICAgYTEzID0gYTEyICogLXNpbiArIGExMyAqIGNvcztcbiAgICAgICAgYTIzID0gYTIyICogLXNpbiArIGEyMyAqIGNvcztcbiAgICAgICAgYTMzID0gYTMyICogLXNpbiArIGEzMyAqIGNvcztcbiAgICAgICAgYTQzID0gYTQyICogLXNpbiArIGE0MyAqIGNvcztcbiAgICAgICAgYTEyID0gdDE7XG4gICAgICAgIGEyMiA9IHQyO1xuICAgICAgICBhMzIgPSB0MztcbiAgICAgIH0gLy9yb3RhdGlvbllcblxuXG4gICAgICBhbmdsZSA9IF9hdGFuMigtYywgYTMzKTtcbiAgICAgIHJvdGF0aW9uWSA9IGFuZ2xlICogX1JBRDJERUc7XG5cbiAgICAgIGlmIChhbmdsZSkge1xuICAgICAgICBjb3MgPSBNYXRoLmNvcygtYW5nbGUpO1xuICAgICAgICBzaW4gPSBNYXRoLnNpbigtYW5nbGUpO1xuICAgICAgICB0MSA9IGEgKiBjb3MgLSBhMTMgKiBzaW47XG4gICAgICAgIHQyID0gYiAqIGNvcyAtIGEyMyAqIHNpbjtcbiAgICAgICAgdDMgPSBjICogY29zIC0gYTMzICogc2luO1xuICAgICAgICBhNDMgPSBkICogc2luICsgYTQzICogY29zO1xuICAgICAgICBhID0gdDE7XG4gICAgICAgIGIgPSB0MjtcbiAgICAgICAgYyA9IHQzO1xuICAgICAgfSAvL3JvdGF0aW9uWlxuXG5cbiAgICAgIGFuZ2xlID0gX2F0YW4yKGIsIGEpO1xuICAgICAgcm90YXRpb24gPSBhbmdsZSAqIF9SQUQyREVHO1xuXG4gICAgICBpZiAoYW5nbGUpIHtcbiAgICAgICAgY29zID0gTWF0aC5jb3MoYW5nbGUpO1xuICAgICAgICBzaW4gPSBNYXRoLnNpbihhbmdsZSk7XG4gICAgICAgIHQxID0gYSAqIGNvcyArIGIgKiBzaW47XG4gICAgICAgIHQyID0gYTEyICogY29zICsgYTIyICogc2luO1xuICAgICAgICBiID0gYiAqIGNvcyAtIGEgKiBzaW47XG4gICAgICAgIGEyMiA9IGEyMiAqIGNvcyAtIGExMiAqIHNpbjtcbiAgICAgICAgYSA9IHQxO1xuICAgICAgICBhMTIgPSB0MjtcbiAgICAgIH1cblxuICAgICAgaWYgKHJvdGF0aW9uWCAmJiBNYXRoLmFicyhyb3RhdGlvblgpICsgTWF0aC5hYnMocm90YXRpb24pID4gMzU5LjkpIHtcbiAgICAgICAgLy93aGVuIHJvdGF0aW9uWSBpcyBzZXQsIGl0IHdpbGwgb2Z0ZW4gYmUgcGFyc2VkIGFzIDE4MCBkZWdyZWVzIGRpZmZlcmVudCB0aGFuIGl0IHNob3VsZCBiZSwgYW5kIHJvdGF0aW9uWCBhbmQgcm90YXRpb24gYm90aCBiZWluZyAxODAgKGl0IGxvb2tzIHRoZSBzYW1lKSwgc28gd2UgYWRqdXN0IGZvciB0aGF0IGhlcmUuXG4gICAgICAgIHJvdGF0aW9uWCA9IHJvdGF0aW9uID0gMDtcbiAgICAgICAgcm90YXRpb25ZID0gMTgwIC0gcm90YXRpb25ZO1xuICAgICAgfVxuXG4gICAgICBzY2FsZVggPSBfcm91bmQoTWF0aC5zcXJ0KGEgKiBhICsgYiAqIGIgKyBjICogYykpO1xuICAgICAgc2NhbGVZID0gX3JvdW5kKE1hdGguc3FydChhMjIgKiBhMjIgKyBhMzIgKiBhMzIpKTtcbiAgICAgIGFuZ2xlID0gX2F0YW4yKGExMiwgYTIyKTtcbiAgICAgIHNrZXdYID0gTWF0aC5hYnMoYW5nbGUpID4gMC4wMDAyID8gYW5nbGUgKiBfUkFEMkRFRyA6IDA7XG4gICAgICBwZXJzcGVjdGl2ZSA9IGE0MyA/IDEgLyAoYTQzIDwgMCA/IC1hNDMgOiBhNDMpIDogMDtcbiAgICB9XG5cbiAgICBpZiAoY2FjaGUuc3ZnKSB7XG4gICAgICAvL3NlbnNlIGlmIHRoZXJlIGFyZSBDU1MgdHJhbnNmb3JtcyBhcHBsaWVkIG9uIGFuIFNWRyBlbGVtZW50IGluIHdoaWNoIGNhc2Ugd2UgbXVzdCBvdmVyd3JpdGUgdGhlbSB3aGVuIHJlbmRlcmluZy4gVGhlIHRyYW5zZm9ybSBhdHRyaWJ1dGUgaXMgbW9yZSByZWxpYWJsZSBjcm9zcy1icm93c2VyLCBidXQgd2UgY2FuJ3QganVzdCByZW1vdmUgdGhlIENTUyBvbmVzIGJlY2F1c2UgdGhleSBtYXkgYmUgYXBwbGllZCBpbiBhIENTUyBydWxlIHNvbWV3aGVyZSAobm90IGp1c3QgaW5saW5lKS5cbiAgICAgIHQxID0gdGFyZ2V0LmdldEF0dHJpYnV0ZShcInRyYW5zZm9ybVwiKTtcbiAgICAgIGNhY2hlLmZvcmNlQ1NTID0gdGFyZ2V0LnNldEF0dHJpYnV0ZShcInRyYW5zZm9ybVwiLCBcIlwiKSB8fCAhX2lzTnVsbFRyYW5zZm9ybShfZ2V0Q29tcHV0ZWRQcm9wZXJ0eSh0YXJnZXQsIF90cmFuc2Zvcm1Qcm9wKSk7XG4gICAgICB0MSAmJiB0YXJnZXQuc2V0QXR0cmlidXRlKFwidHJhbnNmb3JtXCIsIHQxKTtcbiAgICB9XG4gIH1cblxuICBpZiAoTWF0aC5hYnMoc2tld1gpID4gOTAgJiYgTWF0aC5hYnMoc2tld1gpIDwgMjcwKSB7XG4gICAgaWYgKGludmVydGVkU2NhbGVYKSB7XG4gICAgICBzY2FsZVggKj0gLTE7XG4gICAgICBza2V3WCArPSByb3RhdGlvbiA8PSAwID8gMTgwIDogLTE4MDtcbiAgICAgIHJvdGF0aW9uICs9IHJvdGF0aW9uIDw9IDAgPyAxODAgOiAtMTgwO1xuICAgIH0gZWxzZSB7XG4gICAgICBzY2FsZVkgKj0gLTE7XG4gICAgICBza2V3WCArPSBza2V3WCA8PSAwID8gMTgwIDogLTE4MDtcbiAgICB9XG4gIH1cblxuICB1bmNhY2hlID0gdW5jYWNoZSB8fCBjYWNoZS51bmNhY2hlO1xuICBjYWNoZS54ID0geCAtICgoY2FjaGUueFBlcmNlbnQgPSB4ICYmICghdW5jYWNoZSAmJiBjYWNoZS54UGVyY2VudCB8fCAoTWF0aC5yb3VuZCh0YXJnZXQub2Zmc2V0V2lkdGggLyAyKSA9PT0gTWF0aC5yb3VuZCgteCkgPyAtNTAgOiAwKSkpID8gdGFyZ2V0Lm9mZnNldFdpZHRoICogY2FjaGUueFBlcmNlbnQgLyAxMDAgOiAwKSArIHB4O1xuICBjYWNoZS55ID0geSAtICgoY2FjaGUueVBlcmNlbnQgPSB5ICYmICghdW5jYWNoZSAmJiBjYWNoZS55UGVyY2VudCB8fCAoTWF0aC5yb3VuZCh0YXJnZXQub2Zmc2V0SGVpZ2h0IC8gMikgPT09IE1hdGgucm91bmQoLXkpID8gLTUwIDogMCkpKSA/IHRhcmdldC5vZmZzZXRIZWlnaHQgKiBjYWNoZS55UGVyY2VudCAvIDEwMCA6IDApICsgcHg7XG4gIGNhY2hlLnogPSB6ICsgcHg7XG4gIGNhY2hlLnNjYWxlWCA9IF9yb3VuZChzY2FsZVgpO1xuICBjYWNoZS5zY2FsZVkgPSBfcm91bmQoc2NhbGVZKTtcbiAgY2FjaGUucm90YXRpb24gPSBfcm91bmQocm90YXRpb24pICsgZGVnO1xuICBjYWNoZS5yb3RhdGlvblggPSBfcm91bmQocm90YXRpb25YKSArIGRlZztcbiAgY2FjaGUucm90YXRpb25ZID0gX3JvdW5kKHJvdGF0aW9uWSkgKyBkZWc7XG4gIGNhY2hlLnNrZXdYID0gc2tld1ggKyBkZWc7XG4gIGNhY2hlLnNrZXdZID0gc2tld1kgKyBkZWc7XG4gIGNhY2hlLnRyYW5zZm9ybVBlcnNwZWN0aXZlID0gcGVyc3BlY3RpdmUgKyBweDtcblxuICBpZiAoY2FjaGUuek9yaWdpbiA9IHBhcnNlRmxvYXQob3JpZ2luLnNwbGl0KFwiIFwiKVsyXSkgfHwgMCkge1xuICAgIHN0eWxlW190cmFuc2Zvcm1PcmlnaW5Qcm9wXSA9IF9maXJzdFR3b09ubHkob3JpZ2luKTtcbiAgfVxuXG4gIGNhY2hlLnhPZmZzZXQgPSBjYWNoZS55T2Zmc2V0ID0gMDtcbiAgY2FjaGUuZm9yY2UzRCA9IF9jb25maWcuZm9yY2UzRDtcbiAgY2FjaGUucmVuZGVyVHJhbnNmb3JtID0gY2FjaGUuc3ZnID8gX3JlbmRlclNWR1RyYW5zZm9ybXMgOiBfc3VwcG9ydHMzRCA/IF9yZW5kZXJDU1NUcmFuc2Zvcm1zIDogX3JlbmRlck5vbjNEVHJhbnNmb3JtcztcbiAgY2FjaGUudW5jYWNoZSA9IDA7XG4gIHJldHVybiBjYWNoZTtcbn0sXG4gICAgX2ZpcnN0VHdvT25seSA9IGZ1bmN0aW9uIF9maXJzdFR3b09ubHkodmFsdWUpIHtcbiAgcmV0dXJuICh2YWx1ZSA9IHZhbHVlLnNwbGl0KFwiIFwiKSlbMF0gKyBcIiBcIiArIHZhbHVlWzFdO1xufSxcbiAgICAvL2ZvciBoYW5kbGluZyB0cmFuc2Zvcm1PcmlnaW4gdmFsdWVzLCBzdHJpcHBpbmcgb3V0IHRoZSAzcmQgZGltZW5zaW9uXG5fYWRkUHhUcmFuc2xhdGUgPSBmdW5jdGlvbiBfYWRkUHhUcmFuc2xhdGUodGFyZ2V0LCBzdGFydCwgdmFsdWUpIHtcbiAgdmFyIHVuaXQgPSBnZXRVbml0KHN0YXJ0KTtcbiAgcmV0dXJuIF9yb3VuZChwYXJzZUZsb2F0KHN0YXJ0KSArIHBhcnNlRmxvYXQoX2NvbnZlcnRUb1VuaXQodGFyZ2V0LCBcInhcIiwgdmFsdWUgKyBcInB4XCIsIHVuaXQpKSkgKyB1bml0O1xufSxcbiAgICBfcmVuZGVyTm9uM0RUcmFuc2Zvcm1zID0gZnVuY3Rpb24gX3JlbmRlck5vbjNEVHJhbnNmb3JtcyhyYXRpbywgY2FjaGUpIHtcbiAgY2FjaGUueiA9IFwiMHB4XCI7XG4gIGNhY2hlLnJvdGF0aW9uWSA9IGNhY2hlLnJvdGF0aW9uWCA9IFwiMGRlZ1wiO1xuICBjYWNoZS5mb3JjZTNEID0gMDtcblxuICBfcmVuZGVyQ1NTVHJhbnNmb3JtcyhyYXRpbywgY2FjaGUpO1xufSxcbiAgICBfemVyb0RlZyA9IFwiMGRlZ1wiLFxuICAgIF96ZXJvUHggPSBcIjBweFwiLFxuICAgIF9lbmRQYXJlbnRoZXNpcyA9IFwiKSBcIixcbiAgICBfcmVuZGVyQ1NTVHJhbnNmb3JtcyA9IGZ1bmN0aW9uIF9yZW5kZXJDU1NUcmFuc2Zvcm1zKHJhdGlvLCBjYWNoZSkge1xuICB2YXIgX3JlZiA9IGNhY2hlIHx8IHRoaXMsXG4gICAgICB4UGVyY2VudCA9IF9yZWYueFBlcmNlbnQsXG4gICAgICB5UGVyY2VudCA9IF9yZWYueVBlcmNlbnQsXG4gICAgICB4ID0gX3JlZi54LFxuICAgICAgeSA9IF9yZWYueSxcbiAgICAgIHogPSBfcmVmLnosXG4gICAgICByb3RhdGlvbiA9IF9yZWYucm90YXRpb24sXG4gICAgICByb3RhdGlvblkgPSBfcmVmLnJvdGF0aW9uWSxcbiAgICAgIHJvdGF0aW9uWCA9IF9yZWYucm90YXRpb25YLFxuICAgICAgc2tld1ggPSBfcmVmLnNrZXdYLFxuICAgICAgc2tld1kgPSBfcmVmLnNrZXdZLFxuICAgICAgc2NhbGVYID0gX3JlZi5zY2FsZVgsXG4gICAgICBzY2FsZVkgPSBfcmVmLnNjYWxlWSxcbiAgICAgIHRyYW5zZm9ybVBlcnNwZWN0aXZlID0gX3JlZi50cmFuc2Zvcm1QZXJzcGVjdGl2ZSxcbiAgICAgIGZvcmNlM0QgPSBfcmVmLmZvcmNlM0QsXG4gICAgICB0YXJnZXQgPSBfcmVmLnRhcmdldCxcbiAgICAgIHpPcmlnaW4gPSBfcmVmLnpPcmlnaW4sXG4gICAgICB0cmFuc2Zvcm1zID0gXCJcIixcbiAgICAgIHVzZTNEID0gZm9yY2UzRCA9PT0gXCJhdXRvXCIgJiYgcmF0aW8gJiYgcmF0aW8gIT09IDEgfHwgZm9yY2UzRCA9PT0gdHJ1ZTsgLy8gU2FmYXJpIGhhcyBhIGJ1ZyB0aGF0IGNhdXNlcyBpdCBub3QgdG8gcmVuZGVyIDNEIHRyYW5zZm9ybS1vcmlnaW4gdmFsdWVzIHByb3Blcmx5LCBzbyB3ZSBmb3JjZSB0aGUgeiBvcmlnaW4gdG8gMCwgcmVjb3JkIGl0IGluIHRoZSBjYWNoZSwgYW5kIHRoZW4gZG8gdGhlIG1hdGggaGVyZSB0byBvZmZzZXQgdGhlIHRyYW5zbGF0ZSB2YWx1ZXMgYWNjb3JkaW5nbHkgKGJhc2ljYWxseSBkbyB0aGUgM0QgdHJhbnNmb3JtLW9yaWdpbiBwYXJ0IG1hbnVhbGx5KVxuXG5cbiAgaWYgKHpPcmlnaW4gJiYgKHJvdGF0aW9uWCAhPT0gX3plcm9EZWcgfHwgcm90YXRpb25ZICE9PSBfemVyb0RlZykpIHtcbiAgICB2YXIgYW5nbGUgPSBwYXJzZUZsb2F0KHJvdGF0aW9uWSkgKiBfREVHMlJBRCxcbiAgICAgICAgYTEzID0gTWF0aC5zaW4oYW5nbGUpLFxuICAgICAgICBhMzMgPSBNYXRoLmNvcyhhbmdsZSksXG4gICAgICAgIGNvcztcblxuICAgIGFuZ2xlID0gcGFyc2VGbG9hdChyb3RhdGlvblgpICogX0RFRzJSQUQ7XG4gICAgY29zID0gTWF0aC5jb3MoYW5nbGUpO1xuICAgIHggPSBfYWRkUHhUcmFuc2xhdGUodGFyZ2V0LCB4LCBhMTMgKiBjb3MgKiAtek9yaWdpbik7XG4gICAgeSA9IF9hZGRQeFRyYW5zbGF0ZSh0YXJnZXQsIHksIC1NYXRoLnNpbihhbmdsZSkgKiAtek9yaWdpbik7XG4gICAgeiA9IF9hZGRQeFRyYW5zbGF0ZSh0YXJnZXQsIHosIGEzMyAqIGNvcyAqIC16T3JpZ2luICsgek9yaWdpbik7XG4gIH1cblxuICBpZiAodHJhbnNmb3JtUGVyc3BlY3RpdmUgIT09IF96ZXJvUHgpIHtcbiAgICB0cmFuc2Zvcm1zICs9IFwicGVyc3BlY3RpdmUoXCIgKyB0cmFuc2Zvcm1QZXJzcGVjdGl2ZSArIF9lbmRQYXJlbnRoZXNpcztcbiAgfVxuXG4gIGlmICh4UGVyY2VudCB8fCB5UGVyY2VudCkge1xuICAgIHRyYW5zZm9ybXMgKz0gXCJ0cmFuc2xhdGUoXCIgKyB4UGVyY2VudCArIFwiJSwgXCIgKyB5UGVyY2VudCArIFwiJSkgXCI7XG4gIH1cblxuICBpZiAodXNlM0QgfHwgeCAhPT0gX3plcm9QeCB8fCB5ICE9PSBfemVyb1B4IHx8IHogIT09IF96ZXJvUHgpIHtcbiAgICB0cmFuc2Zvcm1zICs9IHogIT09IF96ZXJvUHggfHwgdXNlM0QgPyBcInRyYW5zbGF0ZTNkKFwiICsgeCArIFwiLCBcIiArIHkgKyBcIiwgXCIgKyB6ICsgXCIpIFwiIDogXCJ0cmFuc2xhdGUoXCIgKyB4ICsgXCIsIFwiICsgeSArIF9lbmRQYXJlbnRoZXNpcztcbiAgfVxuXG4gIGlmIChyb3RhdGlvbiAhPT0gX3plcm9EZWcpIHtcbiAgICB0cmFuc2Zvcm1zICs9IFwicm90YXRlKFwiICsgcm90YXRpb24gKyBfZW5kUGFyZW50aGVzaXM7XG4gIH1cblxuICBpZiAocm90YXRpb25ZICE9PSBfemVyb0RlZykge1xuICAgIHRyYW5zZm9ybXMgKz0gXCJyb3RhdGVZKFwiICsgcm90YXRpb25ZICsgX2VuZFBhcmVudGhlc2lzO1xuICB9XG5cbiAgaWYgKHJvdGF0aW9uWCAhPT0gX3plcm9EZWcpIHtcbiAgICB0cmFuc2Zvcm1zICs9IFwicm90YXRlWChcIiArIHJvdGF0aW9uWCArIF9lbmRQYXJlbnRoZXNpcztcbiAgfVxuXG4gIGlmIChza2V3WCAhPT0gX3plcm9EZWcgfHwgc2tld1kgIT09IF96ZXJvRGVnKSB7XG4gICAgdHJhbnNmb3JtcyArPSBcInNrZXcoXCIgKyBza2V3WCArIFwiLCBcIiArIHNrZXdZICsgX2VuZFBhcmVudGhlc2lzO1xuICB9XG5cbiAgaWYgKHNjYWxlWCAhPT0gMSB8fCBzY2FsZVkgIT09IDEpIHtcbiAgICB0cmFuc2Zvcm1zICs9IFwic2NhbGUoXCIgKyBzY2FsZVggKyBcIiwgXCIgKyBzY2FsZVkgKyBfZW5kUGFyZW50aGVzaXM7XG4gIH1cblxuICB0YXJnZXQuc3R5bGVbX3RyYW5zZm9ybVByb3BdID0gdHJhbnNmb3JtcyB8fCBcInRyYW5zbGF0ZSgwLCAwKVwiO1xufSxcbiAgICBfcmVuZGVyU1ZHVHJhbnNmb3JtcyA9IGZ1bmN0aW9uIF9yZW5kZXJTVkdUcmFuc2Zvcm1zKHJhdGlvLCBjYWNoZSkge1xuICB2YXIgX3JlZjIgPSBjYWNoZSB8fCB0aGlzLFxuICAgICAgeFBlcmNlbnQgPSBfcmVmMi54UGVyY2VudCxcbiAgICAgIHlQZXJjZW50ID0gX3JlZjIueVBlcmNlbnQsXG4gICAgICB4ID0gX3JlZjIueCxcbiAgICAgIHkgPSBfcmVmMi55LFxuICAgICAgcm90YXRpb24gPSBfcmVmMi5yb3RhdGlvbixcbiAgICAgIHNrZXdYID0gX3JlZjIuc2tld1gsXG4gICAgICBza2V3WSA9IF9yZWYyLnNrZXdZLFxuICAgICAgc2NhbGVYID0gX3JlZjIuc2NhbGVYLFxuICAgICAgc2NhbGVZID0gX3JlZjIuc2NhbGVZLFxuICAgICAgdGFyZ2V0ID0gX3JlZjIudGFyZ2V0LFxuICAgICAgeE9yaWdpbiA9IF9yZWYyLnhPcmlnaW4sXG4gICAgICB5T3JpZ2luID0gX3JlZjIueU9yaWdpbixcbiAgICAgIHhPZmZzZXQgPSBfcmVmMi54T2Zmc2V0LFxuICAgICAgeU9mZnNldCA9IF9yZWYyLnlPZmZzZXQsXG4gICAgICBmb3JjZUNTUyA9IF9yZWYyLmZvcmNlQ1NTLFxuICAgICAgdHggPSBwYXJzZUZsb2F0KHgpLFxuICAgICAgdHkgPSBwYXJzZUZsb2F0KHkpLFxuICAgICAgYTExLFxuICAgICAgYTIxLFxuICAgICAgYTEyLFxuICAgICAgYTIyLFxuICAgICAgdGVtcDtcblxuICByb3RhdGlvbiA9IHBhcnNlRmxvYXQocm90YXRpb24pO1xuICBza2V3WCA9IHBhcnNlRmxvYXQoc2tld1gpO1xuICBza2V3WSA9IHBhcnNlRmxvYXQoc2tld1kpO1xuXG4gIGlmIChza2V3WSkge1xuICAgIC8vZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnMsIHdlIGNvbWJpbmUgYWxsIHNrZXdpbmcgaW50byB0aGUgc2tld1ggYW5kIHJvdGF0aW9uIHZhbHVlcy4gUmVtZW1iZXIsIGEgc2tld1kgb2YgMTAgZGVncmVlcyBsb29rcyB0aGUgc2FtZSBhcyBhIHJvdGF0aW9uIG9mIDEwIGRlZ3JlZXMgcGx1cyBhIHNrZXdYIG9mIDEwIGRlZ3JlZXMuXG4gICAgc2tld1kgPSBwYXJzZUZsb2F0KHNrZXdZKTtcbiAgICBza2V3WCArPSBza2V3WTtcbiAgICByb3RhdGlvbiArPSBza2V3WTtcbiAgfVxuXG4gIGlmIChyb3RhdGlvbiB8fCBza2V3WCkge1xuICAgIHJvdGF0aW9uICo9IF9ERUcyUkFEO1xuICAgIHNrZXdYICo9IF9ERUcyUkFEO1xuICAgIGExMSA9IE1hdGguY29zKHJvdGF0aW9uKSAqIHNjYWxlWDtcbiAgICBhMjEgPSBNYXRoLnNpbihyb3RhdGlvbikgKiBzY2FsZVg7XG4gICAgYTEyID0gTWF0aC5zaW4ocm90YXRpb24gLSBza2V3WCkgKiAtc2NhbGVZO1xuICAgIGEyMiA9IE1hdGguY29zKHJvdGF0aW9uIC0gc2tld1gpICogc2NhbGVZO1xuXG4gICAgaWYgKHNrZXdYKSB7XG4gICAgICBza2V3WSAqPSBfREVHMlJBRDtcbiAgICAgIHRlbXAgPSBNYXRoLnRhbihza2V3WCAtIHNrZXdZKTtcbiAgICAgIHRlbXAgPSBNYXRoLnNxcnQoMSArIHRlbXAgKiB0ZW1wKTtcbiAgICAgIGExMiAqPSB0ZW1wO1xuICAgICAgYTIyICo9IHRlbXA7XG5cbiAgICAgIGlmIChza2V3WSkge1xuICAgICAgICB0ZW1wID0gTWF0aC50YW4oc2tld1kpO1xuICAgICAgICB0ZW1wID0gTWF0aC5zcXJ0KDEgKyB0ZW1wICogdGVtcCk7XG4gICAgICAgIGExMSAqPSB0ZW1wO1xuICAgICAgICBhMjEgKj0gdGVtcDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBhMTEgPSBfcm91bmQoYTExKTtcbiAgICBhMjEgPSBfcm91bmQoYTIxKTtcbiAgICBhMTIgPSBfcm91bmQoYTEyKTtcbiAgICBhMjIgPSBfcm91bmQoYTIyKTtcbiAgfSBlbHNlIHtcbiAgICBhMTEgPSBzY2FsZVg7XG4gICAgYTIyID0gc2NhbGVZO1xuICAgIGEyMSA9IGExMiA9IDA7XG4gIH1cblxuICBpZiAodHggJiYgIX4oeCArIFwiXCIpLmluZGV4T2YoXCJweFwiKSB8fCB0eSAmJiAhfih5ICsgXCJcIikuaW5kZXhPZihcInB4XCIpKSB7XG4gICAgdHggPSBfY29udmVydFRvVW5pdCh0YXJnZXQsIFwieFwiLCB4LCBcInB4XCIpO1xuICAgIHR5ID0gX2NvbnZlcnRUb1VuaXQodGFyZ2V0LCBcInlcIiwgeSwgXCJweFwiKTtcbiAgfVxuXG4gIGlmICh4T3JpZ2luIHx8IHlPcmlnaW4gfHwgeE9mZnNldCB8fCB5T2Zmc2V0KSB7XG4gICAgdHggPSBfcm91bmQodHggKyB4T3JpZ2luIC0gKHhPcmlnaW4gKiBhMTEgKyB5T3JpZ2luICogYTEyKSArIHhPZmZzZXQpO1xuICAgIHR5ID0gX3JvdW5kKHR5ICsgeU9yaWdpbiAtICh4T3JpZ2luICogYTIxICsgeU9yaWdpbiAqIGEyMikgKyB5T2Zmc2V0KTtcbiAgfVxuXG4gIGlmICh4UGVyY2VudCB8fCB5UGVyY2VudCkge1xuICAgIC8vVGhlIFNWRyBzcGVjIGRvZXNuJ3Qgc3VwcG9ydCBwZXJjZW50YWdlLWJhc2VkIHRyYW5zbGF0aW9uIGluIHRoZSBcInRyYW5zZm9ybVwiIGF0dHJpYnV0ZSwgc28gd2UgbWVyZ2UgaXQgaW50byB0aGUgdHJhbnNsYXRpb24gdG8gc2ltdWxhdGUgaXQuXG4gICAgdGVtcCA9IHRhcmdldC5nZXRCQm94KCk7XG4gICAgdHggPSBfcm91bmQodHggKyB4UGVyY2VudCAvIDEwMCAqIHRlbXAud2lkdGgpO1xuICAgIHR5ID0gX3JvdW5kKHR5ICsgeVBlcmNlbnQgLyAxMDAgKiB0ZW1wLmhlaWdodCk7XG4gIH1cblxuICB0ZW1wID0gXCJtYXRyaXgoXCIgKyBhMTEgKyBcIixcIiArIGEyMSArIFwiLFwiICsgYTEyICsgXCIsXCIgKyBhMjIgKyBcIixcIiArIHR4ICsgXCIsXCIgKyB0eSArIFwiKVwiO1xuICB0YXJnZXQuc2V0QXR0cmlidXRlKFwidHJhbnNmb3JtXCIsIHRlbXApO1xuICBmb3JjZUNTUyAmJiAodGFyZ2V0LnN0eWxlW190cmFuc2Zvcm1Qcm9wXSA9IHRlbXApOyAvL3NvbWUgYnJvd3NlcnMgcHJpb3JpdGl6ZSBDU1MgdHJhbnNmb3JtcyBvdmVyIHRoZSB0cmFuc2Zvcm0gYXR0cmlidXRlLiBXaGVuIHdlIHNlbnNlIHRoYXQgdGhlIHVzZXIgaGFzIENTUyB0cmFuc2Zvcm1zIGFwcGxpZWQsIHdlIG11c3Qgb3ZlcndyaXRlIHRoZW0gdGhpcyB3YXkgKG90aGVyd2lzZSBzb21lIGJyb3dzZXIgc2ltcGx5IHdvbid0IHJlbmRlciB0aGUgIHRyYW5zZm9ybSBhdHRyaWJ1dGUgY2hhbmdlcyEpXG59LFxuICAgIF9hZGRSb3RhdGlvbmFsUHJvcFR3ZWVuID0gZnVuY3Rpb24gX2FkZFJvdGF0aW9uYWxQcm9wVHdlZW4ocGx1Z2luLCB0YXJnZXQsIHByb3BlcnR5LCBzdGFydE51bSwgZW5kVmFsdWUpIHtcbiAgdmFyIGNhcCA9IDM2MCxcbiAgICAgIGlzU3RyaW5nID0gX2lzU3RyaW5nKGVuZFZhbHVlKSxcbiAgICAgIGVuZE51bSA9IHBhcnNlRmxvYXQoZW5kVmFsdWUpICogKGlzU3RyaW5nICYmIH5lbmRWYWx1ZS5pbmRleE9mKFwicmFkXCIpID8gX1JBRDJERUcgOiAxKSxcbiAgICAgIGNoYW5nZSA9IGVuZE51bSAtIHN0YXJ0TnVtLFxuICAgICAgZmluYWxWYWx1ZSA9IHN0YXJ0TnVtICsgY2hhbmdlICsgXCJkZWdcIixcbiAgICAgIGRpcmVjdGlvbixcbiAgICAgIHB0O1xuXG4gIGlmIChpc1N0cmluZykge1xuICAgIGRpcmVjdGlvbiA9IGVuZFZhbHVlLnNwbGl0KFwiX1wiKVsxXTtcblxuICAgIGlmIChkaXJlY3Rpb24gPT09IFwic2hvcnRcIikge1xuICAgICAgY2hhbmdlICU9IGNhcDtcblxuICAgICAgaWYgKGNoYW5nZSAhPT0gY2hhbmdlICUgKGNhcCAvIDIpKSB7XG4gICAgICAgIGNoYW5nZSArPSBjaGFuZ2UgPCAwID8gY2FwIDogLWNhcDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoZGlyZWN0aW9uID09PSBcImN3XCIgJiYgY2hhbmdlIDwgMCkge1xuICAgICAgY2hhbmdlID0gKGNoYW5nZSArIGNhcCAqIF9iaWdOdW0pICUgY2FwIC0gfn4oY2hhbmdlIC8gY2FwKSAqIGNhcDtcbiAgICB9IGVsc2UgaWYgKGRpcmVjdGlvbiA9PT0gXCJjY3dcIiAmJiBjaGFuZ2UgPiAwKSB7XG4gICAgICBjaGFuZ2UgPSAoY2hhbmdlIC0gY2FwICogX2JpZ051bSkgJSBjYXAgLSB+fihjaGFuZ2UgLyBjYXApICogY2FwO1xuICAgIH1cbiAgfVxuXG4gIHBsdWdpbi5fcHQgPSBwdCA9IG5ldyBQcm9wVHdlZW4ocGx1Z2luLl9wdCwgdGFyZ2V0LCBwcm9wZXJ0eSwgc3RhcnROdW0sIGNoYW5nZSwgX3JlbmRlclByb3BXaXRoRW5kKTtcbiAgcHQuZSA9IGZpbmFsVmFsdWU7XG4gIHB0LnUgPSBcImRlZ1wiO1xuXG4gIHBsdWdpbi5fcHJvcHMucHVzaChwcm9wZXJ0eSk7XG5cbiAgcmV0dXJuIHB0O1xufSxcbiAgICBfYXNzaWduID0gZnVuY3Rpb24gX2Fzc2lnbih0YXJnZXQsIHNvdXJjZSkge1xuICAvLyBJbnRlcm5ldCBFeHBsb3JlciBkb2Vzbid0IGhhdmUgT2JqZWN0LmFzc2lnbigpLCBzbyB3ZSByZWNyZWF0ZSBpdCBoZXJlLlxuICBmb3IgKHZhciBwIGluIHNvdXJjZSkge1xuICAgIHRhcmdldFtwXSA9IHNvdXJjZVtwXTtcbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59LFxuICAgIF9hZGRSYXdUcmFuc2Zvcm1QVHMgPSBmdW5jdGlvbiBfYWRkUmF3VHJhbnNmb3JtUFRzKHBsdWdpbiwgdHJhbnNmb3JtcywgdGFyZ2V0KSB7XG4gIC8vZm9yIGhhbmRsaW5nIGNhc2VzIHdoZXJlIHNvbWVvbmUgcGFzc2VzIGluIGEgd2hvbGUgdHJhbnNmb3JtIHN0cmluZywgbGlrZSB0cmFuc2Zvcm06IFwic2NhbGUoMiwgMykgcm90YXRlKDIwZGVnKSB0cmFuc2xhdGVZKDMwZW0pXCJcbiAgdmFyIHN0YXJ0Q2FjaGUgPSBfYXNzaWduKHt9LCB0YXJnZXQuX2dzYXApLFxuICAgICAgZXhjbHVkZSA9IFwicGVyc3BlY3RpdmUsZm9yY2UzRCx0cmFuc2Zvcm1PcmlnaW4sc3ZnT3JpZ2luXCIsXG4gICAgICBzdHlsZSA9IHRhcmdldC5zdHlsZSxcbiAgICAgIGVuZENhY2hlLFxuICAgICAgcCxcbiAgICAgIHN0YXJ0VmFsdWUsXG4gICAgICBlbmRWYWx1ZSxcbiAgICAgIHN0YXJ0TnVtLFxuICAgICAgZW5kTnVtLFxuICAgICAgc3RhcnRVbml0LFxuICAgICAgZW5kVW5pdDtcblxuICBpZiAoc3RhcnRDYWNoZS5zdmcpIHtcbiAgICBzdGFydFZhbHVlID0gdGFyZ2V0LmdldEF0dHJpYnV0ZShcInRyYW5zZm9ybVwiKTtcbiAgICB0YXJnZXQuc2V0QXR0cmlidXRlKFwidHJhbnNmb3JtXCIsIFwiXCIpO1xuICAgIHN0eWxlW190cmFuc2Zvcm1Qcm9wXSA9IHRyYW5zZm9ybXM7XG4gICAgZW5kQ2FjaGUgPSBfcGFyc2VUcmFuc2Zvcm0odGFyZ2V0LCAxKTtcblxuICAgIF9yZW1vdmVQcm9wZXJ0eSh0YXJnZXQsIF90cmFuc2Zvcm1Qcm9wKTtcblxuICAgIHRhcmdldC5zZXRBdHRyaWJ1dGUoXCJ0cmFuc2Zvcm1cIiwgc3RhcnRWYWx1ZSk7XG4gIH0gZWxzZSB7XG4gICAgc3RhcnRWYWx1ZSA9IGdldENvbXB1dGVkU3R5bGUodGFyZ2V0KVtfdHJhbnNmb3JtUHJvcF07XG4gICAgc3R5bGVbX3RyYW5zZm9ybVByb3BdID0gdHJhbnNmb3JtcztcbiAgICBlbmRDYWNoZSA9IF9wYXJzZVRyYW5zZm9ybSh0YXJnZXQsIDEpO1xuICAgIHN0eWxlW190cmFuc2Zvcm1Qcm9wXSA9IHN0YXJ0VmFsdWU7XG4gIH1cblxuICBmb3IgKHAgaW4gX3RyYW5zZm9ybVByb3BzKSB7XG4gICAgc3RhcnRWYWx1ZSA9IHN0YXJ0Q2FjaGVbcF07XG4gICAgZW5kVmFsdWUgPSBlbmRDYWNoZVtwXTtcblxuICAgIGlmIChzdGFydFZhbHVlICE9PSBlbmRWYWx1ZSAmJiBleGNsdWRlLmluZGV4T2YocCkgPCAwKSB7XG4gICAgICAvL3R3ZWVuaW5nIHRvIG5vIHBlcnNwZWN0aXZlIGdpdmVzIHZlcnkgdW5pbnR1aXRpdmUgcmVzdWx0cyAtIGp1c3Qga2VlcCB0aGUgc2FtZSBwZXJzcGVjdGl2ZSBpbiB0aGF0IGNhc2UuXG4gICAgICBzdGFydFVuaXQgPSBnZXRVbml0KHN0YXJ0VmFsdWUpO1xuICAgICAgZW5kVW5pdCA9IGdldFVuaXQoZW5kVmFsdWUpO1xuICAgICAgc3RhcnROdW0gPSBzdGFydFVuaXQgIT09IGVuZFVuaXQgPyBfY29udmVydFRvVW5pdCh0YXJnZXQsIHAsIHN0YXJ0VmFsdWUsIGVuZFVuaXQpIDogcGFyc2VGbG9hdChzdGFydFZhbHVlKTtcbiAgICAgIGVuZE51bSA9IHBhcnNlRmxvYXQoZW5kVmFsdWUpO1xuICAgICAgcGx1Z2luLl9wdCA9IG5ldyBQcm9wVHdlZW4ocGx1Z2luLl9wdCwgZW5kQ2FjaGUsIHAsIHN0YXJ0TnVtLCBlbmROdW0gLSBzdGFydE51bSwgX3JlbmRlckNTU1Byb3ApO1xuICAgICAgcGx1Z2luLl9wdC51ID0gZW5kVW5pdCB8fCAwO1xuXG4gICAgICBwbHVnaW4uX3Byb3BzLnB1c2gocCk7XG4gICAgfVxuICB9XG5cbiAgX2Fzc2lnbihlbmRDYWNoZSwgc3RhcnRDYWNoZSk7XG59OyAvLyBoYW5kbGUgc3BsaXR0aW5nIGFwYXJ0IHBhZGRpbmcsIG1hcmdpbiwgYm9yZGVyV2lkdGgsIGFuZCBib3JkZXJSYWRpdXMgaW50byB0aGVpciA0IGNvbXBvbmVudHMuIEZpcmVmb3gsIGZvciBleGFtcGxlLCB3b24ndCByZXBvcnQgYm9yZGVyUmFkaXVzIGNvcnJlY3RseSAtIGl0IHdpbGwgb25seSBkbyBib3JkZXJUb3BMZWZ0UmFkaXVzIGFuZCB0aGUgb3RoZXIgY29ybmVycy4gV2UgYWxzbyB3YW50IHRvIGhhbmRsZSBwYWRkaW5nVG9wLCBtYXJnaW5MZWZ0LCBib3JkZXJSaWdodFdpZHRoLCBldGMuXG5cblxuX2ZvckVhY2hOYW1lKFwicGFkZGluZyxtYXJnaW4sV2lkdGgsUmFkaXVzXCIsIGZ1bmN0aW9uIChuYW1lLCBpbmRleCkge1xuICB2YXIgdCA9IFwiVG9wXCIsXG4gICAgICByID0gXCJSaWdodFwiLFxuICAgICAgYiA9IFwiQm90dG9tXCIsXG4gICAgICBsID0gXCJMZWZ0XCIsXG4gICAgICBwcm9wcyA9IChpbmRleCA8IDMgPyBbdCwgciwgYiwgbF0gOiBbdCArIGwsIHQgKyByLCBiICsgciwgYiArIGxdKS5tYXAoZnVuY3Rpb24gKHNpZGUpIHtcbiAgICByZXR1cm4gaW5kZXggPCAyID8gbmFtZSArIHNpZGUgOiBcImJvcmRlclwiICsgc2lkZSArIG5hbWU7XG4gIH0pO1xuXG4gIF9zcGVjaWFsUHJvcHNbaW5kZXggPiAxID8gXCJib3JkZXJcIiArIG5hbWUgOiBuYW1lXSA9IGZ1bmN0aW9uIChwbHVnaW4sIHRhcmdldCwgcHJvcGVydHksIGVuZFZhbHVlLCB0d2Vlbikge1xuICAgIHZhciBhLCB2YXJzO1xuXG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCA0KSB7XG4gICAgICAvLyBnZXR0ZXIsIHBhc3NlZCB0YXJnZXQsIHByb3BlcnR5LCBhbmQgdW5pdCAoZnJvbSBfZ2V0KCkpXG4gICAgICBhID0gcHJvcHMubWFwKGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgICAgIHJldHVybiBfZ2V0KHBsdWdpbiwgcHJvcCwgcHJvcGVydHkpO1xuICAgICAgfSk7XG4gICAgICB2YXJzID0gYS5qb2luKFwiIFwiKTtcbiAgICAgIHJldHVybiB2YXJzLnNwbGl0KGFbMF0pLmxlbmd0aCA9PT0gNSA/IGFbMF0gOiB2YXJzO1xuICAgIH1cblxuICAgIGEgPSAoZW5kVmFsdWUgKyBcIlwiKS5zcGxpdChcIiBcIik7XG4gICAgdmFycyA9IHt9O1xuICAgIHByb3BzLmZvckVhY2goZnVuY3Rpb24gKHByb3AsIGkpIHtcbiAgICAgIHJldHVybiB2YXJzW3Byb3BdID0gYVtpXSA9IGFbaV0gfHwgYVsoaSAtIDEpIC8gMiB8IDBdO1xuICAgIH0pO1xuICAgIHBsdWdpbi5pbml0KHRhcmdldCwgdmFycywgdHdlZW4pO1xuICB9O1xufSk7XG5cbmV4cG9ydCB2YXIgQ1NTUGx1Z2luID0ge1xuICBuYW1lOiBcImNzc1wiLFxuICByZWdpc3RlcjogX2luaXRDb3JlLFxuICB0YXJnZXRUZXN0OiBmdW5jdGlvbiB0YXJnZXRUZXN0KHRhcmdldCkge1xuICAgIHJldHVybiB0YXJnZXQuc3R5bGUgJiYgdGFyZ2V0Lm5vZGVUeXBlO1xuICB9LFxuICBpbml0OiBmdW5jdGlvbiBpbml0KHRhcmdldCwgdmFycywgdHdlZW4sIGluZGV4LCB0YXJnZXRzKSB7XG4gICAgdmFyIHByb3BzID0gdGhpcy5fcHJvcHMsXG4gICAgICAgIHN0eWxlID0gdGFyZ2V0LnN0eWxlLFxuICAgICAgICBzdGFydEF0ID0gdHdlZW4udmFycy5zdGFydEF0LFxuICAgICAgICBzdGFydFZhbHVlLFxuICAgICAgICBlbmRWYWx1ZSxcbiAgICAgICAgZW5kTnVtLFxuICAgICAgICBzdGFydE51bSxcbiAgICAgICAgdHlwZSxcbiAgICAgICAgc3BlY2lhbFByb3AsXG4gICAgICAgIHAsXG4gICAgICAgIHN0YXJ0VW5pdCxcbiAgICAgICAgZW5kVW5pdCxcbiAgICAgICAgcmVsYXRpdmUsXG4gICAgICAgIGlzVHJhbnNmb3JtUmVsYXRlZCxcbiAgICAgICAgdHJhbnNmb3JtUHJvcFR3ZWVuLFxuICAgICAgICBjYWNoZSxcbiAgICAgICAgc21vb3RoLFxuICAgICAgICBoYXNQcmlvcml0eSxcbiAgICAgICAgaW5saW5lUHJvcHM7XG4gICAgX3BsdWdpbkluaXR0ZWQgfHwgX2luaXRDb3JlKCk7IC8vIHdlIG1heSBjYWxsIGluaXQoKSBtdWx0aXBsZSB0aW1lcyBvbiB0aGUgc2FtZSBwbHVnaW4gaW5zdGFuY2UsIGxpa2Ugd2hlbiBhZGRpbmcgc3BlY2lhbCBwcm9wZXJ0aWVzLCBzbyBtYWtlIHN1cmUgd2UgZG9uJ3Qgb3ZlcndyaXRlIHRoZSByZXZlcnQgZGF0YSBvciBpbmxpbmVQcm9wc1xuXG4gICAgdGhpcy5zdHlsZXMgPSB0aGlzLnN0eWxlcyB8fCBfZ2V0U3R5bGVTYXZlcih0YXJnZXQpO1xuICAgIGlubGluZVByb3BzID0gdGhpcy5zdHlsZXMucHJvcHM7XG4gICAgdGhpcy50d2VlbiA9IHR3ZWVuO1xuXG4gICAgZm9yIChwIGluIHZhcnMpIHtcbiAgICAgIGlmIChwID09PSBcImF1dG9Sb3VuZFwiKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBlbmRWYWx1ZSA9IHZhcnNbcF07XG5cbiAgICAgIGlmIChfcGx1Z2luc1twXSAmJiBfY2hlY2tQbHVnaW4ocCwgdmFycywgdHdlZW4sIGluZGV4LCB0YXJnZXQsIHRhcmdldHMpKSB7XG4gICAgICAgIC8vIHBsdWdpbnNcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIHR5cGUgPSB0eXBlb2YgZW5kVmFsdWU7XG4gICAgICBzcGVjaWFsUHJvcCA9IF9zcGVjaWFsUHJvcHNbcF07XG5cbiAgICAgIGlmICh0eXBlID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgZW5kVmFsdWUgPSBlbmRWYWx1ZS5jYWxsKHR3ZWVuLCBpbmRleCwgdGFyZ2V0LCB0YXJnZXRzKTtcbiAgICAgICAgdHlwZSA9IHR5cGVvZiBlbmRWYWx1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGUgPT09IFwic3RyaW5nXCIgJiYgfmVuZFZhbHVlLmluZGV4T2YoXCJyYW5kb20oXCIpKSB7XG4gICAgICAgIGVuZFZhbHVlID0gX3JlcGxhY2VSYW5kb20oZW5kVmFsdWUpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3BlY2lhbFByb3ApIHtcbiAgICAgICAgc3BlY2lhbFByb3AodGhpcywgdGFyZ2V0LCBwLCBlbmRWYWx1ZSwgdHdlZW4pICYmIChoYXNQcmlvcml0eSA9IDEpO1xuICAgICAgfSBlbHNlIGlmIChwLnN1YnN0cigwLCAyKSA9PT0gXCItLVwiKSB7XG4gICAgICAgIC8vQ1NTIHZhcmlhYmxlXG4gICAgICAgIHN0YXJ0VmFsdWUgPSAoZ2V0Q29tcHV0ZWRTdHlsZSh0YXJnZXQpLmdldFByb3BlcnR5VmFsdWUocCkgKyBcIlwiKS50cmltKCk7XG4gICAgICAgIGVuZFZhbHVlICs9IFwiXCI7XG4gICAgICAgIF9jb2xvckV4cC5sYXN0SW5kZXggPSAwO1xuXG4gICAgICAgIGlmICghX2NvbG9yRXhwLnRlc3Qoc3RhcnRWYWx1ZSkpIHtcbiAgICAgICAgICAvLyBjb2xvcnMgZG9uJ3QgaGF2ZSB1bml0c1xuICAgICAgICAgIHN0YXJ0VW5pdCA9IGdldFVuaXQoc3RhcnRWYWx1ZSk7XG4gICAgICAgICAgZW5kVW5pdCA9IGdldFVuaXQoZW5kVmFsdWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgZW5kVW5pdCA/IHN0YXJ0VW5pdCAhPT0gZW5kVW5pdCAmJiAoc3RhcnRWYWx1ZSA9IF9jb252ZXJ0VG9Vbml0KHRhcmdldCwgcCwgc3RhcnRWYWx1ZSwgZW5kVW5pdCkgKyBlbmRVbml0KSA6IHN0YXJ0VW5pdCAmJiAoZW5kVmFsdWUgKz0gc3RhcnRVbml0KTtcbiAgICAgICAgdGhpcy5hZGQoc3R5bGUsIFwic2V0UHJvcGVydHlcIiwgc3RhcnRWYWx1ZSwgZW5kVmFsdWUsIGluZGV4LCB0YXJnZXRzLCAwLCAwLCBwKTtcbiAgICAgICAgcHJvcHMucHVzaChwKTtcbiAgICAgICAgaW5saW5lUHJvcHMucHVzaChwLCBzdHlsZVtwXSk7XG4gICAgICB9IGVsc2UgaWYgKHR5cGUgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgaWYgKHN0YXJ0QXQgJiYgcCBpbiBzdGFydEF0KSB7XG4gICAgICAgICAgLy8gaW4gY2FzZSBzb21lb25lIGhhcmQtY29kZXMgYSBjb21wbGV4IHZhbHVlIGFzIHRoZSBzdGFydCwgbGlrZSB0b3A6IFwiY2FsYygydmggLyAyKVwiLiBXaXRob3V0IHRoaXMsIGl0J2QgdXNlIHRoZSBjb21wdXRlZCB2YWx1ZSAoYWx3YXlzIGluIHB4KVxuICAgICAgICAgIHN0YXJ0VmFsdWUgPSB0eXBlb2Ygc3RhcnRBdFtwXSA9PT0gXCJmdW5jdGlvblwiID8gc3RhcnRBdFtwXS5jYWxsKHR3ZWVuLCBpbmRleCwgdGFyZ2V0LCB0YXJnZXRzKSA6IHN0YXJ0QXRbcF07XG4gICAgICAgICAgX2lzU3RyaW5nKHN0YXJ0VmFsdWUpICYmIH5zdGFydFZhbHVlLmluZGV4T2YoXCJyYW5kb20oXCIpICYmIChzdGFydFZhbHVlID0gX3JlcGxhY2VSYW5kb20oc3RhcnRWYWx1ZSkpO1xuICAgICAgICAgIGdldFVuaXQoc3RhcnRWYWx1ZSArIFwiXCIpIHx8IChzdGFydFZhbHVlICs9IF9jb25maWcudW5pdHNbcF0gfHwgZ2V0VW5pdChfZ2V0KHRhcmdldCwgcCkpIHx8IFwiXCIpOyAvLyBmb3IgY2FzZXMgd2hlbiBzb21lb25lIHBhc3NlcyBpbiBhIHVuaXRsZXNzIHZhbHVlIGxpa2Uge3g6IDEwMH07IGlmIHdlIHRyeSBzZXR0aW5nIHRyYW5zbGF0ZSgxMDAsIDBweCkgaXQgd29uJ3Qgd29yay5cblxuICAgICAgICAgIChzdGFydFZhbHVlICsgXCJcIikuY2hhckF0KDEpID09PSBcIj1cIiAmJiAoc3RhcnRWYWx1ZSA9IF9nZXQodGFyZ2V0LCBwKSk7IC8vIGNhbid0IHdvcmsgd2l0aCByZWxhdGl2ZSB2YWx1ZXNcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzdGFydFZhbHVlID0gX2dldCh0YXJnZXQsIHApO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhcnROdW0gPSBwYXJzZUZsb2F0KHN0YXJ0VmFsdWUpO1xuICAgICAgICByZWxhdGl2ZSA9IHR5cGUgPT09IFwic3RyaW5nXCIgJiYgZW5kVmFsdWUuY2hhckF0KDEpID09PSBcIj1cIiAmJiBlbmRWYWx1ZS5zdWJzdHIoMCwgMik7XG4gICAgICAgIHJlbGF0aXZlICYmIChlbmRWYWx1ZSA9IGVuZFZhbHVlLnN1YnN0cigyKSk7XG4gICAgICAgIGVuZE51bSA9IHBhcnNlRmxvYXQoZW5kVmFsdWUpO1xuXG4gICAgICAgIGlmIChwIGluIF9wcm9wZXJ0eUFsaWFzZXMpIHtcbiAgICAgICAgICBpZiAocCA9PT0gXCJhdXRvQWxwaGFcIikge1xuICAgICAgICAgICAgLy9zcGVjaWFsIGNhc2Ugd2hlcmUgd2UgY29udHJvbCB0aGUgdmlzaWJpbGl0eSBhbG9uZyB3aXRoIG9wYWNpdHkuIFdlIHN0aWxsIGFsbG93IHRoZSBvcGFjaXR5IHZhbHVlIHRvIHBhc3MgdGhyb3VnaCBhbmQgZ2V0IHR3ZWVuZWQuXG4gICAgICAgICAgICBpZiAoc3RhcnROdW0gPT09IDEgJiYgX2dldCh0YXJnZXQsIFwidmlzaWJpbGl0eVwiKSA9PT0gXCJoaWRkZW5cIiAmJiBlbmROdW0pIHtcbiAgICAgICAgICAgICAgLy9pZiB2aXNpYmlsaXR5IGlzIGluaXRpYWxseSBzZXQgdG8gXCJoaWRkZW5cIiwgd2Ugc2hvdWxkIGludGVycHJldCB0aGF0IGFzIGludGVudCB0byBtYWtlIG9wYWNpdHkgMCAoYSBjb252ZW5pZW5jZSlcbiAgICAgICAgICAgICAgc3RhcnROdW0gPSAwO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpbmxpbmVQcm9wcy5wdXNoKFwidmlzaWJpbGl0eVwiLCBzdHlsZS52aXNpYmlsaXR5KTtcblxuICAgICAgICAgICAgX2FkZE5vblR3ZWVuaW5nUFQodGhpcywgc3R5bGUsIFwidmlzaWJpbGl0eVwiLCBzdGFydE51bSA/IFwiaW5oZXJpdFwiIDogXCJoaWRkZW5cIiwgZW5kTnVtID8gXCJpbmhlcml0XCIgOiBcImhpZGRlblwiLCAhZW5kTnVtKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAocCAhPT0gXCJzY2FsZVwiICYmIHAgIT09IFwidHJhbnNmb3JtXCIpIHtcbiAgICAgICAgICAgIHAgPSBfcHJvcGVydHlBbGlhc2VzW3BdO1xuICAgICAgICAgICAgfnAuaW5kZXhPZihcIixcIikgJiYgKHAgPSBwLnNwbGl0KFwiLFwiKVswXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaXNUcmFuc2Zvcm1SZWxhdGVkID0gcCBpbiBfdHJhbnNmb3JtUHJvcHM7IC8vLS0tIFRSQU5TRk9STS1SRUxBVEVEIC0tLVxuXG4gICAgICAgIGlmIChpc1RyYW5zZm9ybVJlbGF0ZWQpIHtcbiAgICAgICAgICB0aGlzLnN0eWxlcy5zYXZlKHApO1xuXG4gICAgICAgICAgaWYgKCF0cmFuc2Zvcm1Qcm9wVHdlZW4pIHtcbiAgICAgICAgICAgIGNhY2hlID0gdGFyZ2V0Ll9nc2FwO1xuICAgICAgICAgICAgY2FjaGUucmVuZGVyVHJhbnNmb3JtICYmICF2YXJzLnBhcnNlVHJhbnNmb3JtIHx8IF9wYXJzZVRyYW5zZm9ybSh0YXJnZXQsIHZhcnMucGFyc2VUcmFuc2Zvcm0pOyAvLyBpZiwgZm9yIGV4YW1wbGUsIGdzYXAuc2V0KC4uLiB7dHJhbnNmb3JtOlwidHJhbnNsYXRlWCg1MHZ3KVwifSksIHRoZSBfZ2V0KCkgY2FsbCBkb2Vzbid0IHBhcnNlIHRoZSB0cmFuc2Zvcm0sIHRodXMgY2FjaGUucmVuZGVyVHJhbnNmb3JtIHdvbid0IGJlIHNldCB5ZXQgc28gZm9yY2UgdGhlIHBhcnNpbmcgb2YgdGhlIHRyYW5zZm9ybSBoZXJlLlxuXG4gICAgICAgICAgICBzbW9vdGggPSB2YXJzLnNtb290aE9yaWdpbiAhPT0gZmFsc2UgJiYgY2FjaGUuc21vb3RoO1xuICAgICAgICAgICAgdHJhbnNmb3JtUHJvcFR3ZWVuID0gdGhpcy5fcHQgPSBuZXcgUHJvcFR3ZWVuKHRoaXMuX3B0LCBzdHlsZSwgX3RyYW5zZm9ybVByb3AsIDAsIDEsIGNhY2hlLnJlbmRlclRyYW5zZm9ybSwgY2FjaGUsIDAsIC0xKTsgLy90aGUgZmlyc3QgdGltZSB0aHJvdWdoLCBjcmVhdGUgdGhlIHJlbmRlcmluZyBQcm9wVHdlZW4gc28gdGhhdCBpdCBydW5zIExBU1QgKGluIHRoZSBsaW5rZWQgbGlzdCwgd2Uga2VlcCBhZGRpbmcgdG8gdGhlIGJlZ2lubmluZylcblxuICAgICAgICAgICAgdHJhbnNmb3JtUHJvcFR3ZWVuLmRlcCA9IDE7IC8vZmxhZyBpdCBhcyBkZXBlbmRlbnQgc28gdGhhdCBpZiB0aGluZ3MgZ2V0IGtpbGxlZC9vdmVyd3JpdHRlbiBhbmQgdGhpcyBpcyB0aGUgb25seSBQcm9wVHdlZW4gbGVmdCwgd2UgY2FuIHNhZmVseSBraWxsIHRoZSB3aG9sZSB0d2Vlbi5cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAocCA9PT0gXCJzY2FsZVwiKSB7XG4gICAgICAgICAgICB0aGlzLl9wdCA9IG5ldyBQcm9wVHdlZW4odGhpcy5fcHQsIGNhY2hlLCBcInNjYWxlWVwiLCBjYWNoZS5zY2FsZVksIChyZWxhdGl2ZSA/IF9wYXJzZVJlbGF0aXZlKGNhY2hlLnNjYWxlWSwgcmVsYXRpdmUgKyBlbmROdW0pIDogZW5kTnVtKSAtIGNhY2hlLnNjYWxlWSB8fCAwLCBfcmVuZGVyQ1NTUHJvcCk7XG4gICAgICAgICAgICB0aGlzLl9wdC51ID0gMDtcbiAgICAgICAgICAgIHByb3BzLnB1c2goXCJzY2FsZVlcIiwgcCk7XG4gICAgICAgICAgICBwICs9IFwiWFwiO1xuICAgICAgICAgIH0gZWxzZSBpZiAocCA9PT0gXCJ0cmFuc2Zvcm1PcmlnaW5cIikge1xuICAgICAgICAgICAgaW5saW5lUHJvcHMucHVzaChfdHJhbnNmb3JtT3JpZ2luUHJvcCwgc3R5bGVbX3RyYW5zZm9ybU9yaWdpblByb3BdKTtcbiAgICAgICAgICAgIGVuZFZhbHVlID0gX2NvbnZlcnRLZXl3b3Jkc1RvUGVyY2VudGFnZXMoZW5kVmFsdWUpOyAvL2luIGNhc2Ugc29tZXRoaW5nIGxpa2UgXCJsZWZ0IHRvcFwiIG9yIFwiYm90dG9tIHJpZ2h0XCIgaXMgcGFzc2VkIGluLiBDb252ZXJ0IHRvIHBlcmNlbnRhZ2VzLlxuXG4gICAgICAgICAgICBpZiAoY2FjaGUuc3ZnKSB7XG4gICAgICAgICAgICAgIF9hcHBseVNWR09yaWdpbih0YXJnZXQsIGVuZFZhbHVlLCAwLCBzbW9vdGgsIDAsIHRoaXMpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgZW5kVW5pdCA9IHBhcnNlRmxvYXQoZW5kVmFsdWUuc3BsaXQoXCIgXCIpWzJdKSB8fCAwOyAvL2hhbmRsZSB0aGUgek9yaWdpbiBzZXBhcmF0ZWx5IVxuXG4gICAgICAgICAgICAgIGVuZFVuaXQgIT09IGNhY2hlLnpPcmlnaW4gJiYgX2FkZE5vblR3ZWVuaW5nUFQodGhpcywgY2FjaGUsIFwiek9yaWdpblwiLCBjYWNoZS56T3JpZ2luLCBlbmRVbml0KTtcblxuICAgICAgICAgICAgICBfYWRkTm9uVHdlZW5pbmdQVCh0aGlzLCBzdHlsZSwgcCwgX2ZpcnN0VHdvT25seShzdGFydFZhbHVlKSwgX2ZpcnN0VHdvT25seShlbmRWYWx1ZSkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHAgPT09IFwic3ZnT3JpZ2luXCIpIHtcbiAgICAgICAgICAgIF9hcHBseVNWR09yaWdpbih0YXJnZXQsIGVuZFZhbHVlLCAxLCBzbW9vdGgsIDAsIHRoaXMpO1xuXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHAgaW4gX3JvdGF0aW9uYWxQcm9wZXJ0aWVzKSB7XG4gICAgICAgICAgICBfYWRkUm90YXRpb25hbFByb3BUd2Vlbih0aGlzLCBjYWNoZSwgcCwgc3RhcnROdW0sIHJlbGF0aXZlID8gX3BhcnNlUmVsYXRpdmUoc3RhcnROdW0sIHJlbGF0aXZlICsgZW5kVmFsdWUpIDogZW5kVmFsdWUpO1xuXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHAgPT09IFwic21vb3RoT3JpZ2luXCIpIHtcbiAgICAgICAgICAgIF9hZGROb25Ud2VlbmluZ1BUKHRoaXMsIGNhY2hlLCBcInNtb290aFwiLCBjYWNoZS5zbW9vdGgsIGVuZFZhbHVlKTtcblxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfSBlbHNlIGlmIChwID09PSBcImZvcmNlM0RcIikge1xuICAgICAgICAgICAgY2FjaGVbcF0gPSBlbmRWYWx1ZTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH0gZWxzZSBpZiAocCA9PT0gXCJ0cmFuc2Zvcm1cIikge1xuICAgICAgICAgICAgX2FkZFJhd1RyYW5zZm9ybVBUcyh0aGlzLCBlbmRWYWx1ZSwgdGFyZ2V0KTtcblxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKCEocCBpbiBzdHlsZSkpIHtcbiAgICAgICAgICBwID0gX2NoZWNrUHJvcFByZWZpeChwKSB8fCBwO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzVHJhbnNmb3JtUmVsYXRlZCB8fCAoZW5kTnVtIHx8IGVuZE51bSA9PT0gMCkgJiYgKHN0YXJ0TnVtIHx8IHN0YXJ0TnVtID09PSAwKSAmJiAhX2NvbXBsZXhFeHAudGVzdChlbmRWYWx1ZSkgJiYgcCBpbiBzdHlsZSkge1xuICAgICAgICAgIHN0YXJ0VW5pdCA9IChzdGFydFZhbHVlICsgXCJcIikuc3Vic3RyKChzdGFydE51bSArIFwiXCIpLmxlbmd0aCk7XG4gICAgICAgICAgZW5kTnVtIHx8IChlbmROdW0gPSAwKTsgLy8gcHJvdGVjdCBhZ2FpbnN0IE5hTlxuXG4gICAgICAgICAgZW5kVW5pdCA9IGdldFVuaXQoZW5kVmFsdWUpIHx8IChwIGluIF9jb25maWcudW5pdHMgPyBfY29uZmlnLnVuaXRzW3BdIDogc3RhcnRVbml0KTtcbiAgICAgICAgICBzdGFydFVuaXQgIT09IGVuZFVuaXQgJiYgKHN0YXJ0TnVtID0gX2NvbnZlcnRUb1VuaXQodGFyZ2V0LCBwLCBzdGFydFZhbHVlLCBlbmRVbml0KSk7XG4gICAgICAgICAgdGhpcy5fcHQgPSBuZXcgUHJvcFR3ZWVuKHRoaXMuX3B0LCBpc1RyYW5zZm9ybVJlbGF0ZWQgPyBjYWNoZSA6IHN0eWxlLCBwLCBzdGFydE51bSwgKHJlbGF0aXZlID8gX3BhcnNlUmVsYXRpdmUoc3RhcnROdW0sIHJlbGF0aXZlICsgZW5kTnVtKSA6IGVuZE51bSkgLSBzdGFydE51bSwgIWlzVHJhbnNmb3JtUmVsYXRlZCAmJiAoZW5kVW5pdCA9PT0gXCJweFwiIHx8IHAgPT09IFwiekluZGV4XCIpICYmIHZhcnMuYXV0b1JvdW5kICE9PSBmYWxzZSA/IF9yZW5kZXJSb3VuZGVkQ1NTUHJvcCA6IF9yZW5kZXJDU1NQcm9wKTtcbiAgICAgICAgICB0aGlzLl9wdC51ID0gZW5kVW5pdCB8fCAwO1xuXG4gICAgICAgICAgaWYgKHN0YXJ0VW5pdCAhPT0gZW5kVW5pdCAmJiBlbmRVbml0ICE9PSBcIiVcIikge1xuICAgICAgICAgICAgLy93aGVuIHRoZSB0d2VlbiBnb2VzIGFsbCB0aGUgd2F5IGJhY2sgdG8gdGhlIGJlZ2lubmluZywgd2UgbmVlZCB0byByZXZlcnQgaXQgdG8gdGhlIE9MRC9PUklHSU5BTCB2YWx1ZSAod2l0aCB0aG9zZSB1bml0cykuIFdlIHJlY29yZCB0aGF0IGFzIGEgXCJiXCIgKGJlZ2lubmluZykgcHJvcGVydHkgYW5kIHBvaW50IHRvIGEgcmVuZGVyIG1ldGhvZCB0aGF0IGhhbmRsZXMgdGhhdC4gKHBlcmZvcm1hbmNlIG9wdGltaXphdGlvbilcbiAgICAgICAgICAgIHRoaXMuX3B0LmIgPSBzdGFydFZhbHVlO1xuICAgICAgICAgICAgdGhpcy5fcHQuciA9IF9yZW5kZXJDU1NQcm9wV2l0aEJlZ2lubmluZztcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoIShwIGluIHN0eWxlKSkge1xuICAgICAgICAgIGlmIChwIGluIHRhcmdldCkge1xuICAgICAgICAgICAgLy9tYXliZSBpdCdzIG5vdCBhIHN0eWxlIC0gaXQgY291bGQgYmUgYSBwcm9wZXJ0eSBhZGRlZCBkaXJlY3RseSB0byBhbiBlbGVtZW50IGluIHdoaWNoIGNhc2Ugd2UnbGwgdHJ5IHRvIGFuaW1hdGUgdGhhdC5cbiAgICAgICAgICAgIHRoaXMuYWRkKHRhcmdldCwgcCwgc3RhcnRWYWx1ZSB8fCB0YXJnZXRbcF0sIHJlbGF0aXZlID8gcmVsYXRpdmUgKyBlbmRWYWx1ZSA6IGVuZFZhbHVlLCBpbmRleCwgdGFyZ2V0cyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIF9taXNzaW5nUGx1Z2luKHAsIGVuZFZhbHVlKTtcblxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIF90d2VlbkNvbXBsZXhDU1NTdHJpbmcuY2FsbCh0aGlzLCB0YXJnZXQsIHAsIHN0YXJ0VmFsdWUsIHJlbGF0aXZlID8gcmVsYXRpdmUgKyBlbmRWYWx1ZSA6IGVuZFZhbHVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlzVHJhbnNmb3JtUmVsYXRlZCB8fCBpbmxpbmVQcm9wcy5wdXNoKHAsIHN0eWxlW3BdKTtcbiAgICAgICAgcHJvcHMucHVzaChwKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBoYXNQcmlvcml0eSAmJiBfc29ydFByb3BUd2VlbnNCeVByaW9yaXR5KHRoaXMpO1xuICB9LFxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcihyYXRpbywgZGF0YSkge1xuICAgIGlmIChkYXRhLnR3ZWVuLl90aW1lIHx8ICFfcmV2ZXJ0aW5nKCkpIHtcbiAgICAgIHZhciBwdCA9IGRhdGEuX3B0O1xuXG4gICAgICB3aGlsZSAocHQpIHtcbiAgICAgICAgcHQucihyYXRpbywgcHQuZCk7XG4gICAgICAgIHB0ID0gcHQuX25leHQ7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGRhdGEuc3R5bGVzLnJldmVydCgpO1xuICAgIH1cbiAgfSxcbiAgZ2V0OiBfZ2V0LFxuICBhbGlhc2VzOiBfcHJvcGVydHlBbGlhc2VzLFxuICBnZXRTZXR0ZXI6IGZ1bmN0aW9uIGdldFNldHRlcih0YXJnZXQsIHByb3BlcnR5LCBwbHVnaW4pIHtcbiAgICAvL3JldHVybnMgYSBzZXR0ZXIgZnVuY3Rpb24gdGhhdCBhY2NlcHRzIHRhcmdldCwgcHJvcGVydHksIHZhbHVlIGFuZCBhcHBsaWVzIGl0IGFjY29yZGluZ2x5LiBSZW1lbWJlciwgcHJvcGVydGllcyBsaWtlIFwieFwiIGFyZW4ndCBhcyBzaW1wbGUgYXMgdGFyZ2V0LnN0eWxlLnByb3BlcnR5ID0gdmFsdWUgYmVjYXVzZSB0aGV5J3ZlIGdvdCB0byBiZSBhcHBsaWVkIHRvIGEgcHJveHkgb2JqZWN0IGFuZCB0aGVuIG1lcmdlZCBpbnRvIGEgdHJhbnNmb3JtIHN0cmluZyBpbiBhIHJlbmRlcmVyLlxuICAgIHZhciBwID0gX3Byb3BlcnR5QWxpYXNlc1twcm9wZXJ0eV07XG4gICAgcCAmJiBwLmluZGV4T2YoXCIsXCIpIDwgMCAmJiAocHJvcGVydHkgPSBwKTtcbiAgICByZXR1cm4gcHJvcGVydHkgaW4gX3RyYW5zZm9ybVByb3BzICYmIHByb3BlcnR5ICE9PSBfdHJhbnNmb3JtT3JpZ2luUHJvcCAmJiAodGFyZ2V0Ll9nc2FwLnggfHwgX2dldCh0YXJnZXQsIFwieFwiKSkgPyBwbHVnaW4gJiYgX3JlY2VudFNldHRlclBsdWdpbiA9PT0gcGx1Z2luID8gcHJvcGVydHkgPT09IFwic2NhbGVcIiA/IF9zZXR0ZXJTY2FsZSA6IF9zZXR0ZXJUcmFuc2Zvcm0gOiAoX3JlY2VudFNldHRlclBsdWdpbiA9IHBsdWdpbiB8fCB7fSkgJiYgKHByb3BlcnR5ID09PSBcInNjYWxlXCIgPyBfc2V0dGVyU2NhbGVXaXRoUmVuZGVyIDogX3NldHRlclRyYW5zZm9ybVdpdGhSZW5kZXIpIDogdGFyZ2V0LnN0eWxlICYmICFfaXNVbmRlZmluZWQodGFyZ2V0LnN0eWxlW3Byb3BlcnR5XSkgPyBfc2V0dGVyQ1NTU3R5bGUgOiB+cHJvcGVydHkuaW5kZXhPZihcIi1cIikgPyBfc2V0dGVyQ1NTUHJvcCA6IF9nZXRTZXR0ZXIodGFyZ2V0LCBwcm9wZXJ0eSk7XG4gIH0sXG4gIGNvcmU6IHtcbiAgICBfcmVtb3ZlUHJvcGVydHk6IF9yZW1vdmVQcm9wZXJ0eSxcbiAgICBfZ2V0TWF0cml4OiBfZ2V0TWF0cml4XG4gIH1cbn07XG5nc2FwLnV0aWxzLmNoZWNrUHJlZml4ID0gX2NoZWNrUHJvcFByZWZpeDtcbmdzYXAuY29yZS5nZXRTdHlsZVNhdmVyID0gX2dldFN0eWxlU2F2ZXI7XG5cbihmdW5jdGlvbiAocG9zaXRpb25BbmRTY2FsZSwgcm90YXRpb24sIG90aGVycywgYWxpYXNlcykge1xuICB2YXIgYWxsID0gX2ZvckVhY2hOYW1lKHBvc2l0aW9uQW5kU2NhbGUgKyBcIixcIiArIHJvdGF0aW9uICsgXCIsXCIgKyBvdGhlcnMsIGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgX3RyYW5zZm9ybVByb3BzW25hbWVdID0gMTtcbiAgfSk7XG5cbiAgX2ZvckVhY2hOYW1lKHJvdGF0aW9uLCBmdW5jdGlvbiAobmFtZSkge1xuICAgIF9jb25maWcudW5pdHNbbmFtZV0gPSBcImRlZ1wiO1xuICAgIF9yb3RhdGlvbmFsUHJvcGVydGllc1tuYW1lXSA9IDE7XG4gIH0pO1xuXG4gIF9wcm9wZXJ0eUFsaWFzZXNbYWxsWzEzXV0gPSBwb3NpdGlvbkFuZFNjYWxlICsgXCIsXCIgKyByb3RhdGlvbjtcblxuICBfZm9yRWFjaE5hbWUoYWxpYXNlcywgZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB2YXIgc3BsaXQgPSBuYW1lLnNwbGl0KFwiOlwiKTtcbiAgICBfcHJvcGVydHlBbGlhc2VzW3NwbGl0WzFdXSA9IGFsbFtzcGxpdFswXV07XG4gIH0pO1xufSkoXCJ4LHkseixzY2FsZSxzY2FsZVgsc2NhbGVZLHhQZXJjZW50LHlQZXJjZW50XCIsIFwicm90YXRpb24scm90YXRpb25YLHJvdGF0aW9uWSxza2V3WCxza2V3WVwiLCBcInRyYW5zZm9ybSx0cmFuc2Zvcm1PcmlnaW4sc3ZnT3JpZ2luLGZvcmNlM0Qsc21vb3RoT3JpZ2luLHRyYW5zZm9ybVBlcnNwZWN0aXZlXCIsIFwiMDp0cmFuc2xhdGVYLDE6dHJhbnNsYXRlWSwyOnRyYW5zbGF0ZVosODpyb3RhdGUsODpyb3RhdGlvblosODpyb3RhdGVaLDk6cm90YXRlWCwxMDpyb3RhdGVZXCIpO1xuXG5fZm9yRWFjaE5hbWUoXCJ4LHkseix0b3AscmlnaHQsYm90dG9tLGxlZnQsd2lkdGgsaGVpZ2h0LGZvbnRTaXplLHBhZGRpbmcsbWFyZ2luLHBlcnNwZWN0aXZlXCIsIGZ1bmN0aW9uIChuYW1lKSB7XG4gIF9jb25maWcudW5pdHNbbmFtZV0gPSBcInB4XCI7XG59KTtcblxuZ3NhcC5yZWdpc3RlclBsdWdpbihDU1NQbHVnaW4pO1xuZXhwb3J0IHsgQ1NTUGx1Z2luIGFzIGRlZmF1bHQsIF9nZXRCQm94LCBfY3JlYXRlRWxlbWVudCwgX2NoZWNrUHJvcFByZWZpeCBhcyBjaGVja1ByZWZpeCB9OyIsImZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHNMb29zZShzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MucHJvdG90eXBlKTsgc3ViQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gc3ViQ2xhc3M7IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuLyohXG4gKiBHU0FQIDMuMTEuMFxuICogaHR0cHM6Ly9ncmVlbnNvY2suY29tXG4gKlxuICogQGxpY2Vuc2UgQ29weXJpZ2h0IDIwMDgtMjAyMiwgR3JlZW5Tb2NrLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogU3ViamVjdCB0byB0aGUgdGVybXMgYXQgaHR0cHM6Ly9ncmVlbnNvY2suY29tL3N0YW5kYXJkLWxpY2Vuc2Ugb3IgZm9yXG4gKiBDbHViIEdyZWVuU29jayBtZW1iZXJzLCB0aGUgYWdyZWVtZW50IGlzc3VlZCB3aXRoIHRoYXQgbWVtYmVyc2hpcC5cbiAqIEBhdXRob3I6IEphY2sgRG95bGUsIGphY2tAZ3JlZW5zb2NrLmNvbVxuKi9cblxuLyogZXNsaW50LWRpc2FibGUgKi9cbnZhciBfY29uZmlnID0ge1xuICBhdXRvU2xlZXA6IDEyMCxcbiAgZm9yY2UzRDogXCJhdXRvXCIsXG4gIG51bGxUYXJnZXRXYXJuOiAxLFxuICB1bml0czoge1xuICAgIGxpbmVIZWlnaHQ6IFwiXCJcbiAgfVxufSxcbiAgICBfZGVmYXVsdHMgPSB7XG4gIGR1cmF0aW9uOiAuNSxcbiAgb3ZlcndyaXRlOiBmYWxzZSxcbiAgZGVsYXk6IDBcbn0sXG4gICAgX3N1cHByZXNzT3ZlcndyaXRlcyxcbiAgICBfcmV2ZXJ0aW5nLFxuICAgIF9jb250ZXh0LFxuICAgIF9iaWdOdW0gPSAxZTgsXG4gICAgX3RpbnlOdW0gPSAxIC8gX2JpZ051bSxcbiAgICBfMlBJID0gTWF0aC5QSSAqIDIsXG4gICAgX0hBTEZfUEkgPSBfMlBJIC8gNCxcbiAgICBfZ3NJRCA9IDAsXG4gICAgX3NxcnQgPSBNYXRoLnNxcnQsXG4gICAgX2NvcyA9IE1hdGguY29zLFxuICAgIF9zaW4gPSBNYXRoLnNpbixcbiAgICBfaXNTdHJpbmcgPSBmdW5jdGlvbiBfaXNTdHJpbmcodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIjtcbn0sXG4gICAgX2lzRnVuY3Rpb24gPSBmdW5jdGlvbiBfaXNGdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCI7XG59LFxuICAgIF9pc051bWJlciA9IGZ1bmN0aW9uIF9pc051bWJlcih2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSBcIm51bWJlclwiO1xufSxcbiAgICBfaXNVbmRlZmluZWQgPSBmdW5jdGlvbiBfaXNVbmRlZmluZWQodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gXCJ1bmRlZmluZWRcIjtcbn0sXG4gICAgX2lzT2JqZWN0ID0gZnVuY3Rpb24gX2lzT2JqZWN0KHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCI7XG59LFxuICAgIF9pc05vdEZhbHNlID0gZnVuY3Rpb24gX2lzTm90RmFsc2UodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9PSBmYWxzZTtcbn0sXG4gICAgX3dpbmRvd0V4aXN0cyA9IGZ1bmN0aW9uIF93aW5kb3dFeGlzdHMoKSB7XG4gIHJldHVybiB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiO1xufSxcbiAgICBfaXNGdW5jT3JTdHJpbmcgPSBmdW5jdGlvbiBfaXNGdW5jT3JTdHJpbmcodmFsdWUpIHtcbiAgcmV0dXJuIF9pc0Z1bmN0aW9uKHZhbHVlKSB8fCBfaXNTdHJpbmcodmFsdWUpO1xufSxcbiAgICBfaXNUeXBlZEFycmF5ID0gdHlwZW9mIEFycmF5QnVmZmVyID09PSBcImZ1bmN0aW9uXCIgJiYgQXJyYXlCdWZmZXIuaXNWaWV3IHx8IGZ1bmN0aW9uICgpIHt9LFxuICAgIC8vIG5vdGU6IElFMTAgaGFzIEFycmF5QnVmZmVyLCBidXQgTk9UIEFycmF5QnVmZmVyLmlzVmlldygpLlxuX2lzQXJyYXkgPSBBcnJheS5pc0FycmF5LFxuICAgIF9zdHJpY3ROdW1FeHAgPSAvKD86LT9cXC4/XFxkfFxcLikrL2dpLFxuICAgIC8vb25seSBudW1iZXJzIChpbmNsdWRpbmcgbmVnYXRpdmVzIGFuZCBkZWNpbWFscykgYnV0IE5PVCByZWxhdGl2ZSB2YWx1ZXMuXG5fbnVtRXhwID0gL1stKz0uXSpcXGQrWy5lXFwtK10qXFxkKltlXFwtK10qXFxkKi9nLFxuICAgIC8vZmluZHMgYW55IG51bWJlcnMsIGluY2x1ZGluZyBvbmVzIHRoYXQgc3RhcnQgd2l0aCArPSBvciAtPSwgbmVnYXRpdmUgbnVtYmVycywgYW5kIG9uZXMgaW4gc2NpZW50aWZpYyBub3RhdGlvbiBsaWtlIDFlLTguXG5fbnVtV2l0aFVuaXRFeHAgPSAvWy0rPS5dKlxcZCtbLmUtXSpcXGQqW2EteiVdKi9nLFxuICAgIF9jb21wbGV4U3RyaW5nTnVtRXhwID0gL1stKz0uXSpcXGQrXFwuP1xcZCooPzplLXxlXFwrKT9cXGQqL2dpLFxuICAgIC8vZHVwbGljYXRlIHNvIHRoYXQgd2hpbGUgd2UncmUgbG9vcGluZyB0aHJvdWdoIG1hdGNoZXMgZnJvbSBleGVjKCksIGl0IGRvZXNuJ3QgY29udGFtaW5hdGUgdGhlIGxhc3RJbmRleCBvZiBfbnVtRXhwIHdoaWNoIHdlIHVzZSB0byBzZWFyY2ggZm9yIGNvbG9ycyB0b28uXG5fcmVsRXhwID0gL1srLV09LT9bLlxcZF0rLyxcbiAgICBfZGVsaW1pdGVkVmFsdWVFeHAgPSAvW14sJ1wiXFxbXFxdXFxzXSsvZ2ksXG4gICAgLy8gcHJldmlvdXNseSAvWyNcXC0rLl0qXFxiW2EtelxcZFxcLT0rJS5dKy9naSBidXQgZGlkbid0IGNhdGNoIHNwZWNpYWwgY2hhcmFjdGVycy5cbl91bml0RXhwID0gL15bK1xcLT1lXFxzXFxkXSpcXGQrWy5cXGRdKihbYS16XSp8JSlcXHMqJC9pLFxuICAgIF9nbG9iYWxUaW1lbGluZSxcbiAgICBfd2luLFxuICAgIF9jb3JlSW5pdHRlZCxcbiAgICBfZG9jLFxuICAgIF9nbG9iYWxzID0ge30sXG4gICAgX2luc3RhbGxTY29wZSA9IHt9LFxuICAgIF9jb3JlUmVhZHksXG4gICAgX2luc3RhbGwgPSBmdW5jdGlvbiBfaW5zdGFsbChzY29wZSkge1xuICByZXR1cm4gKF9pbnN0YWxsU2NvcGUgPSBfbWVyZ2Uoc2NvcGUsIF9nbG9iYWxzKSkgJiYgZ3NhcDtcbn0sXG4gICAgX21pc3NpbmdQbHVnaW4gPSBmdW5jdGlvbiBfbWlzc2luZ1BsdWdpbihwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgcmV0dXJuIGNvbnNvbGUud2FybihcIkludmFsaWQgcHJvcGVydHlcIiwgcHJvcGVydHksIFwic2V0IHRvXCIsIHZhbHVlLCBcIk1pc3NpbmcgcGx1Z2luPyBnc2FwLnJlZ2lzdGVyUGx1Z2luKClcIik7XG59LFxuICAgIF93YXJuID0gZnVuY3Rpb24gX3dhcm4obWVzc2FnZSwgc3VwcHJlc3MpIHtcbiAgcmV0dXJuICFzdXBwcmVzcyAmJiBjb25zb2xlLndhcm4obWVzc2FnZSk7XG59LFxuICAgIF9hZGRHbG9iYWwgPSBmdW5jdGlvbiBfYWRkR2xvYmFsKG5hbWUsIG9iaikge1xuICByZXR1cm4gbmFtZSAmJiAoX2dsb2JhbHNbbmFtZV0gPSBvYmopICYmIF9pbnN0YWxsU2NvcGUgJiYgKF9pbnN0YWxsU2NvcGVbbmFtZV0gPSBvYmopIHx8IF9nbG9iYWxzO1xufSxcbiAgICBfZW1wdHlGdW5jID0gZnVuY3Rpb24gX2VtcHR5RnVuYygpIHtcbiAgcmV0dXJuIDA7XG59LFxuICAgIF9zdGFydEF0UmV2ZXJ0Q29uZmlnID0ge1xuICBzdXBwcmVzc0V2ZW50czogdHJ1ZSxcbiAgaXNTdGFydDogdHJ1ZVxufSxcbiAgICBfcmV2ZXJ0Q29uZmlnID0ge1xuICBzdXBwcmVzc0V2ZW50czogdHJ1ZVxufSxcbiAgICBfcmVzZXJ2ZWRQcm9wcyA9IHt9LFxuICAgIF9sYXp5VHdlZW5zID0gW10sXG4gICAgX2xhenlMb29rdXAgPSB7fSxcbiAgICBfbGFzdFJlbmRlcmVkRnJhbWUsXG4gICAgX3BsdWdpbnMgPSB7fSxcbiAgICBfZWZmZWN0cyA9IHt9LFxuICAgIF9uZXh0R0NGcmFtZSA9IDMwLFxuICAgIF9oYXJuZXNzUGx1Z2lucyA9IFtdLFxuICAgIF9jYWxsYmFja05hbWVzID0gXCJcIixcbiAgICBfaGFybmVzcyA9IGZ1bmN0aW9uIF9oYXJuZXNzKHRhcmdldHMpIHtcbiAgdmFyIHRhcmdldCA9IHRhcmdldHNbMF0sXG4gICAgICBoYXJuZXNzUGx1Z2luLFxuICAgICAgaTtcbiAgX2lzT2JqZWN0KHRhcmdldCkgfHwgX2lzRnVuY3Rpb24odGFyZ2V0KSB8fCAodGFyZ2V0cyA9IFt0YXJnZXRzXSk7XG5cbiAgaWYgKCEoaGFybmVzc1BsdWdpbiA9ICh0YXJnZXQuX2dzYXAgfHwge30pLmhhcm5lc3MpKSB7XG4gICAgLy8gZmluZCB0aGUgZmlyc3QgdGFyZ2V0IHdpdGggYSBoYXJuZXNzLiBXZSBhc3N1bWUgdGFyZ2V0cyBwYXNzZWQgaW50byBhbiBhbmltYXRpb24gd2lsbCBiZSBvZiBzaW1pbGFyIHR5cGUsIG1lYW5pbmcgdGhlIHNhbWUga2luZCBvZiBoYXJuZXNzIGNhbiBiZSB1c2VkIGZvciB0aGVtIGFsbCAocGVyZm9ybWFuY2Ugb3B0aW1pemF0aW9uKVxuICAgIGkgPSBfaGFybmVzc1BsdWdpbnMubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGktLSAmJiAhX2hhcm5lc3NQbHVnaW5zW2ldLnRhcmdldFRlc3QodGFyZ2V0KSkge31cblxuICAgIGhhcm5lc3NQbHVnaW4gPSBfaGFybmVzc1BsdWdpbnNbaV07XG4gIH1cblxuICBpID0gdGFyZ2V0cy5sZW5ndGg7XG5cbiAgd2hpbGUgKGktLSkge1xuICAgIHRhcmdldHNbaV0gJiYgKHRhcmdldHNbaV0uX2dzYXAgfHwgKHRhcmdldHNbaV0uX2dzYXAgPSBuZXcgR1NDYWNoZSh0YXJnZXRzW2ldLCBoYXJuZXNzUGx1Z2luKSkpIHx8IHRhcmdldHMuc3BsaWNlKGksIDEpO1xuICB9XG5cbiAgcmV0dXJuIHRhcmdldHM7XG59LFxuICAgIF9nZXRDYWNoZSA9IGZ1bmN0aW9uIF9nZXRDYWNoZSh0YXJnZXQpIHtcbiAgcmV0dXJuIHRhcmdldC5fZ3NhcCB8fCBfaGFybmVzcyh0b0FycmF5KHRhcmdldCkpWzBdLl9nc2FwO1xufSxcbiAgICBfZ2V0UHJvcGVydHkgPSBmdW5jdGlvbiBfZ2V0UHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eSwgdikge1xuICByZXR1cm4gKHYgPSB0YXJnZXRbcHJvcGVydHldKSAmJiBfaXNGdW5jdGlvbih2KSA/IHRhcmdldFtwcm9wZXJ0eV0oKSA6IF9pc1VuZGVmaW5lZCh2KSAmJiB0YXJnZXQuZ2V0QXR0cmlidXRlICYmIHRhcmdldC5nZXRBdHRyaWJ1dGUocHJvcGVydHkpIHx8IHY7XG59LFxuICAgIF9mb3JFYWNoTmFtZSA9IGZ1bmN0aW9uIF9mb3JFYWNoTmFtZShuYW1lcywgZnVuYykge1xuICByZXR1cm4gKG5hbWVzID0gbmFtZXMuc3BsaXQoXCIsXCIpKS5mb3JFYWNoKGZ1bmMpIHx8IG5hbWVzO1xufSxcbiAgICAvL3NwbGl0IGEgY29tbWEtZGVsaW1pdGVkIGxpc3Qgb2YgbmFtZXMgaW50byBhbiBhcnJheSwgdGhlbiBydW4gYSBmb3JFYWNoKCkgZnVuY3Rpb24gYW5kIHJldHVybiB0aGUgc3BsaXQgYXJyYXkgKHRoaXMgaXMganVzdCBhIHdheSB0byBjb25zb2xpZGF0ZS9zaG9ydGVuIHNvbWUgY29kZSkuXG5fcm91bmQgPSBmdW5jdGlvbiBfcm91bmQodmFsdWUpIHtcbiAgcmV0dXJuIE1hdGgucm91bmQodmFsdWUgKiAxMDAwMDApIC8gMTAwMDAwIHx8IDA7XG59LFxuICAgIF9yb3VuZFByZWNpc2UgPSBmdW5jdGlvbiBfcm91bmRQcmVjaXNlKHZhbHVlKSB7XG4gIHJldHVybiBNYXRoLnJvdW5kKHZhbHVlICogMTAwMDAwMDApIC8gMTAwMDAwMDAgfHwgMDtcbn0sXG4gICAgLy8gaW5jcmVhc2VkIHByZWNpc2lvbiBtb3N0bHkgZm9yIHRpbWluZyB2YWx1ZXMuXG5fcGFyc2VSZWxhdGl2ZSA9IGZ1bmN0aW9uIF9wYXJzZVJlbGF0aXZlKHN0YXJ0LCB2YWx1ZSkge1xuICB2YXIgb3BlcmF0b3IgPSB2YWx1ZS5jaGFyQXQoMCksXG4gICAgICBlbmQgPSBwYXJzZUZsb2F0KHZhbHVlLnN1YnN0cigyKSk7XG4gIHN0YXJ0ID0gcGFyc2VGbG9hdChzdGFydCk7XG4gIHJldHVybiBvcGVyYXRvciA9PT0gXCIrXCIgPyBzdGFydCArIGVuZCA6IG9wZXJhdG9yID09PSBcIi1cIiA/IHN0YXJ0IC0gZW5kIDogb3BlcmF0b3IgPT09IFwiKlwiID8gc3RhcnQgKiBlbmQgOiBzdGFydCAvIGVuZDtcbn0sXG4gICAgX2FycmF5Q29udGFpbnNBbnkgPSBmdW5jdGlvbiBfYXJyYXlDb250YWluc0FueSh0b1NlYXJjaCwgdG9GaW5kKSB7XG4gIC8vc2VhcmNoZXMgb25lIGFycmF5IHRvIGZpbmQgbWF0Y2hlcyBmb3IgYW55IG9mIHRoZSBpdGVtcyBpbiB0aGUgdG9GaW5kIGFycmF5LiBBcyBzb29uIGFzIG9uZSBpcyBmb3VuZCwgaXQgcmV0dXJucyB0cnVlLiBJdCBkb2VzIE5PVCByZXR1cm4gYWxsIHRoZSBtYXRjaGVzOyBpdCdzIHNpbXBseSBhIGJvb2xlYW4gc2VhcmNoLlxuICB2YXIgbCA9IHRvRmluZC5sZW5ndGgsXG4gICAgICBpID0gMDtcblxuICBmb3IgKDsgdG9TZWFyY2guaW5kZXhPZih0b0ZpbmRbaV0pIDwgMCAmJiArK2kgPCBsOykge31cblxuICByZXR1cm4gaSA8IGw7XG59LFxuICAgIF9sYXp5UmVuZGVyID0gZnVuY3Rpb24gX2xhenlSZW5kZXIoKSB7XG4gIHZhciBsID0gX2xhenlUd2VlbnMubGVuZ3RoLFxuICAgICAgYSA9IF9sYXp5VHdlZW5zLnNsaWNlKDApLFxuICAgICAgaSxcbiAgICAgIHR3ZWVuO1xuXG4gIF9sYXp5TG9va3VwID0ge307XG4gIF9sYXp5VHdlZW5zLmxlbmd0aCA9IDA7XG5cbiAgZm9yIChpID0gMDsgaSA8IGw7IGkrKykge1xuICAgIHR3ZWVuID0gYVtpXTtcbiAgICB0d2VlbiAmJiB0d2Vlbi5fbGF6eSAmJiAodHdlZW4ucmVuZGVyKHR3ZWVuLl9sYXp5WzBdLCB0d2Vlbi5fbGF6eVsxXSwgdHJ1ZSkuX2xhenkgPSAwKTtcbiAgfVxufSxcbiAgICBfbGF6eVNhZmVSZW5kZXIgPSBmdW5jdGlvbiBfbGF6eVNhZmVSZW5kZXIoYW5pbWF0aW9uLCB0aW1lLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpIHtcbiAgX2xhenlUd2VlbnMubGVuZ3RoICYmIF9sYXp5UmVuZGVyKCk7XG4gIGFuaW1hdGlvbi5yZW5kZXIodGltZSwgc3VwcHJlc3NFdmVudHMsIGZvcmNlIHx8IF9yZXZlcnRpbmcpO1xuICBfbGF6eVR3ZWVucy5sZW5ndGggJiYgX2xhenlSZW5kZXIoKTsgLy9pbiBjYXNlIHJlbmRlcmluZyBjYXVzZWQgYW55IHR3ZWVucyB0byBsYXp5LWluaXQsIHdlIHNob3VsZCByZW5kZXIgdGhlbSBiZWNhdXNlIHR5cGljYWxseSB3aGVuIHNvbWVvbmUgY2FsbHMgc2VlaygpIG9yIHRpbWUoKSBvciBwcm9ncmVzcygpLCB0aGV5IGV4cGVjdCBhbiBpbW1lZGlhdGUgcmVuZGVyLlxufSxcbiAgICBfbnVtZXJpY0lmUG9zc2libGUgPSBmdW5jdGlvbiBfbnVtZXJpY0lmUG9zc2libGUodmFsdWUpIHtcbiAgdmFyIG4gPSBwYXJzZUZsb2F0KHZhbHVlKTtcbiAgcmV0dXJuIChuIHx8IG4gPT09IDApICYmICh2YWx1ZSArIFwiXCIpLm1hdGNoKF9kZWxpbWl0ZWRWYWx1ZUV4cCkubGVuZ3RoIDwgMiA/IG4gOiBfaXNTdHJpbmcodmFsdWUpID8gdmFsdWUudHJpbSgpIDogdmFsdWU7XG59LFxuICAgIF9wYXNzVGhyb3VnaCA9IGZ1bmN0aW9uIF9wYXNzVGhyb3VnaChwKSB7XG4gIHJldHVybiBwO1xufSxcbiAgICBfc2V0RGVmYXVsdHMgPSBmdW5jdGlvbiBfc2V0RGVmYXVsdHMob2JqLCBkZWZhdWx0cykge1xuICBmb3IgKHZhciBwIGluIGRlZmF1bHRzKSB7XG4gICAgcCBpbiBvYmogfHwgKG9ialtwXSA9IGRlZmF1bHRzW3BdKTtcbiAgfVxuXG4gIHJldHVybiBvYmo7XG59LFxuICAgIF9zZXRLZXlmcmFtZURlZmF1bHRzID0gZnVuY3Rpb24gX3NldEtleWZyYW1lRGVmYXVsdHMoZXhjbHVkZUR1cmF0aW9uKSB7XG4gIHJldHVybiBmdW5jdGlvbiAob2JqLCBkZWZhdWx0cykge1xuICAgIGZvciAodmFyIHAgaW4gZGVmYXVsdHMpIHtcbiAgICAgIHAgaW4gb2JqIHx8IHAgPT09IFwiZHVyYXRpb25cIiAmJiBleGNsdWRlRHVyYXRpb24gfHwgcCA9PT0gXCJlYXNlXCIgfHwgKG9ialtwXSA9IGRlZmF1bHRzW3BdKTtcbiAgICB9XG4gIH07XG59LFxuICAgIF9tZXJnZSA9IGZ1bmN0aW9uIF9tZXJnZShiYXNlLCB0b01lcmdlKSB7XG4gIGZvciAodmFyIHAgaW4gdG9NZXJnZSkge1xuICAgIGJhc2VbcF0gPSB0b01lcmdlW3BdO1xuICB9XG5cbiAgcmV0dXJuIGJhc2U7XG59LFxuICAgIF9tZXJnZURlZXAgPSBmdW5jdGlvbiBfbWVyZ2VEZWVwKGJhc2UsIHRvTWVyZ2UpIHtcbiAgZm9yICh2YXIgcCBpbiB0b01lcmdlKSB7XG4gICAgcCAhPT0gXCJfX3Byb3RvX19cIiAmJiBwICE9PSBcImNvbnN0cnVjdG9yXCIgJiYgcCAhPT0gXCJwcm90b3R5cGVcIiAmJiAoYmFzZVtwXSA9IF9pc09iamVjdCh0b01lcmdlW3BdKSA/IF9tZXJnZURlZXAoYmFzZVtwXSB8fCAoYmFzZVtwXSA9IHt9KSwgdG9NZXJnZVtwXSkgOiB0b01lcmdlW3BdKTtcbiAgfVxuXG4gIHJldHVybiBiYXNlO1xufSxcbiAgICBfY29weUV4Y2x1ZGluZyA9IGZ1bmN0aW9uIF9jb3B5RXhjbHVkaW5nKG9iaiwgZXhjbHVkaW5nKSB7XG4gIHZhciBjb3B5ID0ge30sXG4gICAgICBwO1xuXG4gIGZvciAocCBpbiBvYmopIHtcbiAgICBwIGluIGV4Y2x1ZGluZyB8fCAoY29weVtwXSA9IG9ialtwXSk7XG4gIH1cblxuICByZXR1cm4gY29weTtcbn0sXG4gICAgX2luaGVyaXREZWZhdWx0cyA9IGZ1bmN0aW9uIF9pbmhlcml0RGVmYXVsdHModmFycykge1xuICB2YXIgcGFyZW50ID0gdmFycy5wYXJlbnQgfHwgX2dsb2JhbFRpbWVsaW5lLFxuICAgICAgZnVuYyA9IHZhcnMua2V5ZnJhbWVzID8gX3NldEtleWZyYW1lRGVmYXVsdHMoX2lzQXJyYXkodmFycy5rZXlmcmFtZXMpKSA6IF9zZXREZWZhdWx0cztcblxuICBpZiAoX2lzTm90RmFsc2UodmFycy5pbmhlcml0KSkge1xuICAgIHdoaWxlIChwYXJlbnQpIHtcbiAgICAgIGZ1bmModmFycywgcGFyZW50LnZhcnMuZGVmYXVsdHMpO1xuICAgICAgcGFyZW50ID0gcGFyZW50LnBhcmVudCB8fCBwYXJlbnQuX2RwO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB2YXJzO1xufSxcbiAgICBfYXJyYXlzTWF0Y2ggPSBmdW5jdGlvbiBfYXJyYXlzTWF0Y2goYTEsIGEyKSB7XG4gIHZhciBpID0gYTEubGVuZ3RoLFxuICAgICAgbWF0Y2ggPSBpID09PSBhMi5sZW5ndGg7XG5cbiAgd2hpbGUgKG1hdGNoICYmIGktLSAmJiBhMVtpXSA9PT0gYTJbaV0pIHt9XG5cbiAgcmV0dXJuIGkgPCAwO1xufSxcbiAgICBfYWRkTGlua2VkTGlzdEl0ZW0gPSBmdW5jdGlvbiBfYWRkTGlua2VkTGlzdEl0ZW0ocGFyZW50LCBjaGlsZCwgZmlyc3RQcm9wLCBsYXN0UHJvcCwgc29ydEJ5KSB7XG4gIGlmIChmaXJzdFByb3AgPT09IHZvaWQgMCkge1xuICAgIGZpcnN0UHJvcCA9IFwiX2ZpcnN0XCI7XG4gIH1cblxuICBpZiAobGFzdFByb3AgPT09IHZvaWQgMCkge1xuICAgIGxhc3RQcm9wID0gXCJfbGFzdFwiO1xuICB9XG5cbiAgdmFyIHByZXYgPSBwYXJlbnRbbGFzdFByb3BdLFxuICAgICAgdDtcblxuICBpZiAoc29ydEJ5KSB7XG4gICAgdCA9IGNoaWxkW3NvcnRCeV07XG5cbiAgICB3aGlsZSAocHJldiAmJiBwcmV2W3NvcnRCeV0gPiB0KSB7XG4gICAgICBwcmV2ID0gcHJldi5fcHJldjtcbiAgICB9XG4gIH1cblxuICBpZiAocHJldikge1xuICAgIGNoaWxkLl9uZXh0ID0gcHJldi5fbmV4dDtcbiAgICBwcmV2Ll9uZXh0ID0gY2hpbGQ7XG4gIH0gZWxzZSB7XG4gICAgY2hpbGQuX25leHQgPSBwYXJlbnRbZmlyc3RQcm9wXTtcbiAgICBwYXJlbnRbZmlyc3RQcm9wXSA9IGNoaWxkO1xuICB9XG5cbiAgaWYgKGNoaWxkLl9uZXh0KSB7XG4gICAgY2hpbGQuX25leHQuX3ByZXYgPSBjaGlsZDtcbiAgfSBlbHNlIHtcbiAgICBwYXJlbnRbbGFzdFByb3BdID0gY2hpbGQ7XG4gIH1cblxuICBjaGlsZC5fcHJldiA9IHByZXY7XG4gIGNoaWxkLnBhcmVudCA9IGNoaWxkLl9kcCA9IHBhcmVudDtcbiAgcmV0dXJuIGNoaWxkO1xufSxcbiAgICBfcmVtb3ZlTGlua2VkTGlzdEl0ZW0gPSBmdW5jdGlvbiBfcmVtb3ZlTGlua2VkTGlzdEl0ZW0ocGFyZW50LCBjaGlsZCwgZmlyc3RQcm9wLCBsYXN0UHJvcCkge1xuICBpZiAoZmlyc3RQcm9wID09PSB2b2lkIDApIHtcbiAgICBmaXJzdFByb3AgPSBcIl9maXJzdFwiO1xuICB9XG5cbiAgaWYgKGxhc3RQcm9wID09PSB2b2lkIDApIHtcbiAgICBsYXN0UHJvcCA9IFwiX2xhc3RcIjtcbiAgfVxuXG4gIHZhciBwcmV2ID0gY2hpbGQuX3ByZXYsXG4gICAgICBuZXh0ID0gY2hpbGQuX25leHQ7XG5cbiAgaWYgKHByZXYpIHtcbiAgICBwcmV2Ll9uZXh0ID0gbmV4dDtcbiAgfSBlbHNlIGlmIChwYXJlbnRbZmlyc3RQcm9wXSA9PT0gY2hpbGQpIHtcbiAgICBwYXJlbnRbZmlyc3RQcm9wXSA9IG5leHQ7XG4gIH1cblxuICBpZiAobmV4dCkge1xuICAgIG5leHQuX3ByZXYgPSBwcmV2O1xuICB9IGVsc2UgaWYgKHBhcmVudFtsYXN0UHJvcF0gPT09IGNoaWxkKSB7XG4gICAgcGFyZW50W2xhc3RQcm9wXSA9IHByZXY7XG4gIH1cblxuICBjaGlsZC5fbmV4dCA9IGNoaWxkLl9wcmV2ID0gY2hpbGQucGFyZW50ID0gbnVsbDsgLy8gZG9uJ3QgZGVsZXRlIHRoZSBfZHAganVzdCBzbyB3ZSBjYW4gcmV2ZXJ0IGlmIG5lY2Vzc2FyeS4gQnV0IHBhcmVudCBzaG91bGQgYmUgbnVsbCB0byBpbmRpY2F0ZSB0aGUgaXRlbSBpc24ndCBpbiBhIGxpbmtlZCBsaXN0LlxufSxcbiAgICBfcmVtb3ZlRnJvbVBhcmVudCA9IGZ1bmN0aW9uIF9yZW1vdmVGcm9tUGFyZW50KGNoaWxkLCBvbmx5SWZQYXJlbnRIYXNBdXRvUmVtb3ZlKSB7XG4gIGNoaWxkLnBhcmVudCAmJiAoIW9ubHlJZlBhcmVudEhhc0F1dG9SZW1vdmUgfHwgY2hpbGQucGFyZW50LmF1dG9SZW1vdmVDaGlsZHJlbikgJiYgY2hpbGQucGFyZW50LnJlbW92ZShjaGlsZCk7XG4gIGNoaWxkLl9hY3QgPSAwO1xufSxcbiAgICBfdW5jYWNoZSA9IGZ1bmN0aW9uIF91bmNhY2hlKGFuaW1hdGlvbiwgY2hpbGQpIHtcbiAgaWYgKGFuaW1hdGlvbiAmJiAoIWNoaWxkIHx8IGNoaWxkLl9lbmQgPiBhbmltYXRpb24uX2R1ciB8fCBjaGlsZC5fc3RhcnQgPCAwKSkge1xuICAgIC8vIHBlcmZvcm1hbmNlIG9wdGltaXphdGlvbjogaWYgYSBjaGlsZCBhbmltYXRpb24gaXMgcGFzc2VkIGluIHdlIHNob3VsZCBvbmx5IHVuY2FjaGUgaWYgdGhhdCBjaGlsZCBFWFRFTkRTIHRoZSBhbmltYXRpb24gKGl0cyBlbmQgdGltZSBpcyBiZXlvbmQgdGhlIGVuZClcbiAgICB2YXIgYSA9IGFuaW1hdGlvbjtcblxuICAgIHdoaWxlIChhKSB7XG4gICAgICBhLl9kaXJ0eSA9IDE7XG4gICAgICBhID0gYS5wYXJlbnQ7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGFuaW1hdGlvbjtcbn0sXG4gICAgX3JlY2FjaGVBbmNlc3RvcnMgPSBmdW5jdGlvbiBfcmVjYWNoZUFuY2VzdG9ycyhhbmltYXRpb24pIHtcbiAgdmFyIHBhcmVudCA9IGFuaW1hdGlvbi5wYXJlbnQ7XG5cbiAgd2hpbGUgKHBhcmVudCAmJiBwYXJlbnQucGFyZW50KSB7XG4gICAgLy9zb21ldGltZXMgd2UgbXVzdCBmb3JjZSBhIHJlLXNvcnQgb2YgYWxsIGNoaWxkcmVuIGFuZCB1cGRhdGUgdGhlIGR1cmF0aW9uL3RvdGFsRHVyYXRpb24gb2YgYWxsIGFuY2VzdG9yIHRpbWVsaW5lcyBpbW1lZGlhdGVseSBpbiBjYXNlLCBmb3IgZXhhbXBsZSwgaW4gdGhlIG1pZGRsZSBvZiBhIHJlbmRlciBsb29wLCBvbmUgdHdlZW4gYWx0ZXJzIGFub3RoZXIgdHdlZW4ncyB0aW1lU2NhbGUgd2hpY2ggc2hvdmVzIGl0cyBzdGFydFRpbWUgYmVmb3JlIDAsIGZvcmNpbmcgdGhlIHBhcmVudCB0aW1lbGluZSB0byBzaGlmdCBhcm91bmQgYW5kIHNoaWZ0Q2hpbGRyZW4oKSB3aGljaCBjb3VsZCBhZmZlY3QgdGhhdCBuZXh0IHR3ZWVuJ3MgcmVuZGVyIChzdGFydFRpbWUpLiBEb2Vzbid0IG1hdHRlciBmb3IgdGhlIHJvb3QgdGltZWxpbmUgdGhvdWdoLlxuICAgIHBhcmVudC5fZGlydHkgPSAxO1xuICAgIHBhcmVudC50b3RhbER1cmF0aW9uKCk7XG4gICAgcGFyZW50ID0gcGFyZW50LnBhcmVudDtcbiAgfVxuXG4gIHJldHVybiBhbmltYXRpb247XG59LFxuICAgIF9yZXdpbmRTdGFydEF0ID0gZnVuY3Rpb24gX3Jld2luZFN0YXJ0QXQodHdlZW4sIHRvdGFsVGltZSwgc3VwcHJlc3NFdmVudHMsIGZvcmNlKSB7XG4gIHJldHVybiB0d2Vlbi5fc3RhcnRBdCAmJiAoX3JldmVydGluZyA/IHR3ZWVuLl9zdGFydEF0LnJldmVydChfcmV2ZXJ0Q29uZmlnKSA6IHR3ZWVuLnZhcnMuaW1tZWRpYXRlUmVuZGVyICYmICF0d2Vlbi52YXJzLmF1dG9SZXZlcnQgfHwgdHdlZW4uX3N0YXJ0QXQucmVuZGVyKHRvdGFsVGltZSwgdHJ1ZSwgZm9yY2UpKTtcbn0sXG4gICAgX2hhc05vUGF1c2VkQW5jZXN0b3JzID0gZnVuY3Rpb24gX2hhc05vUGF1c2VkQW5jZXN0b3JzKGFuaW1hdGlvbikge1xuICByZXR1cm4gIWFuaW1hdGlvbiB8fCBhbmltYXRpb24uX3RzICYmIF9oYXNOb1BhdXNlZEFuY2VzdG9ycyhhbmltYXRpb24ucGFyZW50KTtcbn0sXG4gICAgX2VsYXBzZWRDeWNsZUR1cmF0aW9uID0gZnVuY3Rpb24gX2VsYXBzZWRDeWNsZUR1cmF0aW9uKGFuaW1hdGlvbikge1xuICByZXR1cm4gYW5pbWF0aW9uLl9yZXBlYXQgPyBfYW5pbWF0aW9uQ3ljbGUoYW5pbWF0aW9uLl90VGltZSwgYW5pbWF0aW9uID0gYW5pbWF0aW9uLmR1cmF0aW9uKCkgKyBhbmltYXRpb24uX3JEZWxheSkgKiBhbmltYXRpb24gOiAwO1xufSxcbiAgICAvLyBmZWVkIGluIHRoZSB0b3RhbFRpbWUgYW5kIGN5Y2xlRHVyYXRpb24gYW5kIGl0J2xsIHJldHVybiB0aGUgY3ljbGUgKGl0ZXJhdGlvbiBtaW51cyAxKSBhbmQgaWYgdGhlIHBsYXloZWFkIGlzIGV4YWN0bHkgYXQgdGhlIHZlcnkgRU5ELCBpdCB3aWxsIE5PVCBidW1wIHVwIHRvIHRoZSBuZXh0IGN5Y2xlLlxuX2FuaW1hdGlvbkN5Y2xlID0gZnVuY3Rpb24gX2FuaW1hdGlvbkN5Y2xlKHRUaW1lLCBjeWNsZUR1cmF0aW9uKSB7XG4gIHZhciB3aG9sZSA9IE1hdGguZmxvb3IodFRpbWUgLz0gY3ljbGVEdXJhdGlvbik7XG4gIHJldHVybiB0VGltZSAmJiB3aG9sZSA9PT0gdFRpbWUgPyB3aG9sZSAtIDEgOiB3aG9sZTtcbn0sXG4gICAgX3BhcmVudFRvQ2hpbGRUb3RhbFRpbWUgPSBmdW5jdGlvbiBfcGFyZW50VG9DaGlsZFRvdGFsVGltZShwYXJlbnRUaW1lLCBjaGlsZCkge1xuICByZXR1cm4gKHBhcmVudFRpbWUgLSBjaGlsZC5fc3RhcnQpICogY2hpbGQuX3RzICsgKGNoaWxkLl90cyA+PSAwID8gMCA6IGNoaWxkLl9kaXJ0eSA/IGNoaWxkLnRvdGFsRHVyYXRpb24oKSA6IGNoaWxkLl90RHVyKTtcbn0sXG4gICAgX3NldEVuZCA9IGZ1bmN0aW9uIF9zZXRFbmQoYW5pbWF0aW9uKSB7XG4gIHJldHVybiBhbmltYXRpb24uX2VuZCA9IF9yb3VuZFByZWNpc2UoYW5pbWF0aW9uLl9zdGFydCArIChhbmltYXRpb24uX3REdXIgLyBNYXRoLmFicyhhbmltYXRpb24uX3RzIHx8IGFuaW1hdGlvbi5fcnRzIHx8IF90aW55TnVtKSB8fCAwKSk7XG59LFxuICAgIF9hbGlnblBsYXloZWFkID0gZnVuY3Rpb24gX2FsaWduUGxheWhlYWQoYW5pbWF0aW9uLCB0b3RhbFRpbWUpIHtcbiAgLy8gYWRqdXN0cyB0aGUgYW5pbWF0aW9uJ3MgX3N0YXJ0IGFuZCBfZW5kIGFjY29yZGluZyB0byB0aGUgcHJvdmlkZWQgdG90YWxUaW1lIChvbmx5IGlmIHRoZSBwYXJlbnQncyBzbW9vdGhDaGlsZFRpbWluZyBpcyB0cnVlIGFuZCB0aGUgYW5pbWF0aW9uIGlzbid0IHBhdXNlZCkuIEl0IGRvZXNuJ3QgZG8gYW55IHJlbmRlcmluZyBvciBmb3JjaW5nIHRoaW5ncyBiYWNrIGludG8gcGFyZW50IHRpbWVsaW5lcywgZXRjLiAtIHRoYXQncyB3aGF0IHRvdGFsVGltZSgpIGlzIGZvci5cbiAgdmFyIHBhcmVudCA9IGFuaW1hdGlvbi5fZHA7XG5cbiAgaWYgKHBhcmVudCAmJiBwYXJlbnQuc21vb3RoQ2hpbGRUaW1pbmcgJiYgYW5pbWF0aW9uLl90cykge1xuICAgIGFuaW1hdGlvbi5fc3RhcnQgPSBfcm91bmRQcmVjaXNlKHBhcmVudC5fdGltZSAtIChhbmltYXRpb24uX3RzID4gMCA/IHRvdGFsVGltZSAvIGFuaW1hdGlvbi5fdHMgOiAoKGFuaW1hdGlvbi5fZGlydHkgPyBhbmltYXRpb24udG90YWxEdXJhdGlvbigpIDogYW5pbWF0aW9uLl90RHVyKSAtIHRvdGFsVGltZSkgLyAtYW5pbWF0aW9uLl90cykpO1xuXG4gICAgX3NldEVuZChhbmltYXRpb24pO1xuXG4gICAgcGFyZW50Ll9kaXJ0eSB8fCBfdW5jYWNoZShwYXJlbnQsIGFuaW1hdGlvbik7IC8vZm9yIHBlcmZvcm1hbmNlIGltcHJvdmVtZW50LiBJZiB0aGUgcGFyZW50J3MgY2FjaGUgaXMgYWxyZWFkeSBkaXJ0eSwgaXQgYWxyZWFkeSB0b29rIGNhcmUgb2YgbWFya2luZyB0aGUgYW5jZXN0b3JzIGFzIGRpcnR5IHRvbywgc28gc2tpcCB0aGUgZnVuY3Rpb24gY2FsbCBoZXJlLlxuICB9XG5cbiAgcmV0dXJuIGFuaW1hdGlvbjtcbn0sXG5cbi8qXG5fdG90YWxUaW1lVG9UaW1lID0gKGNsYW1wZWRUb3RhbFRpbWUsIGR1cmF0aW9uLCByZXBlYXQsIHJlcGVhdERlbGF5LCB5b3lvKSA9PiB7XG5cdGxldCBjeWNsZUR1cmF0aW9uID0gZHVyYXRpb24gKyByZXBlYXREZWxheSxcblx0XHR0aW1lID0gX3JvdW5kKGNsYW1wZWRUb3RhbFRpbWUgJSBjeWNsZUR1cmF0aW9uKTtcblx0aWYgKHRpbWUgPiBkdXJhdGlvbikge1xuXHRcdHRpbWUgPSBkdXJhdGlvbjtcblx0fVxuXHRyZXR1cm4gKHlveW8gJiYgKH5+KGNsYW1wZWRUb3RhbFRpbWUgLyBjeWNsZUR1cmF0aW9uKSAmIDEpKSA/IGR1cmF0aW9uIC0gdGltZSA6IHRpbWU7XG59LFxuKi9cbl9wb3N0QWRkQ2hlY2tzID0gZnVuY3Rpb24gX3Bvc3RBZGRDaGVja3ModGltZWxpbmUsIGNoaWxkKSB7XG4gIHZhciB0O1xuXG4gIGlmIChjaGlsZC5fdGltZSB8fCBjaGlsZC5faW5pdHRlZCAmJiAhY2hpbGQuX2R1cikge1xuICAgIC8vaW4gY2FzZSwgZm9yIGV4YW1wbGUsIHRoZSBfc3RhcnQgaXMgbW92ZWQgb24gYSB0d2VlbiB0aGF0IGhhcyBhbHJlYWR5IHJlbmRlcmVkLiBJbWFnaW5lIGl0J3MgYXQgaXRzIGVuZCBzdGF0ZSwgdGhlbiB0aGUgc3RhcnRUaW1lIGlzIG1vdmVkIFdBWSBsYXRlciAoYWZ0ZXIgdGhlIGVuZCBvZiB0aGlzIHRpbWVsaW5lKSwgaXQgc2hvdWxkIHJlbmRlciBhdCBpdHMgYmVnaW5uaW5nLlxuICAgIHQgPSBfcGFyZW50VG9DaGlsZFRvdGFsVGltZSh0aW1lbGluZS5yYXdUaW1lKCksIGNoaWxkKTtcblxuICAgIGlmICghY2hpbGQuX2R1ciB8fCBfY2xhbXAoMCwgY2hpbGQudG90YWxEdXJhdGlvbigpLCB0KSAtIGNoaWxkLl90VGltZSA+IF90aW55TnVtKSB7XG4gICAgICBjaGlsZC5yZW5kZXIodCwgdHJ1ZSk7XG4gICAgfVxuICB9IC8vaWYgdGhlIHRpbWVsaW5lIGhhcyBhbHJlYWR5IGVuZGVkIGJ1dCB0aGUgaW5zZXJ0ZWQgdHdlZW4vdGltZWxpbmUgZXh0ZW5kcyB0aGUgZHVyYXRpb24sIHdlIHNob3VsZCBlbmFibGUgdGhpcyB0aW1lbGluZSBhZ2FpbiBzbyB0aGF0IGl0IHJlbmRlcnMgcHJvcGVybHkuIFdlIHNob3VsZCBhbHNvIGFsaWduIHRoZSBwbGF5aGVhZCB3aXRoIHRoZSBwYXJlbnQgdGltZWxpbmUncyB3aGVuIGFwcHJvcHJpYXRlLlxuXG5cbiAgaWYgKF91bmNhY2hlKHRpbWVsaW5lLCBjaGlsZCkuX2RwICYmIHRpbWVsaW5lLl9pbml0dGVkICYmIHRpbWVsaW5lLl90aW1lID49IHRpbWVsaW5lLl9kdXIgJiYgdGltZWxpbmUuX3RzKSB7XG4gICAgLy9pbiBjYXNlIGFueSBvZiB0aGUgYW5jZXN0b3JzIGhhZCBjb21wbGV0ZWQgYnV0IHNob3VsZCBub3cgYmUgZW5hYmxlZC4uLlxuICAgIGlmICh0aW1lbGluZS5fZHVyIDwgdGltZWxpbmUuZHVyYXRpb24oKSkge1xuICAgICAgdCA9IHRpbWVsaW5lO1xuXG4gICAgICB3aGlsZSAodC5fZHApIHtcbiAgICAgICAgdC5yYXdUaW1lKCkgPj0gMCAmJiB0LnRvdGFsVGltZSh0Ll90VGltZSk7IC8vbW92ZXMgdGhlIHRpbWVsaW5lIChzaGlmdHMgaXRzIHN0YXJ0VGltZSkgaWYgbmVjZXNzYXJ5LCBhbmQgYWxzbyBlbmFibGVzIGl0LiBJZiBpdCdzIGN1cnJlbnRseSB6ZXJvLCB0aG91Z2gsIGl0IG1heSBub3QgYmUgc2NoZWR1bGVkIHRvIHJlbmRlciB1bnRpbCBsYXRlciBzbyB0aGVyZSdzIG5vIG5lZWQgdG8gZm9yY2UgaXQgdG8gYWxpZ24gd2l0aCB0aGUgY3VycmVudCBwbGF5aGVhZCBwb3NpdGlvbi4gT25seSBtb3ZlIHRvIGNhdGNoIHVwIHdpdGggdGhlIHBsYXloZWFkLlxuXG4gICAgICAgIHQgPSB0Ll9kcDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aW1lbGluZS5felRpbWUgPSAtX3RpbnlOdW07IC8vIGhlbHBzIGVuc3VyZSB0aGF0IHRoZSBuZXh0IHJlbmRlcigpIHdpbGwgYmUgZm9yY2VkIChjcm9zc2luZ1N0YXJ0ID0gdHJ1ZSBpbiByZW5kZXIoKSksIGV2ZW4gaWYgdGhlIGR1cmF0aW9uIGhhc24ndCBjaGFuZ2VkICh3ZSdyZSBhZGRpbmcgYSBjaGlsZCB3aGljaCB3b3VsZCBuZWVkIHRvIGdldCByZW5kZXJlZCkuIERlZmluaXRlbHkgYW4gZWRnZSBjYXNlLiBOb3RlOiB3ZSBNVVNUIGRvIHRoaXMgQUZURVIgdGhlIGxvb3AgYWJvdmUgd2hlcmUgdGhlIHRvdGFsVGltZSgpIG1pZ2h0IHRyaWdnZXIgYSByZW5kZXIoKSBiZWNhdXNlIHRoaXMgX2FkZFRvVGltZWxpbmUoKSBtZXRob2QgZ2V0cyBjYWxsZWQgZnJvbSB0aGUgQW5pbWF0aW9uIGNvbnN0cnVjdG9yLCBCRUZPUkUgdHdlZW5zIGV2ZW4gcmVjb3JkIHRoZWlyIHRhcmdldHMsIGV0Yy4gc28gd2Ugd291bGRuJ3Qgd2FudCB0aGluZ3MgdG8gZ2V0IHRyaWdnZXJlZCBpbiB0aGUgd3Jvbmcgb3JkZXIuXG4gIH1cbn0sXG4gICAgX2FkZFRvVGltZWxpbmUgPSBmdW5jdGlvbiBfYWRkVG9UaW1lbGluZSh0aW1lbGluZSwgY2hpbGQsIHBvc2l0aW9uLCBza2lwQ2hlY2tzKSB7XG4gIGNoaWxkLnBhcmVudCAmJiBfcmVtb3ZlRnJvbVBhcmVudChjaGlsZCk7XG4gIGNoaWxkLl9zdGFydCA9IF9yb3VuZFByZWNpc2UoKF9pc051bWJlcihwb3NpdGlvbikgPyBwb3NpdGlvbiA6IHBvc2l0aW9uIHx8IHRpbWVsaW5lICE9PSBfZ2xvYmFsVGltZWxpbmUgPyBfcGFyc2VQb3NpdGlvbih0aW1lbGluZSwgcG9zaXRpb24sIGNoaWxkKSA6IHRpbWVsaW5lLl90aW1lKSArIGNoaWxkLl9kZWxheSk7XG4gIGNoaWxkLl9lbmQgPSBfcm91bmRQcmVjaXNlKGNoaWxkLl9zdGFydCArIChjaGlsZC50b3RhbER1cmF0aW9uKCkgLyBNYXRoLmFicyhjaGlsZC50aW1lU2NhbGUoKSkgfHwgMCkpO1xuXG4gIF9hZGRMaW5rZWRMaXN0SXRlbSh0aW1lbGluZSwgY2hpbGQsIFwiX2ZpcnN0XCIsIFwiX2xhc3RcIiwgdGltZWxpbmUuX3NvcnQgPyBcIl9zdGFydFwiIDogMCk7XG5cbiAgX2lzRnJvbU9yRnJvbVN0YXJ0KGNoaWxkKSB8fCAodGltZWxpbmUuX3JlY2VudCA9IGNoaWxkKTtcbiAgc2tpcENoZWNrcyB8fCBfcG9zdEFkZENoZWNrcyh0aW1lbGluZSwgY2hpbGQpO1xuICB0aW1lbGluZS5fdHMgPCAwICYmIF9hbGlnblBsYXloZWFkKHRpbWVsaW5lLCB0aW1lbGluZS5fdFRpbWUpOyAvLyBpZiB0aGUgdGltZWxpbmUgaXMgcmV2ZXJzZWQgYW5kIHRoZSBuZXcgY2hpbGQgbWFrZXMgaXQgbG9uZ2VyLCB3ZSBtYXkgbmVlZCB0byBhZGp1c3QgdGhlIHBhcmVudCdzIF9zdGFydCAocHVzaCBpdCBiYWNrKVxuXG4gIHJldHVybiB0aW1lbGluZTtcbn0sXG4gICAgX3Njcm9sbFRyaWdnZXIgPSBmdW5jdGlvbiBfc2Nyb2xsVHJpZ2dlcihhbmltYXRpb24sIHRyaWdnZXIpIHtcbiAgcmV0dXJuIChfZ2xvYmFscy5TY3JvbGxUcmlnZ2VyIHx8IF9taXNzaW5nUGx1Z2luKFwic2Nyb2xsVHJpZ2dlclwiLCB0cmlnZ2VyKSkgJiYgX2dsb2JhbHMuU2Nyb2xsVHJpZ2dlci5jcmVhdGUodHJpZ2dlciwgYW5pbWF0aW9uKTtcbn0sXG4gICAgX2F0dGVtcHRJbml0VHdlZW4gPSBmdW5jdGlvbiBfYXR0ZW1wdEluaXRUd2Vlbih0d2VlbiwgdG90YWxUaW1lLCBmb3JjZSwgc3VwcHJlc3NFdmVudHMpIHtcbiAgX2luaXRUd2Vlbih0d2VlbiwgdG90YWxUaW1lKTtcblxuICBpZiAoIXR3ZWVuLl9pbml0dGVkKSB7XG4gICAgcmV0dXJuIDE7XG4gIH1cblxuICBpZiAoIWZvcmNlICYmIHR3ZWVuLl9wdCAmJiAodHdlZW4uX2R1ciAmJiB0d2Vlbi52YXJzLmxhenkgIT09IGZhbHNlIHx8ICF0d2Vlbi5fZHVyICYmIHR3ZWVuLnZhcnMubGF6eSkgJiYgX2xhc3RSZW5kZXJlZEZyYW1lICE9PSBfdGlja2VyLmZyYW1lKSB7XG4gICAgX2xhenlUd2VlbnMucHVzaCh0d2Vlbik7XG5cbiAgICB0d2Vlbi5fbGF6eSA9IFt0b3RhbFRpbWUsIHN1cHByZXNzRXZlbnRzXTtcbiAgICByZXR1cm4gMTtcbiAgfVxufSxcbiAgICBfcGFyZW50UGxheWhlYWRJc0JlZm9yZVN0YXJ0ID0gZnVuY3Rpb24gX3BhcmVudFBsYXloZWFkSXNCZWZvcmVTdGFydChfcmVmKSB7XG4gIHZhciBwYXJlbnQgPSBfcmVmLnBhcmVudDtcbiAgcmV0dXJuIHBhcmVudCAmJiBwYXJlbnQuX3RzICYmIHBhcmVudC5faW5pdHRlZCAmJiAhcGFyZW50Ll9sb2NrICYmIChwYXJlbnQucmF3VGltZSgpIDwgMCB8fCBfcGFyZW50UGxheWhlYWRJc0JlZm9yZVN0YXJ0KHBhcmVudCkpO1xufSxcbiAgICAvLyBjaGVjayBwYXJlbnQncyBfbG9jayBiZWNhdXNlIHdoZW4gYSB0aW1lbGluZSByZXBlYXRzL3lveW9zIGFuZCBkb2VzIGl0cyBhcnRpZmljaWFsIHdyYXBwaW5nLCB3ZSBzaG91bGRuJ3QgZm9yY2UgdGhlIHJhdGlvIGJhY2sgdG8gMFxuX2lzRnJvbU9yRnJvbVN0YXJ0ID0gZnVuY3Rpb24gX2lzRnJvbU9yRnJvbVN0YXJ0KF9yZWYyKSB7XG4gIHZhciBkYXRhID0gX3JlZjIuZGF0YTtcbiAgcmV0dXJuIGRhdGEgPT09IFwiaXNGcm9tU3RhcnRcIiB8fCBkYXRhID09PSBcImlzU3RhcnRcIjtcbn0sXG4gICAgX3JlbmRlclplcm9EdXJhdGlvblR3ZWVuID0gZnVuY3Rpb24gX3JlbmRlclplcm9EdXJhdGlvblR3ZWVuKHR3ZWVuLCB0b3RhbFRpbWUsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSkge1xuICB2YXIgcHJldlJhdGlvID0gdHdlZW4ucmF0aW8sXG4gICAgICByYXRpbyA9IHRvdGFsVGltZSA8IDAgfHwgIXRvdGFsVGltZSAmJiAoIXR3ZWVuLl9zdGFydCAmJiBfcGFyZW50UGxheWhlYWRJc0JlZm9yZVN0YXJ0KHR3ZWVuKSAmJiAhKCF0d2Vlbi5faW5pdHRlZCAmJiBfaXNGcm9tT3JGcm9tU3RhcnQodHdlZW4pKSB8fCAodHdlZW4uX3RzIDwgMCB8fCB0d2Vlbi5fZHAuX3RzIDwgMCkgJiYgIV9pc0Zyb21PckZyb21TdGFydCh0d2VlbikpID8gMCA6IDEsXG4gICAgICAvLyBpZiB0aGUgdHdlZW4gb3IgaXRzIHBhcmVudCBpcyByZXZlcnNlZCBhbmQgdGhlIHRvdGFsVGltZSBpcyAwLCB3ZSBzaG91bGQgZ28gdG8gYSByYXRpbyBvZiAwLiBFZGdlIGNhc2U6IGlmIGEgZnJvbSgpIG9yIGZyb21UbygpIHN0YWdnZXIgdHdlZW4gaXMgcGxhY2VkIGxhdGVyIGluIGEgdGltZWxpbmUsIHRoZSBcInN0YXJ0QXRcIiB6ZXJvLWR1cmF0aW9uIHR3ZWVuIGNvdWxkIGluaXRpYWxseSByZW5kZXIgYXQgYSB0aW1lIHdoZW4gdGhlIHBhcmVudCB0aW1lbGluZSdzIHBsYXloZWFkIGlzIHRlY2huaWNhbGx5IEJFRk9SRSB3aGVyZSB0aGlzIHR3ZWVuIGlzLCBzbyBtYWtlIHN1cmUgdGhhdCBhbnkgXCJmcm9tXCIgYW5kIFwiZnJvbVRvXCIgc3RhcnRBdCB0d2VlbnMgYXJlIHJlbmRlcmVkIHRoZSBmaXJzdCB0aW1lIGF0IGEgcmF0aW8gb2YgMS5cbiAgcmVwZWF0RGVsYXkgPSB0d2Vlbi5fckRlbGF5LFxuICAgICAgdFRpbWUgPSAwLFxuICAgICAgcHQsXG4gICAgICBpdGVyYXRpb24sXG4gICAgICBwcmV2SXRlcmF0aW9uO1xuXG4gIGlmIChyZXBlYXREZWxheSAmJiB0d2Vlbi5fcmVwZWF0KSB7XG4gICAgLy8gaW4gY2FzZSB0aGVyZSdzIGEgemVyby1kdXJhdGlvbiB0d2VlbiB0aGF0IGhhcyBhIHJlcGVhdCB3aXRoIGEgcmVwZWF0RGVsYXlcbiAgICB0VGltZSA9IF9jbGFtcCgwLCB0d2Vlbi5fdER1ciwgdG90YWxUaW1lKTtcbiAgICBpdGVyYXRpb24gPSBfYW5pbWF0aW9uQ3ljbGUodFRpbWUsIHJlcGVhdERlbGF5KTtcbiAgICB0d2Vlbi5feW95byAmJiBpdGVyYXRpb24gJiAxICYmIChyYXRpbyA9IDEgLSByYXRpbyk7XG5cbiAgICBpZiAoaXRlcmF0aW9uICE9PSBfYW5pbWF0aW9uQ3ljbGUodHdlZW4uX3RUaW1lLCByZXBlYXREZWxheSkpIHtcbiAgICAgIC8vIGlmIGl0ZXJhdGlvbiBjaGFuZ2VkXG4gICAgICBwcmV2UmF0aW8gPSAxIC0gcmF0aW87XG4gICAgICB0d2Vlbi52YXJzLnJlcGVhdFJlZnJlc2ggJiYgdHdlZW4uX2luaXR0ZWQgJiYgdHdlZW4uaW52YWxpZGF0ZSgpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChyYXRpbyAhPT0gcHJldlJhdGlvIHx8IF9yZXZlcnRpbmcgfHwgZm9yY2UgfHwgdHdlZW4uX3pUaW1lID09PSBfdGlueU51bSB8fCAhdG90YWxUaW1lICYmIHR3ZWVuLl96VGltZSkge1xuICAgIGlmICghdHdlZW4uX2luaXR0ZWQgJiYgX2F0dGVtcHRJbml0VHdlZW4odHdlZW4sIHRvdGFsVGltZSwgZm9yY2UsIHN1cHByZXNzRXZlbnRzKSkge1xuICAgICAgLy8gaWYgd2UgcmVuZGVyIHRoZSB2ZXJ5IGJlZ2lubmluZyAodGltZSA9PSAwKSBvZiBhIGZyb21UbygpLCB3ZSBtdXN0IGZvcmNlIHRoZSByZW5kZXIgKG5vcm1hbCB0d2VlbnMgd291bGRuJ3QgbmVlZCB0byByZW5kZXIgYXQgYSB0aW1lIG9mIDAgd2hlbiB0aGUgcHJldlRpbWUgd2FzIGFsc28gMCkuIFRoaXMgaXMgYWxzbyBtYW5kYXRvcnkgdG8gbWFrZSBzdXJlIG92ZXJ3cml0aW5nIGtpY2tzIGluIGltbWVkaWF0ZWx5LlxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHByZXZJdGVyYXRpb24gPSB0d2Vlbi5felRpbWU7XG4gICAgdHdlZW4uX3pUaW1lID0gdG90YWxUaW1lIHx8IChzdXBwcmVzc0V2ZW50cyA/IF90aW55TnVtIDogMCk7IC8vIHdoZW4gdGhlIHBsYXloZWFkIGFycml2ZXMgYXQgRVhBQ1RMWSB0aW1lIDAgKHJpZ2h0IG9uIHRvcCkgb2YgYSB6ZXJvLWR1cmF0aW9uIHR3ZWVuLCB3ZSBuZWVkIHRvIGRpc2Nlcm4gaWYgZXZlbnRzIGFyZSBzdXBwcmVzc2VkIHNvIHRoYXQgd2hlbiB0aGUgcGxheWhlYWQgbW92ZXMgYWdhaW4gKG5leHQgdGltZSksIGl0J2xsIHRyaWdnZXIgdGhlIGNhbGxiYWNrLiBJZiBldmVudHMgYXJlIE5PVCBzdXBwcmVzc2VkLCBvYnZpb3VzbHkgdGhlIGNhbGxiYWNrIHdvdWxkIGJlIHRyaWdnZXJlZCBpbiB0aGlzIHJlbmRlci4gQmFzaWNhbGx5LCB0aGUgY2FsbGJhY2sgc2hvdWxkIGZpcmUgZWl0aGVyIHdoZW4gdGhlIHBsYXloZWFkIEFSUklWRVMgb3IgTEVBVkVTIHRoaXMgZXhhY3Qgc3BvdCwgbm90IGJvdGguIEltYWdpbmUgZG9pbmcgYSB0aW1lbGluZS5zZWVrKDApIGFuZCB0aGVyZSdzIGEgY2FsbGJhY2sgdGhhdCBzaXRzIGF0IDAuIFNpbmNlIGV2ZW50cyBhcmUgc3VwcHJlc3NlZCBvbiB0aGF0IHNlZWsoKSBieSBkZWZhdWx0LCBub3RoaW5nIHdpbGwgZmlyZSwgYnV0IHdoZW4gdGhlIHBsYXloZWFkIG1vdmVzIG9mZiBvZiB0aGF0IHBvc2l0aW9uLCB0aGUgY2FsbGJhY2sgc2hvdWxkIGZpcmUuIFRoaXMgYmVoYXZpb3IgaXMgd2hhdCBwZW9wbGUgaW50dWl0aXZlbHkgZXhwZWN0LlxuXG4gICAgc3VwcHJlc3NFdmVudHMgfHwgKHN1cHByZXNzRXZlbnRzID0gdG90YWxUaW1lICYmICFwcmV2SXRlcmF0aW9uKTsgLy8gaWYgaXQgd2FzIHJlbmRlcmVkIHByZXZpb3VzbHkgYXQgZXhhY3RseSAwIChfelRpbWUpIGFuZCBub3cgdGhlIHBsYXloZWFkIGlzIG1vdmluZyBhd2F5LCBET04nVCBmaXJlIGNhbGxiYWNrcyBvdGhlcndpc2UgdGhleSdsbCBzZWVtIGxpa2UgZHVwbGljYXRlcy5cblxuICAgIHR3ZWVuLnJhdGlvID0gcmF0aW87XG4gICAgdHdlZW4uX2Zyb20gJiYgKHJhdGlvID0gMSAtIHJhdGlvKTtcbiAgICB0d2Vlbi5fdGltZSA9IDA7XG4gICAgdHdlZW4uX3RUaW1lID0gdFRpbWU7XG4gICAgcHQgPSB0d2Vlbi5fcHQ7XG5cbiAgICB3aGlsZSAocHQpIHtcbiAgICAgIHB0LnIocmF0aW8sIHB0LmQpO1xuICAgICAgcHQgPSBwdC5fbmV4dDtcbiAgICB9XG5cbiAgICB0b3RhbFRpbWUgPCAwICYmIF9yZXdpbmRTdGFydEF0KHR3ZWVuLCB0b3RhbFRpbWUsIHN1cHByZXNzRXZlbnRzLCB0cnVlKTtcbiAgICB0d2Vlbi5fb25VcGRhdGUgJiYgIXN1cHByZXNzRXZlbnRzICYmIF9jYWxsYmFjayh0d2VlbiwgXCJvblVwZGF0ZVwiKTtcbiAgICB0VGltZSAmJiB0d2Vlbi5fcmVwZWF0ICYmICFzdXBwcmVzc0V2ZW50cyAmJiB0d2Vlbi5wYXJlbnQgJiYgX2NhbGxiYWNrKHR3ZWVuLCBcIm9uUmVwZWF0XCIpO1xuXG4gICAgaWYgKCh0b3RhbFRpbWUgPj0gdHdlZW4uX3REdXIgfHwgdG90YWxUaW1lIDwgMCkgJiYgdHdlZW4ucmF0aW8gPT09IHJhdGlvKSB7XG4gICAgICByYXRpbyAmJiBfcmVtb3ZlRnJvbVBhcmVudCh0d2VlbiwgMSk7XG5cbiAgICAgIGlmICghc3VwcHJlc3NFdmVudHMpIHtcbiAgICAgICAgX2NhbGxiYWNrKHR3ZWVuLCByYXRpbyA/IFwib25Db21wbGV0ZVwiIDogXCJvblJldmVyc2VDb21wbGV0ZVwiLCB0cnVlKTtcblxuICAgICAgICB0d2Vlbi5fcHJvbSAmJiB0d2Vlbi5fcHJvbSgpO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIGlmICghdHdlZW4uX3pUaW1lKSB7XG4gICAgdHdlZW4uX3pUaW1lID0gdG90YWxUaW1lO1xuICB9XG59LFxuICAgIF9maW5kTmV4dFBhdXNlVHdlZW4gPSBmdW5jdGlvbiBfZmluZE5leHRQYXVzZVR3ZWVuKGFuaW1hdGlvbiwgcHJldlRpbWUsIHRpbWUpIHtcbiAgdmFyIGNoaWxkO1xuXG4gIGlmICh0aW1lID4gcHJldlRpbWUpIHtcbiAgICBjaGlsZCA9IGFuaW1hdGlvbi5fZmlyc3Q7XG5cbiAgICB3aGlsZSAoY2hpbGQgJiYgY2hpbGQuX3N0YXJ0IDw9IHRpbWUpIHtcbiAgICAgIGlmIChjaGlsZC5kYXRhID09PSBcImlzUGF1c2VcIiAmJiBjaGlsZC5fc3RhcnQgPiBwcmV2VGltZSkge1xuICAgICAgICByZXR1cm4gY2hpbGQ7XG4gICAgICB9XG5cbiAgICAgIGNoaWxkID0gY2hpbGQuX25leHQ7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGNoaWxkID0gYW5pbWF0aW9uLl9sYXN0O1xuXG4gICAgd2hpbGUgKGNoaWxkICYmIGNoaWxkLl9zdGFydCA+PSB0aW1lKSB7XG4gICAgICBpZiAoY2hpbGQuZGF0YSA9PT0gXCJpc1BhdXNlXCIgJiYgY2hpbGQuX3N0YXJ0IDwgcHJldlRpbWUpIHtcbiAgICAgICAgcmV0dXJuIGNoaWxkO1xuICAgICAgfVxuXG4gICAgICBjaGlsZCA9IGNoaWxkLl9wcmV2O1xuICAgIH1cbiAgfVxufSxcbiAgICBfc2V0RHVyYXRpb24gPSBmdW5jdGlvbiBfc2V0RHVyYXRpb24oYW5pbWF0aW9uLCBkdXJhdGlvbiwgc2tpcFVuY2FjaGUsIGxlYXZlUGxheWhlYWQpIHtcbiAgdmFyIHJlcGVhdCA9IGFuaW1hdGlvbi5fcmVwZWF0LFxuICAgICAgZHVyID0gX3JvdW5kUHJlY2lzZShkdXJhdGlvbikgfHwgMCxcbiAgICAgIHRvdGFsUHJvZ3Jlc3MgPSBhbmltYXRpb24uX3RUaW1lIC8gYW5pbWF0aW9uLl90RHVyO1xuICB0b3RhbFByb2dyZXNzICYmICFsZWF2ZVBsYXloZWFkICYmIChhbmltYXRpb24uX3RpbWUgKj0gZHVyIC8gYW5pbWF0aW9uLl9kdXIpO1xuICBhbmltYXRpb24uX2R1ciA9IGR1cjtcbiAgYW5pbWF0aW9uLl90RHVyID0gIXJlcGVhdCA/IGR1ciA6IHJlcGVhdCA8IDAgPyAxZTEwIDogX3JvdW5kUHJlY2lzZShkdXIgKiAocmVwZWF0ICsgMSkgKyBhbmltYXRpb24uX3JEZWxheSAqIHJlcGVhdCk7XG4gIHRvdGFsUHJvZ3Jlc3MgPiAwICYmICFsZWF2ZVBsYXloZWFkID8gX2FsaWduUGxheWhlYWQoYW5pbWF0aW9uLCBhbmltYXRpb24uX3RUaW1lID0gYW5pbWF0aW9uLl90RHVyICogdG90YWxQcm9ncmVzcykgOiBhbmltYXRpb24ucGFyZW50ICYmIF9zZXRFbmQoYW5pbWF0aW9uKTtcbiAgc2tpcFVuY2FjaGUgfHwgX3VuY2FjaGUoYW5pbWF0aW9uLnBhcmVudCwgYW5pbWF0aW9uKTtcbiAgcmV0dXJuIGFuaW1hdGlvbjtcbn0sXG4gICAgX29uVXBkYXRlVG90YWxEdXJhdGlvbiA9IGZ1bmN0aW9uIF9vblVwZGF0ZVRvdGFsRHVyYXRpb24oYW5pbWF0aW9uKSB7XG4gIHJldHVybiBhbmltYXRpb24gaW5zdGFuY2VvZiBUaW1lbGluZSA/IF91bmNhY2hlKGFuaW1hdGlvbikgOiBfc2V0RHVyYXRpb24oYW5pbWF0aW9uLCBhbmltYXRpb24uX2R1cik7XG59LFxuICAgIF96ZXJvUG9zaXRpb24gPSB7XG4gIF9zdGFydDogMCxcbiAgZW5kVGltZTogX2VtcHR5RnVuYyxcbiAgdG90YWxEdXJhdGlvbjogX2VtcHR5RnVuY1xufSxcbiAgICBfcGFyc2VQb3NpdGlvbiA9IGZ1bmN0aW9uIF9wYXJzZVBvc2l0aW9uKGFuaW1hdGlvbiwgcG9zaXRpb24sIHBlcmNlbnRBbmltYXRpb24pIHtcbiAgdmFyIGxhYmVscyA9IGFuaW1hdGlvbi5sYWJlbHMsXG4gICAgICByZWNlbnQgPSBhbmltYXRpb24uX3JlY2VudCB8fCBfemVyb1Bvc2l0aW9uLFxuICAgICAgY2xpcHBlZER1cmF0aW9uID0gYW5pbWF0aW9uLmR1cmF0aW9uKCkgPj0gX2JpZ051bSA/IHJlY2VudC5lbmRUaW1lKGZhbHNlKSA6IGFuaW1hdGlvbi5fZHVyLFxuICAgICAgLy9pbiBjYXNlIHRoZXJlJ3MgYSBjaGlsZCB0aGF0IGluZmluaXRlbHkgcmVwZWF0cywgdXNlcnMgYWxtb3N0IG5ldmVyIGludGVuZCBmb3IgdGhlIGluc2VydGlvbiBwb2ludCBvZiBhIG5ldyBjaGlsZCB0byBiZSBiYXNlZCBvbiBhIFNVUEVSIGxvbmcgdmFsdWUgbGlrZSB0aGF0IHNvIHdlIGNsaXAgaXQgYW5kIGFzc3VtZSB0aGUgbW9zdCByZWNlbnRseS1hZGRlZCBjaGlsZCdzIGVuZFRpbWUgc2hvdWxkIGJlIHVzZWQgaW5zdGVhZC5cbiAgaSxcbiAgICAgIG9mZnNldCxcbiAgICAgIGlzUGVyY2VudDtcblxuICBpZiAoX2lzU3RyaW5nKHBvc2l0aW9uKSAmJiAoaXNOYU4ocG9zaXRpb24pIHx8IHBvc2l0aW9uIGluIGxhYmVscykpIHtcbiAgICAvL2lmIHRoZSBzdHJpbmcgaXMgYSBudW1iZXIgbGlrZSBcIjFcIiwgY2hlY2sgdG8gc2VlIGlmIHRoZXJlJ3MgYSBsYWJlbCB3aXRoIHRoYXQgbmFtZSwgb3RoZXJ3aXNlIGludGVycHJldCBpdCBhcyBhIG51bWJlciAoYWJzb2x1dGUgdmFsdWUpLlxuICAgIG9mZnNldCA9IHBvc2l0aW9uLmNoYXJBdCgwKTtcbiAgICBpc1BlcmNlbnQgPSBwb3NpdGlvbi5zdWJzdHIoLTEpID09PSBcIiVcIjtcbiAgICBpID0gcG9zaXRpb24uaW5kZXhPZihcIj1cIik7XG5cbiAgICBpZiAob2Zmc2V0ID09PSBcIjxcIiB8fCBvZmZzZXQgPT09IFwiPlwiKSB7XG4gICAgICBpID49IDAgJiYgKHBvc2l0aW9uID0gcG9zaXRpb24ucmVwbGFjZSgvPS8sIFwiXCIpKTtcbiAgICAgIHJldHVybiAob2Zmc2V0ID09PSBcIjxcIiA/IHJlY2VudC5fc3RhcnQgOiByZWNlbnQuZW5kVGltZShyZWNlbnQuX3JlcGVhdCA+PSAwKSkgKyAocGFyc2VGbG9hdChwb3NpdGlvbi5zdWJzdHIoMSkpIHx8IDApICogKGlzUGVyY2VudCA/IChpIDwgMCA/IHJlY2VudCA6IHBlcmNlbnRBbmltYXRpb24pLnRvdGFsRHVyYXRpb24oKSAvIDEwMCA6IDEpO1xuICAgIH1cblxuICAgIGlmIChpIDwgMCkge1xuICAgICAgcG9zaXRpb24gaW4gbGFiZWxzIHx8IChsYWJlbHNbcG9zaXRpb25dID0gY2xpcHBlZER1cmF0aW9uKTtcbiAgICAgIHJldHVybiBsYWJlbHNbcG9zaXRpb25dO1xuICAgIH1cblxuICAgIG9mZnNldCA9IHBhcnNlRmxvYXQocG9zaXRpb24uY2hhckF0KGkgLSAxKSArIHBvc2l0aW9uLnN1YnN0cihpICsgMSkpO1xuXG4gICAgaWYgKGlzUGVyY2VudCAmJiBwZXJjZW50QW5pbWF0aW9uKSB7XG4gICAgICBvZmZzZXQgPSBvZmZzZXQgLyAxMDAgKiAoX2lzQXJyYXkocGVyY2VudEFuaW1hdGlvbikgPyBwZXJjZW50QW5pbWF0aW9uWzBdIDogcGVyY2VudEFuaW1hdGlvbikudG90YWxEdXJhdGlvbigpO1xuICAgIH1cblxuICAgIHJldHVybiBpID4gMSA/IF9wYXJzZVBvc2l0aW9uKGFuaW1hdGlvbiwgcG9zaXRpb24uc3Vic3RyKDAsIGkgLSAxKSwgcGVyY2VudEFuaW1hdGlvbikgKyBvZmZzZXQgOiBjbGlwcGVkRHVyYXRpb24gKyBvZmZzZXQ7XG4gIH1cblxuICByZXR1cm4gcG9zaXRpb24gPT0gbnVsbCA/IGNsaXBwZWREdXJhdGlvbiA6ICtwb3NpdGlvbjtcbn0sXG4gICAgX2NyZWF0ZVR3ZWVuVHlwZSA9IGZ1bmN0aW9uIF9jcmVhdGVUd2VlblR5cGUodHlwZSwgcGFyYW1zLCB0aW1lbGluZSkge1xuICB2YXIgaXNMZWdhY3kgPSBfaXNOdW1iZXIocGFyYW1zWzFdKSxcbiAgICAgIHZhcnNJbmRleCA9IChpc0xlZ2FjeSA/IDIgOiAxKSArICh0eXBlIDwgMiA/IDAgOiAxKSxcbiAgICAgIHZhcnMgPSBwYXJhbXNbdmFyc0luZGV4XSxcbiAgICAgIGlyVmFycyxcbiAgICAgIHBhcmVudDtcblxuICBpc0xlZ2FjeSAmJiAodmFycy5kdXJhdGlvbiA9IHBhcmFtc1sxXSk7XG4gIHZhcnMucGFyZW50ID0gdGltZWxpbmU7XG5cbiAgaWYgKHR5cGUpIHtcbiAgICBpclZhcnMgPSB2YXJzO1xuICAgIHBhcmVudCA9IHRpbWVsaW5lO1xuXG4gICAgd2hpbGUgKHBhcmVudCAmJiAhKFwiaW1tZWRpYXRlUmVuZGVyXCIgaW4gaXJWYXJzKSkge1xuICAgICAgLy8gaW5oZXJpdGFuY2UgaGFzbid0IGhhcHBlbmVkIHlldCwgYnV0IHNvbWVvbmUgbWF5IGhhdmUgc2V0IGEgZGVmYXVsdCBpbiBhbiBhbmNlc3RvciB0aW1lbGluZS4gV2UgY291bGQgZG8gdmFycy5pbW1lZGlhdGVSZW5kZXIgPSBfaXNOb3RGYWxzZShfaW5oZXJpdERlZmF1bHRzKHZhcnMpLmltbWVkaWF0ZVJlbmRlcikgYnV0IHRoYXQnZCBleGFjdCBhIHNsaWdodCBwZXJmb3JtYW5jZSBwZW5hbHR5IGJlY2F1c2UgX2luaGVyaXREZWZhdWx0cygpIGFsc28gcnVucyBpbiB0aGUgVHdlZW4gY29uc3RydWN0b3IuIFdlJ3JlIHBheWluZyBhIHNtYWxsIGtiIHByaWNlIGhlcmUgdG8gZ2FpbiBzcGVlZC5cbiAgICAgIGlyVmFycyA9IHBhcmVudC52YXJzLmRlZmF1bHRzIHx8IHt9O1xuICAgICAgcGFyZW50ID0gX2lzTm90RmFsc2UocGFyZW50LnZhcnMuaW5oZXJpdCkgJiYgcGFyZW50LnBhcmVudDtcbiAgICB9XG5cbiAgICB2YXJzLmltbWVkaWF0ZVJlbmRlciA9IF9pc05vdEZhbHNlKGlyVmFycy5pbW1lZGlhdGVSZW5kZXIpO1xuICAgIHR5cGUgPCAyID8gdmFycy5ydW5CYWNrd2FyZHMgPSAxIDogdmFycy5zdGFydEF0ID0gcGFyYW1zW3ZhcnNJbmRleCAtIDFdOyAvLyBcImZyb21cIiB2YXJzXG4gIH1cblxuICByZXR1cm4gbmV3IFR3ZWVuKHBhcmFtc1swXSwgdmFycywgcGFyYW1zW3ZhcnNJbmRleCArIDFdKTtcbn0sXG4gICAgX2NvbmRpdGlvbmFsUmV0dXJuID0gZnVuY3Rpb24gX2NvbmRpdGlvbmFsUmV0dXJuKHZhbHVlLCBmdW5jKSB7XG4gIHJldHVybiB2YWx1ZSB8fCB2YWx1ZSA9PT0gMCA/IGZ1bmModmFsdWUpIDogZnVuYztcbn0sXG4gICAgX2NsYW1wID0gZnVuY3Rpb24gX2NsYW1wKG1pbiwgbWF4LCB2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgPCBtaW4gPyBtaW4gOiB2YWx1ZSA+IG1heCA/IG1heCA6IHZhbHVlO1xufSxcbiAgICBnZXRVbml0ID0gZnVuY3Rpb24gZ2V0VW5pdCh2YWx1ZSwgdikge1xuICByZXR1cm4gIV9pc1N0cmluZyh2YWx1ZSkgfHwgISh2ID0gX3VuaXRFeHAuZXhlYyh2YWx1ZSkpID8gXCJcIiA6IHZbMV07XG59LFxuICAgIC8vIG5vdGU6IHByb3RlY3QgYWdhaW5zdCBwYWRkZWQgbnVtYmVycyBhcyBzdHJpbmdzLCBsaWtlIFwiMTAwLjEwMFwiLiBUaGF0IHNob3VsZG4ndCByZXR1cm4gXCIwMFwiIGFzIHRoZSB1bml0LiBJZiBpdCdzIG51bWVyaWMsIHJldHVybiBubyB1bml0LlxuY2xhbXAgPSBmdW5jdGlvbiBjbGFtcChtaW4sIG1heCwgdmFsdWUpIHtcbiAgcmV0dXJuIF9jb25kaXRpb25hbFJldHVybih2YWx1ZSwgZnVuY3Rpb24gKHYpIHtcbiAgICByZXR1cm4gX2NsYW1wKG1pbiwgbWF4LCB2KTtcbiAgfSk7XG59LFxuICAgIF9zbGljZSA9IFtdLnNsaWNlLFxuICAgIF9pc0FycmF5TGlrZSA9IGZ1bmN0aW9uIF9pc0FycmF5TGlrZSh2YWx1ZSwgbm9uRW1wdHkpIHtcbiAgcmV0dXJuIHZhbHVlICYmIF9pc09iamVjdCh2YWx1ZSkgJiYgXCJsZW5ndGhcIiBpbiB2YWx1ZSAmJiAoIW5vbkVtcHR5ICYmICF2YWx1ZS5sZW5ndGggfHwgdmFsdWUubGVuZ3RoIC0gMSBpbiB2YWx1ZSAmJiBfaXNPYmplY3QodmFsdWVbMF0pKSAmJiAhdmFsdWUubm9kZVR5cGUgJiYgdmFsdWUgIT09IF93aW47XG59LFxuICAgIF9mbGF0dGVuID0gZnVuY3Rpb24gX2ZsYXR0ZW4oYXIsIGxlYXZlU3RyaW5ncywgYWNjdW11bGF0b3IpIHtcbiAgaWYgKGFjY3VtdWxhdG9yID09PSB2b2lkIDApIHtcbiAgICBhY2N1bXVsYXRvciA9IFtdO1xuICB9XG5cbiAgcmV0dXJuIGFyLmZvckVhY2goZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgdmFyIF9hY2N1bXVsYXRvcjtcblxuICAgIHJldHVybiBfaXNTdHJpbmcodmFsdWUpICYmICFsZWF2ZVN0cmluZ3MgfHwgX2lzQXJyYXlMaWtlKHZhbHVlLCAxKSA/IChfYWNjdW11bGF0b3IgPSBhY2N1bXVsYXRvcikucHVzaC5hcHBseShfYWNjdW11bGF0b3IsIHRvQXJyYXkodmFsdWUpKSA6IGFjY3VtdWxhdG9yLnB1c2godmFsdWUpO1xuICB9KSB8fCBhY2N1bXVsYXRvcjtcbn0sXG4gICAgLy90YWtlcyBhbnkgdmFsdWUgYW5kIHJldHVybnMgYW4gYXJyYXkuIElmIGl0J3MgYSBzdHJpbmcgKGFuZCBsZWF2ZVN0cmluZ3MgaXNuJ3QgdHJ1ZSksIGl0J2xsIHVzZSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCkgYW5kIGNvbnZlcnQgdGhhdCB0byBhbiBhcnJheS4gSXQnbGwgYWxzbyBhY2NlcHQgaXRlcmFibGVzIGxpa2UgalF1ZXJ5IG9iamVjdHMuXG50b0FycmF5ID0gZnVuY3Rpb24gdG9BcnJheSh2YWx1ZSwgc2NvcGUsIGxlYXZlU3RyaW5ncykge1xuICByZXR1cm4gX2NvbnRleHQgJiYgIXNjb3BlICYmIF9jb250ZXh0LnNlbGVjdG9yID8gX2NvbnRleHQuc2VsZWN0b3IodmFsdWUpIDogX2lzU3RyaW5nKHZhbHVlKSAmJiAhbGVhdmVTdHJpbmdzICYmIChfY29yZUluaXR0ZWQgfHwgIV93YWtlKCkpID8gX3NsaWNlLmNhbGwoKHNjb3BlIHx8IF9kb2MpLnF1ZXJ5U2VsZWN0b3JBbGwodmFsdWUpLCAwKSA6IF9pc0FycmF5KHZhbHVlKSA/IF9mbGF0dGVuKHZhbHVlLCBsZWF2ZVN0cmluZ3MpIDogX2lzQXJyYXlMaWtlKHZhbHVlKSA/IF9zbGljZS5jYWxsKHZhbHVlLCAwKSA6IHZhbHVlID8gW3ZhbHVlXSA6IFtdO1xufSxcbiAgICBzZWxlY3RvciA9IGZ1bmN0aW9uIHNlbGVjdG9yKHZhbHVlKSB7XG4gIHZhbHVlID0gdG9BcnJheSh2YWx1ZSlbMF0gfHwgX3dhcm4oXCJJbnZhbGlkIHNjb3BlXCIpIHx8IHt9O1xuICByZXR1cm4gZnVuY3Rpb24gKHYpIHtcbiAgICB2YXIgZWwgPSB2YWx1ZS5jdXJyZW50IHx8IHZhbHVlLm5hdGl2ZUVsZW1lbnQgfHwgdmFsdWU7XG4gICAgcmV0dXJuIHRvQXJyYXkodiwgZWwucXVlcnlTZWxlY3RvckFsbCA/IGVsIDogZWwgPT09IHZhbHVlID8gX3dhcm4oXCJJbnZhbGlkIHNjb3BlXCIpIHx8IF9kb2MuY3JlYXRlRWxlbWVudChcImRpdlwiKSA6IHZhbHVlKTtcbiAgfTtcbn0sXG4gICAgc2h1ZmZsZSA9IGZ1bmN0aW9uIHNodWZmbGUoYSkge1xuICByZXR1cm4gYS5zb3J0KGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gLjUgLSBNYXRoLnJhbmRvbSgpO1xuICB9KTtcbn0sXG4gICAgLy8gYWx0ZXJuYXRpdmUgdGhhdCdzIGEgYml0IGZhc3RlciBhbmQgbW9yZSByZWxpYWJseSBkaXZlcnNlIGJ1dCBiaWdnZXI6ICAgZm9yIChsZXQgaiwgdiwgaSA9IGEubGVuZ3RoOyBpOyBqID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogaSksIHYgPSBhWy0taV0sIGFbaV0gPSBhW2pdLCBhW2pdID0gdik7IHJldHVybiBhO1xuLy9mb3IgZGlzdHJpYnV0aW5nIHZhbHVlcyBhY3Jvc3MgYW4gYXJyYXkuIENhbiBhY2NlcHQgYSBudW1iZXIsIGEgZnVuY3Rpb24gb3IgKG1vc3QgY29tbW9ubHkpIGEgZnVuY3Rpb24gd2hpY2ggY2FuIGNvbnRhaW4gdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOiB7YmFzZSwgYW1vdW50LCBmcm9tLCBlYXNlLCBncmlkLCBheGlzLCBsZW5ndGgsIGVhY2h9LiBSZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCBleHBlY3RzIHRoZSBmb2xsb3dpbmcgcGFyYW1ldGVyczogaW5kZXgsIHRhcmdldCwgYXJyYXkuIFJlY29nbml6ZXMgdGhlIGZvbGxvd2luZ1xuZGlzdHJpYnV0ZSA9IGZ1bmN0aW9uIGRpc3RyaWJ1dGUodikge1xuICBpZiAoX2lzRnVuY3Rpb24odikpIHtcbiAgICByZXR1cm4gdjtcbiAgfVxuXG4gIHZhciB2YXJzID0gX2lzT2JqZWN0KHYpID8gdiA6IHtcbiAgICBlYWNoOiB2XG4gIH0sXG4gICAgICAvL246MSBpcyBqdXN0IHRvIGluZGljYXRlIHYgd2FzIGEgbnVtYmVyOyB3ZSBsZXZlcmFnZSB0aGF0IGxhdGVyIHRvIHNldCB2IGFjY29yZGluZyB0byB0aGUgbGVuZ3RoIHdlIGdldC4gSWYgYSBudW1iZXIgaXMgcGFzc2VkIGluLCB3ZSB0cmVhdCBpdCBsaWtlIHRoZSBvbGQgc3RhZ2dlciB2YWx1ZSB3aGVyZSAwLjEsIGZvciBleGFtcGxlLCB3b3VsZCBtZWFuIHRoYXQgdGhpbmdzIHdvdWxkIGJlIGRpc3RyaWJ1dGVkIHdpdGggMC4xIGJldHdlZW4gZWFjaCBlbGVtZW50IGluIHRoZSBhcnJheSByYXRoZXIgdGhhbiBhIHRvdGFsIFwiYW1vdW50XCIgdGhhdCdzIGNodW5rZWQgb3V0IGFtb25nIHRoZW0gYWxsLlxuICBlYXNlID0gX3BhcnNlRWFzZSh2YXJzLmVhc2UpLFxuICAgICAgZnJvbSA9IHZhcnMuZnJvbSB8fCAwLFxuICAgICAgYmFzZSA9IHBhcnNlRmxvYXQodmFycy5iYXNlKSB8fCAwLFxuICAgICAgY2FjaGUgPSB7fSxcbiAgICAgIGlzRGVjaW1hbCA9IGZyb20gPiAwICYmIGZyb20gPCAxLFxuICAgICAgcmF0aW9zID0gaXNOYU4oZnJvbSkgfHwgaXNEZWNpbWFsLFxuICAgICAgYXhpcyA9IHZhcnMuYXhpcyxcbiAgICAgIHJhdGlvWCA9IGZyb20sXG4gICAgICByYXRpb1kgPSBmcm9tO1xuXG4gIGlmIChfaXNTdHJpbmcoZnJvbSkpIHtcbiAgICByYXRpb1ggPSByYXRpb1kgPSB7XG4gICAgICBjZW50ZXI6IC41LFxuICAgICAgZWRnZXM6IC41LFxuICAgICAgZW5kOiAxXG4gICAgfVtmcm9tXSB8fCAwO1xuICB9IGVsc2UgaWYgKCFpc0RlY2ltYWwgJiYgcmF0aW9zKSB7XG4gICAgcmF0aW9YID0gZnJvbVswXTtcbiAgICByYXRpb1kgPSBmcm9tWzFdO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChpLCB0YXJnZXQsIGEpIHtcbiAgICB2YXIgbCA9IChhIHx8IHZhcnMpLmxlbmd0aCxcbiAgICAgICAgZGlzdGFuY2VzID0gY2FjaGVbbF0sXG4gICAgICAgIG9yaWdpblgsXG4gICAgICAgIG9yaWdpblksXG4gICAgICAgIHgsXG4gICAgICAgIHksXG4gICAgICAgIGQsXG4gICAgICAgIGosXG4gICAgICAgIG1heCxcbiAgICAgICAgbWluLFxuICAgICAgICB3cmFwQXQ7XG5cbiAgICBpZiAoIWRpc3RhbmNlcykge1xuICAgICAgd3JhcEF0ID0gdmFycy5ncmlkID09PSBcImF1dG9cIiA/IDAgOiAodmFycy5ncmlkIHx8IFsxLCBfYmlnTnVtXSlbMV07XG5cbiAgICAgIGlmICghd3JhcEF0KSB7XG4gICAgICAgIG1heCA9IC1fYmlnTnVtO1xuXG4gICAgICAgIHdoaWxlIChtYXggPCAobWF4ID0gYVt3cmFwQXQrK10uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdCkgJiYgd3JhcEF0IDwgbCkge31cblxuICAgICAgICB3cmFwQXQtLTtcbiAgICAgIH1cblxuICAgICAgZGlzdGFuY2VzID0gY2FjaGVbbF0gPSBbXTtcbiAgICAgIG9yaWdpblggPSByYXRpb3MgPyBNYXRoLm1pbih3cmFwQXQsIGwpICogcmF0aW9YIC0gLjUgOiBmcm9tICUgd3JhcEF0O1xuICAgICAgb3JpZ2luWSA9IHdyYXBBdCA9PT0gX2JpZ051bSA/IDAgOiByYXRpb3MgPyBsICogcmF0aW9ZIC8gd3JhcEF0IC0gLjUgOiBmcm9tIC8gd3JhcEF0IHwgMDtcbiAgICAgIG1heCA9IDA7XG4gICAgICBtaW4gPSBfYmlnTnVtO1xuXG4gICAgICBmb3IgKGogPSAwOyBqIDwgbDsgaisrKSB7XG4gICAgICAgIHggPSBqICUgd3JhcEF0IC0gb3JpZ2luWDtcbiAgICAgICAgeSA9IG9yaWdpblkgLSAoaiAvIHdyYXBBdCB8IDApO1xuICAgICAgICBkaXN0YW5jZXNbal0gPSBkID0gIWF4aXMgPyBfc3FydCh4ICogeCArIHkgKiB5KSA6IE1hdGguYWJzKGF4aXMgPT09IFwieVwiID8geSA6IHgpO1xuICAgICAgICBkID4gbWF4ICYmIChtYXggPSBkKTtcbiAgICAgICAgZCA8IG1pbiAmJiAobWluID0gZCk7XG4gICAgICB9XG5cbiAgICAgIGZyb20gPT09IFwicmFuZG9tXCIgJiYgc2h1ZmZsZShkaXN0YW5jZXMpO1xuICAgICAgZGlzdGFuY2VzLm1heCA9IG1heCAtIG1pbjtcbiAgICAgIGRpc3RhbmNlcy5taW4gPSBtaW47XG4gICAgICBkaXN0YW5jZXMudiA9IGwgPSAocGFyc2VGbG9hdCh2YXJzLmFtb3VudCkgfHwgcGFyc2VGbG9hdCh2YXJzLmVhY2gpICogKHdyYXBBdCA+IGwgPyBsIC0gMSA6ICFheGlzID8gTWF0aC5tYXgod3JhcEF0LCBsIC8gd3JhcEF0KSA6IGF4aXMgPT09IFwieVwiID8gbCAvIHdyYXBBdCA6IHdyYXBBdCkgfHwgMCkgKiAoZnJvbSA9PT0gXCJlZGdlc1wiID8gLTEgOiAxKTtcbiAgICAgIGRpc3RhbmNlcy5iID0gbCA8IDAgPyBiYXNlIC0gbCA6IGJhc2U7XG4gICAgICBkaXN0YW5jZXMudSA9IGdldFVuaXQodmFycy5hbW91bnQgfHwgdmFycy5lYWNoKSB8fCAwOyAvL3VuaXRcblxuICAgICAgZWFzZSA9IGVhc2UgJiYgbCA8IDAgPyBfaW52ZXJ0RWFzZShlYXNlKSA6IGVhc2U7XG4gICAgfVxuXG4gICAgbCA9IChkaXN0YW5jZXNbaV0gLSBkaXN0YW5jZXMubWluKSAvIGRpc3RhbmNlcy5tYXggfHwgMDtcbiAgICByZXR1cm4gX3JvdW5kUHJlY2lzZShkaXN0YW5jZXMuYiArIChlYXNlID8gZWFzZShsKSA6IGwpICogZGlzdGFuY2VzLnYpICsgZGlzdGFuY2VzLnU7IC8vcm91bmQgaW4gb3JkZXIgdG8gd29yayBhcm91bmQgZmxvYXRpbmcgcG9pbnQgZXJyb3JzXG4gIH07XG59LFxuICAgIF9yb3VuZE1vZGlmaWVyID0gZnVuY3Rpb24gX3JvdW5kTW9kaWZpZXIodikge1xuICAvL3Bhc3MgaW4gMC4xIGdldCBhIGZ1bmN0aW9uIHRoYXQnbGwgcm91bmQgdG8gdGhlIG5lYXJlc3QgdGVudGgsIG9yIDUgdG8gcm91bmQgdG8gdGhlIGNsb3Nlc3QgNSwgb3IgMC4wMDEgdG8gdGhlIGNsb3Nlc3QgMTAwMHRoLCBldGMuXG4gIHZhciBwID0gTWF0aC5wb3coMTAsICgodiArIFwiXCIpLnNwbGl0KFwiLlwiKVsxXSB8fCBcIlwiKS5sZW5ndGgpOyAvL3RvIGF2b2lkIGZsb2F0aW5nIHBvaW50IG1hdGggZXJyb3JzIChsaWtlIDI0ICogMC4xID09IDIuNDAwMDAwMDAwMDAwMDAwNCksIHdlIGNob3Agb2ZmIGF0IGEgc3BlY2lmaWMgbnVtYmVyIG9mIGRlY2ltYWwgcGxhY2VzIChtdWNoIGZhc3RlciB0aGFuIHRvRml4ZWQoKSlcblxuICByZXR1cm4gZnVuY3Rpb24gKHJhdykge1xuICAgIHZhciBuID0gX3JvdW5kUHJlY2lzZShNYXRoLnJvdW5kKHBhcnNlRmxvYXQocmF3KSAvIHYpICogdiAqIHApO1xuXG4gICAgcmV0dXJuIChuIC0gbiAlIDEpIC8gcCArIChfaXNOdW1iZXIocmF3KSA/IDAgOiBnZXRVbml0KHJhdykpOyAvLyBuIC0gbiAlIDEgcmVwbGFjZXMgTWF0aC5mbG9vcigpIGluIG9yZGVyIHRvIGhhbmRsZSBuZWdhdGl2ZSB2YWx1ZXMgcHJvcGVybHkuIEZvciBleGFtcGxlLCBNYXRoLmZsb29yKC0xNTAuMDAwMDAwMDAwMDAwMDMpIGlzIDE1MSFcbiAgfTtcbn0sXG4gICAgc25hcCA9IGZ1bmN0aW9uIHNuYXAoc25hcFRvLCB2YWx1ZSkge1xuICB2YXIgaXNBcnJheSA9IF9pc0FycmF5KHNuYXBUbyksXG4gICAgICByYWRpdXMsXG4gICAgICBpczJEO1xuXG4gIGlmICghaXNBcnJheSAmJiBfaXNPYmplY3Qoc25hcFRvKSkge1xuICAgIHJhZGl1cyA9IGlzQXJyYXkgPSBzbmFwVG8ucmFkaXVzIHx8IF9iaWdOdW07XG5cbiAgICBpZiAoc25hcFRvLnZhbHVlcykge1xuICAgICAgc25hcFRvID0gdG9BcnJheShzbmFwVG8udmFsdWVzKTtcblxuICAgICAgaWYgKGlzMkQgPSAhX2lzTnVtYmVyKHNuYXBUb1swXSkpIHtcbiAgICAgICAgcmFkaXVzICo9IHJhZGl1czsgLy9wZXJmb3JtYW5jZSBvcHRpbWl6YXRpb24gc28gd2UgZG9uJ3QgaGF2ZSB0byBNYXRoLnNxcnQoKSBpbiB0aGUgbG9vcC5cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgc25hcFRvID0gX3JvdW5kTW9kaWZpZXIoc25hcFRvLmluY3JlbWVudCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIF9jb25kaXRpb25hbFJldHVybih2YWx1ZSwgIWlzQXJyYXkgPyBfcm91bmRNb2RpZmllcihzbmFwVG8pIDogX2lzRnVuY3Rpb24oc25hcFRvKSA/IGZ1bmN0aW9uIChyYXcpIHtcbiAgICBpczJEID0gc25hcFRvKHJhdyk7XG4gICAgcmV0dXJuIE1hdGguYWJzKGlzMkQgLSByYXcpIDw9IHJhZGl1cyA/IGlzMkQgOiByYXc7XG4gIH0gOiBmdW5jdGlvbiAocmF3KSB7XG4gICAgdmFyIHggPSBwYXJzZUZsb2F0KGlzMkQgPyByYXcueCA6IHJhdyksXG4gICAgICAgIHkgPSBwYXJzZUZsb2F0KGlzMkQgPyByYXcueSA6IDApLFxuICAgICAgICBtaW4gPSBfYmlnTnVtLFxuICAgICAgICBjbG9zZXN0ID0gMCxcbiAgICAgICAgaSA9IHNuYXBUby5sZW5ndGgsXG4gICAgICAgIGR4LFxuICAgICAgICBkeTtcblxuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIGlmIChpczJEKSB7XG4gICAgICAgIGR4ID0gc25hcFRvW2ldLnggLSB4O1xuICAgICAgICBkeSA9IHNuYXBUb1tpXS55IC0geTtcbiAgICAgICAgZHggPSBkeCAqIGR4ICsgZHkgKiBkeTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGR4ID0gTWF0aC5hYnMoc25hcFRvW2ldIC0geCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChkeCA8IG1pbikge1xuICAgICAgICBtaW4gPSBkeDtcbiAgICAgICAgY2xvc2VzdCA9IGk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY2xvc2VzdCA9ICFyYWRpdXMgfHwgbWluIDw9IHJhZGl1cyA/IHNuYXBUb1tjbG9zZXN0XSA6IHJhdztcbiAgICByZXR1cm4gaXMyRCB8fCBjbG9zZXN0ID09PSByYXcgfHwgX2lzTnVtYmVyKHJhdykgPyBjbG9zZXN0IDogY2xvc2VzdCArIGdldFVuaXQocmF3KTtcbiAgfSk7XG59LFxuICAgIHJhbmRvbSA9IGZ1bmN0aW9uIHJhbmRvbShtaW4sIG1heCwgcm91bmRpbmdJbmNyZW1lbnQsIHJldHVybkZ1bmN0aW9uKSB7XG4gIHJldHVybiBfY29uZGl0aW9uYWxSZXR1cm4oX2lzQXJyYXkobWluKSA/ICFtYXggOiByb3VuZGluZ0luY3JlbWVudCA9PT0gdHJ1ZSA/ICEhKHJvdW5kaW5nSW5jcmVtZW50ID0gMCkgOiAhcmV0dXJuRnVuY3Rpb24sIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2lzQXJyYXkobWluKSA/IG1pblt+fihNYXRoLnJhbmRvbSgpICogbWluLmxlbmd0aCldIDogKHJvdW5kaW5nSW5jcmVtZW50ID0gcm91bmRpbmdJbmNyZW1lbnQgfHwgMWUtNSkgJiYgKHJldHVybkZ1bmN0aW9uID0gcm91bmRpbmdJbmNyZW1lbnQgPCAxID8gTWF0aC5wb3coMTAsIChyb3VuZGluZ0luY3JlbWVudCArIFwiXCIpLmxlbmd0aCAtIDIpIDogMSkgJiYgTWF0aC5mbG9vcihNYXRoLnJvdW5kKChtaW4gLSByb3VuZGluZ0luY3JlbWVudCAvIDIgKyBNYXRoLnJhbmRvbSgpICogKG1heCAtIG1pbiArIHJvdW5kaW5nSW5jcmVtZW50ICogLjk5KSkgLyByb3VuZGluZ0luY3JlbWVudCkgKiByb3VuZGluZ0luY3JlbWVudCAqIHJldHVybkZ1bmN0aW9uKSAvIHJldHVybkZ1bmN0aW9uO1xuICB9KTtcbn0sXG4gICAgcGlwZSA9IGZ1bmN0aW9uIHBpcGUoKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBmdW5jdGlvbnMgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgZnVuY3Rpb25zW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHJldHVybiBmdW5jdGlvbnMucmVkdWNlKGZ1bmN0aW9uICh2LCBmKSB7XG4gICAgICByZXR1cm4gZih2KTtcbiAgICB9LCB2YWx1ZSk7XG4gIH07XG59LFxuICAgIHVuaXRpemUgPSBmdW5jdGlvbiB1bml0aXplKGZ1bmMsIHVuaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHJldHVybiBmdW5jKHBhcnNlRmxvYXQodmFsdWUpKSArICh1bml0IHx8IGdldFVuaXQodmFsdWUpKTtcbiAgfTtcbn0sXG4gICAgbm9ybWFsaXplID0gZnVuY3Rpb24gbm9ybWFsaXplKG1pbiwgbWF4LCB2YWx1ZSkge1xuICByZXR1cm4gbWFwUmFuZ2UobWluLCBtYXgsIDAsIDEsIHZhbHVlKTtcbn0sXG4gICAgX3dyYXBBcnJheSA9IGZ1bmN0aW9uIF93cmFwQXJyYXkoYSwgd3JhcHBlciwgdmFsdWUpIHtcbiAgcmV0dXJuIF9jb25kaXRpb25hbFJldHVybih2YWx1ZSwgZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgcmV0dXJuIGFbfn53cmFwcGVyKGluZGV4KV07XG4gIH0pO1xufSxcbiAgICB3cmFwID0gZnVuY3Rpb24gd3JhcChtaW4sIG1heCwgdmFsdWUpIHtcbiAgLy8gTk9URTogd3JhcCgpIENBTk5PVCBiZSBhbiBhcnJvdyBmdW5jdGlvbiEgQSB2ZXJ5IG9kZCBjb21waWxpbmcgYnVnIGNhdXNlcyBwcm9ibGVtcyAodW5yZWxhdGVkIHRvIEdTQVApLlxuICB2YXIgcmFuZ2UgPSBtYXggLSBtaW47XG4gIHJldHVybiBfaXNBcnJheShtaW4pID8gX3dyYXBBcnJheShtaW4sIHdyYXAoMCwgbWluLmxlbmd0aCksIG1heCkgOiBfY29uZGl0aW9uYWxSZXR1cm4odmFsdWUsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHJldHVybiAocmFuZ2UgKyAodmFsdWUgLSBtaW4pICUgcmFuZ2UpICUgcmFuZ2UgKyBtaW47XG4gIH0pO1xufSxcbiAgICB3cmFwWW95byA9IGZ1bmN0aW9uIHdyYXBZb3lvKG1pbiwgbWF4LCB2YWx1ZSkge1xuICB2YXIgcmFuZ2UgPSBtYXggLSBtaW4sXG4gICAgICB0b3RhbCA9IHJhbmdlICogMjtcbiAgcmV0dXJuIF9pc0FycmF5KG1pbikgPyBfd3JhcEFycmF5KG1pbiwgd3JhcFlveW8oMCwgbWluLmxlbmd0aCAtIDEpLCBtYXgpIDogX2NvbmRpdGlvbmFsUmV0dXJuKHZhbHVlLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICB2YWx1ZSA9ICh0b3RhbCArICh2YWx1ZSAtIG1pbikgJSB0b3RhbCkgJSB0b3RhbCB8fCAwO1xuICAgIHJldHVybiBtaW4gKyAodmFsdWUgPiByYW5nZSA/IHRvdGFsIC0gdmFsdWUgOiB2YWx1ZSk7XG4gIH0pO1xufSxcbiAgICBfcmVwbGFjZVJhbmRvbSA9IGZ1bmN0aW9uIF9yZXBsYWNlUmFuZG9tKHZhbHVlKSB7XG4gIC8vcmVwbGFjZXMgYWxsIG9jY3VycmVuY2VzIG9mIHJhbmRvbSguLi4pIGluIGEgc3RyaW5nIHdpdGggdGhlIGNhbGN1bGF0ZWQgcmFuZG9tIHZhbHVlLiBjYW4gYmUgYSByYW5nZSBsaWtlIHJhbmRvbSgtMTAwLCAxMDAsIDUpIG9yIGFuIGFycmF5IGxpa2UgcmFuZG9tKFswLCAxMDAsIDUwMF0pXG4gIHZhciBwcmV2ID0gMCxcbiAgICAgIHMgPSBcIlwiLFxuICAgICAgaSxcbiAgICAgIG51bXMsXG4gICAgICBlbmQsXG4gICAgICBpc0FycmF5O1xuXG4gIHdoaWxlICh+KGkgPSB2YWx1ZS5pbmRleE9mKFwicmFuZG9tKFwiLCBwcmV2KSkpIHtcbiAgICBlbmQgPSB2YWx1ZS5pbmRleE9mKFwiKVwiLCBpKTtcbiAgICBpc0FycmF5ID0gdmFsdWUuY2hhckF0KGkgKyA3KSA9PT0gXCJbXCI7XG4gICAgbnVtcyA9IHZhbHVlLnN1YnN0cihpICsgNywgZW5kIC0gaSAtIDcpLm1hdGNoKGlzQXJyYXkgPyBfZGVsaW1pdGVkVmFsdWVFeHAgOiBfc3RyaWN0TnVtRXhwKTtcbiAgICBzICs9IHZhbHVlLnN1YnN0cihwcmV2LCBpIC0gcHJldikgKyByYW5kb20oaXNBcnJheSA/IG51bXMgOiArbnVtc1swXSwgaXNBcnJheSA/IDAgOiArbnVtc1sxXSwgK251bXNbMl0gfHwgMWUtNSk7XG4gICAgcHJldiA9IGVuZCArIDE7XG4gIH1cblxuICByZXR1cm4gcyArIHZhbHVlLnN1YnN0cihwcmV2LCB2YWx1ZS5sZW5ndGggLSBwcmV2KTtcbn0sXG4gICAgbWFwUmFuZ2UgPSBmdW5jdGlvbiBtYXBSYW5nZShpbk1pbiwgaW5NYXgsIG91dE1pbiwgb3V0TWF4LCB2YWx1ZSkge1xuICB2YXIgaW5SYW5nZSA9IGluTWF4IC0gaW5NaW4sXG4gICAgICBvdXRSYW5nZSA9IG91dE1heCAtIG91dE1pbjtcbiAgcmV0dXJuIF9jb25kaXRpb25hbFJldHVybih2YWx1ZSwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgcmV0dXJuIG91dE1pbiArICgodmFsdWUgLSBpbk1pbikgLyBpblJhbmdlICogb3V0UmFuZ2UgfHwgMCk7XG4gIH0pO1xufSxcbiAgICBpbnRlcnBvbGF0ZSA9IGZ1bmN0aW9uIGludGVycG9sYXRlKHN0YXJ0LCBlbmQsIHByb2dyZXNzLCBtdXRhdGUpIHtcbiAgdmFyIGZ1bmMgPSBpc05hTihzdGFydCArIGVuZCkgPyAwIDogZnVuY3Rpb24gKHApIHtcbiAgICByZXR1cm4gKDEgLSBwKSAqIHN0YXJ0ICsgcCAqIGVuZDtcbiAgfTtcblxuICBpZiAoIWZ1bmMpIHtcbiAgICB2YXIgaXNTdHJpbmcgPSBfaXNTdHJpbmcoc3RhcnQpLFxuICAgICAgICBtYXN0ZXIgPSB7fSxcbiAgICAgICAgcCxcbiAgICAgICAgaSxcbiAgICAgICAgaW50ZXJwb2xhdG9ycyxcbiAgICAgICAgbCxcbiAgICAgICAgaWw7XG5cbiAgICBwcm9ncmVzcyA9PT0gdHJ1ZSAmJiAobXV0YXRlID0gMSkgJiYgKHByb2dyZXNzID0gbnVsbCk7XG5cbiAgICBpZiAoaXNTdHJpbmcpIHtcbiAgICAgIHN0YXJ0ID0ge1xuICAgICAgICBwOiBzdGFydFxuICAgICAgfTtcbiAgICAgIGVuZCA9IHtcbiAgICAgICAgcDogZW5kXG4gICAgICB9O1xuICAgIH0gZWxzZSBpZiAoX2lzQXJyYXkoc3RhcnQpICYmICFfaXNBcnJheShlbmQpKSB7XG4gICAgICBpbnRlcnBvbGF0b3JzID0gW107XG4gICAgICBsID0gc3RhcnQubGVuZ3RoO1xuICAgICAgaWwgPSBsIC0gMjtcblxuICAgICAgZm9yIChpID0gMTsgaSA8IGw7IGkrKykge1xuICAgICAgICBpbnRlcnBvbGF0b3JzLnB1c2goaW50ZXJwb2xhdGUoc3RhcnRbaSAtIDFdLCBzdGFydFtpXSkpOyAvL2J1aWxkIHRoZSBpbnRlcnBvbGF0b3JzIHVwIGZyb250IGFzIGEgcGVyZm9ybWFuY2Ugb3B0aW1pemF0aW9uIHNvIHRoYXQgd2hlbiB0aGUgZnVuY3Rpb24gaXMgY2FsbGVkIG1hbnkgdGltZXMsIGl0IGNhbiBqdXN0IHJldXNlIHRoZW0uXG4gICAgICB9XG5cbiAgICAgIGwtLTtcblxuICAgICAgZnVuYyA9IGZ1bmN0aW9uIGZ1bmMocCkge1xuICAgICAgICBwICo9IGw7XG4gICAgICAgIHZhciBpID0gTWF0aC5taW4oaWwsIH5+cCk7XG4gICAgICAgIHJldHVybiBpbnRlcnBvbGF0b3JzW2ldKHAgLSBpKTtcbiAgICAgIH07XG5cbiAgICAgIHByb2dyZXNzID0gZW5kO1xuICAgIH0gZWxzZSBpZiAoIW11dGF0ZSkge1xuICAgICAgc3RhcnQgPSBfbWVyZ2UoX2lzQXJyYXkoc3RhcnQpID8gW10gOiB7fSwgc3RhcnQpO1xuICAgIH1cblxuICAgIGlmICghaW50ZXJwb2xhdG9ycykge1xuICAgICAgZm9yIChwIGluIGVuZCkge1xuICAgICAgICBfYWRkUHJvcFR3ZWVuLmNhbGwobWFzdGVyLCBzdGFydCwgcCwgXCJnZXRcIiwgZW5kW3BdKTtcbiAgICAgIH1cblxuICAgICAgZnVuYyA9IGZ1bmN0aW9uIGZ1bmMocCkge1xuICAgICAgICByZXR1cm4gX3JlbmRlclByb3BUd2VlbnMocCwgbWFzdGVyKSB8fCAoaXNTdHJpbmcgPyBzdGFydC5wIDogc3RhcnQpO1xuICAgICAgfTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gX2NvbmRpdGlvbmFsUmV0dXJuKHByb2dyZXNzLCBmdW5jKTtcbn0sXG4gICAgX2dldExhYmVsSW5EaXJlY3Rpb24gPSBmdW5jdGlvbiBfZ2V0TGFiZWxJbkRpcmVjdGlvbih0aW1lbGluZSwgZnJvbVRpbWUsIGJhY2t3YXJkKSB7XG4gIC8vdXNlZCBmb3IgbmV4dExhYmVsKCkgYW5kIHByZXZpb3VzTGFiZWwoKVxuICB2YXIgbGFiZWxzID0gdGltZWxpbmUubGFiZWxzLFxuICAgICAgbWluID0gX2JpZ051bSxcbiAgICAgIHAsXG4gICAgICBkaXN0YW5jZSxcbiAgICAgIGxhYmVsO1xuXG4gIGZvciAocCBpbiBsYWJlbHMpIHtcbiAgICBkaXN0YW5jZSA9IGxhYmVsc1twXSAtIGZyb21UaW1lO1xuXG4gICAgaWYgKGRpc3RhbmNlIDwgMCA9PT0gISFiYWNrd2FyZCAmJiBkaXN0YW5jZSAmJiBtaW4gPiAoZGlzdGFuY2UgPSBNYXRoLmFicyhkaXN0YW5jZSkpKSB7XG4gICAgICBsYWJlbCA9IHA7XG4gICAgICBtaW4gPSBkaXN0YW5jZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbGFiZWw7XG59LFxuICAgIF9jYWxsYmFjayA9IGZ1bmN0aW9uIF9jYWxsYmFjayhhbmltYXRpb24sIHR5cGUsIGV4ZWN1dGVMYXp5Rmlyc3QpIHtcbiAgdmFyIHYgPSBhbmltYXRpb24udmFycyxcbiAgICAgIGNhbGxiYWNrID0gdlt0eXBlXSxcbiAgICAgIHByZXZDb250ZXh0ID0gX2NvbnRleHQsXG4gICAgICBjb250ZXh0ID0gYW5pbWF0aW9uLl9jdHgsXG4gICAgICBwYXJhbXMsXG4gICAgICBzY29wZSxcbiAgICAgIHJlc3VsdDtcblxuICBpZiAoIWNhbGxiYWNrKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgcGFyYW1zID0gdlt0eXBlICsgXCJQYXJhbXNcIl07XG4gIHNjb3BlID0gdi5jYWxsYmFja1Njb3BlIHx8IGFuaW1hdGlvbjtcbiAgZXhlY3V0ZUxhenlGaXJzdCAmJiBfbGF6eVR3ZWVucy5sZW5ndGggJiYgX2xhenlSZW5kZXIoKTsgLy9pbiBjYXNlIHJlbmRlcmluZyBjYXVzZWQgYW55IHR3ZWVucyB0byBsYXp5LWluaXQsIHdlIHNob3VsZCByZW5kZXIgdGhlbSBiZWNhdXNlIHR5cGljYWxseSB3aGVuIGEgdGltZWxpbmUgZmluaXNoZXMsIHVzZXJzIGV4cGVjdCB0aGluZ3MgdG8gaGF2ZSByZW5kZXJlZCBmdWxseS4gSW1hZ2luZSBhbiBvblVwZGF0ZSBvbiBhIHRpbWVsaW5lIHRoYXQgcmVwb3J0cy9jaGVja3MgdHdlZW5lZCB2YWx1ZXMuXG5cbiAgY29udGV4dCAmJiAoX2NvbnRleHQgPSBjb250ZXh0KTtcbiAgcmVzdWx0ID0gcGFyYW1zID8gY2FsbGJhY2suYXBwbHkoc2NvcGUsIHBhcmFtcykgOiBjYWxsYmFjay5jYWxsKHNjb3BlKTtcbiAgX2NvbnRleHQgPSBwcmV2Q29udGV4dDtcbiAgcmV0dXJuIHJlc3VsdDtcbn0sXG4gICAgX2ludGVycnVwdCA9IGZ1bmN0aW9uIF9pbnRlcnJ1cHQoYW5pbWF0aW9uKSB7XG4gIF9yZW1vdmVGcm9tUGFyZW50KGFuaW1hdGlvbik7XG5cbiAgYW5pbWF0aW9uLnNjcm9sbFRyaWdnZXIgJiYgYW5pbWF0aW9uLnNjcm9sbFRyaWdnZXIua2lsbChmYWxzZSk7XG4gIGFuaW1hdGlvbi5wcm9ncmVzcygpIDwgMSAmJiBfY2FsbGJhY2soYW5pbWF0aW9uLCBcIm9uSW50ZXJydXB0XCIpO1xuICByZXR1cm4gYW5pbWF0aW9uO1xufSxcbiAgICBfcXVpY2tUd2VlbixcbiAgICBfY3JlYXRlUGx1Z2luID0gZnVuY3Rpb24gX2NyZWF0ZVBsdWdpbihjb25maWcpIHtcbiAgY29uZmlnID0gIWNvbmZpZy5uYW1lICYmIGNvbmZpZ1tcImRlZmF1bHRcIl0gfHwgY29uZmlnOyAvL1VNRCBwYWNrYWdpbmcgd3JhcHMgdGhpbmdzIG9kZGx5LCBzbyBmb3IgZXhhbXBsZSBNb3Rpb25QYXRoSGVscGVyIGJlY29tZXMge01vdGlvblBhdGhIZWxwZXI6TW90aW9uUGF0aEhlbHBlciwgZGVmYXVsdDpNb3Rpb25QYXRoSGVscGVyfS5cblxuICB2YXIgbmFtZSA9IGNvbmZpZy5uYW1lLFxuICAgICAgaXNGdW5jID0gX2lzRnVuY3Rpb24oY29uZmlnKSxcbiAgICAgIFBsdWdpbiA9IG5hbWUgJiYgIWlzRnVuYyAmJiBjb25maWcuaW5pdCA/IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLl9wcm9wcyA9IFtdO1xuICB9IDogY29uZmlnLFxuICAgICAgLy9pbiBjYXNlIHNvbWVvbmUgcGFzc2VzIGluIGFuIG9iamVjdCB0aGF0J3Mgbm90IGEgcGx1Z2luLCBsaWtlIEN1c3RvbUVhc2VcbiAgaW5zdGFuY2VEZWZhdWx0cyA9IHtcbiAgICBpbml0OiBfZW1wdHlGdW5jLFxuICAgIHJlbmRlcjogX3JlbmRlclByb3BUd2VlbnMsXG4gICAgYWRkOiBfYWRkUHJvcFR3ZWVuLFxuICAgIGtpbGw6IF9raWxsUHJvcFR3ZWVuc09mLFxuICAgIG1vZGlmaWVyOiBfYWRkUGx1Z2luTW9kaWZpZXIsXG4gICAgcmF3VmFyczogMFxuICB9LFxuICAgICAgc3RhdGljcyA9IHtcbiAgICB0YXJnZXRUZXN0OiAwLFxuICAgIGdldDogMCxcbiAgICBnZXRTZXR0ZXI6IF9nZXRTZXR0ZXIsXG4gICAgYWxpYXNlczoge30sXG4gICAgcmVnaXN0ZXI6IDBcbiAgfTtcblxuICBfd2FrZSgpO1xuXG4gIGlmIChjb25maWcgIT09IFBsdWdpbikge1xuICAgIGlmIChfcGx1Z2luc1tuYW1lXSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIF9zZXREZWZhdWx0cyhQbHVnaW4sIF9zZXREZWZhdWx0cyhfY29weUV4Y2x1ZGluZyhjb25maWcsIGluc3RhbmNlRGVmYXVsdHMpLCBzdGF0aWNzKSk7IC8vc3RhdGljIG1ldGhvZHNcblxuXG4gICAgX21lcmdlKFBsdWdpbi5wcm90b3R5cGUsIF9tZXJnZShpbnN0YW5jZURlZmF1bHRzLCBfY29weUV4Y2x1ZGluZyhjb25maWcsIHN0YXRpY3MpKSk7IC8vaW5zdGFuY2UgbWV0aG9kc1xuXG5cbiAgICBfcGx1Z2luc1tQbHVnaW4ucHJvcCA9IG5hbWVdID0gUGx1Z2luO1xuXG4gICAgaWYgKGNvbmZpZy50YXJnZXRUZXN0KSB7XG4gICAgICBfaGFybmVzc1BsdWdpbnMucHVzaChQbHVnaW4pO1xuXG4gICAgICBfcmVzZXJ2ZWRQcm9wc1tuYW1lXSA9IDE7XG4gICAgfVxuXG4gICAgbmFtZSA9IChuYW1lID09PSBcImNzc1wiID8gXCJDU1NcIiA6IG5hbWUuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBuYW1lLnN1YnN0cigxKSkgKyBcIlBsdWdpblwiOyAvL2ZvciB0aGUgZ2xvYmFsIG5hbWUuIFwibW90aW9uUGF0aFwiIHNob3VsZCBiZWNvbWUgTW90aW9uUGF0aFBsdWdpblxuICB9XG5cbiAgX2FkZEdsb2JhbChuYW1lLCBQbHVnaW4pO1xuXG4gIGNvbmZpZy5yZWdpc3RlciAmJiBjb25maWcucmVnaXN0ZXIoZ3NhcCwgUGx1Z2luLCBQcm9wVHdlZW4pO1xufSxcblxuLypcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBDT0xPUlNcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cbl8yNTUgPSAyNTUsXG4gICAgX2NvbG9yTG9va3VwID0ge1xuICBhcXVhOiBbMCwgXzI1NSwgXzI1NV0sXG4gIGxpbWU6IFswLCBfMjU1LCAwXSxcbiAgc2lsdmVyOiBbMTkyLCAxOTIsIDE5Ml0sXG4gIGJsYWNrOiBbMCwgMCwgMF0sXG4gIG1hcm9vbjogWzEyOCwgMCwgMF0sXG4gIHRlYWw6IFswLCAxMjgsIDEyOF0sXG4gIGJsdWU6IFswLCAwLCBfMjU1XSxcbiAgbmF2eTogWzAsIDAsIDEyOF0sXG4gIHdoaXRlOiBbXzI1NSwgXzI1NSwgXzI1NV0sXG4gIG9saXZlOiBbMTI4LCAxMjgsIDBdLFxuICB5ZWxsb3c6IFtfMjU1LCBfMjU1LCAwXSxcbiAgb3JhbmdlOiBbXzI1NSwgMTY1LCAwXSxcbiAgZ3JheTogWzEyOCwgMTI4LCAxMjhdLFxuICBwdXJwbGU6IFsxMjgsIDAsIDEyOF0sXG4gIGdyZWVuOiBbMCwgMTI4LCAwXSxcbiAgcmVkOiBbXzI1NSwgMCwgMF0sXG4gIHBpbms6IFtfMjU1LCAxOTIsIDIwM10sXG4gIGN5YW46IFswLCBfMjU1LCBfMjU1XSxcbiAgdHJhbnNwYXJlbnQ6IFtfMjU1LCBfMjU1LCBfMjU1LCAwXVxufSxcbiAgICAvLyBwb3NzaWJsZSBmdXR1cmUgaWRlYSB0byByZXBsYWNlIHRoZSBoYXJkLWNvZGVkIGNvbG9yIG5hbWUgdmFsdWVzIC0gcHV0IHRoaXMgaW4gdGhlIHRpY2tlci53YWtlKCkgd2hlcmUgd2Ugc2V0IHRoZSBfZG9jOlxuLy8gbGV0IGN0eCA9IF9kb2MuY3JlYXRlRWxlbWVudChcImNhbnZhc1wiKS5nZXRDb250ZXh0KFwiMmRcIik7XG4vLyBfZm9yRWFjaE5hbWUoXCJhcXVhLGxpbWUsc2lsdmVyLGJsYWNrLG1hcm9vbix0ZWFsLGJsdWUsbmF2eSx3aGl0ZSxvbGl2ZSx5ZWxsb3csb3JhbmdlLGdyYXkscHVycGxlLGdyZWVuLHJlZCxwaW5rLGN5YW5cIiwgY29sb3IgPT4ge2N0eC5maWxsU3R5bGUgPSBjb2xvcjsgX2NvbG9yTG9va3VwW2NvbG9yXSA9IHNwbGl0Q29sb3IoY3R4LmZpbGxTdHlsZSl9KTtcbl9odWUgPSBmdW5jdGlvbiBfaHVlKGgsIG0xLCBtMikge1xuICBoICs9IGggPCAwID8gMSA6IGggPiAxID8gLTEgOiAwO1xuICByZXR1cm4gKGggKiA2IDwgMSA/IG0xICsgKG0yIC0gbTEpICogaCAqIDYgOiBoIDwgLjUgPyBtMiA6IGggKiAzIDwgMiA/IG0xICsgKG0yIC0gbTEpICogKDIgLyAzIC0gaCkgKiA2IDogbTEpICogXzI1NSArIC41IHwgMDtcbn0sXG4gICAgc3BsaXRDb2xvciA9IGZ1bmN0aW9uIHNwbGl0Q29sb3IodiwgdG9IU0wsIGZvcmNlQWxwaGEpIHtcbiAgdmFyIGEgPSAhdiA/IF9jb2xvckxvb2t1cC5ibGFjayA6IF9pc051bWJlcih2KSA/IFt2ID4+IDE2LCB2ID4+IDggJiBfMjU1LCB2ICYgXzI1NV0gOiAwLFxuICAgICAgcixcbiAgICAgIGcsXG4gICAgICBiLFxuICAgICAgaCxcbiAgICAgIHMsXG4gICAgICBsLFxuICAgICAgbWF4LFxuICAgICAgbWluLFxuICAgICAgZCxcbiAgICAgIHdhc0hTTDtcblxuICBpZiAoIWEpIHtcbiAgICBpZiAodi5zdWJzdHIoLTEpID09PSBcIixcIikge1xuICAgICAgLy9zb21ldGltZXMgYSB0cmFpbGluZyBjb21tYSBpcyBpbmNsdWRlZCBhbmQgd2Ugc2hvdWxkIGNob3AgaXQgb2ZmICh0eXBpY2FsbHkgZnJvbSBhIGNvbW1hLWRlbGltaXRlZCBsaXN0IG9mIHZhbHVlcyBsaWtlIGEgdGV4dFNoYWRvdzpcIjJweCAycHggMnB4IGJsdWUsIDVweCA1cHggNXB4IHJnYigyNTUsMCwwKVwiIC0gaW4gdGhpcyBleGFtcGxlIFwiYmx1ZSxcIiBoYXMgYSB0cmFpbGluZyBjb21tYS4gV2UgY291bGQgc3RyaXAgaXQgb3V0IGluc2lkZSBwYXJzZUNvbXBsZXgoKSBidXQgd2UnZCBuZWVkIHRvIGRvIGl0IHRvIHRoZSBiZWdpbm5pbmcgYW5kIGVuZGluZyB2YWx1ZXMgcGx1cyBpdCB3b3VsZG4ndCBwcm92aWRlIHByb3RlY3Rpb24gZnJvbSBvdGhlciBwb3RlbnRpYWwgc2NlbmFyaW9zIGxpa2UgaWYgdGhlIHVzZXIgcGFzc2VzIGluIGEgc2ltaWxhciB2YWx1ZS5cbiAgICAgIHYgPSB2LnN1YnN0cigwLCB2Lmxlbmd0aCAtIDEpO1xuICAgIH1cblxuICAgIGlmIChfY29sb3JMb29rdXBbdl0pIHtcbiAgICAgIGEgPSBfY29sb3JMb29rdXBbdl07XG4gICAgfSBlbHNlIGlmICh2LmNoYXJBdCgwKSA9PT0gXCIjXCIpIHtcbiAgICAgIGlmICh2Lmxlbmd0aCA8IDYpIHtcbiAgICAgICAgLy9mb3Igc2hvcnRoYW5kIGxpa2UgIzlGMCBvciAjOUYwRiAoY291bGQgaGF2ZSBhbHBoYSlcbiAgICAgICAgciA9IHYuY2hhckF0KDEpO1xuICAgICAgICBnID0gdi5jaGFyQXQoMik7XG4gICAgICAgIGIgPSB2LmNoYXJBdCgzKTtcbiAgICAgICAgdiA9IFwiI1wiICsgciArIHIgKyBnICsgZyArIGIgKyBiICsgKHYubGVuZ3RoID09PSA1ID8gdi5jaGFyQXQoNCkgKyB2LmNoYXJBdCg0KSA6IFwiXCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAodi5sZW5ndGggPT09IDkpIHtcbiAgICAgICAgLy8gaGV4IHdpdGggYWxwaGEsIGxpa2UgI2ZkNWU1M2ZmXG4gICAgICAgIGEgPSBwYXJzZUludCh2LnN1YnN0cigxLCA2KSwgMTYpO1xuICAgICAgICByZXR1cm4gW2EgPj4gMTYsIGEgPj4gOCAmIF8yNTUsIGEgJiBfMjU1LCBwYXJzZUludCh2LnN1YnN0cig3KSwgMTYpIC8gMjU1XTtcbiAgICAgIH1cblxuICAgICAgdiA9IHBhcnNlSW50KHYuc3Vic3RyKDEpLCAxNik7XG4gICAgICBhID0gW3YgPj4gMTYsIHYgPj4gOCAmIF8yNTUsIHYgJiBfMjU1XTtcbiAgICB9IGVsc2UgaWYgKHYuc3Vic3RyKDAsIDMpID09PSBcImhzbFwiKSB7XG4gICAgICBhID0gd2FzSFNMID0gdi5tYXRjaChfc3RyaWN0TnVtRXhwKTtcblxuICAgICAgaWYgKCF0b0hTTCkge1xuICAgICAgICBoID0gK2FbMF0gJSAzNjAgLyAzNjA7XG4gICAgICAgIHMgPSArYVsxXSAvIDEwMDtcbiAgICAgICAgbCA9ICthWzJdIC8gMTAwO1xuICAgICAgICBnID0gbCA8PSAuNSA/IGwgKiAocyArIDEpIDogbCArIHMgLSBsICogcztcbiAgICAgICAgciA9IGwgKiAyIC0gZztcbiAgICAgICAgYS5sZW5ndGggPiAzICYmIChhWzNdICo9IDEpOyAvL2Nhc3QgYXMgbnVtYmVyXG5cbiAgICAgICAgYVswXSA9IF9odWUoaCArIDEgLyAzLCByLCBnKTtcbiAgICAgICAgYVsxXSA9IF9odWUoaCwgciwgZyk7XG4gICAgICAgIGFbMl0gPSBfaHVlKGggLSAxIC8gMywgciwgZyk7XG4gICAgICB9IGVsc2UgaWYgKH52LmluZGV4T2YoXCI9XCIpKSB7XG4gICAgICAgIC8vaWYgcmVsYXRpdmUgdmFsdWVzIGFyZSBmb3VuZCwganVzdCByZXR1cm4gdGhlIHJhdyBzdHJpbmdzIHdpdGggdGhlIHJlbGF0aXZlIHByZWZpeGVzIGluIHBsYWNlLlxuICAgICAgICBhID0gdi5tYXRjaChfbnVtRXhwKTtcbiAgICAgICAgZm9yY2VBbHBoYSAmJiBhLmxlbmd0aCA8IDQgJiYgKGFbM10gPSAxKTtcbiAgICAgICAgcmV0dXJuIGE7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGEgPSB2Lm1hdGNoKF9zdHJpY3ROdW1FeHApIHx8IF9jb2xvckxvb2t1cC50cmFuc3BhcmVudDtcbiAgICB9XG5cbiAgICBhID0gYS5tYXAoTnVtYmVyKTtcbiAgfVxuXG4gIGlmICh0b0hTTCAmJiAhd2FzSFNMKSB7XG4gICAgciA9IGFbMF0gLyBfMjU1O1xuICAgIGcgPSBhWzFdIC8gXzI1NTtcbiAgICBiID0gYVsyXSAvIF8yNTU7XG4gICAgbWF4ID0gTWF0aC5tYXgociwgZywgYik7XG4gICAgbWluID0gTWF0aC5taW4ociwgZywgYik7XG4gICAgbCA9IChtYXggKyBtaW4pIC8gMjtcblxuICAgIGlmIChtYXggPT09IG1pbikge1xuICAgICAgaCA9IHMgPSAwO1xuICAgIH0gZWxzZSB7XG4gICAgICBkID0gbWF4IC0gbWluO1xuICAgICAgcyA9IGwgPiAwLjUgPyBkIC8gKDIgLSBtYXggLSBtaW4pIDogZCAvIChtYXggKyBtaW4pO1xuICAgICAgaCA9IG1heCA9PT0gciA/IChnIC0gYikgLyBkICsgKGcgPCBiID8gNiA6IDApIDogbWF4ID09PSBnID8gKGIgLSByKSAvIGQgKyAyIDogKHIgLSBnKSAvIGQgKyA0O1xuICAgICAgaCAqPSA2MDtcbiAgICB9XG5cbiAgICBhWzBdID0gfn4oaCArIC41KTtcbiAgICBhWzFdID0gfn4ocyAqIDEwMCArIC41KTtcbiAgICBhWzJdID0gfn4obCAqIDEwMCArIC41KTtcbiAgfVxuXG4gIGZvcmNlQWxwaGEgJiYgYS5sZW5ndGggPCA0ICYmIChhWzNdID0gMSk7XG4gIHJldHVybiBhO1xufSxcbiAgICBfY29sb3JPcmRlckRhdGEgPSBmdW5jdGlvbiBfY29sb3JPcmRlckRhdGEodikge1xuICAvLyBzdHJpcHMgb3V0IHRoZSBjb2xvcnMgZnJvbSB0aGUgc3RyaW5nLCBmaW5kcyBhbGwgdGhlIG51bWVyaWMgc2xvdHMgKHdpdGggdW5pdHMpIGFuZCByZXR1cm5zIGFuIGFycmF5IG9mIHRob3NlLiBUaGUgQXJyYXkgYWxzbyBoYXMgYSBcImNcIiBwcm9wZXJ0eSB3aGljaCBpcyBhbiBBcnJheSBvZiB0aGUgaW5kZXggdmFsdWVzIHdoZXJlIHRoZSBjb2xvcnMgYmVsb25nLiBUaGlzIGlzIHRvIGhlbHAgd29yayBhcm91bmQgaXNzdWVzIHdoZXJlIHRoZXJlJ3MgYSBtaXMtbWF0Y2hlZCBvcmRlciBvZiBjb2xvci9udW1lcmljIGRhdGEgbGlrZSBkcm9wLXNoYWRvdygjZjAwIDBweCAxcHggMnB4KSBhbmQgZHJvcC1zaGFkb3coMHggMXB4IDJweCAjZjAwKS4gVGhpcyBpcyBiYXNpY2FsbHkgYSBoZWxwZXIgZnVuY3Rpb24gdXNlZCBpbiBfZm9ybWF0Q29sb3JzKClcbiAgdmFyIHZhbHVlcyA9IFtdLFxuICAgICAgYyA9IFtdLFxuICAgICAgaSA9IC0xO1xuICB2LnNwbGl0KF9jb2xvckV4cCkuZm9yRWFjaChmdW5jdGlvbiAodikge1xuICAgIHZhciBhID0gdi5tYXRjaChfbnVtV2l0aFVuaXRFeHApIHx8IFtdO1xuICAgIHZhbHVlcy5wdXNoLmFwcGx5KHZhbHVlcywgYSk7XG4gICAgYy5wdXNoKGkgKz0gYS5sZW5ndGggKyAxKTtcbiAgfSk7XG4gIHZhbHVlcy5jID0gYztcbiAgcmV0dXJuIHZhbHVlcztcbn0sXG4gICAgX2Zvcm1hdENvbG9ycyA9IGZ1bmN0aW9uIF9mb3JtYXRDb2xvcnMocywgdG9IU0wsIG9yZGVyTWF0Y2hEYXRhKSB7XG4gIHZhciByZXN1bHQgPSBcIlwiLFxuICAgICAgY29sb3JzID0gKHMgKyByZXN1bHQpLm1hdGNoKF9jb2xvckV4cCksXG4gICAgICB0eXBlID0gdG9IU0wgPyBcImhzbGEoXCIgOiBcInJnYmEoXCIsXG4gICAgICBpID0gMCxcbiAgICAgIGMsXG4gICAgICBzaGVsbCxcbiAgICAgIGQsXG4gICAgICBsO1xuXG4gIGlmICghY29sb3JzKSB7XG4gICAgcmV0dXJuIHM7XG4gIH1cblxuICBjb2xvcnMgPSBjb2xvcnMubWFwKGZ1bmN0aW9uIChjb2xvcikge1xuICAgIHJldHVybiAoY29sb3IgPSBzcGxpdENvbG9yKGNvbG9yLCB0b0hTTCwgMSkpICYmIHR5cGUgKyAodG9IU0wgPyBjb2xvclswXSArIFwiLFwiICsgY29sb3JbMV0gKyBcIiUsXCIgKyBjb2xvclsyXSArIFwiJSxcIiArIGNvbG9yWzNdIDogY29sb3Iuam9pbihcIixcIikpICsgXCIpXCI7XG4gIH0pO1xuXG4gIGlmIChvcmRlck1hdGNoRGF0YSkge1xuICAgIGQgPSBfY29sb3JPcmRlckRhdGEocyk7XG4gICAgYyA9IG9yZGVyTWF0Y2hEYXRhLmM7XG5cbiAgICBpZiAoYy5qb2luKHJlc3VsdCkgIT09IGQuYy5qb2luKHJlc3VsdCkpIHtcbiAgICAgIHNoZWxsID0gcy5yZXBsYWNlKF9jb2xvckV4cCwgXCIxXCIpLnNwbGl0KF9udW1XaXRoVW5pdEV4cCk7XG4gICAgICBsID0gc2hlbGwubGVuZ3RoIC0gMTtcblxuICAgICAgZm9yICg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgcmVzdWx0ICs9IHNoZWxsW2ldICsgKH5jLmluZGV4T2YoaSkgPyBjb2xvcnMuc2hpZnQoKSB8fCB0eXBlICsgXCIwLDAsMCwwKVwiIDogKGQubGVuZ3RoID8gZCA6IGNvbG9ycy5sZW5ndGggPyBjb2xvcnMgOiBvcmRlck1hdGNoRGF0YSkuc2hpZnQoKSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKCFzaGVsbCkge1xuICAgIHNoZWxsID0gcy5zcGxpdChfY29sb3JFeHApO1xuICAgIGwgPSBzaGVsbC5sZW5ndGggLSAxO1xuXG4gICAgZm9yICg7IGkgPCBsOyBpKyspIHtcbiAgICAgIHJlc3VsdCArPSBzaGVsbFtpXSArIGNvbG9yc1tpXTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0ICsgc2hlbGxbbF07XG59LFxuICAgIF9jb2xvckV4cCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHMgPSBcIig/OlxcXFxiKD86KD86cmdifHJnYmF8aHNsfGhzbGEpXFxcXCguKz9cXFxcKSl8XFxcXEIjKD86WzAtOWEtZl17Myw0fSl7MSwyfVxcXFxiXCIsXG4gICAgICAvL3dlJ2xsIGR5bmFtaWNhbGx5IGJ1aWxkIHRoaXMgUmVndWxhciBFeHByZXNzaW9uIHRvIGNvbnNlcnZlIGZpbGUgc2l6ZS4gQWZ0ZXIgYnVpbGRpbmcgaXQsIGl0IHdpbGwgYmUgYWJsZSB0byBmaW5kIHJnYigpLCByZ2JhKCksICMgKGhleGFkZWNpbWFsKSwgYW5kIG5hbWVkIGNvbG9yIHZhbHVlcyBsaWtlIHJlZCwgYmx1ZSwgcHVycGxlLCBldGMuLFxuICBwO1xuXG4gIGZvciAocCBpbiBfY29sb3JMb29rdXApIHtcbiAgICBzICs9IFwifFwiICsgcCArIFwiXFxcXGJcIjtcbiAgfVxuXG4gIHJldHVybiBuZXcgUmVnRXhwKHMgKyBcIilcIiwgXCJnaVwiKTtcbn0oKSxcbiAgICBfaHNsRXhwID0gL2hzbFthXT9cXCgvLFxuICAgIF9jb2xvclN0cmluZ0ZpbHRlciA9IGZ1bmN0aW9uIF9jb2xvclN0cmluZ0ZpbHRlcihhKSB7XG4gIHZhciBjb21iaW5lZCA9IGEuam9pbihcIiBcIiksXG4gICAgICB0b0hTTDtcbiAgX2NvbG9yRXhwLmxhc3RJbmRleCA9IDA7XG5cbiAgaWYgKF9jb2xvckV4cC50ZXN0KGNvbWJpbmVkKSkge1xuICAgIHRvSFNMID0gX2hzbEV4cC50ZXN0KGNvbWJpbmVkKTtcbiAgICBhWzFdID0gX2Zvcm1hdENvbG9ycyhhWzFdLCB0b0hTTCk7XG4gICAgYVswXSA9IF9mb3JtYXRDb2xvcnMoYVswXSwgdG9IU0wsIF9jb2xvck9yZGVyRGF0YShhWzFdKSk7IC8vIG1ha2Ugc3VyZSB0aGUgb3JkZXIgb2YgbnVtYmVycy9jb2xvcnMgbWF0Y2ggd2l0aCB0aGUgRU5EIHZhbHVlLlxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn0sXG5cbi8qXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogVElDS0VSXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5fdGlja2VyQWN0aXZlLFxuICAgIF90aWNrZXIgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBfZ2V0VGltZSA9IERhdGUubm93LFxuICAgICAgX2xhZ1RocmVzaG9sZCA9IDUwMCxcbiAgICAgIF9hZGp1c3RlZExhZyA9IDMzLFxuICAgICAgX3N0YXJ0VGltZSA9IF9nZXRUaW1lKCksXG4gICAgICBfbGFzdFVwZGF0ZSA9IF9zdGFydFRpbWUsXG4gICAgICBfZ2FwID0gMTAwMCAvIDI0MCxcbiAgICAgIF9uZXh0VGltZSA9IF9nYXAsXG4gICAgICBfbGlzdGVuZXJzID0gW10sXG4gICAgICBfaWQsXG4gICAgICBfcmVxLFxuICAgICAgX3JhZixcbiAgICAgIF9zZWxmLFxuICAgICAgX2RlbHRhLFxuICAgICAgX2ksXG4gICAgICBfdGljayA9IGZ1bmN0aW9uIF90aWNrKHYpIHtcbiAgICB2YXIgZWxhcHNlZCA9IF9nZXRUaW1lKCkgLSBfbGFzdFVwZGF0ZSxcbiAgICAgICAgbWFudWFsID0gdiA9PT0gdHJ1ZSxcbiAgICAgICAgb3ZlcmxhcCxcbiAgICAgICAgZGlzcGF0Y2gsXG4gICAgICAgIHRpbWUsXG4gICAgICAgIGZyYW1lO1xuXG4gICAgZWxhcHNlZCA+IF9sYWdUaHJlc2hvbGQgJiYgKF9zdGFydFRpbWUgKz0gZWxhcHNlZCAtIF9hZGp1c3RlZExhZyk7XG4gICAgX2xhc3RVcGRhdGUgKz0gZWxhcHNlZDtcbiAgICB0aW1lID0gX2xhc3RVcGRhdGUgLSBfc3RhcnRUaW1lO1xuICAgIG92ZXJsYXAgPSB0aW1lIC0gX25leHRUaW1lO1xuXG4gICAgaWYgKG92ZXJsYXAgPiAwIHx8IG1hbnVhbCkge1xuICAgICAgZnJhbWUgPSArK19zZWxmLmZyYW1lO1xuICAgICAgX2RlbHRhID0gdGltZSAtIF9zZWxmLnRpbWUgKiAxMDAwO1xuICAgICAgX3NlbGYudGltZSA9IHRpbWUgPSB0aW1lIC8gMTAwMDtcbiAgICAgIF9uZXh0VGltZSArPSBvdmVybGFwICsgKG92ZXJsYXAgPj0gX2dhcCA/IDQgOiBfZ2FwIC0gb3ZlcmxhcCk7XG4gICAgICBkaXNwYXRjaCA9IDE7XG4gICAgfVxuXG4gICAgbWFudWFsIHx8IChfaWQgPSBfcmVxKF90aWNrKSk7IC8vbWFrZSBzdXJlIHRoZSByZXF1ZXN0IGlzIG1hZGUgYmVmb3JlIHdlIGRpc3BhdGNoIHRoZSBcInRpY2tcIiBldmVudCBzbyB0aGF0IHRpbWluZyBpcyBtYWludGFpbmVkLiBPdGhlcndpc2UsIGlmIHByb2Nlc3NpbmcgdGhlIFwidGlja1wiIHJlcXVpcmVzIGEgYnVuY2ggb2YgdGltZSAobGlrZSAxNW1zKSBhbmQgd2UncmUgdXNpbmcgYSBzZXRUaW1lb3V0KCkgdGhhdCdzIGJhc2VkIG9uIDE2LjdtcywgaXQnZCB0ZWNobmljYWxseSB0YWtlIDMxLjdtcyBiZXR3ZWVuIGZyYW1lcyBvdGhlcndpc2UuXG5cbiAgICBpZiAoZGlzcGF0Y2gpIHtcbiAgICAgIGZvciAoX2kgPSAwOyBfaSA8IF9saXN0ZW5lcnMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIC8vIHVzZSBfaSBhbmQgY2hlY2sgX2xpc3RlbmVycy5sZW5ndGggaW5zdGVhZCBvZiBhIHZhcmlhYmxlIGJlY2F1c2UgYSBsaXN0ZW5lciBjb3VsZCBnZXQgcmVtb3ZlZCBkdXJpbmcgdGhlIGxvb3AsIGFuZCBpZiB0aGF0IGhhcHBlbnMgdG8gYW4gZWxlbWVudCBsZXNzIHRoYW4gdGhlIGN1cnJlbnQgaW5kZXgsIGl0J2QgdGhyb3cgdGhpbmdzIG9mZiBpbiB0aGUgbG9vcC5cbiAgICAgICAgX2xpc3RlbmVyc1tfaV0odGltZSwgX2RlbHRhLCBmcmFtZSwgdik7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIF9zZWxmID0ge1xuICAgIHRpbWU6IDAsXG4gICAgZnJhbWU6IDAsXG4gICAgdGljazogZnVuY3Rpb24gdGljaygpIHtcbiAgICAgIF90aWNrKHRydWUpO1xuICAgIH0sXG4gICAgZGVsdGFSYXRpbzogZnVuY3Rpb24gZGVsdGFSYXRpbyhmcHMpIHtcbiAgICAgIHJldHVybiBfZGVsdGEgLyAoMTAwMCAvIChmcHMgfHwgNjApKTtcbiAgICB9LFxuICAgIHdha2U6IGZ1bmN0aW9uIHdha2UoKSB7XG4gICAgICBpZiAoX2NvcmVSZWFkeSkge1xuICAgICAgICBpZiAoIV9jb3JlSW5pdHRlZCAmJiBfd2luZG93RXhpc3RzKCkpIHtcbiAgICAgICAgICBfd2luID0gX2NvcmVJbml0dGVkID0gd2luZG93O1xuICAgICAgICAgIF9kb2MgPSBfd2luLmRvY3VtZW50IHx8IHt9O1xuICAgICAgICAgIF9nbG9iYWxzLmdzYXAgPSBnc2FwO1xuICAgICAgICAgIChfd2luLmdzYXBWZXJzaW9ucyB8fCAoX3dpbi5nc2FwVmVyc2lvbnMgPSBbXSkpLnB1c2goZ3NhcC52ZXJzaW9uKTtcblxuICAgICAgICAgIF9pbnN0YWxsKF9pbnN0YWxsU2NvcGUgfHwgX3dpbi5HcmVlblNvY2tHbG9iYWxzIHx8ICFfd2luLmdzYXAgJiYgX3dpbiB8fCB7fSk7XG5cbiAgICAgICAgICBfcmFmID0gX3dpbi5yZXF1ZXN0QW5pbWF0aW9uRnJhbWU7XG4gICAgICAgIH1cblxuICAgICAgICBfaWQgJiYgX3NlbGYuc2xlZXAoKTtcblxuICAgICAgICBfcmVxID0gX3JhZiB8fCBmdW5jdGlvbiAoZikge1xuICAgICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGYsIF9uZXh0VGltZSAtIF9zZWxmLnRpbWUgKiAxMDAwICsgMSB8IDApO1xuICAgICAgICB9O1xuXG4gICAgICAgIF90aWNrZXJBY3RpdmUgPSAxO1xuXG4gICAgICAgIF90aWNrKDIpO1xuICAgICAgfVxuICAgIH0sXG4gICAgc2xlZXA6IGZ1bmN0aW9uIHNsZWVwKCkge1xuICAgICAgKF9yYWYgPyBfd2luLmNhbmNlbEFuaW1hdGlvbkZyYW1lIDogY2xlYXJUaW1lb3V0KShfaWQpO1xuICAgICAgX3RpY2tlckFjdGl2ZSA9IDA7XG4gICAgICBfcmVxID0gX2VtcHR5RnVuYztcbiAgICB9LFxuICAgIGxhZ1Ntb290aGluZzogZnVuY3Rpb24gbGFnU21vb3RoaW5nKHRocmVzaG9sZCwgYWRqdXN0ZWRMYWcpIHtcbiAgICAgIF9sYWdUaHJlc2hvbGQgPSB0aHJlc2hvbGQgfHwgMSAvIF90aW55TnVtOyAvL3plcm8gc2hvdWxkIGJlIGludGVycHJldGVkIGFzIGJhc2ljYWxseSB1bmxpbWl0ZWRcblxuICAgICAgX2FkanVzdGVkTGFnID0gTWF0aC5taW4oYWRqdXN0ZWRMYWcsIF9sYWdUaHJlc2hvbGQsIDApO1xuICAgIH0sXG4gICAgZnBzOiBmdW5jdGlvbiBmcHMoX2Zwcykge1xuICAgICAgX2dhcCA9IDEwMDAgLyAoX2ZwcyB8fCAyNDApO1xuICAgICAgX25leHRUaW1lID0gX3NlbGYudGltZSAqIDEwMDAgKyBfZ2FwO1xuICAgIH0sXG4gICAgYWRkOiBmdW5jdGlvbiBhZGQoY2FsbGJhY2ssIG9uY2UsIHByaW9yaXRpemUpIHtcbiAgICAgIHZhciBmdW5jID0gb25jZSA/IGZ1bmN0aW9uICh0LCBkLCBmLCB2KSB7XG4gICAgICAgIGNhbGxiYWNrKHQsIGQsIGYsIHYpO1xuXG4gICAgICAgIF9zZWxmLnJlbW92ZShmdW5jKTtcbiAgICAgIH0gOiBjYWxsYmFjaztcblxuICAgICAgX3NlbGYucmVtb3ZlKGNhbGxiYWNrKTtcblxuICAgICAgX2xpc3RlbmVyc1twcmlvcml0aXplID8gXCJ1bnNoaWZ0XCIgOiBcInB1c2hcIl0oZnVuYyk7XG5cbiAgICAgIF93YWtlKCk7XG5cbiAgICAgIHJldHVybiBmdW5jO1xuICAgIH0sXG4gICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoY2FsbGJhY2ssIGkpIHtcbiAgICAgIH4oaSA9IF9saXN0ZW5lcnMuaW5kZXhPZihjYWxsYmFjaykpICYmIF9saXN0ZW5lcnMuc3BsaWNlKGksIDEpICYmIF9pID49IGkgJiYgX2ktLTtcbiAgICB9LFxuICAgIF9saXN0ZW5lcnM6IF9saXN0ZW5lcnNcbiAgfTtcbiAgcmV0dXJuIF9zZWxmO1xufSgpLFxuICAgIF93YWtlID0gZnVuY3Rpb24gX3dha2UoKSB7XG4gIHJldHVybiAhX3RpY2tlckFjdGl2ZSAmJiBfdGlja2VyLndha2UoKTtcbn0sXG4gICAgLy9hbHNvIGVuc3VyZXMgdGhlIGNvcmUgY2xhc3NlcyBhcmUgaW5pdGlhbGl6ZWQuXG5cbi8qXG4qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiogRUFTSU5HXG4qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiovXG5fZWFzZU1hcCA9IHt9LFxuICAgIF9jdXN0b21FYXNlRXhwID0gL15bXFxkLlxcLU1dW1xcZC5cXC0sXFxzXS8sXG4gICAgX3F1b3Rlc0V4cCA9IC9bXCInXS9nLFxuICAgIF9wYXJzZU9iamVjdEluU3RyaW5nID0gZnVuY3Rpb24gX3BhcnNlT2JqZWN0SW5TdHJpbmcodmFsdWUpIHtcbiAgLy90YWtlcyBhIHN0cmluZyBsaWtlIFwie3dpZ2dsZXM6MTAsIHR5cGU6YW50aWNpcGF0ZX0pXCIgYW5kIHR1cm5zIGl0IGludG8gYSByZWFsIG9iamVjdC4gTm90aWNlIGl0IGVuZHMgaW4gXCIpXCIgYW5kIGluY2x1ZGVzIHRoZSB7fSB3cmFwcGVycy4gVGhpcyBpcyBiZWNhdXNlIHdlIG9ubHkgdXNlIHRoaXMgZnVuY3Rpb24gZm9yIHBhcnNpbmcgZWFzZSBjb25maWdzIGFuZCBwcmlvcml0aXplZCBvcHRpbWl6YXRpb24gcmF0aGVyIHRoYW4gcmV1c2FiaWxpdHkuXG4gIHZhciBvYmogPSB7fSxcbiAgICAgIHNwbGl0ID0gdmFsdWUuc3Vic3RyKDEsIHZhbHVlLmxlbmd0aCAtIDMpLnNwbGl0KFwiOlwiKSxcbiAgICAgIGtleSA9IHNwbGl0WzBdLFxuICAgICAgaSA9IDEsXG4gICAgICBsID0gc3BsaXQubGVuZ3RoLFxuICAgICAgaW5kZXgsXG4gICAgICB2YWwsXG4gICAgICBwYXJzZWRWYWw7XG5cbiAgZm9yICg7IGkgPCBsOyBpKyspIHtcbiAgICB2YWwgPSBzcGxpdFtpXTtcbiAgICBpbmRleCA9IGkgIT09IGwgLSAxID8gdmFsLmxhc3RJbmRleE9mKFwiLFwiKSA6IHZhbC5sZW5ndGg7XG4gICAgcGFyc2VkVmFsID0gdmFsLnN1YnN0cigwLCBpbmRleCk7XG4gICAgb2JqW2tleV0gPSBpc05hTihwYXJzZWRWYWwpID8gcGFyc2VkVmFsLnJlcGxhY2UoX3F1b3Rlc0V4cCwgXCJcIikudHJpbSgpIDogK3BhcnNlZFZhbDtcbiAgICBrZXkgPSB2YWwuc3Vic3RyKGluZGV4ICsgMSkudHJpbSgpO1xuICB9XG5cbiAgcmV0dXJuIG9iajtcbn0sXG4gICAgX3ZhbHVlSW5QYXJlbnRoZXNlcyA9IGZ1bmN0aW9uIF92YWx1ZUluUGFyZW50aGVzZXModmFsdWUpIHtcbiAgdmFyIG9wZW4gPSB2YWx1ZS5pbmRleE9mKFwiKFwiKSArIDEsXG4gICAgICBjbG9zZSA9IHZhbHVlLmluZGV4T2YoXCIpXCIpLFxuICAgICAgbmVzdGVkID0gdmFsdWUuaW5kZXhPZihcIihcIiwgb3Blbik7XG4gIHJldHVybiB2YWx1ZS5zdWJzdHJpbmcob3Blbiwgfm5lc3RlZCAmJiBuZXN0ZWQgPCBjbG9zZSA/IHZhbHVlLmluZGV4T2YoXCIpXCIsIGNsb3NlICsgMSkgOiBjbG9zZSk7XG59LFxuICAgIF9jb25maWdFYXNlRnJvbVN0cmluZyA9IGZ1bmN0aW9uIF9jb25maWdFYXNlRnJvbVN0cmluZyhuYW1lKSB7XG4gIC8vbmFtZSBjYW4gYmUgYSBzdHJpbmcgbGlrZSBcImVsYXN0aWMub3V0KDEsMC41KVwiLCBhbmQgcGFzcyBpbiBfZWFzZU1hcCBhcyBvYmogYW5kIGl0J2xsIHBhcnNlIGl0IG91dCBhbmQgY2FsbCB0aGUgYWN0dWFsIGZ1bmN0aW9uIGxpa2UgX2Vhc2VNYXAuRWxhc3RpYy5lYXNlT3V0LmNvbmZpZygxLDAuNSkuIEl0IHdpbGwgYWxzbyBwYXJzZSBjdXN0b20gZWFzZSBzdHJpbmdzIGFzIGxvbmcgYXMgQ3VzdG9tRWFzZSBpcyBsb2FkZWQgYW5kIHJlZ2lzdGVyZWQgKGludGVybmFsbHkgYXMgX2Vhc2VNYXAuX0NFKS5cbiAgdmFyIHNwbGl0ID0gKG5hbWUgKyBcIlwiKS5zcGxpdChcIihcIiksXG4gICAgICBlYXNlID0gX2Vhc2VNYXBbc3BsaXRbMF1dO1xuICByZXR1cm4gZWFzZSAmJiBzcGxpdC5sZW5ndGggPiAxICYmIGVhc2UuY29uZmlnID8gZWFzZS5jb25maWcuYXBwbHkobnVsbCwgfm5hbWUuaW5kZXhPZihcIntcIikgPyBbX3BhcnNlT2JqZWN0SW5TdHJpbmcoc3BsaXRbMV0pXSA6IF92YWx1ZUluUGFyZW50aGVzZXMobmFtZSkuc3BsaXQoXCIsXCIpLm1hcChfbnVtZXJpY0lmUG9zc2libGUpKSA6IF9lYXNlTWFwLl9DRSAmJiBfY3VzdG9tRWFzZUV4cC50ZXN0KG5hbWUpID8gX2Vhc2VNYXAuX0NFKFwiXCIsIG5hbWUpIDogZWFzZTtcbn0sXG4gICAgX2ludmVydEVhc2UgPSBmdW5jdGlvbiBfaW52ZXJ0RWFzZShlYXNlKSB7XG4gIHJldHVybiBmdW5jdGlvbiAocCkge1xuICAgIHJldHVybiAxIC0gZWFzZSgxIC0gcCk7XG4gIH07XG59LFxuICAgIC8vIGFsbG93IHlveW9FYXNlIHRvIGJlIHNldCBpbiBjaGlsZHJlbiBhbmQgaGF2ZSB0aG9zZSBhZmZlY3RlZCB3aGVuIHRoZSBwYXJlbnQvYW5jZXN0b3IgdGltZWxpbmUgeW95b3MuXG5fcHJvcGFnYXRlWW95b0Vhc2UgPSBmdW5jdGlvbiBfcHJvcGFnYXRlWW95b0Vhc2UodGltZWxpbmUsIGlzWW95bykge1xuICB2YXIgY2hpbGQgPSB0aW1lbGluZS5fZmlyc3QsXG4gICAgICBlYXNlO1xuXG4gIHdoaWxlIChjaGlsZCkge1xuICAgIGlmIChjaGlsZCBpbnN0YW5jZW9mIFRpbWVsaW5lKSB7XG4gICAgICBfcHJvcGFnYXRlWW95b0Vhc2UoY2hpbGQsIGlzWW95byk7XG4gICAgfSBlbHNlIGlmIChjaGlsZC52YXJzLnlveW9FYXNlICYmICghY2hpbGQuX3lveW8gfHwgIWNoaWxkLl9yZXBlYXQpICYmIGNoaWxkLl95b3lvICE9PSBpc1lveW8pIHtcbiAgICAgIGlmIChjaGlsZC50aW1lbGluZSkge1xuICAgICAgICBfcHJvcGFnYXRlWW95b0Vhc2UoY2hpbGQudGltZWxpbmUsIGlzWW95byk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlYXNlID0gY2hpbGQuX2Vhc2U7XG4gICAgICAgIGNoaWxkLl9lYXNlID0gY2hpbGQuX3lFYXNlO1xuICAgICAgICBjaGlsZC5feUVhc2UgPSBlYXNlO1xuICAgICAgICBjaGlsZC5feW95byA9IGlzWW95bztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjaGlsZCA9IGNoaWxkLl9uZXh0O1xuICB9XG59LFxuICAgIF9wYXJzZUVhc2UgPSBmdW5jdGlvbiBfcGFyc2VFYXNlKGVhc2UsIGRlZmF1bHRFYXNlKSB7XG4gIHJldHVybiAhZWFzZSA/IGRlZmF1bHRFYXNlIDogKF9pc0Z1bmN0aW9uKGVhc2UpID8gZWFzZSA6IF9lYXNlTWFwW2Vhc2VdIHx8IF9jb25maWdFYXNlRnJvbVN0cmluZyhlYXNlKSkgfHwgZGVmYXVsdEVhc2U7XG59LFxuICAgIF9pbnNlcnRFYXNlID0gZnVuY3Rpb24gX2luc2VydEVhc2UobmFtZXMsIGVhc2VJbiwgZWFzZU91dCwgZWFzZUluT3V0KSB7XG4gIGlmIChlYXNlT3V0ID09PSB2b2lkIDApIHtcbiAgICBlYXNlT3V0ID0gZnVuY3Rpb24gZWFzZU91dChwKSB7XG4gICAgICByZXR1cm4gMSAtIGVhc2VJbigxIC0gcCk7XG4gICAgfTtcbiAgfVxuXG4gIGlmIChlYXNlSW5PdXQgPT09IHZvaWQgMCkge1xuICAgIGVhc2VJbk91dCA9IGZ1bmN0aW9uIGVhc2VJbk91dChwKSB7XG4gICAgICByZXR1cm4gcCA8IC41ID8gZWFzZUluKHAgKiAyKSAvIDIgOiAxIC0gZWFzZUluKCgxIC0gcCkgKiAyKSAvIDI7XG4gICAgfTtcbiAgfVxuXG4gIHZhciBlYXNlID0ge1xuICAgIGVhc2VJbjogZWFzZUluLFxuICAgIGVhc2VPdXQ6IGVhc2VPdXQsXG4gICAgZWFzZUluT3V0OiBlYXNlSW5PdXRcbiAgfSxcbiAgICAgIGxvd2VyY2FzZU5hbWU7XG5cbiAgX2ZvckVhY2hOYW1lKG5hbWVzLCBmdW5jdGlvbiAobmFtZSkge1xuICAgIF9lYXNlTWFwW25hbWVdID0gX2dsb2JhbHNbbmFtZV0gPSBlYXNlO1xuICAgIF9lYXNlTWFwW2xvd2VyY2FzZU5hbWUgPSBuYW1lLnRvTG93ZXJDYXNlKCldID0gZWFzZU91dDtcblxuICAgIGZvciAodmFyIHAgaW4gZWFzZSkge1xuICAgICAgX2Vhc2VNYXBbbG93ZXJjYXNlTmFtZSArIChwID09PSBcImVhc2VJblwiID8gXCIuaW5cIiA6IHAgPT09IFwiZWFzZU91dFwiID8gXCIub3V0XCIgOiBcIi5pbk91dFwiKV0gPSBfZWFzZU1hcFtuYW1lICsgXCIuXCIgKyBwXSA9IGVhc2VbcF07XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gZWFzZTtcbn0sXG4gICAgX2Vhc2VJbk91dEZyb21PdXQgPSBmdW5jdGlvbiBfZWFzZUluT3V0RnJvbU91dChlYXNlT3V0KSB7XG4gIHJldHVybiBmdW5jdGlvbiAocCkge1xuICAgIHJldHVybiBwIDwgLjUgPyAoMSAtIGVhc2VPdXQoMSAtIHAgKiAyKSkgLyAyIDogLjUgKyBlYXNlT3V0KChwIC0gLjUpICogMikgLyAyO1xuICB9O1xufSxcbiAgICBfY29uZmlnRWxhc3RpYyA9IGZ1bmN0aW9uIF9jb25maWdFbGFzdGljKHR5cGUsIGFtcGxpdHVkZSwgcGVyaW9kKSB7XG4gIHZhciBwMSA9IGFtcGxpdHVkZSA+PSAxID8gYW1wbGl0dWRlIDogMSxcbiAgICAgIC8vbm90ZTogaWYgYW1wbGl0dWRlIGlzIDwgMSwgd2Ugc2ltcGx5IGFkanVzdCB0aGUgcGVyaW9kIGZvciBhIG1vcmUgbmF0dXJhbCBmZWVsLiBPdGhlcndpc2UgdGhlIG1hdGggZG9lc24ndCB3b3JrIHJpZ2h0IGFuZCB0aGUgY3VydmUgc3RhcnRzIGF0IDEuXG4gIHAyID0gKHBlcmlvZCB8fCAodHlwZSA/IC4zIDogLjQ1KSkgLyAoYW1wbGl0dWRlIDwgMSA/IGFtcGxpdHVkZSA6IDEpLFxuICAgICAgcDMgPSBwMiAvIF8yUEkgKiAoTWF0aC5hc2luKDEgLyBwMSkgfHwgMCksXG4gICAgICBlYXNlT3V0ID0gZnVuY3Rpb24gZWFzZU91dChwKSB7XG4gICAgcmV0dXJuIHAgPT09IDEgPyAxIDogcDEgKiBNYXRoLnBvdygyLCAtMTAgKiBwKSAqIF9zaW4oKHAgLSBwMykgKiBwMikgKyAxO1xuICB9LFxuICAgICAgZWFzZSA9IHR5cGUgPT09IFwib3V0XCIgPyBlYXNlT3V0IDogdHlwZSA9PT0gXCJpblwiID8gZnVuY3Rpb24gKHApIHtcbiAgICByZXR1cm4gMSAtIGVhc2VPdXQoMSAtIHApO1xuICB9IDogX2Vhc2VJbk91dEZyb21PdXQoZWFzZU91dCk7XG5cbiAgcDIgPSBfMlBJIC8gcDI7IC8vcHJlY2FsY3VsYXRlIHRvIG9wdGltaXplXG5cbiAgZWFzZS5jb25maWcgPSBmdW5jdGlvbiAoYW1wbGl0dWRlLCBwZXJpb2QpIHtcbiAgICByZXR1cm4gX2NvbmZpZ0VsYXN0aWModHlwZSwgYW1wbGl0dWRlLCBwZXJpb2QpO1xuICB9O1xuXG4gIHJldHVybiBlYXNlO1xufSxcbiAgICBfY29uZmlnQmFjayA9IGZ1bmN0aW9uIF9jb25maWdCYWNrKHR5cGUsIG92ZXJzaG9vdCkge1xuICBpZiAob3ZlcnNob290ID09PSB2b2lkIDApIHtcbiAgICBvdmVyc2hvb3QgPSAxLjcwMTU4O1xuICB9XG5cbiAgdmFyIGVhc2VPdXQgPSBmdW5jdGlvbiBlYXNlT3V0KHApIHtcbiAgICByZXR1cm4gcCA/IC0tcCAqIHAgKiAoKG92ZXJzaG9vdCArIDEpICogcCArIG92ZXJzaG9vdCkgKyAxIDogMDtcbiAgfSxcbiAgICAgIGVhc2UgPSB0eXBlID09PSBcIm91dFwiID8gZWFzZU91dCA6IHR5cGUgPT09IFwiaW5cIiA/IGZ1bmN0aW9uIChwKSB7XG4gICAgcmV0dXJuIDEgLSBlYXNlT3V0KDEgLSBwKTtcbiAgfSA6IF9lYXNlSW5PdXRGcm9tT3V0KGVhc2VPdXQpO1xuXG4gIGVhc2UuY29uZmlnID0gZnVuY3Rpb24gKG92ZXJzaG9vdCkge1xuICAgIHJldHVybiBfY29uZmlnQmFjayh0eXBlLCBvdmVyc2hvb3QpO1xuICB9O1xuXG4gIHJldHVybiBlYXNlO1xufTsgLy8gYSBjaGVhcGVyIChrYiBhbmQgY3B1KSBidXQgbW9yZSBtaWxkIHdheSB0byBnZXQgYSBwYXJhbWV0ZXJpemVkIHdlaWdodGVkIGVhc2UgYnkgZmVlZGluZyBpbiBhIHZhbHVlIGJldHdlZW4gLTEgKGVhc2VJbikgYW5kIDEgKGVhc2VPdXQpIHdoZXJlIDAgaXMgbGluZWFyLlxuLy8gX3dlaWdodGVkRWFzZSA9IHJhdGlvID0+IHtcbi8vIFx0bGV0IHkgPSAwLjUgKyByYXRpbyAvIDI7XG4vLyBcdHJldHVybiBwID0+ICgyICogKDEgLSBwKSAqIHAgKiB5ICsgcCAqIHApO1xuLy8gfSxcbi8vIGEgc3Ryb25nZXIgKGJ1dCBtb3JlIGV4cGVuc2l2ZSBrYi9jcHUpIHBhcmFtZXRlcml6ZWQgd2VpZ2h0ZWQgZWFzZSB0aGF0IGxldHMgeW91IGZlZWQgaW4gYSB2YWx1ZSBiZXR3ZWVuIC0xIChlYXNlSW4pIGFuZCAxIChlYXNlT3V0KSB3aGVyZSAwIGlzIGxpbmVhci5cbi8vIF93ZWlnaHRlZEVhc2VTdHJvbmcgPSByYXRpbyA9PiB7XG4vLyBcdHJhdGlvID0gLjUgKyByYXRpbyAvIDI7XG4vLyBcdGxldCBvID0gMSAvIDMgKiAocmF0aW8gPCAuNSA/IHJhdGlvIDogMSAtIHJhdGlvKSxcbi8vIFx0XHRiID0gcmF0aW8gLSBvLFxuLy8gXHRcdGMgPSByYXRpbyArIG87XG4vLyBcdHJldHVybiBwID0+IHAgPT09IDEgPyBwIDogMyAqIGIgKiAoMSAtIHApICogKDEgLSBwKSAqIHAgKyAzICogYyAqICgxIC0gcCkgKiBwICogcCArIHAgKiBwICogcDtcbi8vIH07XG5cblxuX2ZvckVhY2hOYW1lKFwiTGluZWFyLFF1YWQsQ3ViaWMsUXVhcnQsUXVpbnQsU3Ryb25nXCIsIGZ1bmN0aW9uIChuYW1lLCBpKSB7XG4gIHZhciBwb3dlciA9IGkgPCA1ID8gaSArIDEgOiBpO1xuXG4gIF9pbnNlcnRFYXNlKG5hbWUgKyBcIixQb3dlclwiICsgKHBvd2VyIC0gMSksIGkgPyBmdW5jdGlvbiAocCkge1xuICAgIHJldHVybiBNYXRoLnBvdyhwLCBwb3dlcik7XG4gIH0gOiBmdW5jdGlvbiAocCkge1xuICAgIHJldHVybiBwO1xuICB9LCBmdW5jdGlvbiAocCkge1xuICAgIHJldHVybiAxIC0gTWF0aC5wb3coMSAtIHAsIHBvd2VyKTtcbiAgfSwgZnVuY3Rpb24gKHApIHtcbiAgICByZXR1cm4gcCA8IC41ID8gTWF0aC5wb3cocCAqIDIsIHBvd2VyKSAvIDIgOiAxIC0gTWF0aC5wb3coKDEgLSBwKSAqIDIsIHBvd2VyKSAvIDI7XG4gIH0pO1xufSk7XG5cbl9lYXNlTWFwLkxpbmVhci5lYXNlTm9uZSA9IF9lYXNlTWFwLm5vbmUgPSBfZWFzZU1hcC5MaW5lYXIuZWFzZUluO1xuXG5faW5zZXJ0RWFzZShcIkVsYXN0aWNcIiwgX2NvbmZpZ0VsYXN0aWMoXCJpblwiKSwgX2NvbmZpZ0VsYXN0aWMoXCJvdXRcIiksIF9jb25maWdFbGFzdGljKCkpO1xuXG4oZnVuY3Rpb24gKG4sIGMpIHtcbiAgdmFyIG4xID0gMSAvIGMsXG4gICAgICBuMiA9IDIgKiBuMSxcbiAgICAgIG4zID0gMi41ICogbjEsXG4gICAgICBlYXNlT3V0ID0gZnVuY3Rpb24gZWFzZU91dChwKSB7XG4gICAgcmV0dXJuIHAgPCBuMSA/IG4gKiBwICogcCA6IHAgPCBuMiA/IG4gKiBNYXRoLnBvdyhwIC0gMS41IC8gYywgMikgKyAuNzUgOiBwIDwgbjMgPyBuICogKHAgLT0gMi4yNSAvIGMpICogcCArIC45Mzc1IDogbiAqIE1hdGgucG93KHAgLSAyLjYyNSAvIGMsIDIpICsgLjk4NDM3NTtcbiAgfTtcblxuICBfaW5zZXJ0RWFzZShcIkJvdW5jZVwiLCBmdW5jdGlvbiAocCkge1xuICAgIHJldHVybiAxIC0gZWFzZU91dCgxIC0gcCk7XG4gIH0sIGVhc2VPdXQpO1xufSkoNy41NjI1LCAyLjc1KTtcblxuX2luc2VydEVhc2UoXCJFeHBvXCIsIGZ1bmN0aW9uIChwKSB7XG4gIHJldHVybiBwID8gTWF0aC5wb3coMiwgMTAgKiAocCAtIDEpKSA6IDA7XG59KTtcblxuX2luc2VydEVhc2UoXCJDaXJjXCIsIGZ1bmN0aW9uIChwKSB7XG4gIHJldHVybiAtKF9zcXJ0KDEgLSBwICogcCkgLSAxKTtcbn0pO1xuXG5faW5zZXJ0RWFzZShcIlNpbmVcIiwgZnVuY3Rpb24gKHApIHtcbiAgcmV0dXJuIHAgPT09IDEgPyAxIDogLV9jb3MocCAqIF9IQUxGX1BJKSArIDE7XG59KTtcblxuX2luc2VydEVhc2UoXCJCYWNrXCIsIF9jb25maWdCYWNrKFwiaW5cIiksIF9jb25maWdCYWNrKFwib3V0XCIpLCBfY29uZmlnQmFjaygpKTtcblxuX2Vhc2VNYXAuU3RlcHBlZEVhc2UgPSBfZWFzZU1hcC5zdGVwcyA9IF9nbG9iYWxzLlN0ZXBwZWRFYXNlID0ge1xuICBjb25maWc6IGZ1bmN0aW9uIGNvbmZpZyhzdGVwcywgaW1tZWRpYXRlU3RhcnQpIHtcbiAgICBpZiAoc3RlcHMgPT09IHZvaWQgMCkge1xuICAgICAgc3RlcHMgPSAxO1xuICAgIH1cblxuICAgIHZhciBwMSA9IDEgLyBzdGVwcyxcbiAgICAgICAgcDIgPSBzdGVwcyArIChpbW1lZGlhdGVTdGFydCA/IDAgOiAxKSxcbiAgICAgICAgcDMgPSBpbW1lZGlhdGVTdGFydCA/IDEgOiAwLFxuICAgICAgICBtYXggPSAxIC0gX3RpbnlOdW07XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChwKSB7XG4gICAgICByZXR1cm4gKChwMiAqIF9jbGFtcCgwLCBtYXgsIHApIHwgMCkgKyBwMykgKiBwMTtcbiAgICB9O1xuICB9XG59O1xuX2RlZmF1bHRzLmVhc2UgPSBfZWFzZU1hcFtcInF1YWQub3V0XCJdO1xuXG5fZm9yRWFjaE5hbWUoXCJvbkNvbXBsZXRlLG9uVXBkYXRlLG9uU3RhcnQsb25SZXBlYXQsb25SZXZlcnNlQ29tcGxldGUsb25JbnRlcnJ1cHRcIiwgZnVuY3Rpb24gKG5hbWUpIHtcbiAgcmV0dXJuIF9jYWxsYmFja05hbWVzICs9IG5hbWUgKyBcIixcIiArIG5hbWUgKyBcIlBhcmFtcyxcIjtcbn0pO1xuLypcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBDQUNIRVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5cbmV4cG9ydCB2YXIgR1NDYWNoZSA9IGZ1bmN0aW9uIEdTQ2FjaGUodGFyZ2V0LCBoYXJuZXNzKSB7XG4gIHRoaXMuaWQgPSBfZ3NJRCsrO1xuICB0YXJnZXQuX2dzYXAgPSB0aGlzO1xuICB0aGlzLnRhcmdldCA9IHRhcmdldDtcbiAgdGhpcy5oYXJuZXNzID0gaGFybmVzcztcbiAgdGhpcy5nZXQgPSBoYXJuZXNzID8gaGFybmVzcy5nZXQgOiBfZ2V0UHJvcGVydHk7XG4gIHRoaXMuc2V0ID0gaGFybmVzcyA/IGhhcm5lc3MuZ2V0U2V0dGVyIDogX2dldFNldHRlcjtcbn07XG4vKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEFOSU1BVElPTlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5leHBvcnQgdmFyIEFuaW1hdGlvbiA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEFuaW1hdGlvbih2YXJzKSB7XG4gICAgdGhpcy52YXJzID0gdmFycztcbiAgICB0aGlzLl9kZWxheSA9ICt2YXJzLmRlbGF5IHx8IDA7XG5cbiAgICBpZiAodGhpcy5fcmVwZWF0ID0gdmFycy5yZXBlYXQgPT09IEluZmluaXR5ID8gLTIgOiB2YXJzLnJlcGVhdCB8fCAwKSB7XG4gICAgICAvLyBUT0RPOiByZXBlYXQ6IEluZmluaXR5IG9uIGEgdGltZWxpbmUncyBjaGlsZHJlbiBtdXN0IGZsYWcgdGhhdCB0aW1lbGluZSBpbnRlcm5hbGx5IGFuZCBhZmZlY3QgaXRzIHRvdGFsRHVyYXRpb24sIG90aGVyd2lzZSBpdCdsbCBzdG9wIGluIHRoZSBuZWdhdGl2ZSBkaXJlY3Rpb24gd2hlbiByZWFjaGluZyB0aGUgc3RhcnQuXG4gICAgICB0aGlzLl9yRGVsYXkgPSB2YXJzLnJlcGVhdERlbGF5IHx8IDA7XG4gICAgICB0aGlzLl95b3lvID0gISF2YXJzLnlveW8gfHwgISF2YXJzLnlveW9FYXNlO1xuICAgIH1cblxuICAgIHRoaXMuX3RzID0gMTtcblxuICAgIF9zZXREdXJhdGlvbih0aGlzLCArdmFycy5kdXJhdGlvbiwgMSwgMSk7XG5cbiAgICB0aGlzLmRhdGEgPSB2YXJzLmRhdGE7XG5cbiAgICBpZiAoX2NvbnRleHQpIHtcbiAgICAgIHRoaXMuX2N0eCA9IF9jb250ZXh0O1xuXG4gICAgICBfY29udGV4dC5kYXRhLnB1c2godGhpcyk7XG4gICAgfVxuXG4gICAgX3RpY2tlckFjdGl2ZSB8fCBfdGlja2VyLndha2UoKTtcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBBbmltYXRpb24ucHJvdG90eXBlO1xuXG4gIF9wcm90by5kZWxheSA9IGZ1bmN0aW9uIGRlbGF5KHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlIHx8IHZhbHVlID09PSAwKSB7XG4gICAgICB0aGlzLnBhcmVudCAmJiB0aGlzLnBhcmVudC5zbW9vdGhDaGlsZFRpbWluZyAmJiB0aGlzLnN0YXJ0VGltZSh0aGlzLl9zdGFydCArIHZhbHVlIC0gdGhpcy5fZGVsYXkpO1xuICAgICAgdGhpcy5fZGVsYXkgPSB2YWx1ZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9kZWxheTtcbiAgfTtcblxuICBfcHJvdG8uZHVyYXRpb24gPSBmdW5jdGlvbiBkdXJhdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gdGhpcy50b3RhbER1cmF0aW9uKHRoaXMuX3JlcGVhdCA+IDAgPyB2YWx1ZSArICh2YWx1ZSArIHRoaXMuX3JEZWxheSkgKiB0aGlzLl9yZXBlYXQgOiB2YWx1ZSkgOiB0aGlzLnRvdGFsRHVyYXRpb24oKSAmJiB0aGlzLl9kdXI7XG4gIH07XG5cbiAgX3Byb3RvLnRvdGFsRHVyYXRpb24gPSBmdW5jdGlvbiB0b3RhbER1cmF0aW9uKHZhbHVlKSB7XG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fdER1cjtcbiAgICB9XG5cbiAgICB0aGlzLl9kaXJ0eSA9IDA7XG4gICAgcmV0dXJuIF9zZXREdXJhdGlvbih0aGlzLCB0aGlzLl9yZXBlYXQgPCAwID8gdmFsdWUgOiAodmFsdWUgLSB0aGlzLl9yZXBlYXQgKiB0aGlzLl9yRGVsYXkpIC8gKHRoaXMuX3JlcGVhdCArIDEpKTtcbiAgfTtcblxuICBfcHJvdG8udG90YWxUaW1lID0gZnVuY3Rpb24gdG90YWxUaW1lKF90b3RhbFRpbWUsIHN1cHByZXNzRXZlbnRzKSB7XG4gICAgX3dha2UoKTtcblxuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3RUaW1lO1xuICAgIH1cblxuICAgIHZhciBwYXJlbnQgPSB0aGlzLl9kcDtcblxuICAgIGlmIChwYXJlbnQgJiYgcGFyZW50LnNtb290aENoaWxkVGltaW5nICYmIHRoaXMuX3RzKSB7XG4gICAgICBfYWxpZ25QbGF5aGVhZCh0aGlzLCBfdG90YWxUaW1lKTtcblxuICAgICAgIXBhcmVudC5fZHAgfHwgcGFyZW50LnBhcmVudCB8fCBfcG9zdEFkZENoZWNrcyhwYXJlbnQsIHRoaXMpOyAvLyBlZGdlIGNhc2U6IGlmIHRoaXMgaXMgYSBjaGlsZCBvZiBhIHRpbWVsaW5lIHRoYXQgYWxyZWFkeSBjb21wbGV0ZWQsIGZvciBleGFtcGxlLCB3ZSBtdXN0IHJlLWFjdGl2YXRlIHRoZSBwYXJlbnQuXG4gICAgICAvL2luIGNhc2UgYW55IG9mIHRoZSBhbmNlc3RvciB0aW1lbGluZXMgaGFkIGNvbXBsZXRlZCBidXQgc2hvdWxkIG5vdyBiZSBlbmFibGVkLCB3ZSBzaG91bGQgcmVzZXQgdGhlaXIgdG90YWxUaW1lKCkgd2hpY2ggd2lsbCBhbHNvIGVuc3VyZSB0aGF0IHRoZXkncmUgbGluZWQgdXAgcHJvcGVybHkgYW5kIGVuYWJsZWQuIFNraXAgZm9yIGFuaW1hdGlvbnMgdGhhdCBhcmUgb24gdGhlIHJvb3QgKHdhc3RlZnVsKS4gRXhhbXBsZTogYSBUaW1lbGluZUxpdGUuZXhwb3J0Um9vdCgpIGlzIHBlcmZvcm1lZCB3aGVuIHRoZXJlJ3MgYSBwYXVzZWQgdHdlZW4gb24gdGhlIHJvb3QsIHRoZSBleHBvcnQgd2lsbCBub3QgY29tcGxldGUgdW50aWwgdGhhdCB0d2VlbiBpcyB1bnBhdXNlZCwgYnV0IGltYWdpbmUgYSBjaGlsZCBnZXRzIHJlc3RhcnRlZCBsYXRlciwgYWZ0ZXIgYWxsIFt1bnBhdXNlZF0gdHdlZW5zIGhhdmUgY29tcGxldGVkLiBUaGUgc3RhcnQgb2YgdGhhdCBjaGlsZCB3b3VsZCBnZXQgcHVzaGVkIG91dCwgYnV0IG9uZSBvZiB0aGUgYW5jZXN0b3JzIG1heSBoYXZlIGNvbXBsZXRlZC5cblxuICAgICAgd2hpbGUgKHBhcmVudCAmJiBwYXJlbnQucGFyZW50KSB7XG4gICAgICAgIGlmIChwYXJlbnQucGFyZW50Ll90aW1lICE9PSBwYXJlbnQuX3N0YXJ0ICsgKHBhcmVudC5fdHMgPj0gMCA/IHBhcmVudC5fdFRpbWUgLyBwYXJlbnQuX3RzIDogKHBhcmVudC50b3RhbER1cmF0aW9uKCkgLSBwYXJlbnQuX3RUaW1lKSAvIC1wYXJlbnQuX3RzKSkge1xuICAgICAgICAgIHBhcmVudC50b3RhbFRpbWUocGFyZW50Ll90VGltZSwgdHJ1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBwYXJlbnQgPSBwYXJlbnQucGFyZW50O1xuICAgICAgfVxuXG4gICAgICBpZiAoIXRoaXMucGFyZW50ICYmIHRoaXMuX2RwLmF1dG9SZW1vdmVDaGlsZHJlbiAmJiAodGhpcy5fdHMgPiAwICYmIF90b3RhbFRpbWUgPCB0aGlzLl90RHVyIHx8IHRoaXMuX3RzIDwgMCAmJiBfdG90YWxUaW1lID4gMCB8fCAhdGhpcy5fdER1ciAmJiAhX3RvdGFsVGltZSkpIHtcbiAgICAgICAgLy9pZiB0aGUgYW5pbWF0aW9uIGRvZXNuJ3QgaGF2ZSBhIHBhcmVudCwgcHV0IGl0IGJhY2sgaW50byBpdHMgbGFzdCBwYXJlbnQgKHJlY29yZGVkIGFzIF9kcCBmb3IgZXhhY3RseSBjYXNlcyBsaWtlIHRoaXMpLiBMaW1pdCB0byBwYXJlbnRzIHdpdGggYXV0b1JlbW92ZUNoaWxkcmVuIChsaWtlIGdsb2JhbFRpbWVsaW5lKSBzbyB0aGF0IGlmIHRoZSB1c2VyIG1hbnVhbGx5IHJlbW92ZXMgYW4gYW5pbWF0aW9uIGZyb20gYSB0aW1lbGluZSBhbmQgdGhlbiBhbHRlcnMgaXRzIHBsYXloZWFkLCBpdCBkb2Vzbid0IGdldCBhZGRlZCBiYWNrIGluLlxuICAgICAgICBfYWRkVG9UaW1lbGluZSh0aGlzLl9kcCwgdGhpcywgdGhpcy5fc3RhcnQgLSB0aGlzLl9kZWxheSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX3RUaW1lICE9PSBfdG90YWxUaW1lIHx8ICF0aGlzLl9kdXIgJiYgIXN1cHByZXNzRXZlbnRzIHx8IHRoaXMuX2luaXR0ZWQgJiYgTWF0aC5hYnModGhpcy5felRpbWUpID09PSBfdGlueU51bSB8fCAhX3RvdGFsVGltZSAmJiAhdGhpcy5faW5pdHRlZCAmJiAodGhpcy5hZGQgfHwgdGhpcy5fcHRMb29rdXApKSB7XG4gICAgICAvLyBjaGVjayBmb3IgX3B0TG9va3VwIG9uIGEgVHdlZW4gaW5zdGFuY2UgdG8gZW5zdXJlIGl0IGhhcyBhY3R1YWxseSBmaW5pc2hlZCBiZWluZyBpbnN0YW50aWF0ZWQsIG90aGVyd2lzZSBpZiB0aGlzLnJldmVyc2UoKSBnZXRzIGNhbGxlZCBpbiB0aGUgQW5pbWF0aW9uIGNvbnN0cnVjdG9yLCBpdCBjb3VsZCB0cmlnZ2VyIGEgcmVuZGVyKCkgaGVyZSBldmVuIHRob3VnaCB0aGUgX3RhcmdldHMgd2VyZW4ndCBwb3B1bGF0ZWQsIHRodXMgd2hlbiBfaW5pdCgpIGlzIGNhbGxlZCB0aGVyZSB3b24ndCBiZSBhbnkgUHJvcFR3ZWVucyAoaXQnbGwgYWN0IGxpa2UgdGhlIHR3ZWVuIGlzIG5vbi1mdW5jdGlvbmFsKVxuICAgICAgdGhpcy5fdHMgfHwgKHRoaXMuX3BUaW1lID0gX3RvdGFsVGltZSk7IC8vIG90aGVyd2lzZSwgaWYgYW4gYW5pbWF0aW9uIGlzIHBhdXNlZCwgdGhlbiB0aGUgcGxheWhlYWQgaXMgbW92ZWQgYmFjayB0byB6ZXJvLCB0aGVuIHJlc3VtZWQsIGl0J2QgcmV2ZXJ0IGJhY2sgdG8gdGhlIG9yaWdpbmFsIHRpbWUgYXQgdGhlIHBhdXNlXG4gICAgICAvL2lmICghdGhpcy5fbG9jaykgeyAvLyBhdm9pZCBlbmRsZXNzIHJlY3Vyc2lvbiAobm90IHN1cmUgd2UgbmVlZCB0aGlzIHlldCBvciBpZiBpdCdzIHdvcnRoIHRoZSBwZXJmb3JtYW5jZSBoaXQpXG4gICAgICAvLyAgIHRoaXMuX2xvY2sgPSAxO1xuXG4gICAgICBfbGF6eVNhZmVSZW5kZXIodGhpcywgX3RvdGFsVGltZSwgc3VwcHJlc3NFdmVudHMpOyAvLyAgIHRoaXMuX2xvY2sgPSAwO1xuICAgICAgLy99XG5cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBfcHJvdG8udGltZSA9IGZ1bmN0aW9uIHRpbWUodmFsdWUsIHN1cHByZXNzRXZlbnRzKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyB0aGlzLnRvdGFsVGltZShNYXRoLm1pbih0aGlzLnRvdGFsRHVyYXRpb24oKSwgdmFsdWUgKyBfZWxhcHNlZEN5Y2xlRHVyYXRpb24odGhpcykpICUgKHRoaXMuX2R1ciArIHRoaXMuX3JEZWxheSkgfHwgKHZhbHVlID8gdGhpcy5fZHVyIDogMCksIHN1cHByZXNzRXZlbnRzKSA6IHRoaXMuX3RpbWU7IC8vIG5vdGU6IGlmIHRoZSBtb2R1bHVzIHJlc3VsdHMgaW4gMCwgdGhlIHBsYXloZWFkIGNvdWxkIGJlIGV4YWN0bHkgYXQgdGhlIGVuZCBvciB0aGUgYmVnaW5uaW5nLCBhbmQgd2UgYWx3YXlzIGRlZmVyIHRvIHRoZSBFTkQgd2l0aCBhIG5vbi16ZXJvIHZhbHVlLCBvdGhlcndpc2UgaWYgeW91IHNldCB0aGUgdGltZSgpIHRvIHRoZSB2ZXJ5IGVuZCAoZHVyYXRpb24oKSksIGl0IHdvdWxkIHJlbmRlciBhdCB0aGUgU1RBUlQhXG4gIH07XG5cbiAgX3Byb3RvLnRvdGFsUHJvZ3Jlc3MgPSBmdW5jdGlvbiB0b3RhbFByb2dyZXNzKHZhbHVlLCBzdXBwcmVzc0V2ZW50cykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gdGhpcy50b3RhbFRpbWUodGhpcy50b3RhbER1cmF0aW9uKCkgKiB2YWx1ZSwgc3VwcHJlc3NFdmVudHMpIDogdGhpcy50b3RhbER1cmF0aW9uKCkgPyBNYXRoLm1pbigxLCB0aGlzLl90VGltZSAvIHRoaXMuX3REdXIpIDogdGhpcy5yYXRpbztcbiAgfTtcblxuICBfcHJvdG8ucHJvZ3Jlc3MgPSBmdW5jdGlvbiBwcm9ncmVzcyh2YWx1ZSwgc3VwcHJlc3NFdmVudHMpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IHRoaXMudG90YWxUaW1lKHRoaXMuZHVyYXRpb24oKSAqICh0aGlzLl95b3lvICYmICEodGhpcy5pdGVyYXRpb24oKSAmIDEpID8gMSAtIHZhbHVlIDogdmFsdWUpICsgX2VsYXBzZWRDeWNsZUR1cmF0aW9uKHRoaXMpLCBzdXBwcmVzc0V2ZW50cykgOiB0aGlzLmR1cmF0aW9uKCkgPyBNYXRoLm1pbigxLCB0aGlzLl90aW1lIC8gdGhpcy5fZHVyKSA6IHRoaXMucmF0aW87XG4gIH07XG5cbiAgX3Byb3RvLml0ZXJhdGlvbiA9IGZ1bmN0aW9uIGl0ZXJhdGlvbih2YWx1ZSwgc3VwcHJlc3NFdmVudHMpIHtcbiAgICB2YXIgY3ljbGVEdXJhdGlvbiA9IHRoaXMuZHVyYXRpb24oKSArIHRoaXMuX3JEZWxheTtcblxuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gdGhpcy50b3RhbFRpbWUodGhpcy5fdGltZSArICh2YWx1ZSAtIDEpICogY3ljbGVEdXJhdGlvbiwgc3VwcHJlc3NFdmVudHMpIDogdGhpcy5fcmVwZWF0ID8gX2FuaW1hdGlvbkN5Y2xlKHRoaXMuX3RUaW1lLCBjeWNsZUR1cmF0aW9uKSArIDEgOiAxO1xuICB9IC8vIHBvdGVudGlhbCBmdXR1cmUgYWRkaXRpb246XG4gIC8vIGlzUGxheWluZ0JhY2t3YXJkcygpIHtcbiAgLy8gXHRsZXQgYW5pbWF0aW9uID0gdGhpcyxcbiAgLy8gXHRcdG9yaWVudGF0aW9uID0gMTsgLy8gMSA9IGZvcndhcmQsIC0xID0gYmFja3dhcmRcbiAgLy8gXHR3aGlsZSAoYW5pbWF0aW9uKSB7XG4gIC8vIFx0XHRvcmllbnRhdGlvbiAqPSBhbmltYXRpb24ucmV2ZXJzZWQoKSB8fCAoYW5pbWF0aW9uLnJlcGVhdCgpICYmICEoYW5pbWF0aW9uLml0ZXJhdGlvbigpICYgMSkpID8gLTEgOiAxO1xuICAvLyBcdFx0YW5pbWF0aW9uID0gYW5pbWF0aW9uLnBhcmVudDtcbiAgLy8gXHR9XG4gIC8vIFx0cmV0dXJuIG9yaWVudGF0aW9uIDwgMDtcbiAgLy8gfVxuICA7XG5cbiAgX3Byb3RvLnRpbWVTY2FsZSA9IGZ1bmN0aW9uIHRpbWVTY2FsZSh2YWx1ZSkge1xuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3J0cyA9PT0gLV90aW55TnVtID8gMCA6IHRoaXMuX3J0czsgLy8gcmVjb3JkZWQgdGltZVNjYWxlLiBTcGVjaWFsIGNhc2U6IGlmIHNvbWVvbmUgY2FsbHMgcmV2ZXJzZSgpIG9uIGFuIGFuaW1hdGlvbiB3aXRoIHRpbWVTY2FsZSBvZiAwLCB3ZSBhc3NpZ24gaXQgLV90aW55TnVtIHRvIHJlbWVtYmVyIGl0J3MgcmV2ZXJzZWQuXG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX3J0cyA9PT0gdmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHZhciB0VGltZSA9IHRoaXMucGFyZW50ICYmIHRoaXMuX3RzID8gX3BhcmVudFRvQ2hpbGRUb3RhbFRpbWUodGhpcy5wYXJlbnQuX3RpbWUsIHRoaXMpIDogdGhpcy5fdFRpbWU7IC8vIG1ha2Ugc3VyZSB0byBkbyB0aGUgcGFyZW50VG9DaGlsZFRvdGFsVGltZSgpIEJFRk9SRSBzZXR0aW5nIHRoZSBuZXcgX3RzIGJlY2F1c2UgdGhlIG9sZCBvbmUgbXVzdCBiZSB1c2VkIGluIHRoYXQgY2FsY3VsYXRpb24uXG4gICAgLy8gZnV0dXJlIGFkZGl0aW9uPyBVcCBzaWRlOiBmYXN0IGFuZCBtaW5pbWFsIGZpbGUgc2l6ZS4gRG93biBzaWRlOiBvbmx5IHdvcmtzIG9uIHRoaXMgYW5pbWF0aW9uOyBpZiBhIHRpbWVsaW5lIGlzIHJldmVyc2VkLCBmb3IgZXhhbXBsZSwgaXRzIGNoaWxkcmVucycgb25SZXZlcnNlIHdvdWxkbid0IGdldCBjYWxsZWQuXG4gICAgLy8oK3ZhbHVlIDwgMCAmJiB0aGlzLl9ydHMgPj0gMCkgJiYgX2NhbGxiYWNrKHRoaXMsIFwib25SZXZlcnNlXCIsIHRydWUpO1xuICAgIC8vIHByaW9yaXRpemUgcmVuZGVyaW5nIHdoZXJlIHRoZSBwYXJlbnQncyBwbGF5aGVhZCBsaW5lcyB1cCBpbnN0ZWFkIG9mIHRoaXMuX3RUaW1lIGJlY2F1c2UgdGhlcmUgY291bGQgYmUgYSB0d2VlbiB0aGF0J3MgYW5pbWF0aW5nIGFub3RoZXIgdHdlZW4ncyB0aW1lU2NhbGUgaW4gdGhlIHNhbWUgcmVuZGVyaW5nIGxvb3AgKHNhbWUgcGFyZW50KSwgdGh1cyBpZiB0aGUgdGltZVNjYWxlIHR3ZWVuIHJlbmRlcnMgZmlyc3QsIGl0IHdvdWxkIGFsdGVyIF9zdGFydCBCRUZPUkUgX3RUaW1lIHdhcyBzZXQgb24gdGhhdCB0aWNrIChpbiB0aGUgcmVuZGVyaW5nIGxvb3ApLCBlZmZlY3RpdmVseSBmcmVlemluZyBpdCB1bnRpbCB0aGUgdGltZVNjYWxlIHR3ZWVuIGZpbmlzaGVzLlxuXG4gICAgdGhpcy5fcnRzID0gK3ZhbHVlIHx8IDA7XG4gICAgdGhpcy5fdHMgPSB0aGlzLl9wcyB8fCB2YWx1ZSA9PT0gLV90aW55TnVtID8gMCA6IHRoaXMuX3J0czsgLy8gX3RzIGlzIHRoZSBmdW5jdGlvbmFsIHRpbWVTY2FsZSB3aGljaCB3b3VsZCBiZSAwIGlmIHRoZSBhbmltYXRpb24gaXMgcGF1c2VkLlxuXG4gICAgdGhpcy50b3RhbFRpbWUoX2NsYW1wKC10aGlzLl9kZWxheSwgdGhpcy5fdER1ciwgdFRpbWUpLCB0cnVlKTtcblxuICAgIF9zZXRFbmQodGhpcyk7IC8vIGlmIHBhcmVudC5zbW9vdGhDaGlsZFRpbWluZyB3YXMgZmFsc2UsIHRoZSBlbmQgdGltZSBkaWRuJ3QgZ2V0IHVwZGF0ZWQgaW4gdGhlIF9hbGlnblBsYXloZWFkKCkgbWV0aG9kLCBzbyBkbyBpdCBoZXJlLlxuXG5cbiAgICByZXR1cm4gX3JlY2FjaGVBbmNlc3RvcnModGhpcyk7XG4gIH07XG5cbiAgX3Byb3RvLnBhdXNlZCA9IGZ1bmN0aW9uIHBhdXNlZCh2YWx1ZSkge1xuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3BzO1xuICAgIH1cblxuICAgIGlmICh0aGlzLl9wcyAhPT0gdmFsdWUpIHtcbiAgICAgIHRoaXMuX3BzID0gdmFsdWU7XG5cbiAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICB0aGlzLl9wVGltZSA9IHRoaXMuX3RUaW1lIHx8IE1hdGgubWF4KC10aGlzLl9kZWxheSwgdGhpcy5yYXdUaW1lKCkpOyAvLyBpZiB0aGUgcGF1c2Ugb2NjdXJzIGR1cmluZyB0aGUgZGVsYXkgcGhhc2UsIG1ha2Ugc3VyZSB0aGF0J3MgZmFjdG9yZWQgaW4gd2hlbiByZXN1bWluZy5cblxuICAgICAgICB0aGlzLl90cyA9IHRoaXMuX2FjdCA9IDA7IC8vIF90cyBpcyB0aGUgZnVuY3Rpb25hbCB0aW1lU2NhbGUsIHNvIGEgcGF1c2VkIHR3ZWVuIHdvdWxkIGVmZmVjdGl2ZWx5IGhhdmUgYSB0aW1lU2NhbGUgb2YgMC4gV2UgcmVjb3JkIHRoZSBcInJlYWxcIiB0aW1lU2NhbGUgYXMgX3J0cyAocmVjb3JkZWQgdGltZSBzY2FsZSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF93YWtlKCk7XG5cbiAgICAgICAgdGhpcy5fdHMgPSB0aGlzLl9ydHM7IC8vb25seSBkZWZlciB0byBfcFRpbWUgKHBhdXNlVGltZSkgaWYgdFRpbWUgaXMgemVyby4gUmVtZW1iZXIsIHNvbWVvbmUgY291bGQgcGF1c2UoKSBhbiBhbmltYXRpb24sIHRoZW4gc2NydWIgdGhlIHBsYXloZWFkIGFuZCByZXN1bWUoKS4gSWYgdGhlIHBhcmVudCBkb2Vzbid0IGhhdmUgc21vb3RoQ2hpbGRUaW1pbmcsIHdlIHJlbmRlciBhdCB0aGUgcmF3VGltZSgpIGJlY2F1c2UgdGhlIHN0YXJ0VGltZSB3b24ndCBnZXQgdXBkYXRlZC5cblxuICAgICAgICB0aGlzLnRvdGFsVGltZSh0aGlzLnBhcmVudCAmJiAhdGhpcy5wYXJlbnQuc21vb3RoQ2hpbGRUaW1pbmcgPyB0aGlzLnJhd1RpbWUoKSA6IHRoaXMuX3RUaW1lIHx8IHRoaXMuX3BUaW1lLCB0aGlzLnByb2dyZXNzKCkgPT09IDEgJiYgTWF0aC5hYnModGhpcy5felRpbWUpICE9PSBfdGlueU51bSAmJiAodGhpcy5fdFRpbWUgLT0gX3RpbnlOdW0pKTsgLy8gZWRnZSBjYXNlOiBhbmltYXRpb24ucHJvZ3Jlc3MoMSkucGF1c2UoKS5wbGF5KCkgd291bGRuJ3QgcmVuZGVyIGFnYWluIGJlY2F1c2UgdGhlIHBsYXloZWFkIGlzIGFscmVhZHkgYXQgdGhlIGVuZCwgYnV0IHRoZSBjYWxsIHRvIHRvdGFsVGltZSgpIGJlbG93IHdpbGwgYWRkIGl0IGJhY2sgdG8gaXRzIHBhcmVudC4uLmFuZCBub3QgcmVtb3ZlIGl0IGFnYWluIChzaW5jZSByZW1vdmluZyBvbmx5IGhhcHBlbnMgdXBvbiByZW5kZXJpbmcgYXQgYSBuZXcgdGltZSkuIE9mZnNldHRpbmcgdGhlIF90VGltZSBzbGlnaHRseSBpcyBkb25lIHNpbXBseSB0byBjYXVzZSB0aGUgZmluYWwgcmVuZGVyIGluIHRvdGFsVGltZSgpIHRoYXQnbGwgcG9wIGl0IG9mZiBpdHMgdGltZWxpbmUgKGlmIGF1dG9SZW1vdmVDaGlsZHJlbiBpcyB0cnVlLCBvZiBjb3Vyc2UpLiBDaGVjayB0byBtYWtlIHN1cmUgX3pUaW1lIGlzbid0IC1fdGlueU51bSB0byBhdm9pZCBhbiBlZGdlIGNhc2Ugd2hlcmUgdGhlIHBsYXloZWFkIGlzIHB1c2hlZCB0byB0aGUgZW5kIGJ1dCBJTlNJREUgYSB0d2Vlbi9jYWxsYmFjaywgdGhlIHRpbWVsaW5lIGl0c2VsZiBpcyBwYXVzZWQgdGh1cyBoYWx0aW5nIHJlbmRlcmluZyBhbmQgbGVhdmluZyBhIGZldyB1bnJlbmRlcmVkLiBXaGVuIHJlc3VtaW5nLCBpdCB3b3VsZG4ndCByZW5kZXIgdGhvc2Ugb3RoZXJ3aXNlLlxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90by5zdGFydFRpbWUgPSBmdW5jdGlvbiBzdGFydFRpbWUodmFsdWUpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgdGhpcy5fc3RhcnQgPSB2YWx1ZTtcbiAgICAgIHZhciBwYXJlbnQgPSB0aGlzLnBhcmVudCB8fCB0aGlzLl9kcDtcbiAgICAgIHBhcmVudCAmJiAocGFyZW50Ll9zb3J0IHx8ICF0aGlzLnBhcmVudCkgJiYgX2FkZFRvVGltZWxpbmUocGFyZW50LCB0aGlzLCB2YWx1ZSAtIHRoaXMuX2RlbGF5KTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9zdGFydDtcbiAgfTtcblxuICBfcHJvdG8uZW5kVGltZSA9IGZ1bmN0aW9uIGVuZFRpbWUoaW5jbHVkZVJlcGVhdHMpIHtcbiAgICByZXR1cm4gdGhpcy5fc3RhcnQgKyAoX2lzTm90RmFsc2UoaW5jbHVkZVJlcGVhdHMpID8gdGhpcy50b3RhbER1cmF0aW9uKCkgOiB0aGlzLmR1cmF0aW9uKCkpIC8gTWF0aC5hYnModGhpcy5fdHMgfHwgMSk7XG4gIH07XG5cbiAgX3Byb3RvLnJhd1RpbWUgPSBmdW5jdGlvbiByYXdUaW1lKHdyYXBSZXBlYXRzKSB7XG4gICAgdmFyIHBhcmVudCA9IHRoaXMucGFyZW50IHx8IHRoaXMuX2RwOyAvLyBfZHAgPSBkZXRhY2hlZCBwYXJlbnRcblxuICAgIHJldHVybiAhcGFyZW50ID8gdGhpcy5fdFRpbWUgOiB3cmFwUmVwZWF0cyAmJiAoIXRoaXMuX3RzIHx8IHRoaXMuX3JlcGVhdCAmJiB0aGlzLl90aW1lICYmIHRoaXMudG90YWxQcm9ncmVzcygpIDwgMSkgPyB0aGlzLl90VGltZSAlICh0aGlzLl9kdXIgKyB0aGlzLl9yRGVsYXkpIDogIXRoaXMuX3RzID8gdGhpcy5fdFRpbWUgOiBfcGFyZW50VG9DaGlsZFRvdGFsVGltZShwYXJlbnQucmF3VGltZSh3cmFwUmVwZWF0cyksIHRoaXMpO1xuICB9O1xuXG4gIF9wcm90by5yZXZlcnQgPSBmdW5jdGlvbiByZXZlcnQoY29uZmlnKSB7XG4gICAgaWYgKGNvbmZpZyA9PT0gdm9pZCAwKSB7XG4gICAgICBjb25maWcgPSBfcmV2ZXJ0Q29uZmlnO1xuICAgIH1cblxuICAgIHZhciBwcmV2SXNSZXZlcnRpbmcgPSBfcmV2ZXJ0aW5nO1xuICAgIF9yZXZlcnRpbmcgPSBjb25maWc7XG4gICAgdGhpcy50aW1lbGluZSAmJiB0aGlzLnRpbWVsaW5lLnJldmVydChjb25maWcpO1xuICAgIHRoaXMudG90YWxUaW1lKC0wLjAxLCBjb25maWcuc3VwcHJlc3NFdmVudHMpO1xuICAgIHRoaXMuZGF0YSAhPT0gXCJuZXN0ZWRcIiAmJiBfcmVtb3ZlRnJvbVBhcmVudCh0aGlzKTtcbiAgICBfcmV2ZXJ0aW5nID0gcHJldklzUmV2ZXJ0aW5nO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90by5nbG9iYWxUaW1lID0gZnVuY3Rpb24gZ2xvYmFsVGltZShyYXdUaW1lKSB7XG4gICAgdmFyIGFuaW1hdGlvbiA9IHRoaXMsXG4gICAgICAgIHRpbWUgPSBhcmd1bWVudHMubGVuZ3RoID8gcmF3VGltZSA6IGFuaW1hdGlvbi5yYXdUaW1lKCk7XG5cbiAgICB3aGlsZSAoYW5pbWF0aW9uKSB7XG4gICAgICB0aW1lID0gYW5pbWF0aW9uLl9zdGFydCArIHRpbWUgLyAoYW5pbWF0aW9uLl90cyB8fCAxKTtcbiAgICAgIGFuaW1hdGlvbiA9IGFuaW1hdGlvbi5fZHA7XG4gICAgfVxuXG4gICAgcmV0dXJuICF0aGlzLnBhcmVudCAmJiB0aGlzLnZhcnMuaW1tZWRpYXRlUmVuZGVyID8gLTEgOiB0aW1lOyAvLyB0aGUgX3N0YXJ0QXQgdHdlZW5zIGZvciAuZnJvbVRvKCkgYW5kIC5mcm9tKCkgdGhhdCBoYXZlIGltbWVkaWF0ZVJlbmRlciBzaG91bGQgYWx3YXlzIGJlIEZJUlNUIGluIHRoZSB0aW1lbGluZSAoaW1wb3J0YW50IGZvciBSZWNvcmRpbmcucmV2ZXJ0KCkpXG4gIH07XG5cbiAgX3Byb3RvLnJlcGVhdCA9IGZ1bmN0aW9uIHJlcGVhdCh2YWx1ZSkge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICB0aGlzLl9yZXBlYXQgPSB2YWx1ZSA9PT0gSW5maW5pdHkgPyAtMiA6IHZhbHVlO1xuICAgICAgcmV0dXJuIF9vblVwZGF0ZVRvdGFsRHVyYXRpb24odGhpcyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX3JlcGVhdCA9PT0gLTIgPyBJbmZpbml0eSA6IHRoaXMuX3JlcGVhdDtcbiAgfTtcblxuICBfcHJvdG8ucmVwZWF0RGVsYXkgPSBmdW5jdGlvbiByZXBlYXREZWxheSh2YWx1ZSkge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICB2YXIgdGltZSA9IHRoaXMuX3RpbWU7XG4gICAgICB0aGlzLl9yRGVsYXkgPSB2YWx1ZTtcblxuICAgICAgX29uVXBkYXRlVG90YWxEdXJhdGlvbih0aGlzKTtcblxuICAgICAgcmV0dXJuIHRpbWUgPyB0aGlzLnRpbWUodGltZSkgOiB0aGlzO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9yRGVsYXk7XG4gIH07XG5cbiAgX3Byb3RvLnlveW8gPSBmdW5jdGlvbiB5b3lvKHZhbHVlKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIHRoaXMuX3lveW8gPSB2YWx1ZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl95b3lvO1xuICB9O1xuXG4gIF9wcm90by5zZWVrID0gZnVuY3Rpb24gc2Vlayhwb3NpdGlvbiwgc3VwcHJlc3NFdmVudHMpIHtcbiAgICByZXR1cm4gdGhpcy50b3RhbFRpbWUoX3BhcnNlUG9zaXRpb24odGhpcywgcG9zaXRpb24pLCBfaXNOb3RGYWxzZShzdXBwcmVzc0V2ZW50cykpO1xuICB9O1xuXG4gIF9wcm90by5yZXN0YXJ0ID0gZnVuY3Rpb24gcmVzdGFydChpbmNsdWRlRGVsYXksIHN1cHByZXNzRXZlbnRzKSB7XG4gICAgcmV0dXJuIHRoaXMucGxheSgpLnRvdGFsVGltZShpbmNsdWRlRGVsYXkgPyAtdGhpcy5fZGVsYXkgOiAwLCBfaXNOb3RGYWxzZShzdXBwcmVzc0V2ZW50cykpO1xuICB9O1xuXG4gIF9wcm90by5wbGF5ID0gZnVuY3Rpb24gcGxheShmcm9tLCBzdXBwcmVzc0V2ZW50cykge1xuICAgIGZyb20gIT0gbnVsbCAmJiB0aGlzLnNlZWsoZnJvbSwgc3VwcHJlc3NFdmVudHMpO1xuICAgIHJldHVybiB0aGlzLnJldmVyc2VkKGZhbHNlKS5wYXVzZWQoZmFsc2UpO1xuICB9O1xuXG4gIF9wcm90by5yZXZlcnNlID0gZnVuY3Rpb24gcmV2ZXJzZShmcm9tLCBzdXBwcmVzc0V2ZW50cykge1xuICAgIGZyb20gIT0gbnVsbCAmJiB0aGlzLnNlZWsoZnJvbSB8fCB0aGlzLnRvdGFsRHVyYXRpb24oKSwgc3VwcHJlc3NFdmVudHMpO1xuICAgIHJldHVybiB0aGlzLnJldmVyc2VkKHRydWUpLnBhdXNlZChmYWxzZSk7XG4gIH07XG5cbiAgX3Byb3RvLnBhdXNlID0gZnVuY3Rpb24gcGF1c2UoYXRUaW1lLCBzdXBwcmVzc0V2ZW50cykge1xuICAgIGF0VGltZSAhPSBudWxsICYmIHRoaXMuc2VlayhhdFRpbWUsIHN1cHByZXNzRXZlbnRzKTtcbiAgICByZXR1cm4gdGhpcy5wYXVzZWQodHJ1ZSk7XG4gIH07XG5cbiAgX3Byb3RvLnJlc3VtZSA9IGZ1bmN0aW9uIHJlc3VtZSgpIHtcbiAgICByZXR1cm4gdGhpcy5wYXVzZWQoZmFsc2UpO1xuICB9O1xuXG4gIF9wcm90by5yZXZlcnNlZCA9IGZ1bmN0aW9uIHJldmVyc2VkKHZhbHVlKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgICEhdmFsdWUgIT09IHRoaXMucmV2ZXJzZWQoKSAmJiB0aGlzLnRpbWVTY2FsZSgtdGhpcy5fcnRzIHx8ICh2YWx1ZSA/IC1fdGlueU51bSA6IDApKTsgLy8gaW4gY2FzZSB0aW1lU2NhbGUgaXMgemVybywgcmV2ZXJzaW5nIHdvdWxkIGhhdmUgbm8gZWZmZWN0IHNvIHdlIHVzZSBfdGlueU51bS5cblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX3J0cyA8IDA7XG4gIH07XG5cbiAgX3Byb3RvLmludmFsaWRhdGUgPSBmdW5jdGlvbiBpbnZhbGlkYXRlKCkge1xuICAgIHRoaXMuX2luaXR0ZWQgPSB0aGlzLl9hY3QgPSAwO1xuICAgIHRoaXMuX3pUaW1lID0gLV90aW55TnVtO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90by5pc0FjdGl2ZSA9IGZ1bmN0aW9uIGlzQWN0aXZlKCkge1xuICAgIHZhciBwYXJlbnQgPSB0aGlzLnBhcmVudCB8fCB0aGlzLl9kcCxcbiAgICAgICAgc3RhcnQgPSB0aGlzLl9zdGFydCxcbiAgICAgICAgcmF3VGltZTtcbiAgICByZXR1cm4gISEoIXBhcmVudCB8fCB0aGlzLl90cyAmJiB0aGlzLl9pbml0dGVkICYmIHBhcmVudC5pc0FjdGl2ZSgpICYmIChyYXdUaW1lID0gcGFyZW50LnJhd1RpbWUodHJ1ZSkpID49IHN0YXJ0ICYmIHJhd1RpbWUgPCB0aGlzLmVuZFRpbWUodHJ1ZSkgLSBfdGlueU51bSk7XG4gIH07XG5cbiAgX3Byb3RvLmV2ZW50Q2FsbGJhY2sgPSBmdW5jdGlvbiBldmVudENhbGxiYWNrKHR5cGUsIGNhbGxiYWNrLCBwYXJhbXMpIHtcbiAgICB2YXIgdmFycyA9IHRoaXMudmFycztcblxuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgaWYgKCFjYWxsYmFjaykge1xuICAgICAgICBkZWxldGUgdmFyc1t0eXBlXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhcnNbdHlwZV0gPSBjYWxsYmFjaztcbiAgICAgICAgcGFyYW1zICYmICh2YXJzW3R5cGUgKyBcIlBhcmFtc1wiXSA9IHBhcmFtcyk7XG4gICAgICAgIHR5cGUgPT09IFwib25VcGRhdGVcIiAmJiAodGhpcy5fb25VcGRhdGUgPSBjYWxsYmFjayk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHJldHVybiB2YXJzW3R5cGVdO1xuICB9O1xuXG4gIF9wcm90by50aGVuID0gZnVuY3Rpb24gdGhlbihvbkZ1bGZpbGxlZCkge1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgIHZhciBmID0gX2lzRnVuY3Rpb24ob25GdWxmaWxsZWQpID8gb25GdWxmaWxsZWQgOiBfcGFzc1Rocm91Z2gsXG4gICAgICAgICAgX3Jlc29sdmUgPSBmdW5jdGlvbiBfcmVzb2x2ZSgpIHtcbiAgICAgICAgdmFyIF90aGVuID0gc2VsZi50aGVuO1xuICAgICAgICBzZWxmLnRoZW4gPSBudWxsOyAvLyB0ZW1wb3JhcmlseSBudWxsIHRoZSB0aGVuKCkgbWV0aG9kIHRvIGF2b2lkIGFuIGluZmluaXRlIGxvb3AgKHNlZSBodHRwczovL2dpdGh1Yi5jb20vZ3JlZW5zb2NrL0dTQVAvaXNzdWVzLzMyMilcblxuICAgICAgICBfaXNGdW5jdGlvbihmKSAmJiAoZiA9IGYoc2VsZikpICYmIChmLnRoZW4gfHwgZiA9PT0gc2VsZikgJiYgKHNlbGYudGhlbiA9IF90aGVuKTtcbiAgICAgICAgcmVzb2x2ZShmKTtcbiAgICAgICAgc2VsZi50aGVuID0gX3RoZW47XG4gICAgICB9O1xuXG4gICAgICBpZiAoc2VsZi5faW5pdHRlZCAmJiBzZWxmLnRvdGFsUHJvZ3Jlc3MoKSA9PT0gMSAmJiBzZWxmLl90cyA+PSAwIHx8ICFzZWxmLl90VGltZSAmJiBzZWxmLl90cyA8IDApIHtcbiAgICAgICAgX3Jlc29sdmUoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNlbGYuX3Byb20gPSBfcmVzb2x2ZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8ua2lsbCA9IGZ1bmN0aW9uIGtpbGwoKSB7XG4gICAgX2ludGVycnVwdCh0aGlzKTtcbiAgfTtcblxuICByZXR1cm4gQW5pbWF0aW9uO1xufSgpO1xuXG5fc2V0RGVmYXVsdHMoQW5pbWF0aW9uLnByb3RvdHlwZSwge1xuICBfdGltZTogMCxcbiAgX3N0YXJ0OiAwLFxuICBfZW5kOiAwLFxuICBfdFRpbWU6IDAsXG4gIF90RHVyOiAwLFxuICBfZGlydHk6IDAsXG4gIF9yZXBlYXQ6IDAsXG4gIF95b3lvOiBmYWxzZSxcbiAgcGFyZW50OiBudWxsLFxuICBfaW5pdHRlZDogZmFsc2UsXG4gIF9yRGVsYXk6IDAsXG4gIF90czogMSxcbiAgX2RwOiAwLFxuICByYXRpbzogMCxcbiAgX3pUaW1lOiAtX3RpbnlOdW0sXG4gIF9wcm9tOiAwLFxuICBfcHM6IGZhbHNlLFxuICBfcnRzOiAxXG59KTtcbi8qXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBUSU1FTElORVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cblxuZXhwb3J0IHZhciBUaW1lbGluZSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0FuaW1hdGlvbikge1xuICBfaW5oZXJpdHNMb29zZShUaW1lbGluZSwgX0FuaW1hdGlvbik7XG5cbiAgZnVuY3Rpb24gVGltZWxpbmUodmFycywgcG9zaXRpb24pIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBpZiAodmFycyA9PT0gdm9pZCAwKSB7XG4gICAgICB2YXJzID0ge307XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfQW5pbWF0aW9uLmNhbGwodGhpcywgdmFycykgfHwgdGhpcztcbiAgICBfdGhpcy5sYWJlbHMgPSB7fTtcbiAgICBfdGhpcy5zbW9vdGhDaGlsZFRpbWluZyA9ICEhdmFycy5zbW9vdGhDaGlsZFRpbWluZztcbiAgICBfdGhpcy5hdXRvUmVtb3ZlQ2hpbGRyZW4gPSAhIXZhcnMuYXV0b1JlbW92ZUNoaWxkcmVuO1xuICAgIF90aGlzLl9zb3J0ID0gX2lzTm90RmFsc2UodmFycy5zb3J0Q2hpbGRyZW4pO1xuICAgIF9nbG9iYWxUaW1lbGluZSAmJiBfYWRkVG9UaW1lbGluZSh2YXJzLnBhcmVudCB8fCBfZ2xvYmFsVGltZWxpbmUsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBwb3NpdGlvbik7XG4gICAgdmFycy5yZXZlcnNlZCAmJiBfdGhpcy5yZXZlcnNlKCk7XG4gICAgdmFycy5wYXVzZWQgJiYgX3RoaXMucGF1c2VkKHRydWUpO1xuICAgIHZhcnMuc2Nyb2xsVHJpZ2dlciAmJiBfc2Nyb2xsVHJpZ2dlcihfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgdmFycy5zY3JvbGxUcmlnZ2VyKTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvMiA9IFRpbWVsaW5lLnByb3RvdHlwZTtcblxuICBfcHJvdG8yLnRvID0gZnVuY3Rpb24gdG8odGFyZ2V0cywgdmFycywgcG9zaXRpb24pIHtcbiAgICBfY3JlYXRlVHdlZW5UeXBlKDAsIGFyZ3VtZW50cywgdGhpcyk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBfcHJvdG8yLmZyb20gPSBmdW5jdGlvbiBmcm9tKHRhcmdldHMsIHZhcnMsIHBvc2l0aW9uKSB7XG4gICAgX2NyZWF0ZVR3ZWVuVHlwZSgxLCBhcmd1bWVudHMsIHRoaXMpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgX3Byb3RvMi5mcm9tVG8gPSBmdW5jdGlvbiBmcm9tVG8odGFyZ2V0cywgZnJvbVZhcnMsIHRvVmFycywgcG9zaXRpb24pIHtcbiAgICBfY3JlYXRlVHdlZW5UeXBlKDIsIGFyZ3VtZW50cywgdGhpcyk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBfcHJvdG8yLnNldCA9IGZ1bmN0aW9uIHNldCh0YXJnZXRzLCB2YXJzLCBwb3NpdGlvbikge1xuICAgIHZhcnMuZHVyYXRpb24gPSAwO1xuICAgIHZhcnMucGFyZW50ID0gdGhpcztcbiAgICBfaW5oZXJpdERlZmF1bHRzKHZhcnMpLnJlcGVhdERlbGF5IHx8ICh2YXJzLnJlcGVhdCA9IDApO1xuICAgIHZhcnMuaW1tZWRpYXRlUmVuZGVyID0gISF2YXJzLmltbWVkaWF0ZVJlbmRlcjtcbiAgICBuZXcgVHdlZW4odGFyZ2V0cywgdmFycywgX3BhcnNlUG9zaXRpb24odGhpcywgcG9zaXRpb24pLCAxKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBfcHJvdG8yLmNhbGwgPSBmdW5jdGlvbiBjYWxsKGNhbGxiYWNrLCBwYXJhbXMsIHBvc2l0aW9uKSB7XG4gICAgcmV0dXJuIF9hZGRUb1RpbWVsaW5lKHRoaXMsIFR3ZWVuLmRlbGF5ZWRDYWxsKDAsIGNhbGxiYWNrLCBwYXJhbXMpLCBwb3NpdGlvbik7XG4gIH0gLy9PTkxZIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5ISBNYXliZSBkZWxldGU/XG4gIDtcblxuICBfcHJvdG8yLnN0YWdnZXJUbyA9IGZ1bmN0aW9uIHN0YWdnZXJUbyh0YXJnZXRzLCBkdXJhdGlvbiwgdmFycywgc3RhZ2dlciwgcG9zaXRpb24sIG9uQ29tcGxldGVBbGwsIG9uQ29tcGxldGVBbGxQYXJhbXMpIHtcbiAgICB2YXJzLmR1cmF0aW9uID0gZHVyYXRpb247XG4gICAgdmFycy5zdGFnZ2VyID0gdmFycy5zdGFnZ2VyIHx8IHN0YWdnZXI7XG4gICAgdmFycy5vbkNvbXBsZXRlID0gb25Db21wbGV0ZUFsbDtcbiAgICB2YXJzLm9uQ29tcGxldGVQYXJhbXMgPSBvbkNvbXBsZXRlQWxsUGFyYW1zO1xuICAgIHZhcnMucGFyZW50ID0gdGhpcztcbiAgICBuZXcgVHdlZW4odGFyZ2V0cywgdmFycywgX3BhcnNlUG9zaXRpb24odGhpcywgcG9zaXRpb24pKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBfcHJvdG8yLnN0YWdnZXJGcm9tID0gZnVuY3Rpb24gc3RhZ2dlckZyb20odGFyZ2V0cywgZHVyYXRpb24sIHZhcnMsIHN0YWdnZXIsIHBvc2l0aW9uLCBvbkNvbXBsZXRlQWxsLCBvbkNvbXBsZXRlQWxsUGFyYW1zKSB7XG4gICAgdmFycy5ydW5CYWNrd2FyZHMgPSAxO1xuICAgIF9pbmhlcml0RGVmYXVsdHModmFycykuaW1tZWRpYXRlUmVuZGVyID0gX2lzTm90RmFsc2UodmFycy5pbW1lZGlhdGVSZW5kZXIpO1xuICAgIHJldHVybiB0aGlzLnN0YWdnZXJUbyh0YXJnZXRzLCBkdXJhdGlvbiwgdmFycywgc3RhZ2dlciwgcG9zaXRpb24sIG9uQ29tcGxldGVBbGwsIG9uQ29tcGxldGVBbGxQYXJhbXMpO1xuICB9O1xuXG4gIF9wcm90bzIuc3RhZ2dlckZyb21UbyA9IGZ1bmN0aW9uIHN0YWdnZXJGcm9tVG8odGFyZ2V0cywgZHVyYXRpb24sIGZyb21WYXJzLCB0b1ZhcnMsIHN0YWdnZXIsIHBvc2l0aW9uLCBvbkNvbXBsZXRlQWxsLCBvbkNvbXBsZXRlQWxsUGFyYW1zKSB7XG4gICAgdG9WYXJzLnN0YXJ0QXQgPSBmcm9tVmFycztcbiAgICBfaW5oZXJpdERlZmF1bHRzKHRvVmFycykuaW1tZWRpYXRlUmVuZGVyID0gX2lzTm90RmFsc2UodG9WYXJzLmltbWVkaWF0ZVJlbmRlcik7XG4gICAgcmV0dXJuIHRoaXMuc3RhZ2dlclRvKHRhcmdldHMsIGR1cmF0aW9uLCB0b1ZhcnMsIHN0YWdnZXIsIHBvc2l0aW9uLCBvbkNvbXBsZXRlQWxsLCBvbkNvbXBsZXRlQWxsUGFyYW1zKTtcbiAgfTtcblxuICBfcHJvdG8yLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcih0b3RhbFRpbWUsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSkge1xuICAgIHZhciBwcmV2VGltZSA9IHRoaXMuX3RpbWUsXG4gICAgICAgIHREdXIgPSB0aGlzLl9kaXJ0eSA/IHRoaXMudG90YWxEdXJhdGlvbigpIDogdGhpcy5fdER1cixcbiAgICAgICAgZHVyID0gdGhpcy5fZHVyLFxuICAgICAgICB0VGltZSA9IHRvdGFsVGltZSA8PSAwID8gMCA6IF9yb3VuZFByZWNpc2UodG90YWxUaW1lKSxcbiAgICAgICAgLy8gaWYgYSBwYXVzZWQgdGltZWxpbmUgaXMgcmVzdW1lZCAob3IgaXRzIF9zdGFydCBpcyB1cGRhdGVkIGZvciBhbm90aGVyIHJlYXNvbi4uLndoaWNoIHJvdW5kcyBpdCksIHRoYXQgY291bGQgcmVzdWx0IGluIHRoZSBwbGF5aGVhZCBzaGlmdGluZyBhICoqdGlueSoqIGFtb3VudCBhbmQgYSB6ZXJvLWR1cmF0aW9uIGNoaWxkIGF0IHRoYXQgc3BvdCBtYXkgZ2V0IHJlbmRlcmVkIGF0IGEgZGlmZmVyZW50IHJhdGlvLCBsaWtlIGl0cyB0b3RhbFRpbWUgaW4gcmVuZGVyKCkgbWF5IGJlIDFlLTE3IGluc3RlYWQgb2YgMCwgZm9yIGV4YW1wbGUuXG4gICAgY3Jvc3NpbmdTdGFydCA9IHRoaXMuX3pUaW1lIDwgMCAhPT0gdG90YWxUaW1lIDwgMCAmJiAodGhpcy5faW5pdHRlZCB8fCAhZHVyKSxcbiAgICAgICAgdGltZSxcbiAgICAgICAgY2hpbGQsXG4gICAgICAgIG5leHQsXG4gICAgICAgIGl0ZXJhdGlvbixcbiAgICAgICAgY3ljbGVEdXJhdGlvbixcbiAgICAgICAgcHJldlBhdXNlZCxcbiAgICAgICAgcGF1c2VUd2VlbixcbiAgICAgICAgdGltZVNjYWxlLFxuICAgICAgICBwcmV2U3RhcnQsXG4gICAgICAgIHByZXZJdGVyYXRpb24sXG4gICAgICAgIHlveW8sXG4gICAgICAgIGlzWW95bztcbiAgICB0aGlzICE9PSBfZ2xvYmFsVGltZWxpbmUgJiYgdFRpbWUgPiB0RHVyICYmIHRvdGFsVGltZSA+PSAwICYmICh0VGltZSA9IHREdXIpO1xuXG4gICAgaWYgKHRUaW1lICE9PSB0aGlzLl90VGltZSB8fCBmb3JjZSB8fCBjcm9zc2luZ1N0YXJ0KSB7XG4gICAgICBpZiAocHJldlRpbWUgIT09IHRoaXMuX3RpbWUgJiYgZHVyKSB7XG4gICAgICAgIC8vaWYgdG90YWxEdXJhdGlvbigpIGZpbmRzIGEgY2hpbGQgd2l0aCBhIG5lZ2F0aXZlIHN0YXJ0VGltZSBhbmQgc21vb3RoQ2hpbGRUaW1pbmcgaXMgdHJ1ZSwgdGhpbmdzIGdldCBzaGlmdGVkIGFyb3VuZCBpbnRlcm5hbGx5IHNvIHdlIG5lZWQgdG8gYWRqdXN0IHRoZSB0aW1lIGFjY29yZGluZ2x5LiBGb3IgZXhhbXBsZSwgaWYgYSB0d2VlbiBzdGFydHMgYXQgLTMwIHdlIG11c3Qgc2hpZnQgRVZFUllUSElORyBmb3J3YXJkIDMwIHNlY29uZHMgYW5kIG1vdmUgdGhpcyB0aW1lbGluZSdzIHN0YXJ0VGltZSBiYWNrd2FyZCBieSAzMCBzZWNvbmRzIHNvIHRoYXQgdGhpbmdzIGFsaWduIHdpdGggdGhlIHBsYXloZWFkIChubyBqdW1wKS5cbiAgICAgICAgdFRpbWUgKz0gdGhpcy5fdGltZSAtIHByZXZUaW1lO1xuICAgICAgICB0b3RhbFRpbWUgKz0gdGhpcy5fdGltZSAtIHByZXZUaW1lO1xuICAgICAgfVxuXG4gICAgICB0aW1lID0gdFRpbWU7XG4gICAgICBwcmV2U3RhcnQgPSB0aGlzLl9zdGFydDtcbiAgICAgIHRpbWVTY2FsZSA9IHRoaXMuX3RzO1xuICAgICAgcHJldlBhdXNlZCA9ICF0aW1lU2NhbGU7XG5cbiAgICAgIGlmIChjcm9zc2luZ1N0YXJ0KSB7XG4gICAgICAgIGR1ciB8fCAocHJldlRpbWUgPSB0aGlzLl96VGltZSk7IC8vd2hlbiB0aGUgcGxheWhlYWQgYXJyaXZlcyBhdCBFWEFDVExZIHRpbWUgMCAocmlnaHQgb24gdG9wKSBvZiBhIHplcm8tZHVyYXRpb24gdGltZWxpbmUsIHdlIG5lZWQgdG8gZGlzY2VybiBpZiBldmVudHMgYXJlIHN1cHByZXNzZWQgc28gdGhhdCB3aGVuIHRoZSBwbGF5aGVhZCBtb3ZlcyBhZ2FpbiAobmV4dCB0aW1lKSwgaXQnbGwgdHJpZ2dlciB0aGUgY2FsbGJhY2suIElmIGV2ZW50cyBhcmUgTk9UIHN1cHByZXNzZWQsIG9idmlvdXNseSB0aGUgY2FsbGJhY2sgd291bGQgYmUgdHJpZ2dlcmVkIGluIHRoaXMgcmVuZGVyLiBCYXNpY2FsbHksIHRoZSBjYWxsYmFjayBzaG91bGQgZmlyZSBlaXRoZXIgd2hlbiB0aGUgcGxheWhlYWQgQVJSSVZFUyBvciBMRUFWRVMgdGhpcyBleGFjdCBzcG90LCBub3QgYm90aC4gSW1hZ2luZSBkb2luZyBhIHRpbWVsaW5lLnNlZWsoMCkgYW5kIHRoZXJlJ3MgYSBjYWxsYmFjayB0aGF0IHNpdHMgYXQgMC4gU2luY2UgZXZlbnRzIGFyZSBzdXBwcmVzc2VkIG9uIHRoYXQgc2VlaygpIGJ5IGRlZmF1bHQsIG5vdGhpbmcgd2lsbCBmaXJlLCBidXQgd2hlbiB0aGUgcGxheWhlYWQgbW92ZXMgb2ZmIG9mIHRoYXQgcG9zaXRpb24sIHRoZSBjYWxsYmFjayBzaG91bGQgZmlyZS4gVGhpcyBiZWhhdmlvciBpcyB3aGF0IHBlb3BsZSBpbnR1aXRpdmVseSBleHBlY3QuXG5cbiAgICAgICAgKHRvdGFsVGltZSB8fCAhc3VwcHJlc3NFdmVudHMpICYmICh0aGlzLl96VGltZSA9IHRvdGFsVGltZSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLl9yZXBlYXQpIHtcbiAgICAgICAgLy9hZGp1c3QgdGhlIHRpbWUgZm9yIHJlcGVhdHMgYW5kIHlveW9zXG4gICAgICAgIHlveW8gPSB0aGlzLl95b3lvO1xuICAgICAgICBjeWNsZUR1cmF0aW9uID0gZHVyICsgdGhpcy5fckRlbGF5O1xuXG4gICAgICAgIGlmICh0aGlzLl9yZXBlYXQgPCAtMSAmJiB0b3RhbFRpbWUgPCAwKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMudG90YWxUaW1lKGN5Y2xlRHVyYXRpb24gKiAxMDAgKyB0b3RhbFRpbWUsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aW1lID0gX3JvdW5kUHJlY2lzZSh0VGltZSAlIGN5Y2xlRHVyYXRpb24pOyAvL3JvdW5kIHRvIGF2b2lkIGZsb2F0aW5nIHBvaW50IGVycm9ycy4gKDQgJSAwLjggc2hvdWxkIGJlIDAgYnV0IHNvbWUgYnJvd3NlcnMgcmVwb3J0IGl0IGFzIDAuNzk5OTk5OTkhKVxuXG4gICAgICAgIGlmICh0VGltZSA9PT0gdER1cikge1xuICAgICAgICAgIC8vIHRoZSB0RHVyID09PSB0VGltZSBpcyBmb3IgZWRnZSBjYXNlcyB3aGVyZSB0aGVyZSdzIGEgbGVuZ3RoeSBkZWNpbWFsIG9uIHRoZSBkdXJhdGlvbiBhbmQgaXQgbWF5IHJlYWNoIHRoZSB2ZXJ5IGVuZCBidXQgdGhlIHRpbWUgaXMgcmVuZGVyZWQgYXMgbm90LXF1aXRlLXRoZXJlIChyZW1lbWJlciwgdER1ciBpcyByb3VuZGVkIHRvIDQgZGVjaW1hbHMgd2hlcmVhcyBkdXIgaXNuJ3QpXG4gICAgICAgICAgaXRlcmF0aW9uID0gdGhpcy5fcmVwZWF0O1xuICAgICAgICAgIHRpbWUgPSBkdXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlcmF0aW9uID0gfn4odFRpbWUgLyBjeWNsZUR1cmF0aW9uKTtcblxuICAgICAgICAgIGlmIChpdGVyYXRpb24gJiYgaXRlcmF0aW9uID09PSB0VGltZSAvIGN5Y2xlRHVyYXRpb24pIHtcbiAgICAgICAgICAgIHRpbWUgPSBkdXI7XG4gICAgICAgICAgICBpdGVyYXRpb24tLTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0aW1lID4gZHVyICYmICh0aW1lID0gZHVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByZXZJdGVyYXRpb24gPSBfYW5pbWF0aW9uQ3ljbGUodGhpcy5fdFRpbWUsIGN5Y2xlRHVyYXRpb24pO1xuICAgICAgICAhcHJldlRpbWUgJiYgdGhpcy5fdFRpbWUgJiYgcHJldkl0ZXJhdGlvbiAhPT0gaXRlcmF0aW9uICYmIChwcmV2SXRlcmF0aW9uID0gaXRlcmF0aW9uKTsgLy8gZWRnZSBjYXNlIC0gaWYgc29tZW9uZSBkb2VzIGFkZFBhdXNlKCkgYXQgdGhlIHZlcnkgYmVnaW5uaW5nIG9mIGEgcmVwZWF0aW5nIHRpbWVsaW5lLCB0aGF0IHBhdXNlIGlzIHRlY2huaWNhbGx5IGF0IHRoZSBzYW1lIHNwb3QgYXMgdGhlIGVuZCB3aGljaCBjYXVzZXMgdGhpcy5fdGltZSB0byBnZXQgc2V0IHRvIDAgd2hlbiB0aGUgdG90YWxUaW1lIHdvdWxkIG5vcm1hbGx5IHBsYWNlIHRoZSBwbGF5aGVhZCBhdCB0aGUgZW5kLiBTZWUgaHR0cHM6Ly9ncmVlbnNvY2suY29tL2ZvcnVtcy90b3BpYy8yMzgyMy1jbG9zaW5nLW5hdi1hbmltYXRpb24tbm90LXdvcmtpbmctb24taWUtYW5kLWlwaG9uZS02LW1heWJlLW90aGVyLW9sZGVyLWJyb3dzZXIvP3RhYj1jb21tZW50cyNjb21tZW50LTExMzAwNVxuXG4gICAgICAgIGlmICh5b3lvICYmIGl0ZXJhdGlvbiAmIDEpIHtcbiAgICAgICAgICB0aW1lID0gZHVyIC0gdGltZTtcbiAgICAgICAgICBpc1lveW8gPSAxO1xuICAgICAgICB9XG4gICAgICAgIC8qXG4gICAgICAgIG1ha2Ugc3VyZSBjaGlsZHJlbiBhdCB0aGUgZW5kL2JlZ2lubmluZyBvZiB0aGUgdGltZWxpbmUgYXJlIHJlbmRlcmVkIHByb3Blcmx5LiBJZiwgZm9yIGV4YW1wbGUsXG4gICAgICAgIGEgMy1zZWNvbmQgbG9uZyB0aW1lbGluZSByZW5kZXJlZCBhdCAyLjkgc2Vjb25kcyBwcmV2aW91c2x5LCBhbmQgbm93IHJlbmRlcnMgYXQgMy4yIHNlY29uZHMgKHdoaWNoXG4gICAgICAgIHdvdWxkIGdldCB0cmFuc2xhdGVkIHRvIDIuOCBzZWNvbmRzIGlmIHRoZSB0aW1lbGluZSB5b3lvcyBvciAwLjIgc2Vjb25kcyBpZiBpdCBqdXN0IHJlcGVhdHMpLCB0aGVyZVxuICAgICAgICBjb3VsZCBiZSBhIGNhbGxiYWNrIG9yIGEgc2hvcnQgdHdlZW4gdGhhdCdzIGF0IDIuOTUgb3IgMyBzZWNvbmRzIGluIHdoaWNoIHdvdWxkbid0IHJlbmRlci4gU29cbiAgICAgICAgd2UgbmVlZCB0byBwdXNoIHRoZSB0aW1lbGluZSB0byB0aGUgZW5kIChhbmQvb3IgYmVnaW5uaW5nIGRlcGVuZGluZyBvbiBpdHMgeW95byB2YWx1ZSkuIEFsc28gd2UgbXVzdFxuICAgICAgICBlbnN1cmUgdGhhdCB6ZXJvLWR1cmF0aW9uIHR3ZWVucyBhdCB0aGUgdmVyeSBiZWdpbm5pbmcgb3IgZW5kIG9mIHRoZSBUaW1lbGluZSB3b3JrLlxuICAgICAgICAqL1xuXG5cbiAgICAgICAgaWYgKGl0ZXJhdGlvbiAhPT0gcHJldkl0ZXJhdGlvbiAmJiAhdGhpcy5fbG9jaykge1xuICAgICAgICAgIHZhciByZXdpbmRpbmcgPSB5b3lvICYmIHByZXZJdGVyYXRpb24gJiAxLFxuICAgICAgICAgICAgICBkb2VzV3JhcCA9IHJld2luZGluZyA9PT0gKHlveW8gJiYgaXRlcmF0aW9uICYgMSk7XG4gICAgICAgICAgaXRlcmF0aW9uIDwgcHJldkl0ZXJhdGlvbiAmJiAocmV3aW5kaW5nID0gIXJld2luZGluZyk7XG4gICAgICAgICAgcHJldlRpbWUgPSByZXdpbmRpbmcgPyAwIDogZHVyO1xuICAgICAgICAgIHRoaXMuX2xvY2sgPSAxO1xuICAgICAgICAgIHRoaXMucmVuZGVyKHByZXZUaW1lIHx8IChpc1lveW8gPyAwIDogX3JvdW5kUHJlY2lzZShpdGVyYXRpb24gKiBjeWNsZUR1cmF0aW9uKSksIHN1cHByZXNzRXZlbnRzLCAhZHVyKS5fbG9jayA9IDA7XG4gICAgICAgICAgdGhpcy5fdFRpbWUgPSB0VGltZTsgLy8gaWYgYSB1c2VyIGdldHMgdGhlIGl0ZXJhdGlvbigpIGluc2lkZSB0aGUgb25SZXBlYXQsIGZvciBleGFtcGxlLCBpdCBzaG91bGQgYmUgYWNjdXJhdGUuXG5cbiAgICAgICAgICAhc3VwcHJlc3NFdmVudHMgJiYgdGhpcy5wYXJlbnQgJiYgX2NhbGxiYWNrKHRoaXMsIFwib25SZXBlYXRcIik7XG4gICAgICAgICAgdGhpcy52YXJzLnJlcGVhdFJlZnJlc2ggJiYgIWlzWW95byAmJiAodGhpcy5pbnZhbGlkYXRlKCkuX2xvY2sgPSAxKTtcblxuICAgICAgICAgIGlmIChwcmV2VGltZSAmJiBwcmV2VGltZSAhPT0gdGhpcy5fdGltZSB8fCBwcmV2UGF1c2VkICE9PSAhdGhpcy5fdHMgfHwgdGhpcy52YXJzLm9uUmVwZWF0ICYmICF0aGlzLnBhcmVudCAmJiAhdGhpcy5fYWN0KSB7XG4gICAgICAgICAgICAvLyBpZiBwcmV2VGltZSBpcyAwIGFuZCB3ZSByZW5kZXIgYXQgdGhlIHZlcnkgZW5kLCBfdGltZSB3aWxsIGJlIHRoZSBlbmQsIHRodXMgd29uJ3QgbWF0Y2guIFNvIGluIHRoaXMgZWRnZSBjYXNlLCBwcmV2VGltZSB3b24ndCBtYXRjaCBfdGltZSBidXQgdGhhdCdzIG9rYXkuIElmIGl0IGdldHMga2lsbGVkIGluIHRoZSBvblJlcGVhdCwgZWplY3QgYXMgd2VsbC5cbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGR1ciA9IHRoaXMuX2R1cjsgLy8gaW4gY2FzZSB0aGUgZHVyYXRpb24gY2hhbmdlZCBpbiB0aGUgb25SZXBlYXRcblxuICAgICAgICAgIHREdXIgPSB0aGlzLl90RHVyO1xuXG4gICAgICAgICAgaWYgKGRvZXNXcmFwKSB7XG4gICAgICAgICAgICB0aGlzLl9sb2NrID0gMjtcbiAgICAgICAgICAgIHByZXZUaW1lID0gcmV3aW5kaW5nID8gZHVyIDogLTAuMDAwMTtcbiAgICAgICAgICAgIHRoaXMucmVuZGVyKHByZXZUaW1lLCB0cnVlKTtcbiAgICAgICAgICAgIHRoaXMudmFycy5yZXBlYXRSZWZyZXNoICYmICFpc1lveW8gJiYgdGhpcy5pbnZhbGlkYXRlKCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGhpcy5fbG9jayA9IDA7XG5cbiAgICAgICAgICBpZiAoIXRoaXMuX3RzICYmICFwcmV2UGF1c2VkKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICB9IC8vaW4gb3JkZXIgZm9yIHlveW9FYXNlIHRvIHdvcmsgcHJvcGVybHkgd2hlbiB0aGVyZSdzIGEgc3RhZ2dlciwgd2UgbXVzdCBzd2FwIG91dCB0aGUgZWFzZSBpbiBlYWNoIHN1Yi10d2Vlbi5cblxuXG4gICAgICAgICAgX3Byb3BhZ2F0ZVlveW9FYXNlKHRoaXMsIGlzWW95byk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuX2hhc1BhdXNlICYmICF0aGlzLl9mb3JjaW5nICYmIHRoaXMuX2xvY2sgPCAyKSB7XG4gICAgICAgIHBhdXNlVHdlZW4gPSBfZmluZE5leHRQYXVzZVR3ZWVuKHRoaXMsIF9yb3VuZFByZWNpc2UocHJldlRpbWUpLCBfcm91bmRQcmVjaXNlKHRpbWUpKTtcblxuICAgICAgICBpZiAocGF1c2VUd2Vlbikge1xuICAgICAgICAgIHRUaW1lIC09IHRpbWUgLSAodGltZSA9IHBhdXNlVHdlZW4uX3N0YXJ0KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLl90VGltZSA9IHRUaW1lO1xuICAgICAgdGhpcy5fdGltZSA9IHRpbWU7XG4gICAgICB0aGlzLl9hY3QgPSAhdGltZVNjYWxlOyAvL2FzIGxvbmcgYXMgaXQncyBub3QgcGF1c2VkLCBmb3JjZSBpdCB0byBiZSBhY3RpdmUgc28gdGhhdCBpZiB0aGUgdXNlciByZW5kZXJzIGluZGVwZW5kZW50IG9mIHRoZSBwYXJlbnQgdGltZWxpbmUsIGl0J2xsIGJlIGZvcmNlZCB0byByZS1yZW5kZXIgb24gdGhlIG5leHQgdGljay5cblxuICAgICAgaWYgKCF0aGlzLl9pbml0dGVkKSB7XG4gICAgICAgIHRoaXMuX29uVXBkYXRlID0gdGhpcy52YXJzLm9uVXBkYXRlO1xuICAgICAgICB0aGlzLl9pbml0dGVkID0gMTtcbiAgICAgICAgdGhpcy5felRpbWUgPSB0b3RhbFRpbWU7XG4gICAgICAgIHByZXZUaW1lID0gMDsgLy8gdXBvbiBpbml0LCB0aGUgcGxheWhlYWQgc2hvdWxkIGFsd2F5cyBnbyBmb3J3YXJkOyBzb21lb25lIGNvdWxkIGludmFsaWRhdGUoKSBhIGNvbXBsZXRlZCB0aW1lbGluZSBhbmQgdGhlbiBpZiB0aGV5IHJlc3RhcnQoKSwgdGhhdCB3b3VsZCBtYWtlIGNoaWxkIHR3ZWVucyByZW5kZXIgaW4gcmV2ZXJzZSBvcmRlciB3aGljaCBjb3VsZCBsb2NrIGluIHRoZSB3cm9uZyBzdGFydGluZyB2YWx1ZXMgaWYgdGhleSBidWlsZCBvbiBlYWNoIG90aGVyLCBsaWtlIHRsLnRvKG9iaiwge3g6IDEwMH0pLnRvKG9iaiwge3g6IDB9KS5cbiAgICAgIH1cblxuICAgICAgaWYgKCFwcmV2VGltZSAmJiB0aW1lICYmICFzdXBwcmVzc0V2ZW50cykge1xuICAgICAgICBfY2FsbGJhY2sodGhpcywgXCJvblN0YXJ0XCIpO1xuXG4gICAgICAgIGlmICh0aGlzLl90VGltZSAhPT0gdFRpbWUpIHtcbiAgICAgICAgICAvLyBpbiBjYXNlIHRoZSBvblN0YXJ0IHRyaWdnZXJlZCBhIHJlbmRlciBhdCBhIGRpZmZlcmVudCBzcG90LCBlamVjdC4gTGlrZSBpZiBzb21lb25lIGRpZCBhbmltYXRpb24ucGF1c2UoMC41KSBvciBzb21ldGhpbmcgaW5zaWRlIHRoZSBvblN0YXJ0LlxuICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICh0aW1lID49IHByZXZUaW1lICYmIHRvdGFsVGltZSA+PSAwKSB7XG4gICAgICAgIGNoaWxkID0gdGhpcy5fZmlyc3Q7XG5cbiAgICAgICAgd2hpbGUgKGNoaWxkKSB7XG4gICAgICAgICAgbmV4dCA9IGNoaWxkLl9uZXh0O1xuXG4gICAgICAgICAgaWYgKChjaGlsZC5fYWN0IHx8IHRpbWUgPj0gY2hpbGQuX3N0YXJ0KSAmJiBjaGlsZC5fdHMgJiYgcGF1c2VUd2VlbiAhPT0gY2hpbGQpIHtcbiAgICAgICAgICAgIGlmIChjaGlsZC5wYXJlbnQgIT09IHRoaXMpIHtcbiAgICAgICAgICAgICAgLy8gYW4gZXh0cmVtZSBlZGdlIGNhc2UgLSB0aGUgY2hpbGQncyByZW5kZXIgY291bGQgZG8gc29tZXRoaW5nIGxpa2Uga2lsbCgpIHRoZSBcIm5leHRcIiBvbmUgaW4gdGhlIGxpbmtlZCBsaXN0LCBvciByZXBhcmVudCBpdC4gSW4gdGhhdCBjYXNlIHdlIG11c3QgcmUtaW5pdGlhdGUgdGhlIHdob2xlIHJlbmRlciB0byBiZSBzYWZlLlxuICAgICAgICAgICAgICByZXR1cm4gdGhpcy5yZW5kZXIodG90YWxUaW1lLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjaGlsZC5yZW5kZXIoY2hpbGQuX3RzID4gMCA/ICh0aW1lIC0gY2hpbGQuX3N0YXJ0KSAqIGNoaWxkLl90cyA6IChjaGlsZC5fZGlydHkgPyBjaGlsZC50b3RhbER1cmF0aW9uKCkgOiBjaGlsZC5fdER1cikgKyAodGltZSAtIGNoaWxkLl9zdGFydCkgKiBjaGlsZC5fdHMsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSk7XG5cbiAgICAgICAgICAgIGlmICh0aW1lICE9PSB0aGlzLl90aW1lIHx8ICF0aGlzLl90cyAmJiAhcHJldlBhdXNlZCkge1xuICAgICAgICAgICAgICAvL2luIGNhc2UgYSB0d2VlbiBwYXVzZXMgb3Igc2Vla3MgdGhlIHRpbWVsaW5lIHdoZW4gcmVuZGVyaW5nLCBsaWtlIGluc2lkZSBvZiBhbiBvblVwZGF0ZS9vbkNvbXBsZXRlXG4gICAgICAgICAgICAgIHBhdXNlVHdlZW4gPSAwO1xuICAgICAgICAgICAgICBuZXh0ICYmICh0VGltZSArPSB0aGlzLl96VGltZSA9IC1fdGlueU51bSk7IC8vIGl0IGRpZG4ndCBmaW5pc2ggcmVuZGVyaW5nLCBzbyBmbGFnIHpUaW1lIGFzIG5lZ2F0aXZlIHNvIHRoYXQgc28gdGhhdCB0aGUgbmV4dCB0aW1lIHJlbmRlcigpIGlzIGNhbGxlZCBpdCdsbCBiZSBmb3JjZWQgKHRvIHJlbmRlciBhbnkgcmVtYWluaW5nIGNoaWxkcmVuKVxuXG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGNoaWxkID0gbmV4dDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZm9yY2UgPSBmb3JjZSB8fCBfcmV2ZXJ0aW5nOyAvLyBpZiByZXZlcnRpbmcsIHdlIHNob3VsZCBhbHdheXMgZm9yY2UgcmVuZGVycy4gSWYsIGZvciBleGFtcGxlLCBhIC5mcm9tVG8oKSB0d2VlbiB3aXRoIGEgc3RhZ2dlciAod2hpY2ggY3JlYXRlcyBhbiBpbnRlcm5hbCB0aW1lbGluZSkgZ2V0cyByZXZlcnRlZCBCRUZPUkUgc29tZSBvZiBpdHMgY2hpbGQgdHdlZW5zIHJlbmRlciBmb3IgdGhlIGZpcnN0IHRpbWUsIGl0IG1heSBub3QgcHJvcGVybHkgdHJpZ2dlciB0aGVtIHRvIHJldmVydC5cblxuICAgICAgICBjaGlsZCA9IHRoaXMuX2xhc3Q7XG4gICAgICAgIHZhciBhZGp1c3RlZFRpbWUgPSB0b3RhbFRpbWUgPCAwID8gdG90YWxUaW1lIDogdGltZTsgLy93aGVuIHRoZSBwbGF5aGVhZCBnb2VzIGJhY2t3YXJkIGJleW9uZCB0aGUgc3RhcnQgb2YgdGhpcyB0aW1lbGluZSwgd2UgbXVzdCBwYXNzIHRoYXQgaW5mb3JtYXRpb24gZG93biB0byB0aGUgY2hpbGQgYW5pbWF0aW9ucyBzbyB0aGF0IHplcm8tZHVyYXRpb24gdHdlZW5zIGtub3cgd2hldGhlciB0byByZW5kZXIgdGhlaXIgc3RhcnRpbmcgb3IgZW5kaW5nIHZhbHVlcy5cblxuICAgICAgICB3aGlsZSAoY2hpbGQpIHtcbiAgICAgICAgICBuZXh0ID0gY2hpbGQuX3ByZXY7XG5cbiAgICAgICAgICBpZiAoKGNoaWxkLl9hY3QgfHwgYWRqdXN0ZWRUaW1lIDw9IGNoaWxkLl9lbmQpICYmIGNoaWxkLl90cyAmJiBwYXVzZVR3ZWVuICE9PSBjaGlsZCkge1xuICAgICAgICAgICAgaWYgKGNoaWxkLnBhcmVudCAhPT0gdGhpcykge1xuICAgICAgICAgICAgICAvLyBhbiBleHRyZW1lIGVkZ2UgY2FzZSAtIHRoZSBjaGlsZCdzIHJlbmRlciBjb3VsZCBkbyBzb21ldGhpbmcgbGlrZSBraWxsKCkgdGhlIFwibmV4dFwiIG9uZSBpbiB0aGUgbGlua2VkIGxpc3QsIG9yIHJlcGFyZW50IGl0LiBJbiB0aGF0IGNhc2Ugd2UgbXVzdCByZS1pbml0aWF0ZSB0aGUgd2hvbGUgcmVuZGVyIHRvIGJlIHNhZmUuXG4gICAgICAgICAgICAgIHJldHVybiB0aGlzLnJlbmRlcih0b3RhbFRpbWUsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNoaWxkLnJlbmRlcihjaGlsZC5fdHMgPiAwID8gKGFkanVzdGVkVGltZSAtIGNoaWxkLl9zdGFydCkgKiBjaGlsZC5fdHMgOiAoY2hpbGQuX2RpcnR5ID8gY2hpbGQudG90YWxEdXJhdGlvbigpIDogY2hpbGQuX3REdXIpICsgKGFkanVzdGVkVGltZSAtIGNoaWxkLl9zdGFydCkgKiBjaGlsZC5fdHMsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSk7XG5cbiAgICAgICAgICAgIGlmICh0aW1lICE9PSB0aGlzLl90aW1lIHx8ICF0aGlzLl90cyAmJiAhcHJldlBhdXNlZCkge1xuICAgICAgICAgICAgICAvL2luIGNhc2UgYSB0d2VlbiBwYXVzZXMgb3Igc2Vla3MgdGhlIHRpbWVsaW5lIHdoZW4gcmVuZGVyaW5nLCBsaWtlIGluc2lkZSBvZiBhbiBvblVwZGF0ZS9vbkNvbXBsZXRlXG4gICAgICAgICAgICAgIHBhdXNlVHdlZW4gPSAwO1xuICAgICAgICAgICAgICBuZXh0ICYmICh0VGltZSArPSB0aGlzLl96VGltZSA9IGFkanVzdGVkVGltZSA/IC1fdGlueU51bSA6IF90aW55TnVtKTsgLy8gaXQgZGlkbid0IGZpbmlzaCByZW5kZXJpbmcsIHNvIGFkanVzdCB6VGltZSBzbyB0aGF0IHNvIHRoYXQgdGhlIG5leHQgdGltZSByZW5kZXIoKSBpcyBjYWxsZWQgaXQnbGwgYmUgZm9yY2VkICh0byByZW5kZXIgYW55IHJlbWFpbmluZyBjaGlsZHJlbilcblxuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjaGlsZCA9IG5leHQ7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHBhdXNlVHdlZW4gJiYgIXN1cHByZXNzRXZlbnRzKSB7XG4gICAgICAgIHRoaXMucGF1c2UoKTtcbiAgICAgICAgcGF1c2VUd2Vlbi5yZW5kZXIodGltZSA+PSBwcmV2VGltZSA/IDAgOiAtX3RpbnlOdW0pLl96VGltZSA9IHRpbWUgPj0gcHJldlRpbWUgPyAxIDogLTE7XG5cbiAgICAgICAgaWYgKHRoaXMuX3RzKSB7XG4gICAgICAgICAgLy90aGUgY2FsbGJhY2sgcmVzdW1lZCBwbGF5YmFjayEgU28gc2luY2Ugd2UgbWF5IGhhdmUgaGVsZCBiYWNrIHRoZSBwbGF5aGVhZCBkdWUgdG8gd2hlcmUgdGhlIHBhdXNlIGlzIHBvc2l0aW9uZWQsIGdvIGFoZWFkIGFuZCBqdW1wIHRvIHdoZXJlIGl0J3MgU1VQUE9TRUQgdG8gYmUgKGlmIG5vIHBhdXNlIGhhcHBlbmVkKS5cbiAgICAgICAgICB0aGlzLl9zdGFydCA9IHByZXZTdGFydDsgLy9pZiB0aGUgcGF1c2Ugd2FzIGF0IGFuIGVhcmxpZXIgdGltZSBhbmQgdGhlIHVzZXIgcmVzdW1lZCBpbiB0aGUgY2FsbGJhY2ssIGl0IGNvdWxkIHJlcG9zaXRpb24gdGhlIHRpbWVsaW5lIChjaGFuZ2luZyBpdHMgc3RhcnRUaW1lKSwgdGhyb3dpbmcgdGhpbmdzIG9mZiBzbGlnaHRseSwgc28gd2UgbWFrZSBzdXJlIHRoZSBfc3RhcnQgZG9lc24ndCBzaGlmdC5cblxuICAgICAgICAgIF9zZXRFbmQodGhpcyk7XG5cbiAgICAgICAgICByZXR1cm4gdGhpcy5yZW5kZXIodG90YWxUaW1lLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX29uVXBkYXRlICYmICFzdXBwcmVzc0V2ZW50cyAmJiBfY2FsbGJhY2sodGhpcywgXCJvblVwZGF0ZVwiLCB0cnVlKTtcbiAgICAgIGlmICh0VGltZSA9PT0gdER1ciAmJiB0aGlzLl90VGltZSA+PSB0aGlzLnRvdGFsRHVyYXRpb24oKSB8fCAhdFRpbWUgJiYgcHJldlRpbWUpIGlmIChwcmV2U3RhcnQgPT09IHRoaXMuX3N0YXJ0IHx8IE1hdGguYWJzKHRpbWVTY2FsZSkgIT09IE1hdGguYWJzKHRoaXMuX3RzKSkgaWYgKCF0aGlzLl9sb2NrKSB7XG4gICAgICAgIC8vIHJlbWVtYmVyLCBhIGNoaWxkJ3MgY2FsbGJhY2sgbWF5IGFsdGVyIHRoaXMgdGltZWxpbmUncyBwbGF5aGVhZCBvciB0aW1lU2NhbGUgd2hpY2ggaXMgd2h5IHdlIG5lZWQgdG8gYWRkIHNvbWUgb2YgdGhlc2UgY2hlY2tzLlxuICAgICAgICAodG90YWxUaW1lIHx8ICFkdXIpICYmICh0VGltZSA9PT0gdER1ciAmJiB0aGlzLl90cyA+IDAgfHwgIXRUaW1lICYmIHRoaXMuX3RzIDwgMCkgJiYgX3JlbW92ZUZyb21QYXJlbnQodGhpcywgMSk7IC8vIGRvbid0IHJlbW92ZSBpZiB0aGUgdGltZWxpbmUgaXMgcmV2ZXJzZWQgYW5kIHRoZSBwbGF5aGVhZCBpc24ndCBhdCAwLCBvdGhlcndpc2UgdGwucHJvZ3Jlc3MoMSkucmV2ZXJzZSgpIHdvbid0IHdvcmsuIE9ubHkgcmVtb3ZlIGlmIHRoZSBwbGF5aGVhZCBpcyBhdCB0aGUgZW5kIGFuZCB0aW1lU2NhbGUgaXMgcG9zaXRpdmUsIG9yIGlmIHRoZSBwbGF5aGVhZCBpcyBhdCAwIGFuZCB0aGUgdGltZVNjYWxlIGlzIG5lZ2F0aXZlLlxuXG4gICAgICAgIGlmICghc3VwcHJlc3NFdmVudHMgJiYgISh0b3RhbFRpbWUgPCAwICYmICFwcmV2VGltZSkgJiYgKHRUaW1lIHx8IHByZXZUaW1lIHx8ICF0RHVyKSkge1xuICAgICAgICAgIF9jYWxsYmFjayh0aGlzLCB0VGltZSA9PT0gdER1ciAmJiB0b3RhbFRpbWUgPj0gMCA/IFwib25Db21wbGV0ZVwiIDogXCJvblJldmVyc2VDb21wbGV0ZVwiLCB0cnVlKTtcblxuICAgICAgICAgIHRoaXMuX3Byb20gJiYgISh0VGltZSA8IHREdXIgJiYgdGhpcy50aW1lU2NhbGUoKSA+IDApICYmIHRoaXMuX3Byb20oKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90bzIuYWRkID0gZnVuY3Rpb24gYWRkKGNoaWxkLCBwb3NpdGlvbikge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgX2lzTnVtYmVyKHBvc2l0aW9uKSB8fCAocG9zaXRpb24gPSBfcGFyc2VQb3NpdGlvbih0aGlzLCBwb3NpdGlvbiwgY2hpbGQpKTtcblxuICAgIGlmICghKGNoaWxkIGluc3RhbmNlb2YgQW5pbWF0aW9uKSkge1xuICAgICAgaWYgKF9pc0FycmF5KGNoaWxkKSkge1xuICAgICAgICBjaGlsZC5mb3JFYWNoKGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXMyLmFkZChvYmosIHBvc2l0aW9uKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICBpZiAoX2lzU3RyaW5nKGNoaWxkKSkge1xuICAgICAgICByZXR1cm4gdGhpcy5hZGRMYWJlbChjaGlsZCwgcG9zaXRpb24pO1xuICAgICAgfVxuXG4gICAgICBpZiAoX2lzRnVuY3Rpb24oY2hpbGQpKSB7XG4gICAgICAgIGNoaWxkID0gVHdlZW4uZGVsYXllZENhbGwoMCwgY2hpbGQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMgIT09IGNoaWxkID8gX2FkZFRvVGltZWxpbmUodGhpcywgY2hpbGQsIHBvc2l0aW9uKSA6IHRoaXM7IC8vZG9uJ3QgYWxsb3cgYSB0aW1lbGluZSB0byBiZSBhZGRlZCB0byBpdHNlbGYgYXMgYSBjaGlsZCFcbiAgfTtcblxuICBfcHJvdG8yLmdldENoaWxkcmVuID0gZnVuY3Rpb24gZ2V0Q2hpbGRyZW4obmVzdGVkLCB0d2VlbnMsIHRpbWVsaW5lcywgaWdub3JlQmVmb3JlVGltZSkge1xuICAgIGlmIChuZXN0ZWQgPT09IHZvaWQgMCkge1xuICAgICAgbmVzdGVkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAodHdlZW5zID09PSB2b2lkIDApIHtcbiAgICAgIHR3ZWVucyA9IHRydWU7XG4gICAgfVxuXG4gICAgaWYgKHRpbWVsaW5lcyA9PT0gdm9pZCAwKSB7XG4gICAgICB0aW1lbGluZXMgPSB0cnVlO1xuICAgIH1cblxuICAgIGlmIChpZ25vcmVCZWZvcmVUaW1lID09PSB2b2lkIDApIHtcbiAgICAgIGlnbm9yZUJlZm9yZVRpbWUgPSAtX2JpZ051bTtcbiAgICB9XG5cbiAgICB2YXIgYSA9IFtdLFxuICAgICAgICBjaGlsZCA9IHRoaXMuX2ZpcnN0O1xuXG4gICAgd2hpbGUgKGNoaWxkKSB7XG4gICAgICBpZiAoY2hpbGQuX3N0YXJ0ID49IGlnbm9yZUJlZm9yZVRpbWUpIHtcbiAgICAgICAgaWYgKGNoaWxkIGluc3RhbmNlb2YgVHdlZW4pIHtcbiAgICAgICAgICB0d2VlbnMgJiYgYS5wdXNoKGNoaWxkKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aW1lbGluZXMgJiYgYS5wdXNoKGNoaWxkKTtcbiAgICAgICAgICBuZXN0ZWQgJiYgYS5wdXNoLmFwcGx5KGEsIGNoaWxkLmdldENoaWxkcmVuKHRydWUsIHR3ZWVucywgdGltZWxpbmVzKSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgY2hpbGQgPSBjaGlsZC5fbmV4dDtcbiAgICB9XG5cbiAgICByZXR1cm4gYTtcbiAgfTtcblxuICBfcHJvdG8yLmdldEJ5SWQgPSBmdW5jdGlvbiBnZXRCeUlkKGlkKSB7XG4gICAgdmFyIGFuaW1hdGlvbnMgPSB0aGlzLmdldENoaWxkcmVuKDEsIDEsIDEpLFxuICAgICAgICBpID0gYW5pbWF0aW9ucy5sZW5ndGg7XG5cbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICBpZiAoYW5pbWF0aW9uc1tpXS52YXJzLmlkID09PSBpZCkge1xuICAgICAgICByZXR1cm4gYW5pbWF0aW9uc1tpXTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvMi5yZW1vdmUgPSBmdW5jdGlvbiByZW1vdmUoY2hpbGQpIHtcbiAgICBpZiAoX2lzU3RyaW5nKGNoaWxkKSkge1xuICAgICAgcmV0dXJuIHRoaXMucmVtb3ZlTGFiZWwoY2hpbGQpO1xuICAgIH1cblxuICAgIGlmIChfaXNGdW5jdGlvbihjaGlsZCkpIHtcbiAgICAgIHJldHVybiB0aGlzLmtpbGxUd2VlbnNPZihjaGlsZCk7XG4gICAgfVxuXG4gICAgX3JlbW92ZUxpbmtlZExpc3RJdGVtKHRoaXMsIGNoaWxkKTtcblxuICAgIGlmIChjaGlsZCA9PT0gdGhpcy5fcmVjZW50KSB7XG4gICAgICB0aGlzLl9yZWNlbnQgPSB0aGlzLl9sYXN0O1xuICAgIH1cblxuICAgIHJldHVybiBfdW5jYWNoZSh0aGlzKTtcbiAgfTtcblxuICBfcHJvdG8yLnRvdGFsVGltZSA9IGZ1bmN0aW9uIHRvdGFsVGltZShfdG90YWxUaW1lMiwgc3VwcHJlc3NFdmVudHMpIHtcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiB0aGlzLl90VGltZTtcbiAgICB9XG5cbiAgICB0aGlzLl9mb3JjaW5nID0gMTtcblxuICAgIGlmICghdGhpcy5fZHAgJiYgdGhpcy5fdHMpIHtcbiAgICAgIC8vc3BlY2lhbCBjYXNlIGZvciB0aGUgZ2xvYmFsIHRpbWVsaW5lIChvciBhbnkgb3RoZXIgdGhhdCBoYXMgbm8gcGFyZW50IG9yIGRldGFjaGVkIHBhcmVudCkuXG4gICAgICB0aGlzLl9zdGFydCA9IF9yb3VuZFByZWNpc2UoX3RpY2tlci50aW1lIC0gKHRoaXMuX3RzID4gMCA/IF90b3RhbFRpbWUyIC8gdGhpcy5fdHMgOiAodGhpcy50b3RhbER1cmF0aW9uKCkgLSBfdG90YWxUaW1lMikgLyAtdGhpcy5fdHMpKTtcbiAgICB9XG5cbiAgICBfQW5pbWF0aW9uLnByb3RvdHlwZS50b3RhbFRpbWUuY2FsbCh0aGlzLCBfdG90YWxUaW1lMiwgc3VwcHJlc3NFdmVudHMpO1xuXG4gICAgdGhpcy5fZm9yY2luZyA9IDA7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgX3Byb3RvMi5hZGRMYWJlbCA9IGZ1bmN0aW9uIGFkZExhYmVsKGxhYmVsLCBwb3NpdGlvbikge1xuICAgIHRoaXMubGFiZWxzW2xhYmVsXSA9IF9wYXJzZVBvc2l0aW9uKHRoaXMsIHBvc2l0aW9uKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBfcHJvdG8yLnJlbW92ZUxhYmVsID0gZnVuY3Rpb24gcmVtb3ZlTGFiZWwobGFiZWwpIHtcbiAgICBkZWxldGUgdGhpcy5sYWJlbHNbbGFiZWxdO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90bzIuYWRkUGF1c2UgPSBmdW5jdGlvbiBhZGRQYXVzZShwb3NpdGlvbiwgY2FsbGJhY2ssIHBhcmFtcykge1xuICAgIHZhciB0ID0gVHdlZW4uZGVsYXllZENhbGwoMCwgY2FsbGJhY2sgfHwgX2VtcHR5RnVuYywgcGFyYW1zKTtcbiAgICB0LmRhdGEgPSBcImlzUGF1c2VcIjtcbiAgICB0aGlzLl9oYXNQYXVzZSA9IDE7XG4gICAgcmV0dXJuIF9hZGRUb1RpbWVsaW5lKHRoaXMsIHQsIF9wYXJzZVBvc2l0aW9uKHRoaXMsIHBvc2l0aW9uKSk7XG4gIH07XG5cbiAgX3Byb3RvMi5yZW1vdmVQYXVzZSA9IGZ1bmN0aW9uIHJlbW92ZVBhdXNlKHBvc2l0aW9uKSB7XG4gICAgdmFyIGNoaWxkID0gdGhpcy5fZmlyc3Q7XG4gICAgcG9zaXRpb24gPSBfcGFyc2VQb3NpdGlvbih0aGlzLCBwb3NpdGlvbik7XG5cbiAgICB3aGlsZSAoY2hpbGQpIHtcbiAgICAgIGlmIChjaGlsZC5fc3RhcnQgPT09IHBvc2l0aW9uICYmIGNoaWxkLmRhdGEgPT09IFwiaXNQYXVzZVwiKSB7XG4gICAgICAgIF9yZW1vdmVGcm9tUGFyZW50KGNoaWxkKTtcbiAgICAgIH1cblxuICAgICAgY2hpbGQgPSBjaGlsZC5fbmV4dDtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvMi5raWxsVHdlZW5zT2YgPSBmdW5jdGlvbiBraWxsVHdlZW5zT2YodGFyZ2V0cywgcHJvcHMsIG9ubHlBY3RpdmUpIHtcbiAgICB2YXIgdHdlZW5zID0gdGhpcy5nZXRUd2VlbnNPZih0YXJnZXRzLCBvbmx5QWN0aXZlKSxcbiAgICAgICAgaSA9IHR3ZWVucy5sZW5ndGg7XG5cbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICBfb3ZlcndyaXRpbmdUd2VlbiAhPT0gdHdlZW5zW2ldICYmIHR3ZWVuc1tpXS5raWxsKHRhcmdldHMsIHByb3BzKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBfcHJvdG8yLmdldFR3ZWVuc09mID0gZnVuY3Rpb24gZ2V0VHdlZW5zT2YodGFyZ2V0cywgb25seUFjdGl2ZSkge1xuICAgIHZhciBhID0gW10sXG4gICAgICAgIHBhcnNlZFRhcmdldHMgPSB0b0FycmF5KHRhcmdldHMpLFxuICAgICAgICBjaGlsZCA9IHRoaXMuX2ZpcnN0LFxuICAgICAgICBpc0dsb2JhbFRpbWUgPSBfaXNOdW1iZXIob25seUFjdGl2ZSksXG4gICAgICAgIC8vIGEgbnVtYmVyIGlzIGludGVycHJldGVkIGFzIGEgZ2xvYmFsIHRpbWUuIElmIHRoZSBhbmltYXRpb24gc3BhbnNcbiAgICBjaGlsZHJlbjtcblxuICAgIHdoaWxlIChjaGlsZCkge1xuICAgICAgaWYgKGNoaWxkIGluc3RhbmNlb2YgVHdlZW4pIHtcbiAgICAgICAgaWYgKF9hcnJheUNvbnRhaW5zQW55KGNoaWxkLl90YXJnZXRzLCBwYXJzZWRUYXJnZXRzKSAmJiAoaXNHbG9iYWxUaW1lID8gKCFfb3ZlcndyaXRpbmdUd2VlbiB8fCBjaGlsZC5faW5pdHRlZCAmJiBjaGlsZC5fdHMpICYmIGNoaWxkLmdsb2JhbFRpbWUoMCkgPD0gb25seUFjdGl2ZSAmJiBjaGlsZC5nbG9iYWxUaW1lKGNoaWxkLnRvdGFsRHVyYXRpb24oKSkgPiBvbmx5QWN0aXZlIDogIW9ubHlBY3RpdmUgfHwgY2hpbGQuaXNBY3RpdmUoKSkpIHtcbiAgICAgICAgICAvLyBub3RlOiBpZiB0aGlzIGlzIGZvciBvdmVyd3JpdGluZywgaXQgc2hvdWxkIG9ubHkgYmUgZm9yIHR3ZWVucyB0aGF0IGFyZW4ndCBwYXVzZWQgYW5kIGFyZSBpbml0dGVkLlxuICAgICAgICAgIGEucHVzaChjaGlsZCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoKGNoaWxkcmVuID0gY2hpbGQuZ2V0VHdlZW5zT2YocGFyc2VkVGFyZ2V0cywgb25seUFjdGl2ZSkpLmxlbmd0aCkge1xuICAgICAgICBhLnB1c2guYXBwbHkoYSwgY2hpbGRyZW4pO1xuICAgICAgfVxuXG4gICAgICBjaGlsZCA9IGNoaWxkLl9uZXh0O1xuICAgIH1cblxuICAgIHJldHVybiBhO1xuICB9IC8vIHBvdGVudGlhbCBmdXR1cmUgZmVhdHVyZSAtIHRhcmdldHMoKSBvbiB0aW1lbGluZXNcbiAgLy8gdGFyZ2V0cygpIHtcbiAgLy8gXHRsZXQgcmVzdWx0ID0gW107XG4gIC8vIFx0dGhpcy5nZXRDaGlsZHJlbih0cnVlLCB0cnVlLCBmYWxzZSkuZm9yRWFjaCh0ID0+IHJlc3VsdC5wdXNoKC4uLnQudGFyZ2V0cygpKSk7XG4gIC8vIFx0cmV0dXJuIHJlc3VsdC5maWx0ZXIoKHYsIGkpID0+IHJlc3VsdC5pbmRleE9mKHYpID09PSBpKTtcbiAgLy8gfVxuICA7XG5cbiAgX3Byb3RvMi50d2VlblRvID0gZnVuY3Rpb24gdHdlZW5Ubyhwb3NpdGlvbiwgdmFycykge1xuICAgIHZhcnMgPSB2YXJzIHx8IHt9O1xuXG4gICAgdmFyIHRsID0gdGhpcyxcbiAgICAgICAgZW5kVGltZSA9IF9wYXJzZVBvc2l0aW9uKHRsLCBwb3NpdGlvbiksXG4gICAgICAgIF92YXJzID0gdmFycyxcbiAgICAgICAgc3RhcnRBdCA9IF92YXJzLnN0YXJ0QXQsXG4gICAgICAgIF9vblN0YXJ0ID0gX3ZhcnMub25TdGFydCxcbiAgICAgICAgb25TdGFydFBhcmFtcyA9IF92YXJzLm9uU3RhcnRQYXJhbXMsXG4gICAgICAgIGltbWVkaWF0ZVJlbmRlciA9IF92YXJzLmltbWVkaWF0ZVJlbmRlcixcbiAgICAgICAgaW5pdHRlZCxcbiAgICAgICAgdHdlZW4gPSBUd2Vlbi50byh0bCwgX3NldERlZmF1bHRzKHtcbiAgICAgIGVhc2U6IHZhcnMuZWFzZSB8fCBcIm5vbmVcIixcbiAgICAgIGxhenk6IGZhbHNlLFxuICAgICAgaW1tZWRpYXRlUmVuZGVyOiBmYWxzZSxcbiAgICAgIHRpbWU6IGVuZFRpbWUsXG4gICAgICBvdmVyd3JpdGU6IFwiYXV0b1wiLFxuICAgICAgZHVyYXRpb246IHZhcnMuZHVyYXRpb24gfHwgTWF0aC5hYnMoKGVuZFRpbWUgLSAoc3RhcnRBdCAmJiBcInRpbWVcIiBpbiBzdGFydEF0ID8gc3RhcnRBdC50aW1lIDogdGwuX3RpbWUpKSAvIHRsLnRpbWVTY2FsZSgpKSB8fCBfdGlueU51bSxcbiAgICAgIG9uU3RhcnQ6IGZ1bmN0aW9uIG9uU3RhcnQoKSB7XG4gICAgICAgIHRsLnBhdXNlKCk7XG5cbiAgICAgICAgaWYgKCFpbml0dGVkKSB7XG4gICAgICAgICAgdmFyIGR1cmF0aW9uID0gdmFycy5kdXJhdGlvbiB8fCBNYXRoLmFicygoZW5kVGltZSAtIChzdGFydEF0ICYmIFwidGltZVwiIGluIHN0YXJ0QXQgPyBzdGFydEF0LnRpbWUgOiB0bC5fdGltZSkpIC8gdGwudGltZVNjYWxlKCkpO1xuICAgICAgICAgIHR3ZWVuLl9kdXIgIT09IGR1cmF0aW9uICYmIF9zZXREdXJhdGlvbih0d2VlbiwgZHVyYXRpb24sIDAsIDEpLnJlbmRlcih0d2Vlbi5fdGltZSwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgICAgaW5pdHRlZCA9IDE7XG4gICAgICAgIH1cblxuICAgICAgICBfb25TdGFydCAmJiBfb25TdGFydC5hcHBseSh0d2Vlbiwgb25TdGFydFBhcmFtcyB8fCBbXSk7IC8vaW4gY2FzZSB0aGUgdXNlciBoYWQgYW4gb25TdGFydCBpbiB0aGUgdmFycyAtIHdlIGRvbid0IHdhbnQgdG8gb3ZlcndyaXRlIGl0LlxuICAgICAgfVxuICAgIH0sIHZhcnMpKTtcblxuICAgIHJldHVybiBpbW1lZGlhdGVSZW5kZXIgPyB0d2Vlbi5yZW5kZXIoMCkgOiB0d2VlbjtcbiAgfTtcblxuICBfcHJvdG8yLnR3ZWVuRnJvbVRvID0gZnVuY3Rpb24gdHdlZW5Gcm9tVG8oZnJvbVBvc2l0aW9uLCB0b1Bvc2l0aW9uLCB2YXJzKSB7XG4gICAgcmV0dXJuIHRoaXMudHdlZW5Ubyh0b1Bvc2l0aW9uLCBfc2V0RGVmYXVsdHMoe1xuICAgICAgc3RhcnRBdDoge1xuICAgICAgICB0aW1lOiBfcGFyc2VQb3NpdGlvbih0aGlzLCBmcm9tUG9zaXRpb24pXG4gICAgICB9XG4gICAgfSwgdmFycykpO1xuICB9O1xuXG4gIF9wcm90bzIucmVjZW50ID0gZnVuY3Rpb24gcmVjZW50KCkge1xuICAgIHJldHVybiB0aGlzLl9yZWNlbnQ7XG4gIH07XG5cbiAgX3Byb3RvMi5uZXh0TGFiZWwgPSBmdW5jdGlvbiBuZXh0TGFiZWwoYWZ0ZXJUaW1lKSB7XG4gICAgaWYgKGFmdGVyVGltZSA9PT0gdm9pZCAwKSB7XG4gICAgICBhZnRlclRpbWUgPSB0aGlzLl90aW1lO1xuICAgIH1cblxuICAgIHJldHVybiBfZ2V0TGFiZWxJbkRpcmVjdGlvbih0aGlzLCBfcGFyc2VQb3NpdGlvbih0aGlzLCBhZnRlclRpbWUpKTtcbiAgfTtcblxuICBfcHJvdG8yLnByZXZpb3VzTGFiZWwgPSBmdW5jdGlvbiBwcmV2aW91c0xhYmVsKGJlZm9yZVRpbWUpIHtcbiAgICBpZiAoYmVmb3JlVGltZSA9PT0gdm9pZCAwKSB7XG4gICAgICBiZWZvcmVUaW1lID0gdGhpcy5fdGltZTtcbiAgICB9XG5cbiAgICByZXR1cm4gX2dldExhYmVsSW5EaXJlY3Rpb24odGhpcywgX3BhcnNlUG9zaXRpb24odGhpcywgYmVmb3JlVGltZSksIDEpO1xuICB9O1xuXG4gIF9wcm90bzIuY3VycmVudExhYmVsID0gZnVuY3Rpb24gY3VycmVudExhYmVsKHZhbHVlKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyB0aGlzLnNlZWsodmFsdWUsIHRydWUpIDogdGhpcy5wcmV2aW91c0xhYmVsKHRoaXMuX3RpbWUgKyBfdGlueU51bSk7XG4gIH07XG5cbiAgX3Byb3RvMi5zaGlmdENoaWxkcmVuID0gZnVuY3Rpb24gc2hpZnRDaGlsZHJlbihhbW91bnQsIGFkanVzdExhYmVscywgaWdub3JlQmVmb3JlVGltZSkge1xuICAgIGlmIChpZ25vcmVCZWZvcmVUaW1lID09PSB2b2lkIDApIHtcbiAgICAgIGlnbm9yZUJlZm9yZVRpbWUgPSAwO1xuICAgIH1cblxuICAgIHZhciBjaGlsZCA9IHRoaXMuX2ZpcnN0LFxuICAgICAgICBsYWJlbHMgPSB0aGlzLmxhYmVscyxcbiAgICAgICAgcDtcblxuICAgIHdoaWxlIChjaGlsZCkge1xuICAgICAgaWYgKGNoaWxkLl9zdGFydCA+PSBpZ25vcmVCZWZvcmVUaW1lKSB7XG4gICAgICAgIGNoaWxkLl9zdGFydCArPSBhbW91bnQ7XG4gICAgICAgIGNoaWxkLl9lbmQgKz0gYW1vdW50O1xuICAgICAgfVxuXG4gICAgICBjaGlsZCA9IGNoaWxkLl9uZXh0O1xuICAgIH1cblxuICAgIGlmIChhZGp1c3RMYWJlbHMpIHtcbiAgICAgIGZvciAocCBpbiBsYWJlbHMpIHtcbiAgICAgICAgaWYgKGxhYmVsc1twXSA+PSBpZ25vcmVCZWZvcmVUaW1lKSB7XG4gICAgICAgICAgbGFiZWxzW3BdICs9IGFtb3VudDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBfdW5jYWNoZSh0aGlzKTtcbiAgfTtcblxuICBfcHJvdG8yLmludmFsaWRhdGUgPSBmdW5jdGlvbiBpbnZhbGlkYXRlKCkge1xuICAgIHZhciBjaGlsZCA9IHRoaXMuX2ZpcnN0O1xuICAgIHRoaXMuX2xvY2sgPSAwO1xuXG4gICAgd2hpbGUgKGNoaWxkKSB7XG4gICAgICBjaGlsZC5pbnZhbGlkYXRlKCk7XG4gICAgICBjaGlsZCA9IGNoaWxkLl9uZXh0O1xuICAgIH1cblxuICAgIHJldHVybiBfQW5pbWF0aW9uLnByb3RvdHlwZS5pbnZhbGlkYXRlLmNhbGwodGhpcyk7XG4gIH07XG5cbiAgX3Byb3RvMi5jbGVhciA9IGZ1bmN0aW9uIGNsZWFyKGluY2x1ZGVMYWJlbHMpIHtcbiAgICBpZiAoaW5jbHVkZUxhYmVscyA9PT0gdm9pZCAwKSB7XG4gICAgICBpbmNsdWRlTGFiZWxzID0gdHJ1ZTtcbiAgICB9XG5cbiAgICB2YXIgY2hpbGQgPSB0aGlzLl9maXJzdCxcbiAgICAgICAgbmV4dDtcblxuICAgIHdoaWxlIChjaGlsZCkge1xuICAgICAgbmV4dCA9IGNoaWxkLl9uZXh0O1xuICAgICAgdGhpcy5yZW1vdmUoY2hpbGQpO1xuICAgICAgY2hpbGQgPSBuZXh0O1xuICAgIH1cblxuICAgIHRoaXMuX2RwICYmICh0aGlzLl90aW1lID0gdGhpcy5fdFRpbWUgPSB0aGlzLl9wVGltZSA9IDApO1xuICAgIGluY2x1ZGVMYWJlbHMgJiYgKHRoaXMubGFiZWxzID0ge30pO1xuICAgIHJldHVybiBfdW5jYWNoZSh0aGlzKTtcbiAgfTtcblxuICBfcHJvdG8yLnRvdGFsRHVyYXRpb24gPSBmdW5jdGlvbiB0b3RhbER1cmF0aW9uKHZhbHVlKSB7XG4gICAgdmFyIG1heCA9IDAsXG4gICAgICAgIHNlbGYgPSB0aGlzLFxuICAgICAgICBjaGlsZCA9IHNlbGYuX2xhc3QsXG4gICAgICAgIHByZXZTdGFydCA9IF9iaWdOdW0sXG4gICAgICAgIHByZXYsXG4gICAgICAgIHN0YXJ0LFxuICAgICAgICBwYXJlbnQ7XG5cbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIHNlbGYudGltZVNjYWxlKChzZWxmLl9yZXBlYXQgPCAwID8gc2VsZi5kdXJhdGlvbigpIDogc2VsZi50b3RhbER1cmF0aW9uKCkpIC8gKHNlbGYucmV2ZXJzZWQoKSA/IC12YWx1ZSA6IHZhbHVlKSk7XG4gICAgfVxuXG4gICAgaWYgKHNlbGYuX2RpcnR5KSB7XG4gICAgICBwYXJlbnQgPSBzZWxmLnBhcmVudDtcblxuICAgICAgd2hpbGUgKGNoaWxkKSB7XG4gICAgICAgIHByZXYgPSBjaGlsZC5fcHJldjsgLy9yZWNvcmQgaXQgaGVyZSBpbiBjYXNlIHRoZSB0d2VlbiBjaGFuZ2VzIHBvc2l0aW9uIGluIHRoZSBzZXF1ZW5jZS4uLlxuXG4gICAgICAgIGNoaWxkLl9kaXJ0eSAmJiBjaGlsZC50b3RhbER1cmF0aW9uKCk7IC8vY291bGQgY2hhbmdlIHRoZSB0d2Vlbi5fc3RhcnRUaW1lLCBzbyBtYWtlIHN1cmUgdGhlIGFuaW1hdGlvbidzIGNhY2hlIGlzIGNsZWFuIGJlZm9yZSBhbmFseXppbmcgaXQuXG5cbiAgICAgICAgc3RhcnQgPSBjaGlsZC5fc3RhcnQ7XG5cbiAgICAgICAgaWYgKHN0YXJ0ID4gcHJldlN0YXJ0ICYmIHNlbGYuX3NvcnQgJiYgY2hpbGQuX3RzICYmICFzZWxmLl9sb2NrKSB7XG4gICAgICAgICAgLy9pbiBjYXNlIG9uZSBvZiB0aGUgdHdlZW5zIHNoaWZ0ZWQgb3V0IG9mIG9yZGVyLCBpdCBuZWVkcyB0byBiZSByZS1pbnNlcnRlZCBpbnRvIHRoZSBjb3JyZWN0IHBvc2l0aW9uIGluIHRoZSBzZXF1ZW5jZVxuICAgICAgICAgIHNlbGYuX2xvY2sgPSAxOyAvL3ByZXZlbnQgZW5kbGVzcyByZWN1cnNpdmUgY2FsbHMgLSB0aGVyZSBhcmUgbWV0aG9kcyB0aGF0IGdldCB0cmlnZ2VyZWQgdGhhdCBjaGVjayBkdXJhdGlvbi90b3RhbER1cmF0aW9uIHdoZW4gd2UgYWRkKCkuXG5cbiAgICAgICAgICBfYWRkVG9UaW1lbGluZShzZWxmLCBjaGlsZCwgc3RhcnQgLSBjaGlsZC5fZGVsYXksIDEpLl9sb2NrID0gMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwcmV2U3RhcnQgPSBzdGFydDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzdGFydCA8IDAgJiYgY2hpbGQuX3RzKSB7XG4gICAgICAgICAgLy9jaGlsZHJlbiBhcmVuJ3QgYWxsb3dlZCB0byBoYXZlIG5lZ2F0aXZlIHN0YXJ0VGltZXMgdW5sZXNzIHNtb290aENoaWxkVGltaW5nIGlzIHRydWUsIHNvIGFkanVzdCBoZXJlIGlmIG9uZSBpcyBmb3VuZC5cbiAgICAgICAgICBtYXggLT0gc3RhcnQ7XG5cbiAgICAgICAgICBpZiAoIXBhcmVudCAmJiAhc2VsZi5fZHAgfHwgcGFyZW50ICYmIHBhcmVudC5zbW9vdGhDaGlsZFRpbWluZykge1xuICAgICAgICAgICAgc2VsZi5fc3RhcnQgKz0gc3RhcnQgLyBzZWxmLl90cztcbiAgICAgICAgICAgIHNlbGYuX3RpbWUgLT0gc3RhcnQ7XG4gICAgICAgICAgICBzZWxmLl90VGltZSAtPSBzdGFydDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBzZWxmLnNoaWZ0Q2hpbGRyZW4oLXN0YXJ0LCBmYWxzZSwgLTFlOTk5KTtcbiAgICAgICAgICBwcmV2U3RhcnQgPSAwO1xuICAgICAgICB9XG5cbiAgICAgICAgY2hpbGQuX2VuZCA+IG1heCAmJiBjaGlsZC5fdHMgJiYgKG1heCA9IGNoaWxkLl9lbmQpO1xuICAgICAgICBjaGlsZCA9IHByZXY7XG4gICAgICB9XG5cbiAgICAgIF9zZXREdXJhdGlvbihzZWxmLCBzZWxmID09PSBfZ2xvYmFsVGltZWxpbmUgJiYgc2VsZi5fdGltZSA+IG1heCA/IHNlbGYuX3RpbWUgOiBtYXgsIDEsIDEpO1xuXG4gICAgICBzZWxmLl9kaXJ0eSA9IDA7XG4gICAgfVxuXG4gICAgcmV0dXJuIHNlbGYuX3REdXI7XG4gIH07XG5cbiAgVGltZWxpbmUudXBkYXRlUm9vdCA9IGZ1bmN0aW9uIHVwZGF0ZVJvb3QodGltZSkge1xuICAgIGlmIChfZ2xvYmFsVGltZWxpbmUuX3RzKSB7XG4gICAgICBfbGF6eVNhZmVSZW5kZXIoX2dsb2JhbFRpbWVsaW5lLCBfcGFyZW50VG9DaGlsZFRvdGFsVGltZSh0aW1lLCBfZ2xvYmFsVGltZWxpbmUpKTtcblxuICAgICAgX2xhc3RSZW5kZXJlZEZyYW1lID0gX3RpY2tlci5mcmFtZTtcbiAgICB9XG5cbiAgICBpZiAoX3RpY2tlci5mcmFtZSA+PSBfbmV4dEdDRnJhbWUpIHtcbiAgICAgIF9uZXh0R0NGcmFtZSArPSBfY29uZmlnLmF1dG9TbGVlcCB8fCAxMjA7XG4gICAgICB2YXIgY2hpbGQgPSBfZ2xvYmFsVGltZWxpbmUuX2ZpcnN0O1xuICAgICAgaWYgKCFjaGlsZCB8fCAhY2hpbGQuX3RzKSBpZiAoX2NvbmZpZy5hdXRvU2xlZXAgJiYgX3RpY2tlci5fbGlzdGVuZXJzLmxlbmd0aCA8IDIpIHtcbiAgICAgICAgd2hpbGUgKGNoaWxkICYmICFjaGlsZC5fdHMpIHtcbiAgICAgICAgICBjaGlsZCA9IGNoaWxkLl9uZXh0O1xuICAgICAgICB9XG5cbiAgICAgICAgY2hpbGQgfHwgX3RpY2tlci5zbGVlcCgpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICByZXR1cm4gVGltZWxpbmU7XG59KEFuaW1hdGlvbik7XG5cbl9zZXREZWZhdWx0cyhUaW1lbGluZS5wcm90b3R5cGUsIHtcbiAgX2xvY2s6IDAsXG4gIF9oYXNQYXVzZTogMCxcbiAgX2ZvcmNpbmc6IDBcbn0pO1xuXG52YXIgX2FkZENvbXBsZXhTdHJpbmdQcm9wVHdlZW4gPSBmdW5jdGlvbiBfYWRkQ29tcGxleFN0cmluZ1Byb3BUd2Vlbih0YXJnZXQsIHByb3AsIHN0YXJ0LCBlbmQsIHNldHRlciwgc3RyaW5nRmlsdGVyLCBmdW5jUGFyYW0pIHtcbiAgLy9ub3RlOiB3ZSBjYWxsIF9hZGRDb21wbGV4U3RyaW5nUHJvcFR3ZWVuLmNhbGwodHdlZW5JbnN0YW5jZS4uLikgdG8gZW5zdXJlIHRoYXQgaXQncyBzY29wZWQgcHJvcGVybHkuIFdlIG1heSBjYWxsIGl0IGZyb20gd2l0aGluIGEgcGx1Z2luIHRvbywgdGh1cyBcInRoaXNcIiB3b3VsZCByZWZlciB0byB0aGUgcGx1Z2luLlxuICB2YXIgcHQgPSBuZXcgUHJvcFR3ZWVuKHRoaXMuX3B0LCB0YXJnZXQsIHByb3AsIDAsIDEsIF9yZW5kZXJDb21wbGV4U3RyaW5nLCBudWxsLCBzZXR0ZXIpLFxuICAgICAgaW5kZXggPSAwLFxuICAgICAgbWF0Y2hJbmRleCA9IDAsXG4gICAgICByZXN1bHQsXG4gICAgICBzdGFydE51bXMsXG4gICAgICBjb2xvcixcbiAgICAgIGVuZE51bSxcbiAgICAgIGNodW5rLFxuICAgICAgc3RhcnROdW0sXG4gICAgICBoYXNSYW5kb20sXG4gICAgICBhO1xuICBwdC5iID0gc3RhcnQ7XG4gIHB0LmUgPSBlbmQ7XG4gIHN0YXJ0ICs9IFwiXCI7IC8vZW5zdXJlIHZhbHVlcyBhcmUgc3RyaW5nc1xuXG4gIGVuZCArPSBcIlwiO1xuXG4gIGlmIChoYXNSYW5kb20gPSB+ZW5kLmluZGV4T2YoXCJyYW5kb20oXCIpKSB7XG4gICAgZW5kID0gX3JlcGxhY2VSYW5kb20oZW5kKTtcbiAgfVxuXG4gIGlmIChzdHJpbmdGaWx0ZXIpIHtcbiAgICBhID0gW3N0YXJ0LCBlbmRdO1xuICAgIHN0cmluZ0ZpbHRlcihhLCB0YXJnZXQsIHByb3ApOyAvL3Bhc3MgYW4gYXJyYXkgd2l0aCB0aGUgc3RhcnRpbmcgYW5kIGVuZGluZyB2YWx1ZXMgYW5kIGxldCB0aGUgZmlsdGVyIGRvIHdoYXRldmVyIGl0IG5lZWRzIHRvIHRoZSB2YWx1ZXMuXG5cbiAgICBzdGFydCA9IGFbMF07XG4gICAgZW5kID0gYVsxXTtcbiAgfVxuXG4gIHN0YXJ0TnVtcyA9IHN0YXJ0Lm1hdGNoKF9jb21wbGV4U3RyaW5nTnVtRXhwKSB8fCBbXTtcblxuICB3aGlsZSAocmVzdWx0ID0gX2NvbXBsZXhTdHJpbmdOdW1FeHAuZXhlYyhlbmQpKSB7XG4gICAgZW5kTnVtID0gcmVzdWx0WzBdO1xuICAgIGNodW5rID0gZW5kLnN1YnN0cmluZyhpbmRleCwgcmVzdWx0LmluZGV4KTtcblxuICAgIGlmIChjb2xvcikge1xuICAgICAgY29sb3IgPSAoY29sb3IgKyAxKSAlIDU7XG4gICAgfSBlbHNlIGlmIChjaHVuay5zdWJzdHIoLTUpID09PSBcInJnYmEoXCIpIHtcbiAgICAgIGNvbG9yID0gMTtcbiAgICB9XG5cbiAgICBpZiAoZW5kTnVtICE9PSBzdGFydE51bXNbbWF0Y2hJbmRleCsrXSkge1xuICAgICAgc3RhcnROdW0gPSBwYXJzZUZsb2F0KHN0YXJ0TnVtc1ttYXRjaEluZGV4IC0gMV0pIHx8IDA7IC8vdGhlc2UgbmVzdGVkIFByb3BUd2VlbnMgYXJlIGhhbmRsZWQgaW4gYSBzcGVjaWFsIHdheSAtIHdlJ2xsIG5ldmVyIGFjdHVhbGx5IGNhbGwgYSByZW5kZXIgb3Igc2V0dGVyIG1ldGhvZCBvbiB0aGVtLiBXZSdsbCBqdXN0IGxvb3AgdGhyb3VnaCB0aGVtIGluIHRoZSBwYXJlbnQgY29tcGxleCBzdHJpbmcgUHJvcFR3ZWVuJ3MgcmVuZGVyIG1ldGhvZC5cblxuICAgICAgcHQuX3B0ID0ge1xuICAgICAgICBfbmV4dDogcHQuX3B0LFxuICAgICAgICBwOiBjaHVuayB8fCBtYXRjaEluZGV4ID09PSAxID8gY2h1bmsgOiBcIixcIixcbiAgICAgICAgLy9ub3RlOiBTVkcgc3BlYyBhbGxvd3Mgb21pc3Npb24gb2YgY29tbWEvc3BhY2Ugd2hlbiBhIG5lZ2F0aXZlIHNpZ24gaXMgd2VkZ2VkIGJldHdlZW4gdHdvIG51bWJlcnMsIGxpa2UgMi41LTUuMyBpbnN0ZWFkIG9mIDIuNSwtNS4zIGJ1dCB3aGVuIHR3ZWVuaW5nLCB0aGUgbmVnYXRpdmUgdmFsdWUgbWF5IHN3aXRjaCB0byBwb3NpdGl2ZSwgc28gd2UgaW5zZXJ0IHRoZSBjb21tYSBqdXN0IGluIGNhc2UuXG4gICAgICAgIHM6IHN0YXJ0TnVtLFxuICAgICAgICBjOiBlbmROdW0uY2hhckF0KDEpID09PSBcIj1cIiA/IF9wYXJzZVJlbGF0aXZlKHN0YXJ0TnVtLCBlbmROdW0pIC0gc3RhcnROdW0gOiBwYXJzZUZsb2F0KGVuZE51bSkgLSBzdGFydE51bSxcbiAgICAgICAgbTogY29sb3IgJiYgY29sb3IgPCA0ID8gTWF0aC5yb3VuZCA6IDBcbiAgICAgIH07XG4gICAgICBpbmRleCA9IF9jb21wbGV4U3RyaW5nTnVtRXhwLmxhc3RJbmRleDtcbiAgICB9XG4gIH1cblxuICBwdC5jID0gaW5kZXggPCBlbmQubGVuZ3RoID8gZW5kLnN1YnN0cmluZyhpbmRleCwgZW5kLmxlbmd0aCkgOiBcIlwiOyAvL3dlIHVzZSB0aGUgXCJjXCIgb2YgdGhlIFByb3BUd2VlbiB0byBzdG9yZSB0aGUgZmluYWwgcGFydCBvZiB0aGUgc3RyaW5nIChhZnRlciB0aGUgbGFzdCBudW1iZXIpXG5cbiAgcHQuZnAgPSBmdW5jUGFyYW07XG5cbiAgaWYgKF9yZWxFeHAudGVzdChlbmQpIHx8IGhhc1JhbmRvbSkge1xuICAgIHB0LmUgPSAwOyAvL2lmIHRoZSBlbmQgc3RyaW5nIGNvbnRhaW5zIHJlbGF0aXZlIHZhbHVlcyBvciBkeW5hbWljIHJhbmRvbSguLi4pIHZhbHVlcywgZGVsZXRlIHRoZSBlbmQgaXQgc28gdGhhdCBvbiB0aGUgZmluYWwgcmVuZGVyIHdlIGRvbid0IGFjdHVhbGx5IHNldCBpdCB0byB0aGUgc3RyaW5nIHdpdGggKz0gb3IgLT0gY2hhcmFjdGVycyAoZm9yY2VzIGl0IHRvIHVzZSB0aGUgY2FsY3VsYXRlZCB2YWx1ZSkuXG4gIH1cblxuICB0aGlzLl9wdCA9IHB0OyAvL3N0YXJ0IHRoZSBsaW5rZWQgbGlzdCB3aXRoIHRoaXMgbmV3IFByb3BUd2Vlbi4gUmVtZW1iZXIsIHdlIGNhbGwgX2FkZENvbXBsZXhTdHJpbmdQcm9wVHdlZW4uY2FsbCh0d2Vlbkluc3RhbmNlLi4uKSB0byBlbnN1cmUgdGhhdCBpdCdzIHNjb3BlZCBwcm9wZXJseS4gV2UgbWF5IGNhbGwgaXQgZnJvbSB3aXRoaW4gYSBwbHVnaW4gdG9vLCB0aHVzIFwidGhpc1wiIHdvdWxkIHJlZmVyIHRvIHRoZSBwbHVnaW4uXG5cbiAgcmV0dXJuIHB0O1xufSxcbiAgICBfYWRkUHJvcFR3ZWVuID0gZnVuY3Rpb24gX2FkZFByb3BUd2Vlbih0YXJnZXQsIHByb3AsIHN0YXJ0LCBlbmQsIGluZGV4LCB0YXJnZXRzLCBtb2RpZmllciwgc3RyaW5nRmlsdGVyLCBmdW5jUGFyYW0sIG9wdGlvbmFsKSB7XG4gIF9pc0Z1bmN0aW9uKGVuZCkgJiYgKGVuZCA9IGVuZChpbmRleCB8fCAwLCB0YXJnZXQsIHRhcmdldHMpKTtcbiAgdmFyIGN1cnJlbnRWYWx1ZSA9IHRhcmdldFtwcm9wXSxcbiAgICAgIHBhcnNlZFN0YXJ0ID0gc3RhcnQgIT09IFwiZ2V0XCIgPyBzdGFydCA6ICFfaXNGdW5jdGlvbihjdXJyZW50VmFsdWUpID8gY3VycmVudFZhbHVlIDogZnVuY1BhcmFtID8gdGFyZ2V0W3Byb3AuaW5kZXhPZihcInNldFwiKSB8fCAhX2lzRnVuY3Rpb24odGFyZ2V0W1wiZ2V0XCIgKyBwcm9wLnN1YnN0cigzKV0pID8gcHJvcCA6IFwiZ2V0XCIgKyBwcm9wLnN1YnN0cigzKV0oZnVuY1BhcmFtKSA6IHRhcmdldFtwcm9wXSgpLFxuICAgICAgc2V0dGVyID0gIV9pc0Z1bmN0aW9uKGN1cnJlbnRWYWx1ZSkgPyBfc2V0dGVyUGxhaW4gOiBmdW5jUGFyYW0gPyBfc2V0dGVyRnVuY1dpdGhQYXJhbSA6IF9zZXR0ZXJGdW5jLFxuICAgICAgcHQ7XG5cbiAgaWYgKF9pc1N0cmluZyhlbmQpKSB7XG4gICAgaWYgKH5lbmQuaW5kZXhPZihcInJhbmRvbShcIikpIHtcbiAgICAgIGVuZCA9IF9yZXBsYWNlUmFuZG9tKGVuZCk7XG4gICAgfVxuXG4gICAgaWYgKGVuZC5jaGFyQXQoMSkgPT09IFwiPVwiKSB7XG4gICAgICBwdCA9IF9wYXJzZVJlbGF0aXZlKHBhcnNlZFN0YXJ0LCBlbmQpICsgKGdldFVuaXQocGFyc2VkU3RhcnQpIHx8IDApO1xuXG4gICAgICBpZiAocHQgfHwgcHQgPT09IDApIHtcbiAgICAgICAgLy8gdG8gYXZvaWQgaXNOYU4sIGxpa2UgaWYgc29tZW9uZSBwYXNzZXMgaW4gYSB2YWx1ZSBsaWtlIFwiIT0gd2hhdGV2ZXJcIlxuICAgICAgICBlbmQgPSBwdDtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAoIW9wdGlvbmFsIHx8IHBhcnNlZFN0YXJ0ICE9PSBlbmQgfHwgX2ZvcmNlQWxsUHJvcFR3ZWVucykge1xuICAgIGlmICghaXNOYU4ocGFyc2VkU3RhcnQgKiBlbmQpICYmIGVuZCAhPT0gXCJcIikge1xuICAgICAgLy8gZnVuIGZhY3Q6IGFueSBudW1iZXIgbXVsdGlwbGllZCBieSBcIlwiIGlzIGV2YWx1YXRlZCBhcyB0aGUgbnVtYmVyIDAhXG4gICAgICBwdCA9IG5ldyBQcm9wVHdlZW4odGhpcy5fcHQsIHRhcmdldCwgcHJvcCwgK3BhcnNlZFN0YXJ0IHx8IDAsIGVuZCAtIChwYXJzZWRTdGFydCB8fCAwKSwgdHlwZW9mIGN1cnJlbnRWYWx1ZSA9PT0gXCJib29sZWFuXCIgPyBfcmVuZGVyQm9vbGVhbiA6IF9yZW5kZXJQbGFpbiwgMCwgc2V0dGVyKTtcbiAgICAgIGZ1bmNQYXJhbSAmJiAocHQuZnAgPSBmdW5jUGFyYW0pO1xuICAgICAgbW9kaWZpZXIgJiYgcHQubW9kaWZpZXIobW9kaWZpZXIsIHRoaXMsIHRhcmdldCk7XG4gICAgICByZXR1cm4gdGhpcy5fcHQgPSBwdDtcbiAgICB9XG5cbiAgICAhY3VycmVudFZhbHVlICYmICEocHJvcCBpbiB0YXJnZXQpICYmIF9taXNzaW5nUGx1Z2luKHByb3AsIGVuZCk7XG4gICAgcmV0dXJuIF9hZGRDb21wbGV4U3RyaW5nUHJvcFR3ZWVuLmNhbGwodGhpcywgdGFyZ2V0LCBwcm9wLCBwYXJzZWRTdGFydCwgZW5kLCBzZXR0ZXIsIHN0cmluZ0ZpbHRlciB8fCBfY29uZmlnLnN0cmluZ0ZpbHRlciwgZnVuY1BhcmFtKTtcbiAgfVxufSxcbiAgICAvL2NyZWF0ZXMgYSBjb3B5IG9mIHRoZSB2YXJzIG9iamVjdCBhbmQgcHJvY2Vzc2VzIGFueSBmdW5jdGlvbi1iYXNlZCB2YWx1ZXMgKHB1dHRpbmcgdGhlIHJlc3VsdGluZyB2YWx1ZXMgZGlyZWN0bHkgaW50byB0aGUgY29weSkgYXMgd2VsbCBhcyBzdHJpbmdzIHdpdGggXCJyYW5kb20oKVwiIGluIHRoZW0uIEl0IGRvZXMgTk9UIHByb2Nlc3MgcmVsYXRpdmUgdmFsdWVzLlxuX3Byb2Nlc3NWYXJzID0gZnVuY3Rpb24gX3Byb2Nlc3NWYXJzKHZhcnMsIGluZGV4LCB0YXJnZXQsIHRhcmdldHMsIHR3ZWVuKSB7XG4gIF9pc0Z1bmN0aW9uKHZhcnMpICYmICh2YXJzID0gX3BhcnNlRnVuY09yU3RyaW5nKHZhcnMsIHR3ZWVuLCBpbmRleCwgdGFyZ2V0LCB0YXJnZXRzKSk7XG5cbiAgaWYgKCFfaXNPYmplY3QodmFycykgfHwgdmFycy5zdHlsZSAmJiB2YXJzLm5vZGVUeXBlIHx8IF9pc0FycmF5KHZhcnMpIHx8IF9pc1R5cGVkQXJyYXkodmFycykpIHtcbiAgICByZXR1cm4gX2lzU3RyaW5nKHZhcnMpID8gX3BhcnNlRnVuY09yU3RyaW5nKHZhcnMsIHR3ZWVuLCBpbmRleCwgdGFyZ2V0LCB0YXJnZXRzKSA6IHZhcnM7XG4gIH1cblxuICB2YXIgY29weSA9IHt9LFxuICAgICAgcDtcblxuICBmb3IgKHAgaW4gdmFycykge1xuICAgIGNvcHlbcF0gPSBfcGFyc2VGdW5jT3JTdHJpbmcodmFyc1twXSwgdHdlZW4sIGluZGV4LCB0YXJnZXQsIHRhcmdldHMpO1xuICB9XG5cbiAgcmV0dXJuIGNvcHk7XG59LFxuICAgIF9jaGVja1BsdWdpbiA9IGZ1bmN0aW9uIF9jaGVja1BsdWdpbihwcm9wZXJ0eSwgdmFycywgdHdlZW4sIGluZGV4LCB0YXJnZXQsIHRhcmdldHMpIHtcbiAgdmFyIHBsdWdpbiwgcHQsIHB0TG9va3VwLCBpO1xuXG4gIGlmIChfcGx1Z2luc1twcm9wZXJ0eV0gJiYgKHBsdWdpbiA9IG5ldyBfcGx1Z2luc1twcm9wZXJ0eV0oKSkuaW5pdCh0YXJnZXQsIHBsdWdpbi5yYXdWYXJzID8gdmFyc1twcm9wZXJ0eV0gOiBfcHJvY2Vzc1ZhcnModmFyc1twcm9wZXJ0eV0sIGluZGV4LCB0YXJnZXQsIHRhcmdldHMsIHR3ZWVuKSwgdHdlZW4sIGluZGV4LCB0YXJnZXRzKSAhPT0gZmFsc2UpIHtcbiAgICB0d2Vlbi5fcHQgPSBwdCA9IG5ldyBQcm9wVHdlZW4odHdlZW4uX3B0LCB0YXJnZXQsIHByb3BlcnR5LCAwLCAxLCBwbHVnaW4ucmVuZGVyLCBwbHVnaW4sIDAsIHBsdWdpbi5wcmlvcml0eSk7XG5cbiAgICBpZiAodHdlZW4gIT09IF9xdWlja1R3ZWVuKSB7XG4gICAgICBwdExvb2t1cCA9IHR3ZWVuLl9wdExvb2t1cFt0d2Vlbi5fdGFyZ2V0cy5pbmRleE9mKHRhcmdldCldOyAvL25vdGU6IHdlIGNhbid0IHVzZSB0d2Vlbi5fcHRMb29rdXBbaW5kZXhdIGJlY2F1c2UgZm9yIHN0YWdnZXJlZCB0d2VlbnMsIHRoZSBpbmRleCBmcm9tIHRoZSBmdWxsVGFyZ2V0cyBhcnJheSB3b24ndCBtYXRjaCB3aGF0IGl0IGlzIGluIGVhY2ggaW5kaXZpZHVhbCB0d2VlbiB0aGF0IHNwYXducyBmcm9tIHRoZSBzdGFnZ2VyLlxuXG4gICAgICBpID0gcGx1Z2luLl9wcm9wcy5sZW5ndGg7XG5cbiAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgcHRMb29rdXBbcGx1Z2luLl9wcm9wc1tpXV0gPSBwdDtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gcGx1Z2luO1xufSxcbiAgICBfb3ZlcndyaXRpbmdUd2VlbixcbiAgICAvL3N0b3JlIGEgcmVmZXJlbmNlIHRlbXBvcmFyaWx5IHNvIHdlIGNhbiBhdm9pZCBvdmVyd3JpdGluZyBpdHNlbGYuXG5fZm9yY2VBbGxQcm9wVHdlZW5zLFxuICAgIF9pbml0VHdlZW4gPSBmdW5jdGlvbiBfaW5pdFR3ZWVuKHR3ZWVuLCB0aW1lKSB7XG4gIHZhciB2YXJzID0gdHdlZW4udmFycyxcbiAgICAgIGVhc2UgPSB2YXJzLmVhc2UsXG4gICAgICBzdGFydEF0ID0gdmFycy5zdGFydEF0LFxuICAgICAgaW1tZWRpYXRlUmVuZGVyID0gdmFycy5pbW1lZGlhdGVSZW5kZXIsXG4gICAgICBsYXp5ID0gdmFycy5sYXp5LFxuICAgICAgb25VcGRhdGUgPSB2YXJzLm9uVXBkYXRlLFxuICAgICAgb25VcGRhdGVQYXJhbXMgPSB2YXJzLm9uVXBkYXRlUGFyYW1zLFxuICAgICAgY2FsbGJhY2tTY29wZSA9IHZhcnMuY2FsbGJhY2tTY29wZSxcbiAgICAgIHJ1bkJhY2t3YXJkcyA9IHZhcnMucnVuQmFja3dhcmRzLFxuICAgICAgeW95b0Vhc2UgPSB2YXJzLnlveW9FYXNlLFxuICAgICAga2V5ZnJhbWVzID0gdmFycy5rZXlmcmFtZXMsXG4gICAgICBhdXRvUmV2ZXJ0ID0gdmFycy5hdXRvUmV2ZXJ0LFxuICAgICAgZHVyID0gdHdlZW4uX2R1cixcbiAgICAgIHByZXZTdGFydEF0ID0gdHdlZW4uX3N0YXJ0QXQsXG4gICAgICB0YXJnZXRzID0gdHdlZW4uX3RhcmdldHMsXG4gICAgICBwYXJlbnQgPSB0d2Vlbi5wYXJlbnQsXG4gICAgICBmdWxsVGFyZ2V0cyA9IHBhcmVudCAmJiBwYXJlbnQuZGF0YSA9PT0gXCJuZXN0ZWRcIiA/IHBhcmVudC5wYXJlbnQuX3RhcmdldHMgOiB0YXJnZXRzLFxuICAgICAgYXV0b092ZXJ3cml0ZSA9IHR3ZWVuLl9vdmVyd3JpdGUgPT09IFwiYXV0b1wiICYmICFfc3VwcHJlc3NPdmVyd3JpdGVzLFxuICAgICAgdGwgPSB0d2Vlbi50aW1lbGluZSxcbiAgICAgIGNsZWFuVmFycyxcbiAgICAgIGksXG4gICAgICBwLFxuICAgICAgcHQsXG4gICAgICB0YXJnZXQsXG4gICAgICBoYXNQcmlvcml0eSxcbiAgICAgIGdzRGF0YSxcbiAgICAgIGhhcm5lc3MsXG4gICAgICBwbHVnaW4sXG4gICAgICBwdExvb2t1cCxcbiAgICAgIGluZGV4LFxuICAgICAgaGFybmVzc1ZhcnMsXG4gICAgICBvdmVyd3JpdHRlbjtcbiAgdGwgJiYgKCFrZXlmcmFtZXMgfHwgIWVhc2UpICYmIChlYXNlID0gXCJub25lXCIpO1xuICB0d2Vlbi5fZWFzZSA9IF9wYXJzZUVhc2UoZWFzZSwgX2RlZmF1bHRzLmVhc2UpO1xuICB0d2Vlbi5feUVhc2UgPSB5b3lvRWFzZSA/IF9pbnZlcnRFYXNlKF9wYXJzZUVhc2UoeW95b0Vhc2UgPT09IHRydWUgPyBlYXNlIDogeW95b0Vhc2UsIF9kZWZhdWx0cy5lYXNlKSkgOiAwO1xuXG4gIGlmICh5b3lvRWFzZSAmJiB0d2Vlbi5feW95byAmJiAhdHdlZW4uX3JlcGVhdCkge1xuICAgIC8vdGhlcmUgbXVzdCBoYXZlIGJlZW4gYSBwYXJlbnQgdGltZWxpbmUgd2l0aCB5b3lvOnRydWUgdGhhdCBpcyBjdXJyZW50bHkgaW4gaXRzIHlveW8gcGhhc2UsIHNvIGZsaXAgdGhlIGVhc2VzLlxuICAgIHlveW9FYXNlID0gdHdlZW4uX3lFYXNlO1xuICAgIHR3ZWVuLl95RWFzZSA9IHR3ZWVuLl9lYXNlO1xuICAgIHR3ZWVuLl9lYXNlID0geW95b0Vhc2U7XG4gIH1cblxuICB0d2Vlbi5fZnJvbSA9ICF0bCAmJiAhIXZhcnMucnVuQmFja3dhcmRzOyAvL25lc3RlZCB0aW1lbGluZXMgc2hvdWxkIG5ldmVyIHJ1biBiYWNrd2FyZHMgLSB0aGUgYmFja3dhcmRzLW5lc3MgaXMgaW4gdGhlIGNoaWxkIHR3ZWVucy5cblxuICBpZiAoIXRsIHx8IGtleWZyYW1lcyAmJiAhdmFycy5zdGFnZ2VyKSB7XG4gICAgLy9pZiB0aGVyZSdzIGFuIGludGVybmFsIHRpbWVsaW5lLCBza2lwIGFsbCB0aGUgcGFyc2luZyBiZWNhdXNlIHdlIHBhc3NlZCB0aGF0IHRhc2sgZG93biB0aGUgY2hhaW4uXG4gICAgaGFybmVzcyA9IHRhcmdldHNbMF0gPyBfZ2V0Q2FjaGUodGFyZ2V0c1swXSkuaGFybmVzcyA6IDA7XG4gICAgaGFybmVzc1ZhcnMgPSBoYXJuZXNzICYmIHZhcnNbaGFybmVzcy5wcm9wXTsgLy9zb21lb25lIG1heSBuZWVkIHRvIHNwZWNpZnkgQ1NTLXNwZWNpZmljIHZhbHVlcyBBTkQgbm9uLUNTUyB2YWx1ZXMsIGxpa2UgaWYgdGhlIGVsZW1lbnQgaGFzIGFuIFwieFwiIHByb3BlcnR5IHBsdXMgaXQncyBhIHN0YW5kYXJkIERPTSBlbGVtZW50LiBXZSBhbGxvdyBwZW9wbGUgdG8gZGlzdGluZ3Vpc2ggYnkgd3JhcHBpbmcgcGx1Z2luLXNwZWNpZmljIHN0dWZmIGluIGEgY3NzOnt9IG9iamVjdCBmb3IgZXhhbXBsZS5cblxuICAgIGNsZWFuVmFycyA9IF9jb3B5RXhjbHVkaW5nKHZhcnMsIF9yZXNlcnZlZFByb3BzKTtcblxuICAgIGlmIChwcmV2U3RhcnRBdCkge1xuICAgICAgcHJldlN0YXJ0QXQucmV2ZXJ0KHJ1bkJhY2t3YXJkcyAmJiBkdXIgPyBfcmV2ZXJ0Q29uZmlnIDogX3N0YXJ0QXRSZXZlcnRDb25maWcpOyAvLyBpZiBpdCdzIGEgXCJzdGFydEF0XCIgKG5vdCBcImZyb20oKVwiIG9yIHJ1bkJhY2t3YXJkczogdHJ1ZSksIHdlIG9ubHkgbmVlZCB0byBkbyBhIHNoYWxsb3cgcmV2ZXJ0IChrZWVwIHRyYW5zZm9ybXMgY2FjaGVkIGluIENTU1BsdWdpbilcbiAgICAgIC8vIGRvbid0IGp1c3QgX3JlbW92ZUZyb21QYXJlbnQocHJldlN0YXJ0QXQucmVuZGVyKC0xLCB0cnVlKSkgYmVjYXVzZSB0aGF0J2xsIGxlYXZlIGlubGluZSBzdHlsZXMuIFdlJ3JlIGNyZWF0aW5nIGEgbmV3IF9zdGFydEF0IGZvciBcInN0YXJ0QXRcIiB0d2VlbnMgdGhhdCByZS1jYXB0dXJlIHRoaW5ncyB0byBlbnN1cmUgdGhhdCBpZiB0aGUgcHJlLXR3ZWVuIHZhbHVlcyBjaGFuZ2VkIHNpbmNlIHRoZSB0d2VlbiB3YXMgY3JlYXRlZCwgdGhleSdyZSByZWNvcmRlZC5cblxuICAgICAgcHJldlN0YXJ0QXQuX2xhenkgPSAwO1xuICAgIH1cblxuICAgIGlmIChzdGFydEF0KSB7XG4gICAgICBfcmVtb3ZlRnJvbVBhcmVudCh0d2Vlbi5fc3RhcnRBdCA9IFR3ZWVuLnNldCh0YXJnZXRzLCBfc2V0RGVmYXVsdHMoe1xuICAgICAgICBkYXRhOiBcImlzU3RhcnRcIixcbiAgICAgICAgb3ZlcndyaXRlOiBmYWxzZSxcbiAgICAgICAgcGFyZW50OiBwYXJlbnQsXG4gICAgICAgIGltbWVkaWF0ZVJlbmRlcjogdHJ1ZSxcbiAgICAgICAgbGF6eTogX2lzTm90RmFsc2UobGF6eSksXG4gICAgICAgIHN0YXJ0QXQ6IG51bGwsXG4gICAgICAgIGRlbGF5OiAwLFxuICAgICAgICBvblVwZGF0ZTogb25VcGRhdGUsXG4gICAgICAgIG9uVXBkYXRlUGFyYW1zOiBvblVwZGF0ZVBhcmFtcyxcbiAgICAgICAgY2FsbGJhY2tTY29wZTogY2FsbGJhY2tTY29wZSxcbiAgICAgICAgc3RhZ2dlcjogMFxuICAgICAgfSwgc3RhcnRBdCkpKTsgLy9jb3B5IHRoZSBwcm9wZXJ0aWVzL3ZhbHVlcyBpbnRvIGEgbmV3IG9iamVjdCB0byBhdm9pZCBjb2xsaXNpb25zLCBsaWtlIHZhciB0byA9IHt4OjB9LCBmcm9tID0ge3g6NTAwfTsgdGltZWxpbmUuZnJvbVRvKGUsIGZyb20sIHRvKS5mcm9tVG8oZSwgdG8sIGZyb20pO1xuXG5cbiAgICAgIHRpbWUgPCAwICYmIChfcmV2ZXJ0aW5nIHx8ICFpbW1lZGlhdGVSZW5kZXIgJiYgIWF1dG9SZXZlcnQpICYmIHR3ZWVuLl9zdGFydEF0LnJldmVydChfcmV2ZXJ0Q29uZmlnKTsgLy8gcmFyZSBlZGdlIGNhc2UsIGxpa2UgaWYgYSByZW5kZXIgaXMgZm9yY2VkIGluIHRoZSBuZWdhdGl2ZSBkaXJlY3Rpb24gb2YgYSBub24taW5pdHRlZCB0d2Vlbi5cblxuICAgICAgaWYgKGltbWVkaWF0ZVJlbmRlcikge1xuICAgICAgICBpZiAoZHVyICYmIHRpbWUgPD0gMCkge1xuICAgICAgICAgIHRpbWUgJiYgKHR3ZWVuLl96VGltZSA9IHRpbWUpO1xuICAgICAgICAgIHJldHVybjsgLy93ZSBza2lwIGluaXRpYWxpemF0aW9uIGhlcmUgc28gdGhhdCBvdmVyd3JpdGluZyBkb2Vzbid0IG9jY3VyIHVudGlsIHRoZSB0d2VlbiBhY3R1YWxseSBiZWdpbnMuIE90aGVyd2lzZSwgaWYgeW91IGNyZWF0ZSBzZXZlcmFsIGltbWVkaWF0ZVJlbmRlcjp0cnVlIHR3ZWVucyBvZiB0aGUgc2FtZSB0YXJnZXQvcHJvcGVydGllcyB0byBkcm9wIGludG8gYSBUaW1lbGluZSwgdGhlIGxhc3Qgb25lIGNyZWF0ZWQgd291bGQgb3ZlcndyaXRlIHRoZSBmaXJzdCBvbmVzIGJlY2F1c2UgdGhleSBkaWRuJ3QgZ2V0IHBsYWNlZCBpbnRvIHRoZSB0aW1lbGluZSB5ZXQgYmVmb3JlIHRoZSBmaXJzdCByZW5kZXIgb2NjdXJzIGFuZCBraWNrcyBpbiBvdmVyd3JpdGluZy5cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAocnVuQmFja3dhcmRzICYmIGR1cikge1xuICAgICAgLy9mcm9tKCkgdHdlZW5zIG11c3QgYmUgaGFuZGxlZCB1bmlxdWVseTogdGhlaXIgYmVnaW5uaW5nIHZhbHVlcyBtdXN0IGJlIHJlbmRlcmVkIGJ1dCB3ZSBkb24ndCB3YW50IG92ZXJ3cml0aW5nIHRvIG9jY3VyIHlldCAod2hlbiB0aW1lIGlzIHN0aWxsIDApLiBXYWl0IHVudGlsIHRoZSB0d2VlbiBhY3R1YWxseSBiZWdpbnMgYmVmb3JlIGRvaW5nIGFsbCB0aGUgcm91dGluZXMgbGlrZSBvdmVyd3JpdGluZy4gQXQgdGhhdCB0aW1lLCB3ZSBzaG91bGQgcmVuZGVyIGF0IHRoZSBFTkQgb2YgdGhlIHR3ZWVuIHRvIGVuc3VyZSB0aGF0IHRoaW5ncyBpbml0aWFsaXplIGNvcnJlY3RseSAocmVtZW1iZXIsIGZyb20oKSB0d2VlbnMgZ28gYmFja3dhcmRzKVxuICAgICAgaWYgKCFwcmV2U3RhcnRBdCkge1xuICAgICAgICB0aW1lICYmIChpbW1lZGlhdGVSZW5kZXIgPSBmYWxzZSk7IC8vaW4gcmFyZSBjYXNlcyAobGlrZSBpZiBhIGZyb20oKSB0d2VlbiBydW5zIGFuZCB0aGVuIGlzIGludmFsaWRhdGUoKS1lZCksIGltbWVkaWF0ZVJlbmRlciBjb3VsZCBiZSB0cnVlIGJ1dCB0aGUgaW5pdGlhbCBmb3JjZWQtcmVuZGVyIGdldHMgc2tpcHBlZCwgc28gdGhlcmUncyBubyBuZWVkIHRvIGZvcmNlIHRoZSByZW5kZXIgaW4gdGhpcyBjb250ZXh0IHdoZW4gdGhlIF90aW1lIGlzIGdyZWF0ZXIgdGhhbiAwXG5cbiAgICAgICAgcCA9IF9zZXREZWZhdWx0cyh7XG4gICAgICAgICAgb3ZlcndyaXRlOiBmYWxzZSxcbiAgICAgICAgICBkYXRhOiBcImlzRnJvbVN0YXJ0XCIsXG4gICAgICAgICAgLy93ZSB0YWcgdGhlIHR3ZWVuIHdpdGggYXMgXCJpc0Zyb21TdGFydFwiIHNvIHRoYXQgaWYgW2luc2lkZSBhIHBsdWdpbl0gd2UgbmVlZCB0byBvbmx5IGRvIHNvbWV0aGluZyBhdCB0aGUgdmVyeSBFTkQgb2YgYSB0d2Vlbiwgd2UgaGF2ZSBhIHdheSBvZiBpZGVudGlmeWluZyB0aGlzIHR3ZWVuIGFzIG1lcmVseSB0aGUgb25lIHRoYXQncyBzZXR0aW5nIHRoZSBiZWdpbm5pbmcgdmFsdWVzIGZvciBhIFwiZnJvbSgpXCIgdHdlZW4uIEZvciBleGFtcGxlLCBjbGVhclByb3BzIGluIENTU1BsdWdpbiBzaG91bGQgb25seSBnZXQgYXBwbGllZCBhdCB0aGUgdmVyeSBFTkQgb2YgYSB0d2VlbiBhbmQgd2l0aG91dCB0aGlzIHRhZywgZnJvbSguLi57aGVpZ2h0OjEwMCwgY2xlYXJQcm9wczpcImhlaWdodFwiLCBkZWxheToxfSkgd291bGQgd2lwZSB0aGUgaGVpZ2h0IGF0IHRoZSBiZWdpbm5pbmcgb2YgdGhlIHR3ZWVuIGFuZCBhZnRlciAxIHNlY29uZCwgaXQnZCBraWNrIGJhY2sgaW4uXG4gICAgICAgICAgbGF6eTogaW1tZWRpYXRlUmVuZGVyICYmIF9pc05vdEZhbHNlKGxhenkpLFxuICAgICAgICAgIGltbWVkaWF0ZVJlbmRlcjogaW1tZWRpYXRlUmVuZGVyLFxuICAgICAgICAgIC8vemVyby1kdXJhdGlvbiB0d2VlbnMgcmVuZGVyIGltbWVkaWF0ZWx5IGJ5IGRlZmF1bHQsIGJ1dCBpZiB3ZSdyZSBub3Qgc3BlY2lmaWNhbGx5IGluc3RydWN0ZWQgdG8gcmVuZGVyIHRoaXMgdHdlZW4gaW1tZWRpYXRlbHksIHdlIHNob3VsZCBza2lwIHRoaXMgYW5kIG1lcmVseSBfaW5pdCgpIHRvIHJlY29yZCB0aGUgc3RhcnRpbmcgdmFsdWVzIChyZW5kZXJpbmcgdGhlbSBpbW1lZGlhdGVseSB3b3VsZCBwdXNoIHRoZW0gdG8gY29tcGxldGlvbiB3aGljaCBpcyB3YXN0ZWZ1bCBpbiB0aGF0IGNhc2UgLSB3ZSdkIGhhdmUgdG8gcmVuZGVyKC0xKSBpbW1lZGlhdGVseSBhZnRlcilcbiAgICAgICAgICBzdGFnZ2VyOiAwLFxuICAgICAgICAgIHBhcmVudDogcGFyZW50IC8vZW5zdXJlcyB0aGF0IG5lc3RlZCB0d2VlbnMgdGhhdCBoYWQgYSBzdGFnZ2VyIGFyZSBoYW5kbGVkIHByb3Blcmx5LCBsaWtlIGdzYXAuZnJvbShcIi5jbGFzc1wiLCB7eTpnc2FwLnV0aWxzLndyYXAoWy0xMDAsMTAwXSl9KVxuXG4gICAgICAgIH0sIGNsZWFuVmFycyk7XG4gICAgICAgIGhhcm5lc3NWYXJzICYmIChwW2hhcm5lc3MucHJvcF0gPSBoYXJuZXNzVmFycyk7IC8vIGluIGNhc2Ugc29tZW9uZSBkb2VzIHNvbWV0aGluZyBsaWtlIC5mcm9tKC4uLiwge2Nzczp7fX0pXG5cbiAgICAgICAgX3JlbW92ZUZyb21QYXJlbnQodHdlZW4uX3N0YXJ0QXQgPSBUd2Vlbi5zZXQodGFyZ2V0cywgcCkpO1xuXG4gICAgICAgIHRpbWUgPCAwICYmIChfcmV2ZXJ0aW5nID8gdHdlZW4uX3N0YXJ0QXQucmV2ZXJ0KF9yZXZlcnRDb25maWcpIDogdHdlZW4uX3N0YXJ0QXQucmVuZGVyKC0xLCB0cnVlKSk7XG4gICAgICAgIHR3ZWVuLl96VGltZSA9IHRpbWU7XG5cbiAgICAgICAgaWYgKCFpbW1lZGlhdGVSZW5kZXIpIHtcbiAgICAgICAgICBfaW5pdFR3ZWVuKHR3ZWVuLl9zdGFydEF0LCBfdGlueU51bSk7IC8vZW5zdXJlcyB0aGF0IHRoZSBpbml0aWFsIHZhbHVlcyBhcmUgcmVjb3JkZWRcblxuICAgICAgICB9IGVsc2UgaWYgKCF0aW1lKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgdHdlZW4uX3B0ID0gdHdlZW4uX3B0Q2FjaGUgPSAwO1xuICAgIGxhenkgPSBkdXIgJiYgX2lzTm90RmFsc2UobGF6eSkgfHwgbGF6eSAmJiAhZHVyO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IHRhcmdldHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRhcmdldCA9IHRhcmdldHNbaV07XG4gICAgICBnc0RhdGEgPSB0YXJnZXQuX2dzYXAgfHwgX2hhcm5lc3ModGFyZ2V0cylbaV0uX2dzYXA7XG4gICAgICB0d2Vlbi5fcHRMb29rdXBbaV0gPSBwdExvb2t1cCA9IHt9O1xuICAgICAgX2xhenlMb29rdXBbZ3NEYXRhLmlkXSAmJiBfbGF6eVR3ZWVucy5sZW5ndGggJiYgX2xhenlSZW5kZXIoKTsgLy9pZiBvdGhlciB0d2VlbnMgb2YgdGhlIHNhbWUgdGFyZ2V0IGhhdmUgcmVjZW50bHkgaW5pdHRlZCBidXQgaGF2ZW4ndCByZW5kZXJlZCB5ZXQsIHdlJ3ZlIGdvdCB0byBmb3JjZSB0aGUgcmVuZGVyIHNvIHRoYXQgdGhlIHN0YXJ0aW5nIHZhbHVlcyBhcmUgY29ycmVjdCAoaW1hZ2luZSBwb3B1bGF0aW5nIGEgdGltZWxpbmUgd2l0aCBhIGJ1bmNoIG9mIHNlcXVlbnRpYWwgdHdlZW5zIGFuZCB0aGVuIGp1bXBpbmcgdG8gdGhlIGVuZClcblxuICAgICAgaW5kZXggPSBmdWxsVGFyZ2V0cyA9PT0gdGFyZ2V0cyA/IGkgOiBmdWxsVGFyZ2V0cy5pbmRleE9mKHRhcmdldCk7XG5cbiAgICAgIGlmIChoYXJuZXNzICYmIChwbHVnaW4gPSBuZXcgaGFybmVzcygpKS5pbml0KHRhcmdldCwgaGFybmVzc1ZhcnMgfHwgY2xlYW5WYXJzLCB0d2VlbiwgaW5kZXgsIGZ1bGxUYXJnZXRzKSAhPT0gZmFsc2UpIHtcbiAgICAgICAgdHdlZW4uX3B0ID0gcHQgPSBuZXcgUHJvcFR3ZWVuKHR3ZWVuLl9wdCwgdGFyZ2V0LCBwbHVnaW4ubmFtZSwgMCwgMSwgcGx1Z2luLnJlbmRlciwgcGx1Z2luLCAwLCBwbHVnaW4ucHJpb3JpdHkpO1xuXG4gICAgICAgIHBsdWdpbi5fcHJvcHMuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICAgIHB0TG9va3VwW25hbWVdID0gcHQ7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHBsdWdpbi5wcmlvcml0eSAmJiAoaGFzUHJpb3JpdHkgPSAxKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFoYXJuZXNzIHx8IGhhcm5lc3NWYXJzKSB7XG4gICAgICAgIGZvciAocCBpbiBjbGVhblZhcnMpIHtcbiAgICAgICAgICBpZiAoX3BsdWdpbnNbcF0gJiYgKHBsdWdpbiA9IF9jaGVja1BsdWdpbihwLCBjbGVhblZhcnMsIHR3ZWVuLCBpbmRleCwgdGFyZ2V0LCBmdWxsVGFyZ2V0cykpKSB7XG4gICAgICAgICAgICBwbHVnaW4ucHJpb3JpdHkgJiYgKGhhc1ByaW9yaXR5ID0gMSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHB0TG9va3VwW3BdID0gcHQgPSBfYWRkUHJvcFR3ZWVuLmNhbGwodHdlZW4sIHRhcmdldCwgcCwgXCJnZXRcIiwgY2xlYW5WYXJzW3BdLCBpbmRleCwgZnVsbFRhcmdldHMsIDAsIHZhcnMuc3RyaW5nRmlsdGVyKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdHdlZW4uX29wICYmIHR3ZWVuLl9vcFtpXSAmJiB0d2Vlbi5raWxsKHRhcmdldCwgdHdlZW4uX29wW2ldKTtcblxuICAgICAgaWYgKGF1dG9PdmVyd3JpdGUgJiYgdHdlZW4uX3B0KSB7XG4gICAgICAgIF9vdmVyd3JpdGluZ1R3ZWVuID0gdHdlZW47XG5cbiAgICAgICAgX2dsb2JhbFRpbWVsaW5lLmtpbGxUd2VlbnNPZih0YXJnZXQsIHB0TG9va3VwLCB0d2Vlbi5nbG9iYWxUaW1lKHRpbWUpKTsgLy8gbWFrZSBzdXJlIHRoZSBvdmVyd3JpdGluZyBkb2Vzbid0IG92ZXJ3cml0ZSBUSElTIHR3ZWVuISEhXG5cblxuICAgICAgICBvdmVyd3JpdHRlbiA9ICF0d2Vlbi5wYXJlbnQ7XG4gICAgICAgIF9vdmVyd3JpdGluZ1R3ZWVuID0gMDtcbiAgICAgIH1cblxuICAgICAgdHdlZW4uX3B0ICYmIGxhenkgJiYgKF9sYXp5TG9va3VwW2dzRGF0YS5pZF0gPSAxKTtcbiAgICB9XG5cbiAgICBoYXNQcmlvcml0eSAmJiBfc29ydFByb3BUd2VlbnNCeVByaW9yaXR5KHR3ZWVuKTtcbiAgICB0d2Vlbi5fb25Jbml0ICYmIHR3ZWVuLl9vbkluaXQodHdlZW4pOyAvL3BsdWdpbnMgbGlrZSBSb3VuZFByb3BzIG11c3Qgd2FpdCB1bnRpbCBBTEwgb2YgdGhlIFByb3BUd2VlbnMgYXJlIGluc3RhbnRpYXRlZC4gSW4gdGhlIHBsdWdpbidzIGluaXQoKSBmdW5jdGlvbiwgaXQgc2V0cyB0aGUgX29uSW5pdCBvbiB0aGUgdHdlZW4gaW5zdGFuY2UuIE1heSBub3QgYmUgcHJldHR5L2ludHVpdGl2ZSwgYnV0IGl0J3MgZmFzdCBhbmQga2VlcHMgZmlsZSBzaXplIGRvd24uXG4gIH1cblxuICB0d2Vlbi5fb25VcGRhdGUgPSBvblVwZGF0ZTtcbiAgdHdlZW4uX2luaXR0ZWQgPSAoIXR3ZWVuLl9vcCB8fCB0d2Vlbi5fcHQpICYmICFvdmVyd3JpdHRlbjsgLy8gaWYgb3ZlcndyaXR0ZW5Qcm9wcyByZXN1bHRlZCBpbiB0aGUgZW50aXJlIHR3ZWVuIGJlaW5nIGtpbGxlZCwgZG8gTk9UIGZsYWcgaXQgYXMgaW5pdHRlZCBvciBlbHNlIGl0IG1heSByZW5kZXIgZm9yIG9uZSB0aWNrLlxuXG4gIGtleWZyYW1lcyAmJiB0aW1lIDw9IDAgJiYgdGwucmVuZGVyKF9iaWdOdW0sIHRydWUsIHRydWUpOyAvLyBpZiB0aGVyZSdzIGEgMCUga2V5ZnJhbWUsIGl0J2xsIHJlbmRlciBpbiB0aGUgXCJiZWZvcmVcIiBzdGF0ZSBmb3IgYW55IHN0YWdnZXJlZC9kZWxheWVkIGFuaW1hdGlvbnMgdGh1cyB3aGVuIHRoZSBmb2xsb3dpbmcgdHdlZW4gaW5pdGlhbGl6ZXMsIGl0J2xsIHVzZSB0aGUgXCJiZWZvcmVcIiBzdGF0ZSBpbnN0ZWFkIG9mIHRoZSBcImFmdGVyXCIgc3RhdGUgYXMgdGhlIGluaXRpYWwgdmFsdWVzLlxufSxcbiAgICBfdXBkYXRlUHJvcFR3ZWVucyA9IGZ1bmN0aW9uIF91cGRhdGVQcm9wVHdlZW5zKHR3ZWVuLCBwcm9wZXJ0eSwgdmFsdWUsIHN0YXJ0LCBzdGFydElzUmVsYXRpdmUsIHJhdGlvLCB0aW1lKSB7XG4gIHZhciBwdENhY2hlID0gKHR3ZWVuLl9wdCAmJiB0d2Vlbi5fcHRDYWNoZSB8fCAodHdlZW4uX3B0Q2FjaGUgPSB7fSkpW3Byb3BlcnR5XSxcbiAgICAgIHB0LFxuICAgICAgcm9vdFBULFxuICAgICAgbG9va3VwLFxuICAgICAgaTtcblxuICBpZiAoIXB0Q2FjaGUpIHtcbiAgICBwdENhY2hlID0gdHdlZW4uX3B0Q2FjaGVbcHJvcGVydHldID0gW107XG4gICAgbG9va3VwID0gdHdlZW4uX3B0TG9va3VwO1xuICAgIGkgPSB0d2Vlbi5fdGFyZ2V0cy5sZW5ndGg7XG5cbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICBwdCA9IGxvb2t1cFtpXVtwcm9wZXJ0eV07XG5cbiAgICAgIGlmIChwdCAmJiBwdC5kICYmIHB0LmQuX3B0KSB7XG4gICAgICAgIC8vIGl0J3MgYSBwbHVnaW4sIHNvIGZpbmQgdGhlIG5lc3RlZCBQcm9wVHdlZW5cbiAgICAgICAgcHQgPSBwdC5kLl9wdDtcblxuICAgICAgICB3aGlsZSAocHQgJiYgcHQucCAhPT0gcHJvcGVydHkgJiYgcHQuZnAgIT09IHByb3BlcnR5KSB7XG4gICAgICAgICAgLy8gXCJmcFwiIGlzIGZ1bmN0aW9uUGFyYW0gZm9yIHRoaW5ncyBsaWtlIHNldHRpbmcgQ1NTIHZhcmlhYmxlcyB3aGljaCByZXF1aXJlIC5zZXRQcm9wZXJ0eShcIi0tdmFyLW5hbWVcIiwgdmFsdWUpXG4gICAgICAgICAgcHQgPSBwdC5fbmV4dDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoIXB0KSB7XG4gICAgICAgIC8vIHRoZXJlIGlzIG5vIFByb3BUd2VlbiBhc3NvY2lhdGVkIHdpdGggdGhhdCBwcm9wZXJ0eSwgc28gd2UgbXVzdCBGT1JDRSBvbmUgdG8gYmUgY3JlYXRlZCBhbmQgZGl0Y2ggb3V0IG9mIHRoaXNcbiAgICAgICAgLy8gaWYgdGhlIHR3ZWVuIGhhcyBvdGhlciBwcm9wZXJ0aWVzIHRoYXQgYWxyZWFkeSByZW5kZXJlZCBhdCBuZXcgcG9zaXRpb25zLCB3ZSdkIG5vcm1hbGx5IGhhdmUgdG8gcmV3aW5kIHRvIHB1dCB0aGVtIGJhY2sgbGlrZSB0d2Vlbi5yZW5kZXIoMCwgdHJ1ZSkgYmVmb3JlIGZvcmNpbmcgYW4gX2luaXRUd2VlbigpLCBidXQgdGhhdCBjYW4gY3JlYXRlIGFub3RoZXIgZWRnZSBjYXNlIGxpa2UgdHdlZW5pbmcgYSB0aW1lbGluZSdzIHByb2dyZXNzIHdvdWxkIHRyaWdnZXIgb25VcGRhdGVzIHRvIGZpcmUgd2hpY2ggY291bGQgbW92ZSBvdGhlciB0aGluZ3MgYXJvdW5kLiBJdCdzIGJldHRlciB0byBqdXN0IGluZm9ybSB1c2VycyB0aGF0IC5yZXNldFRvKCkgc2hvdWxkIE9OTFkgYmUgdXNlZCBmb3IgdHdlZW5zIHRoYXQgYWxyZWFkeSBoYXZlIHRoYXQgcHJvcGVydHkuIEZvciBleGFtcGxlLCB5b3UgY2FuJ3QgZ3NhcC50byguLi57IHk6IDAgfSkgYW5kIHRoZW4gdHdlZW4ucmVzdFRvKFwieFwiLCAyMDApIGZvciBleGFtcGxlLlxuICAgICAgICBfZm9yY2VBbGxQcm9wVHdlZW5zID0gMTsgLy8gb3RoZXJ3aXNlLCB3aGVuIHdlIF9hZGRQcm9wVHdlZW4oKSBhbmQgaXQgZmluZHMgbm8gY2hhbmdlIGJldHdlZW4gdGhlIHN0YXJ0IGFuZCBlbmQgdmFsdWVzLCBpdCBza2lwcyBjcmVhdGluZyBhIFByb3BUd2VlbiAoZm9yIGVmZmljaWVuY3kuLi53aHkgdHdlZW4gd2hlbiB0aGVyZSdzIG5vIGRpZmZlcmVuY2U/KSBidXQgaW4gdGhpcyBjYXNlIHdlIE5FRUQgdGhhdCBQcm9wVHdlZW4gY3JlYXRlZCBzbyB3ZSBjYW4gZWRpdCBpdC5cblxuICAgICAgICB0d2Vlbi52YXJzW3Byb3BlcnR5XSA9IFwiKz0wXCI7XG5cbiAgICAgICAgX2luaXRUd2Vlbih0d2VlbiwgdGltZSk7XG5cbiAgICAgICAgX2ZvcmNlQWxsUHJvcFR3ZWVucyA9IDA7XG4gICAgICAgIHJldHVybiAxO1xuICAgICAgfVxuXG4gICAgICBwdENhY2hlLnB1c2gocHQpO1xuICAgIH1cbiAgfVxuXG4gIGkgPSBwdENhY2hlLmxlbmd0aDtcblxuICB3aGlsZSAoaS0tKSB7XG4gICAgcm9vdFBUID0gcHRDYWNoZVtpXTtcbiAgICBwdCA9IHJvb3RQVC5fcHQgfHwgcm9vdFBUOyAvLyBjb21wbGV4IHZhbHVlcyBtYXkgaGF2ZSBuZXN0ZWQgUHJvcFR3ZWVucy4gV2Ugb25seSBhY2NvbW1vZGF0ZSB0aGUgRklSU1QgdmFsdWUuXG5cbiAgICBwdC5zID0gKHN0YXJ0IHx8IHN0YXJ0ID09PSAwKSAmJiAhc3RhcnRJc1JlbGF0aXZlID8gc3RhcnQgOiBwdC5zICsgKHN0YXJ0IHx8IDApICsgcmF0aW8gKiBwdC5jO1xuICAgIHB0LmMgPSB2YWx1ZSAtIHB0LnM7XG4gICAgcm9vdFBULmUgJiYgKHJvb3RQVC5lID0gX3JvdW5kKHZhbHVlKSArIGdldFVuaXQocm9vdFBULmUpKTsgLy8gbWFpbmx5IGZvciBDU1NQbHVnaW4gKGVuZCB2YWx1ZSlcblxuICAgIHJvb3RQVC5iICYmIChyb290UFQuYiA9IHB0LnMgKyBnZXRVbml0KHJvb3RQVC5iKSk7IC8vIChiZWdpbm5pbmcgdmFsdWUpXG4gIH1cbn0sXG4gICAgX2FkZEFsaWFzZXNUb1ZhcnMgPSBmdW5jdGlvbiBfYWRkQWxpYXNlc1RvVmFycyh0YXJnZXRzLCB2YXJzKSB7XG4gIHZhciBoYXJuZXNzID0gdGFyZ2V0c1swXSA/IF9nZXRDYWNoZSh0YXJnZXRzWzBdKS5oYXJuZXNzIDogMCxcbiAgICAgIHByb3BlcnR5QWxpYXNlcyA9IGhhcm5lc3MgJiYgaGFybmVzcy5hbGlhc2VzLFxuICAgICAgY29weSxcbiAgICAgIHAsXG4gICAgICBpLFxuICAgICAgYWxpYXNlcztcblxuICBpZiAoIXByb3BlcnR5QWxpYXNlcykge1xuICAgIHJldHVybiB2YXJzO1xuICB9XG5cbiAgY29weSA9IF9tZXJnZSh7fSwgdmFycyk7XG5cbiAgZm9yIChwIGluIHByb3BlcnR5QWxpYXNlcykge1xuICAgIGlmIChwIGluIGNvcHkpIHtcbiAgICAgIGFsaWFzZXMgPSBwcm9wZXJ0eUFsaWFzZXNbcF0uc3BsaXQoXCIsXCIpO1xuICAgICAgaSA9IGFsaWFzZXMubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgIGNvcHlbYWxpYXNlc1tpXV0gPSBjb3B5W3BdO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBjb3B5O1xufSxcbiAgICAvLyBwYXJzZXMgbXVsdGlwbGUgZm9ybWF0cywgbGlrZSB7XCIwJVwiOiB7eDogMTAwfSwge1wiNTAlXCI6IHt4OiAtMjB9fSBhbmQgeyB4OiB7XCIwJVwiOiAxMDAsIFwiNTAlXCI6IC0yMH0gfSwgYW5kIGFuIFwiZWFzZVwiIGNhbiBiZSBzZXQgb24gYW55IG9iamVjdC4gV2UgcG9wdWxhdGUgYW4gXCJhbGxQcm9wc1wiIG9iamVjdCB3aXRoIGFuIEFycmF5IGZvciBlYWNoIHByb3BlcnR5LCBsaWtlIHt4OiBbe30sIHt9XSwgeTpbe30sIHt9XX0gd2l0aCBkYXRhIGZvciBlYWNoIHByb3BlcnR5IHR3ZWVuLiBUaGUgb2JqZWN0cyBoYXZlIGEgXCJ0XCIgKHRpbWUpLCBcInZcIiwgKHZhbHVlKSwgYW5kIFwiZVwiIChlYXNlKSBwcm9wZXJ0eS4gVGhpcyBhbGxvd3MgdXMgdG8gcGllY2UgdG9nZXRoZXIgYSB0aW1lbGluZSBsYXRlci5cbl9wYXJzZUtleWZyYW1lID0gZnVuY3Rpb24gX3BhcnNlS2V5ZnJhbWUocHJvcCwgb2JqLCBhbGxQcm9wcywgZWFzZUVhY2gpIHtcbiAgdmFyIGVhc2UgPSBvYmouZWFzZSB8fCBlYXNlRWFjaCB8fCBcInBvd2VyMS5pbk91dFwiLFxuICAgICAgcCxcbiAgICAgIGE7XG5cbiAgaWYgKF9pc0FycmF5KG9iaikpIHtcbiAgICBhID0gYWxsUHJvcHNbcHJvcF0gfHwgKGFsbFByb3BzW3Byb3BdID0gW10pOyAvLyB0ID0gdGltZSAob3V0IG9mIDEwMCksIHYgPSB2YWx1ZSwgZSA9IGVhc2VcblxuICAgIG9iai5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZSwgaSkge1xuICAgICAgcmV0dXJuIGEucHVzaCh7XG4gICAgICAgIHQ6IGkgLyAob2JqLmxlbmd0aCAtIDEpICogMTAwLFxuICAgICAgICB2OiB2YWx1ZSxcbiAgICAgICAgZTogZWFzZVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgZm9yIChwIGluIG9iaikge1xuICAgICAgYSA9IGFsbFByb3BzW3BdIHx8IChhbGxQcm9wc1twXSA9IFtdKTtcbiAgICAgIHAgPT09IFwiZWFzZVwiIHx8IGEucHVzaCh7XG4gICAgICAgIHQ6IHBhcnNlRmxvYXQocHJvcCksXG4gICAgICAgIHY6IG9ialtwXSxcbiAgICAgICAgZTogZWFzZVxuICAgICAgfSk7XG4gICAgfVxuICB9XG59LFxuICAgIF9wYXJzZUZ1bmNPclN0cmluZyA9IGZ1bmN0aW9uIF9wYXJzZUZ1bmNPclN0cmluZyh2YWx1ZSwgdHdlZW4sIGksIHRhcmdldCwgdGFyZ2V0cykge1xuICByZXR1cm4gX2lzRnVuY3Rpb24odmFsdWUpID8gdmFsdWUuY2FsbCh0d2VlbiwgaSwgdGFyZ2V0LCB0YXJnZXRzKSA6IF9pc1N0cmluZyh2YWx1ZSkgJiYgfnZhbHVlLmluZGV4T2YoXCJyYW5kb20oXCIpID8gX3JlcGxhY2VSYW5kb20odmFsdWUpIDogdmFsdWU7XG59LFxuICAgIF9zdGFnZ2VyVHdlZW5Qcm9wcyA9IF9jYWxsYmFja05hbWVzICsgXCJyZXBlYXQscmVwZWF0RGVsYXkseW95byxyZXBlYXRSZWZyZXNoLHlveW9FYXNlLGF1dG9SZXZlcnRcIixcbiAgICBfc3RhZ2dlclByb3BzVG9Ta2lwID0ge307XG5cbl9mb3JFYWNoTmFtZShfc3RhZ2dlclR3ZWVuUHJvcHMgKyBcIixpZCxzdGFnZ2VyLGRlbGF5LGR1cmF0aW9uLHBhdXNlZCxzY3JvbGxUcmlnZ2VyXCIsIGZ1bmN0aW9uIChuYW1lKSB7XG4gIHJldHVybiBfc3RhZ2dlclByb3BzVG9Ta2lwW25hbWVdID0gMTtcbn0pO1xuLypcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBUV0VFTlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5cbmV4cG9ydCB2YXIgVHdlZW4gPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9BbmltYXRpb24yKSB7XG4gIF9pbmhlcml0c0xvb3NlKFR3ZWVuLCBfQW5pbWF0aW9uMik7XG5cbiAgZnVuY3Rpb24gVHdlZW4odGFyZ2V0cywgdmFycywgcG9zaXRpb24sIHNraXBJbmhlcml0KSB7XG4gICAgdmFyIF90aGlzMztcblxuICAgIGlmICh0eXBlb2YgdmFycyA9PT0gXCJudW1iZXJcIikge1xuICAgICAgcG9zaXRpb24uZHVyYXRpb24gPSB2YXJzO1xuICAgICAgdmFycyA9IHBvc2l0aW9uO1xuICAgICAgcG9zaXRpb24gPSBudWxsO1xuICAgIH1cblxuICAgIF90aGlzMyA9IF9BbmltYXRpb24yLmNhbGwodGhpcywgc2tpcEluaGVyaXQgPyB2YXJzIDogX2luaGVyaXREZWZhdWx0cyh2YXJzKSkgfHwgdGhpcztcbiAgICB2YXIgX3RoaXMzJHZhcnMgPSBfdGhpczMudmFycyxcbiAgICAgICAgZHVyYXRpb24gPSBfdGhpczMkdmFycy5kdXJhdGlvbixcbiAgICAgICAgZGVsYXkgPSBfdGhpczMkdmFycy5kZWxheSxcbiAgICAgICAgaW1tZWRpYXRlUmVuZGVyID0gX3RoaXMzJHZhcnMuaW1tZWRpYXRlUmVuZGVyLFxuICAgICAgICBzdGFnZ2VyID0gX3RoaXMzJHZhcnMuc3RhZ2dlcixcbiAgICAgICAgb3ZlcndyaXRlID0gX3RoaXMzJHZhcnMub3ZlcndyaXRlLFxuICAgICAgICBrZXlmcmFtZXMgPSBfdGhpczMkdmFycy5rZXlmcmFtZXMsXG4gICAgICAgIGRlZmF1bHRzID0gX3RoaXMzJHZhcnMuZGVmYXVsdHMsXG4gICAgICAgIHNjcm9sbFRyaWdnZXIgPSBfdGhpczMkdmFycy5zY3JvbGxUcmlnZ2VyLFxuICAgICAgICB5b3lvRWFzZSA9IF90aGlzMyR2YXJzLnlveW9FYXNlLFxuICAgICAgICBwYXJlbnQgPSB2YXJzLnBhcmVudCB8fCBfZ2xvYmFsVGltZWxpbmUsXG4gICAgICAgIHBhcnNlZFRhcmdldHMgPSAoX2lzQXJyYXkodGFyZ2V0cykgfHwgX2lzVHlwZWRBcnJheSh0YXJnZXRzKSA/IF9pc051bWJlcih0YXJnZXRzWzBdKSA6IFwibGVuZ3RoXCIgaW4gdmFycykgPyBbdGFyZ2V0c10gOiB0b0FycmF5KHRhcmdldHMpLFxuICAgICAgICB0bCxcbiAgICAgICAgaSxcbiAgICAgICAgY29weSxcbiAgICAgICAgbCxcbiAgICAgICAgcCxcbiAgICAgICAgY3VyVGFyZ2V0LFxuICAgICAgICBzdGFnZ2VyRnVuYyxcbiAgICAgICAgc3RhZ2dlclZhcnNUb01lcmdlO1xuICAgIF90aGlzMy5fdGFyZ2V0cyA9IHBhcnNlZFRhcmdldHMubGVuZ3RoID8gX2hhcm5lc3MocGFyc2VkVGFyZ2V0cykgOiBfd2FybihcIkdTQVAgdGFyZ2V0IFwiICsgdGFyZ2V0cyArIFwiIG5vdCBmb3VuZC4gaHR0cHM6Ly9ncmVlbnNvY2suY29tXCIsICFfY29uZmlnLm51bGxUYXJnZXRXYXJuKSB8fCBbXTtcbiAgICBfdGhpczMuX3B0TG9va3VwID0gW107IC8vUHJvcFR3ZWVuIGxvb2t1cC4gQW4gYXJyYXkgY29udGFpbmluZyBhbiBvYmplY3QgZm9yIGVhY2ggdGFyZ2V0LCBoYXZpbmcga2V5cyBmb3IgZWFjaCB0d2VlbmluZyBwcm9wZXJ0eVxuXG4gICAgX3RoaXMzLl9vdmVyd3JpdGUgPSBvdmVyd3JpdGU7XG5cbiAgICBpZiAoa2V5ZnJhbWVzIHx8IHN0YWdnZXIgfHwgX2lzRnVuY09yU3RyaW5nKGR1cmF0aW9uKSB8fCBfaXNGdW5jT3JTdHJpbmcoZGVsYXkpKSB7XG4gICAgICB2YXJzID0gX3RoaXMzLnZhcnM7XG4gICAgICB0bCA9IF90aGlzMy50aW1lbGluZSA9IG5ldyBUaW1lbGluZSh7XG4gICAgICAgIGRhdGE6IFwibmVzdGVkXCIsXG4gICAgICAgIGRlZmF1bHRzOiBkZWZhdWx0cyB8fCB7fVxuICAgICAgfSk7XG4gICAgICB0bC5raWxsKCk7XG4gICAgICB0bC5wYXJlbnQgPSB0bC5fZHAgPSBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzMyk7XG4gICAgICB0bC5fc3RhcnQgPSAwO1xuXG4gICAgICBpZiAoc3RhZ2dlciB8fCBfaXNGdW5jT3JTdHJpbmcoZHVyYXRpb24pIHx8IF9pc0Z1bmNPclN0cmluZyhkZWxheSkpIHtcbiAgICAgICAgbCA9IHBhcnNlZFRhcmdldHMubGVuZ3RoO1xuICAgICAgICBzdGFnZ2VyRnVuYyA9IHN0YWdnZXIgJiYgZGlzdHJpYnV0ZShzdGFnZ2VyKTtcblxuICAgICAgICBpZiAoX2lzT2JqZWN0KHN0YWdnZXIpKSB7XG4gICAgICAgICAgLy91c2VycyBjYW4gcGFzcyBpbiBjYWxsYmFja3MgbGlrZSBvblN0YXJ0L29uQ29tcGxldGUgaW4gdGhlIHN0YWdnZXIgb2JqZWN0LiBUaGVzZSBzaG91bGQgZmlyZSB3aXRoIGVhY2ggaW5kaXZpZHVhbCB0d2Vlbi5cbiAgICAgICAgICBmb3IgKHAgaW4gc3RhZ2dlcikge1xuICAgICAgICAgICAgaWYgKH5fc3RhZ2dlclR3ZWVuUHJvcHMuaW5kZXhPZihwKSkge1xuICAgICAgICAgICAgICBzdGFnZ2VyVmFyc1RvTWVyZ2UgfHwgKHN0YWdnZXJWYXJzVG9NZXJnZSA9IHt9KTtcbiAgICAgICAgICAgICAgc3RhZ2dlclZhcnNUb01lcmdlW3BdID0gc3RhZ2dlcltwXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgY29weSA9IF9jb3B5RXhjbHVkaW5nKHZhcnMsIF9zdGFnZ2VyUHJvcHNUb1NraXApO1xuICAgICAgICAgIGNvcHkuc3RhZ2dlciA9IDA7XG4gICAgICAgICAgeW95b0Vhc2UgJiYgKGNvcHkueW95b0Vhc2UgPSB5b3lvRWFzZSk7XG4gICAgICAgICAgc3RhZ2dlclZhcnNUb01lcmdlICYmIF9tZXJnZShjb3B5LCBzdGFnZ2VyVmFyc1RvTWVyZ2UpO1xuICAgICAgICAgIGN1clRhcmdldCA9IHBhcnNlZFRhcmdldHNbaV07IC8vZG9uJ3QganVzdCBjb3B5IGR1cmF0aW9uIG9yIGRlbGF5IGJlY2F1c2UgaWYgdGhleSdyZSBhIHN0cmluZyBvciBmdW5jdGlvbiwgd2UnZCBlbmQgdXAgaW4gYW4gaW5maW5pdGUgbG9vcCBiZWNhdXNlIF9pc0Z1bmNPclN0cmluZygpIHdvdWxkIGV2YWx1YXRlIGFzIHRydWUgaW4gdGhlIGNoaWxkIHR3ZWVucywgZW50ZXJpbmcgdGhpcyBsb29wLCBldGMuIFNvIHdlIHBhcnNlIHRoZSB2YWx1ZSBzdHJhaWdodCBmcm9tIHZhcnMgYW5kIGRlZmF1bHQgdG8gMC5cblxuICAgICAgICAgIGNvcHkuZHVyYXRpb24gPSArX3BhcnNlRnVuY09yU3RyaW5nKGR1cmF0aW9uLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzMyksIGksIGN1clRhcmdldCwgcGFyc2VkVGFyZ2V0cyk7XG4gICAgICAgICAgY29weS5kZWxheSA9ICgrX3BhcnNlRnVuY09yU3RyaW5nKGRlbGF5LCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzMyksIGksIGN1clRhcmdldCwgcGFyc2VkVGFyZ2V0cykgfHwgMCkgLSBfdGhpczMuX2RlbGF5O1xuXG4gICAgICAgICAgaWYgKCFzdGFnZ2VyICYmIGwgPT09IDEgJiYgY29weS5kZWxheSkge1xuICAgICAgICAgICAgLy8gaWYgc29tZW9uZSBkb2VzIGRlbGF5OlwicmFuZG9tKDEsIDUpXCIsIHJlcGVhdDotMSwgZm9yIGV4YW1wbGUsIHRoZSBkZWxheSBzaG91bGRuJ3QgYmUgaW5zaWRlIHRoZSByZXBlYXQuXG4gICAgICAgICAgICBfdGhpczMuX2RlbGF5ID0gZGVsYXkgPSBjb3B5LmRlbGF5O1xuICAgICAgICAgICAgX3RoaXMzLl9zdGFydCArPSBkZWxheTtcbiAgICAgICAgICAgIGNvcHkuZGVsYXkgPSAwO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHRsLnRvKGN1clRhcmdldCwgY29weSwgc3RhZ2dlckZ1bmMgPyBzdGFnZ2VyRnVuYyhpLCBjdXJUYXJnZXQsIHBhcnNlZFRhcmdldHMpIDogMCk7XG4gICAgICAgICAgdGwuX2Vhc2UgPSBfZWFzZU1hcC5ub25lO1xuICAgICAgICB9XG5cbiAgICAgICAgdGwuZHVyYXRpb24oKSA/IGR1cmF0aW9uID0gZGVsYXkgPSAwIDogX3RoaXMzLnRpbWVsaW5lID0gMDsgLy8gaWYgdGhlIHRpbWVsaW5lJ3MgZHVyYXRpb24gaXMgMCwgd2UgZG9uJ3QgbmVlZCBhIHRpbWVsaW5lIGludGVybmFsbHkhXG4gICAgICB9IGVsc2UgaWYgKGtleWZyYW1lcykge1xuICAgICAgICBfaW5oZXJpdERlZmF1bHRzKF9zZXREZWZhdWx0cyh0bC52YXJzLmRlZmF1bHRzLCB7XG4gICAgICAgICAgZWFzZTogXCJub25lXCJcbiAgICAgICAgfSkpO1xuXG4gICAgICAgIHRsLl9lYXNlID0gX3BhcnNlRWFzZShrZXlmcmFtZXMuZWFzZSB8fCB2YXJzLmVhc2UgfHwgXCJub25lXCIpO1xuICAgICAgICB2YXIgdGltZSA9IDAsXG4gICAgICAgICAgICBhLFxuICAgICAgICAgICAga2YsXG4gICAgICAgICAgICB2O1xuXG4gICAgICAgIGlmIChfaXNBcnJheShrZXlmcmFtZXMpKSB7XG4gICAgICAgICAga2V5ZnJhbWVzLmZvckVhY2goZnVuY3Rpb24gKGZyYW1lKSB7XG4gICAgICAgICAgICByZXR1cm4gdGwudG8ocGFyc2VkVGFyZ2V0cywgZnJhbWUsIFwiPlwiKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICB0bC5kdXJhdGlvbigpOyAvLyB0byBlbnN1cmUgdGwuX2R1ciBpcyBjYWNoZWQgYmVjYXVzZSB3ZSB0YXAgaW50byBpdCBmb3IgcGVyZm9ybWFuY2UgcHVycG9zZXMgaW4gdGhlIHJlbmRlcigpIG1ldGhvZC5cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb3B5ID0ge307XG5cbiAgICAgICAgICBmb3IgKHAgaW4ga2V5ZnJhbWVzKSB7XG4gICAgICAgICAgICBwID09PSBcImVhc2VcIiB8fCBwID09PSBcImVhc2VFYWNoXCIgfHwgX3BhcnNlS2V5ZnJhbWUocCwga2V5ZnJhbWVzW3BdLCBjb3B5LCBrZXlmcmFtZXMuZWFzZUVhY2gpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGZvciAocCBpbiBjb3B5KSB7XG4gICAgICAgICAgICBhID0gY29weVtwXS5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgICAgICAgIHJldHVybiBhLnQgLSBiLnQ7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRpbWUgPSAwO1xuXG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgYS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICBrZiA9IGFbaV07XG4gICAgICAgICAgICAgIHYgPSB7XG4gICAgICAgICAgICAgICAgZWFzZToga2YuZSxcbiAgICAgICAgICAgICAgICBkdXJhdGlvbjogKGtmLnQgLSAoaSA/IGFbaSAtIDFdLnQgOiAwKSkgLyAxMDAgKiBkdXJhdGlvblxuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICB2W3BdID0ga2YudjtcbiAgICAgICAgICAgICAgdGwudG8ocGFyc2VkVGFyZ2V0cywgdiwgdGltZSk7XG4gICAgICAgICAgICAgIHRpbWUgKz0gdi5kdXJhdGlvbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0bC5kdXJhdGlvbigpIDwgZHVyYXRpb24gJiYgdGwudG8oe30sIHtcbiAgICAgICAgICAgIGR1cmF0aW9uOiBkdXJhdGlvbiAtIHRsLmR1cmF0aW9uKClcbiAgICAgICAgICB9KTsgLy8gaW4gY2FzZSBrZXlmcmFtZXMgZGlkbid0IGdvIHRvIDEwMCVcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBkdXJhdGlvbiB8fCBfdGhpczMuZHVyYXRpb24oZHVyYXRpb24gPSB0bC5kdXJhdGlvbigpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgX3RoaXMzLnRpbWVsaW5lID0gMDsgLy9zcGVlZCBvcHRpbWl6YXRpb24sIGZhc3RlciBsb29rdXBzIChubyBnb2luZyB1cCB0aGUgcHJvdG90eXBlIGNoYWluKVxuICAgIH1cblxuICAgIGlmIChvdmVyd3JpdGUgPT09IHRydWUgJiYgIV9zdXBwcmVzc092ZXJ3cml0ZXMpIHtcbiAgICAgIF9vdmVyd3JpdGluZ1R3ZWVuID0gX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpczMpO1xuXG4gICAgICBfZ2xvYmFsVGltZWxpbmUua2lsbFR3ZWVuc09mKHBhcnNlZFRhcmdldHMpO1xuXG4gICAgICBfb3ZlcndyaXRpbmdUd2VlbiA9IDA7XG4gICAgfVxuXG4gICAgX2FkZFRvVGltZWxpbmUocGFyZW50LCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzMyksIHBvc2l0aW9uKTtcblxuICAgIHZhcnMucmV2ZXJzZWQgJiYgX3RoaXMzLnJldmVyc2UoKTtcbiAgICB2YXJzLnBhdXNlZCAmJiBfdGhpczMucGF1c2VkKHRydWUpO1xuXG4gICAgaWYgKGltbWVkaWF0ZVJlbmRlciB8fCAhZHVyYXRpb24gJiYgIWtleWZyYW1lcyAmJiBfdGhpczMuX3N0YXJ0ID09PSBfcm91bmRQcmVjaXNlKHBhcmVudC5fdGltZSkgJiYgX2lzTm90RmFsc2UoaW1tZWRpYXRlUmVuZGVyKSAmJiBfaGFzTm9QYXVzZWRBbmNlc3RvcnMoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpczMpKSAmJiBwYXJlbnQuZGF0YSAhPT0gXCJuZXN0ZWRcIikge1xuICAgICAgX3RoaXMzLl90VGltZSA9IC1fdGlueU51bTsgLy9mb3JjZXMgYSByZW5kZXIgd2l0aG91dCBoYXZpbmcgdG8gc2V0IHRoZSByZW5kZXIoKSBcImZvcmNlXCIgcGFyYW1ldGVyIHRvIHRydWUgYmVjYXVzZSB3ZSB3YW50IHRvIGFsbG93IGxhenlpbmcgYnkgZGVmYXVsdCAodXNpbmcgdGhlIFwiZm9yY2VcIiBwYXJhbWV0ZXIgYWx3YXlzIGZvcmNlcyBhbiBpbW1lZGlhdGUgZnVsbCByZW5kZXIpXG5cbiAgICAgIF90aGlzMy5yZW5kZXIoTWF0aC5tYXgoMCwgLWRlbGF5KSk7IC8vaW4gY2FzZSBkZWxheSBpcyBuZWdhdGl2ZVxuXG4gICAgfVxuXG4gICAgc2Nyb2xsVHJpZ2dlciAmJiBfc2Nyb2xsVHJpZ2dlcihfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzMyksIHNjcm9sbFRyaWdnZXIpO1xuICAgIHJldHVybiBfdGhpczM7XG4gIH1cblxuICB2YXIgX3Byb3RvMyA9IFR3ZWVuLnByb3RvdHlwZTtcblxuICBfcHJvdG8zLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcih0b3RhbFRpbWUsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSkge1xuICAgIHZhciBwcmV2VGltZSA9IHRoaXMuX3RpbWUsXG4gICAgICAgIHREdXIgPSB0aGlzLl90RHVyLFxuICAgICAgICBkdXIgPSB0aGlzLl9kdXIsXG4gICAgICAgIGlzTmVnYXRpdmUgPSB0b3RhbFRpbWUgPCAwLFxuICAgICAgICB0VGltZSA9IHRvdGFsVGltZSA+IHREdXIgLSBfdGlueU51bSAmJiAhaXNOZWdhdGl2ZSA/IHREdXIgOiB0b3RhbFRpbWUgPCBfdGlueU51bSA/IDAgOiB0b3RhbFRpbWUsXG4gICAgICAgIHRpbWUsXG4gICAgICAgIHB0LFxuICAgICAgICBpdGVyYXRpb24sXG4gICAgICAgIGN5Y2xlRHVyYXRpb24sXG4gICAgICAgIHByZXZJdGVyYXRpb24sXG4gICAgICAgIGlzWW95byxcbiAgICAgICAgcmF0aW8sXG4gICAgICAgIHRpbWVsaW5lLFxuICAgICAgICB5b3lvRWFzZTtcblxuICAgIGlmICghZHVyKSB7XG4gICAgICBfcmVuZGVyWmVyb0R1cmF0aW9uVHdlZW4odGhpcywgdG90YWxUaW1lLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpO1xuICAgIH0gZWxzZSBpZiAodFRpbWUgIT09IHRoaXMuX3RUaW1lIHx8ICF0b3RhbFRpbWUgfHwgZm9yY2UgfHwgIXRoaXMuX2luaXR0ZWQgJiYgdGhpcy5fdFRpbWUgfHwgdGhpcy5fc3RhcnRBdCAmJiB0aGlzLl96VGltZSA8IDAgIT09IGlzTmVnYXRpdmUpIHtcbiAgICAgIC8vdGhpcyBzZW5zZXMgaWYgd2UncmUgY3Jvc3Npbmcgb3ZlciB0aGUgc3RhcnQgdGltZSwgaW4gd2hpY2ggY2FzZSB3ZSBtdXN0IHJlY29yZCBfelRpbWUgYW5kIGZvcmNlIHRoZSByZW5kZXIsIGJ1dCB3ZSBkbyBpdCBpbiB0aGlzIGxlbmd0aHkgY29uZGl0aW9uYWwgd2F5IGZvciBwZXJmb3JtYW5jZSByZWFzb25zICh1c3VhbGx5IHdlIGNhbiBza2lwIHRoZSBjYWxjdWxhdGlvbnMpOiB0aGlzLl9pbml0dGVkICYmICh0aGlzLl96VGltZSA8IDApICE9PSAodG90YWxUaW1lIDwgMClcbiAgICAgIHRpbWUgPSB0VGltZTtcbiAgICAgIHRpbWVsaW5lID0gdGhpcy50aW1lbGluZTtcblxuICAgICAgaWYgKHRoaXMuX3JlcGVhdCkge1xuICAgICAgICAvL2FkanVzdCB0aGUgdGltZSBmb3IgcmVwZWF0cyBhbmQgeW95b3NcbiAgICAgICAgY3ljbGVEdXJhdGlvbiA9IGR1ciArIHRoaXMuX3JEZWxheTtcblxuICAgICAgICBpZiAodGhpcy5fcmVwZWF0IDwgLTEgJiYgaXNOZWdhdGl2ZSkge1xuICAgICAgICAgIHJldHVybiB0aGlzLnRvdGFsVGltZShjeWNsZUR1cmF0aW9uICogMTAwICsgdG90YWxUaW1lLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGltZSA9IF9yb3VuZFByZWNpc2UodFRpbWUgJSBjeWNsZUR1cmF0aW9uKTsgLy9yb3VuZCB0byBhdm9pZCBmbG9hdGluZyBwb2ludCBlcnJvcnMuICg0ICUgMC44IHNob3VsZCBiZSAwIGJ1dCBzb21lIGJyb3dzZXJzIHJlcG9ydCBpdCBhcyAwLjc5OTk5OTk5ISlcblxuICAgICAgICBpZiAodFRpbWUgPT09IHREdXIpIHtcbiAgICAgICAgICAvLyB0aGUgdER1ciA9PT0gdFRpbWUgaXMgZm9yIGVkZ2UgY2FzZXMgd2hlcmUgdGhlcmUncyBhIGxlbmd0aHkgZGVjaW1hbCBvbiB0aGUgZHVyYXRpb24gYW5kIGl0IG1heSByZWFjaCB0aGUgdmVyeSBlbmQgYnV0IHRoZSB0aW1lIGlzIHJlbmRlcmVkIGFzIG5vdC1xdWl0ZS10aGVyZSAocmVtZW1iZXIsIHREdXIgaXMgcm91bmRlZCB0byA0IGRlY2ltYWxzIHdoZXJlYXMgZHVyIGlzbid0KVxuICAgICAgICAgIGl0ZXJhdGlvbiA9IHRoaXMuX3JlcGVhdDtcbiAgICAgICAgICB0aW1lID0gZHVyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZXJhdGlvbiA9IH5+KHRUaW1lIC8gY3ljbGVEdXJhdGlvbik7XG5cbiAgICAgICAgICBpZiAoaXRlcmF0aW9uICYmIGl0ZXJhdGlvbiA9PT0gdFRpbWUgLyBjeWNsZUR1cmF0aW9uKSB7XG4gICAgICAgICAgICB0aW1lID0gZHVyO1xuICAgICAgICAgICAgaXRlcmF0aW9uLS07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGltZSA+IGR1ciAmJiAodGltZSA9IGR1cik7XG4gICAgICAgIH1cblxuICAgICAgICBpc1lveW8gPSB0aGlzLl95b3lvICYmIGl0ZXJhdGlvbiAmIDE7XG5cbiAgICAgICAgaWYgKGlzWW95bykge1xuICAgICAgICAgIHlveW9FYXNlID0gdGhpcy5feUVhc2U7XG4gICAgICAgICAgdGltZSA9IGR1ciAtIHRpbWU7XG4gICAgICAgIH1cblxuICAgICAgICBwcmV2SXRlcmF0aW9uID0gX2FuaW1hdGlvbkN5Y2xlKHRoaXMuX3RUaW1lLCBjeWNsZUR1cmF0aW9uKTtcblxuICAgICAgICBpZiAodGltZSA9PT0gcHJldlRpbWUgJiYgIWZvcmNlICYmIHRoaXMuX2luaXR0ZWQpIHtcbiAgICAgICAgICAvL2NvdWxkIGJlIGR1cmluZyB0aGUgcmVwZWF0RGVsYXkgcGFydC4gTm8gbmVlZCB0byByZW5kZXIgYW5kIGZpcmUgY2FsbGJhY2tzLlxuICAgICAgICAgIHRoaXMuX3RUaW1lID0gdFRpbWU7XG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXRlcmF0aW9uICE9PSBwcmV2SXRlcmF0aW9uKSB7XG4gICAgICAgICAgdGltZWxpbmUgJiYgdGhpcy5feUVhc2UgJiYgX3Byb3BhZ2F0ZVlveW9FYXNlKHRpbWVsaW5lLCBpc1lveW8pOyAvL3JlcGVhdFJlZnJlc2ggZnVuY3Rpb25hbGl0eVxuXG4gICAgICAgICAgaWYgKHRoaXMudmFycy5yZXBlYXRSZWZyZXNoICYmICFpc1lveW8gJiYgIXRoaXMuX2xvY2spIHtcbiAgICAgICAgICAgIHRoaXMuX2xvY2sgPSBmb3JjZSA9IDE7IC8vZm9yY2UsIG90aGVyd2lzZSBpZiBsYXp5IGlzIHRydWUsIHRoZSBfYXR0ZW1wdEluaXRUd2VlbigpIHdpbGwgcmV0dXJuIGFuZCB3ZSdsbCBqdW1wIG91dCBhbmQgZ2V0IGNhdWdodCBib3VuY2luZyBvbiBlYWNoIHRpY2suXG5cbiAgICAgICAgICAgIHRoaXMucmVuZGVyKF9yb3VuZFByZWNpc2UoY3ljbGVEdXJhdGlvbiAqIGl0ZXJhdGlvbiksIHRydWUpLmludmFsaWRhdGUoKS5fbG9jayA9IDA7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICghdGhpcy5faW5pdHRlZCkge1xuICAgICAgICBpZiAoX2F0dGVtcHRJbml0VHdlZW4odGhpcywgaXNOZWdhdGl2ZSA/IHRvdGFsVGltZSA6IHRpbWUsIGZvcmNlLCBzdXBwcmVzc0V2ZW50cykpIHtcbiAgICAgICAgICB0aGlzLl90VGltZSA9IDA7IC8vIGluIGNvbnN0cnVjdG9yIGlmIGltbWVkaWF0ZVJlbmRlciBpcyB0cnVlLCB3ZSBzZXQgX3RUaW1lIHRvIC1fdGlueU51bSB0byBoYXZlIHRoZSBwbGF5aGVhZCBjcm9zcyB0aGUgc3RhcnRpbmcgcG9pbnQgYnV0IHdlIGNhbid0IGxlYXZlIF90VGltZSBhcyBhIG5lZ2F0aXZlIG51bWJlci5cblxuICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHByZXZUaW1lICE9PSB0aGlzLl90aW1lKSB7XG4gICAgICAgICAgLy8gcmFyZSBlZGdlIGNhc2UgLSBkdXJpbmcgaW5pdGlhbGl6YXRpb24sIGFuIG9uVXBkYXRlIGluIHRoZSBfc3RhcnRBdCAoLmZyb21UbygpKSBtaWdodCBmb3JjZSB0aGlzIHR3ZWVuIHRvIHJlbmRlciBhdCBhIGRpZmZlcmVudCBzcG90IGluIHdoaWNoIGNhc2Ugd2Ugc2hvdWxkIGRpdGNoIHRoaXMgcmVuZGVyKCkgY2FsbCBzbyB0aGF0IGl0IGRvZXNuJ3QgcmV2ZXJ0IHRoZSB2YWx1ZXMuXG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZHVyICE9PSB0aGlzLl9kdXIpIHtcbiAgICAgICAgICAvLyB3aGlsZSBpbml0dGluZywgYSBwbHVnaW4gbGlrZSBJbmVydGlhUGx1Z2luIG1pZ2h0IGFsdGVyIHRoZSBkdXJhdGlvbiwgc28gcmVydW4gZnJvbSB0aGUgc3RhcnQgdG8gZW5zdXJlIGV2ZXJ5dGhpbmcgcmVuZGVycyBhcyBpdCBzaG91bGQuXG4gICAgICAgICAgcmV0dXJuIHRoaXMucmVuZGVyKHRvdGFsVGltZSwgc3VwcHJlc3NFdmVudHMsIGZvcmNlKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLl90VGltZSA9IHRUaW1lO1xuICAgICAgdGhpcy5fdGltZSA9IHRpbWU7XG5cbiAgICAgIGlmICghdGhpcy5fYWN0ICYmIHRoaXMuX3RzKSB7XG4gICAgICAgIHRoaXMuX2FjdCA9IDE7IC8vYXMgbG9uZyBhcyBpdCdzIG5vdCBwYXVzZWQsIGZvcmNlIGl0IHRvIGJlIGFjdGl2ZSBzbyB0aGF0IGlmIHRoZSB1c2VyIHJlbmRlcnMgaW5kZXBlbmRlbnQgb2YgdGhlIHBhcmVudCB0aW1lbGluZSwgaXQnbGwgYmUgZm9yY2VkIHRvIHJlLXJlbmRlciBvbiB0aGUgbmV4dCB0aWNrLlxuXG4gICAgICAgIHRoaXMuX2xhenkgPSAwO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnJhdGlvID0gcmF0aW8gPSAoeW95b0Vhc2UgfHwgdGhpcy5fZWFzZSkodGltZSAvIGR1cik7XG5cbiAgICAgIGlmICh0aGlzLl9mcm9tKSB7XG4gICAgICAgIHRoaXMucmF0aW8gPSByYXRpbyA9IDEgLSByYXRpbztcbiAgICAgIH1cblxuICAgICAgaWYgKHRpbWUgJiYgIXByZXZUaW1lICYmICFzdXBwcmVzc0V2ZW50cykge1xuICAgICAgICBfY2FsbGJhY2sodGhpcywgXCJvblN0YXJ0XCIpO1xuXG4gICAgICAgIGlmICh0aGlzLl90VGltZSAhPT0gdFRpbWUpIHtcbiAgICAgICAgICAvLyBpbiBjYXNlIHRoZSBvblN0YXJ0IHRyaWdnZXJlZCBhIHJlbmRlciBhdCBhIGRpZmZlcmVudCBzcG90LCBlamVjdC4gTGlrZSBpZiBzb21lb25lIGRpZCBhbmltYXRpb24ucGF1c2UoMC41KSBvciBzb21ldGhpbmcgaW5zaWRlIHRoZSBvblN0YXJ0LlxuICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHB0ID0gdGhpcy5fcHQ7XG5cbiAgICAgIHdoaWxlIChwdCkge1xuICAgICAgICBwdC5yKHJhdGlvLCBwdC5kKTtcbiAgICAgICAgcHQgPSBwdC5fbmV4dDtcbiAgICAgIH1cblxuICAgICAgdGltZWxpbmUgJiYgdGltZWxpbmUucmVuZGVyKHRvdGFsVGltZSA8IDAgPyB0b3RhbFRpbWUgOiAhdGltZSAmJiBpc1lveW8gPyAtX3RpbnlOdW0gOiB0aW1lbGluZS5fZHVyICogdGltZWxpbmUuX2Vhc2UodGltZSAvIHRoaXMuX2R1ciksIHN1cHByZXNzRXZlbnRzLCBmb3JjZSkgfHwgdGhpcy5fc3RhcnRBdCAmJiAodGhpcy5felRpbWUgPSB0b3RhbFRpbWUpO1xuXG4gICAgICBpZiAodGhpcy5fb25VcGRhdGUgJiYgIXN1cHByZXNzRXZlbnRzKSB7XG4gICAgICAgIGlzTmVnYXRpdmUgJiYgX3Jld2luZFN0YXJ0QXQodGhpcywgdG90YWxUaW1lLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpOyAvL25vdGU6IGZvciBwZXJmb3JtYW5jZSByZWFzb25zLCB3ZSB0dWNrIHRoaXMgY29uZGl0aW9uYWwgbG9naWMgaW5zaWRlIGxlc3MgdHJhdmVsZWQgYXJlYXMgKG1vc3QgdHdlZW5zIGRvbid0IGhhdmUgYW4gb25VcGRhdGUpLiBXZSdkIGp1c3QgaGF2ZSBpdCBhdCB0aGUgZW5kIGJlZm9yZSB0aGUgb25Db21wbGV0ZSwgYnV0IHRoZSB2YWx1ZXMgc2hvdWxkIGJlIHVwZGF0ZWQgYmVmb3JlIGFueSBvblVwZGF0ZSBpcyBjYWxsZWQsIHNvIHdlIEFMU08gcHV0IGl0IGhlcmUgYW5kIHRoZW4gaWYgaXQncyBub3QgY2FsbGVkLCB3ZSBkbyBzbyBsYXRlciBuZWFyIHRoZSBvbkNvbXBsZXRlLlxuXG4gICAgICAgIF9jYWxsYmFjayh0aGlzLCBcIm9uVXBkYXRlXCIpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9yZXBlYXQgJiYgaXRlcmF0aW9uICE9PSBwcmV2SXRlcmF0aW9uICYmIHRoaXMudmFycy5vblJlcGVhdCAmJiAhc3VwcHJlc3NFdmVudHMgJiYgdGhpcy5wYXJlbnQgJiYgX2NhbGxiYWNrKHRoaXMsIFwib25SZXBlYXRcIik7XG5cbiAgICAgIGlmICgodFRpbWUgPT09IHRoaXMuX3REdXIgfHwgIXRUaW1lKSAmJiB0aGlzLl90VGltZSA9PT0gdFRpbWUpIHtcbiAgICAgICAgaXNOZWdhdGl2ZSAmJiAhdGhpcy5fb25VcGRhdGUgJiYgX3Jld2luZFN0YXJ0QXQodGhpcywgdG90YWxUaW1lLCB0cnVlLCB0cnVlKTtcbiAgICAgICAgKHRvdGFsVGltZSB8fCAhZHVyKSAmJiAodFRpbWUgPT09IHRoaXMuX3REdXIgJiYgdGhpcy5fdHMgPiAwIHx8ICF0VGltZSAmJiB0aGlzLl90cyA8IDApICYmIF9yZW1vdmVGcm9tUGFyZW50KHRoaXMsIDEpOyAvLyBkb24ndCByZW1vdmUgaWYgd2UncmUgcmVuZGVyaW5nIGF0IGV4YWN0bHkgYSB0aW1lIG9mIDAsIGFzIHRoZXJlIGNvdWxkIGJlIGF1dG9SZXZlcnQgdmFsdWVzIHRoYXQgc2hvdWxkIGdldCBzZXQgb24gdGhlIG5leHQgdGljayAoaWYgdGhlIHBsYXloZWFkIGdvZXMgYmFja3dhcmQgYmV5b25kIHRoZSBzdGFydFRpbWUsIG5lZ2F0aXZlIHRvdGFsVGltZSkuIERvbid0IHJlbW92ZSBpZiB0aGUgdGltZWxpbmUgaXMgcmV2ZXJzZWQgYW5kIHRoZSBwbGF5aGVhZCBpc24ndCBhdCAwLCBvdGhlcndpc2UgdGwucHJvZ3Jlc3MoMSkucmV2ZXJzZSgpIHdvbid0IHdvcmsuIE9ubHkgcmVtb3ZlIGlmIHRoZSBwbGF5aGVhZCBpcyBhdCB0aGUgZW5kIGFuZCB0aW1lU2NhbGUgaXMgcG9zaXRpdmUsIG9yIGlmIHRoZSBwbGF5aGVhZCBpcyBhdCAwIGFuZCB0aGUgdGltZVNjYWxlIGlzIG5lZ2F0aXZlLlxuXG4gICAgICAgIGlmICghc3VwcHJlc3NFdmVudHMgJiYgIShpc05lZ2F0aXZlICYmICFwcmV2VGltZSkgJiYgKHRUaW1lIHx8IHByZXZUaW1lKSkge1xuICAgICAgICAgIC8vIGlmIHByZXZUaW1lIGFuZCB0VGltZSBhcmUgemVybywgd2Ugc2hvdWxkbid0IGZpcmUgdGhlIG9uUmV2ZXJzZUNvbXBsZXRlLiBUaGlzIGNvdWxkIGhhcHBlbiBpZiB5b3UgZ3NhcC50byguLi4ge3BhdXNlZDp0cnVlfSkucGxheSgpO1xuICAgICAgICAgIF9jYWxsYmFjayh0aGlzLCB0VGltZSA9PT0gdER1ciA/IFwib25Db21wbGV0ZVwiIDogXCJvblJldmVyc2VDb21wbGV0ZVwiLCB0cnVlKTtcblxuICAgICAgICAgIHRoaXMuX3Byb20gJiYgISh0VGltZSA8IHREdXIgJiYgdGhpcy50aW1lU2NhbGUoKSA+IDApICYmIHRoaXMuX3Byb20oKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90bzMudGFyZ2V0cyA9IGZ1bmN0aW9uIHRhcmdldHMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3RhcmdldHM7XG4gIH07XG5cbiAgX3Byb3RvMy5pbnZhbGlkYXRlID0gZnVuY3Rpb24gaW52YWxpZGF0ZSgpIHtcbiAgICB0aGlzLl9wdCA9IHRoaXMuX29wID0gdGhpcy5fc3RhcnRBdCA9IHRoaXMuX29uVXBkYXRlID0gdGhpcy5fbGF6eSA9IHRoaXMucmF0aW8gPSAwO1xuICAgIHRoaXMuX3B0TG9va3VwID0gW107XG4gICAgdGhpcy50aW1lbGluZSAmJiB0aGlzLnRpbWVsaW5lLmludmFsaWRhdGUoKTtcbiAgICByZXR1cm4gX0FuaW1hdGlvbjIucHJvdG90eXBlLmludmFsaWRhdGUuY2FsbCh0aGlzKTtcbiAgfTtcblxuICBfcHJvdG8zLnJlc2V0VG8gPSBmdW5jdGlvbiByZXNldFRvKHByb3BlcnR5LCB2YWx1ZSwgc3RhcnQsIHN0YXJ0SXNSZWxhdGl2ZSkge1xuICAgIF90aWNrZXJBY3RpdmUgfHwgX3RpY2tlci53YWtlKCk7XG4gICAgdGhpcy5fdHMgfHwgdGhpcy5wbGF5KCk7XG4gICAgdmFyIHRpbWUgPSBNYXRoLm1pbih0aGlzLl9kdXIsICh0aGlzLl9kcC5fdGltZSAtIHRoaXMuX3N0YXJ0KSAqIHRoaXMuX3RzKSxcbiAgICAgICAgcmF0aW87XG4gICAgdGhpcy5faW5pdHRlZCB8fCBfaW5pdFR3ZWVuKHRoaXMsIHRpbWUpO1xuICAgIHJhdGlvID0gdGhpcy5fZWFzZSh0aW1lIC8gdGhpcy5fZHVyKTsgLy8gZG9uJ3QganVzdCBnZXQgdHdlZW4ucmF0aW8gYmVjYXVzZSBpdCBtYXkgbm90IGhhdmUgcmVuZGVyZWQgeWV0LlxuICAgIC8vIHBvc3NpYmxlIGZ1dHVyZSBhZGRpdGlvbiB0byBhbGxvdyBhbiBvYmplY3Qgd2l0aCBtdWx0aXBsZSB2YWx1ZXMgdG8gdXBkYXRlLCBsaWtlIHR3ZWVuLnJlc2V0VG8oe3g6IDEwMCwgeTogMjAwfSk7IEF0IHRoaXMgcG9pbnQsIGl0IGRvZXNuJ3Qgc2VlbSB3b3J0aCB0aGUgYWRkZWQga2IgZ2l2ZW4gdGhlIGZhY3QgdGhhdCBtb3N0IHVzZXJzIHdpbGwgbGlrZWx5IG9wdCBmb3IgdGhlIGNvbnZlbmllbnQgZ3NhcC5xdWlja1RvKCkgd2F5IG9mIGludGVyYWN0aW5nIHdpdGggdGhpcyBtZXRob2QuXG4gICAgLy8gaWYgKF9pc09iamVjdChwcm9wZXJ0eSkpIHsgLy8gcGVyZm9ybWFuY2Ugb3B0aW1pemF0aW9uXG4gICAgLy8gXHRmb3IgKHAgaW4gcHJvcGVydHkpIHtcbiAgICAvLyBcdFx0aWYgKF91cGRhdGVQcm9wVHdlZW5zKHRoaXMsIHAsIHByb3BlcnR5W3BdLCB2YWx1ZSA/IHZhbHVlW3BdIDogbnVsbCwgc3RhcnQsIHJhdGlvLCB0aW1lKSkge1xuICAgIC8vIFx0XHRcdHJldHVybiB0aGlzLnJlc2V0VG8ocHJvcGVydHksIHZhbHVlLCBzdGFydCwgc3RhcnRJc1JlbGF0aXZlKTsgLy8gaWYgYSBQcm9wVHdlZW4gd2Fzbid0IGZvdW5kIGZvciB0aGUgcHJvcGVydHksIGl0J2xsIGdldCBmb3JjZWQgd2l0aCBhIHJlLWluaXRpYWxpemF0aW9uIHNvIHdlIG5lZWQgdG8ganVtcCBvdXQgYW5kIHN0YXJ0IG92ZXIgYWdhaW4uXG4gICAgLy8gXHRcdH1cbiAgICAvLyBcdH1cbiAgICAvLyB9IGVsc2Uge1xuXG4gICAgaWYgKF91cGRhdGVQcm9wVHdlZW5zKHRoaXMsIHByb3BlcnR5LCB2YWx1ZSwgc3RhcnQsIHN0YXJ0SXNSZWxhdGl2ZSwgcmF0aW8sIHRpbWUpKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZXNldFRvKHByb3BlcnR5LCB2YWx1ZSwgc3RhcnQsIHN0YXJ0SXNSZWxhdGl2ZSk7IC8vIGlmIGEgUHJvcFR3ZWVuIHdhc24ndCBmb3VuZCBmb3IgdGhlIHByb3BlcnR5LCBpdCdsbCBnZXQgZm9yY2VkIHdpdGggYSByZS1pbml0aWFsaXphdGlvbiBzbyB3ZSBuZWVkIHRvIGp1bXAgb3V0IGFuZCBzdGFydCBvdmVyIGFnYWluLlxuICAgIH0gLy99XG5cblxuICAgIF9hbGlnblBsYXloZWFkKHRoaXMsIDApO1xuXG4gICAgdGhpcy5wYXJlbnQgfHwgX2FkZExpbmtlZExpc3RJdGVtKHRoaXMuX2RwLCB0aGlzLCBcIl9maXJzdFwiLCBcIl9sYXN0XCIsIHRoaXMuX2RwLl9zb3J0ID8gXCJfc3RhcnRcIiA6IDApO1xuICAgIHJldHVybiB0aGlzLnJlbmRlcigwKTtcbiAgfTtcblxuICBfcHJvdG8zLmtpbGwgPSBmdW5jdGlvbiBraWxsKHRhcmdldHMsIHZhcnMpIHtcbiAgICBpZiAodmFycyA9PT0gdm9pZCAwKSB7XG4gICAgICB2YXJzID0gXCJhbGxcIjtcbiAgICB9XG5cbiAgICBpZiAoIXRhcmdldHMgJiYgKCF2YXJzIHx8IHZhcnMgPT09IFwiYWxsXCIpKSB7XG4gICAgICB0aGlzLl9sYXp5ID0gdGhpcy5fcHQgPSAwO1xuICAgICAgcmV0dXJuIHRoaXMucGFyZW50ID8gX2ludGVycnVwdCh0aGlzKSA6IHRoaXM7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMudGltZWxpbmUpIHtcbiAgICAgIHZhciB0RHVyID0gdGhpcy50aW1lbGluZS50b3RhbER1cmF0aW9uKCk7XG4gICAgICB0aGlzLnRpbWVsaW5lLmtpbGxUd2VlbnNPZih0YXJnZXRzLCB2YXJzLCBfb3ZlcndyaXRpbmdUd2VlbiAmJiBfb3ZlcndyaXRpbmdUd2Vlbi52YXJzLm92ZXJ3cml0ZSAhPT0gdHJ1ZSkuX2ZpcnN0IHx8IF9pbnRlcnJ1cHQodGhpcyk7IC8vIGlmIG5vdGhpbmcgaXMgbGVmdCB0d2VlbmluZywgaW50ZXJydXB0LlxuXG4gICAgICB0aGlzLnBhcmVudCAmJiB0RHVyICE9PSB0aGlzLnRpbWVsaW5lLnRvdGFsRHVyYXRpb24oKSAmJiBfc2V0RHVyYXRpb24odGhpcywgdGhpcy5fZHVyICogdGhpcy50aW1lbGluZS5fdER1ciAvIHREdXIsIDAsIDEpOyAvLyBpZiBhIG5lc3RlZCB0d2VlbiBpcyBraWxsZWQgdGhhdCBjaGFuZ2VzIHRoZSBkdXJhdGlvbiwgaXQgc2hvdWxkIGFmZmVjdCB0aGlzIHR3ZWVuJ3MgZHVyYXRpb24uIFdlIG11c3QgdXNlIHRoZSByYXRpbywgdGhvdWdoLCBiZWNhdXNlIHNvbWV0aW1lcyB0aGUgaW50ZXJuYWwgdGltZWxpbmUgaXMgc3RyZXRjaGVkIGxpa2UgZm9yIGtleWZyYW1lcyB3aGVyZSB0aGV5IGRvbid0IGFsbCBhZGQgdXAgdG8gd2hhdGV2ZXIgdGhlIHBhcmVudCB0d2VlbidzIGR1cmF0aW9uIHdhcyBzZXQgdG8uXG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHZhciBwYXJzZWRUYXJnZXRzID0gdGhpcy5fdGFyZ2V0cyxcbiAgICAgICAga2lsbGluZ1RhcmdldHMgPSB0YXJnZXRzID8gdG9BcnJheSh0YXJnZXRzKSA6IHBhcnNlZFRhcmdldHMsXG4gICAgICAgIHByb3BUd2Vlbkxvb2t1cCA9IHRoaXMuX3B0TG9va3VwLFxuICAgICAgICBmaXJzdFBUID0gdGhpcy5fcHQsXG4gICAgICAgIG92ZXJ3cml0dGVuUHJvcHMsXG4gICAgICAgIGN1ckxvb2t1cCxcbiAgICAgICAgY3VyT3ZlcndyaXRlUHJvcHMsXG4gICAgICAgIHByb3BzLFxuICAgICAgICBwLFxuICAgICAgICBwdCxcbiAgICAgICAgaTtcblxuICAgIGlmICgoIXZhcnMgfHwgdmFycyA9PT0gXCJhbGxcIikgJiYgX2FycmF5c01hdGNoKHBhcnNlZFRhcmdldHMsIGtpbGxpbmdUYXJnZXRzKSkge1xuICAgICAgdmFycyA9PT0gXCJhbGxcIiAmJiAodGhpcy5fcHQgPSAwKTtcbiAgICAgIHJldHVybiBfaW50ZXJydXB0KHRoaXMpO1xuICAgIH1cblxuICAgIG92ZXJ3cml0dGVuUHJvcHMgPSB0aGlzLl9vcCA9IHRoaXMuX29wIHx8IFtdO1xuXG4gICAgaWYgKHZhcnMgIT09IFwiYWxsXCIpIHtcbiAgICAgIC8vc28gcGVvcGxlIGNhbiBwYXNzIGluIGEgY29tbWEtZGVsaW1pdGVkIGxpc3Qgb2YgcHJvcGVydHkgbmFtZXNcbiAgICAgIGlmIChfaXNTdHJpbmcodmFycykpIHtcbiAgICAgICAgcCA9IHt9O1xuXG4gICAgICAgIF9mb3JFYWNoTmFtZSh2YXJzLCBmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICAgIHJldHVybiBwW25hbWVdID0gMTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdmFycyA9IHA7XG4gICAgICB9XG5cbiAgICAgIHZhcnMgPSBfYWRkQWxpYXNlc1RvVmFycyhwYXJzZWRUYXJnZXRzLCB2YXJzKTtcbiAgICB9XG5cbiAgICBpID0gcGFyc2VkVGFyZ2V0cy5sZW5ndGg7XG5cbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICBpZiAofmtpbGxpbmdUYXJnZXRzLmluZGV4T2YocGFyc2VkVGFyZ2V0c1tpXSkpIHtcbiAgICAgICAgY3VyTG9va3VwID0gcHJvcFR3ZWVuTG9va3VwW2ldO1xuXG4gICAgICAgIGlmICh2YXJzID09PSBcImFsbFwiKSB7XG4gICAgICAgICAgb3ZlcndyaXR0ZW5Qcm9wc1tpXSA9IHZhcnM7XG4gICAgICAgICAgcHJvcHMgPSBjdXJMb29rdXA7XG4gICAgICAgICAgY3VyT3ZlcndyaXRlUHJvcHMgPSB7fTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjdXJPdmVyd3JpdGVQcm9wcyA9IG92ZXJ3cml0dGVuUHJvcHNbaV0gPSBvdmVyd3JpdHRlblByb3BzW2ldIHx8IHt9O1xuICAgICAgICAgIHByb3BzID0gdmFycztcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAocCBpbiBwcm9wcykge1xuICAgICAgICAgIHB0ID0gY3VyTG9va3VwICYmIGN1ckxvb2t1cFtwXTtcblxuICAgICAgICAgIGlmIChwdCkge1xuICAgICAgICAgICAgaWYgKCEoXCJraWxsXCIgaW4gcHQuZCkgfHwgcHQuZC5raWxsKHApID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgIF9yZW1vdmVMaW5rZWRMaXN0SXRlbSh0aGlzLCBwdCwgXCJfcHRcIik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGRlbGV0ZSBjdXJMb29rdXBbcF07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGN1ck92ZXJ3cml0ZVByb3BzICE9PSBcImFsbFwiKSB7XG4gICAgICAgICAgICBjdXJPdmVyd3JpdGVQcm9wc1twXSA9IDE7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5faW5pdHRlZCAmJiAhdGhpcy5fcHQgJiYgZmlyc3RQVCAmJiBfaW50ZXJydXB0KHRoaXMpOyAvL2lmIGFsbCB0d2VlbmluZyBwcm9wZXJ0aWVzIGFyZSBraWxsZWQsIGtpbGwgdGhlIHR3ZWVuLiBXaXRob3V0IHRoaXMgbGluZSwgaWYgdGhlcmUncyBhIHR3ZWVuIHdpdGggbXVsdGlwbGUgdGFyZ2V0cyBhbmQgdGhlbiB5b3Uga2lsbFR3ZWVuc09mKCkgZWFjaCB0YXJnZXQgaW5kaXZpZHVhbGx5LCB0aGUgdHdlZW4gd291bGQgdGVjaG5pY2FsbHkgc3RpbGwgcmVtYWluIGFjdGl2ZSBhbmQgZmlyZSBpdHMgb25Db21wbGV0ZSBldmVuIHRob3VnaCB0aGVyZSBhcmVuJ3QgYW55IG1vcmUgcHJvcGVydGllcyB0d2VlbmluZy5cblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIFR3ZWVuLnRvID0gZnVuY3Rpb24gdG8odGFyZ2V0cywgdmFycykge1xuICAgIHJldHVybiBuZXcgVHdlZW4odGFyZ2V0cywgdmFycywgYXJndW1lbnRzWzJdKTtcbiAgfTtcblxuICBUd2Vlbi5mcm9tID0gZnVuY3Rpb24gZnJvbSh0YXJnZXRzLCB2YXJzKSB7XG4gICAgcmV0dXJuIF9jcmVhdGVUd2VlblR5cGUoMSwgYXJndW1lbnRzKTtcbiAgfTtcblxuICBUd2Vlbi5kZWxheWVkQ2FsbCA9IGZ1bmN0aW9uIGRlbGF5ZWRDYWxsKGRlbGF5LCBjYWxsYmFjaywgcGFyYW1zLCBzY29wZSkge1xuICAgIHJldHVybiBuZXcgVHdlZW4oY2FsbGJhY2ssIDAsIHtcbiAgICAgIGltbWVkaWF0ZVJlbmRlcjogZmFsc2UsXG4gICAgICBsYXp5OiBmYWxzZSxcbiAgICAgIG92ZXJ3cml0ZTogZmFsc2UsXG4gICAgICBkZWxheTogZGVsYXksXG4gICAgICBvbkNvbXBsZXRlOiBjYWxsYmFjayxcbiAgICAgIG9uUmV2ZXJzZUNvbXBsZXRlOiBjYWxsYmFjayxcbiAgICAgIG9uQ29tcGxldGVQYXJhbXM6IHBhcmFtcyxcbiAgICAgIG9uUmV2ZXJzZUNvbXBsZXRlUGFyYW1zOiBwYXJhbXMsXG4gICAgICBjYWxsYmFja1Njb3BlOiBzY29wZVxuICAgIH0pO1xuICB9O1xuXG4gIFR3ZWVuLmZyb21UbyA9IGZ1bmN0aW9uIGZyb21Ubyh0YXJnZXRzLCBmcm9tVmFycywgdG9WYXJzKSB7XG4gICAgcmV0dXJuIF9jcmVhdGVUd2VlblR5cGUoMiwgYXJndW1lbnRzKTtcbiAgfTtcblxuICBUd2Vlbi5zZXQgPSBmdW5jdGlvbiBzZXQodGFyZ2V0cywgdmFycykge1xuICAgIHZhcnMuZHVyYXRpb24gPSAwO1xuICAgIHZhcnMucmVwZWF0RGVsYXkgfHwgKHZhcnMucmVwZWF0ID0gMCk7XG4gICAgcmV0dXJuIG5ldyBUd2Vlbih0YXJnZXRzLCB2YXJzKTtcbiAgfTtcblxuICBUd2Vlbi5raWxsVHdlZW5zT2YgPSBmdW5jdGlvbiBraWxsVHdlZW5zT2YodGFyZ2V0cywgcHJvcHMsIG9ubHlBY3RpdmUpIHtcbiAgICByZXR1cm4gX2dsb2JhbFRpbWVsaW5lLmtpbGxUd2VlbnNPZih0YXJnZXRzLCBwcm9wcywgb25seUFjdGl2ZSk7XG4gIH07XG5cbiAgcmV0dXJuIFR3ZWVuO1xufShBbmltYXRpb24pO1xuXG5fc2V0RGVmYXVsdHMoVHdlZW4ucHJvdG90eXBlLCB7XG4gIF90YXJnZXRzOiBbXSxcbiAgX2xhenk6IDAsXG4gIF9zdGFydEF0OiAwLFxuICBfb3A6IDAsXG4gIF9vbkluaXQ6IDBcbn0pOyAvL2FkZCB0aGUgcGVydGluZW50IHRpbWVsaW5lIG1ldGhvZHMgdG8gVHdlZW4gaW5zdGFuY2VzIHNvIHRoYXQgdXNlcnMgY2FuIGNoYWluIGNvbnZlbmllbnRseSBhbmQgY3JlYXRlIGEgdGltZWxpbmUgYXV0b21hdGljYWxseS4gKHJlbW92ZWQgZHVlIHRvIGNvbmNlcm5zIHRoYXQgaXQnZCB1bHRpbWF0ZWx5IGFkZCB0byBtb3JlIGNvbmZ1c2lvbiBlc3BlY2lhbGx5IGZvciBiZWdpbm5lcnMpXG4vLyBfZm9yRWFjaE5hbWUoXCJ0byxmcm9tLGZyb21UbyxzZXQsY2FsbCxhZGQsYWRkTGFiZWwsYWRkUGF1c2VcIiwgbmFtZSA9PiB7XG4vLyBcdFR3ZWVuLnByb3RvdHlwZVtuYW1lXSA9IGZ1bmN0aW9uKCkge1xuLy8gXHRcdGxldCB0bCA9IG5ldyBUaW1lbGluZSgpO1xuLy8gXHRcdHJldHVybiBfYWRkVG9UaW1lbGluZSh0bCwgdGhpcylbbmFtZV0uYXBwbHkodGwsIHRvQXJyYXkoYXJndW1lbnRzKSk7XG4vLyBcdH1cbi8vIH0pO1xuLy9mb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eS4gTGV2ZXJhZ2UgdGhlIHRpbWVsaW5lIGNhbGxzLlxuXG5cbl9mb3JFYWNoTmFtZShcInN0YWdnZXJUbyxzdGFnZ2VyRnJvbSxzdGFnZ2VyRnJvbVRvXCIsIGZ1bmN0aW9uIChuYW1lKSB7XG4gIFR3ZWVuW25hbWVdID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciB0bCA9IG5ldyBUaW1lbGluZSgpLFxuICAgICAgICBwYXJhbXMgPSBfc2xpY2UuY2FsbChhcmd1bWVudHMsIDApO1xuXG4gICAgcGFyYW1zLnNwbGljZShuYW1lID09PSBcInN0YWdnZXJGcm9tVG9cIiA/IDUgOiA0LCAwLCAwKTtcbiAgICByZXR1cm4gdGxbbmFtZV0uYXBwbHkodGwsIHBhcmFtcyk7XG4gIH07XG59KTtcbi8qXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogUFJPUFRXRUVOXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cblxudmFyIF9zZXR0ZXJQbGFpbiA9IGZ1bmN0aW9uIF9zZXR0ZXJQbGFpbih0YXJnZXQsIHByb3BlcnR5LCB2YWx1ZSkge1xuICByZXR1cm4gdGFyZ2V0W3Byb3BlcnR5XSA9IHZhbHVlO1xufSxcbiAgICBfc2V0dGVyRnVuYyA9IGZ1bmN0aW9uIF9zZXR0ZXJGdW5jKHRhcmdldCwgcHJvcGVydHksIHZhbHVlKSB7XG4gIHJldHVybiB0YXJnZXRbcHJvcGVydHldKHZhbHVlKTtcbn0sXG4gICAgX3NldHRlckZ1bmNXaXRoUGFyYW0gPSBmdW5jdGlvbiBfc2V0dGVyRnVuY1dpdGhQYXJhbSh0YXJnZXQsIHByb3BlcnR5LCB2YWx1ZSwgZGF0YSkge1xuICByZXR1cm4gdGFyZ2V0W3Byb3BlcnR5XShkYXRhLmZwLCB2YWx1ZSk7XG59LFxuICAgIF9zZXR0ZXJBdHRyaWJ1dGUgPSBmdW5jdGlvbiBfc2V0dGVyQXR0cmlidXRlKHRhcmdldCwgcHJvcGVydHksIHZhbHVlKSB7XG4gIHJldHVybiB0YXJnZXQuc2V0QXR0cmlidXRlKHByb3BlcnR5LCB2YWx1ZSk7XG59LFxuICAgIF9nZXRTZXR0ZXIgPSBmdW5jdGlvbiBfZ2V0U2V0dGVyKHRhcmdldCwgcHJvcGVydHkpIHtcbiAgcmV0dXJuIF9pc0Z1bmN0aW9uKHRhcmdldFtwcm9wZXJ0eV0pID8gX3NldHRlckZ1bmMgOiBfaXNVbmRlZmluZWQodGFyZ2V0W3Byb3BlcnR5XSkgJiYgdGFyZ2V0LnNldEF0dHJpYnV0ZSA/IF9zZXR0ZXJBdHRyaWJ1dGUgOiBfc2V0dGVyUGxhaW47XG59LFxuICAgIF9yZW5kZXJQbGFpbiA9IGZ1bmN0aW9uIF9yZW5kZXJQbGFpbihyYXRpbywgZGF0YSkge1xuICByZXR1cm4gZGF0YS5zZXQoZGF0YS50LCBkYXRhLnAsIE1hdGgucm91bmQoKGRhdGEucyArIGRhdGEuYyAqIHJhdGlvKSAqIDEwMDAwMDApIC8gMTAwMDAwMCwgZGF0YSk7XG59LFxuICAgIF9yZW5kZXJCb29sZWFuID0gZnVuY3Rpb24gX3JlbmRlckJvb2xlYW4ocmF0aW8sIGRhdGEpIHtcbiAgcmV0dXJuIGRhdGEuc2V0KGRhdGEudCwgZGF0YS5wLCAhIShkYXRhLnMgKyBkYXRhLmMgKiByYXRpbyksIGRhdGEpO1xufSxcbiAgICBfcmVuZGVyQ29tcGxleFN0cmluZyA9IGZ1bmN0aW9uIF9yZW5kZXJDb21wbGV4U3RyaW5nKHJhdGlvLCBkYXRhKSB7XG4gIHZhciBwdCA9IGRhdGEuX3B0LFxuICAgICAgcyA9IFwiXCI7XG5cbiAgaWYgKCFyYXRpbyAmJiBkYXRhLmIpIHtcbiAgICAvL2IgPSBiZWdpbm5pbmcgc3RyaW5nXG4gICAgcyA9IGRhdGEuYjtcbiAgfSBlbHNlIGlmIChyYXRpbyA9PT0gMSAmJiBkYXRhLmUpIHtcbiAgICAvL2UgPSBlbmRpbmcgc3RyaW5nXG4gICAgcyA9IGRhdGEuZTtcbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAocHQpIHtcbiAgICAgIHMgPSBwdC5wICsgKHB0Lm0gPyBwdC5tKHB0LnMgKyBwdC5jICogcmF0aW8pIDogTWF0aC5yb3VuZCgocHQucyArIHB0LmMgKiByYXRpbykgKiAxMDAwMCkgLyAxMDAwMCkgKyBzOyAvL3dlIHVzZSB0aGUgXCJwXCIgcHJvcGVydHkgZm9yIHRoZSB0ZXh0IGluYmV0d2VlbiAobGlrZSBhIHN1ZmZpeCkuIEFuZCBpbiB0aGUgY29udGV4dCBvZiBhIGNvbXBsZXggc3RyaW5nLCB0aGUgbW9kaWZpZXIgKG0pIGlzIHR5cGljYWxseSBqdXN0IE1hdGgucm91bmQoKSwgbGlrZSBmb3IgUkdCIGNvbG9ycy5cblxuICAgICAgcHQgPSBwdC5fbmV4dDtcbiAgICB9XG5cbiAgICBzICs9IGRhdGEuYzsgLy93ZSB1c2UgdGhlIFwiY1wiIG9mIHRoZSBQcm9wVHdlZW4gdG8gc3RvcmUgdGhlIGZpbmFsIGNodW5rIG9mIG5vbi1udW1lcmljIHRleHQuXG4gIH1cblxuICBkYXRhLnNldChkYXRhLnQsIGRhdGEucCwgcywgZGF0YSk7XG59LFxuICAgIF9yZW5kZXJQcm9wVHdlZW5zID0gZnVuY3Rpb24gX3JlbmRlclByb3BUd2VlbnMocmF0aW8sIGRhdGEpIHtcbiAgdmFyIHB0ID0gZGF0YS5fcHQ7XG5cbiAgd2hpbGUgKHB0KSB7XG4gICAgcHQucihyYXRpbywgcHQuZCk7XG4gICAgcHQgPSBwdC5fbmV4dDtcbiAgfVxufSxcbiAgICBfYWRkUGx1Z2luTW9kaWZpZXIgPSBmdW5jdGlvbiBfYWRkUGx1Z2luTW9kaWZpZXIobW9kaWZpZXIsIHR3ZWVuLCB0YXJnZXQsIHByb3BlcnR5KSB7XG4gIHZhciBwdCA9IHRoaXMuX3B0LFxuICAgICAgbmV4dDtcblxuICB3aGlsZSAocHQpIHtcbiAgICBuZXh0ID0gcHQuX25leHQ7XG4gICAgcHQucCA9PT0gcHJvcGVydHkgJiYgcHQubW9kaWZpZXIobW9kaWZpZXIsIHR3ZWVuLCB0YXJnZXQpO1xuICAgIHB0ID0gbmV4dDtcbiAgfVxufSxcbiAgICBfa2lsbFByb3BUd2VlbnNPZiA9IGZ1bmN0aW9uIF9raWxsUHJvcFR3ZWVuc09mKHByb3BlcnR5KSB7XG4gIHZhciBwdCA9IHRoaXMuX3B0LFxuICAgICAgaGFzTm9uRGVwZW5kZW50UmVtYWluaW5nLFxuICAgICAgbmV4dDtcblxuICB3aGlsZSAocHQpIHtcbiAgICBuZXh0ID0gcHQuX25leHQ7XG5cbiAgICBpZiAocHQucCA9PT0gcHJvcGVydHkgJiYgIXB0Lm9wIHx8IHB0Lm9wID09PSBwcm9wZXJ0eSkge1xuICAgICAgX3JlbW92ZUxpbmtlZExpc3RJdGVtKHRoaXMsIHB0LCBcIl9wdFwiKTtcbiAgICB9IGVsc2UgaWYgKCFwdC5kZXApIHtcbiAgICAgIGhhc05vbkRlcGVuZGVudFJlbWFpbmluZyA9IDE7XG4gICAgfVxuXG4gICAgcHQgPSBuZXh0O1xuICB9XG5cbiAgcmV0dXJuICFoYXNOb25EZXBlbmRlbnRSZW1haW5pbmc7XG59LFxuICAgIF9zZXR0ZXJXaXRoTW9kaWZpZXIgPSBmdW5jdGlvbiBfc2V0dGVyV2l0aE1vZGlmaWVyKHRhcmdldCwgcHJvcGVydHksIHZhbHVlLCBkYXRhKSB7XG4gIGRhdGEubVNldCh0YXJnZXQsIHByb3BlcnR5LCBkYXRhLm0uY2FsbChkYXRhLnR3ZWVuLCB2YWx1ZSwgZGF0YS5tdCksIGRhdGEpO1xufSxcbiAgICBfc29ydFByb3BUd2VlbnNCeVByaW9yaXR5ID0gZnVuY3Rpb24gX3NvcnRQcm9wVHdlZW5zQnlQcmlvcml0eShwYXJlbnQpIHtcbiAgdmFyIHB0ID0gcGFyZW50Ll9wdCxcbiAgICAgIG5leHQsXG4gICAgICBwdDIsXG4gICAgICBmaXJzdCxcbiAgICAgIGxhc3Q7IC8vc29ydHMgdGhlIFByb3BUd2VlbiBsaW5rZWQgbGlzdCBpbiBvcmRlciBvZiBwcmlvcml0eSBiZWNhdXNlIHNvbWUgcGx1Z2lucyBuZWVkIHRvIGRvIHRoZWlyIHdvcmsgYWZ0ZXIgQUxMIG9mIHRoZSBQcm9wVHdlZW5zIHdlcmUgY3JlYXRlZCAobGlrZSBSb3VuZFByb3BzUGx1Z2luIGFuZCBNb2RpZmllcnNQbHVnaW4pXG5cbiAgd2hpbGUgKHB0KSB7XG4gICAgbmV4dCA9IHB0Ll9uZXh0O1xuICAgIHB0MiA9IGZpcnN0O1xuXG4gICAgd2hpbGUgKHB0MiAmJiBwdDIucHIgPiBwdC5wcikge1xuICAgICAgcHQyID0gcHQyLl9uZXh0O1xuICAgIH1cblxuICAgIGlmIChwdC5fcHJldiA9IHB0MiA/IHB0Mi5fcHJldiA6IGxhc3QpIHtcbiAgICAgIHB0Ll9wcmV2Ll9uZXh0ID0gcHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZpcnN0ID0gcHQ7XG4gICAgfVxuXG4gICAgaWYgKHB0Ll9uZXh0ID0gcHQyKSB7XG4gICAgICBwdDIuX3ByZXYgPSBwdDtcbiAgICB9IGVsc2Uge1xuICAgICAgbGFzdCA9IHB0O1xuICAgIH1cblxuICAgIHB0ID0gbmV4dDtcbiAgfVxuXG4gIHBhcmVudC5fcHQgPSBmaXJzdDtcbn07IC8vUHJvcFR3ZWVuIGtleTogdCA9IHRhcmdldCwgcCA9IHByb3AsIHIgPSByZW5kZXJlciwgZCA9IGRhdGEsIHMgPSBzdGFydCwgYyA9IGNoYW5nZSwgb3AgPSBvdmVyd3JpdGVQcm9wZXJ0eSAoT05MWSBwb3B1bGF0ZWQgd2hlbiBpdCdzIGRpZmZlcmVudCB0aGFuIHApLCBwciA9IHByaW9yaXR5LCBfbmV4dC9fcHJldiBmb3IgdGhlIGxpbmtlZCBsaXN0IHNpYmxpbmdzLCBzZXQgPSBzZXR0ZXIsIG0gPSBtb2RpZmllciwgbVNldCA9IG1vZGlmaWVyU2V0dGVyICh0aGUgb3JpZ2luYWwgc2V0dGVyLCBiZWZvcmUgYSBtb2RpZmllciB3YXMgYWRkZWQpXG5cblxuZXhwb3J0IHZhciBQcm9wVHdlZW4gPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBQcm9wVHdlZW4obmV4dCwgdGFyZ2V0LCBwcm9wLCBzdGFydCwgY2hhbmdlLCByZW5kZXJlciwgZGF0YSwgc2V0dGVyLCBwcmlvcml0eSkge1xuICAgIHRoaXMudCA9IHRhcmdldDtcbiAgICB0aGlzLnMgPSBzdGFydDtcbiAgICB0aGlzLmMgPSBjaGFuZ2U7XG4gICAgdGhpcy5wID0gcHJvcDtcbiAgICB0aGlzLnIgPSByZW5kZXJlciB8fCBfcmVuZGVyUGxhaW47XG4gICAgdGhpcy5kID0gZGF0YSB8fCB0aGlzO1xuICAgIHRoaXMuc2V0ID0gc2V0dGVyIHx8IF9zZXR0ZXJQbGFpbjtcbiAgICB0aGlzLnByID0gcHJpb3JpdHkgfHwgMDtcbiAgICB0aGlzLl9uZXh0ID0gbmV4dDtcblxuICAgIGlmIChuZXh0KSB7XG4gICAgICBuZXh0Ll9wcmV2ID0gdGhpcztcbiAgICB9XG4gIH1cblxuICB2YXIgX3Byb3RvNCA9IFByb3BUd2Vlbi5wcm90b3R5cGU7XG5cbiAgX3Byb3RvNC5tb2RpZmllciA9IGZ1bmN0aW9uIG1vZGlmaWVyKGZ1bmMsIHR3ZWVuLCB0YXJnZXQpIHtcbiAgICB0aGlzLm1TZXQgPSB0aGlzLm1TZXQgfHwgdGhpcy5zZXQ7IC8vaW4gY2FzZSBpdCB3YXMgYWxyZWFkeSBzZXQgKGEgUHJvcFR3ZWVuIGNhbiBvbmx5IGhhdmUgb25lIG1vZGlmaWVyKVxuXG4gICAgdGhpcy5zZXQgPSBfc2V0dGVyV2l0aE1vZGlmaWVyO1xuICAgIHRoaXMubSA9IGZ1bmM7XG4gICAgdGhpcy5tdCA9IHRhcmdldDsgLy9tb2RpZmllciB0YXJnZXRcblxuICAgIHRoaXMudHdlZW4gPSB0d2VlbjtcbiAgfTtcblxuICByZXR1cm4gUHJvcFR3ZWVuO1xufSgpOyAvL0luaXRpYWxpemF0aW9uIHRhc2tzXG5cbl9mb3JFYWNoTmFtZShfY2FsbGJhY2tOYW1lcyArIFwicGFyZW50LGR1cmF0aW9uLGVhc2UsZGVsYXksb3ZlcndyaXRlLHJ1bkJhY2t3YXJkcyxzdGFydEF0LHlveW8saW1tZWRpYXRlUmVuZGVyLHJlcGVhdCxyZXBlYXREZWxheSxkYXRhLHBhdXNlZCxyZXZlcnNlZCxsYXp5LGNhbGxiYWNrU2NvcGUsc3RyaW5nRmlsdGVyLGlkLHlveW9FYXNlLHN0YWdnZXIsaW5oZXJpdCxyZXBlYXRSZWZyZXNoLGtleWZyYW1lcyxhdXRvUmV2ZXJ0LHNjcm9sbFRyaWdnZXJcIiwgZnVuY3Rpb24gKG5hbWUpIHtcbiAgcmV0dXJuIF9yZXNlcnZlZFByb3BzW25hbWVdID0gMTtcbn0pO1xuXG5fZ2xvYmFscy5Ud2Vlbk1heCA9IF9nbG9iYWxzLlR3ZWVuTGl0ZSA9IFR3ZWVuO1xuX2dsb2JhbHMuVGltZWxpbmVMaXRlID0gX2dsb2JhbHMuVGltZWxpbmVNYXggPSBUaW1lbGluZTtcbl9nbG9iYWxUaW1lbGluZSA9IG5ldyBUaW1lbGluZSh7XG4gIHNvcnRDaGlsZHJlbjogZmFsc2UsXG4gIGRlZmF1bHRzOiBfZGVmYXVsdHMsXG4gIGF1dG9SZW1vdmVDaGlsZHJlbjogdHJ1ZSxcbiAgaWQ6IFwicm9vdFwiLFxuICBzbW9vdGhDaGlsZFRpbWluZzogdHJ1ZVxufSk7XG5fY29uZmlnLnN0cmluZ0ZpbHRlciA9IF9jb2xvclN0cmluZ0ZpbHRlcjtcblxudmFyIF9tZWRpYSA9IFtdLFxuICAgIF9saXN0ZW5lcnMgPSB7fSxcbiAgICBfZW1wdHlBcnJheSA9IFtdLFxuICAgIF9sYXN0TWVkaWFUaW1lID0gMCxcbiAgICBfZGlzcGF0Y2ggPSBmdW5jdGlvbiBfZGlzcGF0Y2godHlwZSkge1xuICByZXR1cm4gKF9saXN0ZW5lcnNbdHlwZV0gfHwgX2VtcHR5QXJyYXkpLm1hcChmdW5jdGlvbiAoZikge1xuICAgIHJldHVybiBmKCk7XG4gIH0pO1xufSxcbiAgICBfb25NZWRpYUNoYW5nZSA9IGZ1bmN0aW9uIF9vbk1lZGlhQ2hhbmdlKCkge1xuICB2YXIgdGltZSA9IERhdGUubm93KCksXG4gICAgICBtYXRjaGVzID0gW107XG5cbiAgaWYgKHRpbWUgLSBfbGFzdE1lZGlhVGltZSA+IDIpIHtcbiAgICBfZGlzcGF0Y2goXCJtYXRjaE1lZGlhSW5pdFwiKTtcblxuICAgIF9tZWRpYS5mb3JFYWNoKGZ1bmN0aW9uIChjKSB7XG4gICAgICB2YXIgcXVlcmllcyA9IGMucXVlcmllcyxcbiAgICAgICAgICBjb25kaXRpb25zID0gYy5jb25kaXRpb25zLFxuICAgICAgICAgIG1hdGNoLFxuICAgICAgICAgIHAsXG4gICAgICAgICAgYW55TWF0Y2gsXG4gICAgICAgICAgdG9nZ2xlZDtcblxuICAgICAgZm9yIChwIGluIHF1ZXJpZXMpIHtcbiAgICAgICAgbWF0Y2ggPSBfd2luLm1hdGNoTWVkaWEocXVlcmllc1twXSkubWF0Y2hlczsgLy8gRmlyZWZveCBkb2Vzbid0IHVwZGF0ZSB0aGUgXCJtYXRjaGVzXCIgcHJvcGVydHkgb2YgdGhlIE1lZGlhUXVlcnlMaXN0IG9iamVjdCBjb3JyZWN0bHkgLSBpdCBvbmx5IGRvZXMgc28gYXMgaXQgY2FsbHMgaXRzIGNoYW5nZSBoYW5kbGVyIC0gc28gd2UgbXVzdCByZS1jcmVhdGUgYSBtZWRpYSBxdWVyeSBoZXJlIHRvIGVuc3VyZSBpdCdzIGFjY3VyYXRlLlxuXG4gICAgICAgIG1hdGNoICYmIChhbnlNYXRjaCA9IDEpO1xuXG4gICAgICAgIGlmIChtYXRjaCAhPT0gY29uZGl0aW9uc1twXSkge1xuICAgICAgICAgIGNvbmRpdGlvbnNbcF0gPSBtYXRjaDtcbiAgICAgICAgICB0b2dnbGVkID0gMTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAodG9nZ2xlZCkge1xuICAgICAgICBjLnJldmVydCgpO1xuICAgICAgICBhbnlNYXRjaCAmJiBtYXRjaGVzLnB1c2goYyk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBfZGlzcGF0Y2goXCJtYXRjaE1lZGlhUmV2ZXJ0XCIpO1xuXG4gICAgbWF0Y2hlcy5mb3JFYWNoKGZ1bmN0aW9uIChjKSB7XG4gICAgICByZXR1cm4gYy5vbk1hdGNoKGMpO1xuICAgIH0pO1xuICAgIF9sYXN0TWVkaWFUaW1lID0gdGltZTtcblxuICAgIF9kaXNwYXRjaChcIm1hdGNoTWVkaWFcIik7XG4gIH1cbn07XG5cbnZhciBDb250ZXh0ID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gQ29udGV4dChmdW5jLCBzY29wZSkge1xuICAgIHRoaXMuc2VsZWN0b3IgPSBzY29wZSAmJiBzZWxlY3RvcihzY29wZSk7XG4gICAgdGhpcy5kYXRhID0gW107XG4gICAgdGhpcy5fciA9IFtdOyAvLyByZXR1cm5lZC9jbGVhbnVwIGZ1bmN0aW9uc1xuXG4gICAgdGhpcy5pc1JldmVydGVkID0gZmFsc2U7XG4gICAgZnVuYyAmJiB0aGlzLmFkZChmdW5jKTtcbiAgfVxuXG4gIHZhciBfcHJvdG81ID0gQ29udGV4dC5wcm90b3R5cGU7XG5cbiAgX3Byb3RvNS5hZGQgPSBmdW5jdGlvbiBhZGQobmFtZSwgZnVuYywgc2NvcGUpIHtcbiAgICBpZiAoX2lzRnVuY3Rpb24obmFtZSkpIHtcbiAgICAgIHNjb3BlID0gZnVuYztcbiAgICAgIGZ1bmMgPSBuYW1lO1xuICAgICAgbmFtZSA9IF9pc0Z1bmN0aW9uO1xuICAgIH1cblxuICAgIHZhciBzZWxmID0gdGhpcyxcbiAgICAgICAgZiA9IGZ1bmN0aW9uIGYoKSB7XG4gICAgICB2YXIgcHJldiA9IF9jb250ZXh0LFxuICAgICAgICAgIHByZXZTZWxlY3RvciA9IHNlbGYuc2VsZWN0b3IsXG4gICAgICAgICAgcmVzdWx0O1xuICAgICAgcHJldiAmJiBwcmV2LmRhdGEucHVzaChzZWxmKTtcbiAgICAgIHNjb3BlICYmIChzZWxmLnNlbGVjdG9yID0gc2VsZWN0b3Ioc2NvcGUpKTtcbiAgICAgIF9jb250ZXh0ID0gc2VsZjtcbiAgICAgIHJlc3VsdCA9IGZ1bmMuYXBwbHkoc2VsZiwgYXJndW1lbnRzKTtcbiAgICAgIF9pc0Z1bmN0aW9uKHJlc3VsdCkgJiYgc2VsZi5fci5wdXNoKHJlc3VsdCk7XG4gICAgICBfY29udGV4dCA9IHByZXY7XG4gICAgICBzZWxmLnNlbGVjdG9yID0gcHJldlNlbGVjdG9yO1xuICAgICAgc2VsZi5pc1JldmVydGVkID0gZmFsc2U7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG5cbiAgICBzZWxmLmxhc3QgPSBmO1xuICAgIHJldHVybiBuYW1lID09PSBfaXNGdW5jdGlvbiA/IGYoc2VsZikgOiBuYW1lID8gc2VsZltuYW1lXSA9IGYgOiBmO1xuICB9O1xuXG4gIF9wcm90bzUuaWdub3JlID0gZnVuY3Rpb24gaWdub3JlKGZ1bmMpIHtcbiAgICB2YXIgcHJldiA9IF9jb250ZXh0O1xuICAgIF9jb250ZXh0ID0gbnVsbDtcbiAgICBmdW5jKHRoaXMpO1xuICAgIF9jb250ZXh0ID0gcHJldjtcbiAgfTtcblxuICBfcHJvdG81LmdldFR3ZWVucyA9IGZ1bmN0aW9uIGdldFR3ZWVucygpIHtcbiAgICB2YXIgYSA9IFtdO1xuICAgIHRoaXMuZGF0YS5mb3JFYWNoKGZ1bmN0aW9uIChlKSB7XG4gICAgICByZXR1cm4gZSBpbnN0YW5jZW9mIENvbnRleHQgPyBhLnB1c2guYXBwbHkoYSwgZS5nZXRUd2VlbnMoKSkgOiBlIGluc3RhbmNlb2YgVHdlZW4gJiYgZS5fdGFyZ2V0c1swXSAhPT0gZS52YXJzLm9uQ29tcGxldGUgJiYgYS5wdXNoKGUpO1xuICAgIH0pOyAvLyBkb24ndCBpbmNsdWRlIGRlbGF5ZWRDYWxsc1xuXG4gICAgcmV0dXJuIGE7XG4gIH07XG5cbiAgX3Byb3RvNS5jbGVhciA9IGZ1bmN0aW9uIGNsZWFyKCkge1xuICAgIHRoaXMuX3IubGVuZ3RoID0gdGhpcy5kYXRhLmxlbmd0aCA9IDA7XG4gIH07XG5cbiAgX3Byb3RvNS5raWxsID0gZnVuY3Rpb24ga2lsbChyZXZlcnQsIG1hdGNoTWVkaWEpIHtcbiAgICB2YXIgX3RoaXM0ID0gdGhpcztcblxuICAgIGlmIChyZXZlcnQpIHtcbiAgICAgIC8vIHNhdmUgYXMgYW4gb2JqZWN0IHNvIHRoYXQgd2UgY2FuIGNhY2hlIHRoZSBnbG9iYWxUaW1lIGZvciBlYWNoIHR3ZWVuIHRvIG9wdGltaXplIHBlcmZvcm1hbmNlIGR1cmluZyB0aGUgc29ydFxuICAgICAgdGhpcy5nZXRUd2VlbnMoKS5tYXAoZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBnOiB0Lmdsb2JhbFRpbWUoMCksXG4gICAgICAgICAgdDogdFxuICAgICAgICB9O1xuICAgICAgfSkuc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICByZXR1cm4gYi5nIC0gYS5nIHx8IC0xO1xuICAgICAgfSkuZm9yRWFjaChmdW5jdGlvbiAobykge1xuICAgICAgICByZXR1cm4gby50LnJldmVydChyZXZlcnQpO1xuICAgICAgfSk7IC8vIG5vdGU6IGFsbCBvZiB0aGUgX3N0YXJ0QXQgdHdlZW5zIHNob3VsZCBiZSByZXZlcnRlZCBpbiByZXZlcnNlIG9yZGVyIHRoYXQgdGh5IHdlcmUgY3JlYXRlZCwgYW5kIHRoZXknbGwgYWxsIGhhdmUgdGhlIHNhbWUgZ2xvYmFsVGltZSAoLTEpIHNvIHRoZSBcIiB8fCAtMVwiIGluIHRoZSBzb3J0IGtlZXBzIHRoZSBvcmRlciBwcm9wZXJseS5cblxuICAgICAgdGhpcy5kYXRhLmZvckVhY2goZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgcmV0dXJuICEoZSBpbnN0YW5jZW9mIEFuaW1hdGlvbikgJiYgZS5yZXZlcnQgJiYgZS5yZXZlcnQocmV2ZXJ0KTtcbiAgICAgIH0pO1xuXG4gICAgICB0aGlzLl9yLmZvckVhY2goZnVuY3Rpb24gKGYpIHtcbiAgICAgICAgcmV0dXJuIGYocmV2ZXJ0LCBfdGhpczQpO1xuICAgICAgfSk7XG5cbiAgICAgIHRoaXMuaXNSZXZlcnRlZCA9IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZGF0YS5mb3JFYWNoKGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIHJldHVybiBlLmtpbGwgJiYgZS5raWxsKCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICB0aGlzLmNsZWFyKCk7XG5cbiAgICBpZiAobWF0Y2hNZWRpYSkge1xuICAgICAgdmFyIGkgPSBfbWVkaWEuaW5kZXhPZih0aGlzKTtcblxuICAgICAgISF+aSAmJiBfbWVkaWEuc3BsaWNlKGksIDEpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG81LnJldmVydCA9IGZ1bmN0aW9uIHJldmVydChjb25maWcpIHtcbiAgICB0aGlzLmtpbGwoY29uZmlnIHx8IHt9KTtcbiAgfTtcblxuICByZXR1cm4gQ29udGV4dDtcbn0oKTtcblxudmFyIE1hdGNoTWVkaWEgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBNYXRjaE1lZGlhKHNjb3BlKSB7XG4gICAgdGhpcy5jb250ZXh0cyA9IFtdO1xuICAgIHRoaXMuc2NvcGUgPSBzY29wZTtcbiAgfVxuXG4gIHZhciBfcHJvdG82ID0gTWF0Y2hNZWRpYS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvNi5hZGQgPSBmdW5jdGlvbiBhZGQoY29uZGl0aW9ucywgZnVuYywgc2NvcGUpIHtcbiAgICBfaXNPYmplY3QoY29uZGl0aW9ucykgfHwgKGNvbmRpdGlvbnMgPSB7XG4gICAgICBtYXRjaGVzOiBjb25kaXRpb25zXG4gICAgfSk7XG4gICAgdmFyIGNvbnRleHQgPSBuZXcgQ29udGV4dCgwLCBzY29wZSB8fCB0aGlzLnNjb3BlKSxcbiAgICAgICAgY29uZCA9IGNvbnRleHQuY29uZGl0aW9ucyA9IHt9LFxuICAgICAgICBtcSxcbiAgICAgICAgcCxcbiAgICAgICAgYWN0aXZlO1xuICAgIHRoaXMuY29udGV4dHMucHVzaChjb250ZXh0KTtcbiAgICBmdW5jID0gY29udGV4dC5hZGQoXCJvbk1hdGNoXCIsIGZ1bmMpO1xuICAgIGNvbnRleHQucXVlcmllcyA9IGNvbmRpdGlvbnM7XG5cbiAgICBmb3IgKHAgaW4gY29uZGl0aW9ucykge1xuICAgICAgaWYgKHAgPT09IFwiYWxsXCIpIHtcbiAgICAgICAgYWN0aXZlID0gMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG1xID0gX3dpbi5tYXRjaE1lZGlhKGNvbmRpdGlvbnNbcF0pO1xuXG4gICAgICAgIGlmIChtcSkge1xuICAgICAgICAgIF9tZWRpYS5pbmRleE9mKGNvbnRleHQpIDwgMCAmJiBfbWVkaWEucHVzaChjb250ZXh0KTtcbiAgICAgICAgICAoY29uZFtwXSA9IG1xLm1hdGNoZXMpICYmIChhY3RpdmUgPSAxKTtcbiAgICAgICAgICBtcS5hZGRMaXN0ZW5lciA/IG1xLmFkZExpc3RlbmVyKF9vbk1lZGlhQ2hhbmdlKSA6IG1xLmFkZEV2ZW50TGlzdGVuZXIoXCJjaGFuZ2VcIiwgX29uTWVkaWFDaGFuZ2UpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgYWN0aXZlICYmIGZ1bmMoY29udGV4dCk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0gLy8gcmVmcmVzaCgpIHtcbiAgLy8gXHRsZXQgdGltZSA9IF9sYXN0TWVkaWFUaW1lLFxuICAvLyBcdFx0bWVkaWEgPSBfbWVkaWE7XG4gIC8vIFx0X2xhc3RNZWRpYVRpbWUgPSAtMTtcbiAgLy8gXHRfbWVkaWEgPSB0aGlzLmNvbnRleHRzO1xuICAvLyBcdF9vbk1lZGlhQ2hhbmdlKCk7XG4gIC8vIFx0X2xhc3RNZWRpYVRpbWUgPSB0aW1lO1xuICAvLyBcdF9tZWRpYSA9IG1lZGlhO1xuICAvLyB9XG4gIDtcblxuICBfcHJvdG82LnJldmVydCA9IGZ1bmN0aW9uIHJldmVydChjb25maWcpIHtcbiAgICB0aGlzLmtpbGwoY29uZmlnIHx8IHt9KTtcbiAgfTtcblxuICBfcHJvdG82LmtpbGwgPSBmdW5jdGlvbiBraWxsKHJldmVydCkge1xuICAgIHRoaXMuY29udGV4dHMuZm9yRWFjaChmdW5jdGlvbiAoYykge1xuICAgICAgcmV0dXJuIGMua2lsbChyZXZlcnQsIHRydWUpO1xuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiBNYXRjaE1lZGlhO1xufSgpO1xuLypcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBHU0FQXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cblxudmFyIF9nc2FwID0ge1xuICByZWdpc3RlclBsdWdpbjogZnVuY3Rpb24gcmVnaXN0ZXJQbHVnaW4oKSB7XG4gICAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4yKSwgX2tleTIgPSAwOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgICBhcmdzW19rZXkyXSA9IGFyZ3VtZW50c1tfa2V5Ml07XG4gICAgfVxuXG4gICAgYXJncy5mb3JFYWNoKGZ1bmN0aW9uIChjb25maWcpIHtcbiAgICAgIHJldHVybiBfY3JlYXRlUGx1Z2luKGNvbmZpZyk7XG4gICAgfSk7XG4gIH0sXG4gIHRpbWVsaW5lOiBmdW5jdGlvbiB0aW1lbGluZSh2YXJzKSB7XG4gICAgcmV0dXJuIG5ldyBUaW1lbGluZSh2YXJzKTtcbiAgfSxcbiAgZ2V0VHdlZW5zT2Y6IGZ1bmN0aW9uIGdldFR3ZWVuc09mKHRhcmdldHMsIG9ubHlBY3RpdmUpIHtcbiAgICByZXR1cm4gX2dsb2JhbFRpbWVsaW5lLmdldFR3ZWVuc09mKHRhcmdldHMsIG9ubHlBY3RpdmUpO1xuICB9LFxuICBnZXRQcm9wZXJ0eTogZnVuY3Rpb24gZ2V0UHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eSwgdW5pdCwgdW5jYWNoZSkge1xuICAgIF9pc1N0cmluZyh0YXJnZXQpICYmICh0YXJnZXQgPSB0b0FycmF5KHRhcmdldClbMF0pOyAvL2luIGNhc2Ugc2VsZWN0b3IgdGV4dCBvciBhbiBhcnJheSBpcyBwYXNzZWQgaW5cblxuICAgIHZhciBnZXR0ZXIgPSBfZ2V0Q2FjaGUodGFyZ2V0IHx8IHt9KS5nZXQsXG4gICAgICAgIGZvcm1hdCA9IHVuaXQgPyBfcGFzc1Rocm91Z2ggOiBfbnVtZXJpY0lmUG9zc2libGU7XG5cbiAgICB1bml0ID09PSBcIm5hdGl2ZVwiICYmICh1bml0ID0gXCJcIik7XG4gICAgcmV0dXJuICF0YXJnZXQgPyB0YXJnZXQgOiAhcHJvcGVydHkgPyBmdW5jdGlvbiAocHJvcGVydHksIHVuaXQsIHVuY2FjaGUpIHtcbiAgICAgIHJldHVybiBmb3JtYXQoKF9wbHVnaW5zW3Byb3BlcnR5XSAmJiBfcGx1Z2luc1twcm9wZXJ0eV0uZ2V0IHx8IGdldHRlcikodGFyZ2V0LCBwcm9wZXJ0eSwgdW5pdCwgdW5jYWNoZSkpO1xuICAgIH0gOiBmb3JtYXQoKF9wbHVnaW5zW3Byb3BlcnR5XSAmJiBfcGx1Z2luc1twcm9wZXJ0eV0uZ2V0IHx8IGdldHRlcikodGFyZ2V0LCBwcm9wZXJ0eSwgdW5pdCwgdW5jYWNoZSkpO1xuICB9LFxuICBxdWlja1NldHRlcjogZnVuY3Rpb24gcXVpY2tTZXR0ZXIodGFyZ2V0LCBwcm9wZXJ0eSwgdW5pdCkge1xuICAgIHRhcmdldCA9IHRvQXJyYXkodGFyZ2V0KTtcblxuICAgIGlmICh0YXJnZXQubGVuZ3RoID4gMSkge1xuICAgICAgdmFyIHNldHRlcnMgPSB0YXJnZXQubWFwKGZ1bmN0aW9uICh0KSB7XG4gICAgICAgIHJldHVybiBnc2FwLnF1aWNrU2V0dGVyKHQsIHByb3BlcnR5LCB1bml0KTtcbiAgICAgIH0pLFxuICAgICAgICAgIGwgPSBzZXR0ZXJzLmxlbmd0aDtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFyIGkgPSBsO1xuXG4gICAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgICBzZXR0ZXJzW2ldKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG5cbiAgICB0YXJnZXQgPSB0YXJnZXRbMF0gfHwge307XG5cbiAgICB2YXIgUGx1Z2luID0gX3BsdWdpbnNbcHJvcGVydHldLFxuICAgICAgICBjYWNoZSA9IF9nZXRDYWNoZSh0YXJnZXQpLFxuICAgICAgICBwID0gY2FjaGUuaGFybmVzcyAmJiAoY2FjaGUuaGFybmVzcy5hbGlhc2VzIHx8IHt9KVtwcm9wZXJ0eV0gfHwgcHJvcGVydHksXG4gICAgICAgIC8vIGluIGNhc2UgaXQncyBhbiBhbGlhcywgbGlrZSBcInJvdGF0ZVwiIGZvciBcInJvdGF0aW9uXCIuXG4gICAgc2V0dGVyID0gUGx1Z2luID8gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICB2YXIgcCA9IG5ldyBQbHVnaW4oKTtcbiAgICAgIF9xdWlja1R3ZWVuLl9wdCA9IDA7XG4gICAgICBwLmluaXQodGFyZ2V0LCB1bml0ID8gdmFsdWUgKyB1bml0IDogdmFsdWUsIF9xdWlja1R3ZWVuLCAwLCBbdGFyZ2V0XSk7XG4gICAgICBwLnJlbmRlcigxLCBwKTtcbiAgICAgIF9xdWlja1R3ZWVuLl9wdCAmJiBfcmVuZGVyUHJvcFR3ZWVucygxLCBfcXVpY2tUd2Vlbik7XG4gICAgfSA6IGNhY2hlLnNldCh0YXJnZXQsIHApO1xuXG4gICAgcmV0dXJuIFBsdWdpbiA/IHNldHRlciA6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHNldHRlcih0YXJnZXQsIHAsIHVuaXQgPyB2YWx1ZSArIHVuaXQgOiB2YWx1ZSwgY2FjaGUsIDEpO1xuICAgIH07XG4gIH0sXG4gIHF1aWNrVG86IGZ1bmN0aW9uIHF1aWNrVG8odGFyZ2V0LCBwcm9wZXJ0eSwgdmFycykge1xuICAgIHZhciBfbWVyZ2UyO1xuXG4gICAgdmFyIHR3ZWVuID0gZ3NhcC50byh0YXJnZXQsIF9tZXJnZSgoX21lcmdlMiA9IHt9LCBfbWVyZ2UyW3Byb3BlcnR5XSA9IFwiKz0wLjFcIiwgX21lcmdlMi5wYXVzZWQgPSB0cnVlLCBfbWVyZ2UyKSwgdmFycyB8fCB7fSkpLFxuICAgICAgICBmdW5jID0gZnVuY3Rpb24gZnVuYyh2YWx1ZSwgc3RhcnQsIHN0YXJ0SXNSZWxhdGl2ZSkge1xuICAgICAgcmV0dXJuIHR3ZWVuLnJlc2V0VG8ocHJvcGVydHksIHZhbHVlLCBzdGFydCwgc3RhcnRJc1JlbGF0aXZlKTtcbiAgICB9O1xuXG4gICAgZnVuYy50d2VlbiA9IHR3ZWVuO1xuICAgIHJldHVybiBmdW5jO1xuICB9LFxuICBpc1R3ZWVuaW5nOiBmdW5jdGlvbiBpc1R3ZWVuaW5nKHRhcmdldHMpIHtcbiAgICByZXR1cm4gX2dsb2JhbFRpbWVsaW5lLmdldFR3ZWVuc09mKHRhcmdldHMsIHRydWUpLmxlbmd0aCA+IDA7XG4gIH0sXG4gIGRlZmF1bHRzOiBmdW5jdGlvbiBkZWZhdWx0cyh2YWx1ZSkge1xuICAgIHZhbHVlICYmIHZhbHVlLmVhc2UgJiYgKHZhbHVlLmVhc2UgPSBfcGFyc2VFYXNlKHZhbHVlLmVhc2UsIF9kZWZhdWx0cy5lYXNlKSk7XG4gICAgcmV0dXJuIF9tZXJnZURlZXAoX2RlZmF1bHRzLCB2YWx1ZSB8fCB7fSk7XG4gIH0sXG4gIGNvbmZpZzogZnVuY3Rpb24gY29uZmlnKHZhbHVlKSB7XG4gICAgcmV0dXJuIF9tZXJnZURlZXAoX2NvbmZpZywgdmFsdWUgfHwge30pO1xuICB9LFxuICByZWdpc3RlckVmZmVjdDogZnVuY3Rpb24gcmVnaXN0ZXJFZmZlY3QoX3JlZjMpIHtcbiAgICB2YXIgbmFtZSA9IF9yZWYzLm5hbWUsXG4gICAgICAgIGVmZmVjdCA9IF9yZWYzLmVmZmVjdCxcbiAgICAgICAgcGx1Z2lucyA9IF9yZWYzLnBsdWdpbnMsXG4gICAgICAgIGRlZmF1bHRzID0gX3JlZjMuZGVmYXVsdHMsXG4gICAgICAgIGV4dGVuZFRpbWVsaW5lID0gX3JlZjMuZXh0ZW5kVGltZWxpbmU7XG4gICAgKHBsdWdpbnMgfHwgXCJcIikuc3BsaXQoXCIsXCIpLmZvckVhY2goZnVuY3Rpb24gKHBsdWdpbk5hbWUpIHtcbiAgICAgIHJldHVybiBwbHVnaW5OYW1lICYmICFfcGx1Z2luc1twbHVnaW5OYW1lXSAmJiAhX2dsb2JhbHNbcGx1Z2luTmFtZV0gJiYgX3dhcm4obmFtZSArIFwiIGVmZmVjdCByZXF1aXJlcyBcIiArIHBsdWdpbk5hbWUgKyBcIiBwbHVnaW4uXCIpO1xuICAgIH0pO1xuXG4gICAgX2VmZmVjdHNbbmFtZV0gPSBmdW5jdGlvbiAodGFyZ2V0cywgdmFycywgdGwpIHtcbiAgICAgIHJldHVybiBlZmZlY3QodG9BcnJheSh0YXJnZXRzKSwgX3NldERlZmF1bHRzKHZhcnMgfHwge30sIGRlZmF1bHRzKSwgdGwpO1xuICAgIH07XG5cbiAgICBpZiAoZXh0ZW5kVGltZWxpbmUpIHtcbiAgICAgIFRpbWVsaW5lLnByb3RvdHlwZVtuYW1lXSA9IGZ1bmN0aW9uICh0YXJnZXRzLCB2YXJzLCBwb3NpdGlvbikge1xuICAgICAgICByZXR1cm4gdGhpcy5hZGQoX2VmZmVjdHNbbmFtZV0odGFyZ2V0cywgX2lzT2JqZWN0KHZhcnMpID8gdmFycyA6IChwb3NpdGlvbiA9IHZhcnMpICYmIHt9LCB0aGlzKSwgcG9zaXRpb24pO1xuICAgICAgfTtcbiAgICB9XG4gIH0sXG4gIHJlZ2lzdGVyRWFzZTogZnVuY3Rpb24gcmVnaXN0ZXJFYXNlKG5hbWUsIGVhc2UpIHtcbiAgICBfZWFzZU1hcFtuYW1lXSA9IF9wYXJzZUVhc2UoZWFzZSk7XG4gIH0sXG4gIHBhcnNlRWFzZTogZnVuY3Rpb24gcGFyc2VFYXNlKGVhc2UsIGRlZmF1bHRFYXNlKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyBfcGFyc2VFYXNlKGVhc2UsIGRlZmF1bHRFYXNlKSA6IF9lYXNlTWFwO1xuICB9LFxuICBnZXRCeUlkOiBmdW5jdGlvbiBnZXRCeUlkKGlkKSB7XG4gICAgcmV0dXJuIF9nbG9iYWxUaW1lbGluZS5nZXRCeUlkKGlkKTtcbiAgfSxcbiAgZXhwb3J0Um9vdDogZnVuY3Rpb24gZXhwb3J0Um9vdCh2YXJzLCBpbmNsdWRlRGVsYXllZENhbGxzKSB7XG4gICAgaWYgKHZhcnMgPT09IHZvaWQgMCkge1xuICAgICAgdmFycyA9IHt9O1xuICAgIH1cblxuICAgIHZhciB0bCA9IG5ldyBUaW1lbGluZSh2YXJzKSxcbiAgICAgICAgY2hpbGQsXG4gICAgICAgIG5leHQ7XG4gICAgdGwuc21vb3RoQ2hpbGRUaW1pbmcgPSBfaXNOb3RGYWxzZSh2YXJzLnNtb290aENoaWxkVGltaW5nKTtcblxuICAgIF9nbG9iYWxUaW1lbGluZS5yZW1vdmUodGwpO1xuXG4gICAgdGwuX2RwID0gMDsgLy9vdGhlcndpc2UgaXQnbGwgZ2V0IHJlLWFjdGl2YXRlZCB3aGVuIGFkZGluZyBjaGlsZHJlbiBhbmQgYmUgcmUtaW50cm9kdWNlZCBpbnRvIF9nbG9iYWxUaW1lbGluZSdzIGxpbmtlZCBsaXN0ICh0aGVuIGFkZGVkIHRvIGl0c2VsZikuXG5cbiAgICB0bC5fdGltZSA9IHRsLl90VGltZSA9IF9nbG9iYWxUaW1lbGluZS5fdGltZTtcbiAgICBjaGlsZCA9IF9nbG9iYWxUaW1lbGluZS5fZmlyc3Q7XG5cbiAgICB3aGlsZSAoY2hpbGQpIHtcbiAgICAgIG5leHQgPSBjaGlsZC5fbmV4dDtcblxuICAgICAgaWYgKGluY2x1ZGVEZWxheWVkQ2FsbHMgfHwgISghY2hpbGQuX2R1ciAmJiBjaGlsZCBpbnN0YW5jZW9mIFR3ZWVuICYmIGNoaWxkLnZhcnMub25Db21wbGV0ZSA9PT0gY2hpbGQuX3RhcmdldHNbMF0pKSB7XG4gICAgICAgIF9hZGRUb1RpbWVsaW5lKHRsLCBjaGlsZCwgY2hpbGQuX3N0YXJ0IC0gY2hpbGQuX2RlbGF5KTtcbiAgICAgIH1cblxuICAgICAgY2hpbGQgPSBuZXh0O1xuICAgIH1cblxuICAgIF9hZGRUb1RpbWVsaW5lKF9nbG9iYWxUaW1lbGluZSwgdGwsIDApO1xuXG4gICAgcmV0dXJuIHRsO1xuICB9LFxuICBjb250ZXh0OiBmdW5jdGlvbiBjb250ZXh0KGZ1bmMsIHNjb3BlKSB7XG4gICAgcmV0dXJuIGZ1bmMgPyBuZXcgQ29udGV4dChmdW5jLCBzY29wZSkgOiBfY29udGV4dDtcbiAgfSxcbiAgbWF0Y2hNZWRpYTogZnVuY3Rpb24gbWF0Y2hNZWRpYShzY29wZSkge1xuICAgIHJldHVybiBuZXcgTWF0Y2hNZWRpYShzY29wZSk7XG4gIH0sXG4gIG1hdGNoTWVkaWFSZWZyZXNoOiBmdW5jdGlvbiBtYXRjaE1lZGlhUmVmcmVzaCgpIHtcbiAgICByZXR1cm4gX21lZGlhLmZvckVhY2goZnVuY3Rpb24gKGMpIHtcbiAgICAgIHZhciBjb25kID0gYy5jb25kaXRpb25zLFxuICAgICAgICAgIGZvdW5kLFxuICAgICAgICAgIHA7XG5cbiAgICAgIGZvciAocCBpbiBjb25kKSB7XG4gICAgICAgIGlmIChjb25kW3BdKSB7XG4gICAgICAgICAgY29uZFtwXSA9IGZhbHNlO1xuICAgICAgICAgIGZvdW5kID0gMTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmb3VuZCAmJiBjLnJldmVydCgpO1xuICAgIH0pIHx8IF9vbk1lZGlhQ2hhbmdlKCk7XG4gIH0sXG4gIGFkZEV2ZW50TGlzdGVuZXI6IGZ1bmN0aW9uIGFkZEV2ZW50TGlzdGVuZXIodHlwZSwgY2FsbGJhY2spIHtcbiAgICB2YXIgYSA9IF9saXN0ZW5lcnNbdHlwZV0gfHwgKF9saXN0ZW5lcnNbdHlwZV0gPSBbXSk7XG4gICAgfmEuaW5kZXhPZihjYWxsYmFjaykgfHwgYS5wdXNoKGNhbGxiYWNrKTtcbiAgfSxcbiAgcmVtb3ZlRXZlbnRMaXN0ZW5lcjogZnVuY3Rpb24gcmVtb3ZlRXZlbnRMaXN0ZW5lcih0eXBlLCBjYWxsYmFjaykge1xuICAgIHZhciBhID0gX2xpc3RlbmVyc1t0eXBlXSxcbiAgICAgICAgaSA9IGEgJiYgYS5pbmRleE9mKGNhbGxiYWNrKTtcbiAgICBpID49IDAgJiYgYS5zcGxpY2UoaSwgMSk7XG4gIH0sXG4gIHV0aWxzOiB7XG4gICAgd3JhcDogd3JhcCxcbiAgICB3cmFwWW95bzogd3JhcFlveW8sXG4gICAgZGlzdHJpYnV0ZTogZGlzdHJpYnV0ZSxcbiAgICByYW5kb206IHJhbmRvbSxcbiAgICBzbmFwOiBzbmFwLFxuICAgIG5vcm1hbGl6ZTogbm9ybWFsaXplLFxuICAgIGdldFVuaXQ6IGdldFVuaXQsXG4gICAgY2xhbXA6IGNsYW1wLFxuICAgIHNwbGl0Q29sb3I6IHNwbGl0Q29sb3IsXG4gICAgdG9BcnJheTogdG9BcnJheSxcbiAgICBzZWxlY3Rvcjogc2VsZWN0b3IsXG4gICAgbWFwUmFuZ2U6IG1hcFJhbmdlLFxuICAgIHBpcGU6IHBpcGUsXG4gICAgdW5pdGl6ZTogdW5pdGl6ZSxcbiAgICBpbnRlcnBvbGF0ZTogaW50ZXJwb2xhdGUsXG4gICAgc2h1ZmZsZTogc2h1ZmZsZVxuICB9LFxuICBpbnN0YWxsOiBfaW5zdGFsbCxcbiAgZWZmZWN0czogX2VmZmVjdHMsXG4gIHRpY2tlcjogX3RpY2tlcixcbiAgdXBkYXRlUm9vdDogVGltZWxpbmUudXBkYXRlUm9vdCxcbiAgcGx1Z2luczogX3BsdWdpbnMsXG4gIGdsb2JhbFRpbWVsaW5lOiBfZ2xvYmFsVGltZWxpbmUsXG4gIGNvcmU6IHtcbiAgICBQcm9wVHdlZW46IFByb3BUd2VlbixcbiAgICBnbG9iYWxzOiBfYWRkR2xvYmFsLFxuICAgIFR3ZWVuOiBUd2VlbixcbiAgICBUaW1lbGluZTogVGltZWxpbmUsXG4gICAgQW5pbWF0aW9uOiBBbmltYXRpb24sXG4gICAgZ2V0Q2FjaGU6IF9nZXRDYWNoZSxcbiAgICBfcmVtb3ZlTGlua2VkTGlzdEl0ZW06IF9yZW1vdmVMaW5rZWRMaXN0SXRlbSxcbiAgICByZXZlcnRpbmc6IGZ1bmN0aW9uIHJldmVydGluZygpIHtcbiAgICAgIHJldHVybiBfcmV2ZXJ0aW5nO1xuICAgIH0sXG4gICAgY29udGV4dDogZnVuY3Rpb24gY29udGV4dCh0b0FkZCkge1xuICAgICAgaWYgKHRvQWRkICYmIF9jb250ZXh0KSB7XG4gICAgICAgIF9jb250ZXh0LmRhdGEucHVzaCh0b0FkZCk7XG5cbiAgICAgICAgdG9BZGQuX2N0eCA9IF9jb250ZXh0O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gX2NvbnRleHQ7XG4gICAgfSxcbiAgICBzdXBwcmVzc092ZXJ3cml0ZXM6IGZ1bmN0aW9uIHN1cHByZXNzT3ZlcndyaXRlcyh2YWx1ZSkge1xuICAgICAgcmV0dXJuIF9zdXBwcmVzc092ZXJ3cml0ZXMgPSB2YWx1ZTtcbiAgICB9XG4gIH1cbn07XG5cbl9mb3JFYWNoTmFtZShcInRvLGZyb20sZnJvbVRvLGRlbGF5ZWRDYWxsLHNldCxraWxsVHdlZW5zT2ZcIiwgZnVuY3Rpb24gKG5hbWUpIHtcbiAgcmV0dXJuIF9nc2FwW25hbWVdID0gVHdlZW5bbmFtZV07XG59KTtcblxuX3RpY2tlci5hZGQoVGltZWxpbmUudXBkYXRlUm9vdCk7XG5cbl9xdWlja1R3ZWVuID0gX2dzYXAudG8oe30sIHtcbiAgZHVyYXRpb246IDBcbn0pOyAvLyAtLS0tIEVYVFJBIFBMVUdJTlMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxudmFyIF9nZXRQbHVnaW5Qcm9wVHdlZW4gPSBmdW5jdGlvbiBfZ2V0UGx1Z2luUHJvcFR3ZWVuKHBsdWdpbiwgcHJvcCkge1xuICB2YXIgcHQgPSBwbHVnaW4uX3B0O1xuXG4gIHdoaWxlIChwdCAmJiBwdC5wICE9PSBwcm9wICYmIHB0Lm9wICE9PSBwcm9wICYmIHB0LmZwICE9PSBwcm9wKSB7XG4gICAgcHQgPSBwdC5fbmV4dDtcbiAgfVxuXG4gIHJldHVybiBwdDtcbn0sXG4gICAgX2FkZE1vZGlmaWVycyA9IGZ1bmN0aW9uIF9hZGRNb2RpZmllcnModHdlZW4sIG1vZGlmaWVycykge1xuICB2YXIgdGFyZ2V0cyA9IHR3ZWVuLl90YXJnZXRzLFxuICAgICAgcCxcbiAgICAgIGksXG4gICAgICBwdDtcblxuICBmb3IgKHAgaW4gbW9kaWZpZXJzKSB7XG4gICAgaSA9IHRhcmdldHMubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgcHQgPSB0d2Vlbi5fcHRMb29rdXBbaV1bcF07XG5cbiAgICAgIGlmIChwdCAmJiAocHQgPSBwdC5kKSkge1xuICAgICAgICBpZiAocHQuX3B0KSB7XG4gICAgICAgICAgLy8gaXMgYSBwbHVnaW5cbiAgICAgICAgICBwdCA9IF9nZXRQbHVnaW5Qcm9wVHdlZW4ocHQsIHApO1xuICAgICAgICB9XG5cbiAgICAgICAgcHQgJiYgcHQubW9kaWZpZXIgJiYgcHQubW9kaWZpZXIobW9kaWZpZXJzW3BdLCB0d2VlbiwgdGFyZ2V0c1tpXSwgcCk7XG4gICAgICB9XG4gICAgfVxuICB9XG59LFxuICAgIF9idWlsZE1vZGlmaWVyUGx1Z2luID0gZnVuY3Rpb24gX2J1aWxkTW9kaWZpZXJQbHVnaW4obmFtZSwgbW9kaWZpZXIpIHtcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBuYW1lLFxuICAgIHJhd1ZhcnM6IDEsXG4gICAgLy9kb24ndCBwcmUtcHJvY2VzcyBmdW5jdGlvbi1iYXNlZCB2YWx1ZXMgb3IgXCJyYW5kb20oKVwiIHN0cmluZ3MuXG4gICAgaW5pdDogZnVuY3Rpb24gaW5pdCh0YXJnZXQsIHZhcnMsIHR3ZWVuKSB7XG4gICAgICB0d2Vlbi5fb25Jbml0ID0gZnVuY3Rpb24gKHR3ZWVuKSB7XG4gICAgICAgIHZhciB0ZW1wLCBwO1xuXG4gICAgICAgIGlmIChfaXNTdHJpbmcodmFycykpIHtcbiAgICAgICAgICB0ZW1wID0ge307XG5cbiAgICAgICAgICBfZm9yRWFjaE5hbWUodmFycywgZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgICAgIHJldHVybiB0ZW1wW25hbWVdID0gMTtcbiAgICAgICAgICB9KTsgLy9pZiB0aGUgdXNlciBwYXNzZXMgaW4gYSBjb21tYS1kZWxpbWl0ZWQgbGlzdCBvZiBwcm9wZXJ0eSBuYW1lcyB0byByb3VuZFByb3BzLCBsaWtlIFwieCx5XCIsIHdlIHJvdW5kIHRvIHdob2xlIG51bWJlcnMuXG5cblxuICAgICAgICAgIHZhcnMgPSB0ZW1wO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG1vZGlmaWVyKSB7XG4gICAgICAgICAgdGVtcCA9IHt9O1xuXG4gICAgICAgICAgZm9yIChwIGluIHZhcnMpIHtcbiAgICAgICAgICAgIHRlbXBbcF0gPSBtb2RpZmllcih2YXJzW3BdKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXJzID0gdGVtcDtcbiAgICAgICAgfVxuXG4gICAgICAgIF9hZGRNb2RpZmllcnModHdlZW4sIHZhcnMpO1xuICAgICAgfTtcbiAgICB9XG4gIH07XG59OyAvL3JlZ2lzdGVyIGNvcmUgcGx1Z2luc1xuXG5cbmV4cG9ydCB2YXIgZ3NhcCA9IF9nc2FwLnJlZ2lzdGVyUGx1Z2luKHtcbiAgbmFtZTogXCJhdHRyXCIsXG4gIGluaXQ6IGZ1bmN0aW9uIGluaXQodGFyZ2V0LCB2YXJzLCB0d2VlbiwgaW5kZXgsIHRhcmdldHMpIHtcbiAgICB2YXIgcCwgcHQsIHY7XG4gICAgdGhpcy50d2VlbiA9IHR3ZWVuO1xuXG4gICAgZm9yIChwIGluIHZhcnMpIHtcbiAgICAgIHYgPSB0YXJnZXQuZ2V0QXR0cmlidXRlKHApIHx8IFwiXCI7XG4gICAgICBwdCA9IHRoaXMuYWRkKHRhcmdldCwgXCJzZXRBdHRyaWJ1dGVcIiwgKHYgfHwgMCkgKyBcIlwiLCB2YXJzW3BdLCBpbmRleCwgdGFyZ2V0cywgMCwgMCwgcCk7XG4gICAgICBwdC5vcCA9IHA7XG4gICAgICBwdC5iID0gdjsgLy8gcmVjb3JkIHRoZSBiZWdpbm5pbmcgdmFsdWUgc28gd2UgY2FuIHJldmVydCgpXG5cbiAgICAgIHRoaXMuX3Byb3BzLnB1c2gocCk7XG4gICAgfVxuICB9LFxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcihyYXRpbywgZGF0YSkge1xuICAgIHZhciBwdCA9IGRhdGEuX3B0O1xuXG4gICAgd2hpbGUgKHB0KSB7XG4gICAgICBfcmV2ZXJ0aW5nID8gcHQuc2V0KHB0LnQsIHB0LnAsIHB0LmIsIHB0KSA6IHB0LnIocmF0aW8sIHB0LmQpOyAvLyBpZiByZXZlcnRpbmcsIGdvIGJhY2sgdG8gdGhlIG9yaWdpbmFsIChwdC5iKVxuXG4gICAgICBwdCA9IHB0Ll9uZXh0O1xuICAgIH1cbiAgfVxufSwge1xuICBuYW1lOiBcImVuZEFycmF5XCIsXG4gIGluaXQ6IGZ1bmN0aW9uIGluaXQodGFyZ2V0LCB2YWx1ZSkge1xuICAgIHZhciBpID0gdmFsdWUubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgdGhpcy5hZGQodGFyZ2V0LCBpLCB0YXJnZXRbaV0gfHwgMCwgdmFsdWVbaV0sIDAsIDAsIDAsIDAsIDAsIDEpO1xuICAgIH1cbiAgfVxufSwgX2J1aWxkTW9kaWZpZXJQbHVnaW4oXCJyb3VuZFByb3BzXCIsIF9yb3VuZE1vZGlmaWVyKSwgX2J1aWxkTW9kaWZpZXJQbHVnaW4oXCJtb2RpZmllcnNcIiksIF9idWlsZE1vZGlmaWVyUGx1Z2luKFwic25hcFwiLCBzbmFwKSkgfHwgX2dzYXA7IC8vdG8gcHJldmVudCB0aGUgY29yZSBwbHVnaW5zIGZyb20gYmVpbmcgZHJvcHBlZCB2aWEgYWdncmVzc2l2ZSB0cmVlIHNoYWtpbmcsIHdlIG11c3QgaW5jbHVkZSB0aGVtIGluIHRoZSB2YXJpYWJsZSBkZWNsYXJhdGlvbiBpbiB0aGlzIHdheS5cblxuVHdlZW4udmVyc2lvbiA9IFRpbWVsaW5lLnZlcnNpb24gPSBnc2FwLnZlcnNpb24gPSBcIjMuMTEuMFwiO1xuX2NvcmVSZWFkeSA9IDE7XG5fd2luZG93RXhpc3RzKCkgJiYgX3dha2UoKTtcbnZhciBQb3dlcjAgPSBfZWFzZU1hcC5Qb3dlcjAsXG4gICAgUG93ZXIxID0gX2Vhc2VNYXAuUG93ZXIxLFxuICAgIFBvd2VyMiA9IF9lYXNlTWFwLlBvd2VyMixcbiAgICBQb3dlcjMgPSBfZWFzZU1hcC5Qb3dlcjMsXG4gICAgUG93ZXI0ID0gX2Vhc2VNYXAuUG93ZXI0LFxuICAgIExpbmVhciA9IF9lYXNlTWFwLkxpbmVhcixcbiAgICBRdWFkID0gX2Vhc2VNYXAuUXVhZCxcbiAgICBDdWJpYyA9IF9lYXNlTWFwLkN1YmljLFxuICAgIFF1YXJ0ID0gX2Vhc2VNYXAuUXVhcnQsXG4gICAgUXVpbnQgPSBfZWFzZU1hcC5RdWludCxcbiAgICBTdHJvbmcgPSBfZWFzZU1hcC5TdHJvbmcsXG4gICAgRWxhc3RpYyA9IF9lYXNlTWFwLkVsYXN0aWMsXG4gICAgQmFjayA9IF9lYXNlTWFwLkJhY2ssXG4gICAgU3RlcHBlZEVhc2UgPSBfZWFzZU1hcC5TdGVwcGVkRWFzZSxcbiAgICBCb3VuY2UgPSBfZWFzZU1hcC5Cb3VuY2UsXG4gICAgU2luZSA9IF9lYXNlTWFwLlNpbmUsXG4gICAgRXhwbyA9IF9lYXNlTWFwLkV4cG8sXG4gICAgQ2lyYyA9IF9lYXNlTWFwLkNpcmM7XG5leHBvcnQgeyBQb3dlcjAsIFBvd2VyMSwgUG93ZXIyLCBQb3dlcjMsIFBvd2VyNCwgTGluZWFyLCBRdWFkLCBDdWJpYywgUXVhcnQsIFF1aW50LCBTdHJvbmcsIEVsYXN0aWMsIEJhY2ssIFN0ZXBwZWRFYXNlLCBCb3VuY2UsIFNpbmUsIEV4cG8sIENpcmMgfTtcbmV4cG9ydCB7IFR3ZWVuIGFzIFR3ZWVuTWF4LCBUd2VlbiBhcyBUd2VlbkxpdGUsIFRpbWVsaW5lIGFzIFRpbWVsaW5lTWF4LCBUaW1lbGluZSBhcyBUaW1lbGluZUxpdGUsIGdzYXAgYXMgZGVmYXVsdCwgd3JhcCwgd3JhcFlveW8sIGRpc3RyaWJ1dGUsIHJhbmRvbSwgc25hcCwgbm9ybWFsaXplLCBnZXRVbml0LCBjbGFtcCwgc3BsaXRDb2xvciwgdG9BcnJheSwgc2VsZWN0b3IsIG1hcFJhbmdlLCBwaXBlLCB1bml0aXplLCBpbnRlcnBvbGF0ZSwgc2h1ZmZsZSB9OyAvL2V4cG9ydCBzb21lIGludGVybmFsIG1ldGhvZHMvb3JvamVjdHMgZm9yIHVzZSBpbiBDU1NQbHVnaW4gc28gdGhhdCB3ZSBjYW4gZXh0ZXJuYWxpemUgdGhhdCBmaWxlIGFuZCBhbGxvdyBjdXN0b20gYnVpbGRzIHRoYXQgZXhjbHVkZSBpdC5cblxuZXhwb3J0IHsgX2dldFByb3BlcnR5LCBfbnVtRXhwLCBfbnVtV2l0aFVuaXRFeHAsIF9pc1N0cmluZywgX2lzVW5kZWZpbmVkLCBfcmVuZGVyQ29tcGxleFN0cmluZywgX3JlbEV4cCwgX3NldERlZmF1bHRzLCBfcmVtb3ZlTGlua2VkTGlzdEl0ZW0sIF9mb3JFYWNoTmFtZSwgX3NvcnRQcm9wVHdlZW5zQnlQcmlvcml0eSwgX2NvbG9yU3RyaW5nRmlsdGVyLCBfcmVwbGFjZVJhbmRvbSwgX2NoZWNrUGx1Z2luLCBfcGx1Z2lucywgX3RpY2tlciwgX2NvbmZpZywgX3JvdW5kTW9kaWZpZXIsIF9yb3VuZCwgX21pc3NpbmdQbHVnaW4sIF9nZXRTZXR0ZXIsIF9nZXRDYWNoZSwgX2NvbG9yRXhwLCBfcGFyc2VSZWxhdGl2ZSB9OyIsImltcG9ydCB7IGdzYXAsIFBvd2VyMCwgUG93ZXIxLCBQb3dlcjIsIFBvd2VyMywgUG93ZXI0LCBMaW5lYXIsIFF1YWQsIEN1YmljLCBRdWFydCwgUXVpbnQsIFN0cm9uZywgRWxhc3RpYywgQmFjaywgU3RlcHBlZEVhc2UsIEJvdW5jZSwgU2luZSwgRXhwbywgQ2lyYywgVHdlZW5MaXRlLCBUaW1lbGluZUxpdGUsIFRpbWVsaW5lTWF4IH0gZnJvbSBcIi4vZ3NhcC1jb3JlLmpzXCI7XG5pbXBvcnQgeyBDU1NQbHVnaW4gfSBmcm9tIFwiLi9DU1NQbHVnaW4uanNcIjtcbnZhciBnc2FwV2l0aENTUyA9IGdzYXAucmVnaXN0ZXJQbHVnaW4oQ1NTUGx1Z2luKSB8fCBnc2FwLFxuICAgIC8vIHRvIHByb3RlY3QgZnJvbSB0cmVlIHNoYWtpbmdcblR3ZWVuTWF4V2l0aENTUyA9IGdzYXBXaXRoQ1NTLmNvcmUuVHdlZW47XG5leHBvcnQgeyBnc2FwV2l0aENTUyBhcyBnc2FwLCBnc2FwV2l0aENTUyBhcyBkZWZhdWx0LCBDU1NQbHVnaW4sIFR3ZWVuTWF4V2l0aENTUyBhcyBUd2Vlbk1heCwgVHdlZW5MaXRlLCBUaW1lbGluZU1heCwgVGltZWxpbmVMaXRlLCBQb3dlcjAsIFBvd2VyMSwgUG93ZXIyLCBQb3dlcjMsIFBvd2VyNCwgTGluZWFyLCBRdWFkLCBDdWJpYywgUXVhcnQsIFF1aW50LCBTdHJvbmcsIEVsYXN0aWMsIEJhY2ssIFN0ZXBwZWRFYXNlLCBCb3VuY2UsIFNpbmUsIEV4cG8sIENpcmMgfTsiLCJ2YXIgd2FybmluZyA9IGZ1bmN0aW9uICgpIHsgfTtcclxudmFyIGludmFyaWFudCA9IGZ1bmN0aW9uICgpIHsgfTtcclxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcclxuICAgIHdhcm5pbmcgPSBmdW5jdGlvbiAoY2hlY2ssIG1lc3NhZ2UpIHtcclxuICAgICAgICBpZiAoIWNoZWNrICYmIHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICBjb25zb2xlLndhcm4obWVzc2FnZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIGludmFyaWFudCA9IGZ1bmN0aW9uIChjaGVjaywgbWVzc2FnZSkge1xyXG4gICAgICAgIGlmICghY2hlY2spIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbn1cblxuZXhwb3J0IHsgaW52YXJpYW50LCB3YXJuaW5nIH07XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBzdXJyb2dhdGVfcGFpcnNfMSA9IHJlcXVpcmUoXCIuL3N1cnJvZ2F0ZS1wYWlyc1wiKTtcbnZhciBIVE1MX0FMUEhBID0gWydhcG9zJywgJ25ic3AnLCAnaWV4Y2wnLCAnY2VudCcsICdwb3VuZCcsICdjdXJyZW4nLCAneWVuJywgJ2JydmJhcicsICdzZWN0JywgJ3VtbCcsICdjb3B5JywgJ29yZGYnLCAnbGFxdW8nLCAnbm90JywgJ3NoeScsICdyZWcnLCAnbWFjcicsICdkZWcnLCAncGx1c21uJywgJ3N1cDInLCAnc3VwMycsICdhY3V0ZScsICdtaWNybycsICdwYXJhJywgJ21pZGRvdCcsICdjZWRpbCcsICdzdXAxJywgJ29yZG0nLCAncmFxdW8nLCAnZnJhYzE0JywgJ2ZyYWMxMicsICdmcmFjMzQnLCAnaXF1ZXN0JywgJ0FncmF2ZScsICdBYWN1dGUnLCAnQWNpcmMnLCAnQXRpbGRlJywgJ0F1bWwnLCAnQXJpbmcnLCAnQUVsaWcnLCAnQ2NlZGlsJywgJ0VncmF2ZScsICdFYWN1dGUnLCAnRWNpcmMnLCAnRXVtbCcsICdJZ3JhdmUnLCAnSWFjdXRlJywgJ0ljaXJjJywgJ0l1bWwnLCAnRVRIJywgJ050aWxkZScsICdPZ3JhdmUnLCAnT2FjdXRlJywgJ09jaXJjJywgJ090aWxkZScsICdPdW1sJywgJ3RpbWVzJywgJ09zbGFzaCcsICdVZ3JhdmUnLCAnVWFjdXRlJywgJ1VjaXJjJywgJ1V1bWwnLCAnWWFjdXRlJywgJ1RIT1JOJywgJ3N6bGlnJywgJ2FncmF2ZScsICdhYWN1dGUnLCAnYWNpcmMnLCAnYXRpbGRlJywgJ2F1bWwnLCAnYXJpbmcnLCAnYWVsaWcnLCAnY2NlZGlsJywgJ2VncmF2ZScsICdlYWN1dGUnLCAnZWNpcmMnLCAnZXVtbCcsICdpZ3JhdmUnLCAnaWFjdXRlJywgJ2ljaXJjJywgJ2l1bWwnLCAnZXRoJywgJ250aWxkZScsICdvZ3JhdmUnLCAnb2FjdXRlJywgJ29jaXJjJywgJ290aWxkZScsICdvdW1sJywgJ2RpdmlkZScsICdvc2xhc2gnLCAndWdyYXZlJywgJ3VhY3V0ZScsICd1Y2lyYycsICd1dW1sJywgJ3lhY3V0ZScsICd0aG9ybicsICd5dW1sJywgJ3F1b3QnLCAnYW1wJywgJ2x0JywgJ2d0JywgJ09FbGlnJywgJ29lbGlnJywgJ1NjYXJvbicsICdzY2Fyb24nLCAnWXVtbCcsICdjaXJjJywgJ3RpbGRlJywgJ2Vuc3AnLCAnZW1zcCcsICd0aGluc3AnLCAnenduaicsICd6d2onLCAnbHJtJywgJ3JsbScsICduZGFzaCcsICdtZGFzaCcsICdsc3F1bycsICdyc3F1bycsICdzYnF1bycsICdsZHF1bycsICdyZHF1bycsICdiZHF1bycsICdkYWdnZXInLCAnRGFnZ2VyJywgJ3Blcm1pbCcsICdsc2FxdW8nLCAncnNhcXVvJywgJ2V1cm8nLCAnZm5vZicsICdBbHBoYScsICdCZXRhJywgJ0dhbW1hJywgJ0RlbHRhJywgJ0Vwc2lsb24nLCAnWmV0YScsICdFdGEnLCAnVGhldGEnLCAnSW90YScsICdLYXBwYScsICdMYW1iZGEnLCAnTXUnLCAnTnUnLCAnWGknLCAnT21pY3JvbicsICdQaScsICdSaG8nLCAnU2lnbWEnLCAnVGF1JywgJ1Vwc2lsb24nLCAnUGhpJywgJ0NoaScsICdQc2knLCAnT21lZ2EnLCAnYWxwaGEnLCAnYmV0YScsICdnYW1tYScsICdkZWx0YScsICdlcHNpbG9uJywgJ3pldGEnLCAnZXRhJywgJ3RoZXRhJywgJ2lvdGEnLCAna2FwcGEnLCAnbGFtYmRhJywgJ211JywgJ251JywgJ3hpJywgJ29taWNyb24nLCAncGknLCAncmhvJywgJ3NpZ21hZicsICdzaWdtYScsICd0YXUnLCAndXBzaWxvbicsICdwaGknLCAnY2hpJywgJ3BzaScsICdvbWVnYScsICd0aGV0YXN5bScsICd1cHNpaCcsICdwaXYnLCAnYnVsbCcsICdoZWxsaXAnLCAncHJpbWUnLCAnUHJpbWUnLCAnb2xpbmUnLCAnZnJhc2wnLCAnd2VpZXJwJywgJ2ltYWdlJywgJ3JlYWwnLCAndHJhZGUnLCAnYWxlZnN5bScsICdsYXJyJywgJ3VhcnInLCAncmFycicsICdkYXJyJywgJ2hhcnInLCAnY3JhcnInLCAnbEFycicsICd1QXJyJywgJ3JBcnInLCAnZEFycicsICdoQXJyJywgJ2ZvcmFsbCcsICdwYXJ0JywgJ2V4aXN0JywgJ2VtcHR5JywgJ25hYmxhJywgJ2lzaW4nLCAnbm90aW4nLCAnbmknLCAncHJvZCcsICdzdW0nLCAnbWludXMnLCAnbG93YXN0JywgJ3JhZGljJywgJ3Byb3AnLCAnaW5maW4nLCAnYW5nJywgJ2FuZCcsICdvcicsICdjYXAnLCAnY3VwJywgJ2ludCcsICd0aGVyZTQnLCAnc2ltJywgJ2NvbmcnLCAnYXN5bXAnLCAnbmUnLCAnZXF1aXYnLCAnbGUnLCAnZ2UnLCAnc3ViJywgJ3N1cCcsICduc3ViJywgJ3N1YmUnLCAnc3VwZScsICdvcGx1cycsICdvdGltZXMnLCAncGVycCcsICdzZG90JywgJ2xjZWlsJywgJ3JjZWlsJywgJ2xmbG9vcicsICdyZmxvb3InLCAnbGFuZycsICdyYW5nJywgJ2xveicsICdzcGFkZXMnLCAnY2x1YnMnLCAnaGVhcnRzJywgJ2RpYW1zJ107XG52YXIgSFRNTF9DT0RFUyA9IFszOSwgMTYwLCAxNjEsIDE2MiwgMTYzLCAxNjQsIDE2NSwgMTY2LCAxNjcsIDE2OCwgMTY5LCAxNzAsIDE3MSwgMTcyLCAxNzMsIDE3NCwgMTc1LCAxNzYsIDE3NywgMTc4LCAxNzksIDE4MCwgMTgxLCAxODIsIDE4MywgMTg0LCAxODUsIDE4NiwgMTg3LCAxODgsIDE4OSwgMTkwLCAxOTEsIDE5MiwgMTkzLCAxOTQsIDE5NSwgMTk2LCAxOTcsIDE5OCwgMTk5LCAyMDAsIDIwMSwgMjAyLCAyMDMsIDIwNCwgMjA1LCAyMDYsIDIwNywgMjA4LCAyMDksIDIxMCwgMjExLCAyMTIsIDIxMywgMjE0LCAyMTUsIDIxNiwgMjE3LCAyMTgsIDIxOSwgMjIwLCAyMjEsIDIyMiwgMjIzLCAyMjQsIDIyNSwgMjI2LCAyMjcsIDIyOCwgMjI5LCAyMzAsIDIzMSwgMjMyLCAyMzMsIDIzNCwgMjM1LCAyMzYsIDIzNywgMjM4LCAyMzksIDI0MCwgMjQxLCAyNDIsIDI0MywgMjQ0LCAyNDUsIDI0NiwgMjQ3LCAyNDgsIDI0OSwgMjUwLCAyNTEsIDI1MiwgMjUzLCAyNTQsIDI1NSwgMzQsIDM4LCA2MCwgNjIsIDMzOCwgMzM5LCAzNTIsIDM1MywgMzc2LCA3MTAsIDczMiwgODE5NCwgODE5NSwgODIwMSwgODIwNCwgODIwNSwgODIwNiwgODIwNywgODIxMSwgODIxMiwgODIxNiwgODIxNywgODIxOCwgODIyMCwgODIyMSwgODIyMiwgODIyNCwgODIyNSwgODI0MCwgODI0OSwgODI1MCwgODM2NCwgNDAyLCA5MTMsIDkxNCwgOTE1LCA5MTYsIDkxNywgOTE4LCA5MTksIDkyMCwgOTIxLCA5MjIsIDkyMywgOTI0LCA5MjUsIDkyNiwgOTI3LCA5MjgsIDkyOSwgOTMxLCA5MzIsIDkzMywgOTM0LCA5MzUsIDkzNiwgOTM3LCA5NDUsIDk0NiwgOTQ3LCA5NDgsIDk0OSwgOTUwLCA5NTEsIDk1MiwgOTUzLCA5NTQsIDk1NSwgOTU2LCA5NTcsIDk1OCwgOTU5LCA5NjAsIDk2MSwgOTYyLCA5NjMsIDk2NCwgOTY1LCA5NjYsIDk2NywgOTY4LCA5NjksIDk3NywgOTc4LCA5ODIsIDgyMjYsIDgyMzAsIDgyNDIsIDgyNDMsIDgyNTQsIDgyNjAsIDg0NzIsIDg0NjUsIDg0NzYsIDg0ODIsIDg1MDEsIDg1OTIsIDg1OTMsIDg1OTQsIDg1OTUsIDg1OTYsIDg2MjksIDg2NTYsIDg2NTcsIDg2NTgsIDg2NTksIDg2NjAsIDg3MDQsIDg3MDYsIDg3MDcsIDg3MDksIDg3MTEsIDg3MTIsIDg3MTMsIDg3MTUsIDg3MTksIDg3MjEsIDg3MjIsIDg3MjcsIDg3MzAsIDg3MzMsIDg3MzQsIDg3MzYsIDg3NDMsIDg3NDQsIDg3NDUsIDg3NDYsIDg3NDcsIDg3NTYsIDg3NjQsIDg3NzMsIDg3NzYsIDg4MDAsIDg4MDEsIDg4MDQsIDg4MDUsIDg4MzQsIDg4MzUsIDg4MzYsIDg4MzgsIDg4MzksIDg4NTMsIDg4NTUsIDg4NjksIDg5MDEsIDg5NjgsIDg5NjksIDg5NzAsIDg5NzEsIDkwMDEsIDkwMDIsIDk2NzQsIDk4MjQsIDk4MjcsIDk4MjksIDk4MzBdO1xudmFyIGFscGhhSW5kZXggPSB7fTtcbnZhciBudW1JbmRleCA9IHt9O1xuKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIGxlbmd0aCA9IEhUTUxfQUxQSEEubGVuZ3RoO1xuICAgIHdoaWxlIChpIDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBhID0gSFRNTF9BTFBIQVtpXTtcbiAgICAgICAgdmFyIGMgPSBIVE1MX0NPREVTW2ldO1xuICAgICAgICBhbHBoYUluZGV4W2FdID0gU3RyaW5nLmZyb21DaGFyQ29kZShjKTtcbiAgICAgICAgbnVtSW5kZXhbY10gPSBhO1xuICAgICAgICBpKys7XG4gICAgfVxufSkoKTtcbnZhciBIdG1sNEVudGl0aWVzID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEh0bWw0RW50aXRpZXMoKSB7XG4gICAgfVxuICAgIEh0bWw0RW50aXRpZXMucHJvdG90eXBlLmRlY29kZSA9IGZ1bmN0aW9uIChzdHIpIHtcbiAgICAgICAgaWYgKCFzdHIgfHwgIXN0ci5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3RyLnJlcGxhY2UoLyYoIz9bXFx3XFxkXSspOz8vZywgZnVuY3Rpb24gKHMsIGVudGl0eSkge1xuICAgICAgICAgICAgdmFyIGNocjtcbiAgICAgICAgICAgIGlmIChlbnRpdHkuY2hhckF0KDApID09PSBcIiNcIikge1xuICAgICAgICAgICAgICAgIHZhciBjb2RlID0gZW50aXR5LmNoYXJBdCgxKS50b0xvd2VyQ2FzZSgpID09PSAneCcgP1xuICAgICAgICAgICAgICAgICAgICBwYXJzZUludChlbnRpdHkuc3Vic3RyKDIpLCAxNikgOlxuICAgICAgICAgICAgICAgICAgICBwYXJzZUludChlbnRpdHkuc3Vic3RyKDEpKTtcbiAgICAgICAgICAgICAgICBpZiAoIWlzTmFOKGNvZGUpIHx8IGNvZGUgPj0gLTMyNzY4KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjb2RlIDw9IDY1NTM1KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjaHIgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGNvZGUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2hyID0gc3Vycm9nYXRlX3BhaXJzXzEuZnJvbUNvZGVQb2ludChjb2RlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNociA9IGFscGhhSW5kZXhbZW50aXR5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBjaHIgfHwgcztcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBIdG1sNEVudGl0aWVzLmRlY29kZSA9IGZ1bmN0aW9uIChzdHIpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBIdG1sNEVudGl0aWVzKCkuZGVjb2RlKHN0cik7XG4gICAgfTtcbiAgICBIdG1sNEVudGl0aWVzLnByb3RvdHlwZS5lbmNvZGUgPSBmdW5jdGlvbiAoc3RyKSB7XG4gICAgICAgIGlmICghc3RyIHx8ICFzdHIubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHN0ckxlbmd0aCA9IHN0ci5sZW5ndGg7XG4gICAgICAgIHZhciByZXN1bHQgPSAnJztcbiAgICAgICAgdmFyIGkgPSAwO1xuICAgICAgICB3aGlsZSAoaSA8IHN0ckxlbmd0aCkge1xuICAgICAgICAgICAgdmFyIGFscGhhID0gbnVtSW5kZXhbc3RyLmNoYXJDb2RlQXQoaSldO1xuICAgICAgICAgICAgcmVzdWx0ICs9IGFscGhhID8gXCImXCIgKyBhbHBoYSArIFwiO1wiIDogc3RyLmNoYXJBdChpKTtcbiAgICAgICAgICAgIGkrKztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG4gICAgSHRtbDRFbnRpdGllcy5lbmNvZGUgPSBmdW5jdGlvbiAoc3RyKSB7XG4gICAgICAgIHJldHVybiBuZXcgSHRtbDRFbnRpdGllcygpLmVuY29kZShzdHIpO1xuICAgIH07XG4gICAgSHRtbDRFbnRpdGllcy5wcm90b3R5cGUuZW5jb2RlTm9uVVRGID0gZnVuY3Rpb24gKHN0cikge1xuICAgICAgICBpZiAoIXN0ciB8fCAhc3RyLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICB9XG4gICAgICAgIHZhciBzdHJMZW5ndGggPSBzdHIubGVuZ3RoO1xuICAgICAgICB2YXIgcmVzdWx0ID0gJyc7XG4gICAgICAgIHZhciBpID0gMDtcbiAgICAgICAgd2hpbGUgKGkgPCBzdHJMZW5ndGgpIHtcbiAgICAgICAgICAgIHZhciBjYyA9IHN0ci5jaGFyQ29kZUF0KGkpO1xuICAgICAgICAgICAgdmFyIGFscGhhID0gbnVtSW5kZXhbY2NdO1xuICAgICAgICAgICAgaWYgKGFscGhhKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ICs9IFwiJlwiICsgYWxwaGEgKyBcIjtcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNjIDwgMzIgfHwgY2MgPiAxMjYpIHtcbiAgICAgICAgICAgICAgICBpZiAoY2MgPj0gc3Vycm9nYXRlX3BhaXJzXzEuaGlnaFN1cnJvZ2F0ZUZyb20gJiYgY2MgPD0gc3Vycm9nYXRlX3BhaXJzXzEuaGlnaFN1cnJvZ2F0ZVRvKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnJiMnICsgc3Vycm9nYXRlX3BhaXJzXzEuZ2V0Q29kZVBvaW50KHN0ciwgaSkgKyAnOyc7XG4gICAgICAgICAgICAgICAgICAgIGkrKztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnJiMnICsgY2MgKyAnOyc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ICs9IHN0ci5jaGFyQXQoaSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpKys7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuICAgIEh0bWw0RW50aXRpZXMuZW5jb2RlTm9uVVRGID0gZnVuY3Rpb24gKHN0cikge1xuICAgICAgICByZXR1cm4gbmV3IEh0bWw0RW50aXRpZXMoKS5lbmNvZGVOb25VVEYoc3RyKTtcbiAgICB9O1xuICAgIEh0bWw0RW50aXRpZXMucHJvdG90eXBlLmVuY29kZU5vbkFTQ0lJID0gZnVuY3Rpb24gKHN0cikge1xuICAgICAgICBpZiAoIXN0ciB8fCAhc3RyLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICB9XG4gICAgICAgIHZhciBzdHJMZW5ndGggPSBzdHIubGVuZ3RoO1xuICAgICAgICB2YXIgcmVzdWx0ID0gJyc7XG4gICAgICAgIHZhciBpID0gMDtcbiAgICAgICAgd2hpbGUgKGkgPCBzdHJMZW5ndGgpIHtcbiAgICAgICAgICAgIHZhciBjID0gc3RyLmNoYXJDb2RlQXQoaSk7XG4gICAgICAgICAgICBpZiAoYyA8PSAyNTUpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgKz0gc3RyW2krK107XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYyA+PSBzdXJyb2dhdGVfcGFpcnNfMS5oaWdoU3Vycm9nYXRlRnJvbSAmJiBjIDw9IHN1cnJvZ2F0ZV9wYWlyc18xLmhpZ2hTdXJyb2dhdGVUbykge1xuICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnJiMnICsgc3Vycm9nYXRlX3BhaXJzXzEuZ2V0Q29kZVBvaW50KHN0ciwgaSkgKyAnOyc7XG4gICAgICAgICAgICAgICAgaSsrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ICs9ICcmIycgKyBjICsgJzsnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaSsrO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcbiAgICBIdG1sNEVudGl0aWVzLmVuY29kZU5vbkFTQ0lJID0gZnVuY3Rpb24gKHN0cikge1xuICAgICAgICByZXR1cm4gbmV3IEh0bWw0RW50aXRpZXMoKS5lbmNvZGVOb25BU0NJSShzdHIpO1xuICAgIH07XG4gICAgcmV0dXJuIEh0bWw0RW50aXRpZXM7XG59KCkpO1xuZXhwb3J0cy5IdG1sNEVudGl0aWVzID0gSHRtbDRFbnRpdGllcztcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIHN1cnJvZ2F0ZV9wYWlyc18xID0gcmVxdWlyZShcIi4vc3Vycm9nYXRlLXBhaXJzXCIpO1xudmFyIEVOVElUSUVTID0gW1snQWFjdXRlJywgWzE5M11dLCBbJ2FhY3V0ZScsIFsyMjVdXSwgWydBYnJldmUnLCBbMjU4XV0sIFsnYWJyZXZlJywgWzI1OV1dLCBbJ2FjJywgWzg3NjZdXSwgWydhY2QnLCBbODc2N11dLCBbJ2FjRScsIFs4NzY2LCA4MTldXSwgWydBY2lyYycsIFsxOTRdXSwgWydhY2lyYycsIFsyMjZdXSwgWydhY3V0ZScsIFsxODBdXSwgWydBY3knLCBbMTA0MF1dLCBbJ2FjeScsIFsxMDcyXV0sIFsnQUVsaWcnLCBbMTk4XV0sIFsnYWVsaWcnLCBbMjMwXV0sIFsnYWYnLCBbODI4OV1dLCBbJ0FmcicsIFsxMjAwNjhdXSwgWydhZnInLCBbMTIwMDk0XV0sIFsnQWdyYXZlJywgWzE5Ml1dLCBbJ2FncmF2ZScsIFsyMjRdXSwgWydhbGVmc3ltJywgWzg1MDFdXSwgWydhbGVwaCcsIFs4NTAxXV0sIFsnQWxwaGEnLCBbOTEzXV0sIFsnYWxwaGEnLCBbOTQ1XV0sIFsnQW1hY3InLCBbMjU2XV0sIFsnYW1hY3InLCBbMjU3XV0sIFsnYW1hbGcnLCBbMTA4MTVdXSwgWydhbXAnLCBbMzhdXSwgWydBTVAnLCBbMzhdXSwgWydhbmRhbmQnLCBbMTA4MzddXSwgWydBbmQnLCBbMTA4MzVdXSwgWydhbmQnLCBbODc0M11dLCBbJ2FuZGQnLCBbMTA4NDRdXSwgWydhbmRzbG9wZScsIFsxMDg0MF1dLCBbJ2FuZHYnLCBbMTA4NDJdXSwgWydhbmcnLCBbODczNl1dLCBbJ2FuZ2UnLCBbMTA2NjBdXSwgWydhbmdsZScsIFs4NzM2XV0sIFsnYW5nbXNkYWEnLCBbMTA2NjRdXSwgWydhbmdtc2RhYicsIFsxMDY2NV1dLCBbJ2FuZ21zZGFjJywgWzEwNjY2XV0sIFsnYW5nbXNkYWQnLCBbMTA2NjddXSwgWydhbmdtc2RhZScsIFsxMDY2OF1dLCBbJ2FuZ21zZGFmJywgWzEwNjY5XV0sIFsnYW5nbXNkYWcnLCBbMTA2NzBdXSwgWydhbmdtc2RhaCcsIFsxMDY3MV1dLCBbJ2FuZ21zZCcsIFs4NzM3XV0sIFsnYW5ncnQnLCBbODczNV1dLCBbJ2FuZ3J0dmInLCBbODg5NF1dLCBbJ2FuZ3J0dmJkJywgWzEwNjUzXV0sIFsnYW5nc3BoJywgWzg3MzhdXSwgWydhbmdzdCcsIFsxOTddXSwgWydhbmd6YXJyJywgWzkwODRdXSwgWydBb2dvbicsIFsyNjBdXSwgWydhb2dvbicsIFsyNjFdXSwgWydBb3BmJywgWzEyMDEyMF1dLCBbJ2FvcGYnLCBbMTIwMTQ2XV0sIFsnYXBhY2lyJywgWzEwODYzXV0sIFsnYXAnLCBbODc3Nl1dLCBbJ2FwRScsIFsxMDg2NF1dLCBbJ2FwZScsIFs4Nzc4XV0sIFsnYXBpZCcsIFs4Nzc5XV0sIFsnYXBvcycsIFszOV1dLCBbJ0FwcGx5RnVuY3Rpb24nLCBbODI4OV1dLCBbJ2FwcHJveCcsIFs4Nzc2XV0sIFsnYXBwcm94ZXEnLCBbODc3OF1dLCBbJ0FyaW5nJywgWzE5N11dLCBbJ2FyaW5nJywgWzIyOV1dLCBbJ0FzY3InLCBbMTE5OTY0XV0sIFsnYXNjcicsIFsxMTk5OTBdXSwgWydBc3NpZ24nLCBbODc4OF1dLCBbJ2FzdCcsIFs0Ml1dLCBbJ2FzeW1wJywgWzg3NzZdXSwgWydhc3ltcGVxJywgWzg3ODFdXSwgWydBdGlsZGUnLCBbMTk1XV0sIFsnYXRpbGRlJywgWzIyN11dLCBbJ0F1bWwnLCBbMTk2XV0sIFsnYXVtbCcsIFsyMjhdXSwgWydhd2NvbmludCcsIFs4NzU1XV0sIFsnYXdpbnQnLCBbMTA3NjldXSwgWydiYWNrY29uZycsIFs4NzgwXV0sIFsnYmFja2Vwc2lsb24nLCBbMTAxNF1dLCBbJ2JhY2twcmltZScsIFs4MjQ1XV0sIFsnYmFja3NpbScsIFs4NzY1XV0sIFsnYmFja3NpbWVxJywgWzg5MDldXSwgWydCYWNrc2xhc2gnLCBbODcyNl1dLCBbJ0JhcnYnLCBbMTA5ODNdXSwgWydiYXJ2ZWUnLCBbODg5M11dLCBbJ2JhcndlZCcsIFs4OTY1XV0sIFsnQmFyd2VkJywgWzg5NjZdXSwgWydiYXJ3ZWRnZScsIFs4OTY1XV0sIFsnYmJyaycsIFs5MTQxXV0sIFsnYmJya3RicmsnLCBbOTE0Ml1dLCBbJ2Jjb25nJywgWzg3ODBdXSwgWydCY3knLCBbMTA0MV1dLCBbJ2JjeScsIFsxMDczXV0sIFsnYmRxdW8nLCBbODIyMl1dLCBbJ2JlY2F1cycsIFs4NzU3XV0sIFsnYmVjYXVzZScsIFs4NzU3XV0sIFsnQmVjYXVzZScsIFs4NzU3XV0sIFsnYmVtcHR5dicsIFsxMDY3Ml1dLCBbJ2JlcHNpJywgWzEwMTRdXSwgWydiZXJub3UnLCBbODQ5Ml1dLCBbJ0Jlcm5vdWxsaXMnLCBbODQ5Ml1dLCBbJ0JldGEnLCBbOTE0XV0sIFsnYmV0YScsIFs5NDZdXSwgWydiZXRoJywgWzg1MDJdXSwgWydiZXR3ZWVuJywgWzg4MTJdXSwgWydCZnInLCBbMTIwMDY5XV0sIFsnYmZyJywgWzEyMDA5NV1dLCBbJ2JpZ2NhcCcsIFs4ODk4XV0sIFsnYmlnY2lyYycsIFs5NzExXV0sIFsnYmlnY3VwJywgWzg4OTldXSwgWydiaWdvZG90JywgWzEwNzUyXV0sIFsnYmlnb3BsdXMnLCBbMTA3NTNdXSwgWydiaWdvdGltZXMnLCBbMTA3NTRdXSwgWydiaWdzcWN1cCcsIFsxMDc1OF1dLCBbJ2JpZ3N0YXInLCBbOTczM11dLCBbJ2JpZ3RyaWFuZ2xlZG93bicsIFs5NjYxXV0sIFsnYmlndHJpYW5nbGV1cCcsIFs5NjUxXV0sIFsnYmlndXBsdXMnLCBbMTA3NTZdXSwgWydiaWd2ZWUnLCBbODg5N11dLCBbJ2JpZ3dlZGdlJywgWzg4OTZdXSwgWydia2Fyb3cnLCBbMTA1MDldXSwgWydibGFja2xvemVuZ2UnLCBbMTA3MzFdXSwgWydibGFja3NxdWFyZScsIFs5NjQyXV0sIFsnYmxhY2t0cmlhbmdsZScsIFs5NjUyXV0sIFsnYmxhY2t0cmlhbmdsZWRvd24nLCBbOTY2Ml1dLCBbJ2JsYWNrdHJpYW5nbGVsZWZ0JywgWzk2NjZdXSwgWydibGFja3RyaWFuZ2xlcmlnaHQnLCBbOTY1Nl1dLCBbJ2JsYW5rJywgWzkyNTFdXSwgWydibGsxMicsIFs5NjE4XV0sIFsnYmxrMTQnLCBbOTYxN11dLCBbJ2JsazM0JywgWzk2MTldXSwgWydibG9jaycsIFs5NjA4XV0sIFsnYm5lJywgWzYxLCA4NDIxXV0sIFsnYm5lcXVpdicsIFs4ODAxLCA4NDIxXV0sIFsnYk5vdCcsIFsxMDk4OV1dLCBbJ2Jub3QnLCBbODk3Nl1dLCBbJ0JvcGYnLCBbMTIwMTIxXV0sIFsnYm9wZicsIFsxMjAxNDddXSwgWydib3QnLCBbODg2OV1dLCBbJ2JvdHRvbScsIFs4ODY5XV0sIFsnYm93dGllJywgWzg5MDRdXSwgWydib3hib3gnLCBbMTA2OTddXSwgWydib3hkbCcsIFs5NDg4XV0sIFsnYm94ZEwnLCBbOTU1N11dLCBbJ2JveERsJywgWzk1NThdXSwgWydib3hETCcsIFs5NTU5XV0sIFsnYm94ZHInLCBbOTQ4NF1dLCBbJ2JveGRSJywgWzk1NTRdXSwgWydib3hEcicsIFs5NTU1XV0sIFsnYm94RFInLCBbOTU1Nl1dLCBbJ2JveGgnLCBbOTQ3Ml1dLCBbJ2JveEgnLCBbOTU1Ml1dLCBbJ2JveGhkJywgWzk1MTZdXSwgWydib3hIZCcsIFs5NTcyXV0sIFsnYm94aEQnLCBbOTU3M11dLCBbJ2JveEhEJywgWzk1NzRdXSwgWydib3hodScsIFs5NTI0XV0sIFsnYm94SHUnLCBbOTU3NV1dLCBbJ2JveGhVJywgWzk1NzZdXSwgWydib3hIVScsIFs5NTc3XV0sIFsnYm94bWludXMnLCBbODg2M11dLCBbJ2JveHBsdXMnLCBbODg2Ml1dLCBbJ2JveHRpbWVzJywgWzg4NjRdXSwgWydib3h1bCcsIFs5NDk2XV0sIFsnYm94dUwnLCBbOTU2M11dLCBbJ2JveFVsJywgWzk1NjRdXSwgWydib3hVTCcsIFs5NTY1XV0sIFsnYm94dXInLCBbOTQ5Ml1dLCBbJ2JveHVSJywgWzk1NjBdXSwgWydib3hVcicsIFs5NTYxXV0sIFsnYm94VVInLCBbOTU2Ml1dLCBbJ2JveHYnLCBbOTQ3NF1dLCBbJ2JveFYnLCBbOTU1M11dLCBbJ2JveHZoJywgWzk1MzJdXSwgWydib3h2SCcsIFs5NTc4XV0sIFsnYm94VmgnLCBbOTU3OV1dLCBbJ2JveFZIJywgWzk1ODBdXSwgWydib3h2bCcsIFs5NTA4XV0sIFsnYm94dkwnLCBbOTU2OV1dLCBbJ2JveFZsJywgWzk1NzBdXSwgWydib3hWTCcsIFs5NTcxXV0sIFsnYm94dnInLCBbOTUwMF1dLCBbJ2JveHZSJywgWzk1NjZdXSwgWydib3hWcicsIFs5NTY3XV0sIFsnYm94VlInLCBbOTU2OF1dLCBbJ2JwcmltZScsIFs4MjQ1XV0sIFsnYnJldmUnLCBbNzI4XV0sIFsnQnJldmUnLCBbNzI4XV0sIFsnYnJ2YmFyJywgWzE2Nl1dLCBbJ2JzY3InLCBbMTE5OTkxXV0sIFsnQnNjcicsIFs4NDkyXV0sIFsnYnNlbWknLCBbODI3MV1dLCBbJ2JzaW0nLCBbODc2NV1dLCBbJ2JzaW1lJywgWzg5MDldXSwgWydic29sYicsIFsxMDY5M11dLCBbJ2Jzb2wnLCBbOTJdXSwgWydic29saHN1YicsIFsxMDE4NF1dLCBbJ2J1bGwnLCBbODIyNl1dLCBbJ2J1bGxldCcsIFs4MjI2XV0sIFsnYnVtcCcsIFs4NzgyXV0sIFsnYnVtcEUnLCBbMTA5MjZdXSwgWydidW1wZScsIFs4NzgzXV0sIFsnQnVtcGVxJywgWzg3ODJdXSwgWydidW1wZXEnLCBbODc4M11dLCBbJ0NhY3V0ZScsIFsyNjJdXSwgWydjYWN1dGUnLCBbMjYzXV0sIFsnY2FwYW5kJywgWzEwODIwXV0sIFsnY2FwYnJjdXAnLCBbMTA4MjVdXSwgWydjYXBjYXAnLCBbMTA4MjddXSwgWydjYXAnLCBbODc0NV1dLCBbJ0NhcCcsIFs4OTE0XV0sIFsnY2FwY3VwJywgWzEwODIzXV0sIFsnY2FwZG90JywgWzEwODE2XV0sIFsnQ2FwaXRhbERpZmZlcmVudGlhbEQnLCBbODUxN11dLCBbJ2NhcHMnLCBbODc0NSwgNjUwMjRdXSwgWydjYXJldCcsIFs4MjU3XV0sIFsnY2Fyb24nLCBbNzExXV0sIFsnQ2F5bGV5cycsIFs4NDkzXV0sIFsnY2NhcHMnLCBbMTA4MjldXSwgWydDY2Fyb24nLCBbMjY4XV0sIFsnY2Nhcm9uJywgWzI2OV1dLCBbJ0NjZWRpbCcsIFsxOTldXSwgWydjY2VkaWwnLCBbMjMxXV0sIFsnQ2NpcmMnLCBbMjY0XV0sIFsnY2NpcmMnLCBbMjY1XV0sIFsnQ2NvbmludCcsIFs4NzUyXV0sIFsnY2N1cHMnLCBbMTA4MjhdXSwgWydjY3Vwc3NtJywgWzEwODMyXV0sIFsnQ2RvdCcsIFsyNjZdXSwgWydjZG90JywgWzI2N11dLCBbJ2NlZGlsJywgWzE4NF1dLCBbJ0NlZGlsbGEnLCBbMTg0XV0sIFsnY2VtcHR5dicsIFsxMDY3NF1dLCBbJ2NlbnQnLCBbMTYyXV0sIFsnY2VudGVyZG90JywgWzE4M11dLCBbJ0NlbnRlckRvdCcsIFsxODNdXSwgWydjZnInLCBbMTIwMDk2XV0sIFsnQ2ZyJywgWzg0OTNdXSwgWydDSGN5JywgWzEwNjNdXSwgWydjaGN5JywgWzEwOTVdXSwgWydjaGVjaycsIFsxMDAwM11dLCBbJ2NoZWNrbWFyaycsIFsxMDAwM11dLCBbJ0NoaScsIFs5MzVdXSwgWydjaGknLCBbOTY3XV0sIFsnY2lyYycsIFs3MTBdXSwgWydjaXJjZXEnLCBbODc5MV1dLCBbJ2NpcmNsZWFycm93bGVmdCcsIFs4NjM0XV0sIFsnY2lyY2xlYXJyb3dyaWdodCcsIFs4NjM1XV0sIFsnY2lyY2xlZGFzdCcsIFs4ODU5XV0sIFsnY2lyY2xlZGNpcmMnLCBbODg1OF1dLCBbJ2NpcmNsZWRkYXNoJywgWzg4NjFdXSwgWydDaXJjbGVEb3QnLCBbODg1N11dLCBbJ2NpcmNsZWRSJywgWzE3NF1dLCBbJ2NpcmNsZWRTJywgWzk0MTZdXSwgWydDaXJjbGVNaW51cycsIFs4ODU0XV0sIFsnQ2lyY2xlUGx1cycsIFs4ODUzXV0sIFsnQ2lyY2xlVGltZXMnLCBbODg1NV1dLCBbJ2NpcicsIFs5Njc1XV0sIFsnY2lyRScsIFsxMDY5MV1dLCBbJ2NpcmUnLCBbODc5MV1dLCBbJ2NpcmZuaW50JywgWzEwNzY4XV0sIFsnY2lybWlkJywgWzEwOTkxXV0sIFsnY2lyc2NpcicsIFsxMDY5MF1dLCBbJ0Nsb2Nrd2lzZUNvbnRvdXJJbnRlZ3JhbCcsIFs4NzU0XV0sIFsnY2x1YnMnLCBbOTgyN11dLCBbJ2NsdWJzdWl0JywgWzk4MjddXSwgWydjb2xvbicsIFs1OF1dLCBbJ0NvbG9uJywgWzg3NTldXSwgWydDb2xvbmUnLCBbMTA4NjhdXSwgWydjb2xvbmUnLCBbODc4OF1dLCBbJ2NvbG9uZXEnLCBbODc4OF1dLCBbJ2NvbW1hJywgWzQ0XV0sIFsnY29tbWF0JywgWzY0XV0sIFsnY29tcCcsIFs4NzA1XV0sIFsnY29tcGZuJywgWzg3MjhdXSwgWydjb21wbGVtZW50JywgWzg3MDVdXSwgWydjb21wbGV4ZXMnLCBbODQ1MF1dLCBbJ2NvbmcnLCBbODc3M11dLCBbJ2Nvbmdkb3QnLCBbMTA4NjFdXSwgWydDb25ncnVlbnQnLCBbODgwMV1dLCBbJ2NvbmludCcsIFs4NzUwXV0sIFsnQ29uaW50JywgWzg3NTFdXSwgWydDb250b3VySW50ZWdyYWwnLCBbODc1MF1dLCBbJ2NvcGYnLCBbMTIwMTQ4XV0sIFsnQ29wZicsIFs4NDUwXV0sIFsnY29wcm9kJywgWzg3MjBdXSwgWydDb3Byb2R1Y3QnLCBbODcyMF1dLCBbJ2NvcHknLCBbMTY5XV0sIFsnQ09QWScsIFsxNjldXSwgWydjb3B5c3InLCBbODQ3MV1dLCBbJ0NvdW50ZXJDbG9ja3dpc2VDb250b3VySW50ZWdyYWwnLCBbODc1NV1dLCBbJ2NyYXJyJywgWzg2MjldXSwgWydjcm9zcycsIFsxMDAwN11dLCBbJ0Nyb3NzJywgWzEwNzk5XV0sIFsnQ3NjcicsIFsxMTk5NjZdXSwgWydjc2NyJywgWzExOTk5Ml1dLCBbJ2NzdWInLCBbMTA5NTldXSwgWydjc3ViZScsIFsxMDk2MV1dLCBbJ2NzdXAnLCBbMTA5NjBdXSwgWydjc3VwZScsIFsxMDk2Ml1dLCBbJ2N0ZG90JywgWzg5NDNdXSwgWydjdWRhcnJsJywgWzEwNTUyXV0sIFsnY3VkYXJycicsIFsxMDU0OV1dLCBbJ2N1ZXByJywgWzg5MjZdXSwgWydjdWVzYycsIFs4OTI3XV0sIFsnY3VsYXJyJywgWzg2MzBdXSwgWydjdWxhcnJwJywgWzEwNTU3XV0sIFsnY3VwYnJjYXAnLCBbMTA4MjRdXSwgWydjdXBjYXAnLCBbMTA4MjJdXSwgWydDdXBDYXAnLCBbODc4MV1dLCBbJ2N1cCcsIFs4NzQ2XV0sIFsnQ3VwJywgWzg5MTVdXSwgWydjdXBjdXAnLCBbMTA4MjZdXSwgWydjdXBkb3QnLCBbODg0NV1dLCBbJ2N1cG9yJywgWzEwODIxXV0sIFsnY3VwcycsIFs4NzQ2LCA2NTAyNF1dLCBbJ2N1cmFycicsIFs4NjMxXV0sIFsnY3VyYXJybScsIFsxMDU1Nl1dLCBbJ2N1cmx5ZXFwcmVjJywgWzg5MjZdXSwgWydjdXJseWVxc3VjYycsIFs4OTI3XV0sIFsnY3VybHl2ZWUnLCBbODkxMF1dLCBbJ2N1cmx5d2VkZ2UnLCBbODkxMV1dLCBbJ2N1cnJlbicsIFsxNjRdXSwgWydjdXJ2ZWFycm93bGVmdCcsIFs4NjMwXV0sIFsnY3VydmVhcnJvd3JpZ2h0JywgWzg2MzFdXSwgWydjdXZlZScsIFs4OTEwXV0sIFsnY3V3ZWQnLCBbODkxMV1dLCBbJ2N3Y29uaW50JywgWzg3NTRdXSwgWydjd2ludCcsIFs4NzUzXV0sIFsnY3lsY3R5JywgWzkwMDVdXSwgWydkYWdnZXInLCBbODIyNF1dLCBbJ0RhZ2dlcicsIFs4MjI1XV0sIFsnZGFsZXRoJywgWzg1MDRdXSwgWydkYXJyJywgWzg1OTVdXSwgWydEYXJyJywgWzg2MDldXSwgWydkQXJyJywgWzg2NTldXSwgWydkYXNoJywgWzgyMDhdXSwgWydEYXNodicsIFsxMDk4MF1dLCBbJ2Rhc2h2JywgWzg4NjddXSwgWydkYmthcm93JywgWzEwNTExXV0sIFsnZGJsYWMnLCBbNzMzXV0sIFsnRGNhcm9uJywgWzI3MF1dLCBbJ2RjYXJvbicsIFsyNzFdXSwgWydEY3knLCBbMTA0NF1dLCBbJ2RjeScsIFsxMDc2XV0sIFsnZGRhZ2dlcicsIFs4MjI1XV0sIFsnZGRhcnInLCBbODY1MF1dLCBbJ0REJywgWzg1MTddXSwgWydkZCcsIFs4NTE4XV0sIFsnRERvdHJhaGQnLCBbMTA1MTNdXSwgWydkZG90c2VxJywgWzEwODcxXV0sIFsnZGVnJywgWzE3Nl1dLCBbJ0RlbCcsIFs4NzExXV0sIFsnRGVsdGEnLCBbOTE2XV0sIFsnZGVsdGEnLCBbOTQ4XV0sIFsnZGVtcHR5dicsIFsxMDY3M11dLCBbJ2RmaXNodCcsIFsxMDYyM11dLCBbJ0RmcicsIFsxMjAwNzFdXSwgWydkZnInLCBbMTIwMDk3XV0sIFsnZEhhcicsIFsxMDU5N11dLCBbJ2RoYXJsJywgWzg2NDNdXSwgWydkaGFycicsIFs4NjQyXV0sIFsnRGlhY3JpdGljYWxBY3V0ZScsIFsxODBdXSwgWydEaWFjcml0aWNhbERvdCcsIFs3MjldXSwgWydEaWFjcml0aWNhbERvdWJsZUFjdXRlJywgWzczM11dLCBbJ0RpYWNyaXRpY2FsR3JhdmUnLCBbOTZdXSwgWydEaWFjcml0aWNhbFRpbGRlJywgWzczMl1dLCBbJ2RpYW0nLCBbODkwMF1dLCBbJ2RpYW1vbmQnLCBbODkwMF1dLCBbJ0RpYW1vbmQnLCBbODkwMF1dLCBbJ2RpYW1vbmRzdWl0JywgWzk4MzBdXSwgWydkaWFtcycsIFs5ODMwXV0sIFsnZGllJywgWzE2OF1dLCBbJ0RpZmZlcmVudGlhbEQnLCBbODUxOF1dLCBbJ2RpZ2FtbWEnLCBbOTg5XV0sIFsnZGlzaW4nLCBbODk0Nl1dLCBbJ2RpdicsIFsyNDddXSwgWydkaXZpZGUnLCBbMjQ3XV0sIFsnZGl2aWRlb250aW1lcycsIFs4OTAzXV0sIFsnZGl2b254JywgWzg5MDNdXSwgWydESmN5JywgWzEwMjZdXSwgWydkamN5JywgWzExMDZdXSwgWydkbGNvcm4nLCBbODk5MF1dLCBbJ2RsY3JvcCcsIFs4OTczXV0sIFsnZG9sbGFyJywgWzM2XV0sIFsnRG9wZicsIFsxMjAxMjNdXSwgWydkb3BmJywgWzEyMDE0OV1dLCBbJ0RvdCcsIFsxNjhdXSwgWydkb3QnLCBbNzI5XV0sIFsnRG90RG90JywgWzg0MTJdXSwgWydkb3RlcScsIFs4Nzg0XV0sIFsnZG90ZXFkb3QnLCBbODc4NV1dLCBbJ0RvdEVxdWFsJywgWzg3ODRdXSwgWydkb3RtaW51cycsIFs4NzYwXV0sIFsnZG90cGx1cycsIFs4NzI0XV0sIFsnZG90c3F1YXJlJywgWzg4NjVdXSwgWydkb3VibGViYXJ3ZWRnZScsIFs4OTY2XV0sIFsnRG91YmxlQ29udG91ckludGVncmFsJywgWzg3NTFdXSwgWydEb3VibGVEb3QnLCBbMTY4XV0sIFsnRG91YmxlRG93bkFycm93JywgWzg2NTldXSwgWydEb3VibGVMZWZ0QXJyb3cnLCBbODY1Nl1dLCBbJ0RvdWJsZUxlZnRSaWdodEFycm93JywgWzg2NjBdXSwgWydEb3VibGVMZWZ0VGVlJywgWzEwOTgwXV0sIFsnRG91YmxlTG9uZ0xlZnRBcnJvdycsIFsxMDIzMl1dLCBbJ0RvdWJsZUxvbmdMZWZ0UmlnaHRBcnJvdycsIFsxMDIzNF1dLCBbJ0RvdWJsZUxvbmdSaWdodEFycm93JywgWzEwMjMzXV0sIFsnRG91YmxlUmlnaHRBcnJvdycsIFs4NjU4XV0sIFsnRG91YmxlUmlnaHRUZWUnLCBbODg3Ml1dLCBbJ0RvdWJsZVVwQXJyb3cnLCBbODY1N11dLCBbJ0RvdWJsZVVwRG93bkFycm93JywgWzg2NjFdXSwgWydEb3VibGVWZXJ0aWNhbEJhcicsIFs4NzQxXV0sIFsnRG93bkFycm93QmFyJywgWzEwNTE1XV0sIFsnZG93bmFycm93JywgWzg1OTVdXSwgWydEb3duQXJyb3cnLCBbODU5NV1dLCBbJ0Rvd25hcnJvdycsIFs4NjU5XV0sIFsnRG93bkFycm93VXBBcnJvdycsIFs4NjkzXV0sIFsnRG93bkJyZXZlJywgWzc4NV1dLCBbJ2Rvd25kb3duYXJyb3dzJywgWzg2NTBdXSwgWydkb3duaGFycG9vbmxlZnQnLCBbODY0M11dLCBbJ2Rvd25oYXJwb29ucmlnaHQnLCBbODY0Ml1dLCBbJ0Rvd25MZWZ0UmlnaHRWZWN0b3InLCBbMTA1NzZdXSwgWydEb3duTGVmdFRlZVZlY3RvcicsIFsxMDU5MF1dLCBbJ0Rvd25MZWZ0VmVjdG9yQmFyJywgWzEwNTgyXV0sIFsnRG93bkxlZnRWZWN0b3InLCBbODYzN11dLCBbJ0Rvd25SaWdodFRlZVZlY3RvcicsIFsxMDU5MV1dLCBbJ0Rvd25SaWdodFZlY3RvckJhcicsIFsxMDU4M11dLCBbJ0Rvd25SaWdodFZlY3RvcicsIFs4NjQxXV0sIFsnRG93blRlZUFycm93JywgWzg2MTVdXSwgWydEb3duVGVlJywgWzg4NjhdXSwgWydkcmJrYXJvdycsIFsxMDUxMl1dLCBbJ2RyY29ybicsIFs4OTkxXV0sIFsnZHJjcm9wJywgWzg5NzJdXSwgWydEc2NyJywgWzExOTk2N11dLCBbJ2RzY3InLCBbMTE5OTkzXV0sIFsnRFNjeScsIFsxMDI5XV0sIFsnZHNjeScsIFsxMTA5XV0sIFsnZHNvbCcsIFsxMDc0Ml1dLCBbJ0RzdHJvaycsIFsyNzJdXSwgWydkc3Ryb2snLCBbMjczXV0sIFsnZHRkb3QnLCBbODk0NV1dLCBbJ2R0cmknLCBbOTY2M11dLCBbJ2R0cmlmJywgWzk2NjJdXSwgWydkdWFycicsIFs4NjkzXV0sIFsnZHVoYXInLCBbMTA2MDddXSwgWydkd2FuZ2xlJywgWzEwNjYyXV0sIFsnRFpjeScsIFsxMDM5XV0sIFsnZHpjeScsIFsxMTE5XV0sIFsnZHppZ3JhcnInLCBbMTAyMzldXSwgWydFYWN1dGUnLCBbMjAxXV0sIFsnZWFjdXRlJywgWzIzM11dLCBbJ2Vhc3RlcicsIFsxMDg2Ml1dLCBbJ0VjYXJvbicsIFsyODJdXSwgWydlY2Fyb24nLCBbMjgzXV0sIFsnRWNpcmMnLCBbMjAyXV0sIFsnZWNpcmMnLCBbMjM0XV0sIFsnZWNpcicsIFs4NzkwXV0sIFsnZWNvbG9uJywgWzg3ODldXSwgWydFY3knLCBbMTA2OV1dLCBbJ2VjeScsIFsxMTAxXV0sIFsnZUREb3QnLCBbMTA4NzFdXSwgWydFZG90JywgWzI3OF1dLCBbJ2Vkb3QnLCBbMjc5XV0sIFsnZURvdCcsIFs4Nzg1XV0sIFsnZWUnLCBbODUxOV1dLCBbJ2VmRG90JywgWzg3ODZdXSwgWydFZnInLCBbMTIwMDcyXV0sIFsnZWZyJywgWzEyMDA5OF1dLCBbJ2VnJywgWzEwOTA2XV0sIFsnRWdyYXZlJywgWzIwMF1dLCBbJ2VncmF2ZScsIFsyMzJdXSwgWydlZ3MnLCBbMTA5MDJdXSwgWydlZ3Nkb3QnLCBbMTA5MDRdXSwgWydlbCcsIFsxMDkwNV1dLCBbJ0VsZW1lbnQnLCBbODcxMl1dLCBbJ2VsaW50ZXJzJywgWzkxOTFdXSwgWydlbGwnLCBbODQ2N11dLCBbJ2VscycsIFsxMDkwMV1dLCBbJ2Vsc2RvdCcsIFsxMDkwM11dLCBbJ0VtYWNyJywgWzI3NF1dLCBbJ2VtYWNyJywgWzI3NV1dLCBbJ2VtcHR5JywgWzg3MDldXSwgWydlbXB0eXNldCcsIFs4NzA5XV0sIFsnRW1wdHlTbWFsbFNxdWFyZScsIFs5NzIzXV0sIFsnZW1wdHl2JywgWzg3MDldXSwgWydFbXB0eVZlcnlTbWFsbFNxdWFyZScsIFs5NjQzXV0sIFsnZW1zcDEzJywgWzgxOTZdXSwgWydlbXNwMTQnLCBbODE5N11dLCBbJ2Vtc3AnLCBbODE5NV1dLCBbJ0VORycsIFszMzBdXSwgWydlbmcnLCBbMzMxXV0sIFsnZW5zcCcsIFs4MTk0XV0sIFsnRW9nb24nLCBbMjgwXV0sIFsnZW9nb24nLCBbMjgxXV0sIFsnRW9wZicsIFsxMjAxMjRdXSwgWydlb3BmJywgWzEyMDE1MF1dLCBbJ2VwYXInLCBbODkxN11dLCBbJ2VwYXJzbCcsIFsxMDcyM11dLCBbJ2VwbHVzJywgWzEwODY1XV0sIFsnZXBzaScsIFs5NDldXSwgWydFcHNpbG9uJywgWzkxN11dLCBbJ2Vwc2lsb24nLCBbOTQ5XV0sIFsnZXBzaXYnLCBbMTAxM11dLCBbJ2VxY2lyYycsIFs4NzkwXV0sIFsnZXFjb2xvbicsIFs4Nzg5XV0sIFsnZXFzaW0nLCBbODc3MF1dLCBbJ2Vxc2xhbnRndHInLCBbMTA5MDJdXSwgWydlcXNsYW50bGVzcycsIFsxMDkwMV1dLCBbJ0VxdWFsJywgWzEwODY5XV0sIFsnZXF1YWxzJywgWzYxXV0sIFsnRXF1YWxUaWxkZScsIFs4NzcwXV0sIFsnZXF1ZXN0JywgWzg3OTldXSwgWydFcXVpbGlicml1bScsIFs4NjUyXV0sIFsnZXF1aXYnLCBbODgwMV1dLCBbJ2VxdWl2REQnLCBbMTA4NzJdXSwgWydlcXZwYXJzbCcsIFsxMDcyNV1dLCBbJ2VyYXJyJywgWzEwNjA5XV0sIFsnZXJEb3QnLCBbODc4N11dLCBbJ2VzY3InLCBbODQ5NV1dLCBbJ0VzY3InLCBbODQ5Nl1dLCBbJ2VzZG90JywgWzg3ODRdXSwgWydFc2ltJywgWzEwODY3XV0sIFsnZXNpbScsIFs4NzcwXV0sIFsnRXRhJywgWzkxOV1dLCBbJ2V0YScsIFs5NTFdXSwgWydFVEgnLCBbMjA4XV0sIFsnZXRoJywgWzI0MF1dLCBbJ0V1bWwnLCBbMjAzXV0sIFsnZXVtbCcsIFsyMzVdXSwgWydldXJvJywgWzgzNjRdXSwgWydleGNsJywgWzMzXV0sIFsnZXhpc3QnLCBbODcwN11dLCBbJ0V4aXN0cycsIFs4NzA3XV0sIFsnZXhwZWN0YXRpb24nLCBbODQ5Nl1dLCBbJ2V4cG9uZW50aWFsZScsIFs4NTE5XV0sIFsnRXhwb25lbnRpYWxFJywgWzg1MTldXSwgWydmYWxsaW5nZG90c2VxJywgWzg3ODZdXSwgWydGY3knLCBbMTA2MF1dLCBbJ2ZjeScsIFsxMDkyXV0sIFsnZmVtYWxlJywgWzk3OTJdXSwgWydmZmlsaWcnLCBbNjQyNTldXSwgWydmZmxpZycsIFs2NDI1Nl1dLCBbJ2ZmbGxpZycsIFs2NDI2MF1dLCBbJ0ZmcicsIFsxMjAwNzNdXSwgWydmZnInLCBbMTIwMDk5XV0sIFsnZmlsaWcnLCBbNjQyNTddXSwgWydGaWxsZWRTbWFsbFNxdWFyZScsIFs5NzI0XV0sIFsnRmlsbGVkVmVyeVNtYWxsU3F1YXJlJywgWzk2NDJdXSwgWydmamxpZycsIFsxMDIsIDEwNl1dLCBbJ2ZsYXQnLCBbOTgzN11dLCBbJ2ZsbGlnJywgWzY0MjU4XV0sIFsnZmx0bnMnLCBbOTY0OV1dLCBbJ2Zub2YnLCBbNDAyXV0sIFsnRm9wZicsIFsxMjAxMjVdXSwgWydmb3BmJywgWzEyMDE1MV1dLCBbJ2ZvcmFsbCcsIFs4NzA0XV0sIFsnRm9yQWxsJywgWzg3MDRdXSwgWydmb3JrJywgWzg5MTZdXSwgWydmb3JrdicsIFsxMDk2OV1dLCBbJ0ZvdXJpZXJ0cmYnLCBbODQ5N11dLCBbJ2ZwYXJ0aW50JywgWzEwNzY1XV0sIFsnZnJhYzEyJywgWzE4OV1dLCBbJ2ZyYWMxMycsIFs4NTMxXV0sIFsnZnJhYzE0JywgWzE4OF1dLCBbJ2ZyYWMxNScsIFs4NTMzXV0sIFsnZnJhYzE2JywgWzg1MzddXSwgWydmcmFjMTgnLCBbODUzOV1dLCBbJ2ZyYWMyMycsIFs4NTMyXV0sIFsnZnJhYzI1JywgWzg1MzRdXSwgWydmcmFjMzQnLCBbMTkwXV0sIFsnZnJhYzM1JywgWzg1MzVdXSwgWydmcmFjMzgnLCBbODU0MF1dLCBbJ2ZyYWM0NScsIFs4NTM2XV0sIFsnZnJhYzU2JywgWzg1MzhdXSwgWydmcmFjNTgnLCBbODU0MV1dLCBbJ2ZyYWM3OCcsIFs4NTQyXV0sIFsnZnJhc2wnLCBbODI2MF1dLCBbJ2Zyb3duJywgWzg5OTRdXSwgWydmc2NyJywgWzExOTk5NV1dLCBbJ0ZzY3InLCBbODQ5N11dLCBbJ2dhY3V0ZScsIFs1MDFdXSwgWydHYW1tYScsIFs5MTVdXSwgWydnYW1tYScsIFs5NDddXSwgWydHYW1tYWQnLCBbOTg4XV0sIFsnZ2FtbWFkJywgWzk4OV1dLCBbJ2dhcCcsIFsxMDg4Nl1dLCBbJ0dicmV2ZScsIFsyODZdXSwgWydnYnJldmUnLCBbMjg3XV0sIFsnR2NlZGlsJywgWzI5MF1dLCBbJ0djaXJjJywgWzI4NF1dLCBbJ2djaXJjJywgWzI4NV1dLCBbJ0djeScsIFsxMDQzXV0sIFsnZ2N5JywgWzEwNzVdXSwgWydHZG90JywgWzI4OF1dLCBbJ2dkb3QnLCBbMjg5XV0sIFsnZ2UnLCBbODgwNV1dLCBbJ2dFJywgWzg4MDddXSwgWydnRWwnLCBbMTA4OTJdXSwgWydnZWwnLCBbODkyM11dLCBbJ2dlcScsIFs4ODA1XV0sIFsnZ2VxcScsIFs4ODA3XV0sIFsnZ2Vxc2xhbnQnLCBbMTA4NzhdXSwgWydnZXNjYycsIFsxMDkyMV1dLCBbJ2dlcycsIFsxMDg3OF1dLCBbJ2dlc2RvdCcsIFsxMDg4MF1dLCBbJ2dlc2RvdG8nLCBbMTA4ODJdXSwgWydnZXNkb3RvbCcsIFsxMDg4NF1dLCBbJ2dlc2wnLCBbODkyMywgNjUwMjRdXSwgWydnZXNsZXMnLCBbMTA5MDBdXSwgWydHZnInLCBbMTIwMDc0XV0sIFsnZ2ZyJywgWzEyMDEwMF1dLCBbJ2dnJywgWzg4MTFdXSwgWydHZycsIFs4OTIxXV0sIFsnZ2dnJywgWzg5MjFdXSwgWydnaW1lbCcsIFs4NTAzXV0sIFsnR0pjeScsIFsxMDI3XV0sIFsnZ2pjeScsIFsxMTA3XV0sIFsnZ2xhJywgWzEwOTE3XV0sIFsnZ2wnLCBbODgyM11dLCBbJ2dsRScsIFsxMDg5OF1dLCBbJ2dsaicsIFsxMDkxNl1dLCBbJ2duYXAnLCBbMTA4OTBdXSwgWydnbmFwcHJveCcsIFsxMDg5MF1dLCBbJ2duZScsIFsxMDg4OF1dLCBbJ2duRScsIFs4ODA5XV0sIFsnZ25lcScsIFsxMDg4OF1dLCBbJ2duZXFxJywgWzg4MDldXSwgWydnbnNpbScsIFs4OTM1XV0sIFsnR29wZicsIFsxMjAxMjZdXSwgWydnb3BmJywgWzEyMDE1Ml1dLCBbJ2dyYXZlJywgWzk2XV0sIFsnR3JlYXRlckVxdWFsJywgWzg4MDVdXSwgWydHcmVhdGVyRXF1YWxMZXNzJywgWzg5MjNdXSwgWydHcmVhdGVyRnVsbEVxdWFsJywgWzg4MDddXSwgWydHcmVhdGVyR3JlYXRlcicsIFsxMDkxNF1dLCBbJ0dyZWF0ZXJMZXNzJywgWzg4MjNdXSwgWydHcmVhdGVyU2xhbnRFcXVhbCcsIFsxMDg3OF1dLCBbJ0dyZWF0ZXJUaWxkZScsIFs4ODE5XV0sIFsnR3NjcicsIFsxMTk5NzBdXSwgWydnc2NyJywgWzg0NThdXSwgWydnc2ltJywgWzg4MTldXSwgWydnc2ltZScsIFsxMDg5NF1dLCBbJ2dzaW1sJywgWzEwODk2XV0sIFsnZ3RjYycsIFsxMDkxOV1dLCBbJ2d0Y2lyJywgWzEwODc0XV0sIFsnZ3QnLCBbNjJdXSwgWydHVCcsIFs2Ml1dLCBbJ0d0JywgWzg4MTFdXSwgWydndGRvdCcsIFs4OTE5XV0sIFsnZ3RsUGFyJywgWzEwNjQ1XV0sIFsnZ3RxdWVzdCcsIFsxMDg3Nl1dLCBbJ2d0cmFwcHJveCcsIFsxMDg4Nl1dLCBbJ2d0cmFycicsIFsxMDYxNl1dLCBbJ2d0cmRvdCcsIFs4OTE5XV0sIFsnZ3RyZXFsZXNzJywgWzg5MjNdXSwgWydndHJlcXFsZXNzJywgWzEwODkyXV0sIFsnZ3RybGVzcycsIFs4ODIzXV0sIFsnZ3Ryc2ltJywgWzg4MTldXSwgWydndmVydG5lcXEnLCBbODgwOSwgNjUwMjRdXSwgWydndm5FJywgWzg4MDksIDY1MDI0XV0sIFsnSGFjZWsnLCBbNzExXV0sIFsnaGFpcnNwJywgWzgyMDJdXSwgWydoYWxmJywgWzE4OV1dLCBbJ2hhbWlsdCcsIFs4NDU5XV0sIFsnSEFSRGN5JywgWzEwNjZdXSwgWydoYXJkY3knLCBbMTA5OF1dLCBbJ2hhcnJjaXInLCBbMTA1NjhdXSwgWydoYXJyJywgWzg1OTZdXSwgWydoQXJyJywgWzg2NjBdXSwgWydoYXJydycsIFs4NjIxXV0sIFsnSGF0JywgWzk0XV0sIFsnaGJhcicsIFs4NDYzXV0sIFsnSGNpcmMnLCBbMjkyXV0sIFsnaGNpcmMnLCBbMjkzXV0sIFsnaGVhcnRzJywgWzk4MjldXSwgWydoZWFydHN1aXQnLCBbOTgyOV1dLCBbJ2hlbGxpcCcsIFs4MjMwXV0sIFsnaGVyY29uJywgWzg4ODldXSwgWydoZnInLCBbMTIwMTAxXV0sIFsnSGZyJywgWzg0NjBdXSwgWydIaWxiZXJ0U3BhY2UnLCBbODQ1OV1dLCBbJ2hrc2Vhcm93JywgWzEwNTMzXV0sIFsnaGtzd2Fyb3cnLCBbMTA1MzRdXSwgWydob2FycicsIFs4NzAzXV0sIFsnaG9tdGh0JywgWzg3NjNdXSwgWydob29rbGVmdGFycm93JywgWzg2MTddXSwgWydob29rcmlnaHRhcnJvdycsIFs4NjE4XV0sIFsnaG9wZicsIFsxMjAxNTNdXSwgWydIb3BmJywgWzg0NjFdXSwgWydob3JiYXInLCBbODIxM11dLCBbJ0hvcml6b250YWxMaW5lJywgWzk0NzJdXSwgWydoc2NyJywgWzExOTk5N11dLCBbJ0hzY3InLCBbODQ1OV1dLCBbJ2hzbGFzaCcsIFs4NDYzXV0sIFsnSHN0cm9rJywgWzI5NF1dLCBbJ2hzdHJvaycsIFsyOTVdXSwgWydIdW1wRG93bkh1bXAnLCBbODc4Ml1dLCBbJ0h1bXBFcXVhbCcsIFs4NzgzXV0sIFsnaHlidWxsJywgWzgyNTldXSwgWydoeXBoZW4nLCBbODIwOF1dLCBbJ0lhY3V0ZScsIFsyMDVdXSwgWydpYWN1dGUnLCBbMjM3XV0sIFsnaWMnLCBbODI5MV1dLCBbJ0ljaXJjJywgWzIwNl1dLCBbJ2ljaXJjJywgWzIzOF1dLCBbJ0ljeScsIFsxMDQ4XV0sIFsnaWN5JywgWzEwODBdXSwgWydJZG90JywgWzMwNF1dLCBbJ0lFY3knLCBbMTA0NV1dLCBbJ2llY3knLCBbMTA3N11dLCBbJ2lleGNsJywgWzE2MV1dLCBbJ2lmZicsIFs4NjYwXV0sIFsnaWZyJywgWzEyMDEwMl1dLCBbJ0lmcicsIFs4NDY1XV0sIFsnSWdyYXZlJywgWzIwNF1dLCBbJ2lncmF2ZScsIFsyMzZdXSwgWydpaScsIFs4NTIwXV0sIFsnaWlpaW50JywgWzEwNzY0XV0sIFsnaWlpbnQnLCBbODc0OV1dLCBbJ2lpbmZpbicsIFsxMDcxNl1dLCBbJ2lpb3RhJywgWzg0ODldXSwgWydJSmxpZycsIFszMDZdXSwgWydpamxpZycsIFszMDddXSwgWydJbWFjcicsIFsyOThdXSwgWydpbWFjcicsIFsyOTldXSwgWydpbWFnZScsIFs4NDY1XV0sIFsnSW1hZ2luYXJ5SScsIFs4NTIwXV0sIFsnaW1hZ2xpbmUnLCBbODQ2NF1dLCBbJ2ltYWdwYXJ0JywgWzg0NjVdXSwgWydpbWF0aCcsIFszMDVdXSwgWydJbScsIFs4NDY1XV0sIFsnaW1vZicsIFs4ODg3XV0sIFsnaW1wZWQnLCBbNDM3XV0sIFsnSW1wbGllcycsIFs4NjU4XV0sIFsnaW5jYXJlJywgWzg0NTNdXSwgWydpbicsIFs4NzEyXV0sIFsnaW5maW4nLCBbODczNF1dLCBbJ2luZmludGllJywgWzEwNzE3XV0sIFsnaW5vZG90JywgWzMwNV1dLCBbJ2ludGNhbCcsIFs4ODkwXV0sIFsnaW50JywgWzg3NDddXSwgWydJbnQnLCBbODc0OF1dLCBbJ2ludGVnZXJzJywgWzg0ODRdXSwgWydJbnRlZ3JhbCcsIFs4NzQ3XV0sIFsnaW50ZXJjYWwnLCBbODg5MF1dLCBbJ0ludGVyc2VjdGlvbicsIFs4ODk4XV0sIFsnaW50bGFyaGsnLCBbMTA3NzVdXSwgWydpbnRwcm9kJywgWzEwODEyXV0sIFsnSW52aXNpYmxlQ29tbWEnLCBbODI5MV1dLCBbJ0ludmlzaWJsZVRpbWVzJywgWzgyOTBdXSwgWydJT2N5JywgWzEwMjVdXSwgWydpb2N5JywgWzExMDVdXSwgWydJb2dvbicsIFszMDJdXSwgWydpb2dvbicsIFszMDNdXSwgWydJb3BmJywgWzEyMDEyOF1dLCBbJ2lvcGYnLCBbMTIwMTU0XV0sIFsnSW90YScsIFs5MjFdXSwgWydpb3RhJywgWzk1M11dLCBbJ2lwcm9kJywgWzEwODEyXV0sIFsnaXF1ZXN0JywgWzE5MV1dLCBbJ2lzY3InLCBbMTE5OTk4XV0sIFsnSXNjcicsIFs4NDY0XV0sIFsnaXNpbicsIFs4NzEyXV0sIFsnaXNpbmRvdCcsIFs4OTQ5XV0sIFsnaXNpbkUnLCBbODk1M11dLCBbJ2lzaW5zJywgWzg5NDhdXSwgWydpc2luc3YnLCBbODk0N11dLCBbJ2lzaW52JywgWzg3MTJdXSwgWydpdCcsIFs4MjkwXV0sIFsnSXRpbGRlJywgWzI5Nl1dLCBbJ2l0aWxkZScsIFsyOTddXSwgWydJdWtjeScsIFsxMDMwXV0sIFsnaXVrY3knLCBbMTExMF1dLCBbJ0l1bWwnLCBbMjA3XV0sIFsnaXVtbCcsIFsyMzldXSwgWydKY2lyYycsIFszMDhdXSwgWydqY2lyYycsIFszMDldXSwgWydKY3knLCBbMTA0OV1dLCBbJ2pjeScsIFsxMDgxXV0sIFsnSmZyJywgWzEyMDA3N11dLCBbJ2pmcicsIFsxMjAxMDNdXSwgWydqbWF0aCcsIFs1NjddXSwgWydKb3BmJywgWzEyMDEyOV1dLCBbJ2pvcGYnLCBbMTIwMTU1XV0sIFsnSnNjcicsIFsxMTk5NzNdXSwgWydqc2NyJywgWzExOTk5OV1dLCBbJ0pzZXJjeScsIFsxMDMyXV0sIFsnanNlcmN5JywgWzExMTJdXSwgWydKdWtjeScsIFsxMDI4XV0sIFsnanVrY3knLCBbMTEwOF1dLCBbJ0thcHBhJywgWzkyMl1dLCBbJ2thcHBhJywgWzk1NF1dLCBbJ2thcHBhdicsIFsxMDA4XV0sIFsnS2NlZGlsJywgWzMxMF1dLCBbJ2tjZWRpbCcsIFszMTFdXSwgWydLY3knLCBbMTA1MF1dLCBbJ2tjeScsIFsxMDgyXV0sIFsnS2ZyJywgWzEyMDA3OF1dLCBbJ2tmcicsIFsxMjAxMDRdXSwgWydrZ3JlZW4nLCBbMzEyXV0sIFsnS0hjeScsIFsxMDYxXV0sIFsna2hjeScsIFsxMDkzXV0sIFsnS0pjeScsIFsxMDM2XV0sIFsna2pjeScsIFsxMTE2XV0sIFsnS29wZicsIFsxMjAxMzBdXSwgWydrb3BmJywgWzEyMDE1Nl1dLCBbJ0tzY3InLCBbMTE5OTc0XV0sIFsna3NjcicsIFsxMjAwMDBdXSwgWydsQWFycicsIFs4NjY2XV0sIFsnTGFjdXRlJywgWzMxM11dLCBbJ2xhY3V0ZScsIFszMTRdXSwgWydsYWVtcHR5dicsIFsxMDY3Nl1dLCBbJ2xhZ3JhbicsIFs4NDY2XV0sIFsnTGFtYmRhJywgWzkyM11dLCBbJ2xhbWJkYScsIFs5NTVdXSwgWydsYW5nJywgWzEwMjE2XV0sIFsnTGFuZycsIFsxMDIxOF1dLCBbJ2xhbmdkJywgWzEwNjQxXV0sIFsnbGFuZ2xlJywgWzEwMjE2XV0sIFsnbGFwJywgWzEwODg1XV0sIFsnTGFwbGFjZXRyZicsIFs4NDY2XV0sIFsnbGFxdW8nLCBbMTcxXV0sIFsnbGFycmInLCBbODY3Nl1dLCBbJ2xhcnJiZnMnLCBbMTA1MjddXSwgWydsYXJyJywgWzg1OTJdXSwgWydMYXJyJywgWzg2MDZdXSwgWydsQXJyJywgWzg2NTZdXSwgWydsYXJyZnMnLCBbMTA1MjVdXSwgWydsYXJyaGsnLCBbODYxN11dLCBbJ2xhcnJscCcsIFs4NjE5XV0sIFsnbGFycnBsJywgWzEwNTUzXV0sIFsnbGFycnNpbScsIFsxMDYxMV1dLCBbJ2xhcnJ0bCcsIFs4NjEwXV0sIFsnbGF0YWlsJywgWzEwNTIxXV0sIFsnbEF0YWlsJywgWzEwNTIzXV0sIFsnbGF0JywgWzEwOTIzXV0sIFsnbGF0ZScsIFsxMDkyNV1dLCBbJ2xhdGVzJywgWzEwOTI1LCA2NTAyNF1dLCBbJ2xiYXJyJywgWzEwNTA4XV0sIFsnbEJhcnInLCBbMTA1MTBdXSwgWydsYmJyaycsIFsxMDA5OF1dLCBbJ2xicmFjZScsIFsxMjNdXSwgWydsYnJhY2snLCBbOTFdXSwgWydsYnJrZScsIFsxMDYzNV1dLCBbJ2xicmtzbGQnLCBbMTA2MzldXSwgWydsYnJrc2x1JywgWzEwNjM3XV0sIFsnTGNhcm9uJywgWzMxN11dLCBbJ2xjYXJvbicsIFszMThdXSwgWydMY2VkaWwnLCBbMzE1XV0sIFsnbGNlZGlsJywgWzMxNl1dLCBbJ2xjZWlsJywgWzg5NjhdXSwgWydsY3ViJywgWzEyM11dLCBbJ0xjeScsIFsxMDUxXV0sIFsnbGN5JywgWzEwODNdXSwgWydsZGNhJywgWzEwNTUwXV0sIFsnbGRxdW8nLCBbODIyMF1dLCBbJ2xkcXVvcicsIFs4MjIyXV0sIFsnbGRyZGhhcicsIFsxMDU5OV1dLCBbJ2xkcnVzaGFyJywgWzEwNTcxXV0sIFsnbGRzaCcsIFs4NjI2XV0sIFsnbGUnLCBbODgwNF1dLCBbJ2xFJywgWzg4MDZdXSwgWydMZWZ0QW5nbGVCcmFja2V0JywgWzEwMjE2XV0sIFsnTGVmdEFycm93QmFyJywgWzg2NzZdXSwgWydsZWZ0YXJyb3cnLCBbODU5Ml1dLCBbJ0xlZnRBcnJvdycsIFs4NTkyXV0sIFsnTGVmdGFycm93JywgWzg2NTZdXSwgWydMZWZ0QXJyb3dSaWdodEFycm93JywgWzg2NDZdXSwgWydsZWZ0YXJyb3d0YWlsJywgWzg2MTBdXSwgWydMZWZ0Q2VpbGluZycsIFs4OTY4XV0sIFsnTGVmdERvdWJsZUJyYWNrZXQnLCBbMTAyMTRdXSwgWydMZWZ0RG93blRlZVZlY3RvcicsIFsxMDU5M11dLCBbJ0xlZnREb3duVmVjdG9yQmFyJywgWzEwNTg1XV0sIFsnTGVmdERvd25WZWN0b3InLCBbODY0M11dLCBbJ0xlZnRGbG9vcicsIFs4OTcwXV0sIFsnbGVmdGhhcnBvb25kb3duJywgWzg2MzddXSwgWydsZWZ0aGFycG9vbnVwJywgWzg2MzZdXSwgWydsZWZ0bGVmdGFycm93cycsIFs4NjQ3XV0sIFsnbGVmdHJpZ2h0YXJyb3cnLCBbODU5Nl1dLCBbJ0xlZnRSaWdodEFycm93JywgWzg1OTZdXSwgWydMZWZ0cmlnaHRhcnJvdycsIFs4NjYwXV0sIFsnbGVmdHJpZ2h0YXJyb3dzJywgWzg2NDZdXSwgWydsZWZ0cmlnaHRoYXJwb29ucycsIFs4NjUxXV0sIFsnbGVmdHJpZ2h0c3F1aWdhcnJvdycsIFs4NjIxXV0sIFsnTGVmdFJpZ2h0VmVjdG9yJywgWzEwNTc0XV0sIFsnTGVmdFRlZUFycm93JywgWzg2MTJdXSwgWydMZWZ0VGVlJywgWzg4NjddXSwgWydMZWZ0VGVlVmVjdG9yJywgWzEwNTg2XV0sIFsnbGVmdHRocmVldGltZXMnLCBbODkwN11dLCBbJ0xlZnRUcmlhbmdsZUJhcicsIFsxMDcwM11dLCBbJ0xlZnRUcmlhbmdsZScsIFs4ODgyXV0sIFsnTGVmdFRyaWFuZ2xlRXF1YWwnLCBbODg4NF1dLCBbJ0xlZnRVcERvd25WZWN0b3InLCBbMTA1NzddXSwgWydMZWZ0VXBUZWVWZWN0b3InLCBbMTA1OTJdXSwgWydMZWZ0VXBWZWN0b3JCYXInLCBbMTA1ODRdXSwgWydMZWZ0VXBWZWN0b3InLCBbODYzOV1dLCBbJ0xlZnRWZWN0b3JCYXInLCBbMTA1NzhdXSwgWydMZWZ0VmVjdG9yJywgWzg2MzZdXSwgWydsRWcnLCBbMTA4OTFdXSwgWydsZWcnLCBbODkyMl1dLCBbJ2xlcScsIFs4ODA0XV0sIFsnbGVxcScsIFs4ODA2XV0sIFsnbGVxc2xhbnQnLCBbMTA4NzddXSwgWydsZXNjYycsIFsxMDkyMF1dLCBbJ2xlcycsIFsxMDg3N11dLCBbJ2xlc2RvdCcsIFsxMDg3OV1dLCBbJ2xlc2RvdG8nLCBbMTA4ODFdXSwgWydsZXNkb3RvcicsIFsxMDg4M11dLCBbJ2xlc2cnLCBbODkyMiwgNjUwMjRdXSwgWydsZXNnZXMnLCBbMTA4OTldXSwgWydsZXNzYXBwcm94JywgWzEwODg1XV0sIFsnbGVzc2RvdCcsIFs4OTE4XV0sIFsnbGVzc2VxZ3RyJywgWzg5MjJdXSwgWydsZXNzZXFxZ3RyJywgWzEwODkxXV0sIFsnTGVzc0VxdWFsR3JlYXRlcicsIFs4OTIyXV0sIFsnTGVzc0Z1bGxFcXVhbCcsIFs4ODA2XV0sIFsnTGVzc0dyZWF0ZXInLCBbODgyMl1dLCBbJ2xlc3NndHInLCBbODgyMl1dLCBbJ0xlc3NMZXNzJywgWzEwOTEzXV0sIFsnbGVzc3NpbScsIFs4ODE4XV0sIFsnTGVzc1NsYW50RXF1YWwnLCBbMTA4NzddXSwgWydMZXNzVGlsZGUnLCBbODgxOF1dLCBbJ2xmaXNodCcsIFsxMDYyMF1dLCBbJ2xmbG9vcicsIFs4OTcwXV0sIFsnTGZyJywgWzEyMDA3OV1dLCBbJ2xmcicsIFsxMjAxMDVdXSwgWydsZycsIFs4ODIyXV0sIFsnbGdFJywgWzEwODk3XV0sIFsnbEhhcicsIFsxMDU5NF1dLCBbJ2xoYXJkJywgWzg2MzddXSwgWydsaGFydScsIFs4NjM2XV0sIFsnbGhhcnVsJywgWzEwNjAyXV0sIFsnbGhibGsnLCBbOTYwNF1dLCBbJ0xKY3knLCBbMTAzM11dLCBbJ2xqY3knLCBbMTExM11dLCBbJ2xsYXJyJywgWzg2NDddXSwgWydsbCcsIFs4ODEwXV0sIFsnTGwnLCBbODkyMF1dLCBbJ2xsY29ybmVyJywgWzg5OTBdXSwgWydMbGVmdGFycm93JywgWzg2NjZdXSwgWydsbGhhcmQnLCBbMTA2MDNdXSwgWydsbHRyaScsIFs5NzIyXV0sIFsnTG1pZG90JywgWzMxOV1dLCBbJ2xtaWRvdCcsIFszMjBdXSwgWydsbW91c3RhY2hlJywgWzkxMzZdXSwgWydsbW91c3QnLCBbOTEzNl1dLCBbJ2xuYXAnLCBbMTA4ODldXSwgWydsbmFwcHJveCcsIFsxMDg4OV1dLCBbJ2xuZScsIFsxMDg4N11dLCBbJ2xuRScsIFs4ODA4XV0sIFsnbG5lcScsIFsxMDg4N11dLCBbJ2xuZXFxJywgWzg4MDhdXSwgWydsbnNpbScsIFs4OTM0XV0sIFsnbG9hbmcnLCBbMTAyMjBdXSwgWydsb2FycicsIFs4NzAxXV0sIFsnbG9icmsnLCBbMTAyMTRdXSwgWydsb25nbGVmdGFycm93JywgWzEwMjI5XV0sIFsnTG9uZ0xlZnRBcnJvdycsIFsxMDIyOV1dLCBbJ0xvbmdsZWZ0YXJyb3cnLCBbMTAyMzJdXSwgWydsb25nbGVmdHJpZ2h0YXJyb3cnLCBbMTAyMzFdXSwgWydMb25nTGVmdFJpZ2h0QXJyb3cnLCBbMTAyMzFdXSwgWydMb25nbGVmdHJpZ2h0YXJyb3cnLCBbMTAyMzRdXSwgWydsb25nbWFwc3RvJywgWzEwMjM2XV0sIFsnbG9uZ3JpZ2h0YXJyb3cnLCBbMTAyMzBdXSwgWydMb25nUmlnaHRBcnJvdycsIFsxMDIzMF1dLCBbJ0xvbmdyaWdodGFycm93JywgWzEwMjMzXV0sIFsnbG9vcGFycm93bGVmdCcsIFs4NjE5XV0sIFsnbG9vcGFycm93cmlnaHQnLCBbODYyMF1dLCBbJ2xvcGFyJywgWzEwNjI5XV0sIFsnTG9wZicsIFsxMjAxMzFdXSwgWydsb3BmJywgWzEyMDE1N11dLCBbJ2xvcGx1cycsIFsxMDc5N11dLCBbJ2xvdGltZXMnLCBbMTA4MDRdXSwgWydsb3dhc3QnLCBbODcyN11dLCBbJ2xvd2JhcicsIFs5NV1dLCBbJ0xvd2VyTGVmdEFycm93JywgWzg2MDFdXSwgWydMb3dlclJpZ2h0QXJyb3cnLCBbODYwMF1dLCBbJ2xveicsIFs5Njc0XV0sIFsnbG96ZW5nZScsIFs5Njc0XV0sIFsnbG96ZicsIFsxMDczMV1dLCBbJ2xwYXInLCBbNDBdXSwgWydscGFybHQnLCBbMTA2NDNdXSwgWydscmFycicsIFs4NjQ2XV0sIFsnbHJjb3JuZXInLCBbODk5MV1dLCBbJ2xyaGFyJywgWzg2NTFdXSwgWydscmhhcmQnLCBbMTA2MDVdXSwgWydscm0nLCBbODIwNl1dLCBbJ2xydHJpJywgWzg4OTVdXSwgWydsc2FxdW8nLCBbODI0OV1dLCBbJ2xzY3InLCBbMTIwMDAxXV0sIFsnTHNjcicsIFs4NDY2XV0sIFsnbHNoJywgWzg2MjRdXSwgWydMc2gnLCBbODYyNF1dLCBbJ2xzaW0nLCBbODgxOF1dLCBbJ2xzaW1lJywgWzEwODkzXV0sIFsnbHNpbWcnLCBbMTA4OTVdXSwgWydsc3FiJywgWzkxXV0sIFsnbHNxdW8nLCBbODIxNl1dLCBbJ2xzcXVvcicsIFs4MjE4XV0sIFsnTHN0cm9rJywgWzMyMV1dLCBbJ2xzdHJvaycsIFszMjJdXSwgWydsdGNjJywgWzEwOTE4XV0sIFsnbHRjaXInLCBbMTA4NzNdXSwgWydsdCcsIFs2MF1dLCBbJ0xUJywgWzYwXV0sIFsnTHQnLCBbODgxMF1dLCBbJ2x0ZG90JywgWzg5MThdXSwgWydsdGhyZWUnLCBbODkwN11dLCBbJ2x0aW1lcycsIFs4OTA1XV0sIFsnbHRsYXJyJywgWzEwNjE0XV0sIFsnbHRxdWVzdCcsIFsxMDg3NV1dLCBbJ2x0cmknLCBbOTY2N11dLCBbJ2x0cmllJywgWzg4ODRdXSwgWydsdHJpZicsIFs5NjY2XV0sIFsnbHRyUGFyJywgWzEwNjQ2XV0sIFsnbHVyZHNoYXInLCBbMTA1NzBdXSwgWydsdXJ1aGFyJywgWzEwNTk4XV0sIFsnbHZlcnRuZXFxJywgWzg4MDgsIDY1MDI0XV0sIFsnbHZuRScsIFs4ODA4LCA2NTAyNF1dLCBbJ21hY3InLCBbMTc1XV0sIFsnbWFsZScsIFs5Nzk0XV0sIFsnbWFsdCcsIFsxMDAxNl1dLCBbJ21hbHRlc2UnLCBbMTAwMTZdXSwgWydNYXAnLCBbMTA1MDFdXSwgWydtYXAnLCBbODYxNF1dLCBbJ21hcHN0bycsIFs4NjE0XV0sIFsnbWFwc3RvZG93bicsIFs4NjE1XV0sIFsnbWFwc3RvbGVmdCcsIFs4NjEyXV0sIFsnbWFwc3RvdXAnLCBbODYxM11dLCBbJ21hcmtlcicsIFs5NjQ2XV0sIFsnbWNvbW1hJywgWzEwNzkzXV0sIFsnTWN5JywgWzEwNTJdXSwgWydtY3knLCBbMTA4NF1dLCBbJ21kYXNoJywgWzgyMTJdXSwgWydtRERvdCcsIFs4NzYyXV0sIFsnbWVhc3VyZWRhbmdsZScsIFs4NzM3XV0sIFsnTWVkaXVtU3BhY2UnLCBbODI4N11dLCBbJ01lbGxpbnRyZicsIFs4NDk5XV0sIFsnTWZyJywgWzEyMDA4MF1dLCBbJ21mcicsIFsxMjAxMDZdXSwgWydtaG8nLCBbODQ4N11dLCBbJ21pY3JvJywgWzE4MV1dLCBbJ21pZGFzdCcsIFs0Ml1dLCBbJ21pZGNpcicsIFsxMDk5Ml1dLCBbJ21pZCcsIFs4NzM5XV0sIFsnbWlkZG90JywgWzE4M11dLCBbJ21pbnVzYicsIFs4ODYzXV0sIFsnbWludXMnLCBbODcyMl1dLCBbJ21pbnVzZCcsIFs4NzYwXV0sIFsnbWludXNkdScsIFsxMDc5NF1dLCBbJ01pbnVzUGx1cycsIFs4NzIzXV0sIFsnbWxjcCcsIFsxMDk3MV1dLCBbJ21sZHInLCBbODIzMF1dLCBbJ21ucGx1cycsIFs4NzIzXV0sIFsnbW9kZWxzJywgWzg4NzFdXSwgWydNb3BmJywgWzEyMDEzMl1dLCBbJ21vcGYnLCBbMTIwMTU4XV0sIFsnbXAnLCBbODcyM11dLCBbJ21zY3InLCBbMTIwMDAyXV0sIFsnTXNjcicsIFs4NDk5XV0sIFsnbXN0cG9zJywgWzg3NjZdXSwgWydNdScsIFs5MjRdXSwgWydtdScsIFs5NTZdXSwgWydtdWx0aW1hcCcsIFs4ODg4XV0sIFsnbXVtYXAnLCBbODg4OF1dLCBbJ25hYmxhJywgWzg3MTFdXSwgWydOYWN1dGUnLCBbMzIzXV0sIFsnbmFjdXRlJywgWzMyNF1dLCBbJ25hbmcnLCBbODczNiwgODQwMl1dLCBbJ25hcCcsIFs4Nzc3XV0sIFsnbmFwRScsIFsxMDg2NCwgODI0XV0sIFsnbmFwaWQnLCBbODc3OSwgODI0XV0sIFsnbmFwb3MnLCBbMzI5XV0sIFsnbmFwcHJveCcsIFs4Nzc3XV0sIFsnbmF0dXJhbCcsIFs5ODM4XV0sIFsnbmF0dXJhbHMnLCBbODQ2OV1dLCBbJ25hdHVyJywgWzk4MzhdXSwgWyduYnNwJywgWzE2MF1dLCBbJ25idW1wJywgWzg3ODIsIDgyNF1dLCBbJ25idW1wZScsIFs4NzgzLCA4MjRdXSwgWyduY2FwJywgWzEwODE5XV0sIFsnTmNhcm9uJywgWzMyN11dLCBbJ25jYXJvbicsIFszMjhdXSwgWydOY2VkaWwnLCBbMzI1XV0sIFsnbmNlZGlsJywgWzMyNl1dLCBbJ25jb25nJywgWzg3NzVdXSwgWyduY29uZ2RvdCcsIFsxMDg2MSwgODI0XV0sIFsnbmN1cCcsIFsxMDgxOF1dLCBbJ05jeScsIFsxMDUzXV0sIFsnbmN5JywgWzEwODVdXSwgWyduZGFzaCcsIFs4MjExXV0sIFsnbmVhcmhrJywgWzEwNTMyXV0sIFsnbmVhcnInLCBbODU5OV1dLCBbJ25lQXJyJywgWzg2NjNdXSwgWyduZWFycm93JywgWzg1OTldXSwgWyduZScsIFs4ODAwXV0sIFsnbmVkb3QnLCBbODc4NCwgODI0XV0sIFsnTmVnYXRpdmVNZWRpdW1TcGFjZScsIFs4MjAzXV0sIFsnTmVnYXRpdmVUaGlja1NwYWNlJywgWzgyMDNdXSwgWydOZWdhdGl2ZVRoaW5TcGFjZScsIFs4MjAzXV0sIFsnTmVnYXRpdmVWZXJ5VGhpblNwYWNlJywgWzgyMDNdXSwgWyduZXF1aXYnLCBbODgwMl1dLCBbJ25lc2VhcicsIFsxMDUzNl1dLCBbJ25lc2ltJywgWzg3NzAsIDgyNF1dLCBbJ05lc3RlZEdyZWF0ZXJHcmVhdGVyJywgWzg4MTFdXSwgWydOZXN0ZWRMZXNzTGVzcycsIFs4ODEwXV0sIFsnbmV4aXN0JywgWzg3MDhdXSwgWyduZXhpc3RzJywgWzg3MDhdXSwgWydOZnInLCBbMTIwMDgxXV0sIFsnbmZyJywgWzEyMDEwN11dLCBbJ25nRScsIFs4ODA3LCA4MjRdXSwgWyduZ2UnLCBbODgxN11dLCBbJ25nZXEnLCBbODgxN11dLCBbJ25nZXFxJywgWzg4MDcsIDgyNF1dLCBbJ25nZXFzbGFudCcsIFsxMDg3OCwgODI0XV0sIFsnbmdlcycsIFsxMDg3OCwgODI0XV0sIFsnbkdnJywgWzg5MjEsIDgyNF1dLCBbJ25nc2ltJywgWzg4MjFdXSwgWyduR3QnLCBbODgxMSwgODQwMl1dLCBbJ25ndCcsIFs4ODE1XV0sIFsnbmd0cicsIFs4ODE1XV0sIFsnbkd0dicsIFs4ODExLCA4MjRdXSwgWyduaGFycicsIFs4NjIyXV0sIFsnbmhBcnInLCBbODY1NF1dLCBbJ25ocGFyJywgWzEwOTk0XV0sIFsnbmknLCBbODcxNV1dLCBbJ25pcycsIFs4OTU2XV0sIFsnbmlzZCcsIFs4OTU0XV0sIFsnbml2JywgWzg3MTVdXSwgWydOSmN5JywgWzEwMzRdXSwgWyduamN5JywgWzExMTRdXSwgWydubGFycicsIFs4NjAyXV0sIFsnbmxBcnInLCBbODY1M11dLCBbJ25sZHInLCBbODIyOV1dLCBbJ25sRScsIFs4ODA2LCA4MjRdXSwgWydubGUnLCBbODgxNl1dLCBbJ25sZWZ0YXJyb3cnLCBbODYwMl1dLCBbJ25MZWZ0YXJyb3cnLCBbODY1M11dLCBbJ25sZWZ0cmlnaHRhcnJvdycsIFs4NjIyXV0sIFsnbkxlZnRyaWdodGFycm93JywgWzg2NTRdXSwgWydubGVxJywgWzg4MTZdXSwgWydubGVxcScsIFs4ODA2LCA4MjRdXSwgWydubGVxc2xhbnQnLCBbMTA4NzcsIDgyNF1dLCBbJ25sZXMnLCBbMTA4NzcsIDgyNF1dLCBbJ25sZXNzJywgWzg4MTRdXSwgWyduTGwnLCBbODkyMCwgODI0XV0sIFsnbmxzaW0nLCBbODgyMF1dLCBbJ25MdCcsIFs4ODEwLCA4NDAyXV0sIFsnbmx0JywgWzg4MTRdXSwgWydubHRyaScsIFs4OTM4XV0sIFsnbmx0cmllJywgWzg5NDBdXSwgWyduTHR2JywgWzg4MTAsIDgyNF1dLCBbJ25taWQnLCBbODc0MF1dLCBbJ05vQnJlYWsnLCBbODI4OF1dLCBbJ05vbkJyZWFraW5nU3BhY2UnLCBbMTYwXV0sIFsnbm9wZicsIFsxMjAxNTldXSwgWydOb3BmJywgWzg0NjldXSwgWydOb3QnLCBbMTA5ODhdXSwgWydub3QnLCBbMTcyXV0sIFsnTm90Q29uZ3J1ZW50JywgWzg4MDJdXSwgWydOb3RDdXBDYXAnLCBbODgxM11dLCBbJ05vdERvdWJsZVZlcnRpY2FsQmFyJywgWzg3NDJdXSwgWydOb3RFbGVtZW50JywgWzg3MTNdXSwgWydOb3RFcXVhbCcsIFs4ODAwXV0sIFsnTm90RXF1YWxUaWxkZScsIFs4NzcwLCA4MjRdXSwgWydOb3RFeGlzdHMnLCBbODcwOF1dLCBbJ05vdEdyZWF0ZXInLCBbODgxNV1dLCBbJ05vdEdyZWF0ZXJFcXVhbCcsIFs4ODE3XV0sIFsnTm90R3JlYXRlckZ1bGxFcXVhbCcsIFs4ODA3LCA4MjRdXSwgWydOb3RHcmVhdGVyR3JlYXRlcicsIFs4ODExLCA4MjRdXSwgWydOb3RHcmVhdGVyTGVzcycsIFs4ODI1XV0sIFsnTm90R3JlYXRlclNsYW50RXF1YWwnLCBbMTA4NzgsIDgyNF1dLCBbJ05vdEdyZWF0ZXJUaWxkZScsIFs4ODIxXV0sIFsnTm90SHVtcERvd25IdW1wJywgWzg3ODIsIDgyNF1dLCBbJ05vdEh1bXBFcXVhbCcsIFs4NzgzLCA4MjRdXSwgWydub3RpbicsIFs4NzEzXV0sIFsnbm90aW5kb3QnLCBbODk0OSwgODI0XV0sIFsnbm90aW5FJywgWzg5NTMsIDgyNF1dLCBbJ25vdGludmEnLCBbODcxM11dLCBbJ25vdGludmInLCBbODk1MV1dLCBbJ25vdGludmMnLCBbODk1MF1dLCBbJ05vdExlZnRUcmlhbmdsZUJhcicsIFsxMDcwMywgODI0XV0sIFsnTm90TGVmdFRyaWFuZ2xlJywgWzg5MzhdXSwgWydOb3RMZWZ0VHJpYW5nbGVFcXVhbCcsIFs4OTQwXV0sIFsnTm90TGVzcycsIFs4ODE0XV0sIFsnTm90TGVzc0VxdWFsJywgWzg4MTZdXSwgWydOb3RMZXNzR3JlYXRlcicsIFs4ODI0XV0sIFsnTm90TGVzc0xlc3MnLCBbODgxMCwgODI0XV0sIFsnTm90TGVzc1NsYW50RXF1YWwnLCBbMTA4NzcsIDgyNF1dLCBbJ05vdExlc3NUaWxkZScsIFs4ODIwXV0sIFsnTm90TmVzdGVkR3JlYXRlckdyZWF0ZXInLCBbMTA5MTQsIDgyNF1dLCBbJ05vdE5lc3RlZExlc3NMZXNzJywgWzEwOTEzLCA4MjRdXSwgWydub3RuaScsIFs4NzE2XV0sIFsnbm90bml2YScsIFs4NzE2XV0sIFsnbm90bml2YicsIFs4OTU4XV0sIFsnbm90bml2YycsIFs4OTU3XV0sIFsnTm90UHJlY2VkZXMnLCBbODgzMl1dLCBbJ05vdFByZWNlZGVzRXF1YWwnLCBbMTA5MjcsIDgyNF1dLCBbJ05vdFByZWNlZGVzU2xhbnRFcXVhbCcsIFs4OTI4XV0sIFsnTm90UmV2ZXJzZUVsZW1lbnQnLCBbODcxNl1dLCBbJ05vdFJpZ2h0VHJpYW5nbGVCYXInLCBbMTA3MDQsIDgyNF1dLCBbJ05vdFJpZ2h0VHJpYW5nbGUnLCBbODkzOV1dLCBbJ05vdFJpZ2h0VHJpYW5nbGVFcXVhbCcsIFs4OTQxXV0sIFsnTm90U3F1YXJlU3Vic2V0JywgWzg4NDcsIDgyNF1dLCBbJ05vdFNxdWFyZVN1YnNldEVxdWFsJywgWzg5MzBdXSwgWydOb3RTcXVhcmVTdXBlcnNldCcsIFs4ODQ4LCA4MjRdXSwgWydOb3RTcXVhcmVTdXBlcnNldEVxdWFsJywgWzg5MzFdXSwgWydOb3RTdWJzZXQnLCBbODgzNCwgODQwMl1dLCBbJ05vdFN1YnNldEVxdWFsJywgWzg4NDBdXSwgWydOb3RTdWNjZWVkcycsIFs4ODMzXV0sIFsnTm90U3VjY2VlZHNFcXVhbCcsIFsxMDkyOCwgODI0XV0sIFsnTm90U3VjY2VlZHNTbGFudEVxdWFsJywgWzg5MjldXSwgWydOb3RTdWNjZWVkc1RpbGRlJywgWzg4MzEsIDgyNF1dLCBbJ05vdFN1cGVyc2V0JywgWzg4MzUsIDg0MDJdXSwgWydOb3RTdXBlcnNldEVxdWFsJywgWzg4NDFdXSwgWydOb3RUaWxkZScsIFs4NzY5XV0sIFsnTm90VGlsZGVFcXVhbCcsIFs4NzcyXV0sIFsnTm90VGlsZGVGdWxsRXF1YWwnLCBbODc3NV1dLCBbJ05vdFRpbGRlVGlsZGUnLCBbODc3N11dLCBbJ05vdFZlcnRpY2FsQmFyJywgWzg3NDBdXSwgWyducGFyYWxsZWwnLCBbODc0Ml1dLCBbJ25wYXInLCBbODc0Ml1dLCBbJ25wYXJzbCcsIFsxMTAwNSwgODQyMV1dLCBbJ25wYXJ0JywgWzg3MDYsIDgyNF1dLCBbJ25wb2xpbnQnLCBbMTA3NzJdXSwgWyducHInLCBbODgzMl1dLCBbJ25wcmN1ZScsIFs4OTI4XV0sIFsnbnByZWMnLCBbODgzMl1dLCBbJ25wcmVjZXEnLCBbMTA5MjcsIDgyNF1dLCBbJ25wcmUnLCBbMTA5MjcsIDgyNF1dLCBbJ25yYXJyYycsIFsxMDU0NywgODI0XV0sIFsnbnJhcnInLCBbODYwM11dLCBbJ25yQXJyJywgWzg2NTVdXSwgWyducmFycncnLCBbODYwNSwgODI0XV0sIFsnbnJpZ2h0YXJyb3cnLCBbODYwM11dLCBbJ25SaWdodGFycm93JywgWzg2NTVdXSwgWyducnRyaScsIFs4OTM5XV0sIFsnbnJ0cmllJywgWzg5NDFdXSwgWyduc2MnLCBbODgzM11dLCBbJ25zY2N1ZScsIFs4OTI5XV0sIFsnbnNjZScsIFsxMDkyOCwgODI0XV0sIFsnTnNjcicsIFsxMTk5NzddXSwgWyduc2NyJywgWzEyMDAwM11dLCBbJ25zaG9ydG1pZCcsIFs4NzQwXV0sIFsnbnNob3J0cGFyYWxsZWwnLCBbODc0Ml1dLCBbJ25zaW0nLCBbODc2OV1dLCBbJ25zaW1lJywgWzg3NzJdXSwgWyduc2ltZXEnLCBbODc3Ml1dLCBbJ25zbWlkJywgWzg3NDBdXSwgWyduc3BhcicsIFs4NzQyXV0sIFsnbnNxc3ViZScsIFs4OTMwXV0sIFsnbnNxc3VwZScsIFs4OTMxXV0sIFsnbnN1YicsIFs4ODM2XV0sIFsnbnN1YkUnLCBbMTA5NDksIDgyNF1dLCBbJ25zdWJlJywgWzg4NDBdXSwgWyduc3Vic2V0JywgWzg4MzQsIDg0MDJdXSwgWyduc3Vic2V0ZXEnLCBbODg0MF1dLCBbJ25zdWJzZXRlcXEnLCBbMTA5NDksIDgyNF1dLCBbJ25zdWNjJywgWzg4MzNdXSwgWyduc3VjY2VxJywgWzEwOTI4LCA4MjRdXSwgWyduc3VwJywgWzg4MzddXSwgWyduc3VwRScsIFsxMDk1MCwgODI0XV0sIFsnbnN1cGUnLCBbODg0MV1dLCBbJ25zdXBzZXQnLCBbODgzNSwgODQwMl1dLCBbJ25zdXBzZXRlcScsIFs4ODQxXV0sIFsnbnN1cHNldGVxcScsIFsxMDk1MCwgODI0XV0sIFsnbnRnbCcsIFs4ODI1XV0sIFsnTnRpbGRlJywgWzIwOV1dLCBbJ250aWxkZScsIFsyNDFdXSwgWydudGxnJywgWzg4MjRdXSwgWydudHJpYW5nbGVsZWZ0JywgWzg5MzhdXSwgWydudHJpYW5nbGVsZWZ0ZXEnLCBbODk0MF1dLCBbJ250cmlhbmdsZXJpZ2h0JywgWzg5MzldXSwgWydudHJpYW5nbGVyaWdodGVxJywgWzg5NDFdXSwgWydOdScsIFs5MjVdXSwgWydudScsIFs5NTddXSwgWydudW0nLCBbMzVdXSwgWydudW1lcm8nLCBbODQ3MF1dLCBbJ251bXNwJywgWzgxOTldXSwgWydudmFwJywgWzg3ODEsIDg0MDJdXSwgWydudmRhc2gnLCBbODg3Nl1dLCBbJ252RGFzaCcsIFs4ODc3XV0sIFsnblZkYXNoJywgWzg4NzhdXSwgWyduVkRhc2gnLCBbODg3OV1dLCBbJ252Z2UnLCBbODgwNSwgODQwMl1dLCBbJ252Z3QnLCBbNjIsIDg0MDJdXSwgWydudkhhcnInLCBbMTA1MDBdXSwgWydudmluZmluJywgWzEwNzE4XV0sIFsnbnZsQXJyJywgWzEwNDk4XV0sIFsnbnZsZScsIFs4ODA0LCA4NDAyXV0sIFsnbnZsdCcsIFs2MCwgODQwMl1dLCBbJ252bHRyaWUnLCBbODg4NCwgODQwMl1dLCBbJ252ckFycicsIFsxMDQ5OV1dLCBbJ252cnRyaWUnLCBbODg4NSwgODQwMl1dLCBbJ252c2ltJywgWzg3NjQsIDg0MDJdXSwgWydud2FyaGsnLCBbMTA1MzFdXSwgWydud2FycicsIFs4NTk4XV0sIFsnbndBcnInLCBbODY2Ml1dLCBbJ253YXJyb3cnLCBbODU5OF1dLCBbJ253bmVhcicsIFsxMDUzNV1dLCBbJ09hY3V0ZScsIFsyMTFdXSwgWydvYWN1dGUnLCBbMjQzXV0sIFsnb2FzdCcsIFs4ODU5XV0sIFsnT2NpcmMnLCBbMjEyXV0sIFsnb2NpcmMnLCBbMjQ0XV0sIFsnb2NpcicsIFs4ODU4XV0sIFsnT2N5JywgWzEwNTRdXSwgWydvY3knLCBbMTA4Nl1dLCBbJ29kYXNoJywgWzg4NjFdXSwgWydPZGJsYWMnLCBbMzM2XV0sIFsnb2RibGFjJywgWzMzN11dLCBbJ29kaXYnLCBbMTA4MDhdXSwgWydvZG90JywgWzg4NTddXSwgWydvZHNvbGQnLCBbMTA2ODRdXSwgWydPRWxpZycsIFszMzhdXSwgWydvZWxpZycsIFszMzldXSwgWydvZmNpcicsIFsxMDY4N11dLCBbJ09mcicsIFsxMjAwODJdXSwgWydvZnInLCBbMTIwMTA4XV0sIFsnb2dvbicsIFs3MzFdXSwgWydPZ3JhdmUnLCBbMjEwXV0sIFsnb2dyYXZlJywgWzI0Ml1dLCBbJ29ndCcsIFsxMDY4OV1dLCBbJ29oYmFyJywgWzEwNjc3XV0sIFsnb2htJywgWzkzN11dLCBbJ29pbnQnLCBbODc1MF1dLCBbJ29sYXJyJywgWzg2MzRdXSwgWydvbGNpcicsIFsxMDY4Nl1dLCBbJ29sY3Jvc3MnLCBbMTA2ODNdXSwgWydvbGluZScsIFs4MjU0XV0sIFsnb2x0JywgWzEwNjg4XV0sIFsnT21hY3InLCBbMzMyXV0sIFsnb21hY3InLCBbMzMzXV0sIFsnT21lZ2EnLCBbOTM3XV0sIFsnb21lZ2EnLCBbOTY5XV0sIFsnT21pY3JvbicsIFs5MjddXSwgWydvbWljcm9uJywgWzk1OV1dLCBbJ29taWQnLCBbMTA2NzhdXSwgWydvbWludXMnLCBbODg1NF1dLCBbJ09vcGYnLCBbMTIwMTM0XV0sIFsnb29wZicsIFsxMjAxNjBdXSwgWydvcGFyJywgWzEwNjc5XV0sIFsnT3BlbkN1cmx5RG91YmxlUXVvdGUnLCBbODIyMF1dLCBbJ09wZW5DdXJseVF1b3RlJywgWzgyMTZdXSwgWydvcGVycCcsIFsxMDY4MV1dLCBbJ29wbHVzJywgWzg4NTNdXSwgWydvcmFycicsIFs4NjM1XV0sIFsnT3InLCBbMTA4MzZdXSwgWydvcicsIFs4NzQ0XV0sIFsnb3JkJywgWzEwODQ1XV0sIFsnb3JkZXInLCBbODUwMF1dLCBbJ29yZGVyb2YnLCBbODUwMF1dLCBbJ29yZGYnLCBbMTcwXV0sIFsnb3JkbScsIFsxODZdXSwgWydvcmlnb2YnLCBbODg4Nl1dLCBbJ29yb3InLCBbMTA4MzhdXSwgWydvcnNsb3BlJywgWzEwODM5XV0sIFsnb3J2JywgWzEwODQzXV0sIFsnb1MnLCBbOTQxNl1dLCBbJ09zY3InLCBbMTE5OTc4XV0sIFsnb3NjcicsIFs4NTAwXV0sIFsnT3NsYXNoJywgWzIxNl1dLCBbJ29zbGFzaCcsIFsyNDhdXSwgWydvc29sJywgWzg4NTZdXSwgWydPdGlsZGUnLCBbMjEzXV0sIFsnb3RpbGRlJywgWzI0NV1dLCBbJ290aW1lc2FzJywgWzEwODA2XV0sIFsnT3RpbWVzJywgWzEwODA3XV0sIFsnb3RpbWVzJywgWzg4NTVdXSwgWydPdW1sJywgWzIxNF1dLCBbJ291bWwnLCBbMjQ2XV0sIFsnb3ZiYXInLCBbOTAyMV1dLCBbJ092ZXJCYXInLCBbODI1NF1dLCBbJ092ZXJCcmFjZScsIFs5MTgyXV0sIFsnT3ZlckJyYWNrZXQnLCBbOTE0MF1dLCBbJ092ZXJQYXJlbnRoZXNpcycsIFs5MTgwXV0sIFsncGFyYScsIFsxODJdXSwgWydwYXJhbGxlbCcsIFs4NzQxXV0sIFsncGFyJywgWzg3NDFdXSwgWydwYXJzaW0nLCBbMTA5OTVdXSwgWydwYXJzbCcsIFsxMTAwNV1dLCBbJ3BhcnQnLCBbODcwNl1dLCBbJ1BhcnRpYWxEJywgWzg3MDZdXSwgWydQY3knLCBbMTA1NV1dLCBbJ3BjeScsIFsxMDg3XV0sIFsncGVyY250JywgWzM3XV0sIFsncGVyaW9kJywgWzQ2XV0sIFsncGVybWlsJywgWzgyNDBdXSwgWydwZXJwJywgWzg4NjldXSwgWydwZXJ0ZW5rJywgWzgyNDFdXSwgWydQZnInLCBbMTIwMDgzXV0sIFsncGZyJywgWzEyMDEwOV1dLCBbJ1BoaScsIFs5MzRdXSwgWydwaGknLCBbOTY2XV0sIFsncGhpdicsIFs5ODFdXSwgWydwaG1tYXQnLCBbODQ5OV1dLCBbJ3Bob25lJywgWzk3NDJdXSwgWydQaScsIFs5MjhdXSwgWydwaScsIFs5NjBdXSwgWydwaXRjaGZvcmsnLCBbODkxNl1dLCBbJ3BpdicsIFs5ODJdXSwgWydwbGFuY2snLCBbODQ2M11dLCBbJ3BsYW5ja2gnLCBbODQ2Ml1dLCBbJ3BsYW5rdicsIFs4NDYzXV0sIFsncGx1c2FjaXInLCBbMTA3ODddXSwgWydwbHVzYicsIFs4ODYyXV0sIFsncGx1c2NpcicsIFsxMDc4Nl1dLCBbJ3BsdXMnLCBbNDNdXSwgWydwbHVzZG8nLCBbODcyNF1dLCBbJ3BsdXNkdScsIFsxMDc4OV1dLCBbJ3BsdXNlJywgWzEwODY2XV0sIFsnUGx1c01pbnVzJywgWzE3N11dLCBbJ3BsdXNtbicsIFsxNzddXSwgWydwbHVzc2ltJywgWzEwNzkwXV0sIFsncGx1c3R3bycsIFsxMDc5MV1dLCBbJ3BtJywgWzE3N11dLCBbJ1BvaW5jYXJlcGxhbmUnLCBbODQ2MF1dLCBbJ3BvaW50aW50JywgWzEwNzczXV0sIFsncG9wZicsIFsxMjAxNjFdXSwgWydQb3BmJywgWzg0NzNdXSwgWydwb3VuZCcsIFsxNjNdXSwgWydwcmFwJywgWzEwOTM1XV0sIFsnUHInLCBbMTA5MzldXSwgWydwcicsIFs4ODI2XV0sIFsncHJjdWUnLCBbODgyOF1dLCBbJ3ByZWNhcHByb3gnLCBbMTA5MzVdXSwgWydwcmVjJywgWzg4MjZdXSwgWydwcmVjY3VybHllcScsIFs4ODI4XV0sIFsnUHJlY2VkZXMnLCBbODgyNl1dLCBbJ1ByZWNlZGVzRXF1YWwnLCBbMTA5MjddXSwgWydQcmVjZWRlc1NsYW50RXF1YWwnLCBbODgyOF1dLCBbJ1ByZWNlZGVzVGlsZGUnLCBbODgzMF1dLCBbJ3ByZWNlcScsIFsxMDkyN11dLCBbJ3ByZWNuYXBwcm94JywgWzEwOTM3XV0sIFsncHJlY25lcXEnLCBbMTA5MzNdXSwgWydwcmVjbnNpbScsIFs4OTM2XV0sIFsncHJlJywgWzEwOTI3XV0sIFsncHJFJywgWzEwOTMxXV0sIFsncHJlY3NpbScsIFs4ODMwXV0sIFsncHJpbWUnLCBbODI0Ml1dLCBbJ1ByaW1lJywgWzgyNDNdXSwgWydwcmltZXMnLCBbODQ3M11dLCBbJ3BybmFwJywgWzEwOTM3XV0sIFsncHJuRScsIFsxMDkzM11dLCBbJ3BybnNpbScsIFs4OTM2XV0sIFsncHJvZCcsIFs4NzE5XV0sIFsnUHJvZHVjdCcsIFs4NzE5XV0sIFsncHJvZmFsYXInLCBbOTAwNl1dLCBbJ3Byb2ZsaW5lJywgWzg5NzhdXSwgWydwcm9mc3VyZicsIFs4OTc5XV0sIFsncHJvcCcsIFs4NzMzXV0sIFsnUHJvcG9ydGlvbmFsJywgWzg3MzNdXSwgWydQcm9wb3J0aW9uJywgWzg3NTldXSwgWydwcm9wdG8nLCBbODczM11dLCBbJ3Byc2ltJywgWzg4MzBdXSwgWydwcnVyZWwnLCBbODg4MF1dLCBbJ1BzY3InLCBbMTE5OTc5XV0sIFsncHNjcicsIFsxMjAwMDVdXSwgWydQc2knLCBbOTM2XV0sIFsncHNpJywgWzk2OF1dLCBbJ3B1bmNzcCcsIFs4MjAwXV0sIFsnUWZyJywgWzEyMDA4NF1dLCBbJ3FmcicsIFsxMjAxMTBdXSwgWydxaW50JywgWzEwNzY0XV0sIFsncW9wZicsIFsxMjAxNjJdXSwgWydRb3BmJywgWzg0NzRdXSwgWydxcHJpbWUnLCBbODI3OV1dLCBbJ1FzY3InLCBbMTE5OTgwXV0sIFsncXNjcicsIFsxMjAwMDZdXSwgWydxdWF0ZXJuaW9ucycsIFs4NDYxXV0sIFsncXVhdGludCcsIFsxMDc3NF1dLCBbJ3F1ZXN0JywgWzYzXV0sIFsncXVlc3RlcScsIFs4Nzk5XV0sIFsncXVvdCcsIFszNF1dLCBbJ1FVT1QnLCBbMzRdXSwgWydyQWFycicsIFs4NjY3XV0sIFsncmFjZScsIFs4NzY1LCA4MTddXSwgWydSYWN1dGUnLCBbMzQwXV0sIFsncmFjdXRlJywgWzM0MV1dLCBbJ3JhZGljJywgWzg3MzBdXSwgWydyYWVtcHR5dicsIFsxMDY3NV1dLCBbJ3JhbmcnLCBbMTAyMTddXSwgWydSYW5nJywgWzEwMjE5XV0sIFsncmFuZ2QnLCBbMTA2NDJdXSwgWydyYW5nZScsIFsxMDY2MV1dLCBbJ3JhbmdsZScsIFsxMDIxN11dLCBbJ3JhcXVvJywgWzE4N11dLCBbJ3JhcnJhcCcsIFsxMDYxM11dLCBbJ3JhcnJiJywgWzg2NzddXSwgWydyYXJyYmZzJywgWzEwNTI4XV0sIFsncmFycmMnLCBbMTA1NDddXSwgWydyYXJyJywgWzg1OTRdXSwgWydSYXJyJywgWzg2MDhdXSwgWydyQXJyJywgWzg2NThdXSwgWydyYXJyZnMnLCBbMTA1MjZdXSwgWydyYXJyaGsnLCBbODYxOF1dLCBbJ3JhcnJscCcsIFs4NjIwXV0sIFsncmFycnBsJywgWzEwNTY1XV0sIFsncmFycnNpbScsIFsxMDYxMl1dLCBbJ1JhcnJ0bCcsIFsxMDUxOF1dLCBbJ3JhcnJ0bCcsIFs4NjExXV0sIFsncmFycncnLCBbODYwNV1dLCBbJ3JhdGFpbCcsIFsxMDUyMl1dLCBbJ3JBdGFpbCcsIFsxMDUyNF1dLCBbJ3JhdGlvJywgWzg3NThdXSwgWydyYXRpb25hbHMnLCBbODQ3NF1dLCBbJ3JiYXJyJywgWzEwNTA5XV0sIFsnckJhcnInLCBbMTA1MTFdXSwgWydSQmFycicsIFsxMDUxMl1dLCBbJ3JiYnJrJywgWzEwMDk5XV0sIFsncmJyYWNlJywgWzEyNV1dLCBbJ3JicmFjaycsIFs5M11dLCBbJ3JicmtlJywgWzEwNjM2XV0sIFsncmJya3NsZCcsIFsxMDYzOF1dLCBbJ3JicmtzbHUnLCBbMTA2NDBdXSwgWydSY2Fyb24nLCBbMzQ0XV0sIFsncmNhcm9uJywgWzM0NV1dLCBbJ1JjZWRpbCcsIFszNDJdXSwgWydyY2VkaWwnLCBbMzQzXV0sIFsncmNlaWwnLCBbODk2OV1dLCBbJ3JjdWInLCBbMTI1XV0sIFsnUmN5JywgWzEwNTZdXSwgWydyY3knLCBbMTA4OF1dLCBbJ3JkY2EnLCBbMTA1NTFdXSwgWydyZGxkaGFyJywgWzEwNjAxXV0sIFsncmRxdW8nLCBbODIyMV1dLCBbJ3JkcXVvcicsIFs4MjIxXV0sIFsnQ2xvc2VDdXJseURvdWJsZVF1b3RlJywgWzgyMjFdXSwgWydyZHNoJywgWzg2MjddXSwgWydyZWFsJywgWzg0NzZdXSwgWydyZWFsaW5lJywgWzg0NzVdXSwgWydyZWFscGFydCcsIFs4NDc2XV0sIFsncmVhbHMnLCBbODQ3N11dLCBbJ1JlJywgWzg0NzZdXSwgWydyZWN0JywgWzk2NDVdXSwgWydyZWcnLCBbMTc0XV0sIFsnUkVHJywgWzE3NF1dLCBbJ1JldmVyc2VFbGVtZW50JywgWzg3MTVdXSwgWydSZXZlcnNlRXF1aWxpYnJpdW0nLCBbODY1MV1dLCBbJ1JldmVyc2VVcEVxdWlsaWJyaXVtJywgWzEwNjA3XV0sIFsncmZpc2h0JywgWzEwNjIxXV0sIFsncmZsb29yJywgWzg5NzFdXSwgWydyZnInLCBbMTIwMTExXV0sIFsnUmZyJywgWzg0NzZdXSwgWydySGFyJywgWzEwNTk2XV0sIFsncmhhcmQnLCBbODY0MV1dLCBbJ3JoYXJ1JywgWzg2NDBdXSwgWydyaGFydWwnLCBbMTA2MDRdXSwgWydSaG8nLCBbOTI5XV0sIFsncmhvJywgWzk2MV1dLCBbJ3Job3YnLCBbMTAwOV1dLCBbJ1JpZ2h0QW5nbGVCcmFja2V0JywgWzEwMjE3XV0sIFsnUmlnaHRBcnJvd0JhcicsIFs4Njc3XV0sIFsncmlnaHRhcnJvdycsIFs4NTk0XV0sIFsnUmlnaHRBcnJvdycsIFs4NTk0XV0sIFsnUmlnaHRhcnJvdycsIFs4NjU4XV0sIFsnUmlnaHRBcnJvd0xlZnRBcnJvdycsIFs4NjQ0XV0sIFsncmlnaHRhcnJvd3RhaWwnLCBbODYxMV1dLCBbJ1JpZ2h0Q2VpbGluZycsIFs4OTY5XV0sIFsnUmlnaHREb3VibGVCcmFja2V0JywgWzEwMjE1XV0sIFsnUmlnaHREb3duVGVlVmVjdG9yJywgWzEwNTg5XV0sIFsnUmlnaHREb3duVmVjdG9yQmFyJywgWzEwNTgxXV0sIFsnUmlnaHREb3duVmVjdG9yJywgWzg2NDJdXSwgWydSaWdodEZsb29yJywgWzg5NzFdXSwgWydyaWdodGhhcnBvb25kb3duJywgWzg2NDFdXSwgWydyaWdodGhhcnBvb251cCcsIFs4NjQwXV0sIFsncmlnaHRsZWZ0YXJyb3dzJywgWzg2NDRdXSwgWydyaWdodGxlZnRoYXJwb29ucycsIFs4NjUyXV0sIFsncmlnaHRyaWdodGFycm93cycsIFs4NjQ5XV0sIFsncmlnaHRzcXVpZ2Fycm93JywgWzg2MDVdXSwgWydSaWdodFRlZUFycm93JywgWzg2MTRdXSwgWydSaWdodFRlZScsIFs4ODY2XV0sIFsnUmlnaHRUZWVWZWN0b3InLCBbMTA1ODddXSwgWydyaWdodHRocmVldGltZXMnLCBbODkwOF1dLCBbJ1JpZ2h0VHJpYW5nbGVCYXInLCBbMTA3MDRdXSwgWydSaWdodFRyaWFuZ2xlJywgWzg4ODNdXSwgWydSaWdodFRyaWFuZ2xlRXF1YWwnLCBbODg4NV1dLCBbJ1JpZ2h0VXBEb3duVmVjdG9yJywgWzEwNTc1XV0sIFsnUmlnaHRVcFRlZVZlY3RvcicsIFsxMDU4OF1dLCBbJ1JpZ2h0VXBWZWN0b3JCYXInLCBbMTA1ODBdXSwgWydSaWdodFVwVmVjdG9yJywgWzg2MzhdXSwgWydSaWdodFZlY3RvckJhcicsIFsxMDU3OV1dLCBbJ1JpZ2h0VmVjdG9yJywgWzg2NDBdXSwgWydyaW5nJywgWzczMF1dLCBbJ3Jpc2luZ2RvdHNlcScsIFs4Nzg3XV0sIFsncmxhcnInLCBbODY0NF1dLCBbJ3JsaGFyJywgWzg2NTJdXSwgWydybG0nLCBbODIwN11dLCBbJ3Jtb3VzdGFjaGUnLCBbOTEzN11dLCBbJ3Jtb3VzdCcsIFs5MTM3XV0sIFsncm5taWQnLCBbMTA5OTBdXSwgWydyb2FuZycsIFsxMDIyMV1dLCBbJ3JvYXJyJywgWzg3MDJdXSwgWydyb2JyaycsIFsxMDIxNV1dLCBbJ3JvcGFyJywgWzEwNjMwXV0sIFsncm9wZicsIFsxMjAxNjNdXSwgWydSb3BmJywgWzg0NzddXSwgWydyb3BsdXMnLCBbMTA3OThdXSwgWydyb3RpbWVzJywgWzEwODA1XV0sIFsnUm91bmRJbXBsaWVzJywgWzEwNjA4XV0sIFsncnBhcicsIFs0MV1dLCBbJ3JwYXJndCcsIFsxMDY0NF1dLCBbJ3JwcG9saW50JywgWzEwNzcwXV0sIFsncnJhcnInLCBbODY0OV1dLCBbJ1JyaWdodGFycm93JywgWzg2NjddXSwgWydyc2FxdW8nLCBbODI1MF1dLCBbJ3JzY3InLCBbMTIwMDA3XV0sIFsnUnNjcicsIFs4NDc1XV0sIFsncnNoJywgWzg2MjVdXSwgWydSc2gnLCBbODYyNV1dLCBbJ3JzcWInLCBbOTNdXSwgWydyc3F1bycsIFs4MjE3XV0sIFsncnNxdW9yJywgWzgyMTddXSwgWydDbG9zZUN1cmx5UXVvdGUnLCBbODIxN11dLCBbJ3J0aHJlZScsIFs4OTA4XV0sIFsncnRpbWVzJywgWzg5MDZdXSwgWydydHJpJywgWzk2NTddXSwgWydydHJpZScsIFs4ODg1XV0sIFsncnRyaWYnLCBbOTY1Nl1dLCBbJ3J0cmlsdHJpJywgWzEwNzAyXV0sIFsnUnVsZURlbGF5ZWQnLCBbMTA3NDBdXSwgWydydWx1aGFyJywgWzEwNjAwXV0sIFsncngnLCBbODQ3OF1dLCBbJ1NhY3V0ZScsIFszNDZdXSwgWydzYWN1dGUnLCBbMzQ3XV0sIFsnc2JxdW8nLCBbODIxOF1dLCBbJ3NjYXAnLCBbMTA5MzZdXSwgWydTY2Fyb24nLCBbMzUyXV0sIFsnc2Nhcm9uJywgWzM1M11dLCBbJ1NjJywgWzEwOTQwXV0sIFsnc2MnLCBbODgyN11dLCBbJ3NjY3VlJywgWzg4MjldXSwgWydzY2UnLCBbMTA5MjhdXSwgWydzY0UnLCBbMTA5MzJdXSwgWydTY2VkaWwnLCBbMzUwXV0sIFsnc2NlZGlsJywgWzM1MV1dLCBbJ1NjaXJjJywgWzM0OF1dLCBbJ3NjaXJjJywgWzM0OV1dLCBbJ3NjbmFwJywgWzEwOTM4XV0sIFsnc2NuRScsIFsxMDkzNF1dLCBbJ3NjbnNpbScsIFs4OTM3XV0sIFsnc2Nwb2xpbnQnLCBbMTA3NzFdXSwgWydzY3NpbScsIFs4ODMxXV0sIFsnU2N5JywgWzEwNTddXSwgWydzY3knLCBbMTA4OV1dLCBbJ3Nkb3RiJywgWzg4NjVdXSwgWydzZG90JywgWzg5MDFdXSwgWydzZG90ZScsIFsxMDg1NF1dLCBbJ3NlYXJoaycsIFsxMDUzM11dLCBbJ3NlYXJyJywgWzg2MDBdXSwgWydzZUFycicsIFs4NjY0XV0sIFsnc2VhcnJvdycsIFs4NjAwXV0sIFsnc2VjdCcsIFsxNjddXSwgWydzZW1pJywgWzU5XV0sIFsnc2Vzd2FyJywgWzEwNTM3XV0sIFsnc2V0bWludXMnLCBbODcyNl1dLCBbJ3NldG1uJywgWzg3MjZdXSwgWydzZXh0JywgWzEwMDM4XV0sIFsnU2ZyJywgWzEyMDA4Nl1dLCBbJ3NmcicsIFsxMjAxMTJdXSwgWydzZnJvd24nLCBbODk5NF1dLCBbJ3NoYXJwJywgWzk4MzldXSwgWydTSENIY3knLCBbMTA2NV1dLCBbJ3NoY2hjeScsIFsxMDk3XV0sIFsnU0hjeScsIFsxMDY0XV0sIFsnc2hjeScsIFsxMDk2XV0sIFsnU2hvcnREb3duQXJyb3cnLCBbODU5NV1dLCBbJ1Nob3J0TGVmdEFycm93JywgWzg1OTJdXSwgWydzaG9ydG1pZCcsIFs4NzM5XV0sIFsnc2hvcnRwYXJhbGxlbCcsIFs4NzQxXV0sIFsnU2hvcnRSaWdodEFycm93JywgWzg1OTRdXSwgWydTaG9ydFVwQXJyb3cnLCBbODU5M11dLCBbJ3NoeScsIFsxNzNdXSwgWydTaWdtYScsIFs5MzFdXSwgWydzaWdtYScsIFs5NjNdXSwgWydzaWdtYWYnLCBbOTYyXV0sIFsnc2lnbWF2JywgWzk2Ml1dLCBbJ3NpbScsIFs4NzY0XV0sIFsnc2ltZG90JywgWzEwODU4XV0sIFsnc2ltZScsIFs4NzcxXV0sIFsnc2ltZXEnLCBbODc3MV1dLCBbJ3NpbWcnLCBbMTA5MTBdXSwgWydzaW1nRScsIFsxMDkxMl1dLCBbJ3NpbWwnLCBbMTA5MDldXSwgWydzaW1sRScsIFsxMDkxMV1dLCBbJ3NpbW5lJywgWzg3NzRdXSwgWydzaW1wbHVzJywgWzEwNzg4XV0sIFsnc2ltcmFycicsIFsxMDYxMF1dLCBbJ3NsYXJyJywgWzg1OTJdXSwgWydTbWFsbENpcmNsZScsIFs4NzI4XV0sIFsnc21hbGxzZXRtaW51cycsIFs4NzI2XV0sIFsnc21hc2hwJywgWzEwODAzXV0sIFsnc21lcGFyc2wnLCBbMTA3MjRdXSwgWydzbWlkJywgWzg3MzldXSwgWydzbWlsZScsIFs4OTk1XV0sIFsnc210JywgWzEwOTIyXV0sIFsnc210ZScsIFsxMDkyNF1dLCBbJ3NtdGVzJywgWzEwOTI0LCA2NTAyNF1dLCBbJ1NPRlRjeScsIFsxMDY4XV0sIFsnc29mdGN5JywgWzExMDBdXSwgWydzb2xiYXInLCBbOTAyM11dLCBbJ3NvbGInLCBbMTA2OTJdXSwgWydzb2wnLCBbNDddXSwgWydTb3BmJywgWzEyMDEzOF1dLCBbJ3NvcGYnLCBbMTIwMTY0XV0sIFsnc3BhZGVzJywgWzk4MjRdXSwgWydzcGFkZXN1aXQnLCBbOTgyNF1dLCBbJ3NwYXInLCBbODc0MV1dLCBbJ3NxY2FwJywgWzg4NTFdXSwgWydzcWNhcHMnLCBbODg1MSwgNjUwMjRdXSwgWydzcWN1cCcsIFs4ODUyXV0sIFsnc3FjdXBzJywgWzg4NTIsIDY1MDI0XV0sIFsnU3FydCcsIFs4NzMwXV0sIFsnc3FzdWInLCBbODg0N11dLCBbJ3Nxc3ViZScsIFs4ODQ5XV0sIFsnc3FzdWJzZXQnLCBbODg0N11dLCBbJ3Nxc3Vic2V0ZXEnLCBbODg0OV1dLCBbJ3Nxc3VwJywgWzg4NDhdXSwgWydzcXN1cGUnLCBbODg1MF1dLCBbJ3Nxc3Vwc2V0JywgWzg4NDhdXSwgWydzcXN1cHNldGVxJywgWzg4NTBdXSwgWydzcXVhcmUnLCBbOTYzM11dLCBbJ1NxdWFyZScsIFs5NjMzXV0sIFsnU3F1YXJlSW50ZXJzZWN0aW9uJywgWzg4NTFdXSwgWydTcXVhcmVTdWJzZXQnLCBbODg0N11dLCBbJ1NxdWFyZVN1YnNldEVxdWFsJywgWzg4NDldXSwgWydTcXVhcmVTdXBlcnNldCcsIFs4ODQ4XV0sIFsnU3F1YXJlU3VwZXJzZXRFcXVhbCcsIFs4ODUwXV0sIFsnU3F1YXJlVW5pb24nLCBbODg1Ml1dLCBbJ3NxdWFyZicsIFs5NjQyXV0sIFsnc3F1JywgWzk2MzNdXSwgWydzcXVmJywgWzk2NDJdXSwgWydzcmFycicsIFs4NTk0XV0sIFsnU3NjcicsIFsxMTk5ODJdXSwgWydzc2NyJywgWzEyMDAwOF1dLCBbJ3NzZXRtbicsIFs4NzI2XV0sIFsnc3NtaWxlJywgWzg5OTVdXSwgWydzc3RhcmYnLCBbODkwMl1dLCBbJ1N0YXInLCBbODkwMl1dLCBbJ3N0YXInLCBbOTczNF1dLCBbJ3N0YXJmJywgWzk3MzNdXSwgWydzdHJhaWdodGVwc2lsb24nLCBbMTAxM11dLCBbJ3N0cmFpZ2h0cGhpJywgWzk4MV1dLCBbJ3N0cm5zJywgWzE3NV1dLCBbJ3N1YicsIFs4ODM0XV0sIFsnU3ViJywgWzg5MTJdXSwgWydzdWJkb3QnLCBbMTA5NDFdXSwgWydzdWJFJywgWzEwOTQ5XV0sIFsnc3ViZScsIFs4ODM4XV0sIFsnc3ViZWRvdCcsIFsxMDk0N11dLCBbJ3N1Ym11bHQnLCBbMTA5NDVdXSwgWydzdWJuRScsIFsxMDk1NV1dLCBbJ3N1Ym5lJywgWzg4NDJdXSwgWydzdWJwbHVzJywgWzEwOTQzXV0sIFsnc3VicmFycicsIFsxMDYxN11dLCBbJ3N1YnNldCcsIFs4ODM0XV0sIFsnU3Vic2V0JywgWzg5MTJdXSwgWydzdWJzZXRlcScsIFs4ODM4XV0sIFsnc3Vic2V0ZXFxJywgWzEwOTQ5XV0sIFsnU3Vic2V0RXF1YWwnLCBbODgzOF1dLCBbJ3N1YnNldG5lcScsIFs4ODQyXV0sIFsnc3Vic2V0bmVxcScsIFsxMDk1NV1dLCBbJ3N1YnNpbScsIFsxMDk1MV1dLCBbJ3N1YnN1YicsIFsxMDk2NV1dLCBbJ3N1YnN1cCcsIFsxMDk2M11dLCBbJ3N1Y2NhcHByb3gnLCBbMTA5MzZdXSwgWydzdWNjJywgWzg4MjddXSwgWydzdWNjY3VybHllcScsIFs4ODI5XV0sIFsnU3VjY2VlZHMnLCBbODgyN11dLCBbJ1N1Y2NlZWRzRXF1YWwnLCBbMTA5MjhdXSwgWydTdWNjZWVkc1NsYW50RXF1YWwnLCBbODgyOV1dLCBbJ1N1Y2NlZWRzVGlsZGUnLCBbODgzMV1dLCBbJ3N1Y2NlcScsIFsxMDkyOF1dLCBbJ3N1Y2NuYXBwcm94JywgWzEwOTM4XV0sIFsnc3VjY25lcXEnLCBbMTA5MzRdXSwgWydzdWNjbnNpbScsIFs4OTM3XV0sIFsnc3VjY3NpbScsIFs4ODMxXV0sIFsnU3VjaFRoYXQnLCBbODcxNV1dLCBbJ3N1bScsIFs4NzIxXV0sIFsnU3VtJywgWzg3MjFdXSwgWydzdW5nJywgWzk4MzRdXSwgWydzdXAxJywgWzE4NV1dLCBbJ3N1cDInLCBbMTc4XV0sIFsnc3VwMycsIFsxNzldXSwgWydzdXAnLCBbODgzNV1dLCBbJ1N1cCcsIFs4OTEzXV0sIFsnc3VwZG90JywgWzEwOTQyXV0sIFsnc3VwZHN1YicsIFsxMDk2OF1dLCBbJ3N1cEUnLCBbMTA5NTBdXSwgWydzdXBlJywgWzg4MzldXSwgWydzdXBlZG90JywgWzEwOTQ4XV0sIFsnU3VwZXJzZXQnLCBbODgzNV1dLCBbJ1N1cGVyc2V0RXF1YWwnLCBbODgzOV1dLCBbJ3N1cGhzb2wnLCBbMTAxODVdXSwgWydzdXBoc3ViJywgWzEwOTY3XV0sIFsnc3VwbGFycicsIFsxMDYxOV1dLCBbJ3N1cG11bHQnLCBbMTA5NDZdXSwgWydzdXBuRScsIFsxMDk1Nl1dLCBbJ3N1cG5lJywgWzg4NDNdXSwgWydzdXBwbHVzJywgWzEwOTQ0XV0sIFsnc3Vwc2V0JywgWzg4MzVdXSwgWydTdXBzZXQnLCBbODkxM11dLCBbJ3N1cHNldGVxJywgWzg4MzldXSwgWydzdXBzZXRlcXEnLCBbMTA5NTBdXSwgWydzdXBzZXRuZXEnLCBbODg0M11dLCBbJ3N1cHNldG5lcXEnLCBbMTA5NTZdXSwgWydzdXBzaW0nLCBbMTA5NTJdXSwgWydzdXBzdWInLCBbMTA5NjRdXSwgWydzdXBzdXAnLCBbMTA5NjZdXSwgWydzd2FyaGsnLCBbMTA1MzRdXSwgWydzd2FycicsIFs4NjAxXV0sIFsnc3dBcnInLCBbODY2NV1dLCBbJ3N3YXJyb3cnLCBbODYwMV1dLCBbJ3N3bndhcicsIFsxMDUzOF1dLCBbJ3N6bGlnJywgWzIyM11dLCBbJ1RhYicsIFs5XV0sIFsndGFyZ2V0JywgWzg5ODJdXSwgWydUYXUnLCBbOTMyXV0sIFsndGF1JywgWzk2NF1dLCBbJ3RicmsnLCBbOTE0MF1dLCBbJ1RjYXJvbicsIFszNTZdXSwgWyd0Y2Fyb24nLCBbMzU3XV0sIFsnVGNlZGlsJywgWzM1NF1dLCBbJ3RjZWRpbCcsIFszNTVdXSwgWydUY3knLCBbMTA1OF1dLCBbJ3RjeScsIFsxMDkwXV0sIFsndGRvdCcsIFs4NDExXV0sIFsndGVscmVjJywgWzg5ODFdXSwgWydUZnInLCBbMTIwMDg3XV0sIFsndGZyJywgWzEyMDExM11dLCBbJ3RoZXJlNCcsIFs4NzU2XV0sIFsndGhlcmVmb3JlJywgWzg3NTZdXSwgWydUaGVyZWZvcmUnLCBbODc1Nl1dLCBbJ1RoZXRhJywgWzkyMF1dLCBbJ3RoZXRhJywgWzk1Ml1dLCBbJ3RoZXRhc3ltJywgWzk3N11dLCBbJ3RoZXRhdicsIFs5NzddXSwgWyd0aGlja2FwcHJveCcsIFs4Nzc2XV0sIFsndGhpY2tzaW0nLCBbODc2NF1dLCBbJ1RoaWNrU3BhY2UnLCBbODI4NywgODIwMl1dLCBbJ1RoaW5TcGFjZScsIFs4MjAxXV0sIFsndGhpbnNwJywgWzgyMDFdXSwgWyd0aGthcCcsIFs4Nzc2XV0sIFsndGhrc2ltJywgWzg3NjRdXSwgWydUSE9STicsIFsyMjJdXSwgWyd0aG9ybicsIFsyNTRdXSwgWyd0aWxkZScsIFs3MzJdXSwgWydUaWxkZScsIFs4NzY0XV0sIFsnVGlsZGVFcXVhbCcsIFs4NzcxXV0sIFsnVGlsZGVGdWxsRXF1YWwnLCBbODc3M11dLCBbJ1RpbGRlVGlsZGUnLCBbODc3Nl1dLCBbJ3RpbWVzYmFyJywgWzEwODAxXV0sIFsndGltZXNiJywgWzg4NjRdXSwgWyd0aW1lcycsIFsyMTVdXSwgWyd0aW1lc2QnLCBbMTA4MDBdXSwgWyd0aW50JywgWzg3NDldXSwgWyd0b2VhJywgWzEwNTM2XV0sIFsndG9wYm90JywgWzkwMTRdXSwgWyd0b3BjaXInLCBbMTA5OTNdXSwgWyd0b3AnLCBbODg2OF1dLCBbJ1RvcGYnLCBbMTIwMTM5XV0sIFsndG9wZicsIFsxMjAxNjVdXSwgWyd0b3Bmb3JrJywgWzEwOTcwXV0sIFsndG9zYScsIFsxMDUzN11dLCBbJ3RwcmltZScsIFs4MjQ0XV0sIFsndHJhZGUnLCBbODQ4Ml1dLCBbJ1RSQURFJywgWzg0ODJdXSwgWyd0cmlhbmdsZScsIFs5NjUzXV0sIFsndHJpYW5nbGVkb3duJywgWzk2NjNdXSwgWyd0cmlhbmdsZWxlZnQnLCBbOTY2N11dLCBbJ3RyaWFuZ2xlbGVmdGVxJywgWzg4ODRdXSwgWyd0cmlhbmdsZXEnLCBbODc5Nl1dLCBbJ3RyaWFuZ2xlcmlnaHQnLCBbOTY1N11dLCBbJ3RyaWFuZ2xlcmlnaHRlcScsIFs4ODg1XV0sIFsndHJpZG90JywgWzk3MDhdXSwgWyd0cmllJywgWzg3OTZdXSwgWyd0cmltaW51cycsIFsxMDgxMF1dLCBbJ1RyaXBsZURvdCcsIFs4NDExXV0sIFsndHJpcGx1cycsIFsxMDgwOV1dLCBbJ3RyaXNiJywgWzEwNzAxXV0sIFsndHJpdGltZScsIFsxMDgxMV1dLCBbJ3RycGV6aXVtJywgWzkxODZdXSwgWydUc2NyJywgWzExOTk4M11dLCBbJ3RzY3InLCBbMTIwMDA5XV0sIFsnVFNjeScsIFsxMDYyXV0sIFsndHNjeScsIFsxMDk0XV0sIFsnVFNIY3knLCBbMTAzNV1dLCBbJ3RzaGN5JywgWzExMTVdXSwgWydUc3Ryb2snLCBbMzU4XV0sIFsndHN0cm9rJywgWzM1OV1dLCBbJ3R3aXh0JywgWzg4MTJdXSwgWyd0d29oZWFkbGVmdGFycm93JywgWzg2MDZdXSwgWyd0d29oZWFkcmlnaHRhcnJvdycsIFs4NjA4XV0sIFsnVWFjdXRlJywgWzIxOF1dLCBbJ3VhY3V0ZScsIFsyNTBdXSwgWyd1YXJyJywgWzg1OTNdXSwgWydVYXJyJywgWzg2MDddXSwgWyd1QXJyJywgWzg2NTddXSwgWydVYXJyb2NpcicsIFsxMDU2OV1dLCBbJ1VicmN5JywgWzEwMzhdXSwgWyd1YnJjeScsIFsxMTE4XV0sIFsnVWJyZXZlJywgWzM2NF1dLCBbJ3VicmV2ZScsIFszNjVdXSwgWydVY2lyYycsIFsyMTldXSwgWyd1Y2lyYycsIFsyNTFdXSwgWydVY3knLCBbMTA1OV1dLCBbJ3VjeScsIFsxMDkxXV0sIFsndWRhcnInLCBbODY0NV1dLCBbJ1VkYmxhYycsIFszNjhdXSwgWyd1ZGJsYWMnLCBbMzY5XV0sIFsndWRoYXInLCBbMTA2MDZdXSwgWyd1ZmlzaHQnLCBbMTA2MjJdXSwgWydVZnInLCBbMTIwMDg4XV0sIFsndWZyJywgWzEyMDExNF1dLCBbJ1VncmF2ZScsIFsyMTddXSwgWyd1Z3JhdmUnLCBbMjQ5XV0sIFsndUhhcicsIFsxMDU5NV1dLCBbJ3VoYXJsJywgWzg2MzldXSwgWyd1aGFycicsIFs4NjM4XV0sIFsndWhibGsnLCBbOTYwMF1dLCBbJ3VsY29ybicsIFs4OTg4XV0sIFsndWxjb3JuZXInLCBbODk4OF1dLCBbJ3VsY3JvcCcsIFs4OTc1XV0sIFsndWx0cmknLCBbOTcyMF1dLCBbJ1VtYWNyJywgWzM2Ml1dLCBbJ3VtYWNyJywgWzM2M11dLCBbJ3VtbCcsIFsxNjhdXSwgWydVbmRlckJhcicsIFs5NV1dLCBbJ1VuZGVyQnJhY2UnLCBbOTE4M11dLCBbJ1VuZGVyQnJhY2tldCcsIFs5MTQxXV0sIFsnVW5kZXJQYXJlbnRoZXNpcycsIFs5MTgxXV0sIFsnVW5pb24nLCBbODg5OV1dLCBbJ1VuaW9uUGx1cycsIFs4ODQ2XV0sIFsnVW9nb24nLCBbMzcwXV0sIFsndW9nb24nLCBbMzcxXV0sIFsnVW9wZicsIFsxMjAxNDBdXSwgWyd1b3BmJywgWzEyMDE2Nl1dLCBbJ1VwQXJyb3dCYXInLCBbMTA1MTRdXSwgWyd1cGFycm93JywgWzg1OTNdXSwgWydVcEFycm93JywgWzg1OTNdXSwgWydVcGFycm93JywgWzg2NTddXSwgWydVcEFycm93RG93bkFycm93JywgWzg2NDVdXSwgWyd1cGRvd25hcnJvdycsIFs4NTk3XV0sIFsnVXBEb3duQXJyb3cnLCBbODU5N11dLCBbJ1VwZG93bmFycm93JywgWzg2NjFdXSwgWydVcEVxdWlsaWJyaXVtJywgWzEwNjA2XV0sIFsndXBoYXJwb29ubGVmdCcsIFs4NjM5XV0sIFsndXBoYXJwb29ucmlnaHQnLCBbODYzOF1dLCBbJ3VwbHVzJywgWzg4NDZdXSwgWydVcHBlckxlZnRBcnJvdycsIFs4NTk4XV0sIFsnVXBwZXJSaWdodEFycm93JywgWzg1OTldXSwgWyd1cHNpJywgWzk2NV1dLCBbJ1Vwc2knLCBbOTc4XV0sIFsndXBzaWgnLCBbOTc4XV0sIFsnVXBzaWxvbicsIFs5MzNdXSwgWyd1cHNpbG9uJywgWzk2NV1dLCBbJ1VwVGVlQXJyb3cnLCBbODYxM11dLCBbJ1VwVGVlJywgWzg4NjldXSwgWyd1cHVwYXJyb3dzJywgWzg2NDhdXSwgWyd1cmNvcm4nLCBbODk4OV1dLCBbJ3VyY29ybmVyJywgWzg5ODldXSwgWyd1cmNyb3AnLCBbODk3NF1dLCBbJ1VyaW5nJywgWzM2Nl1dLCBbJ3VyaW5nJywgWzM2N11dLCBbJ3VydHJpJywgWzk3MjFdXSwgWydVc2NyJywgWzExOTk4NF1dLCBbJ3VzY3InLCBbMTIwMDEwXV0sIFsndXRkb3QnLCBbODk0NF1dLCBbJ1V0aWxkZScsIFszNjBdXSwgWyd1dGlsZGUnLCBbMzYxXV0sIFsndXRyaScsIFs5NjUzXV0sIFsndXRyaWYnLCBbOTY1Ml1dLCBbJ3V1YXJyJywgWzg2NDhdXSwgWydVdW1sJywgWzIyMF1dLCBbJ3V1bWwnLCBbMjUyXV0sIFsndXdhbmdsZScsIFsxMDY2M11dLCBbJ3ZhbmdydCcsIFsxMDY1Ml1dLCBbJ3ZhcmVwc2lsb24nLCBbMTAxM11dLCBbJ3ZhcmthcHBhJywgWzEwMDhdXSwgWyd2YXJub3RoaW5nJywgWzg3MDldXSwgWyd2YXJwaGknLCBbOTgxXV0sIFsndmFycGknLCBbOTgyXV0sIFsndmFycHJvcHRvJywgWzg3MzNdXSwgWyd2YXJyJywgWzg1OTddXSwgWyd2QXJyJywgWzg2NjFdXSwgWyd2YXJyaG8nLCBbMTAwOV1dLCBbJ3ZhcnNpZ21hJywgWzk2Ml1dLCBbJ3ZhcnN1YnNldG5lcScsIFs4ODQyLCA2NTAyNF1dLCBbJ3ZhcnN1YnNldG5lcXEnLCBbMTA5NTUsIDY1MDI0XV0sIFsndmFyc3Vwc2V0bmVxJywgWzg4NDMsIDY1MDI0XV0sIFsndmFyc3Vwc2V0bmVxcScsIFsxMDk1NiwgNjUwMjRdXSwgWyd2YXJ0aGV0YScsIFs5NzddXSwgWyd2YXJ0cmlhbmdsZWxlZnQnLCBbODg4Ml1dLCBbJ3ZhcnRyaWFuZ2xlcmlnaHQnLCBbODg4M11dLCBbJ3ZCYXInLCBbMTA5ODRdXSwgWydWYmFyJywgWzEwOTg3XV0sIFsndkJhcnYnLCBbMTA5ODVdXSwgWydWY3knLCBbMTA0Ml1dLCBbJ3ZjeScsIFsxMDc0XV0sIFsndmRhc2gnLCBbODg2Nl1dLCBbJ3ZEYXNoJywgWzg4NzJdXSwgWydWZGFzaCcsIFs4ODczXV0sIFsnVkRhc2gnLCBbODg3NV1dLCBbJ1ZkYXNobCcsIFsxMDk4Ml1dLCBbJ3ZlZWJhcicsIFs4ODkxXV0sIFsndmVlJywgWzg3NDRdXSwgWydWZWUnLCBbODg5N11dLCBbJ3ZlZWVxJywgWzg3OTRdXSwgWyd2ZWxsaXAnLCBbODk0Ml1dLCBbJ3ZlcmJhcicsIFsxMjRdXSwgWydWZXJiYXInLCBbODIxNF1dLCBbJ3ZlcnQnLCBbMTI0XV0sIFsnVmVydCcsIFs4MjE0XV0sIFsnVmVydGljYWxCYXInLCBbODczOV1dLCBbJ1ZlcnRpY2FsTGluZScsIFsxMjRdXSwgWydWZXJ0aWNhbFNlcGFyYXRvcicsIFsxMDA3Ml1dLCBbJ1ZlcnRpY2FsVGlsZGUnLCBbODc2OF1dLCBbJ1ZlcnlUaGluU3BhY2UnLCBbODIwMl1dLCBbJ1ZmcicsIFsxMjAwODldXSwgWyd2ZnInLCBbMTIwMTE1XV0sIFsndmx0cmknLCBbODg4Ml1dLCBbJ3Zuc3ViJywgWzg4MzQsIDg0MDJdXSwgWyd2bnN1cCcsIFs4ODM1LCA4NDAyXV0sIFsnVm9wZicsIFsxMjAxNDFdXSwgWyd2b3BmJywgWzEyMDE2N11dLCBbJ3Zwcm9wJywgWzg3MzNdXSwgWyd2cnRyaScsIFs4ODgzXV0sIFsnVnNjcicsIFsxMTk5ODVdXSwgWyd2c2NyJywgWzEyMDAxMV1dLCBbJ3ZzdWJuRScsIFsxMDk1NSwgNjUwMjRdXSwgWyd2c3VibmUnLCBbODg0MiwgNjUwMjRdXSwgWyd2c3VwbkUnLCBbMTA5NTYsIDY1MDI0XV0sIFsndnN1cG5lJywgWzg4NDMsIDY1MDI0XV0sIFsnVnZkYXNoJywgWzg4NzRdXSwgWyd2emlnemFnJywgWzEwNjUwXV0sIFsnV2NpcmMnLCBbMzcyXV0sIFsnd2NpcmMnLCBbMzczXV0sIFsnd2VkYmFyJywgWzEwODQ3XV0sIFsnd2VkZ2UnLCBbODc0M11dLCBbJ1dlZGdlJywgWzg4OTZdXSwgWyd3ZWRnZXEnLCBbODc5M11dLCBbJ3dlaWVycCcsIFs4NDcyXV0sIFsnV2ZyJywgWzEyMDA5MF1dLCBbJ3dmcicsIFsxMjAxMTZdXSwgWydXb3BmJywgWzEyMDE0Ml1dLCBbJ3dvcGYnLCBbMTIwMTY4XV0sIFsnd3AnLCBbODQ3Ml1dLCBbJ3dyJywgWzg3NjhdXSwgWyd3cmVhdGgnLCBbODc2OF1dLCBbJ1dzY3InLCBbMTE5OTg2XV0sIFsnd3NjcicsIFsxMjAwMTJdXSwgWyd4Y2FwJywgWzg4OThdXSwgWyd4Y2lyYycsIFs5NzExXV0sIFsneGN1cCcsIFs4ODk5XV0sIFsneGR0cmknLCBbOTY2MV1dLCBbJ1hmcicsIFsxMjAwOTFdXSwgWyd4ZnInLCBbMTIwMTE3XV0sIFsneGhhcnInLCBbMTAyMzFdXSwgWyd4aEFycicsIFsxMDIzNF1dLCBbJ1hpJywgWzkyNl1dLCBbJ3hpJywgWzk1OF1dLCBbJ3hsYXJyJywgWzEwMjI5XV0sIFsneGxBcnInLCBbMTAyMzJdXSwgWyd4bWFwJywgWzEwMjM2XV0sIFsneG5pcycsIFs4OTU1XV0sIFsneG9kb3QnLCBbMTA3NTJdXSwgWydYb3BmJywgWzEyMDE0M11dLCBbJ3hvcGYnLCBbMTIwMTY5XV0sIFsneG9wbHVzJywgWzEwNzUzXV0sIFsneG90aW1lJywgWzEwNzU0XV0sIFsneHJhcnInLCBbMTAyMzBdXSwgWyd4ckFycicsIFsxMDIzM11dLCBbJ1hzY3InLCBbMTE5OTg3XV0sIFsneHNjcicsIFsxMjAwMTNdXSwgWyd4c3FjdXAnLCBbMTA3NThdXSwgWyd4dXBsdXMnLCBbMTA3NTZdXSwgWyd4dXRyaScsIFs5NjUxXV0sIFsneHZlZScsIFs4ODk3XV0sIFsneHdlZGdlJywgWzg4OTZdXSwgWydZYWN1dGUnLCBbMjIxXV0sIFsneWFjdXRlJywgWzI1M11dLCBbJ1lBY3knLCBbMTA3MV1dLCBbJ3lhY3knLCBbMTEwM11dLCBbJ1ljaXJjJywgWzM3NF1dLCBbJ3ljaXJjJywgWzM3NV1dLCBbJ1ljeScsIFsxMDY3XV0sIFsneWN5JywgWzEwOTldXSwgWyd5ZW4nLCBbMTY1XV0sIFsnWWZyJywgWzEyMDA5Ml1dLCBbJ3lmcicsIFsxMjAxMThdXSwgWydZSWN5JywgWzEwMzFdXSwgWyd5aWN5JywgWzExMTFdXSwgWydZb3BmJywgWzEyMDE0NF1dLCBbJ3lvcGYnLCBbMTIwMTcwXV0sIFsnWXNjcicsIFsxMTk5ODhdXSwgWyd5c2NyJywgWzEyMDAxNF1dLCBbJ1lVY3knLCBbMTA3MF1dLCBbJ3l1Y3knLCBbMTEwMl1dLCBbJ3l1bWwnLCBbMjU1XV0sIFsnWXVtbCcsIFszNzZdXSwgWydaYWN1dGUnLCBbMzc3XV0sIFsnemFjdXRlJywgWzM3OF1dLCBbJ1pjYXJvbicsIFszODFdXSwgWyd6Y2Fyb24nLCBbMzgyXV0sIFsnWmN5JywgWzEwNDddXSwgWyd6Y3knLCBbMTA3OV1dLCBbJ1pkb3QnLCBbMzc5XV0sIFsnemRvdCcsIFszODBdXSwgWyd6ZWV0cmYnLCBbODQ4OF1dLCBbJ1plcm9XaWR0aFNwYWNlJywgWzgyMDNdXSwgWydaZXRhJywgWzkxOF1dLCBbJ3pldGEnLCBbOTUwXV0sIFsnemZyJywgWzEyMDExOV1dLCBbJ1pmcicsIFs4NDg4XV0sIFsnWkhjeScsIFsxMDQ2XV0sIFsnemhjeScsIFsxMDc4XV0sIFsnemlncmFycicsIFs4NjY5XV0sIFsnem9wZicsIFsxMjAxNzFdXSwgWydab3BmJywgWzg0ODRdXSwgWydac2NyJywgWzExOTk4OV1dLCBbJ3pzY3InLCBbMTIwMDE1XV0sIFsnendqJywgWzgyMDVdXSwgWyd6d25qJywgWzgyMDRdXV07XG52YXIgREVDT0RFX09OTFlfRU5USVRJRVMgPSBbWydOZXdMaW5lJywgWzEwXV1dO1xudmFyIGFscGhhSW5kZXggPSB7fTtcbnZhciBjaGFySW5kZXggPSB7fTtcbmNyZWF0ZUluZGV4ZXMoYWxwaGFJbmRleCwgY2hhckluZGV4KTtcbnZhciBIdG1sNUVudGl0aWVzID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEh0bWw1RW50aXRpZXMoKSB7XG4gICAgfVxuICAgIEh0bWw1RW50aXRpZXMucHJvdG90eXBlLmRlY29kZSA9IGZ1bmN0aW9uIChzdHIpIHtcbiAgICAgICAgaWYgKCFzdHIgfHwgIXN0ci5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3RyLnJlcGxhY2UoLyYoIz9bXFx3XFxkXSspOz8vZywgZnVuY3Rpb24gKHMsIGVudGl0eSkge1xuICAgICAgICAgICAgdmFyIGNocjtcbiAgICAgICAgICAgIGlmIChlbnRpdHkuY2hhckF0KDApID09PSBcIiNcIikge1xuICAgICAgICAgICAgICAgIHZhciBjb2RlID0gZW50aXR5LmNoYXJBdCgxKSA9PT0gJ3gnID9cbiAgICAgICAgICAgICAgICAgICAgcGFyc2VJbnQoZW50aXR5LnN1YnN0cigyKS50b0xvd2VyQ2FzZSgpLCAxNikgOlxuICAgICAgICAgICAgICAgICAgICBwYXJzZUludChlbnRpdHkuc3Vic3RyKDEpKTtcbiAgICAgICAgICAgICAgICBpZiAoIWlzTmFOKGNvZGUpIHx8IGNvZGUgPj0gLTMyNzY4KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjb2RlIDw9IDY1NTM1KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjaHIgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGNvZGUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2hyID0gc3Vycm9nYXRlX3BhaXJzXzEuZnJvbUNvZGVQb2ludChjb2RlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNociA9IGFscGhhSW5kZXhbZW50aXR5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBjaHIgfHwgcztcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBIdG1sNUVudGl0aWVzLmRlY29kZSA9IGZ1bmN0aW9uIChzdHIpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBIdG1sNUVudGl0aWVzKCkuZGVjb2RlKHN0cik7XG4gICAgfTtcbiAgICBIdG1sNUVudGl0aWVzLnByb3RvdHlwZS5lbmNvZGUgPSBmdW5jdGlvbiAoc3RyKSB7XG4gICAgICAgIGlmICghc3RyIHx8ICFzdHIubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHN0ckxlbmd0aCA9IHN0ci5sZW5ndGg7XG4gICAgICAgIHZhciByZXN1bHQgPSAnJztcbiAgICAgICAgdmFyIGkgPSAwO1xuICAgICAgICB3aGlsZSAoaSA8IHN0ckxlbmd0aCkge1xuICAgICAgICAgICAgdmFyIGNoYXJJbmZvID0gY2hhckluZGV4W3N0ci5jaGFyQ29kZUF0KGkpXTtcbiAgICAgICAgICAgIGlmIChjaGFySW5mbykge1xuICAgICAgICAgICAgICAgIHZhciBhbHBoYSA9IGNoYXJJbmZvW3N0ci5jaGFyQ29kZUF0KGkgKyAxKV07XG4gICAgICAgICAgICAgICAgaWYgKGFscGhhKSB7XG4gICAgICAgICAgICAgICAgICAgIGkrKztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGFscGhhID0gY2hhckluZm9bJyddO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoYWxwaGEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IFwiJlwiICsgYWxwaGEgKyBcIjtcIjtcbiAgICAgICAgICAgICAgICAgICAgaSsrO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXN1bHQgKz0gc3RyLmNoYXJBdChpKTtcbiAgICAgICAgICAgIGkrKztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG4gICAgSHRtbDVFbnRpdGllcy5lbmNvZGUgPSBmdW5jdGlvbiAoc3RyKSB7XG4gICAgICAgIHJldHVybiBuZXcgSHRtbDVFbnRpdGllcygpLmVuY29kZShzdHIpO1xuICAgIH07XG4gICAgSHRtbDVFbnRpdGllcy5wcm90b3R5cGUuZW5jb2RlTm9uVVRGID0gZnVuY3Rpb24gKHN0cikge1xuICAgICAgICBpZiAoIXN0ciB8fCAhc3RyLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICB9XG4gICAgICAgIHZhciBzdHJMZW5ndGggPSBzdHIubGVuZ3RoO1xuICAgICAgICB2YXIgcmVzdWx0ID0gJyc7XG4gICAgICAgIHZhciBpID0gMDtcbiAgICAgICAgd2hpbGUgKGkgPCBzdHJMZW5ndGgpIHtcbiAgICAgICAgICAgIHZhciBjID0gc3RyLmNoYXJDb2RlQXQoaSk7XG4gICAgICAgICAgICB2YXIgY2hhckluZm8gPSBjaGFySW5kZXhbY107XG4gICAgICAgICAgICBpZiAoY2hhckluZm8pIHtcbiAgICAgICAgICAgICAgICB2YXIgYWxwaGEgPSBjaGFySW5mb1tzdHIuY2hhckNvZGVBdChpICsgMSldO1xuICAgICAgICAgICAgICAgIGlmIChhbHBoYSkge1xuICAgICAgICAgICAgICAgICAgICBpKys7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBhbHBoYSA9IGNoYXJJbmZvWycnXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGFscGhhKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSBcIiZcIiArIGFscGhhICsgXCI7XCI7XG4gICAgICAgICAgICAgICAgICAgIGkrKztcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGMgPCAzMiB8fCBjID4gMTI2KSB7XG4gICAgICAgICAgICAgICAgaWYgKGMgPj0gc3Vycm9nYXRlX3BhaXJzXzEuaGlnaFN1cnJvZ2F0ZUZyb20gJiYgYyA8PSBzdXJyb2dhdGVfcGFpcnNfMS5oaWdoU3Vycm9nYXRlVG8pIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9ICcmIycgKyBzdXJyb2dhdGVfcGFpcnNfMS5nZXRDb2RlUG9pbnQoc3RyLCBpKSArICc7JztcbiAgICAgICAgICAgICAgICAgICAgaSsrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9ICcmIycgKyBjICsgJzsnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlc3VsdCArPSBzdHIuY2hhckF0KGkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaSsrO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcbiAgICBIdG1sNUVudGl0aWVzLmVuY29kZU5vblVURiA9IGZ1bmN0aW9uIChzdHIpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBIdG1sNUVudGl0aWVzKCkuZW5jb2RlTm9uVVRGKHN0cik7XG4gICAgfTtcbiAgICBIdG1sNUVudGl0aWVzLnByb3RvdHlwZS5lbmNvZGVOb25BU0NJSSA9IGZ1bmN0aW9uIChzdHIpIHtcbiAgICAgICAgaWYgKCFzdHIgfHwgIXN0ci5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgfVxuICAgICAgICB2YXIgc3RyTGVuZ3RoID0gc3RyLmxlbmd0aDtcbiAgICAgICAgdmFyIHJlc3VsdCA9ICcnO1xuICAgICAgICB2YXIgaSA9IDA7XG4gICAgICAgIHdoaWxlIChpIDwgc3RyTGVuZ3RoKSB7XG4gICAgICAgICAgICB2YXIgYyA9IHN0ci5jaGFyQ29kZUF0KGkpO1xuICAgICAgICAgICAgaWYgKGMgPD0gMjU1KSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ICs9IHN0cltpKytdO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGMgPj0gc3Vycm9nYXRlX3BhaXJzXzEuaGlnaFN1cnJvZ2F0ZUZyb20gJiYgYyA8PSBzdXJyb2dhdGVfcGFpcnNfMS5oaWdoU3Vycm9nYXRlVG8pIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgKz0gJyYjJyArIHN1cnJvZ2F0ZV9wYWlyc18xLmdldENvZGVQb2ludChzdHIsIGkpICsgJzsnO1xuICAgICAgICAgICAgICAgIGkgKz0gMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnJiMnICsgYyArICc7JztcbiAgICAgICAgICAgICAgICBpKys7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuICAgIEh0bWw1RW50aXRpZXMuZW5jb2RlTm9uQVNDSUkgPSBmdW5jdGlvbiAoc3RyKSB7XG4gICAgICAgIHJldHVybiBuZXcgSHRtbDVFbnRpdGllcygpLmVuY29kZU5vbkFTQ0lJKHN0cik7XG4gICAgfTtcbiAgICByZXR1cm4gSHRtbDVFbnRpdGllcztcbn0oKSk7XG5leHBvcnRzLkh0bWw1RW50aXRpZXMgPSBIdG1sNUVudGl0aWVzO1xuZnVuY3Rpb24gY3JlYXRlSW5kZXhlcyhhbHBoYUluZGV4LCBjaGFySW5kZXgpIHtcbiAgICB2YXIgaSA9IEVOVElUSUVTLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgIHZhciBfYSA9IEVOVElUSUVTW2ldLCBhbHBoYSA9IF9hWzBdLCBfYiA9IF9hWzFdLCBjaHIgPSBfYlswXSwgY2hyMiA9IF9iWzFdO1xuICAgICAgICB2YXIgYWRkQ2hhciA9IChjaHIgPCAzMiB8fCBjaHIgPiAxMjYpIHx8IGNociA9PT0gNjIgfHwgY2hyID09PSA2MCB8fCBjaHIgPT09IDM4IHx8IGNociA9PT0gMzQgfHwgY2hyID09PSAzOTtcbiAgICAgICAgdmFyIGNoYXJJbmZvID0gdm9pZCAwO1xuICAgICAgICBpZiAoYWRkQ2hhcikge1xuICAgICAgICAgICAgY2hhckluZm8gPSBjaGFySW5kZXhbY2hyXSA9IGNoYXJJbmRleFtjaHJdIHx8IHt9O1xuICAgICAgICB9XG4gICAgICAgIGlmIChjaHIyKSB7XG4gICAgICAgICAgICBhbHBoYUluZGV4W2FscGhhXSA9IFN0cmluZy5mcm9tQ2hhckNvZGUoY2hyKSArIFN0cmluZy5mcm9tQ2hhckNvZGUoY2hyMik7XG4gICAgICAgICAgICBhZGRDaGFyICYmIChjaGFySW5mb1tjaHIyXSA9IGFscGhhKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGFscGhhSW5kZXhbYWxwaGFdID0gU3RyaW5nLmZyb21DaGFyQ29kZShjaHIpO1xuICAgICAgICAgICAgYWRkQ2hhciAmJiAoY2hhckluZm9bJyddID0gYWxwaGEpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGkgPSBERUNPREVfT05MWV9FTlRJVElFUy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgICB2YXIgX2MgPSBERUNPREVfT05MWV9FTlRJVElFU1tpXSwgYWxwaGEgPSBfY1swXSwgX2QgPSBfY1sxXSwgY2hyID0gX2RbMF0sIGNocjIgPSBfZFsxXTtcbiAgICAgICAgYWxwaGFJbmRleFthbHBoYV0gPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGNocikgKyAoY2hyMiA/IFN0cmluZy5mcm9tQ2hhckNvZGUoY2hyMikgOiAnJyk7XG4gICAgfVxufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgeG1sX2VudGl0aWVzXzEgPSByZXF1aXJlKFwiLi94bWwtZW50aXRpZXNcIik7XG5leHBvcnRzLlhtbEVudGl0aWVzID0geG1sX2VudGl0aWVzXzEuWG1sRW50aXRpZXM7XG52YXIgaHRtbDRfZW50aXRpZXNfMSA9IHJlcXVpcmUoXCIuL2h0bWw0LWVudGl0aWVzXCIpO1xuZXhwb3J0cy5IdG1sNEVudGl0aWVzID0gaHRtbDRfZW50aXRpZXNfMS5IdG1sNEVudGl0aWVzO1xudmFyIGh0bWw1X2VudGl0aWVzXzEgPSByZXF1aXJlKFwiLi9odG1sNS1lbnRpdGllc1wiKTtcbmV4cG9ydHMuSHRtbDVFbnRpdGllcyA9IGh0bWw1X2VudGl0aWVzXzEuSHRtbDVFbnRpdGllcztcbmV4cG9ydHMuQWxsSHRtbEVudGl0aWVzID0gaHRtbDVfZW50aXRpZXNfMS5IdG1sNUVudGl0aWVzO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmZyb21Db2RlUG9pbnQgPSBTdHJpbmcuZnJvbUNvZGVQb2ludCB8fCBmdW5jdGlvbiAoYXN0cmFsQ29kZVBvaW50KSB7XG4gICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoTWF0aC5mbG9vcigoYXN0cmFsQ29kZVBvaW50IC0gMHgxMDAwMCkgLyAweDQwMCkgKyAweEQ4MDAsIChhc3RyYWxDb2RlUG9pbnQgLSAweDEwMDAwKSAlIDB4NDAwICsgMHhEQzAwKTtcbn07XG5leHBvcnRzLmdldENvZGVQb2ludCA9IFN0cmluZy5wcm90b3R5cGUuY29kZVBvaW50QXQgP1xuICAgIGZ1bmN0aW9uIChpbnB1dCwgcG9zaXRpb24pIHtcbiAgICAgICAgcmV0dXJuIGlucHV0LmNvZGVQb2ludEF0KHBvc2l0aW9uKTtcbiAgICB9IDpcbiAgICBmdW5jdGlvbiAoaW5wdXQsIHBvc2l0aW9uKSB7XG4gICAgICAgIHJldHVybiAoaW5wdXQuY2hhckNvZGVBdChwb3NpdGlvbikgLSAweEQ4MDApICogMHg0MDBcbiAgICAgICAgICAgICsgaW5wdXQuY2hhckNvZGVBdChwb3NpdGlvbiArIDEpIC0gMHhEQzAwICsgMHgxMDAwMDtcbiAgICB9O1xuZXhwb3J0cy5oaWdoU3Vycm9nYXRlRnJvbSA9IDB4RDgwMDtcbmV4cG9ydHMuaGlnaFN1cnJvZ2F0ZVRvID0gMHhEQkZGO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgc3Vycm9nYXRlX3BhaXJzXzEgPSByZXF1aXJlKFwiLi9zdXJyb2dhdGUtcGFpcnNcIik7XG52YXIgQUxQSEFfSU5ERVggPSB7XG4gICAgJyZsdCc6ICc8JyxcbiAgICAnJmd0JzogJz4nLFxuICAgICcmcXVvdCc6ICdcIicsXG4gICAgJyZhcG9zJzogJ1xcJycsXG4gICAgJyZhbXAnOiAnJicsXG4gICAgJyZsdDsnOiAnPCcsXG4gICAgJyZndDsnOiAnPicsXG4gICAgJyZxdW90Oyc6ICdcIicsXG4gICAgJyZhcG9zOyc6ICdcXCcnLFxuICAgICcmYW1wOyc6ICcmJ1xufTtcbnZhciBDSEFSX0lOREVYID0ge1xuICAgIDYwOiAnbHQnLFxuICAgIDYyOiAnZ3QnLFxuICAgIDM0OiAncXVvdCcsXG4gICAgMzk6ICdhcG9zJyxcbiAgICAzODogJ2FtcCdcbn07XG52YXIgQ0hBUl9TX0lOREVYID0ge1xuICAgICc8JzogJyZsdDsnLFxuICAgICc+JzogJyZndDsnLFxuICAgICdcIic6ICcmcXVvdDsnLFxuICAgICdcXCcnOiAnJmFwb3M7JyxcbiAgICAnJic6ICcmYW1wOydcbn07XG52YXIgWG1sRW50aXRpZXMgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gWG1sRW50aXRpZXMoKSB7XG4gICAgfVxuICAgIFhtbEVudGl0aWVzLnByb3RvdHlwZS5lbmNvZGUgPSBmdW5jdGlvbiAoc3RyKSB7XG4gICAgICAgIGlmICghc3RyIHx8ICFzdHIubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN0ci5yZXBsYWNlKC9bPD5cIicmXS9nLCBmdW5jdGlvbiAocykge1xuICAgICAgICAgICAgcmV0dXJuIENIQVJfU19JTkRFWFtzXTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBYbWxFbnRpdGllcy5lbmNvZGUgPSBmdW5jdGlvbiAoc3RyKSB7XG4gICAgICAgIHJldHVybiBuZXcgWG1sRW50aXRpZXMoKS5lbmNvZGUoc3RyKTtcbiAgICB9O1xuICAgIFhtbEVudGl0aWVzLnByb3RvdHlwZS5kZWNvZGUgPSBmdW5jdGlvbiAoc3RyKSB7XG4gICAgICAgIGlmICghc3RyIHx8ICFzdHIubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN0ci5yZXBsYWNlKC8mIz9bMC05YS16QS1aXSs7Py9nLCBmdW5jdGlvbiAocykge1xuICAgICAgICAgICAgaWYgKHMuY2hhckF0KDEpID09PSAnIycpIHtcbiAgICAgICAgICAgICAgICB2YXIgY29kZSA9IHMuY2hhckF0KDIpLnRvTG93ZXJDYXNlKCkgPT09ICd4JyA/XG4gICAgICAgICAgICAgICAgICAgIHBhcnNlSW50KHMuc3Vic3RyKDMpLCAxNikgOlxuICAgICAgICAgICAgICAgICAgICBwYXJzZUludChzLnN1YnN0cigyKSk7XG4gICAgICAgICAgICAgICAgaWYgKCFpc05hTihjb2RlKSB8fCBjb2RlID49IC0zMjc2OCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoY29kZSA8PSA2NTUzNSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoY29kZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3Vycm9nYXRlX3BhaXJzXzEuZnJvbUNvZGVQb2ludChjb2RlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gQUxQSEFfSU5ERVhbc10gfHwgcztcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBYbWxFbnRpdGllcy5kZWNvZGUgPSBmdW5jdGlvbiAoc3RyKSB7XG4gICAgICAgIHJldHVybiBuZXcgWG1sRW50aXRpZXMoKS5kZWNvZGUoc3RyKTtcbiAgICB9O1xuICAgIFhtbEVudGl0aWVzLnByb3RvdHlwZS5lbmNvZGVOb25VVEYgPSBmdW5jdGlvbiAoc3RyKSB7XG4gICAgICAgIGlmICghc3RyIHx8ICFzdHIubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHN0ckxlbmd0aCA9IHN0ci5sZW5ndGg7XG4gICAgICAgIHZhciByZXN1bHQgPSAnJztcbiAgICAgICAgdmFyIGkgPSAwO1xuICAgICAgICB3aGlsZSAoaSA8IHN0ckxlbmd0aCkge1xuICAgICAgICAgICAgdmFyIGMgPSBzdHIuY2hhckNvZGVBdChpKTtcbiAgICAgICAgICAgIHZhciBhbHBoYSA9IENIQVJfSU5ERVhbY107XG4gICAgICAgICAgICBpZiAoYWxwaGEpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgKz0gXCImXCIgKyBhbHBoYSArIFwiO1wiO1xuICAgICAgICAgICAgICAgIGkrKztcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjIDwgMzIgfHwgYyA+IDEyNikge1xuICAgICAgICAgICAgICAgIGlmIChjID49IHN1cnJvZ2F0ZV9wYWlyc18xLmhpZ2hTdXJyb2dhdGVGcm9tICYmIGMgPD0gc3Vycm9nYXRlX3BhaXJzXzEuaGlnaFN1cnJvZ2F0ZVRvKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnJiMnICsgc3Vycm9nYXRlX3BhaXJzXzEuZ2V0Q29kZVBvaW50KHN0ciwgaSkgKyAnOyc7XG4gICAgICAgICAgICAgICAgICAgIGkrKztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnJiMnICsgYyArICc7JztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgKz0gc3RyLmNoYXJBdChpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGkrKztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG4gICAgWG1sRW50aXRpZXMuZW5jb2RlTm9uVVRGID0gZnVuY3Rpb24gKHN0cikge1xuICAgICAgICByZXR1cm4gbmV3IFhtbEVudGl0aWVzKCkuZW5jb2RlTm9uVVRGKHN0cik7XG4gICAgfTtcbiAgICBYbWxFbnRpdGllcy5wcm90b3R5cGUuZW5jb2RlTm9uQVNDSUkgPSBmdW5jdGlvbiAoc3RyKSB7XG4gICAgICAgIGlmICghc3RyIHx8ICFzdHIubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHN0ckxlbmd0aCA9IHN0ci5sZW5ndGg7XG4gICAgICAgIHZhciByZXN1bHQgPSAnJztcbiAgICAgICAgdmFyIGkgPSAwO1xuICAgICAgICB3aGlsZSAoaSA8IHN0ckxlbmd0aCkge1xuICAgICAgICAgICAgdmFyIGMgPSBzdHIuY2hhckNvZGVBdChpKTtcbiAgICAgICAgICAgIGlmIChjIDw9IDI1NSkge1xuICAgICAgICAgICAgICAgIHJlc3VsdCArPSBzdHJbaSsrXTtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjID49IHN1cnJvZ2F0ZV9wYWlyc18xLmhpZ2hTdXJyb2dhdGVGcm9tICYmIGMgPD0gc3Vycm9nYXRlX3BhaXJzXzEuaGlnaFN1cnJvZ2F0ZVRvKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ICs9ICcmIycgKyBzdXJyb2dhdGVfcGFpcnNfMS5nZXRDb2RlUG9pbnQoc3RyLCBpKSArICc7JztcbiAgICAgICAgICAgICAgICBpKys7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgKz0gJyYjJyArIGMgKyAnOyc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpKys7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuICAgIFhtbEVudGl0aWVzLmVuY29kZU5vbkFTQ0lJID0gZnVuY3Rpb24gKHN0cikge1xuICAgICAgICByZXR1cm4gbmV3IFhtbEVudGl0aWVzKCkuZW5jb2RlTm9uQVNDSUkoc3RyKTtcbiAgICB9O1xuICAgIHJldHVybiBYbWxFbnRpdGllcztcbn0oKSk7XG5leHBvcnRzLlhtbEVudGl0aWVzID0gWG1sRW50aXRpZXM7XG4iLCIvKlxuKiBsb2dsZXZlbCAtIGh0dHBzOi8vZ2l0aHViLmNvbS9waW10ZXJyeS9sb2dsZXZlbFxuKlxuKiBDb3B5cmlnaHQgKGMpIDIwMTMgVGltIFBlcnJ5XG4qIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbiovXG4oZnVuY3Rpb24gKHJvb3QsIGRlZmluaXRpb24pIHtcbiAgICBcInVzZSBzdHJpY3RcIjtcbiAgICBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XG4gICAgICAgIGRlZmluZShkZWZpbml0aW9uKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnICYmIG1vZHVsZS5leHBvcnRzKSB7XG4gICAgICAgIG1vZHVsZS5leHBvcnRzID0gZGVmaW5pdGlvbigpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJvb3QubG9nID0gZGVmaW5pdGlvbigpO1xuICAgIH1cbn0odGhpcywgZnVuY3Rpb24gKCkge1xuICAgIFwidXNlIHN0cmljdFwiO1xuXG4gICAgLy8gU2xpZ2h0bHkgZHViaW91cyB0cmlja3MgdG8gY3V0IGRvd24gbWluaW1pemVkIGZpbGUgc2l6ZVxuICAgIHZhciBub29wID0gZnVuY3Rpb24oKSB7fTtcbiAgICB2YXIgdW5kZWZpbmVkVHlwZSA9IFwidW5kZWZpbmVkXCI7XG4gICAgdmFyIGlzSUUgPSAodHlwZW9mIHdpbmRvdyAhPT0gdW5kZWZpbmVkVHlwZSkgJiYgKHR5cGVvZiB3aW5kb3cubmF2aWdhdG9yICE9PSB1bmRlZmluZWRUeXBlKSAmJiAoXG4gICAgICAgIC9UcmlkZW50XFwvfE1TSUUgLy50ZXN0KHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50KVxuICAgICk7XG5cbiAgICB2YXIgbG9nTWV0aG9kcyA9IFtcbiAgICAgICAgXCJ0cmFjZVwiLFxuICAgICAgICBcImRlYnVnXCIsXG4gICAgICAgIFwiaW5mb1wiLFxuICAgICAgICBcIndhcm5cIixcbiAgICAgICAgXCJlcnJvclwiXG4gICAgXTtcblxuICAgIC8vIENyb3NzLWJyb3dzZXIgYmluZCBlcXVpdmFsZW50IHRoYXQgd29ya3MgYXQgbGVhc3QgYmFjayB0byBJRTZcbiAgICBmdW5jdGlvbiBiaW5kTWV0aG9kKG9iaiwgbWV0aG9kTmFtZSkge1xuICAgICAgICB2YXIgbWV0aG9kID0gb2JqW21ldGhvZE5hbWVdO1xuICAgICAgICBpZiAodHlwZW9mIG1ldGhvZC5iaW5kID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICByZXR1cm4gbWV0aG9kLmJpbmQob2JqKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kLmNhbGwobWV0aG9kLCBvYmopO1xuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIC8vIE1pc3NpbmcgYmluZCBzaGltIG9yIElFOCArIE1vZGVybml6ciwgZmFsbGJhY2sgdG8gd3JhcHBpbmdcbiAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHkuYXBwbHkobWV0aG9kLCBbb2JqLCBhcmd1bWVudHNdKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gVHJhY2UoKSBkb2Vzbid0IHByaW50IHRoZSBtZXNzYWdlIGluIElFLCBzbyBmb3IgdGhhdCBjYXNlIHdlIG5lZWQgdG8gd3JhcCBpdFxuICAgIGZ1bmN0aW9uIHRyYWNlRm9ySUUoKSB7XG4gICAgICAgIGlmIChjb25zb2xlLmxvZykge1xuICAgICAgICAgICAgaWYgKGNvbnNvbGUubG9nLmFwcGx5KSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2cuYXBwbHkoY29uc29sZSwgYXJndW1lbnRzKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gSW4gb2xkIElFLCBuYXRpdmUgY29uc29sZSBtZXRob2RzIHRoZW1zZWx2ZXMgZG9uJ3QgaGF2ZSBhcHBseSgpLlxuICAgICAgICAgICAgICAgIEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseS5hcHBseShjb25zb2xlLmxvZywgW2NvbnNvbGUsIGFyZ3VtZW50c10pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChjb25zb2xlLnRyYWNlKSBjb25zb2xlLnRyYWNlKCk7XG4gICAgfVxuXG4gICAgLy8gQnVpbGQgdGhlIGJlc3QgbG9nZ2luZyBtZXRob2QgcG9zc2libGUgZm9yIHRoaXMgZW52XG4gICAgLy8gV2hlcmV2ZXIgcG9zc2libGUgd2Ugd2FudCB0byBiaW5kLCBub3Qgd3JhcCwgdG8gcHJlc2VydmUgc3RhY2sgdHJhY2VzXG4gICAgZnVuY3Rpb24gcmVhbE1ldGhvZChtZXRob2ROYW1lKSB7XG4gICAgICAgIGlmIChtZXRob2ROYW1lID09PSAnZGVidWcnKSB7XG4gICAgICAgICAgICBtZXRob2ROYW1lID0gJ2xvZyc7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIGNvbnNvbGUgPT09IHVuZGVmaW5lZFR5cGUpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTsgLy8gTm8gbWV0aG9kIHBvc3NpYmxlLCBmb3Igbm93IC0gZml4ZWQgbGF0ZXIgYnkgZW5hYmxlTG9nZ2luZ1doZW5Db25zb2xlQXJyaXZlc1xuICAgICAgICB9IGVsc2UgaWYgKG1ldGhvZE5hbWUgPT09ICd0cmFjZScgJiYgaXNJRSkge1xuICAgICAgICAgICAgcmV0dXJuIHRyYWNlRm9ySUU7XG4gICAgICAgIH0gZWxzZSBpZiAoY29uc29sZVttZXRob2ROYW1lXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gYmluZE1ldGhvZChjb25zb2xlLCBtZXRob2ROYW1lKTtcbiAgICAgICAgfSBlbHNlIGlmIChjb25zb2xlLmxvZyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gYmluZE1ldGhvZChjb25zb2xlLCAnbG9nJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbm9vcDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIFRoZXNlIHByaXZhdGUgZnVuY3Rpb25zIGFsd2F5cyBuZWVkIGB0aGlzYCB0byBiZSBzZXQgcHJvcGVybHlcblxuICAgIGZ1bmN0aW9uIHJlcGxhY2VMb2dnaW5nTWV0aG9kcyhsZXZlbCwgbG9nZ2VyTmFtZSkge1xuICAgICAgICAvKmpzaGludCB2YWxpZHRoaXM6dHJ1ZSAqL1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxvZ01ldGhvZHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBtZXRob2ROYW1lID0gbG9nTWV0aG9kc1tpXTtcbiAgICAgICAgICAgIHRoaXNbbWV0aG9kTmFtZV0gPSAoaSA8IGxldmVsKSA/XG4gICAgICAgICAgICAgICAgbm9vcCA6XG4gICAgICAgICAgICAgICAgdGhpcy5tZXRob2RGYWN0b3J5KG1ldGhvZE5hbWUsIGxldmVsLCBsb2dnZXJOYW1lKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIERlZmluZSBsb2cubG9nIGFzIGFuIGFsaWFzIGZvciBsb2cuZGVidWdcbiAgICAgICAgdGhpcy5sb2cgPSB0aGlzLmRlYnVnO1xuICAgIH1cblxuICAgIC8vIEluIG9sZCBJRSB2ZXJzaW9ucywgdGhlIGNvbnNvbGUgaXNuJ3QgcHJlc2VudCB1bnRpbCB5b3UgZmlyc3Qgb3BlbiBpdC5cbiAgICAvLyBXZSBidWlsZCByZWFsTWV0aG9kKCkgcmVwbGFjZW1lbnRzIGhlcmUgdGhhdCByZWdlbmVyYXRlIGxvZ2dpbmcgbWV0aG9kc1xuICAgIGZ1bmN0aW9uIGVuYWJsZUxvZ2dpbmdXaGVuQ29uc29sZUFycml2ZXMobWV0aG9kTmFtZSwgbGV2ZWwsIGxvZ2dlck5hbWUpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gdW5kZWZpbmVkVHlwZSkge1xuICAgICAgICAgICAgICAgIHJlcGxhY2VMb2dnaW5nTWV0aG9kcy5jYWxsKHRoaXMsIGxldmVsLCBsb2dnZXJOYW1lKTtcbiAgICAgICAgICAgICAgICB0aGlzW21ldGhvZE5hbWVdLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gQnkgZGVmYXVsdCwgd2UgdXNlIGNsb3NlbHkgYm91bmQgcmVhbCBtZXRob2RzIHdoZXJldmVyIHBvc3NpYmxlLCBhbmRcbiAgICAvLyBvdGhlcndpc2Ugd2Ugd2FpdCBmb3IgYSBjb25zb2xlIHRvIGFwcGVhciwgYW5kIHRoZW4gdHJ5IGFnYWluLlxuICAgIGZ1bmN0aW9uIGRlZmF1bHRNZXRob2RGYWN0b3J5KG1ldGhvZE5hbWUsIGxldmVsLCBsb2dnZXJOYW1lKSB7XG4gICAgICAgIC8qanNoaW50IHZhbGlkdGhpczp0cnVlICovXG4gICAgICAgIHJldHVybiByZWFsTWV0aG9kKG1ldGhvZE5hbWUpIHx8XG4gICAgICAgICAgICAgICBlbmFibGVMb2dnaW5nV2hlbkNvbnNvbGVBcnJpdmVzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gTG9nZ2VyKG5hbWUsIGRlZmF1bHRMZXZlbCwgZmFjdG9yeSkge1xuICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgdmFyIGN1cnJlbnRMZXZlbDtcbiAgICAgIGRlZmF1bHRMZXZlbCA9IGRlZmF1bHRMZXZlbCA9PSBudWxsID8gXCJXQVJOXCIgOiBkZWZhdWx0TGV2ZWw7XG5cbiAgICAgIHZhciBzdG9yYWdlS2V5ID0gXCJsb2dsZXZlbFwiO1xuICAgICAgaWYgKHR5cGVvZiBuYW1lID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHN0b3JhZ2VLZXkgKz0gXCI6XCIgKyBuYW1lO1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgbmFtZSA9PT0gXCJzeW1ib2xcIikge1xuICAgICAgICBzdG9yYWdlS2V5ID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBwZXJzaXN0TGV2ZWxJZlBvc3NpYmxlKGxldmVsTnVtKSB7XG4gICAgICAgICAgdmFyIGxldmVsTmFtZSA9IChsb2dNZXRob2RzW2xldmVsTnVtXSB8fCAnc2lsZW50JykudG9VcHBlckNhc2UoKTtcblxuICAgICAgICAgIGlmICh0eXBlb2Ygd2luZG93ID09PSB1bmRlZmluZWRUeXBlIHx8ICFzdG9yYWdlS2V5KSByZXR1cm47XG5cbiAgICAgICAgICAvLyBVc2UgbG9jYWxTdG9yYWdlIGlmIGF2YWlsYWJsZVxuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIHdpbmRvdy5sb2NhbFN0b3JhZ2Vbc3RvcmFnZUtleV0gPSBsZXZlbE5hbWU7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9IGNhdGNoIChpZ25vcmUpIHt9XG5cbiAgICAgICAgICAvLyBVc2Ugc2Vzc2lvbiBjb29raWUgYXMgZmFsbGJhY2tcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICB3aW5kb3cuZG9jdW1lbnQuY29va2llID1cbiAgICAgICAgICAgICAgICBlbmNvZGVVUklDb21wb25lbnQoc3RvcmFnZUtleSkgKyBcIj1cIiArIGxldmVsTmFtZSArIFwiO1wiO1xuICAgICAgICAgIH0gY2F0Y2ggKGlnbm9yZSkge31cbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gZ2V0UGVyc2lzdGVkTGV2ZWwoKSB7XG4gICAgICAgICAgdmFyIHN0b3JlZExldmVsO1xuXG4gICAgICAgICAgaWYgKHR5cGVvZiB3aW5kb3cgPT09IHVuZGVmaW5lZFR5cGUgfHwgIXN0b3JhZ2VLZXkpIHJldHVybjtcblxuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIHN0b3JlZExldmVsID0gd2luZG93LmxvY2FsU3RvcmFnZVtzdG9yYWdlS2V5XTtcbiAgICAgICAgICB9IGNhdGNoIChpZ25vcmUpIHt9XG5cbiAgICAgICAgICAvLyBGYWxsYmFjayB0byBjb29raWVzIGlmIGxvY2FsIHN0b3JhZ2UgZ2l2ZXMgdXMgbm90aGluZ1xuICAgICAgICAgIGlmICh0eXBlb2Ygc3RvcmVkTGV2ZWwgPT09IHVuZGVmaW5lZFR5cGUpIHtcbiAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgIHZhciBjb29raWUgPSB3aW5kb3cuZG9jdW1lbnQuY29va2llO1xuICAgICAgICAgICAgICAgICAgdmFyIGxvY2F0aW9uID0gY29va2llLmluZGV4T2YoXG4gICAgICAgICAgICAgICAgICAgICAgZW5jb2RlVVJJQ29tcG9uZW50KHN0b3JhZ2VLZXkpICsgXCI9XCIpO1xuICAgICAgICAgICAgICAgICAgaWYgKGxvY2F0aW9uICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgIHN0b3JlZExldmVsID0gL14oW147XSspLy5leGVjKGNvb2tpZS5zbGljZShsb2NhdGlvbikpWzFdO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGNhdGNoIChpZ25vcmUpIHt9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gSWYgdGhlIHN0b3JlZCBsZXZlbCBpcyBub3QgdmFsaWQsIHRyZWF0IGl0IGFzIGlmIG5vdGhpbmcgd2FzIHN0b3JlZC5cbiAgICAgICAgICBpZiAoc2VsZi5sZXZlbHNbc3RvcmVkTGV2ZWxdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgc3RvcmVkTGV2ZWwgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHN0b3JlZExldmVsO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBjbGVhclBlcnNpc3RlZExldmVsKCkge1xuICAgICAgICAgIGlmICh0eXBlb2Ygd2luZG93ID09PSB1bmRlZmluZWRUeXBlIHx8ICFzdG9yYWdlS2V5KSByZXR1cm47XG5cbiAgICAgICAgICAvLyBVc2UgbG9jYWxTdG9yYWdlIGlmIGF2YWlsYWJsZVxuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIHdpbmRvdy5sb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbShzdG9yYWdlS2V5KTtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH0gY2F0Y2ggKGlnbm9yZSkge31cblxuICAgICAgICAgIC8vIFVzZSBzZXNzaW9uIGNvb2tpZSBhcyBmYWxsYmFja1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIHdpbmRvdy5kb2N1bWVudC5jb29raWUgPVxuICAgICAgICAgICAgICAgIGVuY29kZVVSSUNvbXBvbmVudChzdG9yYWdlS2V5KSArIFwiPTsgZXhwaXJlcz1UaHUsIDAxIEphbiAxOTcwIDAwOjAwOjAwIFVUQ1wiO1xuICAgICAgICAgIH0gY2F0Y2ggKGlnbm9yZSkge31cbiAgICAgIH1cblxuICAgICAgLypcbiAgICAgICAqXG4gICAgICAgKiBQdWJsaWMgbG9nZ2VyIEFQSSAtIHNlZSBodHRwczovL2dpdGh1Yi5jb20vcGltdGVycnkvbG9nbGV2ZWwgZm9yIGRldGFpbHNcbiAgICAgICAqXG4gICAgICAgKi9cblxuICAgICAgc2VsZi5uYW1lID0gbmFtZTtcblxuICAgICAgc2VsZi5sZXZlbHMgPSB7IFwiVFJBQ0VcIjogMCwgXCJERUJVR1wiOiAxLCBcIklORk9cIjogMiwgXCJXQVJOXCI6IDMsXG4gICAgICAgICAgXCJFUlJPUlwiOiA0LCBcIlNJTEVOVFwiOiA1fTtcblxuICAgICAgc2VsZi5tZXRob2RGYWN0b3J5ID0gZmFjdG9yeSB8fCBkZWZhdWx0TWV0aG9kRmFjdG9yeTtcblxuICAgICAgc2VsZi5nZXRMZXZlbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gY3VycmVudExldmVsO1xuICAgICAgfTtcblxuICAgICAgc2VsZi5zZXRMZXZlbCA9IGZ1bmN0aW9uIChsZXZlbCwgcGVyc2lzdCkge1xuICAgICAgICAgIGlmICh0eXBlb2YgbGV2ZWwgPT09IFwic3RyaW5nXCIgJiYgc2VsZi5sZXZlbHNbbGV2ZWwudG9VcHBlckNhc2UoKV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICBsZXZlbCA9IHNlbGYubGV2ZWxzW2xldmVsLnRvVXBwZXJDYXNlKCldO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAodHlwZW9mIGxldmVsID09PSBcIm51bWJlclwiICYmIGxldmVsID49IDAgJiYgbGV2ZWwgPD0gc2VsZi5sZXZlbHMuU0lMRU5UKSB7XG4gICAgICAgICAgICAgIGN1cnJlbnRMZXZlbCA9IGxldmVsO1xuICAgICAgICAgICAgICBpZiAocGVyc2lzdCAhPT0gZmFsc2UpIHsgIC8vIGRlZmF1bHRzIHRvIHRydWVcbiAgICAgICAgICAgICAgICAgIHBlcnNpc3RMZXZlbElmUG9zc2libGUobGV2ZWwpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJlcGxhY2VMb2dnaW5nTWV0aG9kcy5jYWxsKHNlbGYsIGxldmVsLCBuYW1lKTtcbiAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjb25zb2xlID09PSB1bmRlZmluZWRUeXBlICYmIGxldmVsIDwgc2VsZi5sZXZlbHMuU0lMRU5UKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gXCJObyBjb25zb2xlIGF2YWlsYWJsZSBmb3IgbG9nZ2luZ1wiO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdGhyb3cgXCJsb2cuc2V0TGV2ZWwoKSBjYWxsZWQgd2l0aCBpbnZhbGlkIGxldmVsOiBcIiArIGxldmVsO1xuICAgICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIHNlbGYuc2V0RGVmYXVsdExldmVsID0gZnVuY3Rpb24gKGxldmVsKSB7XG4gICAgICAgICAgZGVmYXVsdExldmVsID0gbGV2ZWw7XG4gICAgICAgICAgaWYgKCFnZXRQZXJzaXN0ZWRMZXZlbCgpKSB7XG4gICAgICAgICAgICAgIHNlbGYuc2V0TGV2ZWwobGV2ZWwsIGZhbHNlKTtcbiAgICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBzZWxmLnJlc2V0TGV2ZWwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgc2VsZi5zZXRMZXZlbChkZWZhdWx0TGV2ZWwsIGZhbHNlKTtcbiAgICAgICAgICBjbGVhclBlcnNpc3RlZExldmVsKCk7XG4gICAgICB9O1xuXG4gICAgICBzZWxmLmVuYWJsZUFsbCA9IGZ1bmN0aW9uKHBlcnNpc3QpIHtcbiAgICAgICAgICBzZWxmLnNldExldmVsKHNlbGYubGV2ZWxzLlRSQUNFLCBwZXJzaXN0KTtcbiAgICAgIH07XG5cbiAgICAgIHNlbGYuZGlzYWJsZUFsbCA9IGZ1bmN0aW9uKHBlcnNpc3QpIHtcbiAgICAgICAgICBzZWxmLnNldExldmVsKHNlbGYubGV2ZWxzLlNJTEVOVCwgcGVyc2lzdCk7XG4gICAgICB9O1xuXG4gICAgICAvLyBJbml0aWFsaXplIHdpdGggdGhlIHJpZ2h0IGxldmVsXG4gICAgICB2YXIgaW5pdGlhbExldmVsID0gZ2V0UGVyc2lzdGVkTGV2ZWwoKTtcbiAgICAgIGlmIChpbml0aWFsTGV2ZWwgPT0gbnVsbCkge1xuICAgICAgICAgIGluaXRpYWxMZXZlbCA9IGRlZmF1bHRMZXZlbDtcbiAgICAgIH1cbiAgICAgIHNlbGYuc2V0TGV2ZWwoaW5pdGlhbExldmVsLCBmYWxzZSk7XG4gICAgfVxuXG4gICAgLypcbiAgICAgKlxuICAgICAqIFRvcC1sZXZlbCBBUElcbiAgICAgKlxuICAgICAqL1xuXG4gICAgdmFyIGRlZmF1bHRMb2dnZXIgPSBuZXcgTG9nZ2VyKCk7XG5cbiAgICB2YXIgX2xvZ2dlcnNCeU5hbWUgPSB7fTtcbiAgICBkZWZhdWx0TG9nZ2VyLmdldExvZ2dlciA9IGZ1bmN0aW9uIGdldExvZ2dlcihuYW1lKSB7XG4gICAgICAgIGlmICgodHlwZW9mIG5hbWUgIT09IFwic3ltYm9sXCIgJiYgdHlwZW9mIG5hbWUgIT09IFwic3RyaW5nXCIpIHx8IG5hbWUgPT09IFwiXCIpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiWW91IG11c3Qgc3VwcGx5IGEgbmFtZSB3aGVuIGNyZWF0aW5nIGEgbG9nZ2VyLlwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBsb2dnZXIgPSBfbG9nZ2Vyc0J5TmFtZVtuYW1lXTtcbiAgICAgICAgaWYgKCFsb2dnZXIpIHtcbiAgICAgICAgICBsb2dnZXIgPSBfbG9nZ2Vyc0J5TmFtZVtuYW1lXSA9IG5ldyBMb2dnZXIoXG4gICAgICAgICAgICBuYW1lLCBkZWZhdWx0TG9nZ2VyLmdldExldmVsKCksIGRlZmF1bHRMb2dnZXIubWV0aG9kRmFjdG9yeSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGxvZ2dlcjtcbiAgICB9O1xuXG4gICAgLy8gR3JhYiB0aGUgY3VycmVudCBnbG9iYWwgbG9nIHZhcmlhYmxlIGluIGNhc2Ugb2Ygb3ZlcndyaXRlXG4gICAgdmFyIF9sb2cgPSAodHlwZW9mIHdpbmRvdyAhPT0gdW5kZWZpbmVkVHlwZSkgPyB3aW5kb3cubG9nIDogdW5kZWZpbmVkO1xuICAgIGRlZmF1bHRMb2dnZXIubm9Db25mbGljdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gdW5kZWZpbmVkVHlwZSAmJlxuICAgICAgICAgICAgICAgd2luZG93LmxvZyA9PT0gZGVmYXVsdExvZ2dlcikge1xuICAgICAgICAgICAgd2luZG93LmxvZyA9IF9sb2c7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZGVmYXVsdExvZ2dlcjtcbiAgICB9O1xuXG4gICAgZGVmYXVsdExvZ2dlci5nZXRMb2dnZXJzID0gZnVuY3Rpb24gZ2V0TG9nZ2VycygpIHtcbiAgICAgICAgcmV0dXJuIF9sb2dnZXJzQnlOYW1lO1xuICAgIH07XG5cbiAgICAvLyBFUzYgZGVmYXVsdCBleHBvcnQsIGZvciBjb21wYXRpYmlsaXR5XG4gICAgZGVmYXVsdExvZ2dlclsnZGVmYXVsdCddID0gZGVmYXVsdExvZ2dlcjtcblxuICAgIHJldHVybiBkZWZhdWx0TG9nZ2VyO1xufSkpO1xuIiwiaW1wb3J0IHsgYW5pbWF0ZSBhcyBhbmltYXRlJDEsIHdpdGhDb250cm9scyB9IGZyb20gJ0Btb3Rpb25vbmUvZG9tJztcbmltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tICdAbW90aW9ub25lL3V0aWxzJztcbmltcG9ydCB7IEFuaW1hdGlvbiB9IGZyb20gJ0Btb3Rpb25vbmUvYW5pbWF0aW9uJztcblxuZnVuY3Rpb24gYW5pbWF0ZVByb2dyZXNzKHRhcmdldCwgb3B0aW9ucyA9IHt9KSB7XG4gICAgcmV0dXJuIHdpdGhDb250cm9scyhbXG4gICAgICAgICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGFuaW1hdGlvbiA9IG5ldyBBbmltYXRpb24odGFyZ2V0LCBbMCwgMV0sIG9wdGlvbnMpO1xuICAgICAgICAgICAgYW5pbWF0aW9uLmZpbmlzaGVkLmNhdGNoKCgpID0+IHsgfSk7XG4gICAgICAgICAgICByZXR1cm4gYW5pbWF0aW9uO1xuICAgICAgICB9LFxuICAgIF0sIG9wdGlvbnMsIG9wdGlvbnMuZHVyYXRpb24pO1xufVxuZnVuY3Rpb24gYW5pbWF0ZSh0YXJnZXQsIGtleWZyYW1lc09yT3B0aW9ucywgb3B0aW9ucykge1xuICAgIGNvbnN0IGZhY3RvcnkgPSBpc0Z1bmN0aW9uKHRhcmdldCkgPyBhbmltYXRlUHJvZ3Jlc3MgOiBhbmltYXRlJDE7XG4gICAgcmV0dXJuIGZhY3RvcnkodGFyZ2V0LCBrZXlmcmFtZXNPck9wdGlvbnMsIG9wdGlvbnMpO1xufVxuXG5leHBvcnQgeyBhbmltYXRlLCBhbmltYXRlUHJvZ3Jlc3MgfTtcbiIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4ndXNlIHN0cmljdCc7XG5cbi8vIElmIG9iai5oYXNPd25Qcm9wZXJ0eSBoYXMgYmVlbiBvdmVycmlkZGVuLCB0aGVuIGNhbGxpbmdcbi8vIG9iai5oYXNPd25Qcm9wZXJ0eShwcm9wKSB3aWxsIGJyZWFrLlxuLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vam95ZW50L25vZGUvaXNzdWVzLzE3MDdcbmZ1bmN0aW9uIGhhc093blByb3BlcnR5KG9iaiwgcHJvcCkge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ocXMsIHNlcCwgZXEsIG9wdGlvbnMpIHtcbiAgc2VwID0gc2VwIHx8ICcmJztcbiAgZXEgPSBlcSB8fCAnPSc7XG4gIHZhciBvYmogPSB7fTtcblxuICBpZiAodHlwZW9mIHFzICE9PSAnc3RyaW5nJyB8fCBxcy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gb2JqO1xuICB9XG5cbiAgdmFyIHJlZ2V4cCA9IC9cXCsvZztcbiAgcXMgPSBxcy5zcGxpdChzZXApO1xuXG4gIHZhciBtYXhLZXlzID0gMTAwMDtcbiAgaWYgKG9wdGlvbnMgJiYgdHlwZW9mIG9wdGlvbnMubWF4S2V5cyA9PT0gJ251bWJlcicpIHtcbiAgICBtYXhLZXlzID0gb3B0aW9ucy5tYXhLZXlzO1xuICB9XG5cbiAgdmFyIGxlbiA9IHFzLmxlbmd0aDtcbiAgLy8gbWF4S2V5cyA8PSAwIG1lYW5zIHRoYXQgd2Ugc2hvdWxkIG5vdCBsaW1pdCBrZXlzIGNvdW50XG4gIGlmIChtYXhLZXlzID4gMCAmJiBsZW4gPiBtYXhLZXlzKSB7XG4gICAgbGVuID0gbWF4S2V5cztcbiAgfVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyArK2kpIHtcbiAgICB2YXIgeCA9IHFzW2ldLnJlcGxhY2UocmVnZXhwLCAnJTIwJyksXG4gICAgICAgIGlkeCA9IHguaW5kZXhPZihlcSksXG4gICAgICAgIGtzdHIsIHZzdHIsIGssIHY7XG5cbiAgICBpZiAoaWR4ID49IDApIHtcbiAgICAgIGtzdHIgPSB4LnN1YnN0cigwLCBpZHgpO1xuICAgICAgdnN0ciA9IHguc3Vic3RyKGlkeCArIDEpO1xuICAgIH0gZWxzZSB7XG4gICAgICBrc3RyID0geDtcbiAgICAgIHZzdHIgPSAnJztcbiAgICB9XG5cbiAgICBrID0gZGVjb2RlVVJJQ29tcG9uZW50KGtzdHIpO1xuICAgIHYgPSBkZWNvZGVVUklDb21wb25lbnQodnN0cik7XG5cbiAgICBpZiAoIWhhc093blByb3BlcnR5KG9iaiwgaykpIHtcbiAgICAgIG9ialtrXSA9IHY7XG4gICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KG9ialtrXSkpIHtcbiAgICAgIG9ialtrXS5wdXNoKHYpO1xuICAgIH0gZWxzZSB7XG4gICAgICBvYmpba10gPSBbb2JqW2tdLCB2XTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gb2JqO1xufTtcbiIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBzdHJpbmdpZnlQcmltaXRpdmUgPSBmdW5jdGlvbih2KSB7XG4gIHN3aXRjaCAodHlwZW9mIHYpIHtcbiAgICBjYXNlICdzdHJpbmcnOlxuICAgICAgcmV0dXJuIHY7XG5cbiAgICBjYXNlICdib29sZWFuJzpcbiAgICAgIHJldHVybiB2ID8gJ3RydWUnIDogJ2ZhbHNlJztcblxuICAgIGNhc2UgJ251bWJlcic6XG4gICAgICByZXR1cm4gaXNGaW5pdGUodikgPyB2IDogJyc7XG5cbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuICcnO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG9iaiwgc2VwLCBlcSwgbmFtZSkge1xuICBzZXAgPSBzZXAgfHwgJyYnO1xuICBlcSA9IGVxIHx8ICc9JztcbiAgaWYgKG9iaiA9PT0gbnVsbCkge1xuICAgIG9iaiA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIGlmICh0eXBlb2Ygb2JqID09PSAnb2JqZWN0Jykge1xuICAgIHJldHVybiBPYmplY3Qua2V5cyhvYmopLm1hcChmdW5jdGlvbihrKSB7XG4gICAgICB2YXIga3MgPSBlbmNvZGVVUklDb21wb25lbnQoc3RyaW5naWZ5UHJpbWl0aXZlKGspKSArIGVxO1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkob2JqW2tdKSkge1xuICAgICAgICByZXR1cm4gb2JqW2tdLm1hcChmdW5jdGlvbih2KSB7XG4gICAgICAgICAgcmV0dXJuIGtzICsgZW5jb2RlVVJJQ29tcG9uZW50KHN0cmluZ2lmeVByaW1pdGl2ZSh2KSk7XG4gICAgICAgIH0pLmpvaW4oc2VwKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBrcyArIGVuY29kZVVSSUNvbXBvbmVudChzdHJpbmdpZnlQcmltaXRpdmUob2JqW2tdKSk7XG4gICAgICB9XG4gICAgfSkuam9pbihzZXApO1xuXG4gIH1cblxuICBpZiAoIW5hbWUpIHJldHVybiAnJztcbiAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudChzdHJpbmdpZnlQcmltaXRpdmUobmFtZSkpICsgZXEgK1xuICAgICAgICAgZW5jb2RlVVJJQ29tcG9uZW50KHN0cmluZ2lmeVByaW1pdGl2ZShvYmopKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuZGVjb2RlID0gZXhwb3J0cy5wYXJzZSA9IHJlcXVpcmUoJy4vZGVjb2RlJyk7XG5leHBvcnRzLmVuY29kZSA9IGV4cG9ydHMuc3RyaW5naWZ5ID0gcmVxdWlyZSgnLi9lbmNvZGUnKTtcbiIsIihmdW5jdGlvbigpe2Z1bmN0aW9uIHIoZSxuLHQpe2Z1bmN0aW9uIG8oaSxmKXtpZighbltpXSl7aWYoIWVbaV0pe3ZhciBjPVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmU7aWYoIWYmJmMpcmV0dXJuIGMoaSwhMCk7aWYodSlyZXR1cm4gdShpLCEwKTt2YXIgYT1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK2krXCInXCIpO3Rocm93IGEuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixhfXZhciBwPW5baV09e2V4cG9ydHM6e319O2VbaV1bMF0uY2FsbChwLmV4cG9ydHMsZnVuY3Rpb24ocil7dmFyIG49ZVtpXVsxXVtyXTtyZXR1cm4gbyhufHxyKX0scCxwLmV4cG9ydHMscixlLG4sdCl9cmV0dXJuIG5baV0uZXhwb3J0c31mb3IodmFyIHU9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZSxpPTA7aTx0Lmxlbmd0aDtpKyspbyh0W2ldKTtyZXR1cm4gb31yZXR1cm4gcn0pKCkiLCIndXNlIHN0cmljdCc7XG5cbnZhciB0cmFuc3BvcnRMaXN0ID0gcmVxdWlyZSgnLi90cmFuc3BvcnQtbGlzdCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbWFpbicpKHRyYW5zcG9ydExpc3QpO1xuXG4vLyBUT0RPIGNhbid0IGdldCByaWQgb2YgdGhpcyB1bnRpbCBhbGwgc2VydmVycyBkb1xuaWYgKCdfc29ja2pzX29ubG9hZCcgaW4gZ2xvYmFsKSB7XG4gIHNldFRpbWVvdXQoZ2xvYmFsLl9zb2NranNfb25sb2FkLCAxKTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxuICAsIEV2ZW50ID0gcmVxdWlyZSgnLi9ldmVudCcpXG4gIDtcblxuZnVuY3Rpb24gQ2xvc2VFdmVudCgpIHtcbiAgRXZlbnQuY2FsbCh0aGlzKTtcbiAgdGhpcy5pbml0RXZlbnQoJ2Nsb3NlJywgZmFsc2UsIGZhbHNlKTtcbiAgdGhpcy53YXNDbGVhbiA9IGZhbHNlO1xuICB0aGlzLmNvZGUgPSAwO1xuICB0aGlzLnJlYXNvbiA9ICcnO1xufVxuXG5pbmhlcml0cyhDbG9zZUV2ZW50LCBFdmVudCk7XG5cbm1vZHVsZS5leHBvcnRzID0gQ2xvc2VFdmVudDtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxuICAsIEV2ZW50VGFyZ2V0ID0gcmVxdWlyZSgnLi9ldmVudHRhcmdldCcpXG4gIDtcblxuZnVuY3Rpb24gRXZlbnRFbWl0dGVyKCkge1xuICBFdmVudFRhcmdldC5jYWxsKHRoaXMpO1xufVxuXG5pbmhlcml0cyhFdmVudEVtaXR0ZXIsIEV2ZW50VGFyZ2V0KTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBmdW5jdGlvbih0eXBlKSB7XG4gIGlmICh0eXBlKSB7XG4gICAgZGVsZXRlIHRoaXMuX2xpc3RlbmVyc1t0eXBlXTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLl9saXN0ZW5lcnMgPSB7fTtcbiAgfVxufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbmNlID0gZnVuY3Rpb24odHlwZSwgbGlzdGVuZXIpIHtcbiAgdmFyIHNlbGYgPSB0aGlzXG4gICAgLCBmaXJlZCA9IGZhbHNlO1xuXG4gIGZ1bmN0aW9uIGcoKSB7XG4gICAgc2VsZi5yZW1vdmVMaXN0ZW5lcih0eXBlLCBnKTtcblxuICAgIGlmICghZmlyZWQpIHtcbiAgICAgIGZpcmVkID0gdHJ1ZTtcbiAgICAgIGxpc3RlbmVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfVxuICB9XG5cbiAgdGhpcy5vbih0eXBlLCBnKTtcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuZW1pdCA9IGZ1bmN0aW9uKCkge1xuICB2YXIgdHlwZSA9IGFyZ3VtZW50c1swXTtcbiAgdmFyIGxpc3RlbmVycyA9IHRoaXMuX2xpc3RlbmVyc1t0eXBlXTtcbiAgaWYgKCFsaXN0ZW5lcnMpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgLy8gZXF1aXZhbGVudCBvZiBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpO1xuICB2YXIgbCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gIHZhciBhcmdzID0gbmV3IEFycmF5KGwgLSAxKTtcbiAgZm9yICh2YXIgYWkgPSAxOyBhaSA8IGw7IGFpKyspIHtcbiAgICBhcmdzW2FpIC0gMV0gPSBhcmd1bWVudHNbYWldO1xuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdGVuZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgbGlzdGVuZXJzW2ldLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICB9XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9uID0gRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5hZGRMaXN0ZW5lciA9IEV2ZW50VGFyZ2V0LnByb3RvdHlwZS5hZGRFdmVudExpc3RlbmVyO1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lciA9IEV2ZW50VGFyZ2V0LnByb3RvdHlwZS5yZW1vdmVFdmVudExpc3RlbmVyO1xuXG5tb2R1bGUuZXhwb3J0cy5FdmVudEVtaXR0ZXIgPSBFdmVudEVtaXR0ZXI7XG4iLCIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIEV2ZW50KGV2ZW50VHlwZSkge1xuICB0aGlzLnR5cGUgPSBldmVudFR5cGU7XG59XG5cbkV2ZW50LnByb3RvdHlwZS5pbml0RXZlbnQgPSBmdW5jdGlvbihldmVudFR5cGUsIGNhbkJ1YmJsZSwgY2FuY2VsYWJsZSkge1xuICB0aGlzLnR5cGUgPSBldmVudFR5cGU7XG4gIHRoaXMuYnViYmxlcyA9IGNhbkJ1YmJsZTtcbiAgdGhpcy5jYW5jZWxhYmxlID0gY2FuY2VsYWJsZTtcbiAgdGhpcy50aW1lU3RhbXAgPSArbmV3IERhdGUoKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5FdmVudC5wcm90b3R5cGUuc3RvcFByb3BhZ2F0aW9uID0gZnVuY3Rpb24oKSB7fTtcbkV2ZW50LnByb3RvdHlwZS5wcmV2ZW50RGVmYXVsdCA9IGZ1bmN0aW9uKCkge307XG5cbkV2ZW50LkNBUFRVUklOR19QSEFTRSA9IDE7XG5FdmVudC5BVF9UQVJHRVQgPSAyO1xuRXZlbnQuQlVCQkxJTkdfUEhBU0UgPSAzO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEV2ZW50O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKiBTaW1wbGlmaWVkIGltcGxlbWVudGF0aW9uIG9mIERPTTIgRXZlbnRUYXJnZXQuXG4gKiAgIGh0dHA6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0yLUV2ZW50cy9ldmVudHMuaHRtbCNFdmVudHMtRXZlbnRUYXJnZXRcbiAqL1xuXG5mdW5jdGlvbiBFdmVudFRhcmdldCgpIHtcbiAgdGhpcy5fbGlzdGVuZXJzID0ge307XG59XG5cbkV2ZW50VGFyZ2V0LnByb3RvdHlwZS5hZGRFdmVudExpc3RlbmVyID0gZnVuY3Rpb24oZXZlbnRUeXBlLCBsaXN0ZW5lcikge1xuICBpZiAoIShldmVudFR5cGUgaW4gdGhpcy5fbGlzdGVuZXJzKSkge1xuICAgIHRoaXMuX2xpc3RlbmVyc1tldmVudFR5cGVdID0gW107XG4gIH1cbiAgdmFyIGFyciA9IHRoaXMuX2xpc3RlbmVyc1tldmVudFR5cGVdO1xuICAvLyAjNFxuICBpZiAoYXJyLmluZGV4T2YobGlzdGVuZXIpID09PSAtMSkge1xuICAgIC8vIE1ha2UgYSBjb3B5IHNvIGFzIG5vdCB0byBpbnRlcmZlcmUgd2l0aCBhIGN1cnJlbnQgZGlzcGF0Y2hFdmVudC5cbiAgICBhcnIgPSBhcnIuY29uY2F0KFtsaXN0ZW5lcl0pO1xuICB9XG4gIHRoaXMuX2xpc3RlbmVyc1tldmVudFR5cGVdID0gYXJyO1xufTtcblxuRXZlbnRUYXJnZXQucHJvdG90eXBlLnJlbW92ZUV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbihldmVudFR5cGUsIGxpc3RlbmVyKSB7XG4gIHZhciBhcnIgPSB0aGlzLl9saXN0ZW5lcnNbZXZlbnRUeXBlXTtcbiAgaWYgKCFhcnIpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIGlkeCA9IGFyci5pbmRleE9mKGxpc3RlbmVyKTtcbiAgaWYgKGlkeCAhPT0gLTEpIHtcbiAgICBpZiAoYXJyLmxlbmd0aCA+IDEpIHtcbiAgICAgIC8vIE1ha2UgYSBjb3B5IHNvIGFzIG5vdCB0byBpbnRlcmZlcmUgd2l0aCBhIGN1cnJlbnQgZGlzcGF0Y2hFdmVudC5cbiAgICAgIHRoaXMuX2xpc3RlbmVyc1tldmVudFR5cGVdID0gYXJyLnNsaWNlKDAsIGlkeCkuY29uY2F0KGFyci5zbGljZShpZHggKyAxKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlbGV0ZSB0aGlzLl9saXN0ZW5lcnNbZXZlbnRUeXBlXTtcbiAgICB9XG4gICAgcmV0dXJuO1xuICB9XG59O1xuXG5FdmVudFRhcmdldC5wcm90b3R5cGUuZGlzcGF0Y2hFdmVudCA9IGZ1bmN0aW9uKCkge1xuICB2YXIgZXZlbnQgPSBhcmd1bWVudHNbMF07XG4gIHZhciB0ID0gZXZlbnQudHlwZTtcbiAgLy8gZXF1aXZhbGVudCBvZiBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDApO1xuICB2YXIgYXJncyA9IGFyZ3VtZW50cy5sZW5ndGggPT09IDEgPyBbZXZlbnRdIDogQXJyYXkuYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgLy8gVE9ETzogVGhpcyBkb2Vzbid0IG1hdGNoIHRoZSByZWFsIGJlaGF2aW9yOyBwZXIgc3BlYywgb25mb28gZ2V0XG4gIC8vIHRoZWlyIHBsYWNlIGluIGxpbmUgZnJvbSB0aGUgL2ZpcnN0LyB0aW1lIHRoZXkncmUgc2V0IGZyb21cbiAgLy8gbm9uLW51bGwuIEFsdGhvdWdoIFdlYktpdCBidW1wcyBpdCB0byB0aGUgZW5kIGV2ZXJ5IHRpbWUgaXQnc1xuICAvLyBzZXQuXG4gIGlmICh0aGlzWydvbicgKyB0XSkge1xuICAgIHRoaXNbJ29uJyArIHRdLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICB9XG4gIGlmICh0IGluIHRoaXMuX2xpc3RlbmVycykge1xuICAgIC8vIEdyYWIgYSByZWZlcmVuY2UgdG8gdGhlIGxpc3RlbmVycyBsaXN0LiByZW1vdmVFdmVudExpc3RlbmVyIG1heSBhbHRlciB0aGUgbGlzdC5cbiAgICB2YXIgbGlzdGVuZXJzID0gdGhpcy5fbGlzdGVuZXJzW3RdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdGVuZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBsaXN0ZW5lcnNbaV0uYXBwbHkodGhpcywgYXJncyk7XG4gICAgfVxuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEV2ZW50VGFyZ2V0O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG4gICwgRXZlbnQgPSByZXF1aXJlKCcuL2V2ZW50JylcbiAgO1xuXG5mdW5jdGlvbiBUcmFuc3BvcnRNZXNzYWdlRXZlbnQoZGF0YSkge1xuICBFdmVudC5jYWxsKHRoaXMpO1xuICB0aGlzLmluaXRFdmVudCgnbWVzc2FnZScsIGZhbHNlLCBmYWxzZSk7XG4gIHRoaXMuZGF0YSA9IGRhdGE7XG59XG5cbmluaGVyaXRzKFRyYW5zcG9ydE1lc3NhZ2VFdmVudCwgRXZlbnQpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFRyYW5zcG9ydE1lc3NhZ2VFdmVudDtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGlmcmFtZVV0aWxzID0gcmVxdWlyZSgnLi91dGlscy9pZnJhbWUnKVxuICA7XG5cbmZ1bmN0aW9uIEZhY2FkZUpTKHRyYW5zcG9ydCkge1xuICB0aGlzLl90cmFuc3BvcnQgPSB0cmFuc3BvcnQ7XG4gIHRyYW5zcG9ydC5vbignbWVzc2FnZScsIHRoaXMuX3RyYW5zcG9ydE1lc3NhZ2UuYmluZCh0aGlzKSk7XG4gIHRyYW5zcG9ydC5vbignY2xvc2UnLCB0aGlzLl90cmFuc3BvcnRDbG9zZS5iaW5kKHRoaXMpKTtcbn1cblxuRmFjYWRlSlMucHJvdG90eXBlLl90cmFuc3BvcnRDbG9zZSA9IGZ1bmN0aW9uKGNvZGUsIHJlYXNvbikge1xuICBpZnJhbWVVdGlscy5wb3N0TWVzc2FnZSgnYycsIEpTT04uc3RyaW5naWZ5KFtjb2RlLCByZWFzb25dKSk7XG59O1xuRmFjYWRlSlMucHJvdG90eXBlLl90cmFuc3BvcnRNZXNzYWdlID0gZnVuY3Rpb24oZnJhbWUpIHtcbiAgaWZyYW1lVXRpbHMucG9zdE1lc3NhZ2UoJ3QnLCBmcmFtZSk7XG59O1xuRmFjYWRlSlMucHJvdG90eXBlLl9zZW5kID0gZnVuY3Rpb24oZGF0YSkge1xuICB0aGlzLl90cmFuc3BvcnQuc2VuZChkYXRhKTtcbn07XG5GYWNhZGVKUy5wcm90b3R5cGUuX2Nsb3NlID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuX3RyYW5zcG9ydC5jbG9zZSgpO1xuICB0aGlzLl90cmFuc3BvcnQucmVtb3ZlQWxsTGlzdGVuZXJzKCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEZhY2FkZUpTO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXJsVXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzL3VybCcpXG4gICwgZXZlbnRVdGlscyA9IHJlcXVpcmUoJy4vdXRpbHMvZXZlbnQnKVxuICAsIEZhY2FkZUpTID0gcmVxdWlyZSgnLi9mYWNhZGUnKVxuICAsIEluZm9JZnJhbWVSZWNlaXZlciA9IHJlcXVpcmUoJy4vaW5mby1pZnJhbWUtcmVjZWl2ZXInKVxuICAsIGlmcmFtZVV0aWxzID0gcmVxdWlyZSgnLi91dGlscy9pZnJhbWUnKVxuICAsIGxvYyA9IHJlcXVpcmUoJy4vbG9jYXRpb24nKVxuICA7XG5cbnZhciBkZWJ1ZyA9IGZ1bmN0aW9uKCkge307XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBkZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJykoJ3NvY2tqcy1jbGllbnQ6aWZyYW1lLWJvb3RzdHJhcCcpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKFNvY2tKUywgYXZhaWxhYmxlVHJhbnNwb3J0cykge1xuICB2YXIgdHJhbnNwb3J0TWFwID0ge307XG4gIGF2YWlsYWJsZVRyYW5zcG9ydHMuZm9yRWFjaChmdW5jdGlvbihhdCkge1xuICAgIGlmIChhdC5mYWNhZGVUcmFuc3BvcnQpIHtcbiAgICAgIHRyYW5zcG9ydE1hcFthdC5mYWNhZGVUcmFuc3BvcnQudHJhbnNwb3J0TmFtZV0gPSBhdC5mYWNhZGVUcmFuc3BvcnQ7XG4gICAgfVxuICB9KTtcblxuICAvLyBoYXJkLWNvZGVkIGZvciB0aGUgaW5mbyBpZnJhbWVcbiAgLy8gVE9ETyBzZWUgaWYgd2UgY2FuIG1ha2UgdGhpcyBtb3JlIGR5bmFtaWNcbiAgdHJhbnNwb3J0TWFwW0luZm9JZnJhbWVSZWNlaXZlci50cmFuc3BvcnROYW1lXSA9IEluZm9JZnJhbWVSZWNlaXZlcjtcbiAgdmFyIHBhcmVudE9yaWdpbjtcblxuICAvKiBlc2xpbnQtZGlzYWJsZSBjYW1lbGNhc2UgKi9cbiAgU29ja0pTLmJvb3RzdHJhcF9pZnJhbWUgPSBmdW5jdGlvbigpIHtcbiAgICAvKiBlc2xpbnQtZW5hYmxlIGNhbWVsY2FzZSAqL1xuICAgIHZhciBmYWNhZGU7XG4gICAgaWZyYW1lVXRpbHMuY3VycmVudFdpbmRvd0lkID0gbG9jLmhhc2guc2xpY2UoMSk7XG4gICAgdmFyIG9uTWVzc2FnZSA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgIGlmIChlLnNvdXJjZSAhPT0gcGFyZW50KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgcGFyZW50T3JpZ2luID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICBwYXJlbnRPcmlnaW4gPSBlLm9yaWdpbjtcbiAgICAgIH1cbiAgICAgIGlmIChlLm9yaWdpbiAhPT0gcGFyZW50T3JpZ2luKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIGlmcmFtZU1lc3NhZ2U7XG4gICAgICB0cnkge1xuICAgICAgICBpZnJhbWVNZXNzYWdlID0gSlNPTi5wYXJzZShlLmRhdGEpO1xuICAgICAgfSBjYXRjaCAoaWdub3JlZCkge1xuICAgICAgICBkZWJ1ZygnYmFkIGpzb24nLCBlLmRhdGEpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChpZnJhbWVNZXNzYWdlLndpbmRvd0lkICE9PSBpZnJhbWVVdGlscy5jdXJyZW50V2luZG93SWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgc3dpdGNoIChpZnJhbWVNZXNzYWdlLnR5cGUpIHtcbiAgICAgIGNhc2UgJ3MnOlxuICAgICAgICB2YXIgcDtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBwID0gSlNPTi5wYXJzZShpZnJhbWVNZXNzYWdlLmRhdGEpO1xuICAgICAgICB9IGNhdGNoIChpZ25vcmVkKSB7XG4gICAgICAgICAgZGVidWcoJ2JhZCBqc29uJywgaWZyYW1lTWVzc2FnZS5kYXRhKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICB2YXIgdmVyc2lvbiA9IHBbMF07XG4gICAgICAgIHZhciB0cmFuc3BvcnQgPSBwWzFdO1xuICAgICAgICB2YXIgdHJhbnNVcmwgPSBwWzJdO1xuICAgICAgICB2YXIgYmFzZVVybCA9IHBbM107XG4gICAgICAgIGRlYnVnKHZlcnNpb24sIHRyYW5zcG9ydCwgdHJhbnNVcmwsIGJhc2VVcmwpO1xuICAgICAgICAvLyBjaGFuZ2UgdGhpcyB0byBzZW12ZXIgbG9naWNcbiAgICAgICAgaWYgKHZlcnNpb24gIT09IFNvY2tKUy52ZXJzaW9uKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbmNvbXBhdGlibGUgU29ja0pTISBNYWluIHNpdGUgdXNlczonICtcbiAgICAgICAgICAgICAgICAgICAgJyBcIicgKyB2ZXJzaW9uICsgJ1wiLCB0aGUgaWZyYW1lOicgK1xuICAgICAgICAgICAgICAgICAgICAnIFwiJyArIFNvY2tKUy52ZXJzaW9uICsgJ1wiLicpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF1cmxVdGlscy5pc09yaWdpbkVxdWFsKHRyYW5zVXJsLCBsb2MuaHJlZikgfHxcbiAgICAgICAgICAgICF1cmxVdGlscy5pc09yaWdpbkVxdWFsKGJhc2VVcmwsIGxvYy5ocmVmKSkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ2FuXFwndCBjb25uZWN0IHRvIGRpZmZlcmVudCBkb21haW4gZnJvbSB3aXRoaW4gYW4gJyArXG4gICAgICAgICAgICAgICAgICAgICdpZnJhbWUuICgnICsgbG9jLmhyZWYgKyAnLCAnICsgdHJhbnNVcmwgKyAnLCAnICsgYmFzZVVybCArICcpJyk7XG4gICAgICAgIH1cbiAgICAgICAgZmFjYWRlID0gbmV3IEZhY2FkZUpTKG5ldyB0cmFuc3BvcnRNYXBbdHJhbnNwb3J0XSh0cmFuc1VybCwgYmFzZVVybCkpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ20nOlxuICAgICAgICBmYWNhZGUuX3NlbmQoaWZyYW1lTWVzc2FnZS5kYXRhKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdjJzpcbiAgICAgICAgaWYgKGZhY2FkZSkge1xuICAgICAgICAgIGZhY2FkZS5fY2xvc2UoKTtcbiAgICAgICAgfVxuICAgICAgICBmYWNhZGUgPSBudWxsO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgZXZlbnRVdGlscy5hdHRhY2hFdmVudCgnbWVzc2FnZScsIG9uTWVzc2FnZSk7XG5cbiAgICAvLyBTdGFydFxuICAgIGlmcmFtZVV0aWxzLnBvc3RNZXNzYWdlKCdzJyk7XG4gIH07XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgRXZlbnRFbWl0dGVyID0gcmVxdWlyZSgnZXZlbnRzJykuRXZlbnRFbWl0dGVyXG4gICwgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG4gICwgb2JqZWN0VXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzL29iamVjdCcpXG4gIDtcblxudmFyIGRlYnVnID0gZnVuY3Rpb24oKSB7fTtcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIGRlYnVnID0gcmVxdWlyZSgnZGVidWcnKSgnc29ja2pzLWNsaWVudDppbmZvLWFqYXgnKTtcbn1cblxuZnVuY3Rpb24gSW5mb0FqYXgodXJsLCBBamF4T2JqZWN0KSB7XG4gIEV2ZW50RW1pdHRlci5jYWxsKHRoaXMpO1xuXG4gIHZhciBzZWxmID0gdGhpcztcbiAgdmFyIHQwID0gK25ldyBEYXRlKCk7XG4gIHRoaXMueG8gPSBuZXcgQWpheE9iamVjdCgnR0VUJywgdXJsKTtcblxuICB0aGlzLnhvLm9uY2UoJ2ZpbmlzaCcsIGZ1bmN0aW9uKHN0YXR1cywgdGV4dCkge1xuICAgIHZhciBpbmZvLCBydHQ7XG4gICAgaWYgKHN0YXR1cyA9PT0gMjAwKSB7XG4gICAgICBydHQgPSAoK25ldyBEYXRlKCkpIC0gdDA7XG4gICAgICBpZiAodGV4dCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGluZm8gPSBKU09OLnBhcnNlKHRleHQpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgZGVidWcoJ2JhZCBqc29uJywgdGV4dCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKCFvYmplY3RVdGlscy5pc09iamVjdChpbmZvKSkge1xuICAgICAgICBpbmZvID0ge307XG4gICAgICB9XG4gICAgfVxuICAgIHNlbGYuZW1pdCgnZmluaXNoJywgaW5mbywgcnR0KTtcbiAgICBzZWxmLnJlbW92ZUFsbExpc3RlbmVycygpO1xuICB9KTtcbn1cblxuaW5oZXJpdHMoSW5mb0FqYXgsIEV2ZW50RW1pdHRlcik7XG5cbkluZm9BamF4LnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnJlbW92ZUFsbExpc3RlbmVycygpO1xuICB0aGlzLnhvLmNsb3NlKCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEluZm9BamF4O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG4gICwgRXZlbnRFbWl0dGVyID0gcmVxdWlyZSgnZXZlbnRzJykuRXZlbnRFbWl0dGVyXG4gICwgWEhSTG9jYWxPYmplY3QgPSByZXF1aXJlKCcuL3RyYW5zcG9ydC9zZW5kZXIveGhyLWxvY2FsJylcbiAgLCBJbmZvQWpheCA9IHJlcXVpcmUoJy4vaW5mby1hamF4JylcbiAgO1xuXG5mdW5jdGlvbiBJbmZvUmVjZWl2ZXJJZnJhbWUodHJhbnNVcmwpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICBFdmVudEVtaXR0ZXIuY2FsbCh0aGlzKTtcblxuICB0aGlzLmlyID0gbmV3IEluZm9BamF4KHRyYW5zVXJsLCBYSFJMb2NhbE9iamVjdCk7XG4gIHRoaXMuaXIub25jZSgnZmluaXNoJywgZnVuY3Rpb24oaW5mbywgcnR0KSB7XG4gICAgc2VsZi5pciA9IG51bGw7XG4gICAgc2VsZi5lbWl0KCdtZXNzYWdlJywgSlNPTi5zdHJpbmdpZnkoW2luZm8sIHJ0dF0pKTtcbiAgfSk7XG59XG5cbmluaGVyaXRzKEluZm9SZWNlaXZlcklmcmFtZSwgRXZlbnRFbWl0dGVyKTtcblxuSW5mb1JlY2VpdmVySWZyYW1lLnRyYW5zcG9ydE5hbWUgPSAnaWZyYW1lLWluZm8tcmVjZWl2ZXInO1xuXG5JbmZvUmVjZWl2ZXJJZnJhbWUucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24oKSB7XG4gIGlmICh0aGlzLmlyKSB7XG4gICAgdGhpcy5pci5jbG9zZSgpO1xuICAgIHRoaXMuaXIgPSBudWxsO1xuICB9XG4gIHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEluZm9SZWNlaXZlcklmcmFtZTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIEV2ZW50RW1pdHRlciA9IHJlcXVpcmUoJ2V2ZW50cycpLkV2ZW50RW1pdHRlclxuICAsIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxuICAsIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscy9ldmVudCcpXG4gICwgSWZyYW1lVHJhbnNwb3J0ID0gcmVxdWlyZSgnLi90cmFuc3BvcnQvaWZyYW1lJylcbiAgLCBJbmZvUmVjZWl2ZXJJZnJhbWUgPSByZXF1aXJlKCcuL2luZm8taWZyYW1lLXJlY2VpdmVyJylcbiAgO1xuXG52YXIgZGVidWcgPSBmdW5jdGlvbigpIHt9O1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgZGVidWcgPSByZXF1aXJlKCdkZWJ1ZycpKCdzb2NranMtY2xpZW50OmluZm8taWZyYW1lJyk7XG59XG5cbmZ1bmN0aW9uIEluZm9JZnJhbWUoYmFzZVVybCwgdXJsKSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgRXZlbnRFbWl0dGVyLmNhbGwodGhpcyk7XG5cbiAgdmFyIGdvID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGlmciA9IHNlbGYuaWZyID0gbmV3IElmcmFtZVRyYW5zcG9ydChJbmZvUmVjZWl2ZXJJZnJhbWUudHJhbnNwb3J0TmFtZSwgdXJsLCBiYXNlVXJsKTtcblxuICAgIGlmci5vbmNlKCdtZXNzYWdlJywgZnVuY3Rpb24obXNnKSB7XG4gICAgICBpZiAobXNnKSB7XG4gICAgICAgIHZhciBkO1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGQgPSBKU09OLnBhcnNlKG1zZyk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICBkZWJ1ZygnYmFkIGpzb24nLCBtc2cpO1xuICAgICAgICAgIHNlbGYuZW1pdCgnZmluaXNoJyk7XG4gICAgICAgICAgc2VsZi5jbG9zZSgpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBpbmZvID0gZFswXSwgcnR0ID0gZFsxXTtcbiAgICAgICAgc2VsZi5lbWl0KCdmaW5pc2gnLCBpbmZvLCBydHQpO1xuICAgICAgfVxuICAgICAgc2VsZi5jbG9zZSgpO1xuICAgIH0pO1xuXG4gICAgaWZyLm9uY2UoJ2Nsb3NlJywgZnVuY3Rpb24oKSB7XG4gICAgICBzZWxmLmVtaXQoJ2ZpbmlzaCcpO1xuICAgICAgc2VsZi5jbG9zZSgpO1xuICAgIH0pO1xuICB9O1xuXG4gIC8vIFRPRE8gdGhpcyBzZWVtcyB0aGUgc2FtZSBhcyB0aGUgJ25lZWRCb2R5JyBmcm9tIHRyYW5zcG9ydHNcbiAgaWYgKCFnbG9iYWwuZG9jdW1lbnQuYm9keSkge1xuICAgIHV0aWxzLmF0dGFjaEV2ZW50KCdsb2FkJywgZ28pO1xuICB9IGVsc2Uge1xuICAgIGdvKCk7XG4gIH1cbn1cblxuaW5oZXJpdHMoSW5mb0lmcmFtZSwgRXZlbnRFbWl0dGVyKTtcblxuSW5mb0lmcmFtZS5lbmFibGVkID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBJZnJhbWVUcmFuc3BvcnQuZW5hYmxlZCgpO1xufTtcblxuSW5mb0lmcmFtZS5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbigpIHtcbiAgaWYgKHRoaXMuaWZyKSB7XG4gICAgdGhpcy5pZnIuY2xvc2UoKTtcbiAgfVxuICB0aGlzLnJlbW92ZUFsbExpc3RlbmVycygpO1xuICB0aGlzLmlmciA9IG51bGw7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEluZm9JZnJhbWU7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBFdmVudEVtaXR0ZXIgPSByZXF1aXJlKCdldmVudHMnKS5FdmVudEVtaXR0ZXJcbiAgLCBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbiAgLCB1cmxVdGlscyA9IHJlcXVpcmUoJy4vdXRpbHMvdXJsJylcbiAgLCBYRFIgPSByZXF1aXJlKCcuL3RyYW5zcG9ydC9zZW5kZXIveGRyJylcbiAgLCBYSFJDb3JzID0gcmVxdWlyZSgnLi90cmFuc3BvcnQvc2VuZGVyL3hoci1jb3JzJylcbiAgLCBYSFJMb2NhbCA9IHJlcXVpcmUoJy4vdHJhbnNwb3J0L3NlbmRlci94aHItbG9jYWwnKVxuICAsIFhIUkZha2UgPSByZXF1aXJlKCcuL3RyYW5zcG9ydC9zZW5kZXIveGhyLWZha2UnKVxuICAsIEluZm9JZnJhbWUgPSByZXF1aXJlKCcuL2luZm8taWZyYW1lJylcbiAgLCBJbmZvQWpheCA9IHJlcXVpcmUoJy4vaW5mby1hamF4JylcbiAgO1xuXG52YXIgZGVidWcgPSBmdW5jdGlvbigpIHt9O1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgZGVidWcgPSByZXF1aXJlKCdkZWJ1ZycpKCdzb2NranMtY2xpZW50OmluZm8tcmVjZWl2ZXInKTtcbn1cblxuZnVuY3Rpb24gSW5mb1JlY2VpdmVyKGJhc2VVcmwsIHVybEluZm8pIHtcbiAgZGVidWcoYmFzZVVybCk7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgRXZlbnRFbWl0dGVyLmNhbGwodGhpcyk7XG5cbiAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICBzZWxmLmRvWGhyKGJhc2VVcmwsIHVybEluZm8pO1xuICB9LCAwKTtcbn1cblxuaW5oZXJpdHMoSW5mb1JlY2VpdmVyLCBFdmVudEVtaXR0ZXIpO1xuXG4vLyBUT0RPIHRoaXMgaXMgY3VycmVudGx5IGlnbm9yaW5nIHRoZSBsaXN0IG9mIGF2YWlsYWJsZSB0cmFuc3BvcnRzIGFuZCB0aGUgd2hpdGVsaXN0XG5cbkluZm9SZWNlaXZlci5fZ2V0UmVjZWl2ZXIgPSBmdW5jdGlvbihiYXNlVXJsLCB1cmwsIHVybEluZm8pIHtcbiAgLy8gZGV0ZXJtaW5lIG1ldGhvZCBvZiBDT1JTIHN1cHBvcnQgKGlmIG5lZWRlZClcbiAgaWYgKHVybEluZm8uc2FtZU9yaWdpbikge1xuICAgIHJldHVybiBuZXcgSW5mb0FqYXgodXJsLCBYSFJMb2NhbCk7XG4gIH1cbiAgaWYgKFhIUkNvcnMuZW5hYmxlZCkge1xuICAgIHJldHVybiBuZXcgSW5mb0FqYXgodXJsLCBYSFJDb3JzKTtcbiAgfVxuICBpZiAoWERSLmVuYWJsZWQgJiYgdXJsSW5mby5zYW1lU2NoZW1lKSB7XG4gICAgcmV0dXJuIG5ldyBJbmZvQWpheCh1cmwsIFhEUik7XG4gIH1cbiAgaWYgKEluZm9JZnJhbWUuZW5hYmxlZCgpKSB7XG4gICAgcmV0dXJuIG5ldyBJbmZvSWZyYW1lKGJhc2VVcmwsIHVybCk7XG4gIH1cbiAgcmV0dXJuIG5ldyBJbmZvQWpheCh1cmwsIFhIUkZha2UpO1xufTtcblxuSW5mb1JlY2VpdmVyLnByb3RvdHlwZS5kb1hociA9IGZ1bmN0aW9uKGJhc2VVcmwsIHVybEluZm8pIHtcbiAgdmFyIHNlbGYgPSB0aGlzXG4gICAgLCB1cmwgPSB1cmxVdGlscy5hZGRQYXRoKGJhc2VVcmwsICcvaW5mbycpXG4gICAgO1xuICBkZWJ1ZygnZG9YaHInLCB1cmwpO1xuXG4gIHRoaXMueG8gPSBJbmZvUmVjZWl2ZXIuX2dldFJlY2VpdmVyKGJhc2VVcmwsIHVybCwgdXJsSW5mbyk7XG5cbiAgdGhpcy50aW1lb3V0UmVmID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICBkZWJ1ZygndGltZW91dCcpO1xuICAgIHNlbGYuX2NsZWFudXAoZmFsc2UpO1xuICAgIHNlbGYuZW1pdCgnZmluaXNoJyk7XG4gIH0sIEluZm9SZWNlaXZlci50aW1lb3V0KTtcblxuICB0aGlzLnhvLm9uY2UoJ2ZpbmlzaCcsIGZ1bmN0aW9uKGluZm8sIHJ0dCkge1xuICAgIGRlYnVnKCdmaW5pc2gnLCBpbmZvLCBydHQpO1xuICAgIHNlbGYuX2NsZWFudXAodHJ1ZSk7XG4gICAgc2VsZi5lbWl0KCdmaW5pc2gnLCBpbmZvLCBydHQpO1xuICB9KTtcbn07XG5cbkluZm9SZWNlaXZlci5wcm90b3R5cGUuX2NsZWFudXAgPSBmdW5jdGlvbih3YXNDbGVhbikge1xuICBkZWJ1ZygnX2NsZWFudXAnKTtcbiAgY2xlYXJUaW1lb3V0KHRoaXMudGltZW91dFJlZik7XG4gIHRoaXMudGltZW91dFJlZiA9IG51bGw7XG4gIGlmICghd2FzQ2xlYW4gJiYgdGhpcy54bykge1xuICAgIHRoaXMueG8uY2xvc2UoKTtcbiAgfVxuICB0aGlzLnhvID0gbnVsbDtcbn07XG5cbkluZm9SZWNlaXZlci5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbigpIHtcbiAgZGVidWcoJ2Nsb3NlJyk7XG4gIHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKCk7XG4gIHRoaXMuX2NsZWFudXAoZmFsc2UpO1xufTtcblxuSW5mb1JlY2VpdmVyLnRpbWVvdXQgPSA4MDAwO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEluZm9SZWNlaXZlcjtcbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBnbG9iYWwubG9jYXRpb24gfHwge1xuICBvcmlnaW46ICdodHRwOi8vbG9jYWxob3N0OjgwJ1xuLCBwcm90b2NvbDogJ2h0dHA6J1xuLCBob3N0OiAnbG9jYWxob3N0J1xuLCBwb3J0OiA4MFxuLCBocmVmOiAnaHR0cDovL2xvY2FsaG9zdC8nXG4sIGhhc2g6ICcnXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5yZXF1aXJlKCcuL3NoaW1zJyk7XG5cbnZhciBVUkwgPSByZXF1aXJlKCd1cmwtcGFyc2UnKVxuICAsIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxuICAsIHJhbmRvbSA9IHJlcXVpcmUoJy4vdXRpbHMvcmFuZG9tJylcbiAgLCBlc2NhcGUgPSByZXF1aXJlKCcuL3V0aWxzL2VzY2FwZScpXG4gICwgdXJsVXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzL3VybCcpXG4gICwgZXZlbnRVdGlscyA9IHJlcXVpcmUoJy4vdXRpbHMvZXZlbnQnKVxuICAsIHRyYW5zcG9ydCA9IHJlcXVpcmUoJy4vdXRpbHMvdHJhbnNwb3J0JylcbiAgLCBvYmplY3RVdGlscyA9IHJlcXVpcmUoJy4vdXRpbHMvb2JqZWN0JylcbiAgLCBicm93c2VyID0gcmVxdWlyZSgnLi91dGlscy9icm93c2VyJylcbiAgLCBsb2cgPSByZXF1aXJlKCcuL3V0aWxzL2xvZycpXG4gICwgRXZlbnQgPSByZXF1aXJlKCcuL2V2ZW50L2V2ZW50JylcbiAgLCBFdmVudFRhcmdldCA9IHJlcXVpcmUoJy4vZXZlbnQvZXZlbnR0YXJnZXQnKVxuICAsIGxvYyA9IHJlcXVpcmUoJy4vbG9jYXRpb24nKVxuICAsIENsb3NlRXZlbnQgPSByZXF1aXJlKCcuL2V2ZW50L2Nsb3NlJylcbiAgLCBUcmFuc3BvcnRNZXNzYWdlRXZlbnQgPSByZXF1aXJlKCcuL2V2ZW50L3RyYW5zLW1lc3NhZ2UnKVxuICAsIEluZm9SZWNlaXZlciA9IHJlcXVpcmUoJy4vaW5mby1yZWNlaXZlcicpXG4gIDtcblxudmFyIGRlYnVnID0gZnVuY3Rpb24oKSB7fTtcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIGRlYnVnID0gcmVxdWlyZSgnZGVidWcnKSgnc29ja2pzLWNsaWVudDptYWluJyk7XG59XG5cbnZhciB0cmFuc3BvcnRzO1xuXG4vLyBmb2xsb3cgY29uc3RydWN0b3Igc3RlcHMgZGVmaW5lZCBhdCBodHRwOi8vZGV2LnczLm9yZy9odG1sNS93ZWJzb2NrZXRzLyN0aGUtd2Vic29ja2V0LWludGVyZmFjZVxuZnVuY3Rpb24gU29ja0pTKHVybCwgcHJvdG9jb2xzLCBvcHRpb25zKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBTb2NrSlMpKSB7XG4gICAgcmV0dXJuIG5ldyBTb2NrSlModXJsLCBwcm90b2NvbHMsIG9wdGlvbnMpO1xuICB9XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJGYWlsZWQgdG8gY29uc3RydWN0ICdTb2NrSlM6IDEgYXJndW1lbnQgcmVxdWlyZWQsIGJ1dCBvbmx5IDAgcHJlc2VudFwiKTtcbiAgfVxuICBFdmVudFRhcmdldC5jYWxsKHRoaXMpO1xuXG4gIHRoaXMucmVhZHlTdGF0ZSA9IFNvY2tKUy5DT05ORUNUSU5HO1xuICB0aGlzLmV4dGVuc2lvbnMgPSAnJztcbiAgdGhpcy5wcm90b2NvbCA9ICcnO1xuXG4gIC8vIG5vbi1zdGFuZGFyZCBleHRlbnNpb25cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIGlmIChvcHRpb25zLnByb3RvY29sc193aGl0ZWxpc3QpIHtcbiAgICBsb2cud2FybihcIidwcm90b2NvbHNfd2hpdGVsaXN0JyBpcyBERVBSRUNBVEVELiBVc2UgJ3RyYW5zcG9ydHMnIGluc3RlYWQuXCIpO1xuICB9XG4gIHRoaXMuX3RyYW5zcG9ydHNXaGl0ZWxpc3QgPSBvcHRpb25zLnRyYW5zcG9ydHM7XG4gIHRoaXMuX3RyYW5zcG9ydE9wdGlvbnMgPSBvcHRpb25zLnRyYW5zcG9ydE9wdGlvbnMgfHwge307XG4gIHRoaXMuX3RpbWVvdXQgPSBvcHRpb25zLnRpbWVvdXQgfHwgMDtcblxuICB2YXIgc2Vzc2lvbklkID0gb3B0aW9ucy5zZXNzaW9uSWQgfHwgODtcbiAgaWYgKHR5cGVvZiBzZXNzaW9uSWQgPT09ICdmdW5jdGlvbicpIHtcbiAgICB0aGlzLl9nZW5lcmF0ZVNlc3Npb25JZCA9IHNlc3Npb25JZDtcbiAgfSBlbHNlIGlmICh0eXBlb2Ygc2Vzc2lvbklkID09PSAnbnVtYmVyJykge1xuICAgIHRoaXMuX2dlbmVyYXRlU2Vzc2lvbklkID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gcmFuZG9tLnN0cmluZyhzZXNzaW9uSWQpO1xuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignSWYgc2Vzc2lvbklkIGlzIHVzZWQgaW4gdGhlIG9wdGlvbnMsIGl0IG5lZWRzIHRvIGJlIGEgbnVtYmVyIG9yIGEgZnVuY3Rpb24uJyk7XG4gIH1cblxuICB0aGlzLl9zZXJ2ZXIgPSBvcHRpb25zLnNlcnZlciB8fCByYW5kb20ubnVtYmVyU3RyaW5nKDEwMDApO1xuXG4gIC8vIFN0ZXAgMSBvZiBXUyBzcGVjIC0gcGFyc2UgYW5kIHZhbGlkYXRlIHRoZSB1cmwuIElzc3VlICM4XG4gIHZhciBwYXJzZWRVcmwgPSBuZXcgVVJMKHVybCk7XG4gIGlmICghcGFyc2VkVXJsLmhvc3QgfHwgIXBhcnNlZFVybC5wcm90b2NvbCkge1xuICAgIHRocm93IG5ldyBTeW50YXhFcnJvcihcIlRoZSBVUkwgJ1wiICsgdXJsICsgXCInIGlzIGludmFsaWRcIik7XG4gIH0gZWxzZSBpZiAocGFyc2VkVXJsLmhhc2gpIHtcbiAgICB0aHJvdyBuZXcgU3ludGF4RXJyb3IoJ1RoZSBVUkwgbXVzdCBub3QgY29udGFpbiBhIGZyYWdtZW50Jyk7XG4gIH0gZWxzZSBpZiAocGFyc2VkVXJsLnByb3RvY29sICE9PSAnaHR0cDonICYmIHBhcnNlZFVybC5wcm90b2NvbCAhPT0gJ2h0dHBzOicpIHtcbiAgICB0aHJvdyBuZXcgU3ludGF4RXJyb3IoXCJUaGUgVVJMJ3Mgc2NoZW1lIG11c3QgYmUgZWl0aGVyICdodHRwOicgb3IgJ2h0dHBzOicuICdcIiArIHBhcnNlZFVybC5wcm90b2NvbCArIFwiJyBpcyBub3QgYWxsb3dlZC5cIik7XG4gIH1cblxuICB2YXIgc2VjdXJlID0gcGFyc2VkVXJsLnByb3RvY29sID09PSAnaHR0cHM6JztcbiAgLy8gU3RlcCAyIC0gZG9uJ3QgYWxsb3cgc2VjdXJlIG9yaWdpbiB3aXRoIGFuIGluc2VjdXJlIHByb3RvY29sXG4gIGlmIChsb2MucHJvdG9jb2wgPT09ICdodHRwczonICYmICFzZWN1cmUpIHtcbiAgICAvLyBleGNlcHRpb24gaXMgMTI3LjAuMC4wLzggYW5kIDo6MSB1cmxzXG4gICAgaWYgKCF1cmxVdGlscy5pc0xvb3BiYWNrQWRkcihwYXJzZWRVcmwuaG9zdG5hbWUpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1NlY3VyaXR5RXJyb3I6IEFuIGluc2VjdXJlIFNvY2tKUyBjb25uZWN0aW9uIG1heSBub3QgYmUgaW5pdGlhdGVkIGZyb20gYSBwYWdlIGxvYWRlZCBvdmVyIEhUVFBTJyk7XG4gICAgfVxuICB9XG5cbiAgLy8gU3RlcCAzIC0gY2hlY2sgcG9ydCBhY2Nlc3MgLSBubyBuZWVkIGhlcmVcbiAgLy8gU3RlcCA0IC0gcGFyc2UgcHJvdG9jb2xzIGFyZ3VtZW50XG4gIGlmICghcHJvdG9jb2xzKSB7XG4gICAgcHJvdG9jb2xzID0gW107XG4gIH0gZWxzZSBpZiAoIUFycmF5LmlzQXJyYXkocHJvdG9jb2xzKSkge1xuICAgIHByb3RvY29scyA9IFtwcm90b2NvbHNdO1xuICB9XG5cbiAgLy8gU3RlcCA1IC0gY2hlY2sgcHJvdG9jb2xzIGFyZ3VtZW50XG4gIHZhciBzb3J0ZWRQcm90b2NvbHMgPSBwcm90b2NvbHMuc29ydCgpO1xuICBzb3J0ZWRQcm90b2NvbHMuZm9yRWFjaChmdW5jdGlvbihwcm90bywgaSkge1xuICAgIGlmICghcHJvdG8pIHtcbiAgICAgIHRocm93IG5ldyBTeW50YXhFcnJvcihcIlRoZSBwcm90b2NvbHMgZW50cnkgJ1wiICsgcHJvdG8gKyBcIicgaXMgaW52YWxpZC5cIik7XG4gICAgfVxuICAgIGlmIChpIDwgKHNvcnRlZFByb3RvY29scy5sZW5ndGggLSAxKSAmJiBwcm90byA9PT0gc29ydGVkUHJvdG9jb2xzW2kgKyAxXSkge1xuICAgICAgdGhyb3cgbmV3IFN5bnRheEVycm9yKFwiVGhlIHByb3RvY29scyBlbnRyeSAnXCIgKyBwcm90byArIFwiJyBpcyBkdXBsaWNhdGVkLlwiKTtcbiAgICB9XG4gIH0pO1xuXG4gIC8vIFN0ZXAgNiAtIGNvbnZlcnQgb3JpZ2luXG4gIHZhciBvID0gdXJsVXRpbHMuZ2V0T3JpZ2luKGxvYy5ocmVmKTtcbiAgdGhpcy5fb3JpZ2luID0gbyA/IG8udG9Mb3dlckNhc2UoKSA6IG51bGw7XG5cbiAgLy8gcmVtb3ZlIHRoZSB0cmFpbGluZyBzbGFzaFxuICBwYXJzZWRVcmwuc2V0KCdwYXRobmFtZScsIHBhcnNlZFVybC5wYXRobmFtZS5yZXBsYWNlKC9cXC8rJC8sICcnKSk7XG5cbiAgLy8gc3RvcmUgdGhlIHNhbml0aXplZCB1cmxcbiAgdGhpcy51cmwgPSBwYXJzZWRVcmwuaHJlZjtcbiAgZGVidWcoJ3VzaW5nIHVybCcsIHRoaXMudXJsKTtcblxuICAvLyBTdGVwIDcgLSBzdGFydCBjb25uZWN0aW9uIGluIGJhY2tncm91bmRcbiAgLy8gb2J0YWluIHNlcnZlciBpbmZvXG4gIC8vIGh0dHA6Ly9zb2NranMuZ2l0aHViLmlvL3NvY2tqcy1wcm90b2NvbC9zb2NranMtcHJvdG9jb2wtMC4zLjMuaHRtbCNzZWN0aW9uLTI2XG4gIHRoaXMuX3VybEluZm8gPSB7XG4gICAgbnVsbE9yaWdpbjogIWJyb3dzZXIuaGFzRG9tYWluKClcbiAgLCBzYW1lT3JpZ2luOiB1cmxVdGlscy5pc09yaWdpbkVxdWFsKHRoaXMudXJsLCBsb2MuaHJlZilcbiAgLCBzYW1lU2NoZW1lOiB1cmxVdGlscy5pc1NjaGVtZUVxdWFsKHRoaXMudXJsLCBsb2MuaHJlZilcbiAgfTtcblxuICB0aGlzLl9pciA9IG5ldyBJbmZvUmVjZWl2ZXIodGhpcy51cmwsIHRoaXMuX3VybEluZm8pO1xuICB0aGlzLl9pci5vbmNlKCdmaW5pc2gnLCB0aGlzLl9yZWNlaXZlSW5mby5iaW5kKHRoaXMpKTtcbn1cblxuaW5oZXJpdHMoU29ja0pTLCBFdmVudFRhcmdldCk7XG5cbmZ1bmN0aW9uIHVzZXJTZXRDb2RlKGNvZGUpIHtcbiAgcmV0dXJuIGNvZGUgPT09IDEwMDAgfHwgKGNvZGUgPj0gMzAwMCAmJiBjb2RlIDw9IDQ5OTkpO1xufVxuXG5Tb2NrSlMucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24oY29kZSwgcmVhc29uKSB7XG4gIC8vIFN0ZXAgMVxuICBpZiAoY29kZSAmJiAhdXNlclNldENvZGUoY29kZSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWRBY2Nlc3NFcnJvcjogSW52YWxpZCBjb2RlJyk7XG4gIH1cbiAgLy8gU3RlcCAyLjQgc3RhdGVzIHRoZSBtYXggaXMgMTIzIGJ5dGVzLCBidXQgd2UgYXJlIGp1c3QgY2hlY2tpbmcgbGVuZ3RoXG4gIGlmIChyZWFzb24gJiYgcmVhc29uLmxlbmd0aCA+IDEyMykge1xuICAgIHRocm93IG5ldyBTeW50YXhFcnJvcigncmVhc29uIGFyZ3VtZW50IGhhcyBhbiBpbnZhbGlkIGxlbmd0aCcpO1xuICB9XG5cbiAgLy8gU3RlcCAzLjFcbiAgaWYgKHRoaXMucmVhZHlTdGF0ZSA9PT0gU29ja0pTLkNMT1NJTkcgfHwgdGhpcy5yZWFkeVN0YXRlID09PSBTb2NrSlMuQ0xPU0VEKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gVE9ETyBsb29rIGF0IGRvY3MgdG8gZGV0ZXJtaW5lIGhvdyB0byBzZXQgdGhpc1xuICB2YXIgd2FzQ2xlYW4gPSB0cnVlO1xuICB0aGlzLl9jbG9zZShjb2RlIHx8IDEwMDAsIHJlYXNvbiB8fCAnTm9ybWFsIGNsb3N1cmUnLCB3YXNDbGVhbik7XG59O1xuXG5Tb2NrSlMucHJvdG90eXBlLnNlbmQgPSBmdW5jdGlvbihkYXRhKSB7XG4gIC8vICMxMyAtIGNvbnZlcnQgYW55dGhpbmcgbm9uLXN0cmluZyB0byBzdHJpbmdcbiAgLy8gVE9ETyB0aGlzIGN1cnJlbnRseSB0dXJucyBvYmplY3RzIGludG8gW29iamVjdCBPYmplY3RdXG4gIGlmICh0eXBlb2YgZGF0YSAhPT0gJ3N0cmluZycpIHtcbiAgICBkYXRhID0gJycgKyBkYXRhO1xuICB9XG4gIGlmICh0aGlzLnJlYWR5U3RhdGUgPT09IFNvY2tKUy5DT05ORUNUSU5HKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkU3RhdGVFcnJvcjogVGhlIGNvbm5lY3Rpb24gaGFzIG5vdCBiZWVuIGVzdGFibGlzaGVkIHlldCcpO1xuICB9XG4gIGlmICh0aGlzLnJlYWR5U3RhdGUgIT09IFNvY2tKUy5PUEVOKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHRoaXMuX3RyYW5zcG9ydC5zZW5kKGVzY2FwZS5xdW90ZShkYXRhKSk7XG59O1xuXG5Tb2NrSlMudmVyc2lvbiA9IHJlcXVpcmUoJy4vdmVyc2lvbicpO1xuXG5Tb2NrSlMuQ09OTkVDVElORyA9IDA7XG5Tb2NrSlMuT1BFTiA9IDE7XG5Tb2NrSlMuQ0xPU0lORyA9IDI7XG5Tb2NrSlMuQ0xPU0VEID0gMztcblxuU29ja0pTLnByb3RvdHlwZS5fcmVjZWl2ZUluZm8gPSBmdW5jdGlvbihpbmZvLCBydHQpIHtcbiAgZGVidWcoJ19yZWNlaXZlSW5mbycsIHJ0dCk7XG4gIHRoaXMuX2lyID0gbnVsbDtcbiAgaWYgKCFpbmZvKSB7XG4gICAgdGhpcy5fY2xvc2UoMTAwMiwgJ0Nhbm5vdCBjb25uZWN0IHRvIHNlcnZlcicpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIGVzdGFibGlzaCBhIHJvdW5kLXRyaXAgdGltZW91dCAoUlRPKSBiYXNlZCBvbiB0aGVcbiAgLy8gcm91bmQtdHJpcCB0aW1lIChSVFQpXG4gIHRoaXMuX3J0byA9IHRoaXMuY291bnRSVE8ocnR0KTtcbiAgLy8gYWxsb3cgc2VydmVyIHRvIG92ZXJyaWRlIHVybCB1c2VkIGZvciB0aGUgYWN0dWFsIHRyYW5zcG9ydFxuICB0aGlzLl90cmFuc1VybCA9IGluZm8uYmFzZV91cmwgPyBpbmZvLmJhc2VfdXJsIDogdGhpcy51cmw7XG4gIGluZm8gPSBvYmplY3RVdGlscy5leHRlbmQoaW5mbywgdGhpcy5fdXJsSW5mbyk7XG4gIGRlYnVnKCdpbmZvJywgaW5mbyk7XG4gIC8vIGRldGVybWluZSBsaXN0IG9mIGRlc2lyZWQgYW5kIHN1cHBvcnRlZCB0cmFuc3BvcnRzXG4gIHZhciBlbmFibGVkVHJhbnNwb3J0cyA9IHRyYW5zcG9ydHMuZmlsdGVyVG9FbmFibGVkKHRoaXMuX3RyYW5zcG9ydHNXaGl0ZWxpc3QsIGluZm8pO1xuICB0aGlzLl90cmFuc3BvcnRzID0gZW5hYmxlZFRyYW5zcG9ydHMubWFpbjtcbiAgZGVidWcodGhpcy5fdHJhbnNwb3J0cy5sZW5ndGggKyAnIGVuYWJsZWQgdHJhbnNwb3J0cycpO1xuXG4gIHRoaXMuX2Nvbm5lY3QoKTtcbn07XG5cblNvY2tKUy5wcm90b3R5cGUuX2Nvbm5lY3QgPSBmdW5jdGlvbigpIHtcbiAgZm9yICh2YXIgVHJhbnNwb3J0ID0gdGhpcy5fdHJhbnNwb3J0cy5zaGlmdCgpOyBUcmFuc3BvcnQ7IFRyYW5zcG9ydCA9IHRoaXMuX3RyYW5zcG9ydHMuc2hpZnQoKSkge1xuICAgIGRlYnVnKCdhdHRlbXB0JywgVHJhbnNwb3J0LnRyYW5zcG9ydE5hbWUpO1xuICAgIGlmIChUcmFuc3BvcnQubmVlZEJvZHkpIHtcbiAgICAgIGlmICghZ2xvYmFsLmRvY3VtZW50LmJvZHkgfHxcbiAgICAgICAgICAodHlwZW9mIGdsb2JhbC5kb2N1bWVudC5yZWFkeVN0YXRlICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICAgICAgZ2xvYmFsLmRvY3VtZW50LnJlYWR5U3RhdGUgIT09ICdjb21wbGV0ZScgJiZcbiAgICAgICAgICAgIGdsb2JhbC5kb2N1bWVudC5yZWFkeVN0YXRlICE9PSAnaW50ZXJhY3RpdmUnKSkge1xuICAgICAgICBkZWJ1Zygnd2FpdGluZyBmb3IgYm9keScpO1xuICAgICAgICB0aGlzLl90cmFuc3BvcnRzLnVuc2hpZnQoVHJhbnNwb3J0KTtcbiAgICAgICAgZXZlbnRVdGlscy5hdHRhY2hFdmVudCgnbG9hZCcsIHRoaXMuX2Nvbm5lY3QuYmluZCh0aGlzKSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBjYWxjdWxhdGUgdGltZW91dCBiYXNlZCBvbiBSVE8gYW5kIHJvdW5kIHRyaXBzLiBEZWZhdWx0IHRvIDVzXG4gICAgdmFyIHRpbWVvdXRNcyA9IE1hdGgubWF4KHRoaXMuX3RpbWVvdXQsICh0aGlzLl9ydG8gKiBUcmFuc3BvcnQucm91bmRUcmlwcykgfHwgNTAwMCk7XG4gICAgdGhpcy5fdHJhbnNwb3J0VGltZW91dElkID0gc2V0VGltZW91dCh0aGlzLl90cmFuc3BvcnRUaW1lb3V0LmJpbmQodGhpcyksIHRpbWVvdXRNcyk7XG4gICAgZGVidWcoJ3VzaW5nIHRpbWVvdXQnLCB0aW1lb3V0TXMpO1xuXG4gICAgdmFyIHRyYW5zcG9ydFVybCA9IHVybFV0aWxzLmFkZFBhdGgodGhpcy5fdHJhbnNVcmwsICcvJyArIHRoaXMuX3NlcnZlciArICcvJyArIHRoaXMuX2dlbmVyYXRlU2Vzc2lvbklkKCkpO1xuICAgIHZhciBvcHRpb25zID0gdGhpcy5fdHJhbnNwb3J0T3B0aW9uc1tUcmFuc3BvcnQudHJhbnNwb3J0TmFtZV07XG4gICAgZGVidWcoJ3RyYW5zcG9ydCB1cmwnLCB0cmFuc3BvcnRVcmwpO1xuICAgIHZhciB0cmFuc3BvcnRPYmogPSBuZXcgVHJhbnNwb3J0KHRyYW5zcG9ydFVybCwgdGhpcy5fdHJhbnNVcmwsIG9wdGlvbnMpO1xuICAgIHRyYW5zcG9ydE9iai5vbignbWVzc2FnZScsIHRoaXMuX3RyYW5zcG9ydE1lc3NhZ2UuYmluZCh0aGlzKSk7XG4gICAgdHJhbnNwb3J0T2JqLm9uY2UoJ2Nsb3NlJywgdGhpcy5fdHJhbnNwb3J0Q2xvc2UuYmluZCh0aGlzKSk7XG4gICAgdHJhbnNwb3J0T2JqLnRyYW5zcG9ydE5hbWUgPSBUcmFuc3BvcnQudHJhbnNwb3J0TmFtZTtcbiAgICB0aGlzLl90cmFuc3BvcnQgPSB0cmFuc3BvcnRPYmo7XG5cbiAgICByZXR1cm47XG4gIH1cbiAgdGhpcy5fY2xvc2UoMjAwMCwgJ0FsbCB0cmFuc3BvcnRzIGZhaWxlZCcsIGZhbHNlKTtcbn07XG5cblNvY2tKUy5wcm90b3R5cGUuX3RyYW5zcG9ydFRpbWVvdXQgPSBmdW5jdGlvbigpIHtcbiAgZGVidWcoJ190cmFuc3BvcnRUaW1lb3V0Jyk7XG4gIGlmICh0aGlzLnJlYWR5U3RhdGUgPT09IFNvY2tKUy5DT05ORUNUSU5HKSB7XG4gICAgaWYgKHRoaXMuX3RyYW5zcG9ydCkge1xuICAgICAgdGhpcy5fdHJhbnNwb3J0LmNsb3NlKCk7XG4gICAgfVxuXG4gICAgdGhpcy5fdHJhbnNwb3J0Q2xvc2UoMjAwNywgJ1RyYW5zcG9ydCB0aW1lZCBvdXQnKTtcbiAgfVxufTtcblxuU29ja0pTLnByb3RvdHlwZS5fdHJhbnNwb3J0TWVzc2FnZSA9IGZ1bmN0aW9uKG1zZykge1xuICBkZWJ1ZygnX3RyYW5zcG9ydE1lc3NhZ2UnLCBtc2cpO1xuICB2YXIgc2VsZiA9IHRoaXNcbiAgICAsIHR5cGUgPSBtc2cuc2xpY2UoMCwgMSlcbiAgICAsIGNvbnRlbnQgPSBtc2cuc2xpY2UoMSlcbiAgICAsIHBheWxvYWRcbiAgICA7XG5cbiAgLy8gZmlyc3QgY2hlY2sgZm9yIG1lc3NhZ2VzIHRoYXQgZG9uJ3QgbmVlZCBhIHBheWxvYWRcbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSAnbyc6XG4gICAgICB0aGlzLl9vcGVuKCk7XG4gICAgICByZXR1cm47XG4gICAgY2FzZSAnaCc6XG4gICAgICB0aGlzLmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KCdoZWFydGJlYXQnKSk7XG4gICAgICBkZWJ1ZygnaGVhcnRiZWF0JywgdGhpcy50cmFuc3BvcnQpO1xuICAgICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKGNvbnRlbnQpIHtcbiAgICB0cnkge1xuICAgICAgcGF5bG9hZCA9IEpTT04ucGFyc2UoY29udGVudCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgZGVidWcoJ2JhZCBqc29uJywgY29udGVudCk7XG4gICAgfVxuICB9XG5cbiAgaWYgKHR5cGVvZiBwYXlsb2FkID09PSAndW5kZWZpbmVkJykge1xuICAgIGRlYnVnKCdlbXB0eSBwYXlsb2FkJywgY29udGVudCk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSAnYSc6XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShwYXlsb2FkKSkge1xuICAgICAgICBwYXlsb2FkLmZvckVhY2goZnVuY3Rpb24ocCkge1xuICAgICAgICAgIGRlYnVnKCdtZXNzYWdlJywgc2VsZi50cmFuc3BvcnQsIHApO1xuICAgICAgICAgIHNlbGYuZGlzcGF0Y2hFdmVudChuZXcgVHJhbnNwb3J0TWVzc2FnZUV2ZW50KHApKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlICdtJzpcbiAgICAgIGRlYnVnKCdtZXNzYWdlJywgdGhpcy50cmFuc3BvcnQsIHBheWxvYWQpO1xuICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KG5ldyBUcmFuc3BvcnRNZXNzYWdlRXZlbnQocGF5bG9hZCkpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnYyc6XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShwYXlsb2FkKSAmJiBwYXlsb2FkLmxlbmd0aCA9PT0gMikge1xuICAgICAgICB0aGlzLl9jbG9zZShwYXlsb2FkWzBdLCBwYXlsb2FkWzFdLCB0cnVlKTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICB9XG59O1xuXG5Tb2NrSlMucHJvdG90eXBlLl90cmFuc3BvcnRDbG9zZSA9IGZ1bmN0aW9uKGNvZGUsIHJlYXNvbikge1xuICBkZWJ1ZygnX3RyYW5zcG9ydENsb3NlJywgdGhpcy50cmFuc3BvcnQsIGNvZGUsIHJlYXNvbik7XG4gIGlmICh0aGlzLl90cmFuc3BvcnQpIHtcbiAgICB0aGlzLl90cmFuc3BvcnQucmVtb3ZlQWxsTGlzdGVuZXJzKCk7XG4gICAgdGhpcy5fdHJhbnNwb3J0ID0gbnVsbDtcbiAgICB0aGlzLnRyYW5zcG9ydCA9IG51bGw7XG4gIH1cblxuICBpZiAoIXVzZXJTZXRDb2RlKGNvZGUpICYmIGNvZGUgIT09IDIwMDAgJiYgdGhpcy5yZWFkeVN0YXRlID09PSBTb2NrSlMuQ09OTkVDVElORykge1xuICAgIHRoaXMuX2Nvbm5lY3QoKTtcbiAgICByZXR1cm47XG4gIH1cblxuICB0aGlzLl9jbG9zZShjb2RlLCByZWFzb24pO1xufTtcblxuU29ja0pTLnByb3RvdHlwZS5fb3BlbiA9IGZ1bmN0aW9uKCkge1xuICBkZWJ1ZygnX29wZW4nLCB0aGlzLl90cmFuc3BvcnQgJiYgdGhpcy5fdHJhbnNwb3J0LnRyYW5zcG9ydE5hbWUsIHRoaXMucmVhZHlTdGF0ZSk7XG4gIGlmICh0aGlzLnJlYWR5U3RhdGUgPT09IFNvY2tKUy5DT05ORUNUSU5HKSB7XG4gICAgaWYgKHRoaXMuX3RyYW5zcG9ydFRpbWVvdXRJZCkge1xuICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuX3RyYW5zcG9ydFRpbWVvdXRJZCk7XG4gICAgICB0aGlzLl90cmFuc3BvcnRUaW1lb3V0SWQgPSBudWxsO1xuICAgIH1cbiAgICB0aGlzLnJlYWR5U3RhdGUgPSBTb2NrSlMuT1BFTjtcbiAgICB0aGlzLnRyYW5zcG9ydCA9IHRoaXMuX3RyYW5zcG9ydC50cmFuc3BvcnROYW1lO1xuICAgIHRoaXMuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoJ29wZW4nKSk7XG4gICAgZGVidWcoJ2Nvbm5lY3RlZCcsIHRoaXMudHJhbnNwb3J0KTtcbiAgfSBlbHNlIHtcbiAgICAvLyBUaGUgc2VydmVyIG1pZ2h0IGhhdmUgYmVlbiByZXN0YXJ0ZWQsIGFuZCBsb3N0IHRyYWNrIG9mIG91clxuICAgIC8vIGNvbm5lY3Rpb24uXG4gICAgdGhpcy5fY2xvc2UoMTAwNiwgJ1NlcnZlciBsb3N0IHNlc3Npb24nKTtcbiAgfVxufTtcblxuU29ja0pTLnByb3RvdHlwZS5fY2xvc2UgPSBmdW5jdGlvbihjb2RlLCByZWFzb24sIHdhc0NsZWFuKSB7XG4gIGRlYnVnKCdfY2xvc2UnLCB0aGlzLnRyYW5zcG9ydCwgY29kZSwgcmVhc29uLCB3YXNDbGVhbiwgdGhpcy5yZWFkeVN0YXRlKTtcbiAgdmFyIGZvcmNlRmFpbCA9IGZhbHNlO1xuXG4gIGlmICh0aGlzLl9pcikge1xuICAgIGZvcmNlRmFpbCA9IHRydWU7XG4gICAgdGhpcy5faXIuY2xvc2UoKTtcbiAgICB0aGlzLl9pciA9IG51bGw7XG4gIH1cbiAgaWYgKHRoaXMuX3RyYW5zcG9ydCkge1xuICAgIHRoaXMuX3RyYW5zcG9ydC5jbG9zZSgpO1xuICAgIHRoaXMuX3RyYW5zcG9ydCA9IG51bGw7XG4gICAgdGhpcy50cmFuc3BvcnQgPSBudWxsO1xuICB9XG5cbiAgaWYgKHRoaXMucmVhZHlTdGF0ZSA9PT0gU29ja0pTLkNMT1NFRCkge1xuICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZFN0YXRlRXJyb3I6IFNvY2tKUyBoYXMgYWxyZWFkeSBiZWVuIGNsb3NlZCcpO1xuICB9XG5cbiAgdGhpcy5yZWFkeVN0YXRlID0gU29ja0pTLkNMT1NJTkc7XG4gIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5yZWFkeVN0YXRlID0gU29ja0pTLkNMT1NFRDtcblxuICAgIGlmIChmb3JjZUZhaWwpIHtcbiAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoJ2Vycm9yJykpO1xuICAgIH1cblxuICAgIHZhciBlID0gbmV3IENsb3NlRXZlbnQoJ2Nsb3NlJyk7XG4gICAgZS53YXNDbGVhbiA9IHdhc0NsZWFuIHx8IGZhbHNlO1xuICAgIGUuY29kZSA9IGNvZGUgfHwgMTAwMDtcbiAgICBlLnJlYXNvbiA9IHJlYXNvbjtcblxuICAgIHRoaXMuZGlzcGF0Y2hFdmVudChlKTtcbiAgICB0aGlzLm9ubWVzc2FnZSA9IHRoaXMub25jbG9zZSA9IHRoaXMub25lcnJvciA9IG51bGw7XG4gICAgZGVidWcoJ2Rpc2Nvbm5lY3RlZCcpO1xuICB9LmJpbmQodGhpcyksIDApO1xufTtcblxuLy8gU2VlOiBodHRwOi8vd3d3LmVyZy5hYmRuLmFjLnVrL35nZXJyaXQvZGNjcC9ub3Rlcy9jY2lkMi9ydG9fZXN0aW1hdG9yL1xuLy8gYW5kIFJGQyAyOTg4LlxuU29ja0pTLnByb3RvdHlwZS5jb3VudFJUTyA9IGZ1bmN0aW9uKHJ0dCkge1xuICAvLyBJbiBhIGxvY2FsIGVudmlyb25tZW50LCB3aGVuIHVzaW5nIElFOC85IGFuZCB0aGUgYGpzb25wLXBvbGxpbmdgXG4gIC8vIHRyYW5zcG9ydCB0aGUgdGltZSBuZWVkZWQgdG8gZXN0YWJsaXNoIGEgY29ubmVjdGlvbiAodGhlIHRpbWUgdGhhdCBwYXNzXG4gIC8vIGZyb20gdGhlIG9wZW5pbmcgb2YgdGhlIHRyYW5zcG9ydCB0byB0aGUgY2FsbCBvZiBgX2Rpc3BhdGNoT3BlbmApIGlzXG4gIC8vIGFyb3VuZCAyMDBtc2VjICh0aGUgbG93ZXIgYm91bmQgdXNlZCBpbiB0aGUgYXJ0aWNsZSBhYm92ZSkgYW5kIHRoaXNcbiAgLy8gY2F1c2VzIHNwdXJpb3VzIHRpbWVvdXRzLiBGb3IgdGhpcyByZWFzb24gd2UgY2FsY3VsYXRlIGEgdmFsdWUgc2xpZ2h0bHlcbiAgLy8gbGFyZ2VyIHRoYW4gdGhhdCB1c2VkIGluIHRoZSBhcnRpY2xlLlxuICBpZiAocnR0ID4gMTAwKSB7XG4gICAgcmV0dXJuIDQgKiBydHQ7IC8vIHJ0byA+IDQwMG1zZWNcbiAgfVxuICByZXR1cm4gMzAwICsgcnR0OyAvLyAzMDBtc2VjIDwgcnRvIDw9IDQwMG1zZWNcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oYXZhaWxhYmxlVHJhbnNwb3J0cykge1xuICB0cmFuc3BvcnRzID0gdHJhbnNwb3J0KGF2YWlsYWJsZVRyYW5zcG9ydHMpO1xuICByZXF1aXJlKCcuL2lmcmFtZS1ib290c3RyYXAnKShTb2NrSlMsIGF2YWlsYWJsZVRyYW5zcG9ydHMpO1xuICByZXR1cm4gU29ja0pTO1xufTtcbiIsIi8qIGVzbGludC1kaXNhYmxlICovXG4vKiBqc2NzOiBkaXNhYmxlICovXG4ndXNlIHN0cmljdCc7XG5cbi8vIHB1bGxlZCBzcGVjaWZpYyBzaGltcyBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9lcy1zaGltcy9lczUtc2hpbVxuXG52YXIgQXJyYXlQcm90b3R5cGUgPSBBcnJheS5wcm90b3R5cGU7XG52YXIgT2JqZWN0UHJvdG90eXBlID0gT2JqZWN0LnByb3RvdHlwZTtcbnZhciBGdW5jdGlvblByb3RvdHlwZSA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcbnZhciBTdHJpbmdQcm90b3R5cGUgPSBTdHJpbmcucHJvdG90eXBlO1xudmFyIGFycmF5X3NsaWNlID0gQXJyYXlQcm90b3R5cGUuc2xpY2U7XG5cbnZhciBfdG9TdHJpbmcgPSBPYmplY3RQcm90b3R5cGUudG9TdHJpbmc7XG52YXIgaXNGdW5jdGlvbiA9IGZ1bmN0aW9uICh2YWwpIHtcbiAgICByZXR1cm4gT2JqZWN0UHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcbn07XG52YXIgaXNBcnJheSA9IGZ1bmN0aW9uIGlzQXJyYXkob2JqKSB7XG4gICAgcmV0dXJuIF90b1N0cmluZy5jYWxsKG9iaikgPT09ICdbb2JqZWN0IEFycmF5XSc7XG59O1xudmFyIGlzU3RyaW5nID0gZnVuY3Rpb24gaXNTdHJpbmcob2JqKSB7XG4gICAgcmV0dXJuIF90b1N0cmluZy5jYWxsKG9iaikgPT09ICdbb2JqZWN0IFN0cmluZ10nO1xufTtcblxudmFyIHN1cHBvcnRzRGVzY3JpcHRvcnMgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgKGZ1bmN0aW9uICgpIHtcbiAgICB0cnkge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sICd4Jywge30pO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoIChlKSB7IC8qIHRoaXMgaXMgRVMzICovXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59KCkpO1xuXG4vLyBEZWZpbmUgY29uZmlndXJhYmxlLCB3cml0YWJsZSBhbmQgbm9uLWVudW1lcmFibGUgcHJvcHNcbi8vIGlmIHRoZXkgZG9uJ3QgZXhpc3QuXG52YXIgZGVmaW5lUHJvcGVydHk7XG5pZiAoc3VwcG9ydHNEZXNjcmlwdG9ycykge1xuICAgIGRlZmluZVByb3BlcnR5ID0gZnVuY3Rpb24gKG9iamVjdCwgbmFtZSwgbWV0aG9kLCBmb3JjZUFzc2lnbikge1xuICAgICAgICBpZiAoIWZvcmNlQXNzaWduICYmIChuYW1lIGluIG9iamVjdCkpIHsgcmV0dXJuOyB9XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmplY3QsIG5hbWUsIHtcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogbWV0aG9kXG4gICAgICAgIH0pO1xuICAgIH07XG59IGVsc2Uge1xuICAgIGRlZmluZVByb3BlcnR5ID0gZnVuY3Rpb24gKG9iamVjdCwgbmFtZSwgbWV0aG9kLCBmb3JjZUFzc2lnbikge1xuICAgICAgICBpZiAoIWZvcmNlQXNzaWduICYmIChuYW1lIGluIG9iamVjdCkpIHsgcmV0dXJuOyB9XG4gICAgICAgIG9iamVjdFtuYW1lXSA9IG1ldGhvZDtcbiAgICB9O1xufVxudmFyIGRlZmluZVByb3BlcnRpZXMgPSBmdW5jdGlvbiAob2JqZWN0LCBtYXAsIGZvcmNlQXNzaWduKSB7XG4gICAgZm9yICh2YXIgbmFtZSBpbiBtYXApIHtcbiAgICAgICAgaWYgKE9iamVjdFByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1hcCwgbmFtZSkpIHtcbiAgICAgICAgICBkZWZpbmVQcm9wZXJ0eShvYmplY3QsIG5hbWUsIG1hcFtuYW1lXSwgZm9yY2VBc3NpZ24pO1xuICAgICAgICB9XG4gICAgfVxufTtcblxudmFyIHRvT2JqZWN0ID0gZnVuY3Rpb24gKG8pIHtcbiAgICBpZiAobyA9PSBudWxsKSB7IC8vIHRoaXMgbWF0Y2hlcyBib3RoIG51bGwgYW5kIHVuZGVmaW5lZFxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiY2FuJ3QgY29udmVydCBcIiArIG8gKyAnIHRvIG9iamVjdCcpO1xuICAgIH1cbiAgICByZXR1cm4gT2JqZWN0KG8pO1xufTtcblxuLy9cbi8vIFV0aWxcbi8vID09PT09PVxuLy9cblxuLy8gRVM1IDkuNFxuLy8gaHR0cDovL2VzNS5naXRodWIuY29tLyN4OS40XG4vLyBodHRwOi8vanNwZXJmLmNvbS90by1pbnRlZ2VyXG5cbmZ1bmN0aW9uIHRvSW50ZWdlcihudW0pIHtcbiAgICB2YXIgbiA9ICtudW07XG4gICAgaWYgKG4gIT09IG4pIHsgLy8gaXNOYU5cbiAgICAgICAgbiA9IDA7XG4gICAgfSBlbHNlIGlmIChuICE9PSAwICYmIG4gIT09ICgxIC8gMCkgJiYgbiAhPT0gLSgxIC8gMCkpIHtcbiAgICAgICAgbiA9IChuID4gMCB8fCAtMSkgKiBNYXRoLmZsb29yKE1hdGguYWJzKG4pKTtcbiAgICB9XG4gICAgcmV0dXJuIG47XG59XG5cbmZ1bmN0aW9uIFRvVWludDMyKHgpIHtcbiAgICByZXR1cm4geCA+Pj4gMDtcbn1cblxuLy9cbi8vIEZ1bmN0aW9uXG4vLyA9PT09PT09PVxuLy9cblxuLy8gRVMtNSAxNS4zLjQuNVxuLy8gaHR0cDovL2VzNS5naXRodWIuY29tLyN4MTUuMy40LjVcblxuZnVuY3Rpb24gRW1wdHkoKSB7fVxuXG5kZWZpbmVQcm9wZXJ0aWVzKEZ1bmN0aW9uUHJvdG90eXBlLCB7XG4gICAgYmluZDogZnVuY3Rpb24gYmluZCh0aGF0KSB7IC8vIC5sZW5ndGggaXMgMVxuICAgICAgICAvLyAxLiBMZXQgVGFyZ2V0IGJlIHRoZSB0aGlzIHZhbHVlLlxuICAgICAgICB2YXIgdGFyZ2V0ID0gdGhpcztcbiAgICAgICAgLy8gMi4gSWYgSXNDYWxsYWJsZShUYXJnZXQpIGlzIGZhbHNlLCB0aHJvdyBhIFR5cGVFcnJvciBleGNlcHRpb24uXG4gICAgICAgIGlmICghaXNGdW5jdGlvbih0YXJnZXQpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdGdW5jdGlvbi5wcm90b3R5cGUuYmluZCBjYWxsZWQgb24gaW5jb21wYXRpYmxlICcgKyB0YXJnZXQpO1xuICAgICAgICB9XG4gICAgICAgIC8vIDMuIExldCBBIGJlIGEgbmV3IChwb3NzaWJseSBlbXB0eSkgaW50ZXJuYWwgbGlzdCBvZiBhbGwgb2YgdGhlXG4gICAgICAgIC8vICAgYXJndW1lbnQgdmFsdWVzIHByb3ZpZGVkIGFmdGVyIHRoaXNBcmcgKGFyZzEsIGFyZzIgZXRjKSwgaW4gb3JkZXIuXG4gICAgICAgIC8vIFhYWCBzbGljZWRBcmdzIHdpbGwgc3RhbmQgaW4gZm9yIFwiQVwiIGlmIHVzZWRcbiAgICAgICAgdmFyIGFyZ3MgPSBhcnJheV9zbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7IC8vIGZvciBub3JtYWwgY2FsbFxuICAgICAgICAvLyA0LiBMZXQgRiBiZSBhIG5ldyBuYXRpdmUgRUNNQVNjcmlwdCBvYmplY3QuXG4gICAgICAgIC8vIDExLiBTZXQgdGhlIFtbUHJvdG90eXBlXV0gaW50ZXJuYWwgcHJvcGVydHkgb2YgRiB0byB0aGUgc3RhbmRhcmRcbiAgICAgICAgLy8gICBidWlsdC1pbiBGdW5jdGlvbiBwcm90b3R5cGUgb2JqZWN0IGFzIHNwZWNpZmllZCBpbiAxNS4zLjMuMS5cbiAgICAgICAgLy8gMTIuIFNldCB0aGUgW1tDYWxsXV0gaW50ZXJuYWwgcHJvcGVydHkgb2YgRiBhcyBkZXNjcmliZWQgaW5cbiAgICAgICAgLy8gICAxNS4zLjQuNS4xLlxuICAgICAgICAvLyAxMy4gU2V0IHRoZSBbW0NvbnN0cnVjdF1dIGludGVybmFsIHByb3BlcnR5IG9mIEYgYXMgZGVzY3JpYmVkIGluXG4gICAgICAgIC8vICAgMTUuMy40LjUuMi5cbiAgICAgICAgLy8gMTQuIFNldCB0aGUgW1tIYXNJbnN0YW5jZV1dIGludGVybmFsIHByb3BlcnR5IG9mIEYgYXMgZGVzY3JpYmVkIGluXG4gICAgICAgIC8vICAgMTUuMy40LjUuMy5cbiAgICAgICAgdmFyIGJpbmRlciA9IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgaWYgKHRoaXMgaW5zdGFuY2VvZiBib3VuZCkge1xuICAgICAgICAgICAgICAgIC8vIDE1LjMuNC41LjIgW1tDb25zdHJ1Y3RdXVxuICAgICAgICAgICAgICAgIC8vIFdoZW4gdGhlIFtbQ29uc3RydWN0XV0gaW50ZXJuYWwgbWV0aG9kIG9mIGEgZnVuY3Rpb24gb2JqZWN0LFxuICAgICAgICAgICAgICAgIC8vIEYgdGhhdCB3YXMgY3JlYXRlZCB1c2luZyB0aGUgYmluZCBmdW5jdGlvbiBpcyBjYWxsZWQgd2l0aCBhXG4gICAgICAgICAgICAgICAgLy8gbGlzdCBvZiBhcmd1bWVudHMgRXh0cmFBcmdzLCB0aGUgZm9sbG93aW5nIHN0ZXBzIGFyZSB0YWtlbjpcbiAgICAgICAgICAgICAgICAvLyAxLiBMZXQgdGFyZ2V0IGJlIHRoZSB2YWx1ZSBvZiBGJ3MgW1tUYXJnZXRGdW5jdGlvbl1dXG4gICAgICAgICAgICAgICAgLy8gICBpbnRlcm5hbCBwcm9wZXJ0eS5cbiAgICAgICAgICAgICAgICAvLyAyLiBJZiB0YXJnZXQgaGFzIG5vIFtbQ29uc3RydWN0XV0gaW50ZXJuYWwgbWV0aG9kLCBhXG4gICAgICAgICAgICAgICAgLy8gICBUeXBlRXJyb3IgZXhjZXB0aW9uIGlzIHRocm93bi5cbiAgICAgICAgICAgICAgICAvLyAzLiBMZXQgYm91bmRBcmdzIGJlIHRoZSB2YWx1ZSBvZiBGJ3MgW1tCb3VuZEFyZ3NdXSBpbnRlcm5hbFxuICAgICAgICAgICAgICAgIC8vICAgcHJvcGVydHkuXG4gICAgICAgICAgICAgICAgLy8gNC4gTGV0IGFyZ3MgYmUgYSBuZXcgbGlzdCBjb250YWluaW5nIHRoZSBzYW1lIHZhbHVlcyBhcyB0aGVcbiAgICAgICAgICAgICAgICAvLyAgIGxpc3QgYm91bmRBcmdzIGluIHRoZSBzYW1lIG9yZGVyIGZvbGxvd2VkIGJ5IHRoZSBzYW1lXG4gICAgICAgICAgICAgICAgLy8gICB2YWx1ZXMgYXMgdGhlIGxpc3QgRXh0cmFBcmdzIGluIHRoZSBzYW1lIG9yZGVyLlxuICAgICAgICAgICAgICAgIC8vIDUuIFJldHVybiB0aGUgcmVzdWx0IG9mIGNhbGxpbmcgdGhlIFtbQ29uc3RydWN0XV0gaW50ZXJuYWxcbiAgICAgICAgICAgICAgICAvLyAgIG1ldGhvZCBvZiB0YXJnZXQgcHJvdmlkaW5nIGFyZ3MgYXMgdGhlIGFyZ3VtZW50cy5cblxuICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSB0YXJnZXQuYXBwbHkoXG4gICAgICAgICAgICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgICAgICAgICAgIGFyZ3MuY29uY2F0KGFycmF5X3NsaWNlLmNhbGwoYXJndW1lbnRzKSlcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIGlmIChPYmplY3QocmVzdWx0KSA9PT0gcmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIDE1LjMuNC41LjEgW1tDYWxsXV1cbiAgICAgICAgICAgICAgICAvLyBXaGVuIHRoZSBbW0NhbGxdXSBpbnRlcm5hbCBtZXRob2Qgb2YgYSBmdW5jdGlvbiBvYmplY3QsIEYsXG4gICAgICAgICAgICAgICAgLy8gd2hpY2ggd2FzIGNyZWF0ZWQgdXNpbmcgdGhlIGJpbmQgZnVuY3Rpb24gaXMgY2FsbGVkIHdpdGggYVxuICAgICAgICAgICAgICAgIC8vIHRoaXMgdmFsdWUgYW5kIGEgbGlzdCBvZiBhcmd1bWVudHMgRXh0cmFBcmdzLCB0aGUgZm9sbG93aW5nXG4gICAgICAgICAgICAgICAgLy8gc3RlcHMgYXJlIHRha2VuOlxuICAgICAgICAgICAgICAgIC8vIDEuIExldCBib3VuZEFyZ3MgYmUgdGhlIHZhbHVlIG9mIEYncyBbW0JvdW5kQXJnc11dIGludGVybmFsXG4gICAgICAgICAgICAgICAgLy8gICBwcm9wZXJ0eS5cbiAgICAgICAgICAgICAgICAvLyAyLiBMZXQgYm91bmRUaGlzIGJlIHRoZSB2YWx1ZSBvZiBGJ3MgW1tCb3VuZFRoaXNdXSBpbnRlcm5hbFxuICAgICAgICAgICAgICAgIC8vICAgcHJvcGVydHkuXG4gICAgICAgICAgICAgICAgLy8gMy4gTGV0IHRhcmdldCBiZSB0aGUgdmFsdWUgb2YgRidzIFtbVGFyZ2V0RnVuY3Rpb25dXSBpbnRlcm5hbFxuICAgICAgICAgICAgICAgIC8vICAgcHJvcGVydHkuXG4gICAgICAgICAgICAgICAgLy8gNC4gTGV0IGFyZ3MgYmUgYSBuZXcgbGlzdCBjb250YWluaW5nIHRoZSBzYW1lIHZhbHVlcyBhcyB0aGVcbiAgICAgICAgICAgICAgICAvLyAgIGxpc3QgYm91bmRBcmdzIGluIHRoZSBzYW1lIG9yZGVyIGZvbGxvd2VkIGJ5IHRoZSBzYW1lXG4gICAgICAgICAgICAgICAgLy8gICB2YWx1ZXMgYXMgdGhlIGxpc3QgRXh0cmFBcmdzIGluIHRoZSBzYW1lIG9yZGVyLlxuICAgICAgICAgICAgICAgIC8vIDUuIFJldHVybiB0aGUgcmVzdWx0IG9mIGNhbGxpbmcgdGhlIFtbQ2FsbF1dIGludGVybmFsIG1ldGhvZFxuICAgICAgICAgICAgICAgIC8vICAgb2YgdGFyZ2V0IHByb3ZpZGluZyBib3VuZFRoaXMgYXMgdGhlIHRoaXMgdmFsdWUgYW5kXG4gICAgICAgICAgICAgICAgLy8gICBwcm92aWRpbmcgYXJncyBhcyB0aGUgYXJndW1lbnRzLlxuXG4gICAgICAgICAgICAgICAgLy8gZXF1aXY6IHRhcmdldC5jYWxsKHRoaXMsIC4uLmJvdW5kQXJncywgLi4uYXJncylcbiAgICAgICAgICAgICAgICByZXR1cm4gdGFyZ2V0LmFwcGx5KFxuICAgICAgICAgICAgICAgICAgICB0aGF0LFxuICAgICAgICAgICAgICAgICAgICBhcmdzLmNvbmNhdChhcnJheV9zbGljZS5jYWxsKGFyZ3VtZW50cykpXG4gICAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gMTUuIElmIHRoZSBbW0NsYXNzXV0gaW50ZXJuYWwgcHJvcGVydHkgb2YgVGFyZ2V0IGlzIFwiRnVuY3Rpb25cIiwgdGhlblxuICAgICAgICAvLyAgICAgYS4gTGV0IEwgYmUgdGhlIGxlbmd0aCBwcm9wZXJ0eSBvZiBUYXJnZXQgbWludXMgdGhlIGxlbmd0aCBvZiBBLlxuICAgICAgICAvLyAgICAgYi4gU2V0IHRoZSBsZW5ndGggb3duIHByb3BlcnR5IG9mIEYgdG8gZWl0aGVyIDAgb3IgTCwgd2hpY2hldmVyIGlzXG4gICAgICAgIC8vICAgICAgIGxhcmdlci5cbiAgICAgICAgLy8gMTYuIEVsc2Ugc2V0IHRoZSBsZW5ndGggb3duIHByb3BlcnR5IG9mIEYgdG8gMC5cblxuICAgICAgICB2YXIgYm91bmRMZW5ndGggPSBNYXRoLm1heCgwLCB0YXJnZXQubGVuZ3RoIC0gYXJncy5sZW5ndGgpO1xuXG4gICAgICAgIC8vIDE3LiBTZXQgdGhlIGF0dHJpYnV0ZXMgb2YgdGhlIGxlbmd0aCBvd24gcHJvcGVydHkgb2YgRiB0byB0aGUgdmFsdWVzXG4gICAgICAgIC8vICAgc3BlY2lmaWVkIGluIDE1LjMuNS4xLlxuICAgICAgICB2YXIgYm91bmRBcmdzID0gW107XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYm91bmRMZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYm91bmRBcmdzLnB1c2goJyQnICsgaSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBYWFggQnVpbGQgYSBkeW5hbWljIGZ1bmN0aW9uIHdpdGggZGVzaXJlZCBhbW91bnQgb2YgYXJndW1lbnRzIGlzIHRoZSBvbmx5XG4gICAgICAgIC8vIHdheSB0byBzZXQgdGhlIGxlbmd0aCBwcm9wZXJ0eSBvZiBhIGZ1bmN0aW9uLlxuICAgICAgICAvLyBJbiBlbnZpcm9ubWVudHMgd2hlcmUgQ29udGVudCBTZWN1cml0eSBQb2xpY2llcyBlbmFibGVkIChDaHJvbWUgZXh0ZW5zaW9ucyxcbiAgICAgICAgLy8gZm9yIGV4LikgYWxsIHVzZSBvZiBldmFsIG9yIEZ1bmN0aW9uIGNvc3RydWN0b3IgdGhyb3dzIGFuIGV4Y2VwdGlvbi5cbiAgICAgICAgLy8gSG93ZXZlciBpbiBhbGwgb2YgdGhlc2UgZW52aXJvbm1lbnRzIEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kIGV4aXN0c1xuICAgICAgICAvLyBhbmQgc28gdGhpcyBjb2RlIHdpbGwgbmV2ZXIgYmUgZXhlY3V0ZWQuXG4gICAgICAgIHZhciBib3VuZCA9IEZ1bmN0aW9uKCdiaW5kZXInLCAncmV0dXJuIGZ1bmN0aW9uICgnICsgYm91bmRBcmdzLmpvaW4oJywnKSArICcpeyByZXR1cm4gYmluZGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH0nKShiaW5kZXIpO1xuXG4gICAgICAgIGlmICh0YXJnZXQucHJvdG90eXBlKSB7XG4gICAgICAgICAgICBFbXB0eS5wcm90b3R5cGUgPSB0YXJnZXQucHJvdG90eXBlO1xuICAgICAgICAgICAgYm91bmQucHJvdG90eXBlID0gbmV3IEVtcHR5KCk7XG4gICAgICAgICAgICAvLyBDbGVhbiB1cCBkYW5nbGluZyByZWZlcmVuY2VzLlxuICAgICAgICAgICAgRW1wdHkucHJvdG90eXBlID0gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRPRE9cbiAgICAgICAgLy8gMTguIFNldCB0aGUgW1tFeHRlbnNpYmxlXV0gaW50ZXJuYWwgcHJvcGVydHkgb2YgRiB0byB0cnVlLlxuXG4gICAgICAgIC8vIFRPRE9cbiAgICAgICAgLy8gMTkuIExldCB0aHJvd2VyIGJlIHRoZSBbW1Rocm93VHlwZUVycm9yXV0gZnVuY3Rpb24gT2JqZWN0ICgxMy4yLjMpLlxuICAgICAgICAvLyAyMC4gQ2FsbCB0aGUgW1tEZWZpbmVPd25Qcm9wZXJ0eV1dIGludGVybmFsIG1ldGhvZCBvZiBGIHdpdGhcbiAgICAgICAgLy8gICBhcmd1bWVudHMgXCJjYWxsZXJcIiwgUHJvcGVydHlEZXNjcmlwdG9yIHtbW0dldF1dOiB0aHJvd2VyLCBbW1NldF1dOlxuICAgICAgICAvLyAgIHRocm93ZXIsIFtbRW51bWVyYWJsZV1dOiBmYWxzZSwgW1tDb25maWd1cmFibGVdXTogZmFsc2V9LCBhbmRcbiAgICAgICAgLy8gICBmYWxzZS5cbiAgICAgICAgLy8gMjEuIENhbGwgdGhlIFtbRGVmaW5lT3duUHJvcGVydHldXSBpbnRlcm5hbCBtZXRob2Qgb2YgRiB3aXRoXG4gICAgICAgIC8vICAgYXJndW1lbnRzIFwiYXJndW1lbnRzXCIsIFByb3BlcnR5RGVzY3JpcHRvciB7W1tHZXRdXTogdGhyb3dlcixcbiAgICAgICAgLy8gICBbW1NldF1dOiB0aHJvd2VyLCBbW0VudW1lcmFibGVdXTogZmFsc2UsIFtbQ29uZmlndXJhYmxlXV06IGZhbHNlfSxcbiAgICAgICAgLy8gICBhbmQgZmFsc2UuXG5cbiAgICAgICAgLy8gVE9ET1xuICAgICAgICAvLyBOT1RFIEZ1bmN0aW9uIG9iamVjdHMgY3JlYXRlZCB1c2luZyBGdW5jdGlvbi5wcm90b3R5cGUuYmluZCBkbyBub3RcbiAgICAgICAgLy8gaGF2ZSBhIHByb3RvdHlwZSBwcm9wZXJ0eSBvciB0aGUgW1tDb2RlXV0sIFtbRm9ybWFsUGFyYW1ldGVyc11dLCBhbmRcbiAgICAgICAgLy8gW1tTY29wZV1dIGludGVybmFsIHByb3BlcnRpZXMuXG4gICAgICAgIC8vIFhYWCBjYW4ndCBkZWxldGUgcHJvdG90eXBlIGluIHB1cmUtanMuXG5cbiAgICAgICAgLy8gMjIuIFJldHVybiBGLlxuICAgICAgICByZXR1cm4gYm91bmQ7XG4gICAgfVxufSk7XG5cbi8vXG4vLyBBcnJheVxuLy8gPT09PT1cbi8vXG5cbi8vIEVTNSAxNS40LjMuMlxuLy8gaHR0cDovL2VzNS5naXRodWIuY29tLyN4MTUuNC4zLjJcbi8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL0FycmF5L2lzQXJyYXlcbmRlZmluZVByb3BlcnRpZXMoQXJyYXksIHsgaXNBcnJheTogaXNBcnJheSB9KTtcblxuXG52YXIgYm94ZWRTdHJpbmcgPSBPYmplY3QoJ2EnKTtcbnZhciBzcGxpdFN0cmluZyA9IGJveGVkU3RyaW5nWzBdICE9PSAnYScgfHwgISgwIGluIGJveGVkU3RyaW5nKTtcblxudmFyIHByb3Blcmx5Qm94ZXNDb250ZXh0ID0gZnVuY3Rpb24gcHJvcGVybHlCb3hlZChtZXRob2QpIHtcbiAgICAvLyBDaGVjayBub2RlIDAuNi4yMSBidWcgd2hlcmUgdGhpcmQgcGFyYW1ldGVyIGlzIG5vdCBib3hlZFxuICAgIHZhciBwcm9wZXJseUJveGVzTm9uU3RyaWN0ID0gdHJ1ZTtcbiAgICB2YXIgcHJvcGVybHlCb3hlc1N0cmljdCA9IHRydWU7XG4gICAgaWYgKG1ldGhvZCkge1xuICAgICAgICBtZXRob2QuY2FsbCgnZm9vJywgZnVuY3Rpb24gKF8sIF9fLCBjb250ZXh0KSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGNvbnRleHQgIT09ICdvYmplY3QnKSB7IHByb3Blcmx5Qm94ZXNOb25TdHJpY3QgPSBmYWxzZTsgfVxuICAgICAgICB9KTtcblxuICAgICAgICBtZXRob2QuY2FsbChbMV0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICd1c2Ugc3RyaWN0JztcbiAgICAgICAgICAgIHByb3Blcmx5Qm94ZXNTdHJpY3QgPSB0eXBlb2YgdGhpcyA9PT0gJ3N0cmluZyc7XG4gICAgICAgIH0sICd4Jyk7XG4gICAgfVxuICAgIHJldHVybiAhIW1ldGhvZCAmJiBwcm9wZXJseUJveGVzTm9uU3RyaWN0ICYmIHByb3Blcmx5Qm94ZXNTdHJpY3Q7XG59O1xuXG5kZWZpbmVQcm9wZXJ0aWVzKEFycmF5UHJvdG90eXBlLCB7XG4gICAgZm9yRWFjaDogZnVuY3Rpb24gZm9yRWFjaChmdW4gLyosIHRoaXNwKi8pIHtcbiAgICAgICAgdmFyIG9iamVjdCA9IHRvT2JqZWN0KHRoaXMpLFxuICAgICAgICAgICAgc2VsZiA9IHNwbGl0U3RyaW5nICYmIGlzU3RyaW5nKHRoaXMpID8gdGhpcy5zcGxpdCgnJykgOiBvYmplY3QsXG4gICAgICAgICAgICB0aGlzcCA9IGFyZ3VtZW50c1sxXSxcbiAgICAgICAgICAgIGkgPSAtMSxcbiAgICAgICAgICAgIGxlbmd0aCA9IHNlbGYubGVuZ3RoID4+PiAwO1xuXG4gICAgICAgIC8vIElmIG5vIGNhbGxiYWNrIGZ1bmN0aW9uIG9yIGlmIGNhbGxiYWNrIGlzIG5vdCBhIGNhbGxhYmxlIGZ1bmN0aW9uXG4gICAgICAgIGlmICghaXNGdW5jdGlvbihmdW4pKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCk7IC8vIFRPRE8gbWVzc2FnZVxuICAgICAgICB9XG5cbiAgICAgICAgd2hpbGUgKCsraSA8IGxlbmd0aCkge1xuICAgICAgICAgICAgaWYgKGkgaW4gc2VsZikge1xuICAgICAgICAgICAgICAgIC8vIEludm9rZSB0aGUgY2FsbGJhY2sgZnVuY3Rpb24gd2l0aCBjYWxsLCBwYXNzaW5nIGFyZ3VtZW50czpcbiAgICAgICAgICAgICAgICAvLyBjb250ZXh0LCBwcm9wZXJ0eSB2YWx1ZSwgcHJvcGVydHkga2V5LCB0aGlzQXJnIG9iamVjdFxuICAgICAgICAgICAgICAgIC8vIGNvbnRleHRcbiAgICAgICAgICAgICAgICBmdW4uY2FsbCh0aGlzcCwgc2VsZltpXSwgaSwgb2JqZWN0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn0sICFwcm9wZXJseUJveGVzQ29udGV4dChBcnJheVByb3RvdHlwZS5mb3JFYWNoKSk7XG5cbi8vIEVTNSAxNS40LjQuMTRcbi8vIGh0dHA6Ly9lczUuZ2l0aHViLmNvbS8jeDE1LjQuNC4xNFxuLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvQXJyYXkvaW5kZXhPZlxudmFyIGhhc0ZpcmVmb3gySW5kZXhPZkJ1ZyA9IEFycmF5LnByb3RvdHlwZS5pbmRleE9mICYmIFswLCAxXS5pbmRleE9mKDEsIDIpICE9PSAtMTtcbmRlZmluZVByb3BlcnRpZXMoQXJyYXlQcm90b3R5cGUsIHtcbiAgICBpbmRleE9mOiBmdW5jdGlvbiBpbmRleE9mKHNvdWdodCAvKiwgZnJvbUluZGV4ICovICkge1xuICAgICAgICB2YXIgc2VsZiA9IHNwbGl0U3RyaW5nICYmIGlzU3RyaW5nKHRoaXMpID8gdGhpcy5zcGxpdCgnJykgOiB0b09iamVjdCh0aGlzKSxcbiAgICAgICAgICAgIGxlbmd0aCA9IHNlbGYubGVuZ3RoID4+PiAwO1xuXG4gICAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgaSA9IDA7XG4gICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgaSA9IHRvSW50ZWdlcihhcmd1bWVudHNbMV0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gaGFuZGxlIG5lZ2F0aXZlIGluZGljZXNcbiAgICAgICAgaSA9IGkgPj0gMCA/IGkgOiBNYXRoLm1heCgwLCBsZW5ndGggKyBpKTtcbiAgICAgICAgZm9yICg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKGkgaW4gc2VsZiAmJiBzZWxmW2ldID09PSBzb3VnaHQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gLTE7XG4gICAgfVxufSwgaGFzRmlyZWZveDJJbmRleE9mQnVnKTtcblxuLy9cbi8vIFN0cmluZ1xuLy8gPT09PT09XG4vL1xuXG4vLyBFUzUgMTUuNS40LjE0XG4vLyBodHRwOi8vZXM1LmdpdGh1Yi5jb20vI3gxNS41LjQuMTRcblxuLy8gW2J1Z2ZpeCwgSUUgbHQgOSwgZmlyZWZveCA0LCBLb25xdWVyb3IsIE9wZXJhLCBvYnNjdXJlIGJyb3dzZXJzXVxuLy8gTWFueSBicm93c2VycyBkbyBub3Qgc3BsaXQgcHJvcGVybHkgd2l0aCByZWd1bGFyIGV4cHJlc3Npb25zIG9yIHRoZXlcbi8vIGRvIG5vdCBwZXJmb3JtIHRoZSBzcGxpdCBjb3JyZWN0bHkgdW5kZXIgb2JzY3VyZSBjb25kaXRpb25zLlxuLy8gU2VlIGh0dHA6Ly9ibG9nLnN0ZXZlbmxldml0aGFuLmNvbS9hcmNoaXZlcy9jcm9zcy1icm93c2VyLXNwbGl0XG4vLyBJJ3ZlIHRlc3RlZCBpbiBtYW55IGJyb3dzZXJzIGFuZCB0aGlzIHNlZW1zIHRvIGNvdmVyIHRoZSBkZXZpYW50IG9uZXM6XG4vLyAgICAnYWInLnNwbGl0KC8oPzphYikqLykgc2hvdWxkIGJlIFtcIlwiLCBcIlwiXSwgbm90IFtcIlwiXVxuLy8gICAgJy4nLnNwbGl0KC8oLj8pKC4/KS8pIHNob3VsZCBiZSBbXCJcIiwgXCIuXCIsIFwiXCIsIFwiXCJdLCBub3QgW1wiXCIsIFwiXCJdXG4vLyAgICAndGVzc3QnLnNwbGl0KC8ocykqLykgc2hvdWxkIGJlIFtcInRcIiwgdW5kZWZpbmVkLCBcImVcIiwgXCJzXCIsIFwidFwiXSwgbm90XG4vLyAgICAgICBbdW5kZWZpbmVkLCBcInRcIiwgdW5kZWZpbmVkLCBcImVcIiwgLi4uXVxuLy8gICAgJycuc3BsaXQoLy4/Lykgc2hvdWxkIGJlIFtdLCBub3QgW1wiXCJdXG4vLyAgICAnLicuc3BsaXQoLygpKCkvKSBzaG91bGQgYmUgW1wiLlwiXSwgbm90IFtcIlwiLCBcIlwiLCBcIi5cIl1cblxudmFyIHN0cmluZ19zcGxpdCA9IFN0cmluZ1Byb3RvdHlwZS5zcGxpdDtcbmlmIChcbiAgICAnYWInLnNwbGl0KC8oPzphYikqLykubGVuZ3RoICE9PSAyIHx8XG4gICAgJy4nLnNwbGl0KC8oLj8pKC4/KS8pLmxlbmd0aCAhPT0gNCB8fFxuICAgICd0ZXNzdCcuc3BsaXQoLyhzKSovKVsxXSA9PT0gJ3QnIHx8XG4gICAgJ3Rlc3QnLnNwbGl0KC8oPzopLywgLTEpLmxlbmd0aCAhPT0gNCB8fFxuICAgICcnLnNwbGl0KC8uPy8pLmxlbmd0aCB8fFxuICAgICcuJy5zcGxpdCgvKCkoKS8pLmxlbmd0aCA+IDFcbikge1xuICAgIChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBjb21wbGlhbnRFeGVjTnBjZyA9IC8oKT8/Ly5leGVjKCcnKVsxXSA9PT0gdm9pZCAwOyAvLyBOUENHOiBub25wYXJ0aWNpcGF0aW5nIGNhcHR1cmluZyBncm91cFxuXG4gICAgICAgIFN0cmluZ1Byb3RvdHlwZS5zcGxpdCA9IGZ1bmN0aW9uIChzZXBhcmF0b3IsIGxpbWl0KSB7XG4gICAgICAgICAgICB2YXIgc3RyaW5nID0gdGhpcztcbiAgICAgICAgICAgIGlmIChzZXBhcmF0b3IgPT09IHZvaWQgMCAmJiBsaW1pdCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gSWYgYHNlcGFyYXRvcmAgaXMgbm90IGEgcmVnZXgsIHVzZSBuYXRpdmUgc3BsaXRcbiAgICAgICAgICAgIGlmIChfdG9TdHJpbmcuY2FsbChzZXBhcmF0b3IpICE9PSAnW29iamVjdCBSZWdFeHBdJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBzdHJpbmdfc3BsaXQuY2FsbCh0aGlzLCBzZXBhcmF0b3IsIGxpbWl0KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIG91dHB1dCA9IFtdLFxuICAgICAgICAgICAgICAgIGZsYWdzID0gKHNlcGFyYXRvci5pZ25vcmVDYXNlID8gJ2knIDogJycpICtcbiAgICAgICAgICAgICAgICAgICAgICAgIChzZXBhcmF0b3IubXVsdGlsaW5lICA/ICdtJyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAgICAgICAoc2VwYXJhdG9yLmV4dGVuZGVkICAgPyAneCcgOiAnJykgKyAvLyBQcm9wb3NlZCBmb3IgRVM2XG4gICAgICAgICAgICAgICAgICAgICAgICAoc2VwYXJhdG9yLnN0aWNreSAgICAgPyAneScgOiAnJyksIC8vIEZpcmVmb3ggMytcbiAgICAgICAgICAgICAgICBsYXN0TGFzdEluZGV4ID0gMCxcbiAgICAgICAgICAgICAgICAvLyBNYWtlIGBnbG9iYWxgIGFuZCBhdm9pZCBgbGFzdEluZGV4YCBpc3N1ZXMgYnkgd29ya2luZyB3aXRoIGEgY29weVxuICAgICAgICAgICAgICAgIHNlcGFyYXRvcjIsIG1hdGNoLCBsYXN0SW5kZXgsIGxhc3RMZW5ndGg7XG4gICAgICAgICAgICBzZXBhcmF0b3IgPSBuZXcgUmVnRXhwKHNlcGFyYXRvci5zb3VyY2UsIGZsYWdzICsgJ2cnKTtcbiAgICAgICAgICAgIHN0cmluZyArPSAnJzsgLy8gVHlwZS1jb252ZXJ0XG4gICAgICAgICAgICBpZiAoIWNvbXBsaWFudEV4ZWNOcGNnKSB7XG4gICAgICAgICAgICAgICAgLy8gRG9lc24ndCBuZWVkIGZsYWdzIGd5LCBidXQgdGhleSBkb24ndCBodXJ0XG4gICAgICAgICAgICAgICAgc2VwYXJhdG9yMiA9IG5ldyBSZWdFeHAoJ14nICsgc2VwYXJhdG9yLnNvdXJjZSArICckKD8hXFxcXHMpJywgZmxhZ3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLyogVmFsdWVzIGZvciBgbGltaXRgLCBwZXIgdGhlIHNwZWM6XG4gICAgICAgICAgICAgKiBJZiB1bmRlZmluZWQ6IDQyOTQ5NjcyOTUgLy8gTWF0aC5wb3coMiwgMzIpIC0gMVxuICAgICAgICAgICAgICogSWYgMCwgSW5maW5pdHksIG9yIE5hTjogMFxuICAgICAgICAgICAgICogSWYgcG9zaXRpdmUgbnVtYmVyOiBsaW1pdCA9IE1hdGguZmxvb3IobGltaXQpOyBpZiAobGltaXQgPiA0Mjk0OTY3Mjk1KSBsaW1pdCAtPSA0Mjk0OTY3Mjk2O1xuICAgICAgICAgICAgICogSWYgbmVnYXRpdmUgbnVtYmVyOiA0Mjk0OTY3Mjk2IC0gTWF0aC5mbG9vcihNYXRoLmFicyhsaW1pdCkpXG4gICAgICAgICAgICAgKiBJZiBvdGhlcjogVHlwZS1jb252ZXJ0LCB0aGVuIHVzZSB0aGUgYWJvdmUgcnVsZXNcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgbGltaXQgPSBsaW1pdCA9PT0gdm9pZCAwID9cbiAgICAgICAgICAgICAgICAtMSA+Pj4gMCA6IC8vIE1hdGgucG93KDIsIDMyKSAtIDFcbiAgICAgICAgICAgICAgICBUb1VpbnQzMihsaW1pdCk7XG4gICAgICAgICAgICB3aGlsZSAobWF0Y2ggPSBzZXBhcmF0b3IuZXhlYyhzdHJpbmcpKSB7XG4gICAgICAgICAgICAgICAgLy8gYHNlcGFyYXRvci5sYXN0SW5kZXhgIGlzIG5vdCByZWxpYWJsZSBjcm9zcy1icm93c2VyXG4gICAgICAgICAgICAgICAgbGFzdEluZGV4ID0gbWF0Y2guaW5kZXggKyBtYXRjaFswXS5sZW5ndGg7XG4gICAgICAgICAgICAgICAgaWYgKGxhc3RJbmRleCA+IGxhc3RMYXN0SW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0LnB1c2goc3RyaW5nLnNsaWNlKGxhc3RMYXN0SW5kZXgsIG1hdGNoLmluZGV4KSk7XG4gICAgICAgICAgICAgICAgICAgIC8vIEZpeCBicm93c2VycyB3aG9zZSBgZXhlY2AgbWV0aG9kcyBkb24ndCBjb25zaXN0ZW50bHkgcmV0dXJuIGB1bmRlZmluZWRgIGZvclxuICAgICAgICAgICAgICAgICAgICAvLyBub25wYXJ0aWNpcGF0aW5nIGNhcHR1cmluZyBncm91cHNcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFjb21wbGlhbnRFeGVjTnBjZyAmJiBtYXRjaC5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtYXRjaFswXS5yZXBsYWNlKHNlcGFyYXRvcjIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGggLSAyOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFyZ3VtZW50c1tpXSA9PT0gdm9pZCAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRjaFtpXSA9IHZvaWQgMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChtYXRjaC5sZW5ndGggPiAxICYmIG1hdGNoLmluZGV4IDwgc3RyaW5nLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgQXJyYXlQcm90b3R5cGUucHVzaC5hcHBseShvdXRwdXQsIG1hdGNoLnNsaWNlKDEpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBsYXN0TGVuZ3RoID0gbWF0Y2hbMF0ubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICBsYXN0TGFzdEluZGV4ID0gbGFzdEluZGV4O1xuICAgICAgICAgICAgICAgICAgICBpZiAob3V0cHV0Lmxlbmd0aCA+PSBsaW1pdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHNlcGFyYXRvci5sYXN0SW5kZXggPT09IG1hdGNoLmluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgIHNlcGFyYXRvci5sYXN0SW5kZXgrKzsgLy8gQXZvaWQgYW4gaW5maW5pdGUgbG9vcFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChsYXN0TGFzdEluZGV4ID09PSBzdHJpbmcubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgaWYgKGxhc3RMZW5ndGggfHwgIXNlcGFyYXRvci50ZXN0KCcnKSkge1xuICAgICAgICAgICAgICAgICAgICBvdXRwdXQucHVzaCgnJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBvdXRwdXQucHVzaChzdHJpbmcuc2xpY2UobGFzdExhc3RJbmRleCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG91dHB1dC5sZW5ndGggPiBsaW1pdCA/IG91dHB1dC5zbGljZSgwLCBsaW1pdCkgOiBvdXRwdXQ7XG4gICAgICAgIH07XG4gICAgfSgpKTtcblxuLy8gW2J1Z2ZpeCwgY2hyb21lXVxuLy8gSWYgc2VwYXJhdG9yIGlzIHVuZGVmaW5lZCwgdGhlbiB0aGUgcmVzdWx0IGFycmF5IGNvbnRhaW5zIGp1c3Qgb25lIFN0cmluZyxcbi8vIHdoaWNoIGlzIHRoZSB0aGlzIHZhbHVlIChjb252ZXJ0ZWQgdG8gYSBTdHJpbmcpLiBJZiBsaW1pdCBpcyBub3QgdW5kZWZpbmVkLFxuLy8gdGhlbiB0aGUgb3V0cHV0IGFycmF5IGlzIHRydW5jYXRlZCBzbyB0aGF0IGl0IGNvbnRhaW5zIG5vIG1vcmUgdGhhbiBsaW1pdFxuLy8gZWxlbWVudHMuXG4vLyBcIjBcIi5zcGxpdCh1bmRlZmluZWQsIDApIC0+IFtdXG59IGVsc2UgaWYgKCcwJy5zcGxpdCh2b2lkIDAsIDApLmxlbmd0aCkge1xuICAgIFN0cmluZ1Byb3RvdHlwZS5zcGxpdCA9IGZ1bmN0aW9uIHNwbGl0KHNlcGFyYXRvciwgbGltaXQpIHtcbiAgICAgICAgaWYgKHNlcGFyYXRvciA9PT0gdm9pZCAwICYmIGxpbWl0ID09PSAwKSB7IHJldHVybiBbXTsgfVxuICAgICAgICByZXR1cm4gc3RyaW5nX3NwbGl0LmNhbGwodGhpcywgc2VwYXJhdG9yLCBsaW1pdCk7XG4gICAgfTtcbn1cblxuLy8gRUNNQS0yNjIsIDNyZCBCLjIuM1xuLy8gTm90IGFuIEVDTUFTY3JpcHQgc3RhbmRhcmQsIGFsdGhvdWdoIEVDTUFTY3JpcHQgM3JkIEVkaXRpb24gaGFzIGFcbi8vIG5vbi1ub3JtYXRpdmUgc2VjdGlvbiBzdWdnZXN0aW5nIHVuaWZvcm0gc2VtYW50aWNzIGFuZCBpdCBzaG91bGQgYmVcbi8vIG5vcm1hbGl6ZWQgYWNyb3NzIGFsbCBicm93c2Vyc1xuLy8gW2J1Z2ZpeCwgSUUgbHQgOV0gSUUgPCA5IHN1YnN0cigpIHdpdGggbmVnYXRpdmUgdmFsdWUgbm90IHdvcmtpbmcgaW4gSUVcbnZhciBzdHJpbmdfc3Vic3RyID0gU3RyaW5nUHJvdG90eXBlLnN1YnN0cjtcbnZhciBoYXNOZWdhdGl2ZVN1YnN0ckJ1ZyA9ICcnLnN1YnN0ciAmJiAnMGInLnN1YnN0cigtMSkgIT09ICdiJztcbmRlZmluZVByb3BlcnRpZXMoU3RyaW5nUHJvdG90eXBlLCB7XG4gICAgc3Vic3RyOiBmdW5jdGlvbiBzdWJzdHIoc3RhcnQsIGxlbmd0aCkge1xuICAgICAgICByZXR1cm4gc3RyaW5nX3N1YnN0ci5jYWxsKFxuICAgICAgICAgICAgdGhpcyxcbiAgICAgICAgICAgIHN0YXJ0IDwgMCA/ICgoc3RhcnQgPSB0aGlzLmxlbmd0aCArIHN0YXJ0KSA8IDAgPyAwIDogc3RhcnQpIDogc3RhcnQsXG4gICAgICAgICAgICBsZW5ndGhcbiAgICAgICAgKTtcbiAgICB9XG59LCBoYXNOZWdhdGl2ZVN1YnN0ckJ1Zyk7XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gW1xuICAvLyBzdHJlYW1pbmcgdHJhbnNwb3J0c1xuICByZXF1aXJlKCcuL3RyYW5zcG9ydC93ZWJzb2NrZXQnKVxuLCByZXF1aXJlKCcuL3RyYW5zcG9ydC94aHItc3RyZWFtaW5nJylcbiwgcmVxdWlyZSgnLi90cmFuc3BvcnQveGRyLXN0cmVhbWluZycpXG4sIHJlcXVpcmUoJy4vdHJhbnNwb3J0L2V2ZW50c291cmNlJylcbiwgcmVxdWlyZSgnLi90cmFuc3BvcnQvbGliL2lmcmFtZS13cmFwJykocmVxdWlyZSgnLi90cmFuc3BvcnQvZXZlbnRzb3VyY2UnKSlcblxuICAvLyBwb2xsaW5nIHRyYW5zcG9ydHNcbiwgcmVxdWlyZSgnLi90cmFuc3BvcnQvaHRtbGZpbGUnKVxuLCByZXF1aXJlKCcuL3RyYW5zcG9ydC9saWIvaWZyYW1lLXdyYXAnKShyZXF1aXJlKCcuL3RyYW5zcG9ydC9odG1sZmlsZScpKVxuLCByZXF1aXJlKCcuL3RyYW5zcG9ydC94aHItcG9sbGluZycpXG4sIHJlcXVpcmUoJy4vdHJhbnNwb3J0L3hkci1wb2xsaW5nJylcbiwgcmVxdWlyZSgnLi90cmFuc3BvcnQvbGliL2lmcmFtZS13cmFwJykocmVxdWlyZSgnLi90cmFuc3BvcnQveGhyLXBvbGxpbmcnKSlcbiwgcmVxdWlyZSgnLi90cmFuc3BvcnQvanNvbnAtcG9sbGluZycpXG5dO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgRXZlbnRFbWl0dGVyID0gcmVxdWlyZSgnZXZlbnRzJykuRXZlbnRFbWl0dGVyXG4gICwgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG4gICwgdXRpbHMgPSByZXF1aXJlKCcuLi8uLi91dGlscy9ldmVudCcpXG4gICwgdXJsVXRpbHMgPSByZXF1aXJlKCcuLi8uLi91dGlscy91cmwnKVxuICAsIFhIUiA9IGdsb2JhbC5YTUxIdHRwUmVxdWVzdFxuICA7XG5cbnZhciBkZWJ1ZyA9IGZ1bmN0aW9uKCkge307XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBkZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJykoJ3NvY2tqcy1jbGllbnQ6YnJvd3Nlcjp4aHInKTtcbn1cblxuZnVuY3Rpb24gQWJzdHJhY3RYSFJPYmplY3QobWV0aG9kLCB1cmwsIHBheWxvYWQsIG9wdHMpIHtcbiAgZGVidWcobWV0aG9kLCB1cmwpO1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIEV2ZW50RW1pdHRlci5jYWxsKHRoaXMpO1xuXG4gIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgIHNlbGYuX3N0YXJ0KG1ldGhvZCwgdXJsLCBwYXlsb2FkLCBvcHRzKTtcbiAgfSwgMCk7XG59XG5cbmluaGVyaXRzKEFic3RyYWN0WEhST2JqZWN0LCBFdmVudEVtaXR0ZXIpO1xuXG5BYnN0cmFjdFhIUk9iamVjdC5wcm90b3R5cGUuX3N0YXJ0ID0gZnVuY3Rpb24obWV0aG9kLCB1cmwsIHBheWxvYWQsIG9wdHMpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gIHRyeSB7XG4gICAgdGhpcy54aHIgPSBuZXcgWEhSKCk7XG4gIH0gY2F0Y2ggKHgpIHtcbiAgICAvLyBpbnRlbnRpb25hbGx5IGVtcHR5XG4gIH1cblxuICBpZiAoIXRoaXMueGhyKSB7XG4gICAgZGVidWcoJ25vIHhocicpO1xuICAgIHRoaXMuZW1pdCgnZmluaXNoJywgMCwgJ25vIHhociBzdXBwb3J0Jyk7XG4gICAgdGhpcy5fY2xlYW51cCgpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIHNldmVyYWwgYnJvd3NlcnMgY2FjaGUgUE9TVHNcbiAgdXJsID0gdXJsVXRpbHMuYWRkUXVlcnkodXJsLCAndD0nICsgKCtuZXcgRGF0ZSgpKSk7XG5cbiAgLy8gRXhwbG9yZXIgdGVuZHMgdG8ga2VlcCBjb25uZWN0aW9uIG9wZW4sIGV2ZW4gYWZ0ZXIgdGhlXG4gIC8vIHRhYiBnZXRzIGNsb3NlZDogaHR0cDovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvNTI4MFxuICB0aGlzLnVubG9hZFJlZiA9IHV0aWxzLnVubG9hZEFkZChmdW5jdGlvbigpIHtcbiAgICBkZWJ1ZygndW5sb2FkIGNsZWFudXAnKTtcbiAgICBzZWxmLl9jbGVhbnVwKHRydWUpO1xuICB9KTtcbiAgdHJ5IHtcbiAgICB0aGlzLnhoci5vcGVuKG1ldGhvZCwgdXJsLCB0cnVlKTtcbiAgICBpZiAodGhpcy50aW1lb3V0ICYmICd0aW1lb3V0JyBpbiB0aGlzLnhocikge1xuICAgICAgdGhpcy54aHIudGltZW91dCA9IHRoaXMudGltZW91dDtcbiAgICAgIHRoaXMueGhyLm9udGltZW91dCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBkZWJ1ZygneGhyIHRpbWVvdXQnKTtcbiAgICAgICAgc2VsZi5lbWl0KCdmaW5pc2gnLCAwLCAnJyk7XG4gICAgICAgIHNlbGYuX2NsZWFudXAoZmFsc2UpO1xuICAgICAgfTtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBkZWJ1ZygnZXhjZXB0aW9uJywgZSk7XG4gICAgLy8gSUUgcmFpc2VzIGFuIGV4Y2VwdGlvbiBvbiB3cm9uZyBwb3J0LlxuICAgIHRoaXMuZW1pdCgnZmluaXNoJywgMCwgJycpO1xuICAgIHRoaXMuX2NsZWFudXAoZmFsc2UpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmICgoIW9wdHMgfHwgIW9wdHMubm9DcmVkZW50aWFscykgJiYgQWJzdHJhY3RYSFJPYmplY3Quc3VwcG9ydHNDT1JTKSB7XG4gICAgZGVidWcoJ3dpdGhDcmVkZW50aWFscycpO1xuICAgIC8vIE1vemlsbGEgZG9jcyBzYXlzIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL1hNTEh0dHBSZXF1ZXN0IDpcbiAgICAvLyBcIlRoaXMgbmV2ZXIgYWZmZWN0cyBzYW1lLXNpdGUgcmVxdWVzdHMuXCJcblxuICAgIHRoaXMueGhyLndpdGhDcmVkZW50aWFscyA9IHRydWU7XG4gIH1cbiAgaWYgKG9wdHMgJiYgb3B0cy5oZWFkZXJzKSB7XG4gICAgZm9yICh2YXIga2V5IGluIG9wdHMuaGVhZGVycykge1xuICAgICAgdGhpcy54aHIuc2V0UmVxdWVzdEhlYWRlcihrZXksIG9wdHMuaGVhZGVyc1trZXldKTtcbiAgICB9XG4gIH1cblxuICB0aGlzLnhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAoc2VsZi54aHIpIHtcbiAgICAgIHZhciB4ID0gc2VsZi54aHI7XG4gICAgICB2YXIgdGV4dCwgc3RhdHVzO1xuICAgICAgZGVidWcoJ3JlYWR5U3RhdGUnLCB4LnJlYWR5U3RhdGUpO1xuICAgICAgc3dpdGNoICh4LnJlYWR5U3RhdGUpIHtcbiAgICAgIGNhc2UgMzpcbiAgICAgICAgLy8gSUUgZG9lc24ndCBsaWtlIHBlZWtpbmcgaW50byByZXNwb25zZVRleHQgb3Igc3RhdHVzXG4gICAgICAgIC8vIG9uIE1pY3Jvc29mdC5YTUxIVFRQIGFuZCByZWFkeXN0YXRlPTNcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBzdGF0dXMgPSB4LnN0YXR1cztcbiAgICAgICAgICB0ZXh0ID0geC5yZXNwb25zZVRleHQ7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAvLyBpbnRlbnRpb25hbGx5IGVtcHR5XG4gICAgICAgIH1cbiAgICAgICAgZGVidWcoJ3N0YXR1cycsIHN0YXR1cyk7XG4gICAgICAgIC8vIElFIHJldHVybnMgMTIyMyBmb3IgMjA0OiBodHRwOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC8xNDUwXG4gICAgICAgIGlmIChzdGF0dXMgPT09IDEyMjMpIHtcbiAgICAgICAgICBzdGF0dXMgPSAyMDQ7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBJRSBkb2VzIHJldHVybiByZWFkeXN0YXRlID09IDMgZm9yIDQwNCBhbnN3ZXJzLlxuICAgICAgICBpZiAoc3RhdHVzID09PSAyMDAgJiYgdGV4dCAmJiB0ZXh0Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICBkZWJ1ZygnY2h1bmsnKTtcbiAgICAgICAgICBzZWxmLmVtaXQoJ2NodW5rJywgc3RhdHVzLCB0ZXh0KTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgNDpcbiAgICAgICAgc3RhdHVzID0geC5zdGF0dXM7XG4gICAgICAgIGRlYnVnKCdzdGF0dXMnLCBzdGF0dXMpO1xuICAgICAgICAvLyBJRSByZXR1cm5zIDEyMjMgZm9yIDIwNDogaHR0cDovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvMTQ1MFxuICAgICAgICBpZiAoc3RhdHVzID09PSAxMjIzKSB7XG4gICAgICAgICAgc3RhdHVzID0gMjA0O1xuICAgICAgICB9XG4gICAgICAgIC8vIElFIHJldHVybnMgdGhpcyBmb3IgYSBiYWQgcG9ydFxuICAgICAgICAvLyBodHRwOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvd2luZG93cy9kZXNrdG9wL2FhMzgzNzcwKHY9dnMuODUpLmFzcHhcbiAgICAgICAgaWYgKHN0YXR1cyA9PT0gMTIwMDUgfHwgc3RhdHVzID09PSAxMjAyOSkge1xuICAgICAgICAgIHN0YXR1cyA9IDA7XG4gICAgICAgIH1cblxuICAgICAgICBkZWJ1ZygnZmluaXNoJywgc3RhdHVzLCB4LnJlc3BvbnNlVGV4dCk7XG4gICAgICAgIHNlbGYuZW1pdCgnZmluaXNoJywgc3RhdHVzLCB4LnJlc3BvbnNlVGV4dCk7XG4gICAgICAgIHNlbGYuX2NsZWFudXAoZmFsc2UpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgdHJ5IHtcbiAgICBzZWxmLnhoci5zZW5kKHBheWxvYWQpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgc2VsZi5lbWl0KCdmaW5pc2gnLCAwLCAnJyk7XG4gICAgc2VsZi5fY2xlYW51cChmYWxzZSk7XG4gIH1cbn07XG5cbkFic3RyYWN0WEhST2JqZWN0LnByb3RvdHlwZS5fY2xlYW51cCA9IGZ1bmN0aW9uKGFib3J0KSB7XG4gIGRlYnVnKCdjbGVhbnVwJyk7XG4gIGlmICghdGhpcy54aHIpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoKTtcbiAgdXRpbHMudW5sb2FkRGVsKHRoaXMudW5sb2FkUmVmKTtcblxuICAvLyBJRSBuZWVkcyB0aGlzIGZpZWxkIHRvIGJlIGEgZnVuY3Rpb25cbiAgdGhpcy54aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oKSB7fTtcbiAgaWYgKHRoaXMueGhyLm9udGltZW91dCkge1xuICAgIHRoaXMueGhyLm9udGltZW91dCA9IG51bGw7XG4gIH1cblxuICBpZiAoYWJvcnQpIHtcbiAgICB0cnkge1xuICAgICAgdGhpcy54aHIuYWJvcnQoKTtcbiAgICB9IGNhdGNoICh4KSB7XG4gICAgICAvLyBpbnRlbnRpb25hbGx5IGVtcHR5XG4gICAgfVxuICB9XG4gIHRoaXMudW5sb2FkUmVmID0gdGhpcy54aHIgPSBudWxsO1xufTtcblxuQWJzdHJhY3RYSFJPYmplY3QucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24oKSB7XG4gIGRlYnVnKCdjbG9zZScpO1xuICB0aGlzLl9jbGVhbnVwKHRydWUpO1xufTtcblxuQWJzdHJhY3RYSFJPYmplY3QuZW5hYmxlZCA9ICEhWEhSO1xuLy8gb3ZlcnJpZGUgWE1MSHR0cFJlcXVlc3QgZm9yIElFNi83XG4vLyBvYmZ1c2NhdGUgdG8gYXZvaWQgZmlyZXdhbGxzXG52YXIgYXhvID0gWydBY3RpdmUnXS5jb25jYXQoJ09iamVjdCcpLmpvaW4oJ1gnKTtcbmlmICghQWJzdHJhY3RYSFJPYmplY3QuZW5hYmxlZCAmJiAoYXhvIGluIGdsb2JhbCkpIHtcbiAgZGVidWcoJ292ZXJyaWRpbmcgeG1saHR0cHJlcXVlc3QnKTtcbiAgWEhSID0gZnVuY3Rpb24oKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBuZXcgZ2xvYmFsW2F4b10oJ01pY3Jvc29mdC5YTUxIVFRQJyk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9O1xuICBBYnN0cmFjdFhIUk9iamVjdC5lbmFibGVkID0gISFuZXcgWEhSKCk7XG59XG5cbnZhciBjb3JzID0gZmFsc2U7XG50cnkge1xuICBjb3JzID0gJ3dpdGhDcmVkZW50aWFscycgaW4gbmV3IFhIUigpO1xufSBjYXRjaCAoaWdub3JlZCkge1xuICAvLyBpbnRlbnRpb25hbGx5IGVtcHR5XG59XG5cbkFic3RyYWN0WEhST2JqZWN0LnN1cHBvcnRzQ09SUyA9IGNvcnM7XG5cbm1vZHVsZS5leHBvcnRzID0gQWJzdHJhY3RYSFJPYmplY3Q7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGdsb2JhbC5FdmVudFNvdXJjZTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIERyaXZlciA9IGdsb2JhbC5XZWJTb2NrZXQgfHwgZ2xvYmFsLk1veldlYlNvY2tldDtcbmlmIChEcml2ZXIpIHtcblx0bW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBXZWJTb2NrZXRCcm93c2VyRHJpdmVyKHVybCkge1xuXHRcdHJldHVybiBuZXcgRHJpdmVyKHVybCk7XG5cdH07XG59IGVsc2Uge1xuXHRtb2R1bGUuZXhwb3J0cyA9IHVuZGVmaW5lZDtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxuICAsIEFqYXhCYXNlZFRyYW5zcG9ydCA9IHJlcXVpcmUoJy4vbGliL2FqYXgtYmFzZWQnKVxuICAsIEV2ZW50U291cmNlUmVjZWl2ZXIgPSByZXF1aXJlKCcuL3JlY2VpdmVyL2V2ZW50c291cmNlJylcbiAgLCBYSFJDb3JzT2JqZWN0ID0gcmVxdWlyZSgnLi9zZW5kZXIveGhyLWNvcnMnKVxuICAsIEV2ZW50U291cmNlRHJpdmVyID0gcmVxdWlyZSgnZXZlbnRzb3VyY2UnKVxuICA7XG5cbmZ1bmN0aW9uIEV2ZW50U291cmNlVHJhbnNwb3J0KHRyYW5zVXJsKSB7XG4gIGlmICghRXZlbnRTb3VyY2VUcmFuc3BvcnQuZW5hYmxlZCgpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdUcmFuc3BvcnQgY3JlYXRlZCB3aGVuIGRpc2FibGVkJyk7XG4gIH1cblxuICBBamF4QmFzZWRUcmFuc3BvcnQuY2FsbCh0aGlzLCB0cmFuc1VybCwgJy9ldmVudHNvdXJjZScsIEV2ZW50U291cmNlUmVjZWl2ZXIsIFhIUkNvcnNPYmplY3QpO1xufVxuXG5pbmhlcml0cyhFdmVudFNvdXJjZVRyYW5zcG9ydCwgQWpheEJhc2VkVHJhbnNwb3J0KTtcblxuRXZlbnRTb3VyY2VUcmFuc3BvcnQuZW5hYmxlZCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gISFFdmVudFNvdXJjZURyaXZlcjtcbn07XG5cbkV2ZW50U291cmNlVHJhbnNwb3J0LnRyYW5zcG9ydE5hbWUgPSAnZXZlbnRzb3VyY2UnO1xuRXZlbnRTb3VyY2VUcmFuc3BvcnQucm91bmRUcmlwcyA9IDI7XG5cbm1vZHVsZS5leHBvcnRzID0gRXZlbnRTb3VyY2VUcmFuc3BvcnQ7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbiAgLCBIdG1sZmlsZVJlY2VpdmVyID0gcmVxdWlyZSgnLi9yZWNlaXZlci9odG1sZmlsZScpXG4gICwgWEhSTG9jYWxPYmplY3QgPSByZXF1aXJlKCcuL3NlbmRlci94aHItbG9jYWwnKVxuICAsIEFqYXhCYXNlZFRyYW5zcG9ydCA9IHJlcXVpcmUoJy4vbGliL2FqYXgtYmFzZWQnKVxuICA7XG5cbmZ1bmN0aW9uIEh0bWxGaWxlVHJhbnNwb3J0KHRyYW5zVXJsKSB7XG4gIGlmICghSHRtbGZpbGVSZWNlaXZlci5lbmFibGVkKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdUcmFuc3BvcnQgY3JlYXRlZCB3aGVuIGRpc2FibGVkJyk7XG4gIH1cbiAgQWpheEJhc2VkVHJhbnNwb3J0LmNhbGwodGhpcywgdHJhbnNVcmwsICcvaHRtbGZpbGUnLCBIdG1sZmlsZVJlY2VpdmVyLCBYSFJMb2NhbE9iamVjdCk7XG59XG5cbmluaGVyaXRzKEh0bWxGaWxlVHJhbnNwb3J0LCBBamF4QmFzZWRUcmFuc3BvcnQpO1xuXG5IdG1sRmlsZVRyYW5zcG9ydC5lbmFibGVkID0gZnVuY3Rpb24oaW5mbykge1xuICByZXR1cm4gSHRtbGZpbGVSZWNlaXZlci5lbmFibGVkICYmIGluZm8uc2FtZU9yaWdpbjtcbn07XG5cbkh0bWxGaWxlVHJhbnNwb3J0LnRyYW5zcG9ydE5hbWUgPSAnaHRtbGZpbGUnO1xuSHRtbEZpbGVUcmFuc3BvcnQucm91bmRUcmlwcyA9IDI7XG5cbm1vZHVsZS5leHBvcnRzID0gSHRtbEZpbGVUcmFuc3BvcnQ7XG4iLCIndXNlIHN0cmljdCc7XG5cbi8vIEZldyBjb29sIHRyYW5zcG9ydHMgZG8gd29yayBvbmx5IGZvciBzYW1lLW9yaWdpbi4gSW4gb3JkZXIgdG8gbWFrZVxuLy8gdGhlbSB3b3JrIGNyb3NzLWRvbWFpbiB3ZSBzaGFsbCB1c2UgaWZyYW1lLCBzZXJ2ZWQgZnJvbSB0aGVcbi8vIHJlbW90ZSBkb21haW4uIE5ldyBicm93c2VycyBoYXZlIGNhcGFiaWxpdGllcyB0byBjb21tdW5pY2F0ZSB3aXRoXG4vLyBjcm9zcyBkb21haW4gaWZyYW1lIHVzaW5nIHBvc3RNZXNzYWdlKCkuIEluIElFIGl0IHdhcyBpbXBsZW1lbnRlZFxuLy8gZnJvbSBJRSA4KywgYnV0IG9mIGNvdXJzZSwgSUUgZ290IHNvbWUgZGV0YWlscyB3cm9uZzpcbi8vICAgIGh0dHA6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9jYzE5NzAxNSh2PVZTLjg1KS5hc3B4XG4vLyAgICBodHRwOi8vc3RldmVzb3VkZXJzLmNvbS9taXNjL3Rlc3QtcG9zdG1lc3NhZ2UucGhwXG5cbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbiAgLCBFdmVudEVtaXR0ZXIgPSByZXF1aXJlKCdldmVudHMnKS5FdmVudEVtaXR0ZXJcbiAgLCB2ZXJzaW9uID0gcmVxdWlyZSgnLi4vdmVyc2lvbicpXG4gICwgdXJsVXRpbHMgPSByZXF1aXJlKCcuLi91dGlscy91cmwnKVxuICAsIGlmcmFtZVV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMvaWZyYW1lJylcbiAgLCBldmVudFV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMvZXZlbnQnKVxuICAsIHJhbmRvbSA9IHJlcXVpcmUoJy4uL3V0aWxzL3JhbmRvbScpXG4gIDtcblxudmFyIGRlYnVnID0gZnVuY3Rpb24oKSB7fTtcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIGRlYnVnID0gcmVxdWlyZSgnZGVidWcnKSgnc29ja2pzLWNsaWVudDp0cmFuc3BvcnQ6aWZyYW1lJyk7XG59XG5cbmZ1bmN0aW9uIElmcmFtZVRyYW5zcG9ydCh0cmFuc3BvcnQsIHRyYW5zVXJsLCBiYXNlVXJsKSB7XG4gIGlmICghSWZyYW1lVHJhbnNwb3J0LmVuYWJsZWQoKSkge1xuICAgIHRocm93IG5ldyBFcnJvcignVHJhbnNwb3J0IGNyZWF0ZWQgd2hlbiBkaXNhYmxlZCcpO1xuICB9XG4gIEV2ZW50RW1pdHRlci5jYWxsKHRoaXMpO1xuXG4gIHZhciBzZWxmID0gdGhpcztcbiAgdGhpcy5vcmlnaW4gPSB1cmxVdGlscy5nZXRPcmlnaW4oYmFzZVVybCk7XG4gIHRoaXMuYmFzZVVybCA9IGJhc2VVcmw7XG4gIHRoaXMudHJhbnNVcmwgPSB0cmFuc1VybDtcbiAgdGhpcy50cmFuc3BvcnQgPSB0cmFuc3BvcnQ7XG4gIHRoaXMud2luZG93SWQgPSByYW5kb20uc3RyaW5nKDgpO1xuXG4gIHZhciBpZnJhbWVVcmwgPSB1cmxVdGlscy5hZGRQYXRoKGJhc2VVcmwsICcvaWZyYW1lLmh0bWwnKSArICcjJyArIHRoaXMud2luZG93SWQ7XG4gIGRlYnVnKHRyYW5zcG9ydCwgdHJhbnNVcmwsIGlmcmFtZVVybCk7XG5cbiAgdGhpcy5pZnJhbWVPYmogPSBpZnJhbWVVdGlscy5jcmVhdGVJZnJhbWUoaWZyYW1lVXJsLCBmdW5jdGlvbihyKSB7XG4gICAgZGVidWcoJ2VyciBjYWxsYmFjaycpO1xuICAgIHNlbGYuZW1pdCgnY2xvc2UnLCAxMDA2LCAnVW5hYmxlIHRvIGxvYWQgYW4gaWZyYW1lICgnICsgciArICcpJyk7XG4gICAgc2VsZi5jbG9zZSgpO1xuICB9KTtcblxuICB0aGlzLm9ubWVzc2FnZUNhbGxiYWNrID0gdGhpcy5fbWVzc2FnZS5iaW5kKHRoaXMpO1xuICBldmVudFV0aWxzLmF0dGFjaEV2ZW50KCdtZXNzYWdlJywgdGhpcy5vbm1lc3NhZ2VDYWxsYmFjayk7XG59XG5cbmluaGVyaXRzKElmcmFtZVRyYW5zcG9ydCwgRXZlbnRFbWl0dGVyKTtcblxuSWZyYW1lVHJhbnNwb3J0LnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uKCkge1xuICBkZWJ1ZygnY2xvc2UnKTtcbiAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoKTtcbiAgaWYgKHRoaXMuaWZyYW1lT2JqKSB7XG4gICAgZXZlbnRVdGlscy5kZXRhY2hFdmVudCgnbWVzc2FnZScsIHRoaXMub25tZXNzYWdlQ2FsbGJhY2spO1xuICAgIHRyeSB7XG4gICAgICAvLyBXaGVuIHRoZSBpZnJhbWUgaXMgbm90IGxvYWRlZCwgSUUgcmFpc2VzIGFuIGV4Y2VwdGlvblxuICAgICAgLy8gb24gJ2NvbnRlbnRXaW5kb3cnLlxuICAgICAgdGhpcy5wb3N0TWVzc2FnZSgnYycpO1xuICAgIH0gY2F0Y2ggKHgpIHtcbiAgICAgIC8vIGludGVudGlvbmFsbHkgZW1wdHlcbiAgICB9XG4gICAgdGhpcy5pZnJhbWVPYmouY2xlYW51cCgpO1xuICAgIHRoaXMuaWZyYW1lT2JqID0gbnVsbDtcbiAgICB0aGlzLm9ubWVzc2FnZUNhbGxiYWNrID0gdGhpcy5pZnJhbWVPYmogPSBudWxsO1xuICB9XG59O1xuXG5JZnJhbWVUcmFuc3BvcnQucHJvdG90eXBlLl9tZXNzYWdlID0gZnVuY3Rpb24oZSkge1xuICBkZWJ1ZygnbWVzc2FnZScsIGUuZGF0YSk7XG4gIGlmICghdXJsVXRpbHMuaXNPcmlnaW5FcXVhbChlLm9yaWdpbiwgdGhpcy5vcmlnaW4pKSB7XG4gICAgZGVidWcoJ25vdCBzYW1lIG9yaWdpbicsIGUub3JpZ2luLCB0aGlzLm9yaWdpbik7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIGlmcmFtZU1lc3NhZ2U7XG4gIHRyeSB7XG4gICAgaWZyYW1lTWVzc2FnZSA9IEpTT04ucGFyc2UoZS5kYXRhKTtcbiAgfSBjYXRjaCAoaWdub3JlZCkge1xuICAgIGRlYnVnKCdiYWQganNvbicsIGUuZGF0YSk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKGlmcmFtZU1lc3NhZ2Uud2luZG93SWQgIT09IHRoaXMud2luZG93SWQpIHtcbiAgICBkZWJ1ZygnbWlzbWF0Y2hlZCB3aW5kb3cgaWQnLCBpZnJhbWVNZXNzYWdlLndpbmRvd0lkLCB0aGlzLndpbmRvd0lkKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBzd2l0Y2ggKGlmcmFtZU1lc3NhZ2UudHlwZSkge1xuICBjYXNlICdzJzpcbiAgICB0aGlzLmlmcmFtZU9iai5sb2FkZWQoKTtcbiAgICAvLyB3aW5kb3cgZ2xvYmFsIGRlcGVuZGVuY3lcbiAgICB0aGlzLnBvc3RNZXNzYWdlKCdzJywgSlNPTi5zdHJpbmdpZnkoW1xuICAgICAgdmVyc2lvblxuICAgICwgdGhpcy50cmFuc3BvcnRcbiAgICAsIHRoaXMudHJhbnNVcmxcbiAgICAsIHRoaXMuYmFzZVVybFxuICAgIF0pKTtcbiAgICBicmVhaztcbiAgY2FzZSAndCc6XG4gICAgdGhpcy5lbWl0KCdtZXNzYWdlJywgaWZyYW1lTWVzc2FnZS5kYXRhKTtcbiAgICBicmVhaztcbiAgY2FzZSAnYyc6XG4gICAgdmFyIGNkYXRhO1xuICAgIHRyeSB7XG4gICAgICBjZGF0YSA9IEpTT04ucGFyc2UoaWZyYW1lTWVzc2FnZS5kYXRhKTtcbiAgICB9IGNhdGNoIChpZ25vcmVkKSB7XG4gICAgICBkZWJ1ZygnYmFkIGpzb24nLCBpZnJhbWVNZXNzYWdlLmRhdGEpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLmVtaXQoJ2Nsb3NlJywgY2RhdGFbMF0sIGNkYXRhWzFdKTtcbiAgICB0aGlzLmNsb3NlKCk7XG4gICAgYnJlYWs7XG4gIH1cbn07XG5cbklmcmFtZVRyYW5zcG9ydC5wcm90b3R5cGUucG9zdE1lc3NhZ2UgPSBmdW5jdGlvbih0eXBlLCBkYXRhKSB7XG4gIGRlYnVnKCdwb3N0TWVzc2FnZScsIHR5cGUsIGRhdGEpO1xuICB0aGlzLmlmcmFtZU9iai5wb3N0KEpTT04uc3RyaW5naWZ5KHtcbiAgICB3aW5kb3dJZDogdGhpcy53aW5kb3dJZFxuICAsIHR5cGU6IHR5cGVcbiAgLCBkYXRhOiBkYXRhIHx8ICcnXG4gIH0pLCB0aGlzLm9yaWdpbik7XG59O1xuXG5JZnJhbWVUcmFuc3BvcnQucHJvdG90eXBlLnNlbmQgPSBmdW5jdGlvbihtZXNzYWdlKSB7XG4gIGRlYnVnKCdzZW5kJywgbWVzc2FnZSk7XG4gIHRoaXMucG9zdE1lc3NhZ2UoJ20nLCBtZXNzYWdlKTtcbn07XG5cbklmcmFtZVRyYW5zcG9ydC5lbmFibGVkID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBpZnJhbWVVdGlscy5pZnJhbWVFbmFibGVkO1xufTtcblxuSWZyYW1lVHJhbnNwb3J0LnRyYW5zcG9ydE5hbWUgPSAnaWZyYW1lJztcbklmcmFtZVRyYW5zcG9ydC5yb3VuZFRyaXBzID0gMjtcblxubW9kdWxlLmV4cG9ydHMgPSBJZnJhbWVUcmFuc3BvcnQ7XG4iLCIndXNlIHN0cmljdCc7XG5cbi8vIFRoZSBzaW1wbGVzdCBhbmQgbW9zdCByb2J1c3QgdHJhbnNwb3J0LCB1c2luZyB0aGUgd2VsbC1rbm93IGNyb3NzXG4vLyBkb21haW4gaGFjayAtIEpTT05QLiBUaGlzIHRyYW5zcG9ydCBpcyBxdWl0ZSBpbmVmZmljaWVudCAtIG9uZVxuLy8gbWVzc2FnZSBjb3VsZCB1c2UgdXAgdG8gb25lIGh0dHAgcmVxdWVzdC4gQnV0IGF0IGxlYXN0IGl0IHdvcmtzIGFsbW9zdFxuLy8gZXZlcnl3aGVyZS5cbi8vIEtub3duIGxpbWl0YXRpb25zOlxuLy8gICBvIHlvdSB3aWxsIGdldCBhIHNwaW5uaW5nIGN1cnNvclxuLy8gICBvIGZvciBLb25xdWVyb3IgYSBkdW1iIHRpbWVyIGlzIG5lZWRlZCB0byBkZXRlY3QgZXJyb3JzXG5cbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbiAgLCBTZW5kZXJSZWNlaXZlciA9IHJlcXVpcmUoJy4vbGliL3NlbmRlci1yZWNlaXZlcicpXG4gICwgSnNvbnBSZWNlaXZlciA9IHJlcXVpcmUoJy4vcmVjZWl2ZXIvanNvbnAnKVxuICAsIGpzb25wU2VuZGVyID0gcmVxdWlyZSgnLi9zZW5kZXIvanNvbnAnKVxuICA7XG5cbmZ1bmN0aW9uIEpzb25QVHJhbnNwb3J0KHRyYW5zVXJsKSB7XG4gIGlmICghSnNvblBUcmFuc3BvcnQuZW5hYmxlZCgpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdUcmFuc3BvcnQgY3JlYXRlZCB3aGVuIGRpc2FibGVkJyk7XG4gIH1cbiAgU2VuZGVyUmVjZWl2ZXIuY2FsbCh0aGlzLCB0cmFuc1VybCwgJy9qc29ucCcsIGpzb25wU2VuZGVyLCBKc29ucFJlY2VpdmVyKTtcbn1cblxuaW5oZXJpdHMoSnNvblBUcmFuc3BvcnQsIFNlbmRlclJlY2VpdmVyKTtcblxuSnNvblBUcmFuc3BvcnQuZW5hYmxlZCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gISFnbG9iYWwuZG9jdW1lbnQ7XG59O1xuXG5Kc29uUFRyYW5zcG9ydC50cmFuc3BvcnROYW1lID0gJ2pzb25wLXBvbGxpbmcnO1xuSnNvblBUcmFuc3BvcnQucm91bmRUcmlwcyA9IDE7XG5Kc29uUFRyYW5zcG9ydC5uZWVkQm9keSA9IHRydWU7XG5cbm1vZHVsZS5leHBvcnRzID0gSnNvblBUcmFuc3BvcnQ7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbiAgLCB1cmxVdGlscyA9IHJlcXVpcmUoJy4uLy4uL3V0aWxzL3VybCcpXG4gICwgU2VuZGVyUmVjZWl2ZXIgPSByZXF1aXJlKCcuL3NlbmRlci1yZWNlaXZlcicpXG4gIDtcblxudmFyIGRlYnVnID0gZnVuY3Rpb24oKSB7fTtcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIGRlYnVnID0gcmVxdWlyZSgnZGVidWcnKSgnc29ja2pzLWNsaWVudDphamF4LWJhc2VkJyk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUFqYXhTZW5kZXIoQWpheE9iamVjdCkge1xuICByZXR1cm4gZnVuY3Rpb24odXJsLCBwYXlsb2FkLCBjYWxsYmFjaykge1xuICAgIGRlYnVnKCdjcmVhdGUgYWpheCBzZW5kZXInLCB1cmwsIHBheWxvYWQpO1xuICAgIHZhciBvcHQgPSB7fTtcbiAgICBpZiAodHlwZW9mIHBheWxvYWQgPT09ICdzdHJpbmcnKSB7XG4gICAgICBvcHQuaGVhZGVycyA9IHsnQ29udGVudC10eXBlJzogJ3RleHQvcGxhaW4nfTtcbiAgICB9XG4gICAgdmFyIGFqYXhVcmwgPSB1cmxVdGlscy5hZGRQYXRoKHVybCwgJy94aHJfc2VuZCcpO1xuICAgIHZhciB4byA9IG5ldyBBamF4T2JqZWN0KCdQT1NUJywgYWpheFVybCwgcGF5bG9hZCwgb3B0KTtcbiAgICB4by5vbmNlKCdmaW5pc2gnLCBmdW5jdGlvbihzdGF0dXMpIHtcbiAgICAgIGRlYnVnKCdmaW5pc2gnLCBzdGF0dXMpO1xuICAgICAgeG8gPSBudWxsO1xuXG4gICAgICBpZiAoc3RhdHVzICE9PSAyMDAgJiYgc3RhdHVzICE9PSAyMDQpIHtcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrKG5ldyBFcnJvcignaHR0cCBzdGF0dXMgJyArIHN0YXR1cykpO1xuICAgICAgfVxuICAgICAgY2FsbGJhY2soKTtcbiAgICB9KTtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICBkZWJ1ZygnYWJvcnQnKTtcbiAgICAgIHhvLmNsb3NlKCk7XG4gICAgICB4byA9IG51bGw7XG5cbiAgICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoJ0Fib3J0ZWQnKTtcbiAgICAgIGVyci5jb2RlID0gMTAwMDtcbiAgICAgIGNhbGxiYWNrKGVycik7XG4gICAgfTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gQWpheEJhc2VkVHJhbnNwb3J0KHRyYW5zVXJsLCB1cmxTdWZmaXgsIFJlY2VpdmVyLCBBamF4T2JqZWN0KSB7XG4gIFNlbmRlclJlY2VpdmVyLmNhbGwodGhpcywgdHJhbnNVcmwsIHVybFN1ZmZpeCwgY3JlYXRlQWpheFNlbmRlcihBamF4T2JqZWN0KSwgUmVjZWl2ZXIsIEFqYXhPYmplY3QpO1xufVxuXG5pbmhlcml0cyhBamF4QmFzZWRUcmFuc3BvcnQsIFNlbmRlclJlY2VpdmVyKTtcblxubW9kdWxlLmV4cG9ydHMgPSBBamF4QmFzZWRUcmFuc3BvcnQ7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbiAgLCBFdmVudEVtaXR0ZXIgPSByZXF1aXJlKCdldmVudHMnKS5FdmVudEVtaXR0ZXJcbiAgO1xuXG52YXIgZGVidWcgPSBmdW5jdGlvbigpIHt9O1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgZGVidWcgPSByZXF1aXJlKCdkZWJ1ZycpKCdzb2NranMtY2xpZW50OmJ1ZmZlcmVkLXNlbmRlcicpO1xufVxuXG5mdW5jdGlvbiBCdWZmZXJlZFNlbmRlcih1cmwsIHNlbmRlcikge1xuICBkZWJ1Zyh1cmwpO1xuICBFdmVudEVtaXR0ZXIuY2FsbCh0aGlzKTtcbiAgdGhpcy5zZW5kQnVmZmVyID0gW107XG4gIHRoaXMuc2VuZGVyID0gc2VuZGVyO1xuICB0aGlzLnVybCA9IHVybDtcbn1cblxuaW5oZXJpdHMoQnVmZmVyZWRTZW5kZXIsIEV2ZW50RW1pdHRlcik7XG5cbkJ1ZmZlcmVkU2VuZGVyLnByb3RvdHlwZS5zZW5kID0gZnVuY3Rpb24obWVzc2FnZSkge1xuICBkZWJ1Zygnc2VuZCcsIG1lc3NhZ2UpO1xuICB0aGlzLnNlbmRCdWZmZXIucHVzaChtZXNzYWdlKTtcbiAgaWYgKCF0aGlzLnNlbmRTdG9wKSB7XG4gICAgdGhpcy5zZW5kU2NoZWR1bGUoKTtcbiAgfVxufTtcblxuLy8gRm9yIHBvbGxpbmcgdHJhbnNwb3J0cyBpbiBhIHNpdHVhdGlvbiB3aGVuIGluIHRoZSBtZXNzYWdlIGNhbGxiYWNrLFxuLy8gbmV3IG1lc3NhZ2UgaXMgYmVpbmcgc2VuZC4gSWYgdGhlIHNlbmRpbmcgY29ubmVjdGlvbiB3YXMgc3RhcnRlZFxuLy8gYmVmb3JlIHJlY2VpdmluZyBvbmUsIGl0IGlzIHBvc3NpYmxlIHRvIHNhdHVyYXRlIHRoZSBuZXR3b3JrIGFuZFxuLy8gdGltZW91dCBkdWUgdG8gdGhlIGxhY2sgb2YgcmVjZWl2aW5nIHNvY2tldC4gVG8gYXZvaWQgdGhhdCB3ZSBkZWxheVxuLy8gc2VuZGluZyBtZXNzYWdlcyBieSBzb21lIHNtYWxsIHRpbWUsIGluIG9yZGVyIHRvIGxldCByZWNlaXZpbmdcbi8vIGNvbm5lY3Rpb24gYmUgc3RhcnRlZCBiZWZvcmVoYW5kLiBUaGlzIGlzIG9ubHkgYSBoYWxmbWVhc3VyZSBhbmRcbi8vIGRvZXMgbm90IGZpeCB0aGUgYmlnIHByb2JsZW0sIGJ1dCBpdCBkb2VzIG1ha2UgdGhlIHRlc3RzIGdvIG1vcmVcbi8vIHN0YWJsZSBvbiBzbG93IG5ldHdvcmtzLlxuQnVmZmVyZWRTZW5kZXIucHJvdG90eXBlLnNlbmRTY2hlZHVsZVdhaXQgPSBmdW5jdGlvbigpIHtcbiAgZGVidWcoJ3NlbmRTY2hlZHVsZVdhaXQnKTtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB2YXIgdHJlZjtcbiAgdGhpcy5zZW5kU3RvcCA9IGZ1bmN0aW9uKCkge1xuICAgIGRlYnVnKCdzZW5kU3RvcCcpO1xuICAgIHNlbGYuc2VuZFN0b3AgPSBudWxsO1xuICAgIGNsZWFyVGltZW91dCh0cmVmKTtcbiAgfTtcbiAgdHJlZiA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgZGVidWcoJ3RpbWVvdXQnKTtcbiAgICBzZWxmLnNlbmRTdG9wID0gbnVsbDtcbiAgICBzZWxmLnNlbmRTY2hlZHVsZSgpO1xuICB9LCAyNSk7XG59O1xuXG5CdWZmZXJlZFNlbmRlci5wcm90b3R5cGUuc2VuZFNjaGVkdWxlID0gZnVuY3Rpb24oKSB7XG4gIGRlYnVnKCdzZW5kU2NoZWR1bGUnLCB0aGlzLnNlbmRCdWZmZXIubGVuZ3RoKTtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICBpZiAodGhpcy5zZW5kQnVmZmVyLmxlbmd0aCA+IDApIHtcbiAgICB2YXIgcGF5bG9hZCA9ICdbJyArIHRoaXMuc2VuZEJ1ZmZlci5qb2luKCcsJykgKyAnXSc7XG4gICAgdGhpcy5zZW5kU3RvcCA9IHRoaXMuc2VuZGVyKHRoaXMudXJsLCBwYXlsb2FkLCBmdW5jdGlvbihlcnIpIHtcbiAgICAgIHNlbGYuc2VuZFN0b3AgPSBudWxsO1xuICAgICAgaWYgKGVycikge1xuICAgICAgICBkZWJ1ZygnZXJyb3InLCBlcnIpO1xuICAgICAgICBzZWxmLmVtaXQoJ2Nsb3NlJywgZXJyLmNvZGUgfHwgMTAwNiwgJ1NlbmRpbmcgZXJyb3I6ICcgKyBlcnIpO1xuICAgICAgICBzZWxmLmNsb3NlKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzZWxmLnNlbmRTY2hlZHVsZVdhaXQoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB0aGlzLnNlbmRCdWZmZXIgPSBbXTtcbiAgfVxufTtcblxuQnVmZmVyZWRTZW5kZXIucHJvdG90eXBlLl9jbGVhbnVwID0gZnVuY3Rpb24oKSB7XG4gIGRlYnVnKCdfY2xlYW51cCcpO1xuICB0aGlzLnJlbW92ZUFsbExpc3RlbmVycygpO1xufTtcblxuQnVmZmVyZWRTZW5kZXIucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24oKSB7XG4gIGRlYnVnKCdjbG9zZScpO1xuICB0aGlzLl9jbGVhbnVwKCk7XG4gIGlmICh0aGlzLnNlbmRTdG9wKSB7XG4gICAgdGhpcy5zZW5kU3RvcCgpO1xuICAgIHRoaXMuc2VuZFN0b3AgPSBudWxsO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEJ1ZmZlcmVkU2VuZGVyO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG4gICwgSWZyYW1lVHJhbnNwb3J0ID0gcmVxdWlyZSgnLi4vaWZyYW1lJylcbiAgLCBvYmplY3RVdGlscyA9IHJlcXVpcmUoJy4uLy4uL3V0aWxzL29iamVjdCcpXG4gIDtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbih0cmFuc3BvcnQpIHtcblxuICBmdW5jdGlvbiBJZnJhbWVXcmFwVHJhbnNwb3J0KHRyYW5zVXJsLCBiYXNlVXJsKSB7XG4gICAgSWZyYW1lVHJhbnNwb3J0LmNhbGwodGhpcywgdHJhbnNwb3J0LnRyYW5zcG9ydE5hbWUsIHRyYW5zVXJsLCBiYXNlVXJsKTtcbiAgfVxuXG4gIGluaGVyaXRzKElmcmFtZVdyYXBUcmFuc3BvcnQsIElmcmFtZVRyYW5zcG9ydCk7XG5cbiAgSWZyYW1lV3JhcFRyYW5zcG9ydC5lbmFibGVkID0gZnVuY3Rpb24odXJsLCBpbmZvKSB7XG4gICAgaWYgKCFnbG9iYWwuZG9jdW1lbnQpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgaWZyYW1lSW5mbyA9IG9iamVjdFV0aWxzLmV4dGVuZCh7fSwgaW5mbyk7XG4gICAgaWZyYW1lSW5mby5zYW1lT3JpZ2luID0gdHJ1ZTtcbiAgICByZXR1cm4gdHJhbnNwb3J0LmVuYWJsZWQoaWZyYW1lSW5mbykgJiYgSWZyYW1lVHJhbnNwb3J0LmVuYWJsZWQoKTtcbiAgfTtcblxuICBJZnJhbWVXcmFwVHJhbnNwb3J0LnRyYW5zcG9ydE5hbWUgPSAnaWZyYW1lLScgKyB0cmFuc3BvcnQudHJhbnNwb3J0TmFtZTtcbiAgSWZyYW1lV3JhcFRyYW5zcG9ydC5uZWVkQm9keSA9IHRydWU7XG4gIElmcmFtZVdyYXBUcmFuc3BvcnQucm91bmRUcmlwcyA9IElmcmFtZVRyYW5zcG9ydC5yb3VuZFRyaXBzICsgdHJhbnNwb3J0LnJvdW5kVHJpcHMgLSAxOyAvLyBodG1sLCBqYXZhc2NyaXB0ICgyKSArIHRyYW5zcG9ydCAtIG5vIENPUlMgKDEpXG5cbiAgSWZyYW1lV3JhcFRyYW5zcG9ydC5mYWNhZGVUcmFuc3BvcnQgPSB0cmFuc3BvcnQ7XG5cbiAgcmV0dXJuIElmcmFtZVdyYXBUcmFuc3BvcnQ7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG4gICwgRXZlbnRFbWl0dGVyID0gcmVxdWlyZSgnZXZlbnRzJykuRXZlbnRFbWl0dGVyXG4gIDtcblxudmFyIGRlYnVnID0gZnVuY3Rpb24oKSB7fTtcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIGRlYnVnID0gcmVxdWlyZSgnZGVidWcnKSgnc29ja2pzLWNsaWVudDpwb2xsaW5nJyk7XG59XG5cbmZ1bmN0aW9uIFBvbGxpbmcoUmVjZWl2ZXIsIHJlY2VpdmVVcmwsIEFqYXhPYmplY3QpIHtcbiAgZGVidWcocmVjZWl2ZVVybCk7XG4gIEV2ZW50RW1pdHRlci5jYWxsKHRoaXMpO1xuICB0aGlzLlJlY2VpdmVyID0gUmVjZWl2ZXI7XG4gIHRoaXMucmVjZWl2ZVVybCA9IHJlY2VpdmVVcmw7XG4gIHRoaXMuQWpheE9iamVjdCA9IEFqYXhPYmplY3Q7XG4gIHRoaXMuX3NjaGVkdWxlUmVjZWl2ZXIoKTtcbn1cblxuaW5oZXJpdHMoUG9sbGluZywgRXZlbnRFbWl0dGVyKTtcblxuUG9sbGluZy5wcm90b3R5cGUuX3NjaGVkdWxlUmVjZWl2ZXIgPSBmdW5jdGlvbigpIHtcbiAgZGVidWcoJ19zY2hlZHVsZVJlY2VpdmVyJyk7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdmFyIHBvbGwgPSB0aGlzLnBvbGwgPSBuZXcgdGhpcy5SZWNlaXZlcih0aGlzLnJlY2VpdmVVcmwsIHRoaXMuQWpheE9iamVjdCk7XG5cbiAgcG9sbC5vbignbWVzc2FnZScsIGZ1bmN0aW9uKG1zZykge1xuICAgIGRlYnVnKCdtZXNzYWdlJywgbXNnKTtcbiAgICBzZWxmLmVtaXQoJ21lc3NhZ2UnLCBtc2cpO1xuICB9KTtcblxuICBwb2xsLm9uY2UoJ2Nsb3NlJywgZnVuY3Rpb24oY29kZSwgcmVhc29uKSB7XG4gICAgZGVidWcoJ2Nsb3NlJywgY29kZSwgcmVhc29uLCBzZWxmLnBvbGxJc0Nsb3NpbmcpO1xuICAgIHNlbGYucG9sbCA9IHBvbGwgPSBudWxsO1xuXG4gICAgaWYgKCFzZWxmLnBvbGxJc0Nsb3NpbmcpIHtcbiAgICAgIGlmIChyZWFzb24gPT09ICduZXR3b3JrJykge1xuICAgICAgICBzZWxmLl9zY2hlZHVsZVJlY2VpdmVyKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzZWxmLmVtaXQoJ2Nsb3NlJywgY29kZSB8fCAxMDA2LCByZWFzb24pO1xuICAgICAgICBzZWxmLnJlbW92ZUFsbExpc3RlbmVycygpO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG59O1xuXG5Qb2xsaW5nLnByb3RvdHlwZS5hYm9ydCA9IGZ1bmN0aW9uKCkge1xuICBkZWJ1ZygnYWJvcnQnKTtcbiAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoKTtcbiAgdGhpcy5wb2xsSXNDbG9zaW5nID0gdHJ1ZTtcbiAgaWYgKHRoaXMucG9sbCkge1xuICAgIHRoaXMucG9sbC5hYm9ydCgpO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFBvbGxpbmc7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbiAgLCB1cmxVdGlscyA9IHJlcXVpcmUoJy4uLy4uL3V0aWxzL3VybCcpXG4gICwgQnVmZmVyZWRTZW5kZXIgPSByZXF1aXJlKCcuL2J1ZmZlcmVkLXNlbmRlcicpXG4gICwgUG9sbGluZyA9IHJlcXVpcmUoJy4vcG9sbGluZycpXG4gIDtcblxudmFyIGRlYnVnID0gZnVuY3Rpb24oKSB7fTtcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIGRlYnVnID0gcmVxdWlyZSgnZGVidWcnKSgnc29ja2pzLWNsaWVudDpzZW5kZXItcmVjZWl2ZXInKTtcbn1cblxuZnVuY3Rpb24gU2VuZGVyUmVjZWl2ZXIodHJhbnNVcmwsIHVybFN1ZmZpeCwgc2VuZGVyRnVuYywgUmVjZWl2ZXIsIEFqYXhPYmplY3QpIHtcbiAgdmFyIHBvbGxVcmwgPSB1cmxVdGlscy5hZGRQYXRoKHRyYW5zVXJsLCB1cmxTdWZmaXgpO1xuICBkZWJ1Zyhwb2xsVXJsKTtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICBCdWZmZXJlZFNlbmRlci5jYWxsKHRoaXMsIHRyYW5zVXJsLCBzZW5kZXJGdW5jKTtcblxuICB0aGlzLnBvbGwgPSBuZXcgUG9sbGluZyhSZWNlaXZlciwgcG9sbFVybCwgQWpheE9iamVjdCk7XG4gIHRoaXMucG9sbC5vbignbWVzc2FnZScsIGZ1bmN0aW9uKG1zZykge1xuICAgIGRlYnVnKCdwb2xsIG1lc3NhZ2UnLCBtc2cpO1xuICAgIHNlbGYuZW1pdCgnbWVzc2FnZScsIG1zZyk7XG4gIH0pO1xuICB0aGlzLnBvbGwub25jZSgnY2xvc2UnLCBmdW5jdGlvbihjb2RlLCByZWFzb24pIHtcbiAgICBkZWJ1ZygncG9sbCBjbG9zZScsIGNvZGUsIHJlYXNvbik7XG4gICAgc2VsZi5wb2xsID0gbnVsbDtcbiAgICBzZWxmLmVtaXQoJ2Nsb3NlJywgY29kZSwgcmVhc29uKTtcbiAgICBzZWxmLmNsb3NlKCk7XG4gIH0pO1xufVxuXG5pbmhlcml0cyhTZW5kZXJSZWNlaXZlciwgQnVmZmVyZWRTZW5kZXIpO1xuXG5TZW5kZXJSZWNlaXZlci5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbigpIHtcbiAgQnVmZmVyZWRTZW5kZXIucHJvdG90eXBlLmNsb3NlLmNhbGwodGhpcyk7XG4gIGRlYnVnKCdjbG9zZScpO1xuICB0aGlzLnJlbW92ZUFsbExpc3RlbmVycygpO1xuICBpZiAodGhpcy5wb2xsKSB7XG4gICAgdGhpcy5wb2xsLmFib3J0KCk7XG4gICAgdGhpcy5wb2xsID0gbnVsbDtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBTZW5kZXJSZWNlaXZlcjtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxuICAsIEV2ZW50RW1pdHRlciA9IHJlcXVpcmUoJ2V2ZW50cycpLkV2ZW50RW1pdHRlclxuICAsIEV2ZW50U291cmNlRHJpdmVyID0gcmVxdWlyZSgnZXZlbnRzb3VyY2UnKVxuICA7XG5cbnZhciBkZWJ1ZyA9IGZ1bmN0aW9uKCkge307XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBkZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJykoJ3NvY2tqcy1jbGllbnQ6cmVjZWl2ZXI6ZXZlbnRzb3VyY2UnKTtcbn1cblxuZnVuY3Rpb24gRXZlbnRTb3VyY2VSZWNlaXZlcih1cmwpIHtcbiAgZGVidWcodXJsKTtcbiAgRXZlbnRFbWl0dGVyLmNhbGwodGhpcyk7XG5cbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB2YXIgZXMgPSB0aGlzLmVzID0gbmV3IEV2ZW50U291cmNlRHJpdmVyKHVybCk7XG4gIGVzLm9ubWVzc2FnZSA9IGZ1bmN0aW9uKGUpIHtcbiAgICBkZWJ1ZygnbWVzc2FnZScsIGUuZGF0YSk7XG4gICAgc2VsZi5lbWl0KCdtZXNzYWdlJywgZGVjb2RlVVJJKGUuZGF0YSkpO1xuICB9O1xuICBlcy5vbmVycm9yID0gZnVuY3Rpb24oZSkge1xuICAgIGRlYnVnKCdlcnJvcicsIGVzLnJlYWR5U3RhdGUsIGUpO1xuICAgIC8vIEVTIG9uIHJlY29ubmVjdGlvbiBoYXMgcmVhZHlTdGF0ZSA9IDAgb3IgMS5cbiAgICAvLyBvbiBuZXR3b3JrIGVycm9yIGl0J3MgQ0xPU0VEID0gMlxuICAgIHZhciByZWFzb24gPSAoZXMucmVhZHlTdGF0ZSAhPT0gMiA/ICduZXR3b3JrJyA6ICdwZXJtYW5lbnQnKTtcbiAgICBzZWxmLl9jbGVhbnVwKCk7XG4gICAgc2VsZi5fY2xvc2UocmVhc29uKTtcbiAgfTtcbn1cblxuaW5oZXJpdHMoRXZlbnRTb3VyY2VSZWNlaXZlciwgRXZlbnRFbWl0dGVyKTtcblxuRXZlbnRTb3VyY2VSZWNlaXZlci5wcm90b3R5cGUuYWJvcnQgPSBmdW5jdGlvbigpIHtcbiAgZGVidWcoJ2Fib3J0Jyk7XG4gIHRoaXMuX2NsZWFudXAoKTtcbiAgdGhpcy5fY2xvc2UoJ3VzZXInKTtcbn07XG5cbkV2ZW50U291cmNlUmVjZWl2ZXIucHJvdG90eXBlLl9jbGVhbnVwID0gZnVuY3Rpb24oKSB7XG4gIGRlYnVnKCdjbGVhbnVwJyk7XG4gIHZhciBlcyA9IHRoaXMuZXM7XG4gIGlmIChlcykge1xuICAgIGVzLm9ubWVzc2FnZSA9IGVzLm9uZXJyb3IgPSBudWxsO1xuICAgIGVzLmNsb3NlKCk7XG4gICAgdGhpcy5lcyA9IG51bGw7XG4gIH1cbn07XG5cbkV2ZW50U291cmNlUmVjZWl2ZXIucHJvdG90eXBlLl9jbG9zZSA9IGZ1bmN0aW9uKHJlYXNvbikge1xuICBkZWJ1ZygnY2xvc2UnLCByZWFzb24pO1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIC8vIFNhZmFyaSBhbmQgY2hyb21lIDwgMTUgY3Jhc2ggaWYgd2UgY2xvc2Ugd2luZG93IGJlZm9yZVxuICAvLyB3YWl0aW5nIGZvciBFUyBjbGVhbnVwLiBTZWU6XG4gIC8vIGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD04OTE1NVxuICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgIHNlbGYuZW1pdCgnY2xvc2UnLCBudWxsLCByZWFzb24pO1xuICAgIHNlbGYucmVtb3ZlQWxsTGlzdGVuZXJzKCk7XG4gIH0sIDIwMCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEV2ZW50U291cmNlUmVjZWl2ZXI7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbiAgLCBpZnJhbWVVdGlscyA9IHJlcXVpcmUoJy4uLy4uL3V0aWxzL2lmcmFtZScpXG4gICwgdXJsVXRpbHMgPSByZXF1aXJlKCcuLi8uLi91dGlscy91cmwnKVxuICAsIEV2ZW50RW1pdHRlciA9IHJlcXVpcmUoJ2V2ZW50cycpLkV2ZW50RW1pdHRlclxuICAsIHJhbmRvbSA9IHJlcXVpcmUoJy4uLy4uL3V0aWxzL3JhbmRvbScpXG4gIDtcblxudmFyIGRlYnVnID0gZnVuY3Rpb24oKSB7fTtcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIGRlYnVnID0gcmVxdWlyZSgnZGVidWcnKSgnc29ja2pzLWNsaWVudDpyZWNlaXZlcjpodG1sZmlsZScpO1xufVxuXG5mdW5jdGlvbiBIdG1sZmlsZVJlY2VpdmVyKHVybCkge1xuICBkZWJ1Zyh1cmwpO1xuICBFdmVudEVtaXR0ZXIuY2FsbCh0aGlzKTtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICBpZnJhbWVVdGlscy5wb2xsdXRlR2xvYmFsTmFtZXNwYWNlKCk7XG5cbiAgdGhpcy5pZCA9ICdhJyArIHJhbmRvbS5zdHJpbmcoNik7XG4gIHVybCA9IHVybFV0aWxzLmFkZFF1ZXJ5KHVybCwgJ2M9JyArIGRlY29kZVVSSUNvbXBvbmVudChpZnJhbWVVdGlscy5XUHJlZml4ICsgJy4nICsgdGhpcy5pZCkpO1xuXG4gIGRlYnVnKCd1c2luZyBodG1sZmlsZScsIEh0bWxmaWxlUmVjZWl2ZXIuaHRtbGZpbGVFbmFibGVkKTtcbiAgdmFyIGNvbnN0cnVjdEZ1bmMgPSBIdG1sZmlsZVJlY2VpdmVyLmh0bWxmaWxlRW5hYmxlZCA/XG4gICAgICBpZnJhbWVVdGlscy5jcmVhdGVIdG1sZmlsZSA6IGlmcmFtZVV0aWxzLmNyZWF0ZUlmcmFtZTtcblxuICBnbG9iYWxbaWZyYW1lVXRpbHMuV1ByZWZpeF1bdGhpcy5pZF0gPSB7XG4gICAgc3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgZGVidWcoJ3N0YXJ0Jyk7XG4gICAgICBzZWxmLmlmcmFtZU9iai5sb2FkZWQoKTtcbiAgICB9XG4gICwgbWVzc2FnZTogZnVuY3Rpb24oZGF0YSkge1xuICAgICAgZGVidWcoJ21lc3NhZ2UnLCBkYXRhKTtcbiAgICAgIHNlbGYuZW1pdCgnbWVzc2FnZScsIGRhdGEpO1xuICAgIH1cbiAgLCBzdG9wOiBmdW5jdGlvbigpIHtcbiAgICAgIGRlYnVnKCdzdG9wJyk7XG4gICAgICBzZWxmLl9jbGVhbnVwKCk7XG4gICAgICBzZWxmLl9jbG9zZSgnbmV0d29yaycpO1xuICAgIH1cbiAgfTtcbiAgdGhpcy5pZnJhbWVPYmogPSBjb25zdHJ1Y3RGdW5jKHVybCwgZnVuY3Rpb24oKSB7XG4gICAgZGVidWcoJ2NhbGxiYWNrJyk7XG4gICAgc2VsZi5fY2xlYW51cCgpO1xuICAgIHNlbGYuX2Nsb3NlKCdwZXJtYW5lbnQnKTtcbiAgfSk7XG59XG5cbmluaGVyaXRzKEh0bWxmaWxlUmVjZWl2ZXIsIEV2ZW50RW1pdHRlcik7XG5cbkh0bWxmaWxlUmVjZWl2ZXIucHJvdG90eXBlLmFib3J0ID0gZnVuY3Rpb24oKSB7XG4gIGRlYnVnKCdhYm9ydCcpO1xuICB0aGlzLl9jbGVhbnVwKCk7XG4gIHRoaXMuX2Nsb3NlKCd1c2VyJyk7XG59O1xuXG5IdG1sZmlsZVJlY2VpdmVyLnByb3RvdHlwZS5fY2xlYW51cCA9IGZ1bmN0aW9uKCkge1xuICBkZWJ1ZygnX2NsZWFudXAnKTtcbiAgaWYgKHRoaXMuaWZyYW1lT2JqKSB7XG4gICAgdGhpcy5pZnJhbWVPYmouY2xlYW51cCgpO1xuICAgIHRoaXMuaWZyYW1lT2JqID0gbnVsbDtcbiAgfVxuICBkZWxldGUgZ2xvYmFsW2lmcmFtZVV0aWxzLldQcmVmaXhdW3RoaXMuaWRdO1xufTtcblxuSHRtbGZpbGVSZWNlaXZlci5wcm90b3R5cGUuX2Nsb3NlID0gZnVuY3Rpb24ocmVhc29uKSB7XG4gIGRlYnVnKCdfY2xvc2UnLCByZWFzb24pO1xuICB0aGlzLmVtaXQoJ2Nsb3NlJywgbnVsbCwgcmVhc29uKTtcbiAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoKTtcbn07XG5cbkh0bWxmaWxlUmVjZWl2ZXIuaHRtbGZpbGVFbmFibGVkID0gZmFsc2U7XG5cbi8vIG9iZnVzY2F0ZSB0byBhdm9pZCBmaXJld2FsbHNcbnZhciBheG8gPSBbJ0FjdGl2ZSddLmNvbmNhdCgnT2JqZWN0Jykuam9pbignWCcpO1xuaWYgKGF4byBpbiBnbG9iYWwpIHtcbiAgdHJ5IHtcbiAgICBIdG1sZmlsZVJlY2VpdmVyLmh0bWxmaWxlRW5hYmxlZCA9ICEhbmV3IGdsb2JhbFtheG9dKCdodG1sZmlsZScpO1xuICB9IGNhdGNoICh4KSB7XG4gICAgLy8gaW50ZW50aW9uYWxseSBlbXB0eVxuICB9XG59XG5cbkh0bWxmaWxlUmVjZWl2ZXIuZW5hYmxlZCA9IEh0bWxmaWxlUmVjZWl2ZXIuaHRtbGZpbGVFbmFibGVkIHx8IGlmcmFtZVV0aWxzLmlmcmFtZUVuYWJsZWQ7XG5cbm1vZHVsZS5leHBvcnRzID0gSHRtbGZpbGVSZWNlaXZlcjtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vLi4vdXRpbHMvaWZyYW1lJylcbiAgLCByYW5kb20gPSByZXF1aXJlKCcuLi8uLi91dGlscy9yYW5kb20nKVxuICAsIGJyb3dzZXIgPSByZXF1aXJlKCcuLi8uLi91dGlscy9icm93c2VyJylcbiAgLCB1cmxVdGlscyA9IHJlcXVpcmUoJy4uLy4uL3V0aWxzL3VybCcpXG4gICwgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG4gICwgRXZlbnRFbWl0dGVyID0gcmVxdWlyZSgnZXZlbnRzJykuRXZlbnRFbWl0dGVyXG4gIDtcblxudmFyIGRlYnVnID0gZnVuY3Rpb24oKSB7fTtcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIGRlYnVnID0gcmVxdWlyZSgnZGVidWcnKSgnc29ja2pzLWNsaWVudDpyZWNlaXZlcjpqc29ucCcpO1xufVxuXG5mdW5jdGlvbiBKc29ucFJlY2VpdmVyKHVybCkge1xuICBkZWJ1Zyh1cmwpO1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIEV2ZW50RW1pdHRlci5jYWxsKHRoaXMpO1xuXG4gIHV0aWxzLnBvbGx1dGVHbG9iYWxOYW1lc3BhY2UoKTtcblxuICB0aGlzLmlkID0gJ2EnICsgcmFuZG9tLnN0cmluZyg2KTtcbiAgdmFyIHVybFdpdGhJZCA9IHVybFV0aWxzLmFkZFF1ZXJ5KHVybCwgJ2M9JyArIGVuY29kZVVSSUNvbXBvbmVudCh1dGlscy5XUHJlZml4ICsgJy4nICsgdGhpcy5pZCkpO1xuXG4gIGdsb2JhbFt1dGlscy5XUHJlZml4XVt0aGlzLmlkXSA9IHRoaXMuX2NhbGxiYWNrLmJpbmQodGhpcyk7XG4gIHRoaXMuX2NyZWF0ZVNjcmlwdCh1cmxXaXRoSWQpO1xuXG4gIC8vIEZhbGxiYWNrIG1vc3RseSBmb3IgS29ucXVlcm9yIC0gc3R1cGlkIHRpbWVyLCAzNSBzZWNvbmRzIHNoYWxsIGJlIHBsZW50eS5cbiAgdGhpcy50aW1lb3V0SWQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgIGRlYnVnKCd0aW1lb3V0Jyk7XG4gICAgc2VsZi5fYWJvcnQobmV3IEVycm9yKCdKU09OUCBzY3JpcHQgbG9hZGVkIGFibm9ybWFsbHkgKHRpbWVvdXQpJykpO1xuICB9LCBKc29ucFJlY2VpdmVyLnRpbWVvdXQpO1xufVxuXG5pbmhlcml0cyhKc29ucFJlY2VpdmVyLCBFdmVudEVtaXR0ZXIpO1xuXG5Kc29ucFJlY2VpdmVyLnByb3RvdHlwZS5hYm9ydCA9IGZ1bmN0aW9uKCkge1xuICBkZWJ1ZygnYWJvcnQnKTtcbiAgaWYgKGdsb2JhbFt1dGlscy5XUHJlZml4XVt0aGlzLmlkXSkge1xuICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoJ0pTT05QIHVzZXIgYWJvcnRlZCByZWFkJyk7XG4gICAgZXJyLmNvZGUgPSAxMDAwO1xuICAgIHRoaXMuX2Fib3J0KGVycik7XG4gIH1cbn07XG5cbkpzb25wUmVjZWl2ZXIudGltZW91dCA9IDM1MDAwO1xuSnNvbnBSZWNlaXZlci5zY3JpcHRFcnJvclRpbWVvdXQgPSAxMDAwO1xuXG5Kc29ucFJlY2VpdmVyLnByb3RvdHlwZS5fY2FsbGJhY2sgPSBmdW5jdGlvbihkYXRhKSB7XG4gIGRlYnVnKCdfY2FsbGJhY2snLCBkYXRhKTtcbiAgdGhpcy5fY2xlYW51cCgpO1xuXG4gIGlmICh0aGlzLmFib3J0aW5nKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKGRhdGEpIHtcbiAgICBkZWJ1ZygnbWVzc2FnZScsIGRhdGEpO1xuICAgIHRoaXMuZW1pdCgnbWVzc2FnZScsIGRhdGEpO1xuICB9XG4gIHRoaXMuZW1pdCgnY2xvc2UnLCBudWxsLCAnbmV0d29yaycpO1xuICB0aGlzLnJlbW92ZUFsbExpc3RlbmVycygpO1xufTtcblxuSnNvbnBSZWNlaXZlci5wcm90b3R5cGUuX2Fib3J0ID0gZnVuY3Rpb24oZXJyKSB7XG4gIGRlYnVnKCdfYWJvcnQnLCBlcnIpO1xuICB0aGlzLl9jbGVhbnVwKCk7XG4gIHRoaXMuYWJvcnRpbmcgPSB0cnVlO1xuICB0aGlzLmVtaXQoJ2Nsb3NlJywgZXJyLmNvZGUsIGVyci5tZXNzYWdlKTtcbiAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoKTtcbn07XG5cbkpzb25wUmVjZWl2ZXIucHJvdG90eXBlLl9jbGVhbnVwID0gZnVuY3Rpb24oKSB7XG4gIGRlYnVnKCdfY2xlYW51cCcpO1xuICBjbGVhclRpbWVvdXQodGhpcy50aW1lb3V0SWQpO1xuICBpZiAodGhpcy5zY3JpcHQyKSB7XG4gICAgdGhpcy5zY3JpcHQyLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy5zY3JpcHQyKTtcbiAgICB0aGlzLnNjcmlwdDIgPSBudWxsO1xuICB9XG4gIGlmICh0aGlzLnNjcmlwdCkge1xuICAgIHZhciBzY3JpcHQgPSB0aGlzLnNjcmlwdDtcbiAgICAvLyBVbmZvcnR1bmF0ZWx5LCB5b3UgY2FuJ3QgcmVhbGx5IGFib3J0IHNjcmlwdCBsb2FkaW5nIG9mXG4gICAgLy8gdGhlIHNjcmlwdC5cbiAgICBzY3JpcHQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzY3JpcHQpO1xuICAgIHNjcmlwdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBzY3JpcHQub25lcnJvciA9XG4gICAgICAgIHNjcmlwdC5vbmxvYWQgPSBzY3JpcHQub25jbGljayA9IG51bGw7XG4gICAgdGhpcy5zY3JpcHQgPSBudWxsO1xuICB9XG4gIGRlbGV0ZSBnbG9iYWxbdXRpbHMuV1ByZWZpeF1bdGhpcy5pZF07XG59O1xuXG5Kc29ucFJlY2VpdmVyLnByb3RvdHlwZS5fc2NyaXB0RXJyb3IgPSBmdW5jdGlvbigpIHtcbiAgZGVidWcoJ19zY3JpcHRFcnJvcicpO1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIGlmICh0aGlzLmVycm9yVGltZXIpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB0aGlzLmVycm9yVGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgIGlmICghc2VsZi5sb2FkZWRPa2F5KSB7XG4gICAgICBzZWxmLl9hYm9ydChuZXcgRXJyb3IoJ0pTT05QIHNjcmlwdCBsb2FkZWQgYWJub3JtYWxseSAob25lcnJvciknKSk7XG4gICAgfVxuICB9LCBKc29ucFJlY2VpdmVyLnNjcmlwdEVycm9yVGltZW91dCk7XG59O1xuXG5Kc29ucFJlY2VpdmVyLnByb3RvdHlwZS5fY3JlYXRlU2NyaXB0ID0gZnVuY3Rpb24odXJsKSB7XG4gIGRlYnVnKCdfY3JlYXRlU2NyaXB0JywgdXJsKTtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB2YXIgc2NyaXB0ID0gdGhpcy5zY3JpcHQgPSBnbG9iYWwuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XG4gIHZhciBzY3JpcHQyOyAgLy8gT3BlcmEgc3luY2hyb25vdXMgbG9hZCB0cmljay5cblxuICBzY3JpcHQuaWQgPSAnYScgKyByYW5kb20uc3RyaW5nKDgpO1xuICBzY3JpcHQuc3JjID0gdXJsO1xuICBzY3JpcHQudHlwZSA9ICd0ZXh0L2phdmFzY3JpcHQnO1xuICBzY3JpcHQuY2hhcnNldCA9ICdVVEYtOCc7XG4gIHNjcmlwdC5vbmVycm9yID0gdGhpcy5fc2NyaXB0RXJyb3IuYmluZCh0aGlzKTtcbiAgc2NyaXB0Lm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgIGRlYnVnKCdvbmxvYWQnKTtcbiAgICBzZWxmLl9hYm9ydChuZXcgRXJyb3IoJ0pTT05QIHNjcmlwdCBsb2FkZWQgYWJub3JtYWxseSAob25sb2FkKScpKTtcbiAgfTtcblxuICAvLyBJRTkgZmlyZXMgJ2Vycm9yJyBldmVudCBhZnRlciBvbnJlYWR5c3RhdGVjaGFuZ2Ugb3IgYmVmb3JlLCBpbiByYW5kb20gb3JkZXIuXG4gIC8vIFVzZSBsb2FkZWRPa2F5IHRvIGRldGVybWluZSBpZiBhY3R1YWxseSBlcnJvcmVkXG4gIHNjcmlwdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpIHtcbiAgICBkZWJ1Zygnb25yZWFkeXN0YXRlY2hhbmdlJywgc2NyaXB0LnJlYWR5U3RhdGUpO1xuICAgIGlmICgvbG9hZGVkfGNsb3NlZC8udGVzdChzY3JpcHQucmVhZHlTdGF0ZSkpIHtcbiAgICAgIGlmIChzY3JpcHQgJiYgc2NyaXB0Lmh0bWxGb3IgJiYgc2NyaXB0Lm9uY2xpY2spIHtcbiAgICAgICAgc2VsZi5sb2FkZWRPa2F5ID0gdHJ1ZTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAvLyBJbiBJRSwgYWN0dWFsbHkgZXhlY3V0ZSB0aGUgc2NyaXB0LlxuICAgICAgICAgIHNjcmlwdC5vbmNsaWNrKCk7XG4gICAgICAgIH0gY2F0Y2ggKHgpIHtcbiAgICAgICAgICAvLyBpbnRlbnRpb25hbGx5IGVtcHR5XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChzY3JpcHQpIHtcbiAgICAgICAgc2VsZi5fYWJvcnQobmV3IEVycm9yKCdKU09OUCBzY3JpcHQgbG9hZGVkIGFibm9ybWFsbHkgKG9ucmVhZHlzdGF0ZWNoYW5nZSknKSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuICAvLyBJRTogZXZlbnQvaHRtbEZvci9vbmNsaWNrIHRyaWNrLlxuICAvLyBPbmUgY2FuJ3QgcmVseSBvbiBwcm9wZXIgb3JkZXIgZm9yIG9ucmVhZHlzdGF0ZWNoYW5nZS4gSW4gb3JkZXIgdG9cbiAgLy8gbWFrZSBzdXJlLCBzZXQgYSAnaHRtbEZvcicgYW5kICdldmVudCcgcHJvcGVydGllcywgc28gdGhhdFxuICAvLyBzY3JpcHQgY29kZSB3aWxsIGJlIGluc3RhbGxlZCBhcyAnb25jbGljaycgaGFuZGxlciBmb3IgdGhlXG4gIC8vIHNjcmlwdCBvYmplY3QuIExhdGVyLCBvbnJlYWR5c3RhdGVjaGFuZ2UsIG1hbnVhbGx5IGV4ZWN1dGUgdGhpc1xuICAvLyBjb2RlLiBGRiBhbmQgQ2hyb21lIGRvZXNuJ3Qgd29yayB3aXRoICdldmVudCcgYW5kICdodG1sRm9yJ1xuICAvLyBzZXQuIEZvciByZWZlcmVuY2Ugc2VlOlxuICAvLyAgIGh0dHA6Ly9qYXVib3VyZy5uZXQvMjAxMC8wNy9sb2FkaW5nLXNjcmlwdC1hcy1vbmNsaWNrLWhhbmRsZXItb2YuaHRtbFxuICAvLyBBbHNvLCByZWFkIG9uIHRoYXQgYWJvdXQgc2NyaXB0IG9yZGVyaW5nOlxuICAvLyAgIGh0dHA6Ly93aWtpLndoYXR3Zy5vcmcvd2lraS9EeW5hbWljX1NjcmlwdF9FeGVjdXRpb25fT3JkZXJcbiAgaWYgKHR5cGVvZiBzY3JpcHQuYXN5bmMgPT09ICd1bmRlZmluZWQnICYmIGdsb2JhbC5kb2N1bWVudC5hdHRhY2hFdmVudCkge1xuICAgIC8vIEFjY29yZGluZyB0byBtb3ppbGxhIGRvY3MsIGluIHJlY2VudCBicm93c2VycyBzY3JpcHQuYXN5bmMgZGVmYXVsdHNcbiAgICAvLyB0byAndHJ1ZScsIHNvIHdlIG1heSB1c2UgaXQgdG8gZGV0ZWN0IGEgZ29vZCBicm93c2VyOlxuICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL0hUTUwvRWxlbWVudC9zY3JpcHRcbiAgICBpZiAoIWJyb3dzZXIuaXNPcGVyYSgpKSB7XG4gICAgICAvLyBOYWl2ZWx5IGFzc3VtZSB3ZSdyZSBpbiBJRVxuICAgICAgdHJ5IHtcbiAgICAgICAgc2NyaXB0Lmh0bWxGb3IgPSBzY3JpcHQuaWQ7XG4gICAgICAgIHNjcmlwdC5ldmVudCA9ICdvbmNsaWNrJztcbiAgICAgIH0gY2F0Y2ggKHgpIHtcbiAgICAgICAgLy8gaW50ZW50aW9uYWxseSBlbXB0eVxuICAgICAgfVxuICAgICAgc2NyaXB0LmFzeW5jID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gT3BlcmEsIHNlY29uZCBzeW5jIHNjcmlwdCBoYWNrXG4gICAgICBzY3JpcHQyID0gdGhpcy5zY3JpcHQyID0gZ2xvYmFsLmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xuICAgICAgc2NyaXB0Mi50ZXh0ID0gXCJ0cnl7dmFyIGEgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnXCIgKyBzY3JpcHQuaWQgKyBcIicpOyBpZihhKWEub25lcnJvcigpO31jYXRjaCh4KXt9O1wiO1xuICAgICAgc2NyaXB0LmFzeW5jID0gc2NyaXB0Mi5hc3luYyA9IGZhbHNlO1xuICAgIH1cbiAgfVxuICBpZiAodHlwZW9mIHNjcmlwdC5hc3luYyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBzY3JpcHQuYXN5bmMgPSB0cnVlO1xuICB9XG5cbiAgdmFyIGhlYWQgPSBnbG9iYWwuZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2hlYWQnKVswXTtcbiAgaGVhZC5pbnNlcnRCZWZvcmUoc2NyaXB0LCBoZWFkLmZpcnN0Q2hpbGQpO1xuICBpZiAoc2NyaXB0Mikge1xuICAgIGhlYWQuaW5zZXJ0QmVmb3JlKHNjcmlwdDIsIGhlYWQuZmlyc3RDaGlsZCk7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gSnNvbnBSZWNlaXZlcjtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxuICAsIEV2ZW50RW1pdHRlciA9IHJlcXVpcmUoJ2V2ZW50cycpLkV2ZW50RW1pdHRlclxuICA7XG5cbnZhciBkZWJ1ZyA9IGZ1bmN0aW9uKCkge307XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBkZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJykoJ3NvY2tqcy1jbGllbnQ6cmVjZWl2ZXI6eGhyJyk7XG59XG5cbmZ1bmN0aW9uIFhoclJlY2VpdmVyKHVybCwgQWpheE9iamVjdCkge1xuICBkZWJ1Zyh1cmwpO1xuICBFdmVudEVtaXR0ZXIuY2FsbCh0aGlzKTtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gIHRoaXMuYnVmZmVyUG9zaXRpb24gPSAwO1xuXG4gIHRoaXMueG8gPSBuZXcgQWpheE9iamVjdCgnUE9TVCcsIHVybCwgbnVsbCk7XG4gIHRoaXMueG8ub24oJ2NodW5rJywgdGhpcy5fY2h1bmtIYW5kbGVyLmJpbmQodGhpcykpO1xuICB0aGlzLnhvLm9uY2UoJ2ZpbmlzaCcsIGZ1bmN0aW9uKHN0YXR1cywgdGV4dCkge1xuICAgIGRlYnVnKCdmaW5pc2gnLCBzdGF0dXMsIHRleHQpO1xuICAgIHNlbGYuX2NodW5rSGFuZGxlcihzdGF0dXMsIHRleHQpO1xuICAgIHNlbGYueG8gPSBudWxsO1xuICAgIHZhciByZWFzb24gPSBzdGF0dXMgPT09IDIwMCA/ICduZXR3b3JrJyA6ICdwZXJtYW5lbnQnO1xuICAgIGRlYnVnKCdjbG9zZScsIHJlYXNvbik7XG4gICAgc2VsZi5lbWl0KCdjbG9zZScsIG51bGwsIHJlYXNvbik7XG4gICAgc2VsZi5fY2xlYW51cCgpO1xuICB9KTtcbn1cblxuaW5oZXJpdHMoWGhyUmVjZWl2ZXIsIEV2ZW50RW1pdHRlcik7XG5cblhoclJlY2VpdmVyLnByb3RvdHlwZS5fY2h1bmtIYW5kbGVyID0gZnVuY3Rpb24oc3RhdHVzLCB0ZXh0KSB7XG4gIGRlYnVnKCdfY2h1bmtIYW5kbGVyJywgc3RhdHVzKTtcbiAgaWYgKHN0YXR1cyAhPT0gMjAwIHx8ICF0ZXh0KSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgZm9yICh2YXIgaWR4ID0gLTE7IDsgdGhpcy5idWZmZXJQb3NpdGlvbiArPSBpZHggKyAxKSB7XG4gICAgdmFyIGJ1ZiA9IHRleHQuc2xpY2UodGhpcy5idWZmZXJQb3NpdGlvbik7XG4gICAgaWR4ID0gYnVmLmluZGV4T2YoJ1xcbicpO1xuICAgIGlmIChpZHggPT09IC0xKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgdmFyIG1zZyA9IGJ1Zi5zbGljZSgwLCBpZHgpO1xuICAgIGlmIChtc2cpIHtcbiAgICAgIGRlYnVnKCdtZXNzYWdlJywgbXNnKTtcbiAgICAgIHRoaXMuZW1pdCgnbWVzc2FnZScsIG1zZyk7XG4gICAgfVxuICB9XG59O1xuXG5YaHJSZWNlaXZlci5wcm90b3R5cGUuX2NsZWFudXAgPSBmdW5jdGlvbigpIHtcbiAgZGVidWcoJ19jbGVhbnVwJyk7XG4gIHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKCk7XG59O1xuXG5YaHJSZWNlaXZlci5wcm90b3R5cGUuYWJvcnQgPSBmdW5jdGlvbigpIHtcbiAgZGVidWcoJ2Fib3J0Jyk7XG4gIGlmICh0aGlzLnhvKSB7XG4gICAgdGhpcy54by5jbG9zZSgpO1xuICAgIGRlYnVnKCdjbG9zZScpO1xuICAgIHRoaXMuZW1pdCgnY2xvc2UnLCBudWxsLCAndXNlcicpO1xuICAgIHRoaXMueG8gPSBudWxsO1xuICB9XG4gIHRoaXMuX2NsZWFudXAoKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gWGhyUmVjZWl2ZXI7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciByYW5kb20gPSByZXF1aXJlKCcuLi8uLi91dGlscy9yYW5kb20nKVxuICAsIHVybFV0aWxzID0gcmVxdWlyZSgnLi4vLi4vdXRpbHMvdXJsJylcbiAgO1xuXG52YXIgZGVidWcgPSBmdW5jdGlvbigpIHt9O1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgZGVidWcgPSByZXF1aXJlKCdkZWJ1ZycpKCdzb2NranMtY2xpZW50OnNlbmRlcjpqc29ucCcpO1xufVxuXG52YXIgZm9ybSwgYXJlYTtcblxuZnVuY3Rpb24gY3JlYXRlSWZyYW1lKGlkKSB7XG4gIGRlYnVnKCdjcmVhdGVJZnJhbWUnLCBpZCk7XG4gIHRyeSB7XG4gICAgLy8gaWU2IGR5bmFtaWMgaWZyYW1lcyB3aXRoIHRhcmdldD1cIlwiIHN1cHBvcnQgKHRoYW5rcyBDaHJpcyBMYW1iYWNoZXIpXG4gICAgcmV0dXJuIGdsb2JhbC5kb2N1bWVudC5jcmVhdGVFbGVtZW50KCc8aWZyYW1lIG5hbWU9XCInICsgaWQgKyAnXCI+Jyk7XG4gIH0gY2F0Y2ggKHgpIHtcbiAgICB2YXIgaWZyYW1lID0gZ2xvYmFsLmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lmcmFtZScpO1xuICAgIGlmcmFtZS5uYW1lID0gaWQ7XG4gICAgcmV0dXJuIGlmcmFtZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVGb3JtKCkge1xuICBkZWJ1ZygnY3JlYXRlRm9ybScpO1xuICBmb3JtID0gZ2xvYmFsLmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2Zvcm0nKTtcbiAgZm9ybS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICBmb3JtLnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcbiAgZm9ybS5tZXRob2QgPSAnUE9TVCc7XG4gIGZvcm0uZW5jdHlwZSA9ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnO1xuICBmb3JtLmFjY2VwdENoYXJzZXQgPSAnVVRGLTgnO1xuXG4gIGFyZWEgPSBnbG9iYWwuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGV4dGFyZWEnKTtcbiAgYXJlYS5uYW1lID0gJ2QnO1xuICBmb3JtLmFwcGVuZENoaWxkKGFyZWEpO1xuXG4gIGdsb2JhbC5kb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGZvcm0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHVybCwgcGF5bG9hZCwgY2FsbGJhY2spIHtcbiAgZGVidWcodXJsLCBwYXlsb2FkKTtcbiAgaWYgKCFmb3JtKSB7XG4gICAgY3JlYXRlRm9ybSgpO1xuICB9XG4gIHZhciBpZCA9ICdhJyArIHJhbmRvbS5zdHJpbmcoOCk7XG4gIGZvcm0udGFyZ2V0ID0gaWQ7XG4gIGZvcm0uYWN0aW9uID0gdXJsVXRpbHMuYWRkUXVlcnkodXJsVXRpbHMuYWRkUGF0aCh1cmwsICcvanNvbnBfc2VuZCcpLCAnaT0nICsgaWQpO1xuXG4gIHZhciBpZnJhbWUgPSBjcmVhdGVJZnJhbWUoaWQpO1xuICBpZnJhbWUuaWQgPSBpZDtcbiAgaWZyYW1lLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gIGZvcm0uYXBwZW5kQ2hpbGQoaWZyYW1lKTtcblxuICB0cnkge1xuICAgIGFyZWEudmFsdWUgPSBwYXlsb2FkO1xuICB9IGNhdGNoIChlKSB7XG4gICAgLy8gc2VyaW91c2x5IGJyb2tlbiBicm93c2VycyBnZXQgaGVyZVxuICB9XG4gIGZvcm0uc3VibWl0KCk7XG5cbiAgdmFyIGNvbXBsZXRlZCA9IGZ1bmN0aW9uKGVycikge1xuICAgIGRlYnVnKCdjb21wbGV0ZWQnLCBpZCwgZXJyKTtcbiAgICBpZiAoIWlmcmFtZS5vbmVycm9yKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmcmFtZS5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBpZnJhbWUub25lcnJvciA9IGlmcmFtZS5vbmxvYWQgPSBudWxsO1xuICAgIC8vIE9wZXJhIG1pbmkgZG9lc24ndCBsaWtlIGlmIHdlIEdDIGlmcmFtZVxuICAgIC8vIGltbWVkaWF0ZWx5LCB0aHVzIHRoaXMgdGltZW91dC5cbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgZGVidWcoJ2NsZWFuaW5nIHVwJywgaWQpO1xuICAgICAgaWZyYW1lLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoaWZyYW1lKTtcbiAgICAgIGlmcmFtZSA9IG51bGw7XG4gICAgfSwgNTAwKTtcbiAgICBhcmVhLnZhbHVlID0gJyc7XG4gICAgLy8gSXQgaXMgbm90IHBvc3NpYmxlIHRvIGRldGVjdCBpZiB0aGUgaWZyYW1lIHN1Y2NlZWRlZCBvclxuICAgIC8vIGZhaWxlZCB0byBzdWJtaXQgb3VyIGZvcm0uXG4gICAgY2FsbGJhY2soZXJyKTtcbiAgfTtcbiAgaWZyYW1lLm9uZXJyb3IgPSBmdW5jdGlvbigpIHtcbiAgICBkZWJ1Zygnb25lcnJvcicsIGlkKTtcbiAgICBjb21wbGV0ZWQoKTtcbiAgfTtcbiAgaWZyYW1lLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgIGRlYnVnKCdvbmxvYWQnLCBpZCk7XG4gICAgY29tcGxldGVkKCk7XG4gIH07XG4gIGlmcmFtZS5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbihlKSB7XG4gICAgZGVidWcoJ29ucmVhZHlzdGF0ZWNoYW5nZScsIGlkLCBpZnJhbWUucmVhZHlTdGF0ZSwgZSk7XG4gICAgaWYgKGlmcmFtZS5yZWFkeVN0YXRlID09PSAnY29tcGxldGUnKSB7XG4gICAgICBjb21wbGV0ZWQoKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICBkZWJ1ZygnYWJvcnRlZCcsIGlkKTtcbiAgICBjb21wbGV0ZWQobmV3IEVycm9yKCdBYm9ydGVkJykpO1xuICB9O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIEV2ZW50RW1pdHRlciA9IHJlcXVpcmUoJ2V2ZW50cycpLkV2ZW50RW1pdHRlclxuICAsIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxuICAsIGV2ZW50VXRpbHMgPSByZXF1aXJlKCcuLi8uLi91dGlscy9ldmVudCcpXG4gICwgYnJvd3NlciA9IHJlcXVpcmUoJy4uLy4uL3V0aWxzL2Jyb3dzZXInKVxuICAsIHVybFV0aWxzID0gcmVxdWlyZSgnLi4vLi4vdXRpbHMvdXJsJylcbiAgO1xuXG52YXIgZGVidWcgPSBmdW5jdGlvbigpIHt9O1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgZGVidWcgPSByZXF1aXJlKCdkZWJ1ZycpKCdzb2NranMtY2xpZW50OnNlbmRlcjp4ZHInKTtcbn1cblxuLy8gUmVmZXJlbmNlczpcbi8vICAgaHR0cDovL2FqYXhpYW4uY29tL2FyY2hpdmVzLzEwMC1saW5lLWFqYXgtd3JhcHBlclxuLy8gICBodHRwOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvY2MyODgwNjAodj1WUy44NSkuYXNweFxuXG5mdW5jdGlvbiBYRFJPYmplY3QobWV0aG9kLCB1cmwsIHBheWxvYWQpIHtcbiAgZGVidWcobWV0aG9kLCB1cmwpO1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIEV2ZW50RW1pdHRlci5jYWxsKHRoaXMpO1xuXG4gIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgc2VsZi5fc3RhcnQobWV0aG9kLCB1cmwsIHBheWxvYWQpO1xuICB9LCAwKTtcbn1cblxuaW5oZXJpdHMoWERST2JqZWN0LCBFdmVudEVtaXR0ZXIpO1xuXG5YRFJPYmplY3QucHJvdG90eXBlLl9zdGFydCA9IGZ1bmN0aW9uKG1ldGhvZCwgdXJsLCBwYXlsb2FkKSB7XG4gIGRlYnVnKCdfc3RhcnQnKTtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB2YXIgeGRyID0gbmV3IGdsb2JhbC5YRG9tYWluUmVxdWVzdCgpO1xuICAvLyBJRSBjYWNoZXMgZXZlbiBQT1NUc1xuICB1cmwgPSB1cmxVdGlscy5hZGRRdWVyeSh1cmwsICd0PScgKyAoK25ldyBEYXRlKCkpKTtcblxuICB4ZHIub25lcnJvciA9IGZ1bmN0aW9uKCkge1xuICAgIGRlYnVnKCdvbmVycm9yJyk7XG4gICAgc2VsZi5fZXJyb3IoKTtcbiAgfTtcbiAgeGRyLm9udGltZW91dCA9IGZ1bmN0aW9uKCkge1xuICAgIGRlYnVnKCdvbnRpbWVvdXQnKTtcbiAgICBzZWxmLl9lcnJvcigpO1xuICB9O1xuICB4ZHIub25wcm9ncmVzcyA9IGZ1bmN0aW9uKCkge1xuICAgIGRlYnVnKCdwcm9ncmVzcycsIHhkci5yZXNwb25zZVRleHQpO1xuICAgIHNlbGYuZW1pdCgnY2h1bmsnLCAyMDAsIHhkci5yZXNwb25zZVRleHQpO1xuICB9O1xuICB4ZHIub25sb2FkID0gZnVuY3Rpb24oKSB7XG4gICAgZGVidWcoJ2xvYWQnKTtcbiAgICBzZWxmLmVtaXQoJ2ZpbmlzaCcsIDIwMCwgeGRyLnJlc3BvbnNlVGV4dCk7XG4gICAgc2VsZi5fY2xlYW51cChmYWxzZSk7XG4gIH07XG4gIHRoaXMueGRyID0geGRyO1xuICB0aGlzLnVubG9hZFJlZiA9IGV2ZW50VXRpbHMudW5sb2FkQWRkKGZ1bmN0aW9uKCkge1xuICAgIHNlbGYuX2NsZWFudXAodHJ1ZSk7XG4gIH0pO1xuICB0cnkge1xuICAgIC8vIEZhaWxzIHdpdGggQWNjZXNzRGVuaWVkIGlmIHBvcnQgbnVtYmVyIGlzIGJvZ3VzXG4gICAgdGhpcy54ZHIub3BlbihtZXRob2QsIHVybCk7XG4gICAgaWYgKHRoaXMudGltZW91dCkge1xuICAgICAgdGhpcy54ZHIudGltZW91dCA9IHRoaXMudGltZW91dDtcbiAgICB9XG4gICAgdGhpcy54ZHIuc2VuZChwYXlsb2FkKTtcbiAgfSBjYXRjaCAoeCkge1xuICAgIHRoaXMuX2Vycm9yKCk7XG4gIH1cbn07XG5cblhEUk9iamVjdC5wcm90b3R5cGUuX2Vycm9yID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuZW1pdCgnZmluaXNoJywgMCwgJycpO1xuICB0aGlzLl9jbGVhbnVwKGZhbHNlKTtcbn07XG5cblhEUk9iamVjdC5wcm90b3R5cGUuX2NsZWFudXAgPSBmdW5jdGlvbihhYm9ydCkge1xuICBkZWJ1ZygnY2xlYW51cCcsIGFib3J0KTtcbiAgaWYgKCF0aGlzLnhkcikge1xuICAgIHJldHVybjtcbiAgfVxuICB0aGlzLnJlbW92ZUFsbExpc3RlbmVycygpO1xuICBldmVudFV0aWxzLnVubG9hZERlbCh0aGlzLnVubG9hZFJlZik7XG5cbiAgdGhpcy54ZHIub250aW1lb3V0ID0gdGhpcy54ZHIub25lcnJvciA9IHRoaXMueGRyLm9ucHJvZ3Jlc3MgPSB0aGlzLnhkci5vbmxvYWQgPSBudWxsO1xuICBpZiAoYWJvcnQpIHtcbiAgICB0cnkge1xuICAgICAgdGhpcy54ZHIuYWJvcnQoKTtcbiAgICB9IGNhdGNoICh4KSB7XG4gICAgICAvLyBpbnRlbnRpb25hbGx5IGVtcHR5XG4gICAgfVxuICB9XG4gIHRoaXMudW5sb2FkUmVmID0gdGhpcy54ZHIgPSBudWxsO1xufTtcblxuWERST2JqZWN0LnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uKCkge1xuICBkZWJ1ZygnY2xvc2UnKTtcbiAgdGhpcy5fY2xlYW51cCh0cnVlKTtcbn07XG5cbi8vIElFIDgvOSBpZiB0aGUgcmVxdWVzdCB0YXJnZXQgdXNlcyB0aGUgc2FtZSBzY2hlbWUgLSAjNzlcblhEUk9iamVjdC5lbmFibGVkID0gISEoZ2xvYmFsLlhEb21haW5SZXF1ZXN0ICYmIGJyb3dzZXIuaGFzRG9tYWluKCkpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFhEUk9iamVjdDtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxuICAsIFhockRyaXZlciA9IHJlcXVpcmUoJy4uL2RyaXZlci94aHInKVxuICA7XG5cbmZ1bmN0aW9uIFhIUkNvcnNPYmplY3QobWV0aG9kLCB1cmwsIHBheWxvYWQsIG9wdHMpIHtcbiAgWGhyRHJpdmVyLmNhbGwodGhpcywgbWV0aG9kLCB1cmwsIHBheWxvYWQsIG9wdHMpO1xufVxuXG5pbmhlcml0cyhYSFJDb3JzT2JqZWN0LCBYaHJEcml2ZXIpO1xuXG5YSFJDb3JzT2JqZWN0LmVuYWJsZWQgPSBYaHJEcml2ZXIuZW5hYmxlZCAmJiBYaHJEcml2ZXIuc3VwcG9ydHNDT1JTO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFhIUkNvcnNPYmplY3Q7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBFdmVudEVtaXR0ZXIgPSByZXF1aXJlKCdldmVudHMnKS5FdmVudEVtaXR0ZXJcbiAgLCBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbiAgO1xuXG5mdW5jdGlvbiBYSFJGYWtlKC8qIG1ldGhvZCwgdXJsLCBwYXlsb2FkLCBvcHRzICovKSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgRXZlbnRFbWl0dGVyLmNhbGwodGhpcyk7XG5cbiAgdGhpcy50byA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgc2VsZi5lbWl0KCdmaW5pc2gnLCAyMDAsICd7fScpO1xuICB9LCBYSFJGYWtlLnRpbWVvdXQpO1xufVxuXG5pbmhlcml0cyhYSFJGYWtlLCBFdmVudEVtaXR0ZXIpO1xuXG5YSFJGYWtlLnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uKCkge1xuICBjbGVhclRpbWVvdXQodGhpcy50byk7XG59O1xuXG5YSFJGYWtlLnRpbWVvdXQgPSAyMDAwO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFhIUkZha2U7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbiAgLCBYaHJEcml2ZXIgPSByZXF1aXJlKCcuLi9kcml2ZXIveGhyJylcbiAgO1xuXG5mdW5jdGlvbiBYSFJMb2NhbE9iamVjdChtZXRob2QsIHVybCwgcGF5bG9hZCAvKiwgb3B0cyAqLykge1xuICBYaHJEcml2ZXIuY2FsbCh0aGlzLCBtZXRob2QsIHVybCwgcGF5bG9hZCwge1xuICAgIG5vQ3JlZGVudGlhbHM6IHRydWVcbiAgfSk7XG59XG5cbmluaGVyaXRzKFhIUkxvY2FsT2JqZWN0LCBYaHJEcml2ZXIpO1xuXG5YSFJMb2NhbE9iamVjdC5lbmFibGVkID0gWGhyRHJpdmVyLmVuYWJsZWQ7XG5cbm1vZHVsZS5leHBvcnRzID0gWEhSTG9jYWxPYmplY3Q7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzL2V2ZW50JylcbiAgLCB1cmxVdGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzL3VybCcpXG4gICwgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG4gICwgRXZlbnRFbWl0dGVyID0gcmVxdWlyZSgnZXZlbnRzJykuRXZlbnRFbWl0dGVyXG4gICwgV2Vic29ja2V0RHJpdmVyID0gcmVxdWlyZSgnLi9kcml2ZXIvd2Vic29ja2V0JylcbiAgO1xuXG52YXIgZGVidWcgPSBmdW5jdGlvbigpIHt9O1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgZGVidWcgPSByZXF1aXJlKCdkZWJ1ZycpKCdzb2NranMtY2xpZW50OndlYnNvY2tldCcpO1xufVxuXG5mdW5jdGlvbiBXZWJTb2NrZXRUcmFuc3BvcnQodHJhbnNVcmwsIGlnbm9yZSwgb3B0aW9ucykge1xuICBpZiAoIVdlYlNvY2tldFRyYW5zcG9ydC5lbmFibGVkKCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1RyYW5zcG9ydCBjcmVhdGVkIHdoZW4gZGlzYWJsZWQnKTtcbiAgfVxuXG4gIEV2ZW50RW1pdHRlci5jYWxsKHRoaXMpO1xuICBkZWJ1ZygnY29uc3RydWN0b3InLCB0cmFuc1VybCk7XG5cbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB2YXIgdXJsID0gdXJsVXRpbHMuYWRkUGF0aCh0cmFuc1VybCwgJy93ZWJzb2NrZXQnKTtcbiAgaWYgKHVybC5zbGljZSgwLCA1KSA9PT0gJ2h0dHBzJykge1xuICAgIHVybCA9ICd3c3MnICsgdXJsLnNsaWNlKDUpO1xuICB9IGVsc2Uge1xuICAgIHVybCA9ICd3cycgKyB1cmwuc2xpY2UoNCk7XG4gIH1cbiAgdGhpcy51cmwgPSB1cmw7XG5cbiAgdGhpcy53cyA9IG5ldyBXZWJzb2NrZXREcml2ZXIodGhpcy51cmwsIFtdLCBvcHRpb25zKTtcbiAgdGhpcy53cy5vbm1lc3NhZ2UgPSBmdW5jdGlvbihlKSB7XG4gICAgZGVidWcoJ21lc3NhZ2UgZXZlbnQnLCBlLmRhdGEpO1xuICAgIHNlbGYuZW1pdCgnbWVzc2FnZScsIGUuZGF0YSk7XG4gIH07XG4gIC8vIEZpcmVmb3ggaGFzIGFuIGludGVyZXN0aW5nIGJ1Zy4gSWYgYSB3ZWJzb2NrZXQgY29ubmVjdGlvbiBpc1xuICAvLyBjcmVhdGVkIGFmdGVyIG9udW5sb2FkLCBpdCBzdGF5cyBhbGl2ZSBldmVuIHdoZW4gdXNlclxuICAvLyBuYXZpZ2F0ZXMgYXdheSBmcm9tIHRoZSBwYWdlLiBJbiBzdWNoIHNpdHVhdGlvbiBsZXQncyBsaWUgLVxuICAvLyBsZXQncyBub3Qgb3BlbiB0aGUgd3MgY29ubmVjdGlvbiBhdCBhbGwuIFNlZTpcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3NvY2tqcy9zb2NranMtY2xpZW50L2lzc3Vlcy8yOFxuICAvLyBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD02OTYwODVcbiAgdGhpcy51bmxvYWRSZWYgPSB1dGlscy51bmxvYWRBZGQoZnVuY3Rpb24oKSB7XG4gICAgZGVidWcoJ3VubG9hZCcpO1xuICAgIHNlbGYud3MuY2xvc2UoKTtcbiAgfSk7XG4gIHRoaXMud3Mub25jbG9zZSA9IGZ1bmN0aW9uKGUpIHtcbiAgICBkZWJ1ZygnY2xvc2UgZXZlbnQnLCBlLmNvZGUsIGUucmVhc29uKTtcbiAgICBzZWxmLmVtaXQoJ2Nsb3NlJywgZS5jb2RlLCBlLnJlYXNvbik7XG4gICAgc2VsZi5fY2xlYW51cCgpO1xuICB9O1xuICB0aGlzLndzLm9uZXJyb3IgPSBmdW5jdGlvbihlKSB7XG4gICAgZGVidWcoJ2Vycm9yIGV2ZW50JywgZSk7XG4gICAgc2VsZi5lbWl0KCdjbG9zZScsIDEwMDYsICdXZWJTb2NrZXQgY29ubmVjdGlvbiBicm9rZW4nKTtcbiAgICBzZWxmLl9jbGVhbnVwKCk7XG4gIH07XG59XG5cbmluaGVyaXRzKFdlYlNvY2tldFRyYW5zcG9ydCwgRXZlbnRFbWl0dGVyKTtcblxuV2ViU29ja2V0VHJhbnNwb3J0LnByb3RvdHlwZS5zZW5kID0gZnVuY3Rpb24oZGF0YSkge1xuICB2YXIgbXNnID0gJ1snICsgZGF0YSArICddJztcbiAgZGVidWcoJ3NlbmQnLCBtc2cpO1xuICB0aGlzLndzLnNlbmQobXNnKTtcbn07XG5cbldlYlNvY2tldFRyYW5zcG9ydC5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbigpIHtcbiAgZGVidWcoJ2Nsb3NlJyk7XG4gIHZhciB3cyA9IHRoaXMud3M7XG4gIHRoaXMuX2NsZWFudXAoKTtcbiAgaWYgKHdzKSB7XG4gICAgd3MuY2xvc2UoKTtcbiAgfVxufTtcblxuV2ViU29ja2V0VHJhbnNwb3J0LnByb3RvdHlwZS5fY2xlYW51cCA9IGZ1bmN0aW9uKCkge1xuICBkZWJ1ZygnX2NsZWFudXAnKTtcbiAgdmFyIHdzID0gdGhpcy53cztcbiAgaWYgKHdzKSB7XG4gICAgd3Mub25tZXNzYWdlID0gd3Mub25jbG9zZSA9IHdzLm9uZXJyb3IgPSBudWxsO1xuICB9XG4gIHV0aWxzLnVubG9hZERlbCh0aGlzLnVubG9hZFJlZik7XG4gIHRoaXMudW5sb2FkUmVmID0gdGhpcy53cyA9IG51bGw7XG4gIHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKCk7XG59O1xuXG5XZWJTb2NrZXRUcmFuc3BvcnQuZW5hYmxlZCA9IGZ1bmN0aW9uKCkge1xuICBkZWJ1ZygnZW5hYmxlZCcpO1xuICByZXR1cm4gISFXZWJzb2NrZXREcml2ZXI7XG59O1xuV2ViU29ja2V0VHJhbnNwb3J0LnRyYW5zcG9ydE5hbWUgPSAnd2Vic29ja2V0JztcblxuLy8gSW4gdGhlb3J5LCB3cyBzaG91bGQgcmVxdWlyZSAxIHJvdW5kIHRyaXAuIEJ1dCBpbiBjaHJvbWUsIHRoaXMgaXNcbi8vIG5vdCB2ZXJ5IHN0YWJsZSBvdmVyIFNTTC4gTW9zdCBsaWtlbHkgYSB3cyBjb25uZWN0aW9uIHJlcXVpcmVzIGFcbi8vIHNlcGFyYXRlIFNTTCBjb25uZWN0aW9uLCBpbiB3aGljaCBjYXNlIDIgcm91bmQgdHJpcHMgYXJlIGFuXG4vLyBhYnNvbHV0ZSBtaW51bXVtLlxuV2ViU29ja2V0VHJhbnNwb3J0LnJvdW5kVHJpcHMgPSAyO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFdlYlNvY2tldFRyYW5zcG9ydDtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxuICAsIEFqYXhCYXNlZFRyYW5zcG9ydCA9IHJlcXVpcmUoJy4vbGliL2FqYXgtYmFzZWQnKVxuICAsIFhkclN0cmVhbWluZ1RyYW5zcG9ydCA9IHJlcXVpcmUoJy4veGRyLXN0cmVhbWluZycpXG4gICwgWGhyUmVjZWl2ZXIgPSByZXF1aXJlKCcuL3JlY2VpdmVyL3hocicpXG4gICwgWERST2JqZWN0ID0gcmVxdWlyZSgnLi9zZW5kZXIveGRyJylcbiAgO1xuXG5mdW5jdGlvbiBYZHJQb2xsaW5nVHJhbnNwb3J0KHRyYW5zVXJsKSB7XG4gIGlmICghWERST2JqZWN0LmVuYWJsZWQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1RyYW5zcG9ydCBjcmVhdGVkIHdoZW4gZGlzYWJsZWQnKTtcbiAgfVxuICBBamF4QmFzZWRUcmFuc3BvcnQuY2FsbCh0aGlzLCB0cmFuc1VybCwgJy94aHInLCBYaHJSZWNlaXZlciwgWERST2JqZWN0KTtcbn1cblxuaW5oZXJpdHMoWGRyUG9sbGluZ1RyYW5zcG9ydCwgQWpheEJhc2VkVHJhbnNwb3J0KTtcblxuWGRyUG9sbGluZ1RyYW5zcG9ydC5lbmFibGVkID0gWGRyU3RyZWFtaW5nVHJhbnNwb3J0LmVuYWJsZWQ7XG5YZHJQb2xsaW5nVHJhbnNwb3J0LnRyYW5zcG9ydE5hbWUgPSAneGRyLXBvbGxpbmcnO1xuWGRyUG9sbGluZ1RyYW5zcG9ydC5yb3VuZFRyaXBzID0gMjsgLy8gcHJlZmxpZ2h0LCBhamF4XG5cbm1vZHVsZS5leHBvcnRzID0gWGRyUG9sbGluZ1RyYW5zcG9ydDtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxuICAsIEFqYXhCYXNlZFRyYW5zcG9ydCA9IHJlcXVpcmUoJy4vbGliL2FqYXgtYmFzZWQnKVxuICAsIFhoclJlY2VpdmVyID0gcmVxdWlyZSgnLi9yZWNlaXZlci94aHInKVxuICAsIFhEUk9iamVjdCA9IHJlcXVpcmUoJy4vc2VuZGVyL3hkcicpXG4gIDtcblxuLy8gQWNjb3JkaW5nIHRvOlxuLy8gICBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzE2NDE1MDcvZGV0ZWN0LWJyb3dzZXItc3VwcG9ydC1mb3ItY3Jvc3MtZG9tYWluLXhtbGh0dHByZXF1ZXN0c1xuLy8gICBodHRwOi8vaGFja3MubW96aWxsYS5vcmcvMjAwOS8wNy9jcm9zcy1zaXRlLXhtbGh0dHByZXF1ZXN0LXdpdGgtY29ycy9cblxuZnVuY3Rpb24gWGRyU3RyZWFtaW5nVHJhbnNwb3J0KHRyYW5zVXJsKSB7XG4gIGlmICghWERST2JqZWN0LmVuYWJsZWQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1RyYW5zcG9ydCBjcmVhdGVkIHdoZW4gZGlzYWJsZWQnKTtcbiAgfVxuICBBamF4QmFzZWRUcmFuc3BvcnQuY2FsbCh0aGlzLCB0cmFuc1VybCwgJy94aHJfc3RyZWFtaW5nJywgWGhyUmVjZWl2ZXIsIFhEUk9iamVjdCk7XG59XG5cbmluaGVyaXRzKFhkclN0cmVhbWluZ1RyYW5zcG9ydCwgQWpheEJhc2VkVHJhbnNwb3J0KTtcblxuWGRyU3RyZWFtaW5nVHJhbnNwb3J0LmVuYWJsZWQgPSBmdW5jdGlvbihpbmZvKSB7XG4gIGlmIChpbmZvLmNvb2tpZV9uZWVkZWQgfHwgaW5mby5udWxsT3JpZ2luKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiBYRFJPYmplY3QuZW5hYmxlZCAmJiBpbmZvLnNhbWVTY2hlbWU7XG59O1xuXG5YZHJTdHJlYW1pbmdUcmFuc3BvcnQudHJhbnNwb3J0TmFtZSA9ICd4ZHItc3RyZWFtaW5nJztcblhkclN0cmVhbWluZ1RyYW5zcG9ydC5yb3VuZFRyaXBzID0gMjsgLy8gcHJlZmxpZ2h0LCBhamF4XG5cbm1vZHVsZS5leHBvcnRzID0gWGRyU3RyZWFtaW5nVHJhbnNwb3J0O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG4gICwgQWpheEJhc2VkVHJhbnNwb3J0ID0gcmVxdWlyZSgnLi9saWIvYWpheC1iYXNlZCcpXG4gICwgWGhyUmVjZWl2ZXIgPSByZXF1aXJlKCcuL3JlY2VpdmVyL3hocicpXG4gICwgWEhSQ29yc09iamVjdCA9IHJlcXVpcmUoJy4vc2VuZGVyL3hoci1jb3JzJylcbiAgLCBYSFJMb2NhbE9iamVjdCA9IHJlcXVpcmUoJy4vc2VuZGVyL3hoci1sb2NhbCcpXG4gIDtcblxuZnVuY3Rpb24gWGhyUG9sbGluZ1RyYW5zcG9ydCh0cmFuc1VybCkge1xuICBpZiAoIVhIUkxvY2FsT2JqZWN0LmVuYWJsZWQgJiYgIVhIUkNvcnNPYmplY3QuZW5hYmxlZCkge1xuICAgIHRocm93IG5ldyBFcnJvcignVHJhbnNwb3J0IGNyZWF0ZWQgd2hlbiBkaXNhYmxlZCcpO1xuICB9XG4gIEFqYXhCYXNlZFRyYW5zcG9ydC5jYWxsKHRoaXMsIHRyYW5zVXJsLCAnL3hocicsIFhoclJlY2VpdmVyLCBYSFJDb3JzT2JqZWN0KTtcbn1cblxuaW5oZXJpdHMoWGhyUG9sbGluZ1RyYW5zcG9ydCwgQWpheEJhc2VkVHJhbnNwb3J0KTtcblxuWGhyUG9sbGluZ1RyYW5zcG9ydC5lbmFibGVkID0gZnVuY3Rpb24oaW5mbykge1xuICBpZiAoaW5mby5udWxsT3JpZ2luKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKFhIUkxvY2FsT2JqZWN0LmVuYWJsZWQgJiYgaW5mby5zYW1lT3JpZ2luKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIFhIUkNvcnNPYmplY3QuZW5hYmxlZDtcbn07XG5cblhoclBvbGxpbmdUcmFuc3BvcnQudHJhbnNwb3J0TmFtZSA9ICd4aHItcG9sbGluZyc7XG5YaHJQb2xsaW5nVHJhbnNwb3J0LnJvdW5kVHJpcHMgPSAyOyAvLyBwcmVmbGlnaHQsIGFqYXhcblxubW9kdWxlLmV4cG9ydHMgPSBYaHJQb2xsaW5nVHJhbnNwb3J0O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG4gICwgQWpheEJhc2VkVHJhbnNwb3J0ID0gcmVxdWlyZSgnLi9saWIvYWpheC1iYXNlZCcpXG4gICwgWGhyUmVjZWl2ZXIgPSByZXF1aXJlKCcuL3JlY2VpdmVyL3hocicpXG4gICwgWEhSQ29yc09iamVjdCA9IHJlcXVpcmUoJy4vc2VuZGVyL3hoci1jb3JzJylcbiAgLCBYSFJMb2NhbE9iamVjdCA9IHJlcXVpcmUoJy4vc2VuZGVyL3hoci1sb2NhbCcpXG4gICwgYnJvd3NlciA9IHJlcXVpcmUoJy4uL3V0aWxzL2Jyb3dzZXInKVxuICA7XG5cbmZ1bmN0aW9uIFhoclN0cmVhbWluZ1RyYW5zcG9ydCh0cmFuc1VybCkge1xuICBpZiAoIVhIUkxvY2FsT2JqZWN0LmVuYWJsZWQgJiYgIVhIUkNvcnNPYmplY3QuZW5hYmxlZCkge1xuICAgIHRocm93IG5ldyBFcnJvcignVHJhbnNwb3J0IGNyZWF0ZWQgd2hlbiBkaXNhYmxlZCcpO1xuICB9XG4gIEFqYXhCYXNlZFRyYW5zcG9ydC5jYWxsKHRoaXMsIHRyYW5zVXJsLCAnL3hocl9zdHJlYW1pbmcnLCBYaHJSZWNlaXZlciwgWEhSQ29yc09iamVjdCk7XG59XG5cbmluaGVyaXRzKFhoclN0cmVhbWluZ1RyYW5zcG9ydCwgQWpheEJhc2VkVHJhbnNwb3J0KTtcblxuWGhyU3RyZWFtaW5nVHJhbnNwb3J0LmVuYWJsZWQgPSBmdW5jdGlvbihpbmZvKSB7XG4gIGlmIChpbmZvLm51bGxPcmlnaW4pIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgLy8gT3BlcmEgZG9lc24ndCBzdXBwb3J0IHhoci1zdHJlYW1pbmcgIzYwXG4gIC8vIEJ1dCBpdCBtaWdodCBiZSBhYmxlIHRvICM5MlxuICBpZiAoYnJvd3Nlci5pc09wZXJhKCkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gWEhSQ29yc09iamVjdC5lbmFibGVkO1xufTtcblxuWGhyU3RyZWFtaW5nVHJhbnNwb3J0LnRyYW5zcG9ydE5hbWUgPSAneGhyLXN0cmVhbWluZyc7XG5YaHJTdHJlYW1pbmdUcmFuc3BvcnQucm91bmRUcmlwcyA9IDI7IC8vIHByZWZsaWdodCwgYWpheFxuXG4vLyBTYWZhcmkgZ2V0cyBjb25mdXNlZCB3aGVuIGEgc3RyZWFtaW5nIGFqYXggcmVxdWVzdCBpcyBzdGFydGVkXG4vLyBiZWZvcmUgb25sb2FkLiBUaGlzIGNhdXNlcyB0aGUgbG9hZCBpbmRpY2F0b3IgdG8gc3BpbiBpbmRlZmluZXRlbHkuXG4vLyBPbmx5IHJlcXVpcmUgYm9keSB3aGVuIHVzZWQgaW4gYSBicm93c2VyXG5YaHJTdHJlYW1pbmdUcmFuc3BvcnQubmVlZEJvZHkgPSAhIWdsb2JhbC5kb2N1bWVudDtcblxubW9kdWxlLmV4cG9ydHMgPSBYaHJTdHJlYW1pbmdUcmFuc3BvcnQ7XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChnbG9iYWwuY3J5cHRvICYmIGdsb2JhbC5jcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKSB7XG4gIG1vZHVsZS5leHBvcnRzLnJhbmRvbUJ5dGVzID0gZnVuY3Rpb24obGVuZ3RoKSB7XG4gICAgdmFyIGJ5dGVzID0gbmV3IFVpbnQ4QXJyYXkobGVuZ3RoKTtcbiAgICBnbG9iYWwuY3J5cHRvLmdldFJhbmRvbVZhbHVlcyhieXRlcyk7XG4gICAgcmV0dXJuIGJ5dGVzO1xuICB9O1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMucmFuZG9tQnl0ZXMgPSBmdW5jdGlvbihsZW5ndGgpIHtcbiAgICB2YXIgYnl0ZXMgPSBuZXcgQXJyYXkobGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBieXRlc1tpXSA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDI1Nik7XG4gICAgfVxuICAgIHJldHVybiBieXRlcztcbiAgfTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGlzT3BlcmE6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBnbG9iYWwubmF2aWdhdG9yICYmXG4gICAgICAvb3BlcmEvaS50ZXN0KGdsb2JhbC5uYXZpZ2F0b3IudXNlckFnZW50KTtcbiAgfVxuXG4sIGlzS29ucXVlcm9yOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZ2xvYmFsLm5hdmlnYXRvciAmJlxuICAgICAgL2tvbnF1ZXJvci9pLnRlc3QoZ2xvYmFsLm5hdmlnYXRvci51c2VyQWdlbnQpO1xuICB9XG5cbiAgLy8gIzE4NyB3cmFwIGRvY3VtZW50LmRvbWFpbiBpbiB0cnkvY2F0Y2ggYmVjYXVzZSBvZiBXUDggZnJvbSBmaWxlOi8vL1xuLCBoYXNEb21haW46IGZ1bmN0aW9uICgpIHtcbiAgICAvLyBub24tYnJvd3NlciBjbGllbnQgYWx3YXlzIGhhcyBhIGRvbWFpblxuICAgIGlmICghZ2xvYmFsLmRvY3VtZW50KSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgcmV0dXJuICEhZ2xvYmFsLmRvY3VtZW50LmRvbWFpbjtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vLyBTb21lIGV4dHJhIGNoYXJhY3RlcnMgdGhhdCBDaHJvbWUgZ2V0cyB3cm9uZywgYW5kIHN1YnN0aXR1dGVzIHdpdGhcbi8vIHNvbWV0aGluZyBlbHNlIG9uIHRoZSB3aXJlLlxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnRyb2wtcmVnZXgsIG5vLW1pc2xlYWRpbmctY2hhcmFjdGVyLWNsYXNzXG52YXIgZXh0cmFFc2NhcGFibGUgPSAvW1xceDAwLVxceDFmXFx1ZDgwMC1cXHVkZmZmXFx1ZmZmZVxcdWZmZmZcXHUwMzAwLVxcdTAzMzNcXHUwMzNkLVxcdTAzNDZcXHUwMzRhLVxcdTAzNGNcXHUwMzUwLVxcdTAzNTJcXHUwMzU3LVxcdTAzNThcXHUwMzVjLVxcdTAzNjJcXHUwMzc0XFx1MDM3ZVxcdTAzODdcXHUwNTkxLVxcdTA1YWZcXHUwNWM0XFx1MDYxMC1cXHUwNjE3XFx1MDY1My1cXHUwNjU0XFx1MDY1Ny1cXHUwNjViXFx1MDY1ZC1cXHUwNjVlXFx1MDZkZi1cXHUwNmUyXFx1MDZlYi1cXHUwNmVjXFx1MDczMFxcdTA3MzItXFx1MDczM1xcdTA3MzUtXFx1MDczNlxcdTA3M2FcXHUwNzNkXFx1MDczZi1cXHUwNzQxXFx1MDc0M1xcdTA3NDVcXHUwNzQ3XFx1MDdlYi1cXHUwN2YxXFx1MDk1MVxcdTA5NTgtXFx1MDk1ZlxcdTA5ZGMtXFx1MDlkZFxcdTA5ZGZcXHUwYTMzXFx1MGEzNlxcdTBhNTktXFx1MGE1YlxcdTBhNWVcXHUwYjVjLVxcdTBiNWRcXHUwZTM4LVxcdTBlMzlcXHUwZjQzXFx1MGY0ZFxcdTBmNTJcXHUwZjU3XFx1MGY1Y1xcdTBmNjlcXHUwZjcyLVxcdTBmNzZcXHUwZjc4XFx1MGY4MC1cXHUwZjgzXFx1MGY5M1xcdTBmOWRcXHUwZmEyXFx1MGZhN1xcdTBmYWNcXHUwZmI5XFx1MTkzOS1cXHUxOTNhXFx1MWExN1xcdTFiNmJcXHUxY2RhLVxcdTFjZGJcXHUxZGMwLVxcdTFkY2ZcXHUxZGZjXFx1MWRmZVxcdTFmNzFcXHUxZjczXFx1MWY3NVxcdTFmNzdcXHUxZjc5XFx1MWY3YlxcdTFmN2RcXHUxZmJiXFx1MWZiZVxcdTFmYzlcXHUxZmNiXFx1MWZkM1xcdTFmZGJcXHUxZmUzXFx1MWZlYlxcdTFmZWUtXFx1MWZlZlxcdTFmZjlcXHUxZmZiXFx1MWZmZFxcdTIwMDAtXFx1MjAwMVxcdTIwZDAtXFx1MjBkMVxcdTIwZDQtXFx1MjBkN1xcdTIwZTctXFx1MjBlOVxcdTIxMjZcXHUyMTJhLVxcdTIxMmJcXHUyMzI5LVxcdTIzMmFcXHUyYWRjXFx1MzAyYi1cXHUzMDJjXFx1YWFiMi1cXHVhYWIzXFx1ZjkwMC1cXHVmYTBkXFx1ZmExMFxcdWZhMTJcXHVmYTE1LVxcdWZhMWVcXHVmYTIwXFx1ZmEyMlxcdWZhMjUtXFx1ZmEyNlxcdWZhMmEtXFx1ZmEyZFxcdWZhMzAtXFx1ZmE2ZFxcdWZhNzAtXFx1ZmFkOVxcdWZiMWRcXHVmYjFmXFx1ZmIyYS1cXHVmYjM2XFx1ZmIzOC1cXHVmYjNjXFx1ZmIzZVxcdWZiNDAtXFx1ZmI0MVxcdWZiNDMtXFx1ZmI0NFxcdWZiNDYtXFx1ZmI0ZVxcdWZmZjAtXFx1ZmZmZl0vZ1xuICAsIGV4dHJhTG9va3VwO1xuXG4vLyBUaGlzIG1heSBiZSBxdWl0ZSBzbG93LCBzbyBsZXQncyBkZWxheSB1bnRpbCB1c2VyIGFjdHVhbGx5IHVzZXMgYmFkXG4vLyBjaGFyYWN0ZXJzLlxudmFyIHVucm9sbExvb2t1cCA9IGZ1bmN0aW9uKGVzY2FwYWJsZSkge1xuICB2YXIgaTtcbiAgdmFyIHVucm9sbGVkID0ge307XG4gIHZhciBjID0gW107XG4gIGZvciAoaSA9IDA7IGkgPCA2NTUzNjsgaSsrKSB7XG4gICAgYy5wdXNoKCBTdHJpbmcuZnJvbUNoYXJDb2RlKGkpICk7XG4gIH1cbiAgZXNjYXBhYmxlLmxhc3RJbmRleCA9IDA7XG4gIGMuam9pbignJykucmVwbGFjZShlc2NhcGFibGUsIGZ1bmN0aW9uKGEpIHtcbiAgICB1bnJvbGxlZFsgYSBdID0gJ1xcXFx1JyArICgnMDAwMCcgKyBhLmNoYXJDb2RlQXQoMCkudG9TdHJpbmcoMTYpKS5zbGljZSgtNCk7XG4gICAgcmV0dXJuICcnO1xuICB9KTtcbiAgZXNjYXBhYmxlLmxhc3RJbmRleCA9IDA7XG4gIHJldHVybiB1bnJvbGxlZDtcbn07XG5cbi8vIFF1b3RlIHN0cmluZywgYWxzbyB0YWtpbmcgY2FyZSBvZiB1bmljb2RlIGNoYXJhY3RlcnMgdGhhdCBicm93c2Vyc1xuLy8gb2Z0ZW4gYnJlYWsuIEVzcGVjaWFsbHksIHRha2UgY2FyZSBvZiB1bmljb2RlIHN1cnJvZ2F0ZXM6XG4vLyBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL01hcHBpbmdfb2ZfVW5pY29kZV9jaGFyYWN0ZXJzI1N1cnJvZ2F0ZXNcbm1vZHVsZS5leHBvcnRzID0ge1xuICBxdW90ZTogZnVuY3Rpb24oc3RyaW5nKSB7XG4gICAgdmFyIHF1b3RlZCA9IEpTT04uc3RyaW5naWZ5KHN0cmluZyk7XG5cbiAgICAvLyBJbiBtb3N0IGNhc2VzIHRoaXMgc2hvdWxkIGJlIHZlcnkgZmFzdCBhbmQgZ29vZCBlbm91Z2guXG4gICAgZXh0cmFFc2NhcGFibGUubGFzdEluZGV4ID0gMDtcbiAgICBpZiAoIWV4dHJhRXNjYXBhYmxlLnRlc3QocXVvdGVkKSkge1xuICAgICAgcmV0dXJuIHF1b3RlZDtcbiAgICB9XG5cbiAgICBpZiAoIWV4dHJhTG9va3VwKSB7XG4gICAgICBleHRyYUxvb2t1cCA9IHVucm9sbExvb2t1cChleHRyYUVzY2FwYWJsZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHF1b3RlZC5yZXBsYWNlKGV4dHJhRXNjYXBhYmxlLCBmdW5jdGlvbihhKSB7XG4gICAgICByZXR1cm4gZXh0cmFMb29rdXBbYV07XG4gICAgfSk7XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciByYW5kb20gPSByZXF1aXJlKCcuL3JhbmRvbScpO1xuXG52YXIgb25VbmxvYWQgPSB7fVxuICAsIGFmdGVyVW5sb2FkID0gZmFsc2VcbiAgICAvLyBkZXRlY3QgZ29vZ2xlIGNocm9tZSBwYWNrYWdlZCBhcHBzIGJlY2F1c2UgdGhleSBkb24ndCBhbGxvdyB0aGUgJ3VubG9hZCcgZXZlbnRcbiAgLCBpc0Nocm9tZVBhY2thZ2VkQXBwID0gZ2xvYmFsLmNocm9tZSAmJiBnbG9iYWwuY2hyb21lLmFwcCAmJiBnbG9iYWwuY2hyb21lLmFwcC5ydW50aW1lXG4gIDtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGF0dGFjaEV2ZW50OiBmdW5jdGlvbihldmVudCwgbGlzdGVuZXIpIHtcbiAgICBpZiAodHlwZW9mIGdsb2JhbC5hZGRFdmVudExpc3RlbmVyICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIGxpc3RlbmVyLCBmYWxzZSk7XG4gICAgfSBlbHNlIGlmIChnbG9iYWwuZG9jdW1lbnQgJiYgZ2xvYmFsLmF0dGFjaEV2ZW50KSB7XG4gICAgICAvLyBJRSBxdWlya3MuXG4gICAgICAvLyBBY2NvcmRpbmcgdG86IGh0dHA6Ly9zdGV2ZXNvdWRlcnMuY29tL21pc2MvdGVzdC1wb3N0bWVzc2FnZS5waHBcbiAgICAgIC8vIHRoZSBtZXNzYWdlIGdldHMgZGVsaXZlcmVkIG9ubHkgdG8gJ2RvY3VtZW50Jywgbm90ICd3aW5kb3cnLlxuICAgICAgZ2xvYmFsLmRvY3VtZW50LmF0dGFjaEV2ZW50KCdvbicgKyBldmVudCwgbGlzdGVuZXIpO1xuICAgICAgLy8gSSBnZXQgJ3dpbmRvdycgZm9yIGllOC5cbiAgICAgIGdsb2JhbC5hdHRhY2hFdmVudCgnb24nICsgZXZlbnQsIGxpc3RlbmVyKTtcbiAgICB9XG4gIH1cblxuLCBkZXRhY2hFdmVudDogZnVuY3Rpb24oZXZlbnQsIGxpc3RlbmVyKSB7XG4gICAgaWYgKHR5cGVvZiBnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lciAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGdsb2JhbC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50LCBsaXN0ZW5lciwgZmFsc2UpO1xuICAgIH0gZWxzZSBpZiAoZ2xvYmFsLmRvY3VtZW50ICYmIGdsb2JhbC5kZXRhY2hFdmVudCkge1xuICAgICAgZ2xvYmFsLmRvY3VtZW50LmRldGFjaEV2ZW50KCdvbicgKyBldmVudCwgbGlzdGVuZXIpO1xuICAgICAgZ2xvYmFsLmRldGFjaEV2ZW50KCdvbicgKyBldmVudCwgbGlzdGVuZXIpO1xuICAgIH1cbiAgfVxuXG4sIHVubG9hZEFkZDogZnVuY3Rpb24obGlzdGVuZXIpIHtcbiAgICBpZiAoaXNDaHJvbWVQYWNrYWdlZEFwcCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdmFyIHJlZiA9IHJhbmRvbS5zdHJpbmcoOCk7XG4gICAgb25VbmxvYWRbcmVmXSA9IGxpc3RlbmVyO1xuICAgIGlmIChhZnRlclVubG9hZCkge1xuICAgICAgc2V0VGltZW91dCh0aGlzLnRyaWdnZXJVbmxvYWRDYWxsYmFja3MsIDApO1xuICAgIH1cbiAgICByZXR1cm4gcmVmO1xuICB9XG5cbiwgdW5sb2FkRGVsOiBmdW5jdGlvbihyZWYpIHtcbiAgICBpZiAocmVmIGluIG9uVW5sb2FkKSB7XG4gICAgICBkZWxldGUgb25VbmxvYWRbcmVmXTtcbiAgICB9XG4gIH1cblxuLCB0cmlnZ2VyVW5sb2FkQ2FsbGJhY2tzOiBmdW5jdGlvbigpIHtcbiAgICBmb3IgKHZhciByZWYgaW4gb25VbmxvYWQpIHtcbiAgICAgIG9uVW5sb2FkW3JlZl0oKTtcbiAgICAgIGRlbGV0ZSBvblVubG9hZFtyZWZdO1xuICAgIH1cbiAgfVxufTtcblxudmFyIHVubG9hZFRyaWdnZXJlZCA9IGZ1bmN0aW9uKCkge1xuICBpZiAoYWZ0ZXJVbmxvYWQpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgYWZ0ZXJVbmxvYWQgPSB0cnVlO1xuICBtb2R1bGUuZXhwb3J0cy50cmlnZ2VyVW5sb2FkQ2FsbGJhY2tzKCk7XG59O1xuXG4vLyAndW5sb2FkJyBhbG9uZSBpcyBub3QgcmVsaWFibGUgaW4gb3BlcmEgd2l0aGluIGFuIGlmcmFtZSwgYnV0IHdlXG4vLyBjYW4ndCB1c2UgYGJlZm9yZXVubG9hZGAgYXMgSUUgZmlyZXMgaXQgb24gamF2YXNjcmlwdDogbGlua3MuXG5pZiAoIWlzQ2hyb21lUGFja2FnZWRBcHApIHtcbiAgbW9kdWxlLmV4cG9ydHMuYXR0YWNoRXZlbnQoJ3VubG9hZCcsIHVubG9hZFRyaWdnZXJlZCk7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBldmVudFV0aWxzID0gcmVxdWlyZSgnLi9ldmVudCcpXG4gICwgYnJvd3NlciA9IHJlcXVpcmUoJy4vYnJvd3NlcicpXG4gIDtcblxudmFyIGRlYnVnID0gZnVuY3Rpb24oKSB7fTtcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIGRlYnVnID0gcmVxdWlyZSgnZGVidWcnKSgnc29ja2pzLWNsaWVudDp1dGlsczppZnJhbWUnKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIFdQcmVmaXg6ICdfanAnXG4sIGN1cnJlbnRXaW5kb3dJZDogbnVsbFxuXG4sIHBvbGx1dGVHbG9iYWxOYW1lc3BhY2U6IGZ1bmN0aW9uKCkge1xuICAgIGlmICghKG1vZHVsZS5leHBvcnRzLldQcmVmaXggaW4gZ2xvYmFsKSkge1xuICAgICAgZ2xvYmFsW21vZHVsZS5leHBvcnRzLldQcmVmaXhdID0ge307XG4gICAgfVxuICB9XG5cbiwgcG9zdE1lc3NhZ2U6IGZ1bmN0aW9uKHR5cGUsIGRhdGEpIHtcbiAgICBpZiAoZ2xvYmFsLnBhcmVudCAhPT0gZ2xvYmFsKSB7XG4gICAgICBnbG9iYWwucGFyZW50LnBvc3RNZXNzYWdlKEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgd2luZG93SWQ6IG1vZHVsZS5leHBvcnRzLmN1cnJlbnRXaW5kb3dJZFxuICAgICAgLCB0eXBlOiB0eXBlXG4gICAgICAsIGRhdGE6IGRhdGEgfHwgJydcbiAgICAgIH0pLCAnKicpO1xuICAgIH0gZWxzZSB7XG4gICAgICBkZWJ1ZygnQ2Fubm90IHBvc3RNZXNzYWdlLCBubyBwYXJlbnQgd2luZG93LicsIHR5cGUsIGRhdGEpO1xuICAgIH1cbiAgfVxuXG4sIGNyZWF0ZUlmcmFtZTogZnVuY3Rpb24oaWZyYW1lVXJsLCBlcnJvckNhbGxiYWNrKSB7XG4gICAgdmFyIGlmcmFtZSA9IGdsb2JhbC5kb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpZnJhbWUnKTtcbiAgICB2YXIgdHJlZiwgdW5sb2FkUmVmO1xuICAgIHZhciB1bmF0dGFjaCA9IGZ1bmN0aW9uKCkge1xuICAgICAgZGVidWcoJ3VuYXR0YWNoJyk7XG4gICAgICBjbGVhclRpbWVvdXQodHJlZik7XG4gICAgICAvLyBFeHBsb3JlciBoYWQgcHJvYmxlbXMgd2l0aCB0aGF0LlxuICAgICAgdHJ5IHtcbiAgICAgICAgaWZyYW1lLm9ubG9hZCA9IG51bGw7XG4gICAgICB9IGNhdGNoICh4KSB7XG4gICAgICAgIC8vIGludGVudGlvbmFsbHkgZW1wdHlcbiAgICAgIH1cbiAgICAgIGlmcmFtZS5vbmVycm9yID0gbnVsbDtcbiAgICB9O1xuICAgIHZhciBjbGVhbnVwID0gZnVuY3Rpb24oKSB7XG4gICAgICBkZWJ1ZygnY2xlYW51cCcpO1xuICAgICAgaWYgKGlmcmFtZSkge1xuICAgICAgICB1bmF0dGFjaCgpO1xuICAgICAgICAvLyBUaGlzIHRpbWVvdXQgbWFrZXMgY2hyb21lIGZpcmUgb25iZWZvcmV1bmxvYWQgZXZlbnRcbiAgICAgICAgLy8gd2l0aGluIGlmcmFtZS4gV2l0aG91dCB0aGUgdGltZW91dCBpdCBnb2VzIHN0cmFpZ2h0IHRvXG4gICAgICAgIC8vIG9udW5sb2FkLlxuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGlmIChpZnJhbWUpIHtcbiAgICAgICAgICAgIGlmcmFtZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGlmcmFtZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmcmFtZSA9IG51bGw7XG4gICAgICAgIH0sIDApO1xuICAgICAgICBldmVudFV0aWxzLnVubG9hZERlbCh1bmxvYWRSZWYpO1xuICAgICAgfVxuICAgIH07XG4gICAgdmFyIG9uZXJyb3IgPSBmdW5jdGlvbihlcnIpIHtcbiAgICAgIGRlYnVnKCdvbmVycm9yJywgZXJyKTtcbiAgICAgIGlmIChpZnJhbWUpIHtcbiAgICAgICAgY2xlYW51cCgpO1xuICAgICAgICBlcnJvckNhbGxiYWNrKGVycik7XG4gICAgICB9XG4gICAgfTtcbiAgICB2YXIgcG9zdCA9IGZ1bmN0aW9uKG1zZywgb3JpZ2luKSB7XG4gICAgICBkZWJ1ZygncG9zdCcsIG1zZywgb3JpZ2luKTtcbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgLy8gV2hlbiB0aGUgaWZyYW1lIGlzIG5vdCBsb2FkZWQsIElFIHJhaXNlcyBhbiBleGNlcHRpb25cbiAgICAgICAgICAvLyBvbiAnY29udGVudFdpbmRvdycuXG4gICAgICAgICAgaWYgKGlmcmFtZSAmJiBpZnJhbWUuY29udGVudFdpbmRvdykge1xuICAgICAgICAgICAgaWZyYW1lLmNvbnRlbnRXaW5kb3cucG9zdE1lc3NhZ2UobXNnLCBvcmlnaW4pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoeCkge1xuICAgICAgICAgIC8vIGludGVudGlvbmFsbHkgZW1wdHlcbiAgICAgICAgfVxuICAgICAgfSwgMCk7XG4gICAgfTtcblxuICAgIGlmcmFtZS5zcmMgPSBpZnJhbWVVcmw7XG4gICAgaWZyYW1lLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgaWZyYW1lLnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcbiAgICBpZnJhbWUub25lcnJvciA9IGZ1bmN0aW9uKCkge1xuICAgICAgb25lcnJvcignb25lcnJvcicpO1xuICAgIH07XG4gICAgaWZyYW1lLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgZGVidWcoJ29ubG9hZCcpO1xuICAgICAgLy8gYG9ubG9hZGAgaXMgdHJpZ2dlcmVkIGJlZm9yZSBzY3JpcHRzIG9uIHRoZSBpZnJhbWUgYXJlXG4gICAgICAvLyBleGVjdXRlZC4gR2l2ZSBpdCBmZXcgc2Vjb25kcyB0byBhY3R1YWxseSBsb2FkIHN0dWZmLlxuICAgICAgY2xlYXJUaW1lb3V0KHRyZWYpO1xuICAgICAgdHJlZiA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgIG9uZXJyb3IoJ29ubG9hZCB0aW1lb3V0Jyk7XG4gICAgICB9LCAyMDAwKTtcbiAgICB9O1xuICAgIGdsb2JhbC5kb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGlmcmFtZSk7XG4gICAgdHJlZiA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICBvbmVycm9yKCd0aW1lb3V0Jyk7XG4gICAgfSwgMTUwMDApO1xuICAgIHVubG9hZFJlZiA9IGV2ZW50VXRpbHMudW5sb2FkQWRkKGNsZWFudXApO1xuICAgIHJldHVybiB7XG4gICAgICBwb3N0OiBwb3N0XG4gICAgLCBjbGVhbnVwOiBjbGVhbnVwXG4gICAgLCBsb2FkZWQ6IHVuYXR0YWNoXG4gICAgfTtcbiAgfVxuXG4vKiBlc2xpbnQgbm8tdW5kZWY6IFwib2ZmXCIsIG5ldy1jYXA6IFwib2ZmXCIgKi9cbiwgY3JlYXRlSHRtbGZpbGU6IGZ1bmN0aW9uKGlmcmFtZVVybCwgZXJyb3JDYWxsYmFjaykge1xuICAgIHZhciBheG8gPSBbJ0FjdGl2ZSddLmNvbmNhdCgnT2JqZWN0Jykuam9pbignWCcpO1xuICAgIHZhciBkb2MgPSBuZXcgZ2xvYmFsW2F4b10oJ2h0bWxmaWxlJyk7XG4gICAgdmFyIHRyZWYsIHVubG9hZFJlZjtcbiAgICB2YXIgaWZyYW1lO1xuICAgIHZhciB1bmF0dGFjaCA9IGZ1bmN0aW9uKCkge1xuICAgICAgY2xlYXJUaW1lb3V0KHRyZWYpO1xuICAgICAgaWZyYW1lLm9uZXJyb3IgPSBudWxsO1xuICAgIH07XG4gICAgdmFyIGNsZWFudXAgPSBmdW5jdGlvbigpIHtcbiAgICAgIGlmIChkb2MpIHtcbiAgICAgICAgdW5hdHRhY2goKTtcbiAgICAgICAgZXZlbnRVdGlscy51bmxvYWREZWwodW5sb2FkUmVmKTtcbiAgICAgICAgaWZyYW1lLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoaWZyYW1lKTtcbiAgICAgICAgaWZyYW1lID0gZG9jID0gbnVsbDtcbiAgICAgICAgQ29sbGVjdEdhcmJhZ2UoKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHZhciBvbmVycm9yID0gZnVuY3Rpb24ocikge1xuICAgICAgZGVidWcoJ29uZXJyb3InLCByKTtcbiAgICAgIGlmIChkb2MpIHtcbiAgICAgICAgY2xlYW51cCgpO1xuICAgICAgICBlcnJvckNhbGxiYWNrKHIpO1xuICAgICAgfVxuICAgIH07XG4gICAgdmFyIHBvc3QgPSBmdW5jdGlvbihtc2csIG9yaWdpbikge1xuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gV2hlbiB0aGUgaWZyYW1lIGlzIG5vdCBsb2FkZWQsIElFIHJhaXNlcyBhbiBleGNlcHRpb25cbiAgICAgICAgLy8gb24gJ2NvbnRlbnRXaW5kb3cnLlxuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGlmIChpZnJhbWUgJiYgaWZyYW1lLmNvbnRlbnRXaW5kb3cpIHtcbiAgICAgICAgICAgICAgaWZyYW1lLmNvbnRlbnRXaW5kb3cucG9zdE1lc3NhZ2UobXNnLCBvcmlnaW4pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSwgMCk7XG4gICAgICB9IGNhdGNoICh4KSB7XG4gICAgICAgIC8vIGludGVudGlvbmFsbHkgZW1wdHlcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgZG9jLm9wZW4oKTtcbiAgICBkb2Mud3JpdGUoJzxodG1sPjxzJyArICdjcmlwdD4nICtcbiAgICAgICAgICAgICAgJ2RvY3VtZW50LmRvbWFpbj1cIicgKyBnbG9iYWwuZG9jdW1lbnQuZG9tYWluICsgJ1wiOycgK1xuICAgICAgICAgICAgICAnPC9zJyArICdjcmlwdD48L2h0bWw+Jyk7XG4gICAgZG9jLmNsb3NlKCk7XG4gICAgZG9jLnBhcmVudFdpbmRvd1ttb2R1bGUuZXhwb3J0cy5XUHJlZml4XSA9IGdsb2JhbFttb2R1bGUuZXhwb3J0cy5XUHJlZml4XTtcbiAgICB2YXIgYyA9IGRvYy5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBkb2MuYm9keS5hcHBlbmRDaGlsZChjKTtcbiAgICBpZnJhbWUgPSBkb2MuY3JlYXRlRWxlbWVudCgnaWZyYW1lJyk7XG4gICAgYy5hcHBlbmRDaGlsZChpZnJhbWUpO1xuICAgIGlmcmFtZS5zcmMgPSBpZnJhbWVVcmw7XG4gICAgaWZyYW1lLm9uZXJyb3IgPSBmdW5jdGlvbigpIHtcbiAgICAgIG9uZXJyb3IoJ29uZXJyb3InKTtcbiAgICB9O1xuICAgIHRyZWYgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgb25lcnJvcigndGltZW91dCcpO1xuICAgIH0sIDE1MDAwKTtcbiAgICB1bmxvYWRSZWYgPSBldmVudFV0aWxzLnVubG9hZEFkZChjbGVhbnVwKTtcbiAgICByZXR1cm4ge1xuICAgICAgcG9zdDogcG9zdFxuICAgICwgY2xlYW51cDogY2xlYW51cFxuICAgICwgbG9hZGVkOiB1bmF0dGFjaFxuICAgIH07XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzLmlmcmFtZUVuYWJsZWQgPSBmYWxzZTtcbmlmIChnbG9iYWwuZG9jdW1lbnQpIHtcbiAgLy8gcG9zdE1lc3NhZ2UgbWlzYmVoYXZlcyBpbiBrb25xdWVyb3IgNC42LjUgLSB0aGUgbWVzc2FnZXMgYXJlIGRlbGl2ZXJlZCB3aXRoXG4gIC8vIGh1Z2UgZGVsYXksIG9yIG5vdCBhdCBhbGwuXG4gIG1vZHVsZS5leHBvcnRzLmlmcmFtZUVuYWJsZWQgPSAodHlwZW9mIGdsb2JhbC5wb3N0TWVzc2FnZSA9PT0gJ2Z1bmN0aW9uJyB8fFxuICAgIHR5cGVvZiBnbG9iYWwucG9zdE1lc3NhZ2UgPT09ICdvYmplY3QnKSAmJiAoIWJyb3dzZXIuaXNLb25xdWVyb3IoKSk7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBsb2dPYmplY3QgPSB7fTtcblsnbG9nJywgJ2RlYnVnJywgJ3dhcm4nXS5mb3JFYWNoKGZ1bmN0aW9uIChsZXZlbCkge1xuICB2YXIgbGV2ZWxFeGlzdHM7XG5cbiAgdHJ5IHtcbiAgICBsZXZlbEV4aXN0cyA9IGdsb2JhbC5jb25zb2xlICYmIGdsb2JhbC5jb25zb2xlW2xldmVsXSAmJiBnbG9iYWwuY29uc29sZVtsZXZlbF0uYXBwbHk7XG4gIH0gY2F0Y2goZSkge1xuICAgIC8vIGRvIG5vdGhpbmdcbiAgfVxuXG4gIGxvZ09iamVjdFtsZXZlbF0gPSBsZXZlbEV4aXN0cyA/IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZ2xvYmFsLmNvbnNvbGVbbGV2ZWxdLmFwcGx5KGdsb2JhbC5jb25zb2xlLCBhcmd1bWVudHMpO1xuICB9IDogKGxldmVsID09PSAnbG9nJyA/IGZ1bmN0aW9uICgpIHt9IDogbG9nT2JqZWN0LmxvZyk7XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBsb2dPYmplY3Q7XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBpc09iamVjdDogZnVuY3Rpb24ob2JqKSB7XG4gICAgdmFyIHR5cGUgPSB0eXBlb2Ygb2JqO1xuICAgIHJldHVybiB0eXBlID09PSAnZnVuY3Rpb24nIHx8IHR5cGUgPT09ICdvYmplY3QnICYmICEhb2JqO1xuICB9XG5cbiwgZXh0ZW5kOiBmdW5jdGlvbihvYmopIHtcbiAgICBpZiAoIXRoaXMuaXNPYmplY3Qob2JqKSkge1xuICAgICAgcmV0dXJuIG9iajtcbiAgICB9XG4gICAgdmFyIHNvdXJjZSwgcHJvcDtcbiAgICBmb3IgKHZhciBpID0gMSwgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG4gICAgICBmb3IgKHByb3AgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBwcm9wKSkge1xuICAgICAgICAgIG9ialtwcm9wXSA9IHNvdXJjZVtwcm9wXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gb2JqO1xuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgY3J5cHRvID0gcmVxdWlyZSgnY3J5cHRvJyk7XG5cbi8vIFRoaXMgc3RyaW5nIGhhcyBsZW5ndGggMzIsIGEgcG93ZXIgb2YgMiwgc28gdGhlIG1vZHVsdXMgZG9lc24ndCBpbnRyb2R1Y2UgYVxuLy8gYmlhcy5cbnZhciBfcmFuZG9tU3RyaW5nQ2hhcnMgPSAnYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDUnO1xubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHN0cmluZzogZnVuY3Rpb24obGVuZ3RoKSB7XG4gICAgdmFyIG1heCA9IF9yYW5kb21TdHJpbmdDaGFycy5sZW5ndGg7XG4gICAgdmFyIGJ5dGVzID0gY3J5cHRvLnJhbmRvbUJ5dGVzKGxlbmd0aCk7XG4gICAgdmFyIHJldCA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIHJldC5wdXNoKF9yYW5kb21TdHJpbmdDaGFycy5zdWJzdHIoYnl0ZXNbaV0gJSBtYXgsIDEpKTtcbiAgICB9XG4gICAgcmV0dXJuIHJldC5qb2luKCcnKTtcbiAgfVxuXG4sIG51bWJlcjogZnVuY3Rpb24obWF4KSB7XG4gICAgcmV0dXJuIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIG1heCk7XG4gIH1cblxuLCBudW1iZXJTdHJpbmc6IGZ1bmN0aW9uKG1heCkge1xuICAgIHZhciB0ID0gKCcnICsgKG1heCAtIDEpKS5sZW5ndGg7XG4gICAgdmFyIHAgPSBuZXcgQXJyYXkodCArIDEpLmpvaW4oJzAnKTtcbiAgICByZXR1cm4gKHAgKyB0aGlzLm51bWJlcihtYXgpKS5zbGljZSgtdCk7XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBkZWJ1ZyA9IGZ1bmN0aW9uKCkge307XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBkZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJykoJ3NvY2tqcy1jbGllbnQ6dXRpbHM6dHJhbnNwb3J0Jyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oYXZhaWxhYmxlVHJhbnNwb3J0cykge1xuICByZXR1cm4ge1xuICAgIGZpbHRlclRvRW5hYmxlZDogZnVuY3Rpb24odHJhbnNwb3J0c1doaXRlbGlzdCwgaW5mbykge1xuICAgICAgdmFyIHRyYW5zcG9ydHMgPSB7XG4gICAgICAgIG1haW46IFtdXG4gICAgICAsIGZhY2FkZTogW11cbiAgICAgIH07XG4gICAgICBpZiAoIXRyYW5zcG9ydHNXaGl0ZWxpc3QpIHtcbiAgICAgICAgdHJhbnNwb3J0c1doaXRlbGlzdCA9IFtdO1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdHJhbnNwb3J0c1doaXRlbGlzdCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgdHJhbnNwb3J0c1doaXRlbGlzdCA9IFt0cmFuc3BvcnRzV2hpdGVsaXN0XTtcbiAgICAgIH1cblxuICAgICAgYXZhaWxhYmxlVHJhbnNwb3J0cy5mb3JFYWNoKGZ1bmN0aW9uKHRyYW5zKSB7XG4gICAgICAgIGlmICghdHJhbnMpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHJhbnMudHJhbnNwb3J0TmFtZSA9PT0gJ3dlYnNvY2tldCcgJiYgaW5mby53ZWJzb2NrZXQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgZGVidWcoJ2Rpc2FibGVkIGZyb20gc2VydmVyJywgJ3dlYnNvY2tldCcpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0cmFuc3BvcnRzV2hpdGVsaXN0Lmxlbmd0aCAmJlxuICAgICAgICAgICAgdHJhbnNwb3J0c1doaXRlbGlzdC5pbmRleE9mKHRyYW5zLnRyYW5zcG9ydE5hbWUpID09PSAtMSkge1xuICAgICAgICAgIGRlYnVnKCdub3QgaW4gd2hpdGVsaXN0JywgdHJhbnMudHJhbnNwb3J0TmFtZSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRyYW5zLmVuYWJsZWQoaW5mbykpIHtcbiAgICAgICAgICBkZWJ1ZygnZW5hYmxlZCcsIHRyYW5zLnRyYW5zcG9ydE5hbWUpO1xuICAgICAgICAgIHRyYW5zcG9ydHMubWFpbi5wdXNoKHRyYW5zKTtcbiAgICAgICAgICBpZiAodHJhbnMuZmFjYWRlVHJhbnNwb3J0KSB7XG4gICAgICAgICAgICB0cmFuc3BvcnRzLmZhY2FkZS5wdXNoKHRyYW5zLmZhY2FkZVRyYW5zcG9ydCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRlYnVnKCdkaXNhYmxlZCcsIHRyYW5zLnRyYW5zcG9ydE5hbWUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiB0cmFuc3BvcnRzO1xuICAgIH1cbiAgfTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBVUkwgPSByZXF1aXJlKCd1cmwtcGFyc2UnKTtcblxudmFyIGRlYnVnID0gZnVuY3Rpb24oKSB7fTtcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIGRlYnVnID0gcmVxdWlyZSgnZGVidWcnKSgnc29ja2pzLWNsaWVudDp1dGlsczp1cmwnKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGdldE9yaWdpbjogZnVuY3Rpb24odXJsKSB7XG4gICAgaWYgKCF1cmwpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHZhciBwID0gbmV3IFVSTCh1cmwpO1xuICAgIGlmIChwLnByb3RvY29sID09PSAnZmlsZTonKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICB2YXIgcG9ydCA9IHAucG9ydDtcbiAgICBpZiAoIXBvcnQpIHtcbiAgICAgIHBvcnQgPSAocC5wcm90b2NvbCA9PT0gJ2h0dHBzOicpID8gJzQ0MycgOiAnODAnO1xuICAgIH1cblxuICAgIHJldHVybiBwLnByb3RvY29sICsgJy8vJyArIHAuaG9zdG5hbWUgKyAnOicgKyBwb3J0O1xuICB9XG5cbiwgaXNPcmlnaW5FcXVhbDogZnVuY3Rpb24oYSwgYikge1xuICAgIHZhciByZXMgPSB0aGlzLmdldE9yaWdpbihhKSA9PT0gdGhpcy5nZXRPcmlnaW4oYik7XG4gICAgZGVidWcoJ3NhbWUnLCBhLCBiLCByZXMpO1xuICAgIHJldHVybiByZXM7XG4gIH1cblxuLCBpc1NjaGVtZUVxdWFsOiBmdW5jdGlvbihhLCBiKSB7XG4gICAgcmV0dXJuIChhLnNwbGl0KCc6JylbMF0gPT09IGIuc3BsaXQoJzonKVswXSk7XG4gIH1cblxuLCBhZGRQYXRoOiBmdW5jdGlvbiAodXJsLCBwYXRoKSB7XG4gICAgdmFyIHFzID0gdXJsLnNwbGl0KCc/Jyk7XG4gICAgcmV0dXJuIHFzWzBdICsgcGF0aCArIChxc1sxXSA/ICc/JyArIHFzWzFdIDogJycpO1xuICB9XG5cbiwgYWRkUXVlcnk6IGZ1bmN0aW9uICh1cmwsIHEpIHtcbiAgICByZXR1cm4gdXJsICsgKHVybC5pbmRleE9mKCc/JykgPT09IC0xID8gKCc/JyArIHEpIDogKCcmJyArIHEpKTtcbiAgfVxuXG4sIGlzTG9vcGJhY2tBZGRyOiBmdW5jdGlvbiAoYWRkcikge1xuICAgIHJldHVybiAvXjEyN1xcLihbMC05XXsxLDN9KVxcLihbMC05XXsxLDN9KVxcLihbMC05XXsxLDN9KSQvaS50ZXN0KGFkZHIpIHx8IC9eXFxbOjoxXFxdJC8udGVzdChhZGRyKTtcbiAgfVxufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gJzEuNi4xJztcbiIsIi8qKlxuICogSGVscGVycy5cbiAqL1xuXG52YXIgcyA9IDEwMDA7XG52YXIgbSA9IHMgKiA2MDtcbnZhciBoID0gbSAqIDYwO1xudmFyIGQgPSBoICogMjQ7XG52YXIgdyA9IGQgKiA3O1xudmFyIHkgPSBkICogMzY1LjI1O1xuXG4vKipcbiAqIFBhcnNlIG9yIGZvcm1hdCB0aGUgZ2l2ZW4gYHZhbGAuXG4gKlxuICogT3B0aW9uczpcbiAqXG4gKiAgLSBgbG9uZ2AgdmVyYm9zZSBmb3JtYXR0aW5nIFtmYWxzZV1cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ3xOdW1iZXJ9IHZhbFxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxuICogQHRocm93cyB7RXJyb3J9IHRocm93IGFuIGVycm9yIGlmIHZhbCBpcyBub3QgYSBub24tZW1wdHkgc3RyaW5nIG9yIGEgbnVtYmVyXG4gKiBAcmV0dXJuIHtTdHJpbmd8TnVtYmVyfVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHZhbCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsO1xuICBpZiAodHlwZSA9PT0gJ3N0cmluZycgJiYgdmFsLmxlbmd0aCA+IDApIHtcbiAgICByZXR1cm4gcGFyc2UodmFsKTtcbiAgfSBlbHNlIGlmICh0eXBlID09PSAnbnVtYmVyJyAmJiBpc0Zpbml0ZSh2YWwpKSB7XG4gICAgcmV0dXJuIG9wdGlvbnMubG9uZyA/IGZtdExvbmcodmFsKSA6IGZtdFNob3J0KHZhbCk7XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKFxuICAgICd2YWwgaXMgbm90IGEgbm9uLWVtcHR5IHN0cmluZyBvciBhIHZhbGlkIG51bWJlci4gdmFsPScgK1xuICAgICAgSlNPTi5zdHJpbmdpZnkodmFsKVxuICApO1xufTtcblxuLyoqXG4gKiBQYXJzZSB0aGUgZ2l2ZW4gYHN0cmAgYW5kIHJldHVybiBtaWxsaXNlY29uZHMuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0clxuICogQHJldHVybiB7TnVtYmVyfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gcGFyc2Uoc3RyKSB7XG4gIHN0ciA9IFN0cmluZyhzdHIpO1xuICBpZiAoc3RyLmxlbmd0aCA+IDEwMCkge1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgbWF0Y2ggPSAvXigtPyg/OlxcZCspP1xcLj9cXGQrKSAqKG1pbGxpc2Vjb25kcz98bXNlY3M/fG1zfHNlY29uZHM/fHNlY3M/fHN8bWludXRlcz98bWlucz98bXxob3Vycz98aHJzP3xofGRheXM/fGR8d2Vla3M/fHd8eWVhcnM/fHlycz98eSk/JC9pLmV4ZWMoXG4gICAgc3RyXG4gICk7XG4gIGlmICghbWF0Y2gpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIG4gPSBwYXJzZUZsb2F0KG1hdGNoWzFdKTtcbiAgdmFyIHR5cGUgPSAobWF0Y2hbMl0gfHwgJ21zJykudG9Mb3dlckNhc2UoKTtcbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSAneWVhcnMnOlxuICAgIGNhc2UgJ3llYXInOlxuICAgIGNhc2UgJ3lycyc6XG4gICAgY2FzZSAneXInOlxuICAgIGNhc2UgJ3knOlxuICAgICAgcmV0dXJuIG4gKiB5O1xuICAgIGNhc2UgJ3dlZWtzJzpcbiAgICBjYXNlICd3ZWVrJzpcbiAgICBjYXNlICd3JzpcbiAgICAgIHJldHVybiBuICogdztcbiAgICBjYXNlICdkYXlzJzpcbiAgICBjYXNlICdkYXknOlxuICAgIGNhc2UgJ2QnOlxuICAgICAgcmV0dXJuIG4gKiBkO1xuICAgIGNhc2UgJ2hvdXJzJzpcbiAgICBjYXNlICdob3VyJzpcbiAgICBjYXNlICdocnMnOlxuICAgIGNhc2UgJ2hyJzpcbiAgICBjYXNlICdoJzpcbiAgICAgIHJldHVybiBuICogaDtcbiAgICBjYXNlICdtaW51dGVzJzpcbiAgICBjYXNlICdtaW51dGUnOlxuICAgIGNhc2UgJ21pbnMnOlxuICAgIGNhc2UgJ21pbic6XG4gICAgY2FzZSAnbSc6XG4gICAgICByZXR1cm4gbiAqIG07XG4gICAgY2FzZSAnc2Vjb25kcyc6XG4gICAgY2FzZSAnc2Vjb25kJzpcbiAgICBjYXNlICdzZWNzJzpcbiAgICBjYXNlICdzZWMnOlxuICAgIGNhc2UgJ3MnOlxuICAgICAgcmV0dXJuIG4gKiBzO1xuICAgIGNhc2UgJ21pbGxpc2Vjb25kcyc6XG4gICAgY2FzZSAnbWlsbGlzZWNvbmQnOlxuICAgIGNhc2UgJ21zZWNzJzpcbiAgICBjYXNlICdtc2VjJzpcbiAgICBjYXNlICdtcyc6XG4gICAgICByZXR1cm4gbjtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxufVxuXG4vKipcbiAqIFNob3J0IGZvcm1hdCBmb3IgYG1zYC5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gbXNcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGZtdFNob3J0KG1zKSB7XG4gIHZhciBtc0FicyA9IE1hdGguYWJzKG1zKTtcbiAgaWYgKG1zQWJzID49IGQpIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChtcyAvIGQpICsgJ2QnO1xuICB9XG4gIGlmIChtc0FicyA+PSBoKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBoKSArICdoJztcbiAgfVxuICBpZiAobXNBYnMgPj0gbSkge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gbSkgKyAnbSc7XG4gIH1cbiAgaWYgKG1zQWJzID49IHMpIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChtcyAvIHMpICsgJ3MnO1xuICB9XG4gIHJldHVybiBtcyArICdtcyc7XG59XG5cbi8qKlxuICogTG9uZyBmb3JtYXQgZm9yIGBtc2AuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IG1zXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBmbXRMb25nKG1zKSB7XG4gIHZhciBtc0FicyA9IE1hdGguYWJzKG1zKTtcbiAgaWYgKG1zQWJzID49IGQpIHtcbiAgICByZXR1cm4gcGx1cmFsKG1zLCBtc0FicywgZCwgJ2RheScpO1xuICB9XG4gIGlmIChtc0FicyA+PSBoKSB7XG4gICAgcmV0dXJuIHBsdXJhbChtcywgbXNBYnMsIGgsICdob3VyJyk7XG4gIH1cbiAgaWYgKG1zQWJzID49IG0pIHtcbiAgICByZXR1cm4gcGx1cmFsKG1zLCBtc0FicywgbSwgJ21pbnV0ZScpO1xuICB9XG4gIGlmIChtc0FicyA+PSBzKSB7XG4gICAgcmV0dXJuIHBsdXJhbChtcywgbXNBYnMsIHMsICdzZWNvbmQnKTtcbiAgfVxuICByZXR1cm4gbXMgKyAnIG1zJztcbn1cblxuLyoqXG4gKiBQbHVyYWxpemF0aW9uIGhlbHBlci5cbiAqL1xuXG5mdW5jdGlvbiBwbHVyYWwobXMsIG1zQWJzLCBuLCBuYW1lKSB7XG4gIHZhciBpc1BsdXJhbCA9IG1zQWJzID49IG4gKiAxLjU7XG4gIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gbikgKyAnICcgKyBuYW1lICsgKGlzUGx1cmFsID8gJ3MnIDogJycpO1xufVxuIiwiLyogZXNsaW50LWVudiBicm93c2VyICovXG5cbi8qKlxuICogVGhpcyBpcyB0aGUgd2ViIGJyb3dzZXIgaW1wbGVtZW50YXRpb24gb2YgYGRlYnVnKClgLlxuICovXG5cbmV4cG9ydHMuZm9ybWF0QXJncyA9IGZvcm1hdEFyZ3M7XG5leHBvcnRzLnNhdmUgPSBzYXZlO1xuZXhwb3J0cy5sb2FkID0gbG9hZDtcbmV4cG9ydHMudXNlQ29sb3JzID0gdXNlQ29sb3JzO1xuZXhwb3J0cy5zdG9yYWdlID0gbG9jYWxzdG9yYWdlKCk7XG5leHBvcnRzLmRlc3Ryb3kgPSAoKCkgPT4ge1xuXHRsZXQgd2FybmVkID0gZmFsc2U7XG5cblx0cmV0dXJuICgpID0+IHtcblx0XHRpZiAoIXdhcm5lZCkge1xuXHRcdFx0d2FybmVkID0gdHJ1ZTtcblx0XHRcdGNvbnNvbGUud2FybignSW5zdGFuY2UgbWV0aG9kIGBkZWJ1Zy5kZXN0cm95KClgIGlzIGRlcHJlY2F0ZWQgYW5kIG5vIGxvbmdlciBkb2VzIGFueXRoaW5nLiBJdCB3aWxsIGJlIHJlbW92ZWQgaW4gdGhlIG5leHQgbWFqb3IgdmVyc2lvbiBvZiBgZGVidWdgLicpO1xuXHRcdH1cblx0fTtcbn0pKCk7XG5cbi8qKlxuICogQ29sb3JzLlxuICovXG5cbmV4cG9ydHMuY29sb3JzID0gW1xuXHQnIzAwMDBDQycsXG5cdCcjMDAwMEZGJyxcblx0JyMwMDMzQ0MnLFxuXHQnIzAwMzNGRicsXG5cdCcjMDA2NkNDJyxcblx0JyMwMDY2RkYnLFxuXHQnIzAwOTlDQycsXG5cdCcjMDA5OUZGJyxcblx0JyMwMENDMDAnLFxuXHQnIzAwQ0MzMycsXG5cdCcjMDBDQzY2Jyxcblx0JyMwMENDOTknLFxuXHQnIzAwQ0NDQycsXG5cdCcjMDBDQ0ZGJyxcblx0JyMzMzAwQ0MnLFxuXHQnIzMzMDBGRicsXG5cdCcjMzMzM0NDJyxcblx0JyMzMzMzRkYnLFxuXHQnIzMzNjZDQycsXG5cdCcjMzM2NkZGJyxcblx0JyMzMzk5Q0MnLFxuXHQnIzMzOTlGRicsXG5cdCcjMzNDQzAwJyxcblx0JyMzM0NDMzMnLFxuXHQnIzMzQ0M2NicsXG5cdCcjMzNDQzk5Jyxcblx0JyMzM0NDQ0MnLFxuXHQnIzMzQ0NGRicsXG5cdCcjNjYwMENDJyxcblx0JyM2NjAwRkYnLFxuXHQnIzY2MzNDQycsXG5cdCcjNjYzM0ZGJyxcblx0JyM2NkNDMDAnLFxuXHQnIzY2Q0MzMycsXG5cdCcjOTkwMENDJyxcblx0JyM5OTAwRkYnLFxuXHQnIzk5MzNDQycsXG5cdCcjOTkzM0ZGJyxcblx0JyM5OUNDMDAnLFxuXHQnIzk5Q0MzMycsXG5cdCcjQ0MwMDAwJyxcblx0JyNDQzAwMzMnLFxuXHQnI0NDMDA2NicsXG5cdCcjQ0MwMDk5Jyxcblx0JyNDQzAwQ0MnLFxuXHQnI0NDMDBGRicsXG5cdCcjQ0MzMzAwJyxcblx0JyNDQzMzMzMnLFxuXHQnI0NDMzM2NicsXG5cdCcjQ0MzMzk5Jyxcblx0JyNDQzMzQ0MnLFxuXHQnI0NDMzNGRicsXG5cdCcjQ0M2NjAwJyxcblx0JyNDQzY2MzMnLFxuXHQnI0NDOTkwMCcsXG5cdCcjQ0M5OTMzJyxcblx0JyNDQ0NDMDAnLFxuXHQnI0NDQ0MzMycsXG5cdCcjRkYwMDAwJyxcblx0JyNGRjAwMzMnLFxuXHQnI0ZGMDA2NicsXG5cdCcjRkYwMDk5Jyxcblx0JyNGRjAwQ0MnLFxuXHQnI0ZGMDBGRicsXG5cdCcjRkYzMzAwJyxcblx0JyNGRjMzMzMnLFxuXHQnI0ZGMzM2NicsXG5cdCcjRkYzMzk5Jyxcblx0JyNGRjMzQ0MnLFxuXHQnI0ZGMzNGRicsXG5cdCcjRkY2NjAwJyxcblx0JyNGRjY2MzMnLFxuXHQnI0ZGOTkwMCcsXG5cdCcjRkY5OTMzJyxcblx0JyNGRkNDMDAnLFxuXHQnI0ZGQ0MzMydcbl07XG5cbi8qKlxuICogQ3VycmVudGx5IG9ubHkgV2ViS2l0LWJhc2VkIFdlYiBJbnNwZWN0b3JzLCBGaXJlZm94ID49IHYzMSxcbiAqIGFuZCB0aGUgRmlyZWJ1ZyBleHRlbnNpb24gKGFueSBGaXJlZm94IHZlcnNpb24pIGFyZSBrbm93blxuICogdG8gc3VwcG9ydCBcIiVjXCIgQ1NTIGN1c3RvbWl6YXRpb25zLlxuICpcbiAqIFRPRE86IGFkZCBhIGBsb2NhbFN0b3JhZ2VgIHZhcmlhYmxlIHRvIGV4cGxpY2l0bHkgZW5hYmxlL2Rpc2FibGUgY29sb3JzXG4gKi9cblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbXBsZXhpdHlcbmZ1bmN0aW9uIHVzZUNvbG9ycygpIHtcblx0Ly8gTkI6IEluIGFuIEVsZWN0cm9uIHByZWxvYWQgc2NyaXB0LCBkb2N1bWVudCB3aWxsIGJlIGRlZmluZWQgYnV0IG5vdCBmdWxseVxuXHQvLyBpbml0aWFsaXplZC4gU2luY2Ugd2Uga25vdyB3ZSdyZSBpbiBDaHJvbWUsIHdlJ2xsIGp1c3QgZGV0ZWN0IHRoaXMgY2FzZVxuXHQvLyBleHBsaWNpdGx5XG5cdGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cucHJvY2VzcyAmJiAod2luZG93LnByb2Nlc3MudHlwZSA9PT0gJ3JlbmRlcmVyJyB8fCB3aW5kb3cucHJvY2Vzcy5fX253anMpKSB7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblxuXHQvLyBJbnRlcm5ldCBFeHBsb3JlciBhbmQgRWRnZSBkbyBub3Qgc3VwcG9ydCBjb2xvcnMuXG5cdGlmICh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiBuYXZpZ2F0b3IudXNlckFnZW50ICYmIG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKS5tYXRjaCgvKGVkZ2V8dHJpZGVudClcXC8oXFxkKykvKSkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdC8vIElzIHdlYmtpdD8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMTY0NTk2MDYvMzc2NzczXG5cdC8vIGRvY3VtZW50IGlzIHVuZGVmaW5lZCBpbiByZWFjdC1uYXRpdmU6IGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC1uYXRpdmUvcHVsbC8xNjMyXG5cdHJldHVybiAodHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZS5XZWJraXRBcHBlYXJhbmNlKSB8fFxuXHRcdC8vIElzIGZpcmVidWc/IGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzM5ODEyMC8zNzY3NzNcblx0XHQodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmNvbnNvbGUgJiYgKHdpbmRvdy5jb25zb2xlLmZpcmVidWcgfHwgKHdpbmRvdy5jb25zb2xlLmV4Y2VwdGlvbiAmJiB3aW5kb3cuY29uc29sZS50YWJsZSkpKSB8fFxuXHRcdC8vIElzIGZpcmVmb3ggPj0gdjMxP1xuXHRcdC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvVG9vbHMvV2ViX0NvbnNvbGUjU3R5bGluZ19tZXNzYWdlc1xuXHRcdCh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiBuYXZpZ2F0b3IudXNlckFnZW50ICYmIG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKS5tYXRjaCgvZmlyZWZveFxcLyhcXGQrKS8pICYmIHBhcnNlSW50KFJlZ0V4cC4kMSwgMTApID49IDMxKSB8fFxuXHRcdC8vIERvdWJsZSBjaGVjayB3ZWJraXQgaW4gdXNlckFnZW50IGp1c3QgaW4gY2FzZSB3ZSBhcmUgaW4gYSB3b3JrZXJcblx0XHQodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudCAmJiBuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkubWF0Y2goL2FwcGxld2Via2l0XFwvKFxcZCspLykpO1xufVxuXG4vKipcbiAqIENvbG9yaXplIGxvZyBhcmd1bWVudHMgaWYgZW5hYmxlZC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGZvcm1hdEFyZ3MoYXJncykge1xuXHRhcmdzWzBdID0gKHRoaXMudXNlQ29sb3JzID8gJyVjJyA6ICcnKSArXG5cdFx0dGhpcy5uYW1lc3BhY2UgK1xuXHRcdCh0aGlzLnVzZUNvbG9ycyA/ICcgJWMnIDogJyAnKSArXG5cdFx0YXJnc1swXSArXG5cdFx0KHRoaXMudXNlQ29sb3JzID8gJyVjICcgOiAnICcpICtcblx0XHQnKycgKyBtb2R1bGUuZXhwb3J0cy5odW1hbml6ZSh0aGlzLmRpZmYpO1xuXG5cdGlmICghdGhpcy51c2VDb2xvcnMpIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHRjb25zdCBjID0gJ2NvbG9yOiAnICsgdGhpcy5jb2xvcjtcblx0YXJncy5zcGxpY2UoMSwgMCwgYywgJ2NvbG9yOiBpbmhlcml0Jyk7XG5cblx0Ly8gVGhlIGZpbmFsIFwiJWNcIiBpcyBzb21ld2hhdCB0cmlja3ksIGJlY2F1c2UgdGhlcmUgY291bGQgYmUgb3RoZXJcblx0Ly8gYXJndW1lbnRzIHBhc3NlZCBlaXRoZXIgYmVmb3JlIG9yIGFmdGVyIHRoZSAlYywgc28gd2UgbmVlZCB0b1xuXHQvLyBmaWd1cmUgb3V0IHRoZSBjb3JyZWN0IGluZGV4IHRvIGluc2VydCB0aGUgQ1NTIGludG9cblx0bGV0IGluZGV4ID0gMDtcblx0bGV0IGxhc3RDID0gMDtcblx0YXJnc1swXS5yZXBsYWNlKC8lW2EtekEtWiVdL2csIG1hdGNoID0+IHtcblx0XHRpZiAobWF0Y2ggPT09ICclJScpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0aW5kZXgrKztcblx0XHRpZiAobWF0Y2ggPT09ICclYycpIHtcblx0XHRcdC8vIFdlIG9ubHkgYXJlIGludGVyZXN0ZWQgaW4gdGhlICpsYXN0KiAlY1xuXHRcdFx0Ly8gKHRoZSB1c2VyIG1heSBoYXZlIHByb3ZpZGVkIHRoZWlyIG93bilcblx0XHRcdGxhc3RDID0gaW5kZXg7XG5cdFx0fVxuXHR9KTtcblxuXHRhcmdzLnNwbGljZShsYXN0QywgMCwgYyk7XG59XG5cbi8qKlxuICogSW52b2tlcyBgY29uc29sZS5kZWJ1ZygpYCB3aGVuIGF2YWlsYWJsZS5cbiAqIE5vLW9wIHdoZW4gYGNvbnNvbGUuZGVidWdgIGlzIG5vdCBhIFwiZnVuY3Rpb25cIi5cbiAqIElmIGBjb25zb2xlLmRlYnVnYCBpcyBub3QgYXZhaWxhYmxlLCBmYWxscyBiYWNrXG4gKiB0byBgY29uc29sZS5sb2dgLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cbmV4cG9ydHMubG9nID0gY29uc29sZS5kZWJ1ZyB8fCBjb25zb2xlLmxvZyB8fCAoKCkgPT4ge30pO1xuXG4vKipcbiAqIFNhdmUgYG5hbWVzcGFjZXNgLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2VzXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gc2F2ZShuYW1lc3BhY2VzKSB7XG5cdHRyeSB7XG5cdFx0aWYgKG5hbWVzcGFjZXMpIHtcblx0XHRcdGV4cG9ydHMuc3RvcmFnZS5zZXRJdGVtKCdkZWJ1ZycsIG5hbWVzcGFjZXMpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRleHBvcnRzLnN0b3JhZ2UucmVtb3ZlSXRlbSgnZGVidWcnKTtcblx0XHR9XG5cdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0Ly8gU3dhbGxvd1xuXHRcdC8vIFhYWCAoQFFpeC0pIHNob3VsZCB3ZSBiZSBsb2dnaW5nIHRoZXNlP1xuXHR9XG59XG5cbi8qKlxuICogTG9hZCBgbmFtZXNwYWNlc2AuXG4gKlxuICogQHJldHVybiB7U3RyaW5nfSByZXR1cm5zIHRoZSBwcmV2aW91c2x5IHBlcnNpc3RlZCBkZWJ1ZyBtb2Rlc1xuICogQGFwaSBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGxvYWQoKSB7XG5cdGxldCByO1xuXHR0cnkge1xuXHRcdHIgPSBleHBvcnRzLnN0b3JhZ2UuZ2V0SXRlbSgnZGVidWcnKTtcblx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHQvLyBTd2FsbG93XG5cdFx0Ly8gWFhYIChAUWl4LSkgc2hvdWxkIHdlIGJlIGxvZ2dpbmcgdGhlc2U/XG5cdH1cblxuXHQvLyBJZiBkZWJ1ZyBpc24ndCBzZXQgaW4gTFMsIGFuZCB3ZSdyZSBpbiBFbGVjdHJvbiwgdHJ5IHRvIGxvYWQgJERFQlVHXG5cdGlmICghciAmJiB0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgJiYgJ2VudicgaW4gcHJvY2Vzcykge1xuXHRcdHIgPSBwcm9jZXNzLmVudi5ERUJVRztcblx0fVxuXG5cdHJldHVybiByO1xufVxuXG4vKipcbiAqIExvY2Fsc3RvcmFnZSBhdHRlbXB0cyB0byByZXR1cm4gdGhlIGxvY2Fsc3RvcmFnZS5cbiAqXG4gKiBUaGlzIGlzIG5lY2Vzc2FyeSBiZWNhdXNlIHNhZmFyaSB0aHJvd3NcbiAqIHdoZW4gYSB1c2VyIGRpc2FibGVzIGNvb2tpZXMvbG9jYWxzdG9yYWdlXG4gKiBhbmQgeW91IGF0dGVtcHQgdG8gYWNjZXNzIGl0LlxuICpcbiAqIEByZXR1cm4ge0xvY2FsU3RvcmFnZX1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGxvY2Fsc3RvcmFnZSgpIHtcblx0dHJ5IHtcblx0XHQvLyBUVk1MS2l0IChBcHBsZSBUViBKUyBSdW50aW1lKSBkb2VzIG5vdCBoYXZlIGEgd2luZG93IG9iamVjdCwganVzdCBsb2NhbFN0b3JhZ2UgaW4gdGhlIGdsb2JhbCBjb250ZXh0XG5cdFx0Ly8gVGhlIEJyb3dzZXIgYWxzbyBoYXMgbG9jYWxTdG9yYWdlIGluIHRoZSBnbG9iYWwgY29udGV4dC5cblx0XHRyZXR1cm4gbG9jYWxTdG9yYWdlO1xuXHR9IGNhdGNoIChlcnJvcikge1xuXHRcdC8vIFN3YWxsb3dcblx0XHQvLyBYWFggKEBRaXgtKSBzaG91bGQgd2UgYmUgbG9nZ2luZyB0aGVzZT9cblx0fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY29tbW9uJykoZXhwb3J0cyk7XG5cbmNvbnN0IHtmb3JtYXR0ZXJzfSA9IG1vZHVsZS5leHBvcnRzO1xuXG4vKipcbiAqIE1hcCAlaiB0byBgSlNPTi5zdHJpbmdpZnkoKWAsIHNpbmNlIG5vIFdlYiBJbnNwZWN0b3JzIGRvIHRoYXQgYnkgZGVmYXVsdC5cbiAqL1xuXG5mb3JtYXR0ZXJzLmogPSBmdW5jdGlvbiAodikge1xuXHR0cnkge1xuXHRcdHJldHVybiBKU09OLnN0cmluZ2lmeSh2KTtcblx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRyZXR1cm4gJ1tVbmV4cGVjdGVkSlNPTlBhcnNlRXJyb3JdOiAnICsgZXJyb3IubWVzc2FnZTtcblx0fVxufTtcbiIsIlxuLyoqXG4gKiBUaGlzIGlzIHRoZSBjb21tb24gbG9naWMgZm9yIGJvdGggdGhlIE5vZGUuanMgYW5kIHdlYiBicm93c2VyXG4gKiBpbXBsZW1lbnRhdGlvbnMgb2YgYGRlYnVnKClgLlxuICovXG5cbmZ1bmN0aW9uIHNldHVwKGVudikge1xuXHRjcmVhdGVEZWJ1Zy5kZWJ1ZyA9IGNyZWF0ZURlYnVnO1xuXHRjcmVhdGVEZWJ1Zy5kZWZhdWx0ID0gY3JlYXRlRGVidWc7XG5cdGNyZWF0ZURlYnVnLmNvZXJjZSA9IGNvZXJjZTtcblx0Y3JlYXRlRGVidWcuZGlzYWJsZSA9IGRpc2FibGU7XG5cdGNyZWF0ZURlYnVnLmVuYWJsZSA9IGVuYWJsZTtcblx0Y3JlYXRlRGVidWcuZW5hYmxlZCA9IGVuYWJsZWQ7XG5cdGNyZWF0ZURlYnVnLmh1bWFuaXplID0gcmVxdWlyZSgnbXMnKTtcblx0Y3JlYXRlRGVidWcuZGVzdHJveSA9IGRlc3Ryb3k7XG5cblx0T2JqZWN0LmtleXMoZW52KS5mb3JFYWNoKGtleSA9PiB7XG5cdFx0Y3JlYXRlRGVidWdba2V5XSA9IGVudltrZXldO1xuXHR9KTtcblxuXHQvKipcblx0KiBUaGUgY3VycmVudGx5IGFjdGl2ZSBkZWJ1ZyBtb2RlIG5hbWVzLCBhbmQgbmFtZXMgdG8gc2tpcC5cblx0Ki9cblxuXHRjcmVhdGVEZWJ1Zy5uYW1lcyA9IFtdO1xuXHRjcmVhdGVEZWJ1Zy5za2lwcyA9IFtdO1xuXG5cdC8qKlxuXHQqIE1hcCBvZiBzcGVjaWFsIFwiJW5cIiBoYW5kbGluZyBmdW5jdGlvbnMsIGZvciB0aGUgZGVidWcgXCJmb3JtYXRcIiBhcmd1bWVudC5cblx0KlxuXHQqIFZhbGlkIGtleSBuYW1lcyBhcmUgYSBzaW5nbGUsIGxvd2VyIG9yIHVwcGVyLWNhc2UgbGV0dGVyLCBpLmUuIFwiblwiIGFuZCBcIk5cIi5cblx0Ki9cblx0Y3JlYXRlRGVidWcuZm9ybWF0dGVycyA9IHt9O1xuXG5cdC8qKlxuXHQqIFNlbGVjdHMgYSBjb2xvciBmb3IgYSBkZWJ1ZyBuYW1lc3BhY2Vcblx0KiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlIFRoZSBuYW1lc3BhY2Ugc3RyaW5nIGZvciB0aGUgZGVidWcgaW5zdGFuY2UgdG8gYmUgY29sb3JlZFxuXHQqIEByZXR1cm4ge051bWJlcnxTdHJpbmd9IEFuIEFOU0kgY29sb3IgY29kZSBmb3IgdGhlIGdpdmVuIG5hbWVzcGFjZVxuXHQqIEBhcGkgcHJpdmF0ZVxuXHQqL1xuXHRmdW5jdGlvbiBzZWxlY3RDb2xvcihuYW1lc3BhY2UpIHtcblx0XHRsZXQgaGFzaCA9IDA7XG5cblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IG5hbWVzcGFjZS5sZW5ndGg7IGkrKykge1xuXHRcdFx0aGFzaCA9ICgoaGFzaCA8PCA1KSAtIGhhc2gpICsgbmFtZXNwYWNlLmNoYXJDb2RlQXQoaSk7XG5cdFx0XHRoYXNoIHw9IDA7IC8vIENvbnZlcnQgdG8gMzJiaXQgaW50ZWdlclxuXHRcdH1cblxuXHRcdHJldHVybiBjcmVhdGVEZWJ1Zy5jb2xvcnNbTWF0aC5hYnMoaGFzaCkgJSBjcmVhdGVEZWJ1Zy5jb2xvcnMubGVuZ3RoXTtcblx0fVxuXHRjcmVhdGVEZWJ1Zy5zZWxlY3RDb2xvciA9IHNlbGVjdENvbG9yO1xuXG5cdC8qKlxuXHQqIENyZWF0ZSBhIGRlYnVnZ2VyIHdpdGggdGhlIGdpdmVuIGBuYW1lc3BhY2VgLlxuXHQqXG5cdCogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZVxuXHQqIEByZXR1cm4ge0Z1bmN0aW9ufVxuXHQqIEBhcGkgcHVibGljXG5cdCovXG5cdGZ1bmN0aW9uIGNyZWF0ZURlYnVnKG5hbWVzcGFjZSkge1xuXHRcdGxldCBwcmV2VGltZTtcblx0XHRsZXQgZW5hYmxlT3ZlcnJpZGUgPSBudWxsO1xuXHRcdGxldCBuYW1lc3BhY2VzQ2FjaGU7XG5cdFx0bGV0IGVuYWJsZWRDYWNoZTtcblxuXHRcdGZ1bmN0aW9uIGRlYnVnKC4uLmFyZ3MpIHtcblx0XHRcdC8vIERpc2FibGVkP1xuXHRcdFx0aWYgKCFkZWJ1Zy5lbmFibGVkKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Y29uc3Qgc2VsZiA9IGRlYnVnO1xuXG5cdFx0XHQvLyBTZXQgYGRpZmZgIHRpbWVzdGFtcFxuXHRcdFx0Y29uc3QgY3VyciA9IE51bWJlcihuZXcgRGF0ZSgpKTtcblx0XHRcdGNvbnN0IG1zID0gY3VyciAtIChwcmV2VGltZSB8fCBjdXJyKTtcblx0XHRcdHNlbGYuZGlmZiA9IG1zO1xuXHRcdFx0c2VsZi5wcmV2ID0gcHJldlRpbWU7XG5cdFx0XHRzZWxmLmN1cnIgPSBjdXJyO1xuXHRcdFx0cHJldlRpbWUgPSBjdXJyO1xuXG5cdFx0XHRhcmdzWzBdID0gY3JlYXRlRGVidWcuY29lcmNlKGFyZ3NbMF0pO1xuXG5cdFx0XHRpZiAodHlwZW9mIGFyZ3NbMF0gIT09ICdzdHJpbmcnKSB7XG5cdFx0XHRcdC8vIEFueXRoaW5nIGVsc2UgbGV0J3MgaW5zcGVjdCB3aXRoICVPXG5cdFx0XHRcdGFyZ3MudW5zaGlmdCgnJU8nKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQXBwbHkgYW55IGBmb3JtYXR0ZXJzYCB0cmFuc2Zvcm1hdGlvbnNcblx0XHRcdGxldCBpbmRleCA9IDA7XG5cdFx0XHRhcmdzWzBdID0gYXJnc1swXS5yZXBsYWNlKC8lKFthLXpBLVolXSkvZywgKG1hdGNoLCBmb3JtYXQpID0+IHtcblx0XHRcdFx0Ly8gSWYgd2UgZW5jb3VudGVyIGFuIGVzY2FwZWQgJSB0aGVuIGRvbid0IGluY3JlYXNlIHRoZSBhcnJheSBpbmRleFxuXHRcdFx0XHRpZiAobWF0Y2ggPT09ICclJScpIHtcblx0XHRcdFx0XHRyZXR1cm4gJyUnO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGluZGV4Kys7XG5cdFx0XHRcdGNvbnN0IGZvcm1hdHRlciA9IGNyZWF0ZURlYnVnLmZvcm1hdHRlcnNbZm9ybWF0XTtcblx0XHRcdFx0aWYgKHR5cGVvZiBmb3JtYXR0ZXIgPT09ICdmdW5jdGlvbicpIHtcblx0XHRcdFx0XHRjb25zdCB2YWwgPSBhcmdzW2luZGV4XTtcblx0XHRcdFx0XHRtYXRjaCA9IGZvcm1hdHRlci5jYWxsKHNlbGYsIHZhbCk7XG5cblx0XHRcdFx0XHQvLyBOb3cgd2UgbmVlZCB0byByZW1vdmUgYGFyZ3NbaW5kZXhdYCBzaW5jZSBpdCdzIGlubGluZWQgaW4gdGhlIGBmb3JtYXRgXG5cdFx0XHRcdFx0YXJncy5zcGxpY2UoaW5kZXgsIDEpO1xuXHRcdFx0XHRcdGluZGV4LS07XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIG1hdGNoO1xuXHRcdFx0fSk7XG5cblx0XHRcdC8vIEFwcGx5IGVudi1zcGVjaWZpYyBmb3JtYXR0aW5nIChjb2xvcnMsIGV0Yy4pXG5cdFx0XHRjcmVhdGVEZWJ1Zy5mb3JtYXRBcmdzLmNhbGwoc2VsZiwgYXJncyk7XG5cblx0XHRcdGNvbnN0IGxvZ0ZuID0gc2VsZi5sb2cgfHwgY3JlYXRlRGVidWcubG9nO1xuXHRcdFx0bG9nRm4uYXBwbHkoc2VsZiwgYXJncyk7XG5cdFx0fVxuXG5cdFx0ZGVidWcubmFtZXNwYWNlID0gbmFtZXNwYWNlO1xuXHRcdGRlYnVnLnVzZUNvbG9ycyA9IGNyZWF0ZURlYnVnLnVzZUNvbG9ycygpO1xuXHRcdGRlYnVnLmNvbG9yID0gY3JlYXRlRGVidWcuc2VsZWN0Q29sb3IobmFtZXNwYWNlKTtcblx0XHRkZWJ1Zy5leHRlbmQgPSBleHRlbmQ7XG5cdFx0ZGVidWcuZGVzdHJveSA9IGNyZWF0ZURlYnVnLmRlc3Ryb3k7IC8vIFhYWCBUZW1wb3JhcnkuIFdpbGwgYmUgcmVtb3ZlZCBpbiB0aGUgbmV4dCBtYWpvciByZWxlYXNlLlxuXG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGRlYnVnLCAnZW5hYmxlZCcsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRjb25maWd1cmFibGU6IGZhbHNlLFxuXHRcdFx0Z2V0OiAoKSA9PiB7XG5cdFx0XHRcdGlmIChlbmFibGVPdmVycmlkZSAhPT0gbnVsbCkge1xuXHRcdFx0XHRcdHJldHVybiBlbmFibGVPdmVycmlkZTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAobmFtZXNwYWNlc0NhY2hlICE9PSBjcmVhdGVEZWJ1Zy5uYW1lc3BhY2VzKSB7XG5cdFx0XHRcdFx0bmFtZXNwYWNlc0NhY2hlID0gY3JlYXRlRGVidWcubmFtZXNwYWNlcztcblx0XHRcdFx0XHRlbmFibGVkQ2FjaGUgPSBjcmVhdGVEZWJ1Zy5lbmFibGVkKG5hbWVzcGFjZSk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gZW5hYmxlZENhY2hlO1xuXHRcdFx0fSxcblx0XHRcdHNldDogdiA9PiB7XG5cdFx0XHRcdGVuYWJsZU92ZXJyaWRlID0gdjtcblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdC8vIEVudi1zcGVjaWZpYyBpbml0aWFsaXphdGlvbiBsb2dpYyBmb3IgZGVidWcgaW5zdGFuY2VzXG5cdFx0aWYgKHR5cGVvZiBjcmVhdGVEZWJ1Zy5pbml0ID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0XHRjcmVhdGVEZWJ1Zy5pbml0KGRlYnVnKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZGVidWc7XG5cdH1cblxuXHRmdW5jdGlvbiBleHRlbmQobmFtZXNwYWNlLCBkZWxpbWl0ZXIpIHtcblx0XHRjb25zdCBuZXdEZWJ1ZyA9IGNyZWF0ZURlYnVnKHRoaXMubmFtZXNwYWNlICsgKHR5cGVvZiBkZWxpbWl0ZXIgPT09ICd1bmRlZmluZWQnID8gJzonIDogZGVsaW1pdGVyKSArIG5hbWVzcGFjZSk7XG5cdFx0bmV3RGVidWcubG9nID0gdGhpcy5sb2c7XG5cdFx0cmV0dXJuIG5ld0RlYnVnO1xuXHR9XG5cblx0LyoqXG5cdCogRW5hYmxlcyBhIGRlYnVnIG1vZGUgYnkgbmFtZXNwYWNlcy4gVGhpcyBjYW4gaW5jbHVkZSBtb2Rlc1xuXHQqIHNlcGFyYXRlZCBieSBhIGNvbG9uIGFuZCB3aWxkY2FyZHMuXG5cdCpcblx0KiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlc1xuXHQqIEBhcGkgcHVibGljXG5cdCovXG5cdGZ1bmN0aW9uIGVuYWJsZShuYW1lc3BhY2VzKSB7XG5cdFx0Y3JlYXRlRGVidWcuc2F2ZShuYW1lc3BhY2VzKTtcblx0XHRjcmVhdGVEZWJ1Zy5uYW1lc3BhY2VzID0gbmFtZXNwYWNlcztcblxuXHRcdGNyZWF0ZURlYnVnLm5hbWVzID0gW107XG5cdFx0Y3JlYXRlRGVidWcuc2tpcHMgPSBbXTtcblxuXHRcdGxldCBpO1xuXHRcdGNvbnN0IHNwbGl0ID0gKHR5cGVvZiBuYW1lc3BhY2VzID09PSAnc3RyaW5nJyA/IG5hbWVzcGFjZXMgOiAnJykuc3BsaXQoL1tcXHMsXSsvKTtcblx0XHRjb25zdCBsZW4gPSBzcGxpdC5sZW5ndGg7XG5cblx0XHRmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcblx0XHRcdGlmICghc3BsaXRbaV0pIHtcblx0XHRcdFx0Ly8gaWdub3JlIGVtcHR5IHN0cmluZ3Ncblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cblx0XHRcdG5hbWVzcGFjZXMgPSBzcGxpdFtpXS5yZXBsYWNlKC9cXCovZywgJy4qPycpO1xuXG5cdFx0XHRpZiAobmFtZXNwYWNlc1swXSA9PT0gJy0nKSB7XG5cdFx0XHRcdGNyZWF0ZURlYnVnLnNraXBzLnB1c2gobmV3IFJlZ0V4cCgnXicgKyBuYW1lc3BhY2VzLnN1YnN0cigxKSArICckJykpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y3JlYXRlRGVidWcubmFtZXMucHVzaChuZXcgUmVnRXhwKCdeJyArIG5hbWVzcGFjZXMgKyAnJCcpKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvKipcblx0KiBEaXNhYmxlIGRlYnVnIG91dHB1dC5cblx0KlxuXHQqIEByZXR1cm4ge1N0cmluZ30gbmFtZXNwYWNlc1xuXHQqIEBhcGkgcHVibGljXG5cdCovXG5cdGZ1bmN0aW9uIGRpc2FibGUoKSB7XG5cdFx0Y29uc3QgbmFtZXNwYWNlcyA9IFtcblx0XHRcdC4uLmNyZWF0ZURlYnVnLm5hbWVzLm1hcCh0b05hbWVzcGFjZSksXG5cdFx0XHQuLi5jcmVhdGVEZWJ1Zy5za2lwcy5tYXAodG9OYW1lc3BhY2UpLm1hcChuYW1lc3BhY2UgPT4gJy0nICsgbmFtZXNwYWNlKVxuXHRcdF0uam9pbignLCcpO1xuXHRcdGNyZWF0ZURlYnVnLmVuYWJsZSgnJyk7XG5cdFx0cmV0dXJuIG5hbWVzcGFjZXM7XG5cdH1cblxuXHQvKipcblx0KiBSZXR1cm5zIHRydWUgaWYgdGhlIGdpdmVuIG1vZGUgbmFtZSBpcyBlbmFibGVkLCBmYWxzZSBvdGhlcndpc2UuXG5cdCpcblx0KiBAcGFyYW0ge1N0cmluZ30gbmFtZVxuXHQqIEByZXR1cm4ge0Jvb2xlYW59XG5cdCogQGFwaSBwdWJsaWNcblx0Ki9cblx0ZnVuY3Rpb24gZW5hYmxlZChuYW1lKSB7XG5cdFx0aWYgKG5hbWVbbmFtZS5sZW5ndGggLSAxXSA9PT0gJyonKSB7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cblx0XHRsZXQgaTtcblx0XHRsZXQgbGVuO1xuXG5cdFx0Zm9yIChpID0gMCwgbGVuID0gY3JlYXRlRGVidWcuc2tpcHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcblx0XHRcdGlmIChjcmVhdGVEZWJ1Zy5za2lwc1tpXS50ZXN0KG5hbWUpKSB7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRmb3IgKGkgPSAwLCBsZW4gPSBjcmVhdGVEZWJ1Zy5uYW1lcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuXHRcdFx0aWYgKGNyZWF0ZURlYnVnLm5hbWVzW2ldLnRlc3QobmFtZSkpIHtcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0LyoqXG5cdCogQ29udmVydCByZWdleHAgdG8gbmFtZXNwYWNlXG5cdCpcblx0KiBAcGFyYW0ge1JlZ0V4cH0gcmVneGVwXG5cdCogQHJldHVybiB7U3RyaW5nfSBuYW1lc3BhY2Vcblx0KiBAYXBpIHByaXZhdGVcblx0Ki9cblx0ZnVuY3Rpb24gdG9OYW1lc3BhY2UocmVnZXhwKSB7XG5cdFx0cmV0dXJuIHJlZ2V4cC50b1N0cmluZygpXG5cdFx0XHQuc3Vic3RyaW5nKDIsIHJlZ2V4cC50b1N0cmluZygpLmxlbmd0aCAtIDIpXG5cdFx0XHQucmVwbGFjZSgvXFwuXFwqXFw/JC8sICcqJyk7XG5cdH1cblxuXHQvKipcblx0KiBDb2VyY2UgYHZhbGAuXG5cdCpcblx0KiBAcGFyYW0ge01peGVkfSB2YWxcblx0KiBAcmV0dXJuIHtNaXhlZH1cblx0KiBAYXBpIHByaXZhdGVcblx0Ki9cblx0ZnVuY3Rpb24gY29lcmNlKHZhbCkge1xuXHRcdGlmICh2YWwgaW5zdGFuY2VvZiBFcnJvcikge1xuXHRcdFx0cmV0dXJuIHZhbC5zdGFjayB8fCB2YWwubWVzc2FnZTtcblx0XHR9XG5cdFx0cmV0dXJuIHZhbDtcblx0fVxuXG5cdC8qKlxuXHQqIFhYWCBETyBOT1QgVVNFLiBUaGlzIGlzIGEgdGVtcG9yYXJ5IHN0dWIgZnVuY3Rpb24uXG5cdCogWFhYIEl0IFdJTEwgYmUgcmVtb3ZlZCBpbiB0aGUgbmV4dCBtYWpvciByZWxlYXNlLlxuXHQqL1xuXHRmdW5jdGlvbiBkZXN0cm95KCkge1xuXHRcdGNvbnNvbGUud2FybignSW5zdGFuY2UgbWV0aG9kIGBkZWJ1Zy5kZXN0cm95KClgIGlzIGRlcHJlY2F0ZWQgYW5kIG5vIGxvbmdlciBkb2VzIGFueXRoaW5nLiBJdCB3aWxsIGJlIHJlbW92ZWQgaW4gdGhlIG5leHQgbWFqb3IgdmVyc2lvbiBvZiBgZGVidWdgLicpO1xuXHR9XG5cblx0Y3JlYXRlRGVidWcuZW5hYmxlKGNyZWF0ZURlYnVnLmxvYWQoKSk7XG5cblx0cmV0dXJuIGNyZWF0ZURlYnVnO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNldHVwO1xuIiwiaWYgKHR5cGVvZiBPYmplY3QuY3JlYXRlID09PSAnZnVuY3Rpb24nKSB7XG4gIC8vIGltcGxlbWVudGF0aW9uIGZyb20gc3RhbmRhcmQgbm9kZS5qcyAndXRpbCcgbW9kdWxlXG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaW5oZXJpdHMoY3Rvciwgc3VwZXJDdG9yKSB7XG4gICAgaWYgKHN1cGVyQ3Rvcikge1xuICAgICAgY3Rvci5zdXBlcl8gPSBzdXBlckN0b3JcbiAgICAgIGN0b3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckN0b3IucHJvdG90eXBlLCB7XG4gICAgICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICAgICAgdmFsdWU6IGN0b3IsXG4gICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfVxuICB9O1xufSBlbHNlIHtcbiAgLy8gb2xkIHNjaG9vbCBzaGltIGZvciBvbGQgYnJvd3NlcnNcbiAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpbmhlcml0cyhjdG9yLCBzdXBlckN0b3IpIHtcbiAgICBpZiAoc3VwZXJDdG9yKSB7XG4gICAgICBjdG9yLnN1cGVyXyA9IHN1cGVyQ3RvclxuICAgICAgdmFyIFRlbXBDdG9yID0gZnVuY3Rpb24gKCkge31cbiAgICAgIFRlbXBDdG9yLnByb3RvdHlwZSA9IHN1cGVyQ3Rvci5wcm90b3R5cGVcbiAgICAgIGN0b3IucHJvdG90eXBlID0gbmV3IFRlbXBDdG9yKClcbiAgICAgIGN0b3IucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gY3RvclxuICAgIH1cbiAgfVxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaGFzID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eVxuICAsIHVuZGVmO1xuXG4vKipcbiAqIERlY29kZSBhIFVSSSBlbmNvZGVkIHN0cmluZy5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gaW5wdXQgVGhlIFVSSSBlbmNvZGVkIHN0cmluZy5cbiAqIEByZXR1cm5zIHtTdHJpbmd8TnVsbH0gVGhlIGRlY29kZWQgc3RyaW5nLlxuICogQGFwaSBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGRlY29kZShpbnB1dCkge1xuICB0cnkge1xuICAgIHJldHVybiBkZWNvZGVVUklDb21wb25lbnQoaW5wdXQucmVwbGFjZSgvXFwrL2csICcgJykpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn1cblxuLyoqXG4gKiBBdHRlbXB0cyB0byBlbmNvZGUgYSBnaXZlbiBpbnB1dC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gaW5wdXQgVGhlIHN0cmluZyB0aGF0IG5lZWRzIHRvIGJlIGVuY29kZWQuXG4gKiBAcmV0dXJucyB7U3RyaW5nfE51bGx9IFRoZSBlbmNvZGVkIHN0cmluZy5cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBlbmNvZGUoaW5wdXQpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KGlucHV0KTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG59XG5cbi8qKlxuICogU2ltcGxlIHF1ZXJ5IHN0cmluZyBwYXJzZXIuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHF1ZXJ5IFRoZSBxdWVyeSBzdHJpbmcgdGhhdCBuZWVkcyB0byBiZSBwYXJzZWQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fVxuICogQGFwaSBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gcXVlcnlzdHJpbmcocXVlcnkpIHtcbiAgdmFyIHBhcnNlciA9IC8oW149PyZdKyk9PyhbXiZdKikvZ1xuICAgICwgcmVzdWx0ID0ge31cbiAgICAsIHBhcnQ7XG5cbiAgd2hpbGUgKHBhcnQgPSBwYXJzZXIuZXhlYyhxdWVyeSkpIHtcbiAgICB2YXIga2V5ID0gZGVjb2RlKHBhcnRbMV0pXG4gICAgICAsIHZhbHVlID0gZGVjb2RlKHBhcnRbMl0pO1xuXG4gICAgLy9cbiAgICAvLyBQcmV2ZW50IG92ZXJyaWRpbmcgb2YgZXhpc3RpbmcgcHJvcGVydGllcy4gVGhpcyBlbnN1cmVzIHRoYXQgYnVpbGQtaW5cbiAgICAvLyBtZXRob2RzIGxpa2UgYHRvU3RyaW5nYCBvciBfX3Byb3RvX18gYXJlIG5vdCBvdmVycmlkZW4gYnkgbWFsaWNpb3VzXG4gICAgLy8gcXVlcnlzdHJpbmdzLlxuICAgIC8vXG4gICAgLy8gSW4gdGhlIGNhc2UgaWYgZmFpbGVkIGRlY29kaW5nLCB3ZSB3YW50IHRvIG9taXQgdGhlIGtleS92YWx1ZSBwYWlyc1xuICAgIC8vIGZyb20gdGhlIHJlc3VsdC5cbiAgICAvL1xuICAgIGlmIChrZXkgPT09IG51bGwgfHwgdmFsdWUgPT09IG51bGwgfHwga2V5IGluIHJlc3VsdCkgY29udGludWU7XG4gICAgcmVzdWx0W2tleV0gPSB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogVHJhbnNmb3JtIGEgcXVlcnkgc3RyaW5nIHRvIGFuIG9iamVjdC5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqIE9iamVjdCB0aGF0IHNob3VsZCBiZSB0cmFuc2Zvcm1lZC5cbiAqIEBwYXJhbSB7U3RyaW5nfSBwcmVmaXggT3B0aW9uYWwgcHJlZml4LlxuICogQHJldHVybnMge1N0cmluZ31cbiAqIEBhcGkgcHVibGljXG4gKi9cbmZ1bmN0aW9uIHF1ZXJ5c3RyaW5naWZ5KG9iaiwgcHJlZml4KSB7XG4gIHByZWZpeCA9IHByZWZpeCB8fCAnJztcblxuICB2YXIgcGFpcnMgPSBbXVxuICAgICwgdmFsdWVcbiAgICAsIGtleTtcblxuICAvL1xuICAvLyBPcHRpb25hbGx5IHByZWZpeCB3aXRoIGEgJz8nIGlmIG5lZWRlZFxuICAvL1xuICBpZiAoJ3N0cmluZycgIT09IHR5cGVvZiBwcmVmaXgpIHByZWZpeCA9ICc/JztcblxuICBmb3IgKGtleSBpbiBvYmopIHtcbiAgICBpZiAoaGFzLmNhbGwob2JqLCBrZXkpKSB7XG4gICAgICB2YWx1ZSA9IG9ialtrZXldO1xuXG4gICAgICAvL1xuICAgICAgLy8gRWRnZSBjYXNlcyB3aGVyZSB3ZSBhY3R1YWxseSB3YW50IHRvIGVuY29kZSB0aGUgdmFsdWUgdG8gYW4gZW1wdHlcbiAgICAgIC8vIHN0cmluZyBpbnN0ZWFkIG9mIHRoZSBzdHJpbmdpZmllZCB2YWx1ZS5cbiAgICAgIC8vXG4gICAgICBpZiAoIXZhbHVlICYmICh2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdW5kZWYgfHwgaXNOYU4odmFsdWUpKSkge1xuICAgICAgICB2YWx1ZSA9ICcnO1xuICAgICAgfVxuXG4gICAgICBrZXkgPSBlbmNvZGVVUklDb21wb25lbnQoa2V5KTtcbiAgICAgIHZhbHVlID0gZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKTtcblxuICAgICAgLy9cbiAgICAgIC8vIElmIHdlIGZhaWxlZCB0byBlbmNvZGUgdGhlIHN0cmluZ3MsIHdlIHNob3VsZCBiYWlsIG91dCBhcyB3ZSBkb24ndFxuICAgICAgLy8gd2FudCB0byBhZGQgaW52YWxpZCBzdHJpbmdzIHRvIHRoZSBxdWVyeS5cbiAgICAgIC8vXG4gICAgICBpZiAoa2V5ID09PSBudWxsIHx8IHZhbHVlID09PSBudWxsKSBjb250aW51ZTtcbiAgICAgIHBhaXJzLnB1c2goa2V5ICsnPScrIHZhbHVlKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcGFpcnMubGVuZ3RoID8gcHJlZml4ICsgcGFpcnMuam9pbignJicpIDogJyc7XG59XG5cbi8vXG4vLyBFeHBvc2UgdGhlIG1vZHVsZS5cbi8vXG5leHBvcnRzLnN0cmluZ2lmeSA9IHF1ZXJ5c3RyaW5naWZ5O1xuZXhwb3J0cy5wYXJzZSA9IHF1ZXJ5c3RyaW5nO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENoZWNrIGlmIHdlJ3JlIHJlcXVpcmVkIHRvIGFkZCBhIHBvcnQgbnVtYmVyLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkZWZhdWx0LXBvcnRcbiAqIEBwYXJhbSB7TnVtYmVyfFN0cmluZ30gcG9ydCBQb3J0IG51bWJlciB3ZSBuZWVkIHRvIGNoZWNrXG4gKiBAcGFyYW0ge1N0cmluZ30gcHJvdG9jb2wgUHJvdG9jb2wgd2UgbmVlZCB0byBjaGVjayBhZ2FpbnN0LlxuICogQHJldHVybnMge0Jvb2xlYW59IElzIGl0IGEgZGVmYXVsdCBwb3J0IGZvciB0aGUgZ2l2ZW4gcHJvdG9jb2xcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHJlcXVpcmVkKHBvcnQsIHByb3RvY29sKSB7XG4gIHByb3RvY29sID0gcHJvdG9jb2wuc3BsaXQoJzonKVswXTtcbiAgcG9ydCA9ICtwb3J0O1xuXG4gIGlmICghcG9ydCkgcmV0dXJuIGZhbHNlO1xuXG4gIHN3aXRjaCAocHJvdG9jb2wpIHtcbiAgICBjYXNlICdodHRwJzpcbiAgICBjYXNlICd3cyc6XG4gICAgcmV0dXJuIHBvcnQgIT09IDgwO1xuXG4gICAgY2FzZSAnaHR0cHMnOlxuICAgIGNhc2UgJ3dzcyc6XG4gICAgcmV0dXJuIHBvcnQgIT09IDQ0MztcblxuICAgIGNhc2UgJ2Z0cCc6XG4gICAgcmV0dXJuIHBvcnQgIT09IDIxO1xuXG4gICAgY2FzZSAnZ29waGVyJzpcbiAgICByZXR1cm4gcG9ydCAhPT0gNzA7XG5cbiAgICBjYXNlICdmaWxlJzpcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gcG9ydCAhPT0gMDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciByZXF1aXJlZCA9IHJlcXVpcmUoJ3JlcXVpcmVzLXBvcnQnKVxuICAsIHFzID0gcmVxdWlyZSgncXVlcnlzdHJpbmdpZnknKVxuICAsIGNvbnRyb2xPcldoaXRlc3BhY2UgPSAvXltcXHgwMC1cXHgyMFxcdTAwYTBcXHUxNjgwXFx1MjAwMC1cXHUyMDBhXFx1MjAyOFxcdTIwMjlcXHUyMDJmXFx1MjA1ZlxcdTMwMDBcXHVmZWZmXSsvXG4gICwgQ1JIVExGID0gL1tcXG5cXHJcXHRdL2dcbiAgLCBzbGFzaGVzID0gL15bQS1aYS16XVtBLVphLXowLTkrLS5dKjpcXC9cXC8vXG4gICwgcG9ydCA9IC86XFxkKyQvXG4gICwgcHJvdG9jb2xyZSA9IC9eKFthLXpdW2EtejAtOS4rLV0qOik/KFxcL1xcLyk/KFtcXFxcL10rKT8oW1xcU1xcc10qKS9pXG4gICwgd2luZG93c0RyaXZlTGV0dGVyID0gL15bYS16QS1aXTovO1xuXG4vKipcbiAqIFJlbW92ZSBjb250cm9sIGNoYXJhY3RlcnMgYW5kIHdoaXRlc3BhY2UgZnJvbSB0aGUgYmVnaW5uaW5nIG9mIGEgc3RyaW5nLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fFN0cmluZ30gc3RyIFN0cmluZyB0byB0cmltLlxuICogQHJldHVybnMge1N0cmluZ30gQSBuZXcgc3RyaW5nIHJlcHJlc2VudGluZyBgc3RyYCBzdHJpcHBlZCBvZiBjb250cm9sXG4gKiAgICAgY2hhcmFjdGVycyBhbmQgd2hpdGVzcGFjZSBmcm9tIGl0cyBiZWdpbm5pbmcuXG4gKiBAcHVibGljXG4gKi9cbmZ1bmN0aW9uIHRyaW1MZWZ0KHN0cikge1xuICByZXR1cm4gKHN0ciA/IHN0ciA6ICcnKS50b1N0cmluZygpLnJlcGxhY2UoY29udHJvbE9yV2hpdGVzcGFjZSwgJycpO1xufVxuXG4vKipcbiAqIFRoZXNlIGFyZSB0aGUgcGFyc2UgcnVsZXMgZm9yIHRoZSBVUkwgcGFyc2VyLCBpdCBpbmZvcm1zIHRoZSBwYXJzZXJcbiAqIGFib3V0OlxuICpcbiAqIDAuIFRoZSBjaGFyIGl0IE5lZWRzIHRvIHBhcnNlLCBpZiBpdCdzIGEgc3RyaW5nIGl0IHNob3VsZCBiZSBkb25lIHVzaW5nXG4gKiAgICBpbmRleE9mLCBSZWdFeHAgdXNpbmcgZXhlYyBhbmQgTmFOIG1lYW5zIHNldCBhcyBjdXJyZW50IHZhbHVlLlxuICogMS4gVGhlIHByb3BlcnR5IHdlIHNob3VsZCBzZXQgd2hlbiBwYXJzaW5nIHRoaXMgdmFsdWUuXG4gKiAyLiBJbmRpY2F0aW9uIGlmIGl0J3MgYmFja3dhcmRzIG9yIGZvcndhcmQgcGFyc2luZywgd2hlbiBzZXQgYXMgbnVtYmVyIGl0J3NcbiAqICAgIHRoZSB2YWx1ZSBvZiBleHRyYSBjaGFycyB0aGF0IHNob3VsZCBiZSBzcGxpdCBvZmYuXG4gKiAzLiBJbmhlcml0IGZyb20gbG9jYXRpb24gaWYgbm9uIGV4aXN0aW5nIGluIHRoZSBwYXJzZXIuXG4gKiA0LiBgdG9Mb3dlckNhc2VgIHRoZSByZXN1bHRpbmcgdmFsdWUuXG4gKi9cbnZhciBydWxlcyA9IFtcbiAgWycjJywgJ2hhc2gnXSwgICAgICAgICAgICAgICAgICAgICAgICAvLyBFeHRyYWN0IGZyb20gdGhlIGJhY2suXG4gIFsnPycsICdxdWVyeSddLCAgICAgICAgICAgICAgICAgICAgICAgLy8gRXh0cmFjdCBmcm9tIHRoZSBiYWNrLlxuICBmdW5jdGlvbiBzYW5pdGl6ZShhZGRyZXNzLCB1cmwpIHsgICAgIC8vIFNhbml0aXplIHdoYXQgaXMgbGVmdCBvZiB0aGUgYWRkcmVzc1xuICAgIHJldHVybiBpc1NwZWNpYWwodXJsLnByb3RvY29sKSA/IGFkZHJlc3MucmVwbGFjZSgvXFxcXC9nLCAnLycpIDogYWRkcmVzcztcbiAgfSxcbiAgWycvJywgJ3BhdGhuYW1lJ10sICAgICAgICAgICAgICAgICAgICAvLyBFeHRyYWN0IGZyb20gdGhlIGJhY2suXG4gIFsnQCcsICdhdXRoJywgMV0sICAgICAgICAgICAgICAgICAgICAgLy8gRXh0cmFjdCBmcm9tIHRoZSBmcm9udC5cbiAgW05hTiwgJ2hvc3QnLCB1bmRlZmluZWQsIDEsIDFdLCAgICAgICAvLyBTZXQgbGVmdCBvdmVyIHZhbHVlLlxuICBbLzooXFxkKikkLywgJ3BvcnQnLCB1bmRlZmluZWQsIDFdLCAgICAvLyBSZWdFeHAgdGhlIGJhY2suXG4gIFtOYU4sICdob3N0bmFtZScsIHVuZGVmaW5lZCwgMSwgMV0gICAgLy8gU2V0IGxlZnQgb3Zlci5cbl07XG5cbi8qKlxuICogVGhlc2UgcHJvcGVydGllcyBzaG91bGQgbm90IGJlIGNvcGllZCBvciBpbmhlcml0ZWQgZnJvbS4gVGhpcyBpcyBvbmx5IG5lZWRlZFxuICogZm9yIGFsbCBub24gYmxvYiBVUkwncyBhcyBhIGJsb2IgVVJMIGRvZXMgbm90IGluY2x1ZGUgYSBoYXNoLCBvbmx5IHRoZVxuICogb3JpZ2luLlxuICpcbiAqIEB0eXBlIHtPYmplY3R9XG4gKiBAcHJpdmF0ZVxuICovXG52YXIgaWdub3JlID0geyBoYXNoOiAxLCBxdWVyeTogMSB9O1xuXG4vKipcbiAqIFRoZSBsb2NhdGlvbiBvYmplY3QgZGlmZmVycyB3aGVuIHlvdXIgY29kZSBpcyBsb2FkZWQgdGhyb3VnaCBhIG5vcm1hbCBwYWdlLFxuICogV29ya2VyIG9yIHRocm91Z2ggYSB3b3JrZXIgdXNpbmcgYSBibG9iLiBBbmQgd2l0aCB0aGUgYmxvYmJsZSBiZWdpbnMgdGhlXG4gKiB0cm91YmxlIGFzIHRoZSBsb2NhdGlvbiBvYmplY3Qgd2lsbCBjb250YWluIHRoZSBVUkwgb2YgdGhlIGJsb2IsIG5vdCB0aGVcbiAqIGxvY2F0aW9uIG9mIHRoZSBwYWdlIHdoZXJlIG91ciBjb2RlIGlzIGxvYWRlZCBpbi4gVGhlIGFjdHVhbCBvcmlnaW4gaXNcbiAqIGVuY29kZWQgaW4gdGhlIGBwYXRobmFtZWAgc28gd2UgY2FuIHRoYW5rZnVsbHkgZ2VuZXJhdGUgYSBnb29kIFwiZGVmYXVsdFwiXG4gKiBsb2NhdGlvbiBmcm9tIGl0IHNvIHdlIGNhbiBnZW5lcmF0ZSBwcm9wZXIgcmVsYXRpdmUgVVJMJ3MgYWdhaW4uXG4gKlxuICogQHBhcmFtIHtPYmplY3R8U3RyaW5nfSBsb2MgT3B0aW9uYWwgZGVmYXVsdCBsb2NhdGlvbiBvYmplY3QuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBsb2xjYXRpb24gb2JqZWN0LlxuICogQHB1YmxpY1xuICovXG5mdW5jdGlvbiBsb2xjYXRpb24obG9jKSB7XG4gIHZhciBnbG9iYWxWYXI7XG5cbiAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSBnbG9iYWxWYXIgPSB3aW5kb3c7XG4gIGVsc2UgaWYgKHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnKSBnbG9iYWxWYXIgPSBnbG9iYWw7XG4gIGVsc2UgaWYgKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJykgZ2xvYmFsVmFyID0gc2VsZjtcbiAgZWxzZSBnbG9iYWxWYXIgPSB7fTtcblxuICB2YXIgbG9jYXRpb24gPSBnbG9iYWxWYXIubG9jYXRpb24gfHwge307XG4gIGxvYyA9IGxvYyB8fCBsb2NhdGlvbjtcblxuICB2YXIgZmluYWxkZXN0aW5hdGlvbiA9IHt9XG4gICAgLCB0eXBlID0gdHlwZW9mIGxvY1xuICAgICwga2V5O1xuXG4gIGlmICgnYmxvYjonID09PSBsb2MucHJvdG9jb2wpIHtcbiAgICBmaW5hbGRlc3RpbmF0aW9uID0gbmV3IFVybCh1bmVzY2FwZShsb2MucGF0aG5hbWUpLCB7fSk7XG4gIH0gZWxzZSBpZiAoJ3N0cmluZycgPT09IHR5cGUpIHtcbiAgICBmaW5hbGRlc3RpbmF0aW9uID0gbmV3IFVybChsb2MsIHt9KTtcbiAgICBmb3IgKGtleSBpbiBpZ25vcmUpIGRlbGV0ZSBmaW5hbGRlc3RpbmF0aW9uW2tleV07XG4gIH0gZWxzZSBpZiAoJ29iamVjdCcgPT09IHR5cGUpIHtcbiAgICBmb3IgKGtleSBpbiBsb2MpIHtcbiAgICAgIGlmIChrZXkgaW4gaWdub3JlKSBjb250aW51ZTtcbiAgICAgIGZpbmFsZGVzdGluYXRpb25ba2V5XSA9IGxvY1trZXldO1xuICAgIH1cblxuICAgIGlmIChmaW5hbGRlc3RpbmF0aW9uLnNsYXNoZXMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgZmluYWxkZXN0aW5hdGlvbi5zbGFzaGVzID0gc2xhc2hlcy50ZXN0KGxvYy5ocmVmKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmluYWxkZXN0aW5hdGlvbjtcbn1cblxuLyoqXG4gKiBDaGVjayB3aGV0aGVyIGEgcHJvdG9jb2wgc2NoZW1lIGlzIHNwZWNpYWwuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IFRoZSBwcm90b2NvbCBzY2hlbWUgb2YgdGhlIFVSTFxuICogQHJldHVybiB7Qm9vbGVhbn0gYHRydWVgIGlmIHRoZSBwcm90b2NvbCBzY2hlbWUgaXMgc3BlY2lhbCwgZWxzZSBgZmFsc2VgXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBpc1NwZWNpYWwoc2NoZW1lKSB7XG4gIHJldHVybiAoXG4gICAgc2NoZW1lID09PSAnZmlsZTonIHx8XG4gICAgc2NoZW1lID09PSAnZnRwOicgfHxcbiAgICBzY2hlbWUgPT09ICdodHRwOicgfHxcbiAgICBzY2hlbWUgPT09ICdodHRwczonIHx8XG4gICAgc2NoZW1lID09PSAnd3M6JyB8fFxuICAgIHNjaGVtZSA9PT0gJ3dzczonXG4gICk7XG59XG5cbi8qKlxuICogQHR5cGVkZWYgUHJvdG9jb2xFeHRyYWN0XG4gKiBAdHlwZSBPYmplY3RcbiAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBwcm90b2NvbCBQcm90b2NvbCBtYXRjaGVkIGluIHRoZSBVUkwsIGluIGxvd2VyY2FzZS5cbiAqIEBwcm9wZXJ0eSB7Qm9vbGVhbn0gc2xhc2hlcyBgdHJ1ZWAgaWYgcHJvdG9jb2wgaXMgZm9sbG93ZWQgYnkgXCIvL1wiLCBlbHNlIGBmYWxzZWAuXG4gKiBAcHJvcGVydHkge1N0cmluZ30gcmVzdCBSZXN0IG9mIHRoZSBVUkwgdGhhdCBpcyBub3QgcGFydCBvZiB0aGUgcHJvdG9jb2wuXG4gKi9cblxuLyoqXG4gKiBFeHRyYWN0IHByb3RvY29sIGluZm9ybWF0aW9uIGZyb20gYSBVUkwgd2l0aC93aXRob3V0IGRvdWJsZSBzbGFzaCAoXCIvL1wiKS5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gYWRkcmVzcyBVUkwgd2Ugd2FudCB0byBleHRyYWN0IGZyb20uXG4gKiBAcGFyYW0ge09iamVjdH0gbG9jYXRpb25cbiAqIEByZXR1cm4ge1Byb3RvY29sRXh0cmFjdH0gRXh0cmFjdGVkIGluZm9ybWF0aW9uLlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gZXh0cmFjdFByb3RvY29sKGFkZHJlc3MsIGxvY2F0aW9uKSB7XG4gIGFkZHJlc3MgPSB0cmltTGVmdChhZGRyZXNzKTtcbiAgYWRkcmVzcyA9IGFkZHJlc3MucmVwbGFjZShDUkhUTEYsICcnKTtcbiAgbG9jYXRpb24gPSBsb2NhdGlvbiB8fCB7fTtcblxuICB2YXIgbWF0Y2ggPSBwcm90b2NvbHJlLmV4ZWMoYWRkcmVzcyk7XG4gIHZhciBwcm90b2NvbCA9IG1hdGNoWzFdID8gbWF0Y2hbMV0udG9Mb3dlckNhc2UoKSA6ICcnO1xuICB2YXIgZm9yd2FyZFNsYXNoZXMgPSAhIW1hdGNoWzJdO1xuICB2YXIgb3RoZXJTbGFzaGVzID0gISFtYXRjaFszXTtcbiAgdmFyIHNsYXNoZXNDb3VudCA9IDA7XG4gIHZhciByZXN0O1xuXG4gIGlmIChmb3J3YXJkU2xhc2hlcykge1xuICAgIGlmIChvdGhlclNsYXNoZXMpIHtcbiAgICAgIHJlc3QgPSBtYXRjaFsyXSArIG1hdGNoWzNdICsgbWF0Y2hbNF07XG4gICAgICBzbGFzaGVzQ291bnQgPSBtYXRjaFsyXS5sZW5ndGggKyBtYXRjaFszXS5sZW5ndGg7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3QgPSBtYXRjaFsyXSArIG1hdGNoWzRdO1xuICAgICAgc2xhc2hlc0NvdW50ID0gbWF0Y2hbMl0ubGVuZ3RoO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAob3RoZXJTbGFzaGVzKSB7XG4gICAgICByZXN0ID0gbWF0Y2hbM10gKyBtYXRjaFs0XTtcbiAgICAgIHNsYXNoZXNDb3VudCA9IG1hdGNoWzNdLmxlbmd0aDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdCA9IG1hdGNoWzRdXG4gICAgfVxuICB9XG5cbiAgaWYgKHByb3RvY29sID09PSAnZmlsZTonKSB7XG4gICAgaWYgKHNsYXNoZXNDb3VudCA+PSAyKSB7XG4gICAgICByZXN0ID0gcmVzdC5zbGljZSgyKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoaXNTcGVjaWFsKHByb3RvY29sKSkge1xuICAgIHJlc3QgPSBtYXRjaFs0XTtcbiAgfSBlbHNlIGlmIChwcm90b2NvbCkge1xuICAgIGlmIChmb3J3YXJkU2xhc2hlcykge1xuICAgICAgcmVzdCA9IHJlc3Quc2xpY2UoMik7XG4gICAgfVxuICB9IGVsc2UgaWYgKHNsYXNoZXNDb3VudCA+PSAyICYmIGlzU3BlY2lhbChsb2NhdGlvbi5wcm90b2NvbCkpIHtcbiAgICByZXN0ID0gbWF0Y2hbNF07XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHByb3RvY29sOiBwcm90b2NvbCxcbiAgICBzbGFzaGVzOiBmb3J3YXJkU2xhc2hlcyB8fCBpc1NwZWNpYWwocHJvdG9jb2wpLFxuICAgIHNsYXNoZXNDb3VudDogc2xhc2hlc0NvdW50LFxuICAgIHJlc3Q6IHJlc3RcbiAgfTtcbn1cblxuLyoqXG4gKiBSZXNvbHZlIGEgcmVsYXRpdmUgVVJMIHBhdGhuYW1lIGFnYWluc3QgYSBiYXNlIFVSTCBwYXRobmFtZS5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gcmVsYXRpdmUgUGF0aG5hbWUgb2YgdGhlIHJlbGF0aXZlIFVSTC5cbiAqIEBwYXJhbSB7U3RyaW5nfSBiYXNlIFBhdGhuYW1lIG9mIHRoZSBiYXNlIFVSTC5cbiAqIEByZXR1cm4ge1N0cmluZ30gUmVzb2x2ZWQgcGF0aG5hbWUuXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiByZXNvbHZlKHJlbGF0aXZlLCBiYXNlKSB7XG4gIGlmIChyZWxhdGl2ZSA9PT0gJycpIHJldHVybiBiYXNlO1xuXG4gIHZhciBwYXRoID0gKGJhc2UgfHwgJy8nKS5zcGxpdCgnLycpLnNsaWNlKDAsIC0xKS5jb25jYXQocmVsYXRpdmUuc3BsaXQoJy8nKSlcbiAgICAsIGkgPSBwYXRoLmxlbmd0aFxuICAgICwgbGFzdCA9IHBhdGhbaSAtIDFdXG4gICAgLCB1bnNoaWZ0ID0gZmFsc2VcbiAgICAsIHVwID0gMDtcblxuICB3aGlsZSAoaS0tKSB7XG4gICAgaWYgKHBhdGhbaV0gPT09ICcuJykge1xuICAgICAgcGF0aC5zcGxpY2UoaSwgMSk7XG4gICAgfSBlbHNlIGlmIChwYXRoW2ldID09PSAnLi4nKSB7XG4gICAgICBwYXRoLnNwbGljZShpLCAxKTtcbiAgICAgIHVwKys7XG4gICAgfSBlbHNlIGlmICh1cCkge1xuICAgICAgaWYgKGkgPT09IDApIHVuc2hpZnQgPSB0cnVlO1xuICAgICAgcGF0aC5zcGxpY2UoaSwgMSk7XG4gICAgICB1cC0tO1xuICAgIH1cbiAgfVxuXG4gIGlmICh1bnNoaWZ0KSBwYXRoLnVuc2hpZnQoJycpO1xuICBpZiAobGFzdCA9PT0gJy4nIHx8IGxhc3QgPT09ICcuLicpIHBhdGgucHVzaCgnJyk7XG5cbiAgcmV0dXJuIHBhdGguam9pbignLycpO1xufVxuXG4vKipcbiAqIFRoZSBhY3R1YWwgVVJMIGluc3RhbmNlLiBJbnN0ZWFkIG9mIHJldHVybmluZyBhbiBvYmplY3Qgd2UndmUgb3B0ZWQtaW4gdG9cbiAqIGNyZWF0ZSBhbiBhY3R1YWwgY29uc3RydWN0b3IgYXMgaXQncyBtdWNoIG1vcmUgbWVtb3J5IGVmZmljaWVudCBhbmRcbiAqIGZhc3RlciBhbmQgaXQgcGxlYXNlcyBteSBPQ0QuXG4gKlxuICogSXQgaXMgd29ydGggbm90aW5nIHRoYXQgd2Ugc2hvdWxkIG5vdCB1c2UgYFVSTGAgYXMgY2xhc3MgbmFtZSB0byBwcmV2ZW50XG4gKiBjbGFzaGVzIHdpdGggdGhlIGdsb2JhbCBVUkwgaW5zdGFuY2UgdGhhdCBnb3QgaW50cm9kdWNlZCBpbiBicm93c2Vycy5cbiAqXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7U3RyaW5nfSBhZGRyZXNzIFVSTCB3ZSB3YW50IHRvIHBhcnNlLlxuICogQHBhcmFtIHtPYmplY3R8U3RyaW5nfSBbbG9jYXRpb25dIExvY2F0aW9uIGRlZmF1bHRzIGZvciByZWxhdGl2ZSBwYXRocy5cbiAqIEBwYXJhbSB7Qm9vbGVhbnxGdW5jdGlvbn0gW3BhcnNlcl0gUGFyc2VyIGZvciB0aGUgcXVlcnkgc3RyaW5nLlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gVXJsKGFkZHJlc3MsIGxvY2F0aW9uLCBwYXJzZXIpIHtcbiAgYWRkcmVzcyA9IHRyaW1MZWZ0KGFkZHJlc3MpO1xuICBhZGRyZXNzID0gYWRkcmVzcy5yZXBsYWNlKENSSFRMRiwgJycpO1xuXG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBVcmwpKSB7XG4gICAgcmV0dXJuIG5ldyBVcmwoYWRkcmVzcywgbG9jYXRpb24sIHBhcnNlcik7XG4gIH1cblxuICB2YXIgcmVsYXRpdmUsIGV4dHJhY3RlZCwgcGFyc2UsIGluc3RydWN0aW9uLCBpbmRleCwga2V5XG4gICAgLCBpbnN0cnVjdGlvbnMgPSBydWxlcy5zbGljZSgpXG4gICAgLCB0eXBlID0gdHlwZW9mIGxvY2F0aW9uXG4gICAgLCB1cmwgPSB0aGlzXG4gICAgLCBpID0gMDtcblxuICAvL1xuICAvLyBUaGUgZm9sbG93aW5nIGlmIHN0YXRlbWVudHMgYWxsb3dzIHRoaXMgbW9kdWxlIHR3byBoYXZlIGNvbXBhdGliaWxpdHkgd2l0aFxuICAvLyAyIGRpZmZlcmVudCBBUEk6XG4gIC8vXG4gIC8vIDEuIE5vZGUuanMncyBgdXJsLnBhcnNlYCBhcGkgd2hpY2ggYWNjZXB0cyBhIFVSTCwgYm9vbGVhbiBhcyBhcmd1bWVudHNcbiAgLy8gICAgd2hlcmUgdGhlIGJvb2xlYW4gaW5kaWNhdGVzIHRoYXQgdGhlIHF1ZXJ5IHN0cmluZyBzaG91bGQgYWxzbyBiZSBwYXJzZWQuXG4gIC8vXG4gIC8vIDIuIFRoZSBgVVJMYCBpbnRlcmZhY2Ugb2YgdGhlIGJyb3dzZXIgd2hpY2ggYWNjZXB0cyBhIFVSTCwgb2JqZWN0IGFzXG4gIC8vICAgIGFyZ3VtZW50cy4gVGhlIHN1cHBsaWVkIG9iamVjdCB3aWxsIGJlIHVzZWQgYXMgZGVmYXVsdCB2YWx1ZXMgLyBmYWxsLWJhY2tcbiAgLy8gICAgZm9yIHJlbGF0aXZlIHBhdGhzLlxuICAvL1xuICBpZiAoJ29iamVjdCcgIT09IHR5cGUgJiYgJ3N0cmluZycgIT09IHR5cGUpIHtcbiAgICBwYXJzZXIgPSBsb2NhdGlvbjtcbiAgICBsb2NhdGlvbiA9IG51bGw7XG4gIH1cblxuICBpZiAocGFyc2VyICYmICdmdW5jdGlvbicgIT09IHR5cGVvZiBwYXJzZXIpIHBhcnNlciA9IHFzLnBhcnNlO1xuXG4gIGxvY2F0aW9uID0gbG9sY2F0aW9uKGxvY2F0aW9uKTtcblxuICAvL1xuICAvLyBFeHRyYWN0IHByb3RvY29sIGluZm9ybWF0aW9uIGJlZm9yZSBydW5uaW5nIHRoZSBpbnN0cnVjdGlvbnMuXG4gIC8vXG4gIGV4dHJhY3RlZCA9IGV4dHJhY3RQcm90b2NvbChhZGRyZXNzIHx8ICcnLCBsb2NhdGlvbik7XG4gIHJlbGF0aXZlID0gIWV4dHJhY3RlZC5wcm90b2NvbCAmJiAhZXh0cmFjdGVkLnNsYXNoZXM7XG4gIHVybC5zbGFzaGVzID0gZXh0cmFjdGVkLnNsYXNoZXMgfHwgcmVsYXRpdmUgJiYgbG9jYXRpb24uc2xhc2hlcztcbiAgdXJsLnByb3RvY29sID0gZXh0cmFjdGVkLnByb3RvY29sIHx8IGxvY2F0aW9uLnByb3RvY29sIHx8ICcnO1xuICBhZGRyZXNzID0gZXh0cmFjdGVkLnJlc3Q7XG5cbiAgLy9cbiAgLy8gV2hlbiB0aGUgYXV0aG9yaXR5IGNvbXBvbmVudCBpcyBhYnNlbnQgdGhlIFVSTCBzdGFydHMgd2l0aCBhIHBhdGhcbiAgLy8gY29tcG9uZW50LlxuICAvL1xuICBpZiAoXG4gICAgZXh0cmFjdGVkLnByb3RvY29sID09PSAnZmlsZTonICYmIChcbiAgICAgIGV4dHJhY3RlZC5zbGFzaGVzQ291bnQgIT09IDIgfHwgd2luZG93c0RyaXZlTGV0dGVyLnRlc3QoYWRkcmVzcykpIHx8XG4gICAgKCFleHRyYWN0ZWQuc2xhc2hlcyAmJlxuICAgICAgKGV4dHJhY3RlZC5wcm90b2NvbCB8fFxuICAgICAgICBleHRyYWN0ZWQuc2xhc2hlc0NvdW50IDwgMiB8fFxuICAgICAgICAhaXNTcGVjaWFsKHVybC5wcm90b2NvbCkpKVxuICApIHtcbiAgICBpbnN0cnVjdGlvbnNbM10gPSBbLyguKikvLCAncGF0aG5hbWUnXTtcbiAgfVxuXG4gIGZvciAoOyBpIDwgaW5zdHJ1Y3Rpb25zLmxlbmd0aDsgaSsrKSB7XG4gICAgaW5zdHJ1Y3Rpb24gPSBpbnN0cnVjdGlvbnNbaV07XG5cbiAgICBpZiAodHlwZW9mIGluc3RydWN0aW9uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBhZGRyZXNzID0gaW5zdHJ1Y3Rpb24oYWRkcmVzcywgdXJsKTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIHBhcnNlID0gaW5zdHJ1Y3Rpb25bMF07XG4gICAga2V5ID0gaW5zdHJ1Y3Rpb25bMV07XG5cbiAgICBpZiAocGFyc2UgIT09IHBhcnNlKSB7XG4gICAgICB1cmxba2V5XSA9IGFkZHJlc3M7XG4gICAgfSBlbHNlIGlmICgnc3RyaW5nJyA9PT0gdHlwZW9mIHBhcnNlKSB7XG4gICAgICBpbmRleCA9IHBhcnNlID09PSAnQCdcbiAgICAgICAgPyBhZGRyZXNzLmxhc3RJbmRleE9mKHBhcnNlKVxuICAgICAgICA6IGFkZHJlc3MuaW5kZXhPZihwYXJzZSk7XG5cbiAgICAgIGlmICh+aW5kZXgpIHtcbiAgICAgICAgaWYgKCdudW1iZXInID09PSB0eXBlb2YgaW5zdHJ1Y3Rpb25bMl0pIHtcbiAgICAgICAgICB1cmxba2V5XSA9IGFkZHJlc3Muc2xpY2UoMCwgaW5kZXgpO1xuICAgICAgICAgIGFkZHJlc3MgPSBhZGRyZXNzLnNsaWNlKGluZGV4ICsgaW5zdHJ1Y3Rpb25bMl0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHVybFtrZXldID0gYWRkcmVzcy5zbGljZShpbmRleCk7XG4gICAgICAgICAgYWRkcmVzcyA9IGFkZHJlc3Muc2xpY2UoMCwgaW5kZXgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICgoaW5kZXggPSBwYXJzZS5leGVjKGFkZHJlc3MpKSkge1xuICAgICAgdXJsW2tleV0gPSBpbmRleFsxXTtcbiAgICAgIGFkZHJlc3MgPSBhZGRyZXNzLnNsaWNlKDAsIGluZGV4LmluZGV4KTtcbiAgICB9XG5cbiAgICB1cmxba2V5XSA9IHVybFtrZXldIHx8IChcbiAgICAgIHJlbGF0aXZlICYmIGluc3RydWN0aW9uWzNdID8gbG9jYXRpb25ba2V5XSB8fCAnJyA6ICcnXG4gICAgKTtcblxuICAgIC8vXG4gICAgLy8gSG9zdG5hbWUsIGhvc3QgYW5kIHByb3RvY29sIHNob3VsZCBiZSBsb3dlcmNhc2VkIHNvIHRoZXkgY2FuIGJlIHVzZWQgdG9cbiAgICAvLyBjcmVhdGUgYSBwcm9wZXIgYG9yaWdpbmAuXG4gICAgLy9cbiAgICBpZiAoaW5zdHJ1Y3Rpb25bNF0pIHVybFtrZXldID0gdXJsW2tleV0udG9Mb3dlckNhc2UoKTtcbiAgfVxuXG4gIC8vXG4gIC8vIEFsc28gcGFyc2UgdGhlIHN1cHBsaWVkIHF1ZXJ5IHN0cmluZyBpbiB0byBhbiBvYmplY3QuIElmIHdlJ3JlIHN1cHBsaWVkXG4gIC8vIHdpdGggYSBjdXN0b20gcGFyc2VyIGFzIGZ1bmN0aW9uIHVzZSB0aGF0IGluc3RlYWQgb2YgdGhlIGRlZmF1bHQgYnVpbGQtaW5cbiAgLy8gcGFyc2VyLlxuICAvL1xuICBpZiAocGFyc2VyKSB1cmwucXVlcnkgPSBwYXJzZXIodXJsLnF1ZXJ5KTtcblxuICAvL1xuICAvLyBJZiB0aGUgVVJMIGlzIHJlbGF0aXZlLCByZXNvbHZlIHRoZSBwYXRobmFtZSBhZ2FpbnN0IHRoZSBiYXNlIFVSTC5cbiAgLy9cbiAgaWYgKFxuICAgICAgcmVsYXRpdmVcbiAgICAmJiBsb2NhdGlvbi5zbGFzaGVzXG4gICAgJiYgdXJsLnBhdGhuYW1lLmNoYXJBdCgwKSAhPT0gJy8nXG4gICAgJiYgKHVybC5wYXRobmFtZSAhPT0gJycgfHwgbG9jYXRpb24ucGF0aG5hbWUgIT09ICcnKVxuICApIHtcbiAgICB1cmwucGF0aG5hbWUgPSByZXNvbHZlKHVybC5wYXRobmFtZSwgbG9jYXRpb24ucGF0aG5hbWUpO1xuICB9XG5cbiAgLy9cbiAgLy8gRGVmYXVsdCB0byBhIC8gZm9yIHBhdGhuYW1lIGlmIG5vbmUgZXhpc3RzLiBUaGlzIG5vcm1hbGl6ZXMgdGhlIFVSTFxuICAvLyB0byBhbHdheXMgaGF2ZSBhIC9cbiAgLy9cbiAgaWYgKHVybC5wYXRobmFtZS5jaGFyQXQoMCkgIT09ICcvJyAmJiBpc1NwZWNpYWwodXJsLnByb3RvY29sKSkge1xuICAgIHVybC5wYXRobmFtZSA9ICcvJyArIHVybC5wYXRobmFtZTtcbiAgfVxuXG4gIC8vXG4gIC8vIFdlIHNob3VsZCBub3QgYWRkIHBvcnQgbnVtYmVycyBpZiB0aGV5IGFyZSBhbHJlYWR5IHRoZSBkZWZhdWx0IHBvcnQgbnVtYmVyXG4gIC8vIGZvciBhIGdpdmVuIHByb3RvY29sLiBBcyB0aGUgaG9zdCBhbHNvIGNvbnRhaW5zIHRoZSBwb3J0IG51bWJlciB3ZSdyZSBnb2luZ1xuICAvLyBvdmVycmlkZSBpdCB3aXRoIHRoZSBob3N0bmFtZSB3aGljaCBjb250YWlucyBubyBwb3J0IG51bWJlci5cbiAgLy9cbiAgaWYgKCFyZXF1aXJlZCh1cmwucG9ydCwgdXJsLnByb3RvY29sKSkge1xuICAgIHVybC5ob3N0ID0gdXJsLmhvc3RuYW1lO1xuICAgIHVybC5wb3J0ID0gJyc7XG4gIH1cblxuICAvL1xuICAvLyBQYXJzZSBkb3duIHRoZSBgYXV0aGAgZm9yIHRoZSB1c2VybmFtZSBhbmQgcGFzc3dvcmQuXG4gIC8vXG4gIHVybC51c2VybmFtZSA9IHVybC5wYXNzd29yZCA9ICcnO1xuXG4gIGlmICh1cmwuYXV0aCkge1xuICAgIGluZGV4ID0gdXJsLmF1dGguaW5kZXhPZignOicpO1xuXG4gICAgaWYgKH5pbmRleCkge1xuICAgICAgdXJsLnVzZXJuYW1lID0gdXJsLmF1dGguc2xpY2UoMCwgaW5kZXgpO1xuICAgICAgdXJsLnVzZXJuYW1lID0gZW5jb2RlVVJJQ29tcG9uZW50KGRlY29kZVVSSUNvbXBvbmVudCh1cmwudXNlcm5hbWUpKTtcblxuICAgICAgdXJsLnBhc3N3b3JkID0gdXJsLmF1dGguc2xpY2UoaW5kZXggKyAxKTtcbiAgICAgIHVybC5wYXNzd29yZCA9IGVuY29kZVVSSUNvbXBvbmVudChkZWNvZGVVUklDb21wb25lbnQodXJsLnBhc3N3b3JkKSlcbiAgICB9IGVsc2Uge1xuICAgICAgdXJsLnVzZXJuYW1lID0gZW5jb2RlVVJJQ29tcG9uZW50KGRlY29kZVVSSUNvbXBvbmVudCh1cmwuYXV0aCkpO1xuICAgIH1cblxuICAgIHVybC5hdXRoID0gdXJsLnBhc3N3b3JkID8gdXJsLnVzZXJuYW1lICsnOicrIHVybC5wYXNzd29yZCA6IHVybC51c2VybmFtZTtcbiAgfVxuXG4gIHVybC5vcmlnaW4gPSB1cmwucHJvdG9jb2wgIT09ICdmaWxlOicgJiYgaXNTcGVjaWFsKHVybC5wcm90b2NvbCkgJiYgdXJsLmhvc3RcbiAgICA/IHVybC5wcm90b2NvbCArJy8vJysgdXJsLmhvc3RcbiAgICA6ICdudWxsJztcblxuICAvL1xuICAvLyBUaGUgaHJlZiBpcyBqdXN0IHRoZSBjb21waWxlZCByZXN1bHQuXG4gIC8vXG4gIHVybC5ocmVmID0gdXJsLnRvU3RyaW5nKCk7XG59XG5cbi8qKlxuICogVGhpcyBpcyBjb252ZW5pZW5jZSBtZXRob2QgZm9yIGNoYW5naW5nIHByb3BlcnRpZXMgaW4gdGhlIFVSTCBpbnN0YW5jZSB0b1xuICogaW5zdXJlIHRoYXQgdGhleSBhbGwgcHJvcGFnYXRlIGNvcnJlY3RseS5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gcGFydCAgICAgICAgICBQcm9wZXJ0eSB3ZSBuZWVkIHRvIGFkanVzdC5cbiAqIEBwYXJhbSB7TWl4ZWR9IHZhbHVlICAgICAgICAgIFRoZSBuZXdseSBhc3NpZ25lZCB2YWx1ZS5cbiAqIEBwYXJhbSB7Qm9vbGVhbnxGdW5jdGlvbn0gZm4gIFdoZW4gc2V0dGluZyB0aGUgcXVlcnksIGl0IHdpbGwgYmUgdGhlIGZ1bmN0aW9uXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2VkIHRvIHBhcnNlIHRoZSBxdWVyeS5cbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFdoZW4gc2V0dGluZyB0aGUgcHJvdG9jb2wsIGRvdWJsZSBzbGFzaCB3aWxsIGJlXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW1vdmVkIGZyb20gdGhlIGZpbmFsIHVybCBpZiBpdCBpcyB0cnVlLlxuICogQHJldHVybnMge1VSTH0gVVJMIGluc3RhbmNlIGZvciBjaGFpbmluZy5cbiAqIEBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gc2V0KHBhcnQsIHZhbHVlLCBmbikge1xuICB2YXIgdXJsID0gdGhpcztcblxuICBzd2l0Y2ggKHBhcnQpIHtcbiAgICBjYXNlICdxdWVyeSc6XG4gICAgICBpZiAoJ3N0cmluZycgPT09IHR5cGVvZiB2YWx1ZSAmJiB2YWx1ZS5sZW5ndGgpIHtcbiAgICAgICAgdmFsdWUgPSAoZm4gfHwgcXMucGFyc2UpKHZhbHVlKTtcbiAgICAgIH1cblxuICAgICAgdXJsW3BhcnRdID0gdmFsdWU7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ3BvcnQnOlxuICAgICAgdXJsW3BhcnRdID0gdmFsdWU7XG5cbiAgICAgIGlmICghcmVxdWlyZWQodmFsdWUsIHVybC5wcm90b2NvbCkpIHtcbiAgICAgICAgdXJsLmhvc3QgPSB1cmwuaG9zdG5hbWU7XG4gICAgICAgIHVybFtwYXJ0XSA9ICcnO1xuICAgICAgfSBlbHNlIGlmICh2YWx1ZSkge1xuICAgICAgICB1cmwuaG9zdCA9IHVybC5ob3N0bmFtZSArJzonKyB2YWx1ZTtcbiAgICAgIH1cblxuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdob3N0bmFtZSc6XG4gICAgICB1cmxbcGFydF0gPSB2YWx1ZTtcblxuICAgICAgaWYgKHVybC5wb3J0KSB2YWx1ZSArPSAnOicrIHVybC5wb3J0O1xuICAgICAgdXJsLmhvc3QgPSB2YWx1ZTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAnaG9zdCc6XG4gICAgICB1cmxbcGFydF0gPSB2YWx1ZTtcblxuICAgICAgaWYgKHBvcnQudGVzdCh2YWx1ZSkpIHtcbiAgICAgICAgdmFsdWUgPSB2YWx1ZS5zcGxpdCgnOicpO1xuICAgICAgICB1cmwucG9ydCA9IHZhbHVlLnBvcCgpO1xuICAgICAgICB1cmwuaG9zdG5hbWUgPSB2YWx1ZS5qb2luKCc6Jyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB1cmwuaG9zdG5hbWUgPSB2YWx1ZTtcbiAgICAgICAgdXJsLnBvcnQgPSAnJztcbiAgICAgIH1cblxuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdwcm90b2NvbCc6XG4gICAgICB1cmwucHJvdG9jb2wgPSB2YWx1ZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgdXJsLnNsYXNoZXMgPSAhZm47XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ3BhdGhuYW1lJzpcbiAgICBjYXNlICdoYXNoJzpcbiAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICB2YXIgY2hhciA9IHBhcnQgPT09ICdwYXRobmFtZScgPyAnLycgOiAnIyc7XG4gICAgICAgIHVybFtwYXJ0XSA9IHZhbHVlLmNoYXJBdCgwKSAhPT0gY2hhciA/IGNoYXIgKyB2YWx1ZSA6IHZhbHVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdXJsW3BhcnRdID0gdmFsdWU7XG4gICAgICB9XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ3VzZXJuYW1lJzpcbiAgICBjYXNlICdwYXNzd29yZCc6XG4gICAgICB1cmxbcGFydF0gPSBlbmNvZGVVUklDb21wb25lbnQodmFsdWUpO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdhdXRoJzpcbiAgICAgIHZhciBpbmRleCA9IHZhbHVlLmluZGV4T2YoJzonKTtcblxuICAgICAgaWYgKH5pbmRleCkge1xuICAgICAgICB1cmwudXNlcm5hbWUgPSB2YWx1ZS5zbGljZSgwLCBpbmRleCk7XG4gICAgICAgIHVybC51c2VybmFtZSA9IGVuY29kZVVSSUNvbXBvbmVudChkZWNvZGVVUklDb21wb25lbnQodXJsLnVzZXJuYW1lKSk7XG5cbiAgICAgICAgdXJsLnBhc3N3b3JkID0gdmFsdWUuc2xpY2UoaW5kZXggKyAxKTtcbiAgICAgICAgdXJsLnBhc3N3b3JkID0gZW5jb2RlVVJJQ29tcG9uZW50KGRlY29kZVVSSUNvbXBvbmVudCh1cmwucGFzc3dvcmQpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHVybC51c2VybmFtZSA9IGVuY29kZVVSSUNvbXBvbmVudChkZWNvZGVVUklDb21wb25lbnQodmFsdWUpKTtcbiAgICAgIH1cbiAgfVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcnVsZXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaW5zID0gcnVsZXNbaV07XG5cbiAgICBpZiAoaW5zWzRdKSB1cmxbaW5zWzFdXSA9IHVybFtpbnNbMV1dLnRvTG93ZXJDYXNlKCk7XG4gIH1cblxuICB1cmwuYXV0aCA9IHVybC5wYXNzd29yZCA/IHVybC51c2VybmFtZSArJzonKyB1cmwucGFzc3dvcmQgOiB1cmwudXNlcm5hbWU7XG5cbiAgdXJsLm9yaWdpbiA9IHVybC5wcm90b2NvbCAhPT0gJ2ZpbGU6JyAmJiBpc1NwZWNpYWwodXJsLnByb3RvY29sKSAmJiB1cmwuaG9zdFxuICAgID8gdXJsLnByb3RvY29sICsnLy8nKyB1cmwuaG9zdFxuICAgIDogJ251bGwnO1xuXG4gIHVybC5ocmVmID0gdXJsLnRvU3RyaW5nKCk7XG5cbiAgcmV0dXJuIHVybDtcbn1cblxuLyoqXG4gKiBUcmFuc2Zvcm0gdGhlIHByb3BlcnRpZXMgYmFjayBpbiB0byBhIHZhbGlkIGFuZCBmdWxsIFVSTCBzdHJpbmcuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gc3RyaW5naWZ5IE9wdGlvbmFsIHF1ZXJ5IHN0cmluZ2lmeSBmdW5jdGlvbi5cbiAqIEByZXR1cm5zIHtTdHJpbmd9IENvbXBpbGVkIHZlcnNpb24gb2YgdGhlIFVSTC5cbiAqIEBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gdG9TdHJpbmcoc3RyaW5naWZ5KSB7XG4gIGlmICghc3RyaW5naWZ5IHx8ICdmdW5jdGlvbicgIT09IHR5cGVvZiBzdHJpbmdpZnkpIHN0cmluZ2lmeSA9IHFzLnN0cmluZ2lmeTtcblxuICB2YXIgcXVlcnlcbiAgICAsIHVybCA9IHRoaXNcbiAgICAsIGhvc3QgPSB1cmwuaG9zdFxuICAgICwgcHJvdG9jb2wgPSB1cmwucHJvdG9jb2w7XG5cbiAgaWYgKHByb3RvY29sICYmIHByb3RvY29sLmNoYXJBdChwcm90b2NvbC5sZW5ndGggLSAxKSAhPT0gJzonKSBwcm90b2NvbCArPSAnOic7XG5cbiAgdmFyIHJlc3VsdCA9XG4gICAgcHJvdG9jb2wgK1xuICAgICgodXJsLnByb3RvY29sICYmIHVybC5zbGFzaGVzKSB8fCBpc1NwZWNpYWwodXJsLnByb3RvY29sKSA/ICcvLycgOiAnJyk7XG5cbiAgaWYgKHVybC51c2VybmFtZSkge1xuICAgIHJlc3VsdCArPSB1cmwudXNlcm5hbWU7XG4gICAgaWYgKHVybC5wYXNzd29yZCkgcmVzdWx0ICs9ICc6JysgdXJsLnBhc3N3b3JkO1xuICAgIHJlc3VsdCArPSAnQCc7XG4gIH0gZWxzZSBpZiAodXJsLnBhc3N3b3JkKSB7XG4gICAgcmVzdWx0ICs9ICc6JysgdXJsLnBhc3N3b3JkO1xuICAgIHJlc3VsdCArPSAnQCc7XG4gIH0gZWxzZSBpZiAoXG4gICAgdXJsLnByb3RvY29sICE9PSAnZmlsZTonICYmXG4gICAgaXNTcGVjaWFsKHVybC5wcm90b2NvbCkgJiZcbiAgICAhaG9zdCAmJlxuICAgIHVybC5wYXRobmFtZSAhPT0gJy8nXG4gICkge1xuICAgIC8vXG4gICAgLy8gQWRkIGJhY2sgdGhlIGVtcHR5IHVzZXJpbmZvLCBvdGhlcndpc2UgdGhlIG9yaWdpbmFsIGludmFsaWQgVVJMXG4gICAgLy8gbWlnaHQgYmUgdHJhbnNmb3JtZWQgaW50byBhIHZhbGlkIG9uZSB3aXRoIGB1cmwucGF0aG5hbWVgIGFzIGhvc3QuXG4gICAgLy9cbiAgICByZXN1bHQgKz0gJ0AnO1xuICB9XG5cbiAgLy9cbiAgLy8gVHJhaWxpbmcgY29sb24gaXMgcmVtb3ZlZCBmcm9tIGB1cmwuaG9zdGAgd2hlbiBpdCBpcyBwYXJzZWQuIElmIGl0IHN0aWxsXG4gIC8vIGVuZHMgd2l0aCBhIGNvbG9uLCB0aGVuIGFkZCBiYWNrIHRoZSB0cmFpbGluZyBjb2xvbiB0aGF0IHdhcyByZW1vdmVkLiBUaGlzXG4gIC8vIHByZXZlbnRzIGFuIGludmFsaWQgVVJMIGZyb20gYmVpbmcgdHJhbnNmb3JtZWQgaW50byBhIHZhbGlkIG9uZS5cbiAgLy9cbiAgaWYgKGhvc3RbaG9zdC5sZW5ndGggLSAxXSA9PT0gJzonIHx8IChwb3J0LnRlc3QodXJsLmhvc3RuYW1lKSAmJiAhdXJsLnBvcnQpKSB7XG4gICAgaG9zdCArPSAnOic7XG4gIH1cblxuICByZXN1bHQgKz0gaG9zdCArIHVybC5wYXRobmFtZTtcblxuICBxdWVyeSA9ICdvYmplY3QnID09PSB0eXBlb2YgdXJsLnF1ZXJ5ID8gc3RyaW5naWZ5KHVybC5xdWVyeSkgOiB1cmwucXVlcnk7XG4gIGlmIChxdWVyeSkgcmVzdWx0ICs9ICc/JyAhPT0gcXVlcnkuY2hhckF0KDApID8gJz8nKyBxdWVyeSA6IHF1ZXJ5O1xuXG4gIGlmICh1cmwuaGFzaCkgcmVzdWx0ICs9IHVybC5oYXNoO1xuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cblVybC5wcm90b3R5cGUgPSB7IHNldDogc2V0LCB0b1N0cmluZzogdG9TdHJpbmcgfTtcblxuLy9cbi8vIEV4cG9zZSB0aGUgVVJMIHBhcnNlciBhbmQgc29tZSBhZGRpdGlvbmFsIHByb3BlcnRpZXMgdGhhdCBtaWdodCBiZSB1c2VmdWwgZm9yXG4vLyBvdGhlcnMgb3IgdGVzdGluZy5cbi8vXG5VcmwuZXh0cmFjdFByb3RvY29sID0gZXh0cmFjdFByb3RvY29sO1xuVXJsLmxvY2F0aW9uID0gbG9sY2F0aW9uO1xuVXJsLnRyaW1MZWZ0ID0gdHJpbUxlZnQ7XG5VcmwucXMgPSBxcztcblxubW9kdWxlLmV4cG9ydHMgPSBVcmw7XG4iLCIvKipcbiAqIFNwbGl0VHlwZVxuICogaHR0cHM6Ly9naXRodWIuY29tL2x1a2VQZWF2ZXkvU3BsaXRUeXBlXG4gKiBAdmVyc2lvbiAwLjMuMlxuICogQGF1dGhvciBMdWtlIFBlYXZleSA8bHdwZWF2ZXlAZ21haWwuY29tPlxuICovXG5cbi8vIFBvbHlmaWxsIHRoZSBmb2xsb3dpbmcgRE9NIG1ldGhvZHMgdGhhdCBhcmUgbm90IHN1cHBvcnRlZCBpbiBJRSAxMS5cblxuKCgpID0+IHtcbiAgZnVuY3Rpb24gYXBwZW5kKC4uLm5vZGVzKSB7XG4gICAgY29uc3QgbGVuZ3RoID0gbm9kZXMubGVuZ3RoO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgY29uc3Qgbm9kZSA9IG5vZGVzW2ldO1xuICAgICAgaWYgKG5vZGUubm9kZVR5cGUgPT09IDEgfHwgbm9kZS5ub2RlVHlwZSA9PT0gMTEpIHRoaXMuYXBwZW5kQ2hpbGQobm9kZSk7ZWxzZSB0aGlzLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKFN0cmluZyhub2RlKSkpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlcGxhY2VDaGlsZHJlbiguLi5ub2Rlcykge1xuICAgIHdoaWxlICh0aGlzLmxhc3RDaGlsZCkge1xuICAgICAgdGhpcy5yZW1vdmVDaGlsZCh0aGlzLmxhc3RDaGlsZCk7XG4gICAgfVxuXG4gICAgaWYgKG5vZGVzLmxlbmd0aCkgdGhpcy5hcHBlbmQoLi4ubm9kZXMpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVwbGFjZVdpdGgoLi4ubm9kZXMpIHtcbiAgICBjb25zdCBwYXJlbnQgPSB0aGlzLnBhcmVudE5vZGU7XG4gICAgbGV0IGkgPSBub2Rlcy5sZW5ndGg7XG4gICAgaWYgKCFwYXJlbnQpIHJldHVybjtcbiAgICBpZiAoIWkpIHBhcmVudC5yZW1vdmVDaGlsZCh0aGlzKTtcblxuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIGxldCBub2RlID0gbm9kZXNbaV07XG5cbiAgICAgIGlmICh0eXBlb2Ygbm9kZSAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgbm9kZSA9IHRoaXMub3duZXJEb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShub2RlKTtcbiAgICAgIH0gZWxzZSBpZiAobm9kZS5wYXJlbnROb2RlKSB7XG4gICAgICAgIG5vZGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChub2RlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFpKSB7XG4gICAgICAgIHBhcmVudC5yZXBsYWNlQ2hpbGQobm9kZSwgdGhpcyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXJlbnQuaW5zZXJ0QmVmb3JlKHRoaXMucHJldmlvdXNTaWJsaW5nLCBub2RlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAodHlwZW9mIEVsZW1lbnQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgaWYgKCFFbGVtZW50LnByb3RvdHlwZS5hcHBlbmQpIHtcbiAgICAgIEVsZW1lbnQucHJvdG90eXBlLmFwcGVuZCA9IGFwcGVuZDtcbiAgICAgIERvY3VtZW50RnJhZ21lbnQucHJvdG90eXBlLmFwcGVuZCA9IGFwcGVuZDtcbiAgICB9XG5cbiAgICBpZiAoIUVsZW1lbnQucHJvdG90eXBlLnJlcGxhY2VDaGlsZHJlbikge1xuICAgICAgRWxlbWVudC5wcm90b3R5cGUucmVwbGFjZUNoaWxkcmVuID0gcmVwbGFjZUNoaWxkcmVuO1xuICAgICAgRG9jdW1lbnRGcmFnbWVudC5wcm90b3R5cGUucmVwbGFjZUNoaWxkcmVuID0gcmVwbGFjZUNoaWxkcmVuO1xuICAgIH1cblxuICAgIGlmICghRWxlbWVudC5wcm90b3R5cGUucmVwbGFjZVdpdGgpIHtcbiAgICAgIEVsZW1lbnQucHJvdG90eXBlLnJlcGxhY2VXaXRoID0gcmVwbGFjZVdpdGg7XG4gICAgICBEb2N1bWVudEZyYWdtZW50LnByb3RvdHlwZS5yZXBsYWNlV2l0aCA9IHJlcGxhY2VXaXRoO1xuICAgIH1cbiAgfVxufSkoKTtcblxuLyoqXG4gKiBTaGFsbG93IG1lcmdlcyB0aGUgcHJvcGVydGllcyBvZiBhbiBvYmplY3Qgd2l0aCB0aGUgdGFyZ2V0IG9iamVjdC4gT25seVxuICogaW5jbHVkZXMgcHJvcGVydGllcyB0aGF0IGV4aXN0IG9uIHRoZSB0YXJnZXQgb2JqZWN0LiBOb24td3JpdGFibGUgcHJvcGVydGllc1xuICogb24gdGhlIHRhcmdldCBvYmplY3Qgd2lsbCBub3QgYmUgb3Zlci13cml0dGVuLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB0YXJnZXRcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3RcbiAqL1xuZnVuY3Rpb24gZXh0ZW5kKHRhcmdldCwgb2JqZWN0KSB7XG4gIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhPYmplY3QodGFyZ2V0KSkucmVkdWNlKChleHRlbmRlZCwga2V5KSA9PiB7XG4gICAgY29uc3QgY3VycmVudFZhbHVlID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihPYmplY3QodGFyZ2V0KSwga2V5KTtcbiAgICBjb25zdCBuZXdWYWx1ZSA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoT2JqZWN0KG9iamVjdCksIGtleSk7XG4gICAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHRlbmRlZCwga2V5LCBuZXdWYWx1ZSB8fCBjdXJyZW50VmFsdWUpO1xuICB9LCB7fSk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGdpdmVuIHZhbHVlIGlzIGEgc3RyaW5nXG4gKlxuICogQHBhcmFtIHthbnl9IHZhbHVlXG4gKiBAcmV0dXJuIHtib29sZWFufSBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHN0cmluZywgZWxzZSBgZmFsc2VgXG4gKi9cbmZ1bmN0aW9uIGlzU3RyaW5nKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnO1xufVxuXG5mdW5jdGlvbiBpc0FycmF5KHZhbHVlKSB7XG4gIHJldHVybiBBcnJheS5pc0FycmF5KHZhbHVlKTtcbn1cblxuLyoqXG4gKiBQYXJzZXMgdXNlciBzdXBwbGllZCBzZXR0aW5ncyBvYmplY3RzLlxuICovXG5cbmZ1bmN0aW9uIHBhcnNlU2V0dGluZ3Moc2V0dGluZ3MgPSB7fSkge1xuICBjb25zdCBvYmplY3QgPSBleHRlbmQoc2V0dGluZ3MpOyAvLyBgc3BsaXRgIG1heSBiZSB1c2VkIGFzIGFuIGFsaWFzIGZvciB0aGUgYHR5cGVzYCBvcHRpb25cbiAgLy8gUGFyc2UgdGhlIGB0eXBlc2Agc2V0dGluZ3MgaW50byBhbiBhcnJheSBvZiB2YWxpZCBzcGxpdCB0eXBlcy5cbiAgLy8gSWYgYHR5cGVzYCBpcyBleHBsaWNpdGx5IHNldCB0byBhbiBlbXB0eSBzdHJpbmcgb3IgYXJyYXksIHRleHQgd2lsbCBub3QgYmVcbiAgLy8gc3BsaXQgYXQgYWxsLlxuXG4gIGxldCB0eXBlcztcblxuICBpZiAob2JqZWN0LnR5cGVzICE9PSB1bmRlZmluZWQpIHtcbiAgICB0eXBlcyA9IG9iamVjdC50eXBlcztcbiAgfSBlbHNlIGlmIChvYmplY3Quc3BsaXQgIT09IHVuZGVmaW5lZCkge1xuICAgIHR5cGVzID0gb2JqZWN0LnNwbGl0O1xuICB9XG5cbiAgaWYgKHR5cGVzICE9PSB1bmRlZmluZWQpIHtcbiAgICBvYmplY3QudHlwZXMgPSAoaXNTdHJpbmcodHlwZXMpIHx8IGlzQXJyYXkodHlwZXMpID8gU3RyaW5nKHR5cGVzKSA6ICcnKS5zcGxpdCgnLCcpLm1hcCh0eXBlID0+IFN0cmluZyh0eXBlKS50cmltKCkpLmZpbHRlcih0eXBlID0+IC8oKGxpbmUpfCh3b3JkKXwoY2hhcikpL2kudGVzdCh0eXBlKSk7XG4gIH0gLy8gU3VwcG9ydCBgcG9zaXRpb246IGFic29sdXRlYCBhcyBhbiBhbGlhcyBmb3IgYGFic29sdXRlOiB0cnVlYFxuXG5cbiAgaWYgKG9iamVjdC5hYnNvbHV0ZSB8fCBvYmplY3QucG9zaXRpb24pIHtcbiAgICBvYmplY3QuYWJzb2x1dGUgPSBvYmplY3QuYWJzb2x1dGUgfHwgL2Fic29sdXRlLy50ZXN0KHNldHRpbmdzLnBvc2l0aW9uKTtcbiAgfVxuXG4gIHJldHVybiBvYmplY3Q7XG59XG5cbi8qKlxuICogVGFrZXMgYSBsaXN0IG9mIGB0eXBlc2AgYW5kIHJldHVybnMgYW4gb2JqZWN0XG4gKlxuICogQHBhcmFtIHtzdHJpbmcgfCBzdHJpbmdbXX0gdmFsdWUgYSBjb21tYSBzZXBhcmF0ZWQgbGlzdCBvZiBzcGxpdCB0eXBlc1xuICogQHJldHVybiB7e2xpbmVzOiBib29sZWFuLCB3b3JkczogYm9vbGVhbiwgY2hhcnM6IGJvb2xlYW59fVxuICovXG5cbmZ1bmN0aW9uIHBhcnNlVHlwZXModmFsdWUpIHtcbiAgY29uc3QgdHlwZXMgPSBpc1N0cmluZyh2YWx1ZSkgfHwgaXNBcnJheSh2YWx1ZSkgPyBTdHJpbmcodmFsdWUpIDogJyc7XG4gIHJldHVybiB7XG4gICAgbm9uZTogIXR5cGVzLFxuICAgIGxpbmVzOiAvbGluZS9pLnRlc3QodHlwZXMpLFxuICAgIHdvcmRzOiAvd29yZC9pLnRlc3QodHlwZXMpLFxuICAgIGNoYXJzOiAvY2hhci9pLnRlc3QodHlwZXMpXG4gIH07XG59XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIGB2YWx1ZWAgaXMgYSBub24tbnVsbCBvYmplY3QuXG4gKiBAcGFyYW0ge2FueX0gdmFsdWVcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0KHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnO1xufVxuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiBgaW5wdXRgIGlzIG9uZSBvZiB0aGUgZm9sbG93aW5nOlxuICogLSBgRWxlbWVudGBcbiAqIC0gYFRleHRgXG4gKiAtIGBEb2N1bWVudEZyYWdtZW50YFxuICovXG5cbmZ1bmN0aW9uIGlzTm9kZShpbnB1dCkge1xuICByZXR1cm4gaXNPYmplY3QoaW5wdXQpICYmIC9eKDF8M3wxMSkkLy50ZXN0KGlucHV0Lm5vZGVUeXBlKTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGFycmF5LWxpa2UgbGVuZ3RoLlxuICogT3JpZ2luYWwgc291cmNlOiBMb2Rhc2hcbiAqXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgbGVuZ3RoLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNMZW5ndGgoMylcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzTGVuZ3RoKE51bWJlci5NSU5fVkFMVUUpXG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNMZW5ndGgoSW5maW5pdHkpXG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNMZW5ndGgoJzMnKVxuICogLy8gPT4gZmFsc2VcbiAqL1xuXG5mdW5jdGlvbiBpc0xlbmd0aCh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyAmJiB2YWx1ZSA+IC0xICYmIHZhbHVlICUgMSA9PT0gMDtcbn1cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYW4gYXJyYXktbGlrZSBvYmplY3RcbiAqIEBwYXJhbSB7YW55fSB2YWx1ZVxuICogQHJldHVybiB7Ym9vbGVhbn0gdHJ1ZSBpZiBgdmFsdWVgIGlzIGFycmF5LWxpa2VgLCBlbHNlIGBmYWxzZWBcbiAqIEBleGFtcGxlXG4gKiBpc0FycmF5TGlrZShuZXcgQXJyYXkoKSlcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBpc0FycmF5TGlrZShkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdkaXYnKSlcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBpc0FycmF5TGlrZShkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnZGl2JykpXG4gKiAvLyA9PiB0cnVlXG4gKlxuICogaXNBcnJheUxpa2UoKCkgPT4ge30pXG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIGlzQXJyYXlMaWtlKHtmb286ICdiYXInfSlcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogKiBpc0FycmF5TGlrZShudWxsKVxuICogLy8gPT4gZmFsc2VcbiAqL1xuXG5cbmZ1bmN0aW9uIGlzQXJyYXlMaWtlKHZhbHVlKSB7XG4gIHJldHVybiBpc09iamVjdCh2YWx1ZSkgJiYgaXNMZW5ndGgodmFsdWUubGVuZ3RoKTtcbn1cblxuLyoqXG4gKiBDb2VyY2VzIGB2YWx1ZWAgdG8gYW4gYEFycmF5YC5cbiAqXG4gKiBAcGFyYW0ge2FueX0gdmFsdWVcbiAqIEByZXR1cm4ge2FueVtdfVxuICogQGV4YW1wbGVcbiAqIC8vIElmIGB2YWx1ZWAgaXMgYW55IGBBcnJheWAsIHJldHVybnMgb3JpZ2luYWwgYEFycmF5YFxuICogbGV0IGFyciA9IFsxLCAyXVxuICogdG9BcnJheShhcnIpXG4gKiAvLyA9PiBhcnJcbiAqXG4gKiAvLyBJZiBgdmFsdWVgIGlzIGFuIGBBcnJheUxpa2VgLCBpdHMgZXF1aXZhbGVudCB0byBgQXJyYXkuZnJvbSh2YWx1ZSlgXG4gKiBsZXQgbm9kZUxpc3QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdkaXYnKVxuICogdG9BcnJheShub2RlTGlzdClcbiAqIC8vID0+IEhUTUxFbGVtZW50W10gc1xuICpcbiAqIC8vIElmIHZhbHVlIGlzIGZhbHN5LCByZXR1cm5zIGVtcHR5IGFycmF5XG4gKiB0b0FycmF5KG51bGwpXG4gKiAvLyA9PiBbXVxuICpcbiAqIC8vIEZvciBhbnkgb3RoZXIgdHlwZSBvZiB2YWx1ZSwgaXRzIGVxdWl2YWxlbnQgdG8gYEFycmF5Lm9mKHZhbHVlKWBcbiAqIGxldCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JylcbiAqIHRvQXJyYXkoZWxlbWVudClcbiAqIC8vID0+IFtlbGVtZW50XVxuICpcbiAqL1xuXG5mdW5jdGlvbiB0b0FycmF5KHZhbHVlKSB7XG4gIGlmIChpc0FycmF5KHZhbHVlKSkgcmV0dXJuIHZhbHVlO1xuICBpZiAodmFsdWUgPT0gbnVsbCkgcmV0dXJuIFtdO1xuICByZXR1cm4gaXNBcnJheUxpa2UodmFsdWUpID8gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwodmFsdWUpIDogW3ZhbHVlXTtcbn1cblxuLyoqXG4gKiBQcm9jZXNzZXMgdGFyZ2V0IGVsZW1lbnRzIGZvciB0aGUgc3BsaXRUeXBlIGZ1bmN0aW9uLlxuICpcbiAqIEBwYXJhbSB7YW55fSB0YXJnZXQgQ2FuIGJlIG9uZSBvZiB0aGUgZm9sbG93aW5nOlxuICogMS4gYHN0cmluZ2AgLSBBIGNzcyBzZWxlY3RvclxuICogMi4gYEhUTUxFbGVtZW50YCAtIEEgc2luZ2xlIGVsZW1lbnRcbiAqIDMuIGBOb2RlTGlzdGAgLSBBIG5vZGVMaXN0XG4gKiA0LiBgRWxlbWVudFtdYCAtIEFuIGFycmF5IG9mIGVsZW1lbnRzXG4gKiA1LiBgQXJyYXk8Tm9kZUxpc3R8RWxlbWVudFtdPmAgLSBBbiBuZXN0ZWQgYXJyYXkgb2YgZWxlbWVudHNcbiAqIEByZXR1cm5zIHtFbGVtZW50W119IEEgZmxhdCBhcnJheSBIVE1MIGVsZW1lbnRzXG4gKiBAcmV0dXJuIEEgZmxhdCBhcnJheSBvZiBlbGVtZW50cyBvciBlbXB0eSBhcnJheSBpZiBubyBlbGVtZW50cyBhcmUgZm91bmRcbiAqL1xuXG5mdW5jdGlvbiBnZXRUYXJnZXRFbGVtZW50cyh0YXJnZXQpIHtcbiAgbGV0IGVsZW1lbnRzID0gdGFyZ2V0OyAvLyBJZiBgdGFyZ2V0YCBpcyBhIHNlbGVjdG9yIHN0cmluZy4uLlxuXG4gIGlmIChpc1N0cmluZyh0YXJnZXQpKSB7XG4gICAgaWYgKC9eKCNbYS16XVxcdyspJC8udGVzdCh0YXJnZXQudHJpbSgpKSkge1xuICAgICAgLy8gSWYgYHRhcmdldGAgaXMgYW4gSUQsIHVzZSBgZ2V0RWxlbWVudEJ5SWRgXG4gICAgICBlbGVtZW50cyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHRhcmdldC50cmltKCkuc2xpY2UoMSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBFbHNlIHVzZSBgcXVlcnlTZWxlY3RvckFsbGBcbiAgICAgIGVsZW1lbnRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCh0YXJnZXQpO1xuICAgIH1cbiAgfSAvLyBSZXR1cm4gYSBmbGF0dGVuZWQgYXJyYXkgb2YgZWxlbWVudHNcblxuXG4gIHJldHVybiB0b0FycmF5KGVsZW1lbnRzKS5yZWR1Y2UoKHJlc3VsdCwgZWxlbWVudCkgPT4ge1xuICAgIHJldHVybiBbLi4ucmVzdWx0LCAuLi50b0FycmF5KGVsZW1lbnQpLmZpbHRlcihpc05vZGUpXTtcbiAgfSwgW10pO1xufVxuXG5jb25zdCB7XG4gIGVudHJpZXMsXG4gIGtleXMsXG4gIHZhbHVlc1xufSA9IE9iamVjdDtcblxuY29uc3QgZXhwYW5kbyA9IGBfc3BsaXR0eXBlYDtcbmNvbnN0IGNhY2hlID0ge307XG5sZXQgdWlkID0gMDtcbi8qKlxuICogU3RvcmVzIGRhdGEgYXNzb2NpYXRlZCB3aXRoIERPTSBlbGVtZW50cyBvciBvdGhlciBvYmplY3RzLiBUaGlzIGlzIGFcbiAqIHNpbXBsaWZpZWQgdmVyc2lvbiBvZiBqUXVlcnkncyBkYXRhIG1ldGhvZC5cbiAqXG4gKiBAc2lnbmF0dXJlIERhdGEob3duZXIpXG4gKiBAZGVzY3JpcHRpb24gR2V0IHRoZSBkYXRhIHN0b3JlIG9iamVjdCBmb3IgdGhlIGdpdmVuIG93bmVyLlxuICogQHBhcmFtIHtPYmplY3R9IG93bmVyIHRoZSBvYmplY3QgdGhhdCBkYXRhIHdpbGwgYmUgYXNzb2NpYXRlZCB3aXRoLlxuICogQHJldHVybiB7T2JqZWN0fSB0aGUgZGF0YSBvYmplY3QgZm9yIGdpdmVuIGBvd25lcmAuIElmIG5vIGRhdGEgZXhpc3RzXG4gKiAgICAgZm9yIHRoZSBnaXZlbiBvYmplY3QsIGNyZWF0ZXMgYSBuZXcgZGF0YSBzdG9yZSBhbmQgcmV0dXJucyBpdC5cbiAqXG4gKiBAc2lnbmF0dXJlIERhdGEob3duZXIsIGtleSlcbiAqIEBkZXNjcmlwdGlvbiBHZXQgdGhlIHZhbHVlXG4gKiBAcGFyYW0ge09iamVjdH0gb3duZXJcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXlcbiAqIEByZXR1cm4ge2FueX0gdGhlIHZhbHVlIG9mIHRoZSBwcm92aWRlZCBrZXkuIElmIGtleSBkb2VzIG5vdCBleGlzdCwgcmV0dXJuc1xuICogICAgIHVuZGVmaW5lZC5cbiAqXG4gKiBAc2lnbmF0dXJlIERhdGEob3duZXIsIGtleSwgdmFsdWUpXG4gKiBAZGVzY3JpcHRpb24gU2V0cyB0aGUgZ2l2ZW4ga2V5L3ZhbHVlIHBhaXIgaW4gZGF0YSBzdG9yZVxuICogQHBhcmFtIHtPYmplY3R9IG93bmVyXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5XG4gKiBAcGFyYW0ge2FueX0gdmFsdWVcbiAqL1xuXG5mdW5jdGlvbiBzZXQob3duZXIsIGtleSwgdmFsdWUpIHtcbiAgaWYgKCFpc09iamVjdChvd25lcikpIHtcbiAgICBjb25zb2xlLndhcm4oJ1tkYXRhLnNldF0gb3duZXIgaXMgbm90IGFuIG9iamVjdCcpO1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgY29uc3QgaWQgPSBvd25lcltleHBhbmRvXSB8fCAob3duZXJbZXhwYW5kb10gPSArK3VpZCk7XG4gIGNvbnN0IGRhdGEgPSBjYWNoZVtpZF0gfHwgKGNhY2hlW2lkXSA9IHt9KTtcblxuICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgIGlmICghIWtleSAmJiBPYmplY3QuZ2V0UHJvdG90eXBlT2Yoa2V5KSA9PT0gT2JqZWN0LnByb3RvdHlwZSkge1xuICAgICAgY2FjaGVbaWRdID0geyAuLi5kYXRhLFxuICAgICAgICAuLi5rZXlcbiAgICAgIH07XG4gICAgfVxuICB9IGVsc2UgaWYgKGtleSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgZGF0YVtrZXldID0gdmFsdWU7XG4gIH1cblxuICByZXR1cm4gdmFsdWU7XG59XG5mdW5jdGlvbiBnZXQob3duZXIsIGtleSkge1xuICBjb25zdCBpZCA9IGlzT2JqZWN0KG93bmVyKSA/IG93bmVyW2V4cGFuZG9dIDogbnVsbDtcbiAgY29uc3QgZGF0YSA9IGlkICYmIGNhY2hlW2lkXSB8fCB7fTtcblxuICBpZiAoa2V5ID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gZGF0YTtcbiAgfVxuXG4gIHJldHVybiBkYXRhW2tleV07XG59XG4vKipcbiAqIFJlbW92ZSBhbGwgZGF0YSBhc3NvY2lhdGVkIHdpdGggdGhlIGdpdmVuIGVsZW1lbnRcbiAqL1xuXG5mdW5jdGlvbiByZW1vdmUoZWxlbWVudCkge1xuICBjb25zdCBpZCA9IGVsZW1lbnQgJiYgZWxlbWVudFtleHBhbmRvXTtcblxuICBpZiAoaWQpIHtcbiAgICBkZWxldGUgZWxlbWVudFtpZF07XG4gICAgZGVsZXRlIGNhY2hlW2lkXTtcbiAgfVxufVxuLyoqXG4gKiBSZW1vdmUgYWxsIHRlbXBvcmFyeSBkYXRhIGZyb20gdGhlIHN0b3JlLlxuICovXG5cbmZ1bmN0aW9uIGNsZWFudXAoKSB7XG4gIGVudHJpZXMoY2FjaGUpLmZvckVhY2goKFtpZCwge1xuICAgIGlzUm9vdCxcbiAgICBpc1NwbGl0XG4gIH1dKSA9PiB7XG4gICAgaWYgKCFpc1Jvb3QgfHwgIWlzU3BsaXQpIHtcbiAgICAgIGNhY2hlW2lkXSA9IG51bGw7XG4gICAgICBkZWxldGUgY2FjaGVbaWRdO1xuICAgIH1cbiAgfSk7XG59XG5cbi8qKlxuICogU3BsaXRzIGEgc3RyaW5nIGludG8gYW4gYXJyYXkgb2Ygd29yZHMuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZ1xuICogQHBhcmFtIHtzdHJpbmcgfCBSZWdFeHB9IFtzZXBhcmF0b3IgPSAnICddXG4gKiBAcmV0dXJuIHtzdHJpbmdbXX0gQXJyYXkgb2Ygd29yZHNcbiAqL1xuZnVuY3Rpb24gdG9Xb3Jkcyh2YWx1ZSwgc2VwYXJhdG9yID0gJyAnKSB7XG4gIGNvbnN0IHN0cmluZyA9IHZhbHVlID8gU3RyaW5nKHZhbHVlKSA6ICcnO1xuICByZXR1cm4gc3RyaW5nLnRyaW0oKS5yZXBsYWNlKC9cXHMrL2csICcgJykuc3BsaXQoc2VwYXJhdG9yKTtcbn1cblxuLyoqXG4gKiBCYXNlZCBvbiBsb2Rhc2gjc3BsaXQgPGh0dHBzOi8vbG9kYXNoLmNvbS9saWNlbnNlPlxuICogQ29weXJpZ2h0IGpRdWVyeSBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnMgPGh0dHBzOi8vanF1ZXJ5Lm9yZy8+XG4gKiBDb3B5cmlnaHQgSmVyZW15IEFzaGtlbmFzLCBEb2N1bWVudENsb3VkIGFuZCBJbnZlc3RpZ2F0aXZlIFJlcG9ydGVycyAmXG4gKiBFZGl0b3JzXG4gKi9cbmNvbnN0IHJzQXN0cmFsUmFuZ2UgPSAnXFxcXHVkODAwLVxcXFx1ZGZmZic7XG5jb25zdCByc0NvbWJvTWFya3NSYW5nZSA9ICdcXFxcdTAzMDAtXFxcXHUwMzZmXFxcXHVmZTIwLVxcXFx1ZmUyMyc7XG5jb25zdCByc0NvbWJvU3ltYm9sc1JhbmdlID0gJ1xcXFx1MjBkMC1cXFxcdTIwZjAnO1xuY29uc3QgcnNWYXJSYW5nZSA9ICdcXFxcdWZlMGVcXFxcdWZlMGYnO1xuLyoqIFVzZWQgdG8gY29tcG9zZSB1bmljb2RlIGNhcHR1cmUgZ3JvdXBzLiAqL1xuXG5jb25zdCByc0FzdHJhbCA9IGBbJHtyc0FzdHJhbFJhbmdlfV1gO1xuY29uc3QgcnNDb21ibyA9IGBbJHtyc0NvbWJvTWFya3NSYW5nZX0ke3JzQ29tYm9TeW1ib2xzUmFuZ2V9XWA7XG5jb25zdCByc0ZpdHogPSAnXFxcXHVkODNjW1xcXFx1ZGZmYi1cXFxcdWRmZmZdJztcbmNvbnN0IHJzTW9kaWZpZXIgPSBgKD86JHtyc0NvbWJvfXwke3JzRml0en0pYDtcbmNvbnN0IHJzTm9uQXN0cmFsID0gYFteJHtyc0FzdHJhbFJhbmdlfV1gO1xuY29uc3QgcnNSZWdpb25hbCA9ICcoPzpcXFxcdWQ4M2NbXFxcXHVkZGU2LVxcXFx1ZGRmZl0pezJ9JztcbmNvbnN0IHJzU3VyclBhaXIgPSAnW1xcXFx1ZDgwMC1cXFxcdWRiZmZdW1xcXFx1ZGMwMC1cXFxcdWRmZmZdJztcbmNvbnN0IHJzWldKID0gJ1xcXFx1MjAwZCc7XG4vKiogVXNlZCB0byBjb21wb3NlIHVuaWNvZGUgcmVnZXhlcy4gKi9cblxuY29uc3QgcmVPcHRNb2QgPSBgJHtyc01vZGlmaWVyfT9gO1xuY29uc3QgcnNPcHRWYXIgPSBgWyR7cnNWYXJSYW5nZX1dP2A7XG5jb25zdCByc09wdEpvaW4gPSAnKD86JyArIHJzWldKICsgJyg/OicgKyBbcnNOb25Bc3RyYWwsIHJzUmVnaW9uYWwsIHJzU3VyclBhaXJdLmpvaW4oJ3wnKSArICcpJyArIHJzT3B0VmFyICsgcmVPcHRNb2QgKyAnKSonO1xuY29uc3QgcnNTZXEgPSByc09wdFZhciArIHJlT3B0TW9kICsgcnNPcHRKb2luO1xuY29uc3QgcnNTeW1ib2wgPSBgKD86JHtbYCR7cnNOb25Bc3RyYWx9JHtyc0NvbWJvfT9gLCByc0NvbWJvLCByc1JlZ2lvbmFsLCByc1N1cnJQYWlyLCByc0FzdHJhbF0uam9pbignfCcpfVxuKWA7XG4vKiogVXNlZCB0byBtYXRjaCBbc3RyaW5nIHN5bWJvbHNdKGh0dHBzOi8vbWF0aGlhc2J5bmVucy5iZS9ub3Rlcy9qYXZhc2NyaXB0LXVuaWNvZGUpLiAqL1xuXG5jb25zdCByZVVuaWNvZGUgPSBSZWdFeHAoYCR7cnNGaXR6fSg/PSR7cnNGaXR6fSl8JHtyc1N5bWJvbH0ke3JzU2VxfWAsICdnJyk7XG4vKiogVXNlZCB0byBkZXRlY3Qgc3RyaW5ncyB3aXRoIFt6ZXJvLXdpZHRoIGpvaW5lcnMgb3IgY29kZSBwb2ludHMgZnJvbSB0aGUgYXN0cmFsIHBsYW5lc10oaHR0cDovL2Vldi5lZS9ibG9nLzIwMTUvMDkvMTIvZGFyay1jb3JuZXJzLW9mLXVuaWNvZGUvKS4gKi9cblxuY29uc3QgdW5pY29kZVJhbmdlID0gW3JzWldKLCByc0FzdHJhbFJhbmdlLCByc0NvbWJvTWFya3NSYW5nZSwgcnNDb21ib1N5bWJvbHNSYW5nZSwgcnNWYXJSYW5nZV07XG5jb25zdCByZUhhc1VuaWNvZGUgPSBSZWdFeHAoYFske3VuaWNvZGVSYW5nZS5qb2luKCcnKX1dYCk7XG4vKipcbiAqIENvbnZlcnRzIGFuIEFTQ0lJIGBzdHJpbmdgIHRvIGFuIGFycmF5LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgY29udmVydGVkIGFycmF5LlxuICovXG5cbmZ1bmN0aW9uIGFzY2lpVG9BcnJheShzdHJpbmcpIHtcbiAgcmV0dXJuIHN0cmluZy5zcGxpdCgnJyk7XG59XG4vKipcbiAqIENoZWNrcyBpZiBgc3RyaW5nYCBjb250YWlucyBVbmljb2RlIHN5bWJvbHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGEgc3ltYm9sIGlzIGZvdW5kLCBlbHNlIGBmYWxzZWAuXG4gKi9cblxuXG5mdW5jdGlvbiBoYXNVbmljb2RlKHN0cmluZykge1xuICByZXR1cm4gcmVIYXNVbmljb2RlLnRlc3Qoc3RyaW5nKTtcbn1cbi8qKlxuICogQ29udmVydHMgYSBVbmljb2RlIGBzdHJpbmdgIHRvIGFuIGFycmF5LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgY29udmVydGVkIGFycmF5LlxuICovXG5cblxuZnVuY3Rpb24gdW5pY29kZVRvQXJyYXkoc3RyaW5nKSB7XG4gIHJldHVybiBzdHJpbmcubWF0Y2gocmVVbmljb2RlKSB8fCBbXTtcbn1cbi8qKlxuICogQ29udmVydHMgYHN0cmluZ2AgdG8gYW4gYXJyYXkuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgYXJyYXkuXG4gKi9cblxuXG5mdW5jdGlvbiBzdHJpbmdUb0FycmF5KHN0cmluZykge1xuICByZXR1cm4gaGFzVW5pY29kZShzdHJpbmcpID8gdW5pY29kZVRvQXJyYXkoc3RyaW5nKSA6IGFzY2lpVG9BcnJheShzdHJpbmcpO1xufVxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc3RyaW5nLiBBbiBlbXB0eSBzdHJpbmcgaXMgcmV0dXJuZWQgZm9yIGBudWxsYFxuICogYW5kIGB1bmRlZmluZWRgIHZhbHVlcy5cbiAqXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwcm9jZXNzLlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgc3RyaW5nLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnRvU3RyaW5nKG51bGwpO1xuICogLy8gPT4gJydcbiAqXG4gKiBfLnRvU3RyaW5nKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiAnMSwyLDMnXG4gKi9cblxuZnVuY3Rpb24gdG9TdHJpbmcodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlID09IG51bGwgPyAnJyA6IFN0cmluZyh2YWx1ZSk7XG59XG4vKipcbiAqIFNwbGl0cyBgc3RyaW5nYCBpbnRvIGFuIGFycmF5IG9mIGNoYXJhY3RlcnMuIElmIGBzZXBhcmF0b3JgIGlzIG9taXR0ZWQsXG4gKiBpdCBiZWhhdmVzIGxpa2VzIHNwbGl0LnNwbGl0KCcnKS5cbiAqXG4gKiBVbmxpa2UgbmF0aXZlIHN0cmluZy5zcGxpdCgnJyksIGl0IGNhbiBzcGxpdCBzdHJpbmdzIHRoYXQgY29udGFpbiB1bmljb2RlXG4gKiBjaGFyYWN0ZXJzIGxpa2UgZW1vamlzIGFuZCBzeW1ib2xzLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHNwbGl0LlxuICogQHBhcmFtIHtSZWdFeHB8c3RyaW5nfSBbc2VwYXJhdG9yPScnXSBUaGUgc2VwYXJhdG9yIHBhdHRlcm4gdG8gc3BsaXQgYnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHN0cmluZyBzZWdtZW50cy5cbiAqIEBleGFtcGxlXG4gKiB0b0NoYXJzKCdmb28nKTtcbiAqIC8vID0+IFsnZicsICdvJywgJ28nXVxuICpcbiAqIHRvQ2hhcnMoJ2ZvbyBiYXInKTtcbiAqIC8vID0+IFtcImZcIiwgXCJvXCIsIFwib1wiLCBcIiBcIiwgXCJiXCIsIFwiYVwiLCBcInJcIl1cbiAqXG4gKiB0b0NoYXJzKCdm8J+YgG8nKTtcbiAqIC8vID0+IFsnZicsICfwn5iAJywgJ28nXVxuICpcbiAqIHRvQ2hhcnMoJ2Yt8J+YgC1vJywgLy0vKTtcbiAqIC8vID0+IFsnZicsICfwn5iAJywgJ28nXVxuICpcbiAqL1xuXG5cbmZ1bmN0aW9uIHRvQ2hhcnMoc3RyaW5nLCBzZXBhcmF0b3IgPSAnJykge1xuICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuXG4gIGlmIChzdHJpbmcgJiYgaXNTdHJpbmcoc3RyaW5nKSkge1xuICAgIGlmICghc2VwYXJhdG9yICYmIGhhc1VuaWNvZGUoc3RyaW5nKSkge1xuICAgICAgcmV0dXJuIHN0cmluZ1RvQXJyYXkoc3RyaW5nKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gc3RyaW5nLnNwbGl0KHNlcGFyYXRvcik7XG59XG5cbi8qKlxuICogQ3JlYXRlIGFuIEhUTUwgZWxlbWVudCB3aXRoIHRoZSB0aGUgZ2l2ZW4gYXR0cmlidXRlc1xuICpcbiAqIGF0dHJpYnV0ZXMgY2FuIGluY2x1ZGUgc3RhbmRhcmQgSFRNTCBhdHRyaWJ1dGUsIGFzIHdlbGwgYXMgdGhlIGZvbGxvd2luZ1xuICogXCJzcGVjaWFsXCIgcHJvcGVydGllczpcbiAqICAgLSBjaGlsZHJlbjogSFRNTEVsZW1lbnQgfCBBcnJheUxpa2U8SFRNTEVsZW1lbnQ+XG4gKiAgIC0gdGV4dENvbnRlbnQ6IHN0cmluZ1xuICogICAtIGlubmVySFRNTDogc3RyaW5nXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAqIEBwYXJhbSAge09iamVjdH0gW2F0dHJpYnV0ZXNdXG4gKiBAcmV0dXJucyB7SFRNTEVsZW1lbnR9XG4gKi9cblxuZnVuY3Rpb24gY3JlYXRlRWxlbWVudChuYW1lLCBhdHRyaWJ1dGVzKSB7XG4gIGNvbnN0IGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KG5hbWUpO1xuXG4gIGlmICghYXR0cmlidXRlcykge1xuICAgIC8vIFdoZW4gY2FsbGVkIHdpdGhvdXQgdGhlIHNlY29uZCBhcmd1bWVudCwgaXRzIGp1c3QgcmV0dXJuIHRoZSByZXN1bHRcbiAgICAvLyBvZiBgZG9jdW1lbnQuY3JlYXRlRWxlbWVudGBcbiAgICByZXR1cm4gZWxlbWVudDtcbiAgfVxuXG4gIE9iamVjdC5rZXlzKGF0dHJpYnV0ZXMpLmZvckVhY2goYXR0cmlidXRlID0+IHtcbiAgICBjb25zdCByYXdWYWx1ZSA9IGF0dHJpYnV0ZXNbYXR0cmlidXRlXTtcbiAgICBjb25zdCB2YWx1ZSA9IGlzU3RyaW5nKHJhd1ZhbHVlKSA/IHJhd1ZhbHVlLnRyaW0oKSA6IHJhd1ZhbHVlOyAvLyBJZ25vcmUgYXR0cmlidXRlIGlmIHRoZSB2YWx1ZSBpcyBgbnVsbGAgb3IgYW4gZW1wdHkgc3RyaW5nXG5cbiAgICBpZiAodmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09ICcnKSByZXR1cm47XG5cbiAgICBpZiAoYXR0cmlidXRlID09PSAnY2hpbGRyZW4nKSB7XG4gICAgICAvLyBDaGlsZHJlbiBjYW4gYmUgb25lIG9yIG1vcmUgRWxlbWVudHMgb3IgRE9NIHN0cmluZ3NcbiAgICAgIGVsZW1lbnQuYXBwZW5kKC4uLnRvQXJyYXkodmFsdWUpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gSGFuZGxlIHN0YW5kYXJkIEhUTUwgYXR0cmlidXRlc1xuICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoYXR0cmlidXRlLCB2YWx1ZSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGVsZW1lbnQ7XG59XG5cbnZhciBkZWZhdWx0cyA9IHtcbiAgc3BsaXRDbGFzczogJycsXG4gIGxpbmVDbGFzczogJ2xpbmUnLFxuICB3b3JkQ2xhc3M6ICd3b3JkJyxcbiAgY2hhckNsYXNzOiAnY2hhcicsXG4gIHR5cGVzOiBbJ2xpbmVzJywgJ3dvcmRzJywgJ2NoYXJzJ10sXG4gIGFic29sdXRlOiBmYWxzZSxcbiAgdGFnTmFtZTogJ2Rpdidcbn07XG5cbi8qKlxuICogU3BsaXRzIHRoZSB0ZXh0IGNvbnRlbnQgb2YgYSBzaW5nbGUgVGV4dE5vZGUgaW50byB3b3JkcyBhbmQvb3IgY2hhcmFjdGVycy5cbiAqXG4gKiBUaGlzIGZ1bmN0aW9ucyBnZXRzIGNhbGxlZCBmb3IgZXZlcnkgdGV4dCBub2RlIGluc2lkZSB0aGUgdGFyZ2V0IGVsZW1lbnQuIEl0XG4gKiByZXBsYWNlcyB0aGUgdGV4dCBub2RlIHdpdGggYSBkb2N1bWVudCBmcmFnbWVudCBjb250YWluaW5nIHRoZSBzcGxpdCB0ZXh0LlxuICogUmV0dXJucyBhbiBhcnJheSBvZiB0aGUgc3BsaXQgd29yZCBhbmQgY2hhcmFjdGVyIGVsZW1lbnRzIGZyb20gdGhpcyBub2RlLlxuICpcbiAqIEBwYXJhbSB7VGV4dE5vZGV9IHRleHROb2RlXG4gKiBAcGFyYW0ge09iamVjdH0gc2V0dGluZ3NcbiAqIEByZXR1cm4ge3t3b3JkczogRWxlbWVudFtdLCBjaGFyczogRWxlbWVudFtdfX1cbiAqL1xuXG5mdW5jdGlvbiBzcGxpdFdvcmRzQW5kQ2hhcnModGV4dE5vZGUsIHNldHRpbmdzKSB7XG4gIHNldHRpbmdzID0gZXh0ZW5kKGRlZmF1bHRzLCBzZXR0aW5ncyk7IC8vIFRoZSBzcGxpdCB0eXBlc1xuXG4gIGNvbnN0IHR5cGVzID0gcGFyc2VUeXBlcyhzZXR0aW5ncy50eXBlcyk7IC8vIHRoZSB0YWcgbmFtZSBmb3Igc3BsaXQgdGV4dCBub2Rlc1xuXG4gIGNvbnN0IFRBR19OQU1FID0gc2V0dGluZ3MudGFnTmFtZTsgLy8gdmFsdWUgb2YgdGhlIHRleHQgbm9kZVxuXG4gIGNvbnN0IFZBTFVFID0gdGV4dE5vZGUubm9kZVZhbHVlOyAvLyBgc3BsaXRUZXh0YCBpcyBhIHdyYXBwZXIgdG8gaG9sZCB0aGUgSFRNTCBzdHJ1Y3R1cmVcblxuICBjb25zdCBzcGxpdFRleHQgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7IC8vIEFycmF5cyBvZiBzcGxpdCB3b3JkIGFuZCBjaGFyYWN0ZXIgZWxlbWVudHNcblxuICBsZXQgd29yZHMgPSBbXTtcbiAgbGV0IGNoYXJzID0gW107XG5cbiAgaWYgKC9eXFxzLy50ZXN0KFZBTFVFKSkge1xuICAgIHNwbGl0VGV4dC5hcHBlbmQoJyAnKTtcbiAgfSAvLyBDcmVhdGUgYW4gYXJyYXkgb2Ygd3JhcHBlZCB3b3JkIGVsZW1lbnRzLlxuXG5cbiAgd29yZHMgPSB0b1dvcmRzKFZBTFVFKS5yZWR1Y2UoKHJlc3VsdCwgV09SRCwgaWR4LCBhcnIpID0+IHtcbiAgICAvLyBMZXQgYHdvcmRFbGVtZW50YCBiZSB0aGUgd3JhcHBlZCBlbGVtZW50IGZvciB0aGUgY3VycmVudCB3b3JkXG4gICAgbGV0IHdvcmRFbGVtZW50O1xuICAgIGxldCBjaGFyYWN0ZXJFbGVtZW50c0ZvckN1cnJlbnRXb3JkOyAvLyAtPiBJZiBzcGxpdHRpbmcgdGV4dCBpbnRvIGNoYXJhY3RlcnMuLi5cblxuICAgIGlmICh0eXBlcy5jaGFycykge1xuICAgICAgLy8gSXRlcmF0ZSB0aHJvdWdoIHRoZSBjaGFyYWN0ZXJzIGluIHRoZSBjdXJyZW50IHdvcmRcbiAgICAgIGNoYXJhY3RlckVsZW1lbnRzRm9yQ3VycmVudFdvcmQgPSB0b0NoYXJzKFdPUkQpLm1hcChDSEFSID0+IHtcbiAgICAgICAgY29uc3QgY2hhcmFjdGVyRWxlbWVudCA9IGNyZWF0ZUVsZW1lbnQoVEFHX05BTUUsIHtcbiAgICAgICAgICBjbGFzczogYCR7c2V0dGluZ3Muc3BsaXRDbGFzc30gJHtzZXR0aW5ncy5jaGFyQ2xhc3N9YCxcbiAgICAgICAgICBzdHlsZTogJ2Rpc3BsYXk6IGlubGluZS1ibG9jazsnLFxuICAgICAgICAgIGNoaWxkcmVuOiBDSEFSXG4gICAgICAgIH0pO1xuICAgICAgICBzZXQoY2hhcmFjdGVyRWxlbWVudCwgJ2lzQ2hhcicsIHRydWUpO1xuICAgICAgICBjaGFycyA9IFsuLi5jaGFycywgY2hhcmFjdGVyRWxlbWVudF07XG4gICAgICAgIHJldHVybiBjaGFyYWN0ZXJFbGVtZW50O1xuICAgICAgfSk7XG4gICAgfSAvLyBFTkQgSUY7XG5cblxuICAgIGlmICh0eXBlcy53b3JkcyB8fCB0eXBlcy5saW5lcykge1xuICAgICAgLy8gLT4gSWYgU3BsaXR0aW5nIFRleHQgSW50byBXb3Jkcy4uLlxuICAgICAgLy8gICAgQ3JlYXRlIGFuIGVsZW1lbnQgdG8gd3JhcCB0aGUgY3VycmVudCB3b3JkLiBJZiB3ZSBhcmUgYWxzb1xuICAgICAgLy8gICAgc3BsaXR0aW5nIHRleHQgaW50byBjaGFyYWN0ZXJzLCB0aGUgd29yZCBlbGVtZW50IHdpbGwgY29udGFpbiB0aGVcbiAgICAgIC8vICAgIHdyYXBwZWQgY2hhcmFjdGVyIG5vZGVzIGZvciB0aGlzIHdvcmQuIElmIG5vdCwgaXQgd2lsbCBjb250YWluIHRoZVxuICAgICAgLy8gICAgcGxhaW4gdGV4dCBjb250ZW50IChXT1JEKVxuICAgICAgd29yZEVsZW1lbnQgPSBjcmVhdGVFbGVtZW50KFRBR19OQU1FLCB7XG4gICAgICAgIGNsYXNzOiBgJHtzZXR0aW5ncy53b3JkQ2xhc3N9ICR7c2V0dGluZ3Muc3BsaXRDbGFzc31gLFxuICAgICAgICBzdHlsZTogYGRpc3BsYXk6IGlubGluZS1ibG9jazsgJHt0eXBlcy53b3JkcyAmJiBzZXR0aW5ncy5hYnNvbHV0ZSA/IGBwb3NpdGlvbjogcmVsYXRpdmU7YCA6ICcnfWAsXG4gICAgICAgIGNoaWxkcmVuOiB0eXBlcy5jaGFycyA/IGNoYXJhY3RlckVsZW1lbnRzRm9yQ3VycmVudFdvcmQgOiBXT1JEXG4gICAgICB9KTtcbiAgICAgIHNldCh3b3JkRWxlbWVudCwge1xuICAgICAgICBpc1dvcmQ6IHRydWUsXG4gICAgICAgIGlzV29yZFN0YXJ0OiB0cnVlLFxuICAgICAgICBpc1dvcmRFbmQ6IHRydWVcbiAgICAgIH0pO1xuICAgICAgc3BsaXRUZXh0LmFwcGVuZENoaWxkKHdvcmRFbGVtZW50KTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gLT4gSWYgTk9UIHNwbGl0dGluZyBpbnRvIHdvcmRzIE9SIGxpbmVzLi4uXG4gICAgICAvLyAgICBBcHBlbmQgdGhlIGNoYXJhY3RlcnMgZWxlbWVudHMgZGlyZWN0bHkgdG8gc3BsaXRUZXh0LlxuICAgICAgY2hhcmFjdGVyRWxlbWVudHNGb3JDdXJyZW50V29yZC5mb3JFYWNoKGNoYXJhY3RlckVsZW1lbnQgPT4ge1xuICAgICAgICBzcGxpdFRleHQuYXBwZW5kQ2hpbGQoY2hhcmFjdGVyRWxlbWVudCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAoaWR4IDwgYXJyLmxlbmd0aCAtIDEpIHtcbiAgICAgIC8vIEFkZCBhIHNwYWNlIGFmdGVyIHRoZSB3b3JkLlxuICAgICAgc3BsaXRUZXh0LmFwcGVuZCgnICcpO1xuICAgIH0gLy8gSWYgbm90IHNwbGl0dGluZyB0ZXh0IGludG8gd29yZHMsIHdlIHJldHVybiBhbiBlbXB0eSBhcnJheVxuXG5cbiAgICByZXR1cm4gdHlwZXMud29yZHMgPyByZXN1bHQuY29uY2F0KHdvcmRFbGVtZW50KSA6IHJlc3VsdDtcbiAgfSwgW10pOyAvLyBFTkQgTE9PUDtcbiAgLy8gQWRkIGEgdHJhaWxpbmcgd2hpdGUgc3BhY2UgdG8gbWFpbnRhaW4gd29yZCBzcGFjaW5nXG5cbiAgaWYgKC9cXHMkLy50ZXN0KFZBTFVFKSkge1xuICAgIHNwbGl0VGV4dC5hcHBlbmQoJyAnKTtcbiAgfVxuXG4gIHRleHROb2RlLnJlcGxhY2VXaXRoKHNwbGl0VGV4dCk7XG4gIHJldHVybiB7XG4gICAgd29yZHMsXG4gICAgY2hhcnNcbiAgfTtcbn1cblxuLyoqXG4gKiBTcGxpdHMgdGhlIHRleHQgY29udGVudCBvZiBhIHRhcmdldCBlbGVtZW50IGludG8gd29yZHMgYW5kL29yIGNoYXJhY3RlcnMuXG4gKiBUaGUgZnVuY3Rpb24gaXMgcmVjdXJzaXZlLCBpdCB3aWxsIGFsc28gc3BsaXQgdGhlIHRleHQgY29udGVudCBvZiBhbnkgY2hpbGRcbiAqIGVsZW1lbnRzIGludG8gd29yZHMvY2hhcmFjdGVycywgd2hpbGUgcHJlc2VydmluZyB0aGUgbmVzdGVkIGVsZW1lbnRzLlxuICpcbiAqIEBwYXJhbSB7Tm9kZX0gbm9kZSBhbiBIVE1MIEVsZW1lbnQgb3IgVGV4dCBOb2RlXG4gKiBAcGFyYW0ge09iamVjdH0gc2V0dGluZyBzcGxpdFR5cGUgc2V0dGluZ3NcbiAqL1xuXG5mdW5jdGlvbiBzcGxpdChub2RlLCBzZXR0aW5ncykge1xuICBjb25zdCB0eXBlID0gbm9kZS5ub2RlVHlwZTsgLy8gQXJyYXlzIG9mIHNwbGl0IHdvcmRzIGFuZCBjaGFyYWN0ZXJzXG5cbiAgY29uc3Qgd29yZHNBbmRDaGFycyA9IHtcbiAgICB3b3JkczogW10sXG4gICAgY2hhcnM6IFtdXG4gIH07IC8vIE9ubHkgcHJvY2VlZCBpZiBgbm9kZWAgaXMgYW4gYEVsZW1lbnRgLCBgRnJhZ21lbnRgLCBvciBgVGV4dGBcblxuICBpZiAoIS8oMXwzfDExKS8udGVzdCh0eXBlKSkge1xuICAgIHJldHVybiB3b3Jkc0FuZENoYXJzO1xuICB9IC8vIEEpIElGIGBub2RlYCBpcyBUZXh0Tm9kZSB0aGF0IGNvbnRhaW5zIGNoYXJhY3RlcnMgb3RoZXIgdGhhbiB3aGl0ZSBzcGFjZS4uLlxuICAvLyAgICBTcGxpdCB0aGUgdGV4dCBjb250ZW50IG9mIHRoZSBub2RlIGludG8gd29yZHMgYW5kL29yIGNoYXJhY3RlcnNcbiAgLy8gICAgcmV0dXJuIGFuIG9iamVjdCBjb250YWluaW5nIHRoZSBzcGxpdCB3b3JkIGFuZCBjaGFyYWN0ZXIgZWxlbWVudHNcblxuXG4gIGlmICh0eXBlID09PSAzICYmIC9cXFMvLnRlc3Qobm9kZS5ub2RlVmFsdWUpKSB7XG4gICAgcmV0dXJuIHNwbGl0V29yZHNBbmRDaGFycyhub2RlLCBzZXR0aW5ncyk7XG4gIH0gLy8gQikgRUxTRSBgbm9kZWAgaXMgYW4gJ0VsZW1lbnQnXG4gIC8vICAgIEl0ZXJhdGUgdGhyb3VnaCBpdHMgY2hpbGQgbm9kZXMsIGNhbGxpbmcgdGhlIGBzcGxpdGAgZnVuY3Rpb25cbiAgLy8gICAgcmVjdXJzaXZlbHkgZm9yIGVhY2ggY2hpbGQgbm9kZS5cblxuXG4gIGNvbnN0IGNoaWxkTm9kZXMgPSB0b0FycmF5KG5vZGUuY2hpbGROb2Rlcyk7XG5cbiAgaWYgKGNoaWxkTm9kZXMubGVuZ3RoKSB7XG4gICAgc2V0KG5vZGUsICdpc1NwbGl0JywgdHJ1ZSk7IC8vIHdlIG5lZWQgdG8gc2V0IGEgZmV3IHN0eWxlcyBvbiBuZXN0ZWQgaHRtbCBlbGVtZW50c1xuXG4gICAgaWYgKCFnZXQobm9kZSkuaXNSb290KSB7XG4gICAgICBub2RlLnN0eWxlLmRpc3BsYXkgPSAnaW5saW5lLWJsb2NrJztcbiAgICAgIG5vZGUuc3R5bGUucG9zaXRpb24gPSAncmVsYXRpdmUnOyAvLyBUbyBtYWludGFpbiBvcmlnaW5hbCBzcGFjaW5nIGFyb3VuZCBuZXN0ZWQgZWxlbWVudHMgd2hlbiB3ZSBhcmVcbiAgICAgIC8vIHNwbGl0dGluZyB0ZXh0IGludG8gbGluZXMsIHdlIG5lZWQgdG8gY2hlY2sgaWYgdGhlIGVsZW1lbnQgc2hvdWxkXG4gICAgICAvLyBoYXZlIGEgc3BhY2UgYmVmb3JlIGFuZCBhZnRlciwgYW5kIHN0b3JlIHRoYXQgdmFsdWUgZm9yIGxhdGVyLlxuICAgICAgLy8gTm90ZTogdGhpcyB3YXMgbmVjZXNzYXJ5IHRvIG1haW50YWluIHRoZSBjb3JyZWN0IHNwYWNpbmcgd2hlbiBuZXN0ZWRcbiAgICAgIC8vIGVsZW1lbnRzIGRvIG5vdCBhbGlnbiB3aXRoIHdvcmQgYm91bmRhcmllcy4gRm9yIGV4YW1wbGUsIGEgbmVzdGVkXG4gICAgICAvLyBlbGVtZW50IG9ubHkgd3JhcHMgcGFydCBvZiBhIHdvcmQuXG5cbiAgICAgIGNvbnN0IG5leHRTaWJsaW5nID0gbm9kZS5uZXh0U2libGluZztcbiAgICAgIGNvbnN0IHByZXZTaWJsaW5nID0gbm9kZS5wcmV2aW91c1NpYmxpbmc7XG4gICAgICBjb25zdCB0ZXh0ID0gbm9kZS50ZXh0Q29udGVudCB8fCAnJztcbiAgICAgIGNvbnN0IHRleHRBZnRlciA9IG5leHRTaWJsaW5nID8gbmV4dFNpYmxpbmcudGV4dENvbnRlbnQgOiAnICc7XG4gICAgICBjb25zdCB0ZXh0QmVmb3JlID0gcHJldlNpYmxpbmcgPyBwcmV2U2libGluZy50ZXh0Q29udGVudCA6ICcgJztcbiAgICAgIHNldChub2RlLCB7XG4gICAgICAgIGlzV29yZEVuZDogL1xccyQvLnRlc3QodGV4dCkgfHwgL15cXHMvLnRlc3QodGV4dEFmdGVyKSxcbiAgICAgICAgaXNXb3JkU3RhcnQ6IC9eXFxzLy50ZXN0KHRleHQpIHx8IC9cXHMkLy50ZXN0KHRleHRCZWZvcmUpXG4gICAgICB9KTtcbiAgICB9XG4gIH0gLy8gSXRlcmF0ZSB0aHJvdWdoIGNoaWxkIG5vZGVzLCBjYWxsaW5nIGBzcGxpdGAgcmVjdXJzaXZlbHlcbiAgLy8gUmV0dXJucyBhbiBvYmplY3QgY29udGFpbmluZyBhbGwgc3BsaXQgd29yZHMgYW5kIGNoYXJzXG5cblxuICByZXR1cm4gY2hpbGROb2Rlcy5yZWR1Y2UoKHJlc3VsdCwgY2hpbGQpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICB3b3JkcyxcbiAgICAgIGNoYXJzXG4gICAgfSA9IHNwbGl0KGNoaWxkLCBzZXR0aW5ncyk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHdvcmRzOiBbLi4ucmVzdWx0LndvcmRzLCAuLi53b3Jkc10sXG4gICAgICBjaGFyczogWy4uLnJlc3VsdC5jaGFycywgLi4uY2hhcnNdXG4gICAgfTtcbiAgfSwgd29yZHNBbmRDaGFycyk7XG59XG5cbi8qKlxuICogR2V0cyB0aGUgaGVpZ2h0IGFuZCBwb3NpdGlvbiBvZiBhbiBlbGVtZW50IHJlbGF0aXZlIHRvIG9mZnNldCBwYXJlbnQuXG4gKiBTaG91bGQgYmUgZXF1aXZhbGVudCB0byBvZmZzZXRUb3AgYW5kIG9mZnNldEhlaWdodCwgYnV0IHdpdGggc3ViLXBpeGVsXG4gKiBwcmVjaXNpb24uXG4gKlxuICogVE9ETyBuZWVkcyB3b3JrXG4gKi9cbmZ1bmN0aW9uIGdldFBvc2l0aW9uKG5vZGUsIGlzV29yZCwgc2V0dGluZ3MsIHNjcm9sbFBvcykge1xuICBpZiAoIXNldHRpbmdzLmFic29sdXRlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHRvcDogaXNXb3JkID8gbm9kZS5vZmZzZXRUb3AgOiBudWxsXG4gICAgfTtcbiAgfVxuXG4gIGNvbnN0IHBhcmVudCA9IG5vZGUub2Zmc2V0UGFyZW50O1xuICBjb25zdCBbc2Nyb2xsWCwgc2Nyb2xsWV0gPSBzY3JvbGxQb3M7XG4gIGxldCBwYXJlbnRYID0gMDtcbiAgbGV0IHBhcmVudFkgPSAwO1xuXG4gIGlmIChwYXJlbnQgJiYgcGFyZW50ICE9PSBkb2N1bWVudC5ib2R5KSB7XG4gICAgY29uc3QgcGFyZW50UmVjdCA9IHBhcmVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICBwYXJlbnRYID0gcGFyZW50UmVjdC54ICsgc2Nyb2xsWDtcbiAgICBwYXJlbnRZID0gcGFyZW50UmVjdC55ICsgc2Nyb2xsWTtcbiAgfVxuXG4gIGNvbnN0IHtcbiAgICB3aWR0aCxcbiAgICBoZWlnaHQsXG4gICAgeCxcbiAgICB5XG4gIH0gPSBub2RlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICBjb25zdCB0b3AgPSB5ICsgc2Nyb2xsWSAtIHBhcmVudFk7XG4gIGNvbnN0IGxlZnQgPSB4ICsgc2Nyb2xsWCAtIHBhcmVudFg7XG4gIHJldHVybiB7XG4gICAgd2lkdGgsXG4gICAgaGVpZ2h0LFxuICAgIHRvcCxcbiAgICBsZWZ0XG4gIH07XG59XG5cbi8qKlxuICogUmVjdXJzaXZlbHkgXCJ1bi1zcGxpdHNcIiB0ZXh0IGludG8gd29yZHMuXG4gKiBUaGlzIGlzIHVzZWQgd2hlbiBzcGxpdHRpbmcgdGV4dCBpbnRvIGxpbmVzIGJ1dCBub3Qgd29yZHMuXG4gKiBXZSBpbml0aWFsbHkgc3BsaXQgdGhlIHRleHQgaW50byB3b3JkcyBzbyB3ZSBjYW4gbWFpbnRhaW4gdGhlIGNvcnJlY3QgbGluZVxuICogYnJlYWtzLiBPbmNlIHRleHQgaGFzIGJlZW4gc3BsaXQgaW50byBsaW5lcywgd2UgXCJ1bi1zcGxpdFwiIHRoZSB3b3Jkcy4uLlxuICogQHBhcmFtIHtFbGVtZW50fVxuICogQHJldHVybiB7dm9pZH1cbiAqL1xuXG5mdW5jdGlvbiB1blNwbGl0V29yZHMoZWxlbWVudCkge1xuICBpZiAoIWdldChlbGVtZW50KS5pc1dvcmQpIHtcbiAgICB0b0FycmF5KGVsZW1lbnQuY2hpbGRyZW4pLmZvckVhY2goY2hpbGQgPT4gdW5TcGxpdFdvcmRzKGNoaWxkKSk7XG4gIH0gZWxzZSB7XG4gICAgcmVtb3ZlKGVsZW1lbnQpO1xuICAgIGVsZW1lbnQucmVwbGFjZVdpdGgoLi4uZWxlbWVudC5jaGlsZE5vZGVzKTtcbiAgfVxufVxuXG5jb25zdCBjcmVhdGVGcmFnbWVudCA9ICgpID0+IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtcblxuZnVuY3Rpb24gcmVwb3NpdGlvbkFmdGVyU3BsaXQoZWxlbWVudCwgc2V0dGluZ3MsIHNjcm9sbFBvcykge1xuICBjb25zdCB0eXBlcyA9IHBhcnNlVHlwZXMoc2V0dGluZ3MudHlwZXMpO1xuICBjb25zdCBUQUdfTkFNRSA9IHNldHRpbmdzLnRhZ05hbWU7XG4gIGNvbnN0IG5vZGVzID0gZWxlbWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnKicpO1xuICBjb25zdCB3b3Jkc0luRWFjaExpbmUgPSBbXTtcbiAgbGV0IHdvcmRzSW5DdXJyZW50TGluZSA9IFtdO1xuICBsZXQgbGluZU9mZnNldFkgPSBudWxsO1xuICBsZXQgZWxlbWVudEhlaWdodDtcbiAgbGV0IGVsZW1lbnRXaWR0aDtcbiAgbGV0IGNvbnRlbnRCb3g7XG4gIGxldCBsaW5lcyA9IFtdO1xuICAvKiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICoqIEdFVCBTVFlMRVMgQU5EIFBPU0lUSU9OU1xuICAgKiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG4gIC8vIFRoZXJlIGlzIG5vIGJ1aWx0LWluIHdheSB0byBkZXRlY3QgbmF0dXJhbCBsaW5lIGJyZWFrcyBpbiB0ZXh0ICh3aGVuIGFcbiAgLy8gYmxvY2sgb2YgdGV4dCB3cmFwcyB0byBmaXQgaXRzIGNvbnRhaW5lcikuIFRvIHNwbGl0IHRleHQgaW50byBsaW5lcywgd2VcbiAgLy8gaGF2ZSB0byBkZXRlY3QgbGluZSBicmVha3MgYnkgY2hlY2tpbmcgdGhlIHRvcCBvZmZzZXQgb2Ygd29yZHMuIFRoaXMgaXNcbiAgLy8gd2h5IHRleHQgd2FzIHNwbGl0IGludG8gd29yZHMgZmlyc3QuIFRvIGFwcGx5IGFic29sdXRlXG4gIC8vIHBvc2l0aW9uaW5nLCBpdHMgYWxzbyBuZWNlc3NhcnkgdG8gcmVjb3JkIHRoZSBzaXplIGFuZCBwb3NpdGlvbiBvZiBldmVyeVxuICAvLyBzcGxpdCBub2RlIChsaW5lcywgd29yZHMsIGNoYXJhY3RlcnMpLlxuICAvLyBUbyBjb25zb2xpZGF0ZSBET00gZ2V0dGluZy9zZXR0aW5ncywgdGhpcyBpcyBhbGwgZG9uZSBhdCB0aGUgc2FtZSB0aW1lLFxuICAvLyBiZWZvcmUgYWN0dWFsbHkgc3BsaXR0aW5nIHRleHQgaW50byBsaW5lcywgd2hpY2ggaW52b2x2ZXMgcmVzdHJ1Y3R1cmluZ1xuICAvLyB0aGUgRE9NIGFnYWluLlxuICAvLyBDYWNoZSB0aGUgZWxlbWVudCdzIHBhcmVudCBhbmQgbmV4dCBzaWJsaW5nIChmb3IgRE9NIHJlbW92YWwpLlxuXG4gIGNvbnN0IHBhcmVudCA9IGVsZW1lbnQucGFyZW50RWxlbWVudDtcbiAgY29uc3QgbmV4dFNpYmxpbmcgPSBlbGVtZW50Lm5leHRFbGVtZW50U2libGluZzsgLy8gYSB3cmFwcGVyIGZvciB0aGUgbmV3IEhUTUwgc3RydWN0dXJlXG5cbiAgY29uc3Qgc3BsaXRUZXh0ID0gY3JlYXRlRnJhZ21lbnQoKTsgLy8gZ2V0IHRoZSBjb21wdXRlZCBzdHlsZSBvYmplY3QgZm9yIHRoZSBlbGVtZW50XG5cbiAgY29uc3QgY3MgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KTtcbiAgY29uc3QgYWxpZ24gPSBjcy50ZXh0QWxpZ247XG4gIGNvbnN0IGZvbnRTaXplID0gcGFyc2VGbG9hdChjcy5mb250U2l6ZSk7XG4gIGNvbnN0IGxpbmVUaHJlc2hvbGQgPSBmb250U2l6ZSAqIDAuMjsgLy8gSUYgdXNpbmcgYWJzb2x1dGUgcG9zaXRpb24uLi5cblxuICBpZiAoc2V0dGluZ3MuYWJzb2x1dGUpIHtcbiAgICAvLyBMZXQgY29udGVudEJveCBiZSBhbiBvYmplY3QgY29udGFpbmluZyB0aGUgd2lkdGggYW5kIG9mZnNldCBwb3NpdGlvbiBvZlxuICAgIC8vIHRoZSBlbGVtZW50J3MgY29udGVudCBib3ggKHRoZSBhcmVhIGluc2lkZSBwYWRkaW5nIGJveCkuIFRoaXMgaXMgbmVlZGVkXG4gICAgLy8gKGZvciBhYnNvbHV0ZSBwb3NpdGlvbmluZykgdG8gc2V0IHRoZSB3aWR0aCBhbmQgcG9zaXRpb24gb2YgbGluZVxuICAgIC8vIGVsZW1lbnRzLCB3aGljaCBoYXZlIG5vdCBiZWVuIGNyZWF0ZWQgeWV0LlxuICAgIGNvbnRlbnRCb3ggPSB7XG4gICAgICBsZWZ0OiBlbGVtZW50Lm9mZnNldExlZnQsXG4gICAgICB0b3A6IGVsZW1lbnQub2Zmc2V0VG9wLFxuICAgICAgd2lkdGg6IGVsZW1lbnQub2Zmc2V0V2lkdGhcbiAgICB9OyAvLyBMZXQgZWxlbWVudFdpZHRoIGFuZCBlbGVtZW50SGVpZ2h0IGJlIHRoZSBhY3R1YWwgd2lkdGgvaGVpZ2h0IG9mIHRoZVxuICAgIC8vIGVsZW1lbnQuIEFsc28gY2hlY2sgaWYgdGhlIGVsZW1lbnQgaGFzIGlubGluZSBoZWlnaHQgb3Igd2lkdGggc3R5bGVzXG4gICAgLy8gYWxyZWFkeSBzZXQuIElmIGl0IGRvZXMsIGNhY2hlIHRob3NlIHZhbHVlcyBmb3IgbGF0ZXIuXG5cbiAgICBlbGVtZW50V2lkdGggPSBlbGVtZW50Lm9mZnNldFdpZHRoO1xuICAgIGVsZW1lbnRIZWlnaHQgPSBlbGVtZW50Lm9mZnNldEhlaWdodDsgLy8gU3RvcmUgdGhlIG9yaWdpbmFsIGlubGluZSBoZWlnaHQgYW5kIHdpZHRoIG9mIHRoZSBlbGVtZW50XG5cbiAgICBzZXQoZWxlbWVudCwge1xuICAgICAgY3NzV2lkdGg6IGVsZW1lbnQuc3R5bGUud2lkdGgsXG4gICAgICBjc3NIZWlnaHQ6IGVsZW1lbnQuc3R5bGUuaGVpZ2h0XG4gICAgfSk7XG4gIH0gLy8gSXRlcmF0ZSBvdmVyIGV2ZXJ5IG5vZGUgaW4gdGhlIHRhcmdldCBlbGVtZW50XG5cblxuICB0b0FycmF5KG5vZGVzKS5mb3JFYWNoKG5vZGUgPT4ge1xuICAgIC8vIG5vZGUgaXMgYSB3b3JkIGVsZW1lbnQgb3IgY3VzdG9tIGh0bWwgZWxlbWVudFxuICAgIGNvbnN0IGlzV29yZExpa2UgPSBub2RlLnBhcmVudEVsZW1lbnQgPT09IGVsZW1lbnQ7IC8vIFRPRE8gbmVlZHMgd29ya1xuICAgIC8vIEdldCB0ZSBzaXplIGFuZCBwb3NpdGlvbiBvZiBzcGxpdCB0ZXh0IG5vZGVzXG5cbiAgICBjb25zdCB7XG4gICAgICB3aWR0aCxcbiAgICAgIGhlaWdodCxcbiAgICAgIHRvcCxcbiAgICAgIGxlZnRcbiAgICB9ID0gZ2V0UG9zaXRpb24obm9kZSwgaXNXb3JkTGlrZSwgc2V0dGluZ3MsIHNjcm9sbFBvcyk7IC8vIElmIGVsZW1lbnQgaXMgYSBgPGJyPmAgdGFnIHJldHVybiBoZXJlXG5cbiAgICBpZiAoL15iciQvaS50ZXN0KG5vZGUubm9kZU5hbWUpKSByZXR1cm47XG5cbiAgICBpZiAodHlwZXMubGluZXMgJiYgaXNXb3JkTGlrZSkge1xuICAgICAgLy8gV2UgY29tcGFyZSB0aGUgdG9wIG9mZnNldCBvZiB0aGUgY3VycmVudCB3b3JkIHRvIHRoZSB0b3Agb2Zmc2V0IG9mXG4gICAgICAvLyBwcmV2aW91cyB3b3JkcyBvbiB0aGUgY3VycmVudCBsaW5lLiBJZiB0aGUgZGlmZmVyZW5jZSBpcyBncmVhdGVyIHRoYW5cbiAgICAgIC8vIG91ciBkZWZpbmVkIHRocmVzaG9sZCAoMjAlKSwgd2UgYXNzdW1lIHRoaXMgd29yZCBpcyBvbiBhIG5ldyBsaW5lLlxuICAgICAgaWYgKGxpbmVPZmZzZXRZID09PSBudWxsIHx8IHRvcCAtIGxpbmVPZmZzZXRZID49IGxpbmVUaHJlc2hvbGQpIHtcbiAgICAgICAgbGluZU9mZnNldFkgPSB0b3A7XG4gICAgICAgIHdvcmRzSW5FYWNoTGluZS5wdXNoKHdvcmRzSW5DdXJyZW50TGluZSA9IFtdKTtcbiAgICAgIH0gLy8gQWRkIHRoZSBjdXJyZW50IHdvcmQgbm9kZSB0byB0aGUgbGluZSBhcnJheVxuXG5cbiAgICAgIHdvcmRzSW5DdXJyZW50TGluZS5wdXNoKG5vZGUpO1xuICAgIH0gLy8gRU5EIElGXG5cblxuICAgIGlmIChzZXR0aW5ncy5hYnNvbHV0ZSkge1xuICAgICAgLy8gU3RvcmUgdGhlIHNpemUgYW5kIHBvc2l0aW9uIHNwbGl0IHRleHQgbm9kZXNcbiAgICAgIHNldChub2RlLCB7XG4gICAgICAgIHRvcCxcbiAgICAgICAgbGVmdCxcbiAgICAgICAgd2lkdGgsXG4gICAgICAgIGhlaWdodFxuICAgICAgfSk7XG4gICAgfVxuICB9KTsgLy8gRU5EIExPT1BcbiAgLy8gUmVtb3ZlIHRoZSBlbGVtZW50IGZyb20gdGhlIERPTVxuXG4gIGlmIChwYXJlbnQpIHtcbiAgICBwYXJlbnQucmVtb3ZlQ2hpbGQoZWxlbWVudCk7XG4gIH1cbiAgLyoqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqKiBTUExJVCBMSU5FU1xuICAgKiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cblxuICBpZiAodHlwZXMubGluZXMpIHtcbiAgICAvLyBJdGVyYXRlIG92ZXIgbGluZXMgb2YgdGV4dCAoc2VlIDExIGIpXG4gICAgLy8gTGV0IGBsaW5lYCBiZSB0aGUgYXJyYXkgb2Ygd29yZHMgaW4gdGhlIGN1cnJlbnQgbGluZS5cbiAgICAvLyBSZXR1cm4gYW4gYXJyYXkgb2YgdGhlIHdyYXBwZWQgbGluZSBlbGVtZW50cyAobGluZUVsZW1lbnRzKVxuICAgIGxpbmVzID0gd29yZHNJbkVhY2hMaW5lLm1hcCh3b3Jkc0luVGhpc0xpbmUgPT4ge1xuICAgICAgLy8gQ3JlYXRlIGFuIGVsZW1lbnQgdG8gd3JhcCB0aGUgY3VycmVudCBsaW5lLlxuICAgICAgY29uc3QgbGluZUVsZW1lbnQgPSBjcmVhdGVFbGVtZW50KFRBR19OQU1FLCB7XG4gICAgICAgIGNsYXNzOiBgJHtzZXR0aW5ncy5zcGxpdENsYXNzfSAke3NldHRpbmdzLmxpbmVDbGFzc31gLFxuICAgICAgICBzdHlsZTogYGRpc3BsYXk6IGJsb2NrOyB0ZXh0LWFsaWduOiAke2FsaWdufTsgd2lkdGg6IDEwMCU7YFxuICAgICAgfSk7XG4gICAgICBzZXQobGluZUVsZW1lbnQsICdpc0xpbmUnLCB0cnVlKTtcbiAgICAgIGNvbnN0IGxpbmVEaW1lbnNpb25zID0ge1xuICAgICAgICBoZWlnaHQ6IDAsXG4gICAgICAgIHRvcDogMWU0XG4gICAgICB9OyAvLyBBcHBlbmQgdGhlIGBsaW5lRWxlbWVudGAgdG8gYGNvbnRhaW5lcmBcblxuICAgICAgc3BsaXRUZXh0LmFwcGVuZENoaWxkKGxpbmVFbGVtZW50KTsgLy8gSXRlcmF0ZSBvdmVyIHRoZSB3b3JkLWxldmVsIGVsZW1lbnRzIGluIHRoZSBjdXJyZW50IGxpbmUuXG4gICAgICAvLyBOb3RlOiB3b3JkT3JFbGVtZW50IGNhbiBlaXRoZXIgYmUgYSB3b3JkIG5vZGUgb3IgbmVzdGVkIGVsZW1lbnRcblxuICAgICAgd29yZHNJblRoaXNMaW5lLmZvckVhY2goKHdvcmRPckVsZW1lbnQsIGlkeCwgYXJyKSA9PiB7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICBpc1dvcmRFbmQsXG4gICAgICAgICAgdG9wLFxuICAgICAgICAgIGhlaWdodFxuICAgICAgICB9ID0gZ2V0KHdvcmRPckVsZW1lbnQpO1xuICAgICAgICBjb25zdCBuZXh0ID0gYXJyW2lkeCArIDFdOyAvLyBEZXRlcm1pbmUgbGluZSBoZWlnaHQgLyB5LXBvc2l0aW9uXG4gICAgICAgIC8vIHdlIHVzZSB0aGUgaGVpZ2h0IGFuZCBvZmZzZXRUb3Agb2YgdGhlIHdvcmRzIHdoaWNoIHdlIGFscmVhZHlcbiAgICAgICAgLy8gcmVjb3JkZWQuIEJlY2F1c2UgY3VzdG9tIG5lc3RlZCBlbGVtZW50cyBjb3VsZCBoYXZlIHRoZWlyIG93blxuICAgICAgICAvLyBzdHlsZXMsIHRoZSB3b3JkcyBvbiBhIGxpbmUgbWF5IG5vdCBhbGwgYmUgdGhlIHNhbWUgaGVpZ2h0IG9yXG4gICAgICAgIC8vIHkgcG9zaXRpb24uIFNvIHdlIHRha2UgdGhlIGdyZWF0ZXN0IGhlaWdodCAvIHkgLSBvZmZzZXQgb2YgdGhlXG4gICAgICAgIC8vIHdvcmRzIG9uIHRoaXMgbGluZS5cblxuICAgICAgICBsaW5lRGltZW5zaW9ucy5oZWlnaHQgPSBNYXRoLm1heChsaW5lRGltZW5zaW9ucy5oZWlnaHQsIGhlaWdodCk7XG4gICAgICAgIGxpbmVEaW1lbnNpb25zLnRvcCA9IE1hdGgubWluKGxpbmVEaW1lbnNpb25zLnRvcCwgdG9wKTsgLy8gYXBwZW5kIHRoZSBjdXJyZW50IHdvcmQvZWxlbWVudFxuXG4gICAgICAgIGxpbmVFbGVtZW50LmFwcGVuZENoaWxkKHdvcmRPckVsZW1lbnQpOyAvLyBEZXRlcm1pbmUgaWYgdGhlcmUgc2hvdWxkIHNwYWNlIGFmdGVyIHRoZSBjdXJyZW50IGVsZW1lbnQuLi5cbiAgICAgICAgLy8gSWYgdGhpcyBpcyBub3QgdGhlIGxhc3Qgd29yZCBvbiB0aGUgY3VycmVudCBsaW5lLlxuICAgICAgICAvLyBUT0RPIC0gbG9naWMgZm9yIGhhbmRpbmcgc3BhY2luZyBjYW4gYmUgaW1wcm92ZWRcblxuICAgICAgICBpZiAoaXNXb3JkRW5kICYmIGdldChuZXh0KS5pc1dvcmRTdGFydCkge1xuICAgICAgICAgIGxpbmVFbGVtZW50LmFwcGVuZCgnICcpO1xuICAgICAgICB9XG4gICAgICB9KTsgLy8gRU5EIExPT1BcblxuICAgICAgaWYgKHNldHRpbmdzLmFic29sdXRlKSB7XG4gICAgICAgIHNldChsaW5lRWxlbWVudCwge1xuICAgICAgICAgIGhlaWdodDogbGluZURpbWVuc2lvbnMuaGVpZ2h0LFxuICAgICAgICAgIHRvcDogbGluZURpbWVuc2lvbnMudG9wXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbGluZUVsZW1lbnQ7XG4gICAgfSk7IC8vIEVORCBMT09QXG5cbiAgICBpZiAoIXR5cGVzLndvcmRzKSB7XG4gICAgICB1blNwbGl0V29yZHMoc3BsaXRUZXh0KTtcbiAgICB9IC8vIDEwLiBJbnNlcnQgdGhlIG5ldyBjb250YWluZXJcblxuXG4gICAgZWxlbWVudC5yZXBsYWNlQ2hpbGRyZW4oc3BsaXRUZXh0KTtcbiAgfVxuICAvKiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICoqICBTRVQgQUJTT0xVVEUgUE9TSVRJT05cbiAgICoqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuICAvLyBBcHBseSBhYnNvbHV0ZSBwb3NpdGlvbmluZyB0byBhbGwgY2hpbGQgZWxlbWVudHMgb2YgdGhlIHRhcmdldCBlbGVtZW50LlxuICAvLyBUaGlzIGluY2x1ZGVzIHNwbGl0IGxpbmVzLCB3b3JkcywgY2hhcnMsIGFuZCBjdXN0b20gSFRNTCBlbGVtZW50cyB0aGF0IHdlcmVcbiAgLy8gaW5jbHVkZWQgYnkgdGhlIHVzZXIuIFRoZSBzaXplIGFuZCBwb3NpdGlvbiBvZiBjaGlsZCBlbGVtZW50cyBoYXMgYWxyZWFkeVxuICAvLyBiZWVuIHJlY29yZGVkIGJlZm9yZSBzcGxpdHRpbmcgdGV4dCBpbnRvIGxpbmVzLlxuXG5cbiAgaWYgKHNldHRpbmdzLmFic29sdXRlKSB7XG4gICAgLy8gU2V0IHRoZSB3aWR0aC9oZWlnaHQgb2YgdGhlIHBhcmVudCBlbGVtZW50IHNvIGl0IGRvZXMgbm90IGNvbGxhcHNlXG4gICAgLy8gd2hlbiBpdHMgY2hpbGRyZW4gYXJlIHNldCB0byBhYnNvbHV0ZSBwb3NpdGlvbi5cbiAgICBlbGVtZW50LnN0eWxlLndpZHRoID0gYCR7ZWxlbWVudC5zdHlsZS53aWR0aCB8fCBlbGVtZW50V2lkdGh9cHhgO1xuICAgIGVsZW1lbnQuc3R5bGUuaGVpZ2h0ID0gYCR7ZWxlbWVudEhlaWdodH1weGA7IC8vIEl0ZXJhdGUgb3ZlciBhbGwgY2hpbGQgZWxlbWVudHNcblxuICAgIHRvQXJyYXkobm9kZXMpLmZvckVhY2gobm9kZSA9PiB7XG4gICAgICBjb25zdCB7XG4gICAgICAgIGlzTGluZSxcbiAgICAgICAgdG9wLFxuICAgICAgICBsZWZ0LFxuICAgICAgICB3aWR0aCxcbiAgICAgICAgaGVpZ2h0XG4gICAgICB9ID0gZ2V0KG5vZGUpO1xuICAgICAgY29uc3QgcGFyZW50RGF0YSA9IGdldChub2RlLnBhcmVudEVsZW1lbnQpO1xuICAgICAgY29uc3QgaXNDaGlsZE9mTGluZU5vZGUgPSAhaXNMaW5lICYmIHBhcmVudERhdGEuaXNMaW5lOyAvLyBTZXQgdGhlIHRvcCBwb3NpdGlvbiBvZiB0aGUgY3VycmVudCBub2RlLlxuICAgICAgLy8gLT4gSWYgYG5vZGVgIGEgbGluZSBlbGVtZW50LCB3ZSB1c2UgdGhlIHRvcCBvZmZzZXQgb2YgaXRzIGZpcnN0IGNoaWxkXG4gICAgICAvLyAtPiBJZiBgbm9kZWAgdGhlIGNoaWxkIG9mIGxpbmUgZWxlbWVudCwgdGhlbiBpdHMgdG9wIG9mZnNldCBpcyB6ZXJvXG5cbiAgICAgIG5vZGUuc3R5bGUudG9wID0gYCR7aXNDaGlsZE9mTGluZU5vZGUgPyB0b3AgLSBwYXJlbnREYXRhLnRvcCA6IHRvcH1weGA7IC8vIFNldCB0aGUgbGVmdCBwb3NpdGlvbiBvZiB0aGUgY3VycmVudCBub2RlLlxuICAgICAgLy8gLT4gSUYgYG5vZGVgIGlzIGEgbGluZSBlbGVtZW50LCB0aGlzIGlzIGVxdWFsIHRvIHRoZSBwb3NpdGlvbiBsZWZ0IG9mXG4gICAgICAvLyAgICB0aGUgY29udGVudCBib3ggb2YgdGhlIHBhcmVudCBlbGVtZW50XG4gICAgICAvLyAtPiBJRiBgbm9kZWAgaXMgdGhlIGNoaWxkIG9mIGEgbGluZSBlbGVtZW50LCB0aGUgdmFsdWUgaGFzIHRvIGFkanVzdGVkXG4gICAgICAvLyAgICBzbyBpdHMgcmVsYXRpdmUgdG8gdGhlIGxpbmUgZWxlbWVudFxuXG4gICAgICBub2RlLnN0eWxlLmxlZnQgPSBpc0xpbmUgPyBgJHtjb250ZW50Qm94LmxlZnR9cHhgIDogYCR7bGVmdCAtIChpc0NoaWxkT2ZMaW5lTm9kZSA/IGNvbnRlbnRCb3gubGVmdCA6IDApfXB4YDsgLy8gU2V0IHRoZSBoZWlnaHQgb2YgdGhlIGN1cnJlbnQgbm9kZSB0byB0aGUgY2FjaGVkIHZhbHVlLlxuXG4gICAgICBub2RlLnN0eWxlLmhlaWdodCA9IGAke2hlaWdodH1weGA7IC8vICBTZXQgdGhlIHdpZHRoIG9mIHRoZSBjdXJyZW50IG5vZGUuXG4gICAgICAvLyAgSWYgaXRzIGEgbGluZSBlbGVtZW50LCB3aWR0aCBpcyBlcXVhbCB0byB0aGUgd2lkdGggb2YgdGhlIGNvbnRlbnRCb3guXG5cbiAgICAgIG5vZGUuc3R5bGUud2lkdGggPSBpc0xpbmUgPyBgJHtjb250ZW50Qm94LndpZHRofXB4YCA6IGAke3dpZHRofXB4YDsgLy8gRmluYWxseSwgc2V0IHRoZSBub2RlJ3MgcG9zaXRpb24gdG8gYWJzb2x1dGUuXG5cbiAgICAgIG5vZGUuc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xuICAgIH0pO1xuICB9IC8vIGVuZCBpZjtcbiAgLy8gMTQuIFJlLWF0dGFjaCB0aGUgZWxlbWVudCB0byB0aGUgRE9NXG5cblxuICBpZiAocGFyZW50KSB7XG4gICAgaWYgKG5leHRTaWJsaW5nKSBwYXJlbnQuaW5zZXJ0QmVmb3JlKGVsZW1lbnQsIG5leHRTaWJsaW5nKTtlbHNlIHBhcmVudC5hcHBlbmRDaGlsZChlbGVtZW50KTtcbiAgfVxuXG4gIHJldHVybiBsaW5lcztcbn1cblxubGV0IF9kZWZhdWx0cyA9IGV4dGVuZChkZWZhdWx0cywge30pO1xuXG5jbGFzcyBTcGxpdFR5cGUge1xuICAvKipcbiAgICogVGhlIGludGVybmFsIGRhdGEgc3RvcmVcbiAgICovXG4gIHN0YXRpYyBnZXQgZGF0YSgpIHtcbiAgICByZXR1cm4gY2FjaGU7XG4gIH1cbiAgLyoqXG4gICAqIFRoZSBkZWZhdWx0IHNldHRpbmdzIGZvciBhbGwgc3BsaXRUeXBlIGluc3RhbmNlc1xuICAgKiBAc3RhdGljXG4gICAqL1xuXG5cbiAgc3RhdGljIGdldCBkZWZhdWx0cygpIHtcbiAgICByZXR1cm4gX2RlZmF1bHRzO1xuICB9XG4gIC8qKlxuICAgKiBTZXRzIHRoZSBkZWZhdWx0IHNldHRpbmdzIGZvciBhbGwgU3BsaXRUeXBlIGluc3RhbmNlcy5cbiAgICpcbiAgICogU2V0dGluZyBgU3BsaXRUeXBlLmRlZmF1bHRzYCB0byBhbiBvYmplY3Qgd2lsbCBtZXJnZSB0aGF0IG9iamVjdCB3aXRoIHRoZVxuICAgKiBleGlzdGluZyBkZWZhdWx0cy5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IHNldHRpbmdzIGFuIG9iamVjdCBjb250YWluaW5nIHRoZSBzZXR0aW5ncyB0byBvdmVycmlkZVxuICAgKiBAZGVwcmVjYXRlZFxuICAgKiBAc3RhdGljXG4gICAqIEBleGFtcGxlXG4gICAqIFNwbGl0VHlwZS5kZWZhdWx0cyA9IHsgXCJwb3NpdGlvblwiOiBcImFic29sdXRlXCIgfVxuICAgKi9cblxuXG4gIHN0YXRpYyBzZXQgZGVmYXVsdHMob3B0aW9ucykge1xuICAgIF9kZWZhdWx0cyA9IGV4dGVuZChfZGVmYXVsdHMsIHBhcnNlU2V0dGluZ3Mob3B0aW9ucykpO1xuICB9XG4gIC8qKlxuICAgKiBTZXRzIHRoZSBkZWZhdWx0IHNldHRpbmdzIGZvciBhbGwgU3BsaXRUeXBlIGluc3RhbmNlcy5cbiAgICogVGhlIHByb3ZpZGVkIG9iamVjdCB3aWxsIGJlIG1lcmdlZCB3aXRoIHRoZSBleGlzdGluZyBkZWZhdWx0cyBvYmplY3RzLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gc2V0dGluZ3MgYW4gb2JqZWN0IGNvbnRhaW5pbmcgdGhlIHNldHRpbmdzIHRvIG92ZXJyaWRlXG4gICAqIEByZXR1cm5zIHtPYmplY3R9IHRoZSBuZXcgZGVmYXVsdCBzZXR0aW5nc1xuICAgKiBAcHVibGljXG4gICAqIEBzdGF0aWNcbiAgICogQGV4YW1wbGVcbiAgICogU3BsaXRUeXBlLnNldERlZmF1bHRzKHsgXCJwb3NpdGlvblwiOiBcImFic29sdXRlXCIgfSlcbiAgICovXG5cblxuICBzdGF0aWMgc2V0RGVmYXVsdHMob3B0aW9ucykge1xuICAgIF9kZWZhdWx0cyA9IGV4dGVuZChfZGVmYXVsdHMsIHBhcnNlU2V0dGluZ3Mob3B0aW9ucykpO1xuICAgIHJldHVybiBkZWZhdWx0cztcbiAgfVxuICAvKipcbiAgICogUmV2ZXJ0IHRhcmdldCBlbGVtZW50cyB0byB0aGVpciBvcmlnaW5hbCBodG1sIGNvbnRlbnRcbiAgICogSGFzIG5vIGVmZmVjdCBvbiB0aGF0XG4gICAqXG4gICAqIEBwYXJhbSB7YW55fSBlbGVtZW50cyBUaGUgdGFyZ2V0IGVsZW1lbnRzIHRvIHJldmVydC4gT25lIG9mOlxuICAgKiAgLSB7c3RyaW5nfSBBIGNzcyBzZWxlY3RvclxuICAgKiAgLSB7SFRNTEVsZW1lbnR9IEEgc2luZ2xlIGVsZW1lbnRcbiAgICogLSAge05vZGVMaXN0fSBBIE5vZGVMaXN0IG9yIGNvbGxlY3Rpb25cbiAgICogIC0ge0hUTUxFbGVtZW50W119IEFuIGFycmF5IG9mIEVsZW1lbnRzXG4gICAqIC0gIHtBcnJheTxIVE1MRWxlbWVudHxOb2RlTGlzdHxIVE1MRWxlbWVudFtdPn0gQSBuZXN0ZWQgYXJyYXkgb2YgZWxlbWVudHNcbiAgICogQHN0YXRpY1xuICAgKi9cblxuXG4gIHN0YXRpYyByZXZlcnQoZWxlbWVudHMpIHtcbiAgICBnZXRUYXJnZXRFbGVtZW50cyhlbGVtZW50cykuZm9yRWFjaChlbGVtZW50ID0+IHtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgaXNTcGxpdCxcbiAgICAgICAgaHRtbCxcbiAgICAgICAgY3NzV2lkdGgsXG4gICAgICAgIGNzc0hlaWdodFxuICAgICAgfSA9IGdldChlbGVtZW50KTtcblxuICAgICAgaWYgKGlzU3BsaXQpIHtcbiAgICAgICAgZWxlbWVudC5pbm5lckhUTUwgPSBodG1sO1xuICAgICAgICBlbGVtZW50LnN0eWxlLndpZHRoID0gY3NzV2lkdGggfHwgJyc7XG4gICAgICAgIGVsZW1lbnQuc3R5bGUuaGVpZ2h0ID0gY3NzSGVpZ2h0IHx8ICcnO1xuICAgICAgICByZW1vdmUoZWxlbWVudCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgU3BsaXRUeXBlIGluc3RhbmNlXG4gICAqIFRoaXMgc3RhdGljIG1ldGhvZCBwcm92aWRlcyBhIHdheSB0byBjcmVhdGUgYSBgU3BsaXRUeXBlYCBpbnN0YW5jZSB3aXRob3V0XG4gICAqIHVzaW5nIHRoZSBgbmV3YCBrZXl3b3JkLlxuICAgKlxuICAgKiBAcGFyYW0ge2FueX0gdGFyZ2V0IFRoZSB0YXJnZXQgZWxlbWVudHMgdG8gc3BsaXQuIE9uZSBvZjpcbiAgICogIC0ge3N0cmluZ30gQSBjc3Mgc2VsZWN0b3JcbiAgICogIC0ge0hUTUxFbGVtZW50fSBBIHNpbmdsZSBlbGVtZW50XG4gICAqIC0gIHtOb2RlTGlzdH0gQSBOb2RlTGlzdCBvciBjb2xsZWN0aW9uXG4gICAqICAtIHtIVE1MRWxlbWVudFtdfSBBbiBhcnJheSBvZiBFbGVtZW50c1xuICAgKiAtICB7QXJyYXk8SFRNTEVsZW1lbnR8Tm9kZUxpc3R8SFRNTEVsZW1lbnRbXT59IEEgbmVzdGVkIGFycmF5IG9mIGVsZW1lbnRzXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gU2V0dGluZ3MgZm9yIHRoZSBTcGxpdFR5cGUgaW5zdGFuY2VcbiAgICogQHJldHVybiB7U3BsaXRUeXBlfSB0aGUgU3BsaXRUeXBlIGluc3RhbmNlXG4gICAqIEBzdGF0aWNcbiAgICovXG5cblxuICBzdGF0aWMgY3JlYXRlKHRhcmdldCwgb3B0aW9ucykge1xuICAgIHJldHVybiBuZXcgU3BsaXRUeXBlKHRhcmdldCwgb3B0aW9ucyk7XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgYFNwbGl0VHlwZWAgaW5zdGFuY2VcbiAgICpcbiAgICogQHBhcmFtIHthbnl9IGVsZW1lbnRzIFRoZSB0YXJnZXQgZWxlbWVudHMgdG8gc3BsaXQuIE9uZSBvZjpcbiAgICogIC0ge3N0cmluZ30gQSBjc3Mgc2VsZWN0b3JcbiAgICogIC0ge0hUTUxFbGVtZW50fSBBIHNpbmdsZSBlbGVtZW50XG4gICAqIC0gIHtOb2RlTGlzdH0gQSBOb2RlTGlzdCBvciBjb2xsZWN0aW9uXG4gICAqICAtIHtIVE1MRWxlbWVudFtdfSBBbiBhcnJheSBvZiBFbGVtZW50c1xuICAgKiAtICB7QXJyYXk8SFRNTEVsZW1lbnR8Tm9kZUxpc3R8SFRNTEVsZW1lbnRbXT59IEEgbmVzdGVkIGFycmF5IG9mIGVsZW1lbnRzXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gU2V0dGluZ3MgZm9yIHRoZSBTcGxpdFR5cGUgaW5zdGFuY2VcbiAgICovXG5cblxuICBjb25zdHJ1Y3RvcihlbGVtZW50cywgb3B0aW9ucykge1xuICAgIHRoaXMuaXNTcGxpdCA9IGZhbHNlO1xuICAgIHRoaXMuc2V0dGluZ3MgPSBleHRlbmQoX2RlZmF1bHRzLCBwYXJzZVNldHRpbmdzKG9wdGlvbnMpKTtcbiAgICB0aGlzLmVsZW1lbnRzID0gZ2V0VGFyZ2V0RWxlbWVudHMoZWxlbWVudHMpOyAvLyBSZXZlcnQgdGFyZ2V0IGVsZW1lbnRzIChpZiB0aGV5IGFyZSBhbHJlYWR5IHNwbGl0KVxuICAgIC8vIE5vdGU6IHdlIG5lZWQgdG8gY2FsbCBgcmV2ZXJ0YCBpbiB0aGUgY29uc3RydWN0b3IgYmVmb3JlIGNhY2hpbmcgdGhlXG4gICAgLy8gb3JpZ2luYWwgaHRtbCBjb250ZW50IG9mIHRoZSB0YXJnZXQgZWxlbWVudHMuXG5cbiAgICB0aGlzLnJldmVydCgpOyAvLyBTdG9yZSB0aGUgb3JpZ2luYWwgaHRtbCBjb250ZW50IG9mIGVhY2ggdGFyZ2V0IGVsZW1lbnRcblxuICAgIHRoaXMuZWxlbWVudHMuZm9yRWFjaChlbGVtZW50ID0+IHtcbiAgICAgIHNldChlbGVtZW50LCAnaHRtbCcsIGVsZW1lbnQuaW5uZXJIVE1MKTtcbiAgICB9KTsgLy8gU3RhcnQgdGhlIHNwbGl0IHByb2Nlc3NcblxuICAgIHRoaXMuc3BsaXQoKTtcbiAgfVxuICAvKipcbiAgICogU3BsaXRzIHRoZSB0ZXh0IGluIGFsbCB0YXJnZXQgZWxlbWVudHMuIFRoaXMgbWV0aG9kIGlzIGNhbGxlZFxuICAgKiBhdXRvbWF0aWNhbGx5IHdoZW4gYSBuZXcgU3BsaXRUeXBlIGluc3RhbmNlIGlzIGNyZWF0ZWQuIEl0IGNhbiBhbHNvIGJlXG4gICAqIGNhbGxlZCBtYW51YWxseSB0byByZS1zcGxpdCB0ZXh0IHdpdGggbmV3IG9wdGlvbnMuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gICAqIEBwdWJsaWNcbiAgICovXG5cblxuICBzcGxpdChvcHRpb25zKSB7XG4gICAgLy8gUmV2ZXJ0IHRhcmdldCBlbGVtZW50cyAoaWYgdGhleSBhcmUgYWxyZWFkeSBzcGxpdClcbiAgICAvLyBOb3RlOiByZXZlcnQgd2FzIGFscmVhZHkgY2FsbGVkIG9uY2UgaW4gdGhlIGNvbnN0cnVjdG9yLiBIb3dldmVyLCB3ZVxuICAgIC8vIG5lZWQgdG8gY2FsbCBpdCBhZ2FpbiBoZXJlIHNvIHRleHQgaXMgcmV2ZXJ0ZWQgd2hlbiB0aGUgdXNlciBtYW51YWxseVxuICAgIC8vIGNhbGxzIHRoZSBgc3BsaXRgIG1ldGhvZCB0byByZS1zcGxpdCB0ZXh0LlxuICAgIHRoaXMucmV2ZXJ0KCk7IC8vIENyZWF0ZSBhcnJheXMgdG8gaG9sZCB0aGUgc3BsaXQgbGluZXMsIHdvcmRzLCBhbmQgY2hhcmFjdGVyc1xuXG4gICAgdGhpcy5saW5lcyA9IFtdO1xuICAgIHRoaXMud29yZHMgPSBbXTtcbiAgICB0aGlzLmNoYXJzID0gW107IC8vIGNhY2hlIHZlcnRpY2FsIHNjcm9sbCBwb3NpdGlvbiBiZWZvcmUgc3BsaXR0aW5nXG5cbiAgICBjb25zdCBzY3JvbGxQb3MgPSBbd2luZG93LnBhZ2VYT2Zmc2V0LCB3aW5kb3cucGFnZVlPZmZzZXRdOyAvLyBJZiBuZXcgb3B0aW9ucyB3ZXJlIHBhc3NlZCBpbnRvIHRoZSBgc3BsaXQoKWAgbWV0aG9kLCB1cGRhdGUgc2V0dGluZ3NcblxuICAgIGlmIChvcHRpb25zICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMuc2V0dGluZ3MgPSBleHRlbmQodGhpcy5zZXR0aW5ncywgcGFyc2VTZXR0aW5ncyhvcHRpb25zKSk7XG4gICAgfVxuXG4gICAgY29uc3QgdHlwZXMgPSBwYXJzZVR5cGVzKHRoaXMuc2V0dGluZ3MudHlwZXMpOyAvLyBJZiB0aGUgYHR5cGVzYCBvcHRpb24gaXMgc2V0IHRvIGFuIGVtcHR5IGFycmF5LCB0ZXh0IHdpbGwgbm90IGJlIHNwbGl0LlxuICAgIC8vIEBleGFtcGxlIG5ldyBTcGxpdFR5cGUoJyN0YXJnZXQnLCB7IHR5cGVzOiBbXSB9KVxuXG4gICAgaWYgKHR5cGVzLm5vbmUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIFNwbGl0IHRleHQgaW4gZWFjaCB0YXJnZXQgZWxlbWVudFxuXG5cbiAgICB0aGlzLmVsZW1lbnRzLmZvckVhY2goZWxlbWVudCA9PiB7XG4gICAgICAvLyBBZGQgdGhlIHNwbGl0IHRleHQgbm9kZXMgZnJvbSB0aGlzIGVsZW1lbnQgdG8gdGhlIGFycmF5cyBvZiBhbGwgc3BsaXRcbiAgICAgIC8vIHRleHQgbm9kZXMgZm9yIHRoaXMgaW5zdGFuY2UuXG4gICAgICBzZXQoZWxlbWVudCwgJ2lzUm9vdCcsIHRydWUpO1xuICAgICAgY29uc3Qge1xuICAgICAgICB3b3JkcyxcbiAgICAgICAgY2hhcnNcbiAgICAgIH0gPSBzcGxpdChlbGVtZW50LCB0aGlzLnNldHRpbmdzKTtcbiAgICAgIHRoaXMud29yZHMgPSBbLi4udGhpcy53b3JkcywgLi4ud29yZHNdO1xuICAgICAgdGhpcy5jaGFycyA9IFsuLi50aGlzLmNoYXJzLCAuLi5jaGFyc107XG4gICAgfSk7XG4gICAgdGhpcy5lbGVtZW50cy5mb3JFYWNoKGVsZW1lbnQgPT4ge1xuICAgICAgaWYgKHR5cGVzLmxpbmVzIHx8IHRoaXMuc2V0dGluZ3MuYWJzb2x1dGUpIHtcbiAgICAgICAgY29uc3QgbGluZXMgPSByZXBvc2l0aW9uQWZ0ZXJTcGxpdChlbGVtZW50LCB0aGlzLnNldHRpbmdzLCBzY3JvbGxQb3MpO1xuICAgICAgICB0aGlzLmxpbmVzID0gWy4uLnRoaXMubGluZXMsIC4uLmxpbmVzXTtcbiAgICAgIH1cbiAgICB9KTsgLy8gU2V0IGlzU3BsaXQgdG8gdHJ1ZSBmb3IgdGhlIFNwbGl0VHlwZSBpbnN0YW5jZVxuXG4gICAgdGhpcy5pc1NwbGl0ID0gdHJ1ZTsgLy8gU2V0IHNjcm9sbCBwb3NpdGlvbiB0byBjYWNoZWQgdmFsdWUuXG5cbiAgICB3aW5kb3cuc2Nyb2xsVG8oc2Nyb2xsUG9zWzBdLCBzY3JvbGxQb3NbMV0pOyAvLyBDbGVhbiB1cCBzdG9yZWQgZGF0YVxuXG4gICAgY2xlYW51cCgpO1xuICB9XG4gIC8qKlxuICAgKiBSZXZlcnRzIHRhcmdldCBlbGVtZW50KHMpIGJhY2sgdG8gdGhlaXIgb3JpZ2luYWwgaHRtbCBjb250ZW50XG4gICAqIERlbGV0ZXMgYWxsIHN0b3JlZCBkYXRhIGFzc29jaWF0ZWQgd2l0aCB0aGUgdGFyZ2V0IGVsZW1lbnRzXG4gICAqIFJlc2V0cyB0aGUgcHJvcGVydGllcyBvbiB0aGUgc3BsaXRUeXBlIGluc3RhbmNlXG4gICAqXG4gICAqIEBwdWJsaWNcbiAgICovXG5cblxuICByZXZlcnQoKSB7XG4gICAgaWYgKHRoaXMuaXNTcGxpdCkge1xuICAgICAgLy8gUmVzZXQgaW5zdGFuY2UgcHJvcGVydGllcyBpZiBuZWNlc3NhcnlcbiAgICAgIHRoaXMubGluZXMgPSBudWxsO1xuICAgICAgdGhpcy53b3JkcyA9IG51bGw7XG4gICAgICB0aGlzLmNoYXJzID0gbnVsbDtcbiAgICAgIHRoaXMuaXNTcGxpdCA9IGZhbHNlO1xuICAgIH1cblxuICAgIFNwbGl0VHlwZS5yZXZlcnQodGhpcy5lbGVtZW50cyk7XG4gIH1cblxufVxuXG5leHBvcnQgeyBTcGxpdFR5cGUgYXMgZGVmYXVsdCB9O1xuIiwiZnVuY3Rpb24gRSAoKSB7XG4gIC8vIEtlZXAgdGhpcyBlbXB0eSBzbyBpdCdzIGVhc2llciB0byBpbmhlcml0IGZyb21cbiAgLy8gKHZpYSBodHRwczovL2dpdGh1Yi5jb20vbGlwc21hY2sgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vc2NvdHRjb3JnYW4vdGlueS1lbWl0dGVyL2lzc3Vlcy8zKVxufVxuXG5FLnByb3RvdHlwZSA9IHtcbiAgb246IGZ1bmN0aW9uIChuYW1lLCBjYWxsYmFjaywgY3R4KSB7XG4gICAgdmFyIGUgPSB0aGlzLmUgfHwgKHRoaXMuZSA9IHt9KTtcblxuICAgIChlW25hbWVdIHx8IChlW25hbWVdID0gW10pKS5wdXNoKHtcbiAgICAgIGZuOiBjYWxsYmFjayxcbiAgICAgIGN0eDogY3R4XG4gICAgfSk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfSxcblxuICBvbmNlOiBmdW5jdGlvbiAobmFtZSwgY2FsbGJhY2ssIGN0eCkge1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICBmdW5jdGlvbiBsaXN0ZW5lciAoKSB7XG4gICAgICBzZWxmLm9mZihuYW1lLCBsaXN0ZW5lcik7XG4gICAgICBjYWxsYmFjay5hcHBseShjdHgsIGFyZ3VtZW50cyk7XG4gICAgfTtcblxuICAgIGxpc3RlbmVyLl8gPSBjYWxsYmFja1xuICAgIHJldHVybiB0aGlzLm9uKG5hbWUsIGxpc3RlbmVyLCBjdHgpO1xuICB9LFxuXG4gIGVtaXQ6IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdmFyIGRhdGEgPSBbXS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XG4gICAgdmFyIGV2dEFyciA9ICgodGhpcy5lIHx8ICh0aGlzLmUgPSB7fSkpW25hbWVdIHx8IFtdKS5zbGljZSgpO1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIgbGVuID0gZXZ0QXJyLmxlbmd0aDtcblxuICAgIGZvciAoaTsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBldnRBcnJbaV0uZm4uYXBwbHkoZXZ0QXJyW2ldLmN0eCwgZGF0YSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG5cbiAgb2ZmOiBmdW5jdGlvbiAobmFtZSwgY2FsbGJhY2spIHtcbiAgICB2YXIgZSA9IHRoaXMuZSB8fCAodGhpcy5lID0ge30pO1xuICAgIHZhciBldnRzID0gZVtuYW1lXTtcbiAgICB2YXIgbGl2ZUV2ZW50cyA9IFtdO1xuXG4gICAgaWYgKGV2dHMgJiYgY2FsbGJhY2spIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBldnRzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIGlmIChldnRzW2ldLmZuICE9PSBjYWxsYmFjayAmJiBldnRzW2ldLmZuLl8gIT09IGNhbGxiYWNrKVxuICAgICAgICAgIGxpdmVFdmVudHMucHVzaChldnRzW2ldKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBSZW1vdmUgZXZlbnQgZnJvbSBxdWV1ZSB0byBwcmV2ZW50IG1lbW9yeSBsZWFrXG4gICAgLy8gU3VnZ2VzdGVkIGJ5IGh0dHBzOi8vZ2l0aHViLmNvbS9sYXpkXG4gICAgLy8gUmVmOiBodHRwczovL2dpdGh1Yi5jb20vc2NvdHRjb3JnYW4vdGlueS1lbWl0dGVyL2NvbW1pdC9jNmViZmFhOWJjOTczYjMzZDExMGE4NGEzMDc3NDJiN2NmOTRjOTUzI2NvbW1pdGNvbW1lbnQtNTAyNDkxMFxuXG4gICAgKGxpdmVFdmVudHMubGVuZ3RoKVxuICAgICAgPyBlW25hbWVdID0gbGl2ZUV2ZW50c1xuICAgICAgOiBkZWxldGUgZVtuYW1lXTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEU7XG5tb2R1bGUuZXhwb3J0cy5UaW55RW1pdHRlciA9IEU7XG4iLCIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbkNvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxyXG5cclxuUGVybWlzc2lvbiB0byB1c2UsIGNvcHksIG1vZGlmeSwgYW5kL29yIGRpc3RyaWJ1dGUgdGhpcyBzb2Z0d2FyZSBmb3IgYW55XHJcbnB1cnBvc2Ugd2l0aCBvciB3aXRob3V0IGZlZSBpcyBoZXJlYnkgZ3JhbnRlZC5cclxuXHJcblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIgQU5EIFRIRSBBVVRIT1IgRElTQ0xBSU1TIEFMTCBXQVJSQU5USUVTIFdJVEhcclxuUkVHQVJEIFRPIFRISVMgU09GVFdBUkUgSU5DTFVESU5HIEFMTCBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZXHJcbkFORCBGSVRORVNTLiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SIEJFIExJQUJMRSBGT1IgQU5ZIFNQRUNJQUwsIERJUkVDVCxcclxuSU5ESVJFQ1QsIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyBPUiBBTlkgREFNQUdFUyBXSEFUU09FVkVSIFJFU1VMVElORyBGUk9NXHJcbkxPU1MgT0YgVVNFLCBEQVRBIE9SIFBST0ZJVFMsIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBORUdMSUdFTkNFIE9SXHJcbk9USEVSIFRPUlRJT1VTIEFDVElPTiwgQVJJU0lORyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBVU0UgT1JcclxuUEVSRk9STUFOQ0UgT0YgVEhJUyBTT0ZUV0FSRS5cclxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cclxuLyogZ2xvYmFsIFJlZmxlY3QsIFByb21pc2UgKi9cclxuXHJcbnZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24oZCwgYikge1xyXG4gICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxyXG4gICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcclxuICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYiwgcCkpIGRbcF0gPSBiW3BdOyB9O1xyXG4gICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19leHRlbmRzKGQsIGIpIHtcclxuICAgIGlmICh0eXBlb2YgYiAhPT0gXCJmdW5jdGlvblwiICYmIGIgIT09IG51bGwpXHJcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNsYXNzIGV4dGVuZHMgdmFsdWUgXCIgKyBTdHJpbmcoYikgKyBcIiBpcyBub3QgYSBjb25zdHJ1Y3RvciBvciBudWxsXCIpO1xyXG4gICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxyXG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xyXG59XHJcblxyXG5leHBvcnQgdmFyIF9fYXNzaWduID0gZnVuY3Rpb24oKSB7XHJcbiAgICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gX19hc3NpZ24odCkge1xyXG4gICAgICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xyXG4gICAgICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpIHRbcF0gPSBzW3BdO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdDtcclxuICAgIH1cclxuICAgIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19yZXN0KHMsIGUpIHtcclxuICAgIHZhciB0ID0ge307XHJcbiAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkgJiYgZS5pbmRleE9mKHApIDwgMClcclxuICAgICAgICB0W3BdID0gc1twXTtcclxuICAgIGlmIChzICE9IG51bGwgJiYgdHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09IFwiZnVuY3Rpb25cIilcclxuICAgICAgICBmb3IgKHZhciBpID0gMCwgcCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMocyk7IGkgPCBwLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSlcclxuICAgICAgICAgICAgICAgIHRbcFtpXV0gPSBzW3BbaV1dO1xyXG4gICAgICAgIH1cclxuICAgIHJldHVybiB0O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xyXG4gICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XHJcbiAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xyXG4gICAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcGFyYW0ocGFyYW1JbmRleCwgZGVjb3JhdG9yKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldCwga2V5KSB7IGRlY29yYXRvcih0YXJnZXQsIGtleSwgcGFyYW1JbmRleCk7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fbWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUpIHtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5tZXRhZGF0YSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gUmVmbGVjdC5tZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2F3YWl0ZXIodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XHJcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cclxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxyXG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcclxuICAgIH0pO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19nZW5lcmF0b3IodGhpc0FyZywgYm9keSkge1xyXG4gICAgdmFyIF8gPSB7IGxhYmVsOiAwLCBzZW50OiBmdW5jdGlvbigpIHsgaWYgKHRbMF0gJiAxKSB0aHJvdyB0WzFdOyByZXR1cm4gdFsxXTsgfSwgdHJ5czogW10sIG9wczogW10gfSwgZiwgeSwgdCwgZztcclxuICAgIHJldHVybiBnID0geyBuZXh0OiB2ZXJiKDApLCBcInRocm93XCI6IHZlcmIoMSksIFwicmV0dXJuXCI6IHZlcmIoMikgfSwgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIChnW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH0pLCBnO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IHJldHVybiBmdW5jdGlvbiAodikgeyByZXR1cm4gc3RlcChbbiwgdl0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiBzdGVwKG9wKSB7XHJcbiAgICAgICAgaWYgKGYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBleGVjdXRpbmcuXCIpO1xyXG4gICAgICAgIHdoaWxlIChfKSB0cnkge1xyXG4gICAgICAgICAgICBpZiAoZiA9IDEsIHkgJiYgKHQgPSBvcFswXSAmIDIgPyB5W1wicmV0dXJuXCJdIDogb3BbMF0gPyB5W1widGhyb3dcIl0gfHwgKCh0ID0geVtcInJldHVyblwiXSkgJiYgdC5jYWxsKHkpLCAwKSA6IHkubmV4dCkgJiYgISh0ID0gdC5jYWxsKHksIG9wWzFdKSkuZG9uZSkgcmV0dXJuIHQ7XHJcbiAgICAgICAgICAgIGlmICh5ID0gMCwgdCkgb3AgPSBbb3BbMF0gJiAyLCB0LnZhbHVlXTtcclxuICAgICAgICAgICAgc3dpdGNoIChvcFswXSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAwOiBjYXNlIDE6IHQgPSBvcDsgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDQ6IF8ubGFiZWwrKzsgcmV0dXJuIHsgdmFsdWU6IG9wWzFdLCBkb25lOiBmYWxzZSB9O1xyXG4gICAgICAgICAgICAgICAgY2FzZSA1OiBfLmxhYmVsKys7IHkgPSBvcFsxXTsgb3AgPSBbMF07IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA3OiBvcCA9IF8ub3BzLnBvcCgpOyBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICBpZiAoISh0ID0gXy50cnlzLCB0ID0gdC5sZW5ndGggPiAwICYmIHRbdC5sZW5ndGggLSAxXSkgJiYgKG9wWzBdID09PSA2IHx8IG9wWzBdID09PSAyKSkgeyBfID0gMDsgY29udGludWU7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDMgJiYgKCF0IHx8IChvcFsxXSA+IHRbMF0gJiYgb3BbMV0gPCB0WzNdKSkpIHsgXy5sYWJlbCA9IG9wWzFdOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gNiAmJiBfLmxhYmVsIDwgdFsxXSkgeyBfLmxhYmVsID0gdFsxXTsgdCA9IG9wOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0ICYmIF8ubGFiZWwgPCB0WzJdKSB7IF8ubGFiZWwgPSB0WzJdOyBfLm9wcy5wdXNoKG9wKTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodFsyXSkgXy5vcHMucG9wKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBvcCA9IGJvZHkuY2FsbCh0aGlzQXJnLCBfKTtcclxuICAgICAgICB9IGNhdGNoIChlKSB7IG9wID0gWzYsIGVdOyB5ID0gMDsgfSBmaW5hbGx5IHsgZiA9IHQgPSAwOyB9XHJcbiAgICAgICAgaWYgKG9wWzBdICYgNSkgdGhyb3cgb3BbMV07IHJldHVybiB7IHZhbHVlOiBvcFswXSA/IG9wWzFdIDogdm9pZCAwLCBkb25lOiB0cnVlIH07XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCB2YXIgX19jcmVhdGVCaW5kaW5nID0gT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xyXG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcclxuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcclxuICAgIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XHJcbiAgICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcclxuICAgIH1cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgZGVzYyk7XHJcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XHJcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xyXG4gICAgb1trMl0gPSBtW2tdO1xyXG59KTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2V4cG9ydFN0YXIobSwgbykge1xyXG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvLCBwKSkgX19jcmVhdGVCaW5kaW5nKG8sIG0sIHApO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX192YWx1ZXMobykge1xyXG4gICAgdmFyIHMgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgU3ltYm9sLml0ZXJhdG9yLCBtID0gcyAmJiBvW3NdLCBpID0gMDtcclxuICAgIGlmIChtKSByZXR1cm4gbS5jYWxsKG8pO1xyXG4gICAgaWYgKG8gJiYgdHlwZW9mIG8ubGVuZ3RoID09PSBcIm51bWJlclwiKSByZXR1cm4ge1xyXG4gICAgICAgIG5leHQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKG8gJiYgaSA+PSBvLmxlbmd0aCkgbyA9IHZvaWQgMDtcclxuICAgICAgICAgICAgcmV0dXJuIHsgdmFsdWU6IG8gJiYgb1tpKytdLCBkb25lOiAhbyB9O1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKHMgPyBcIk9iamVjdCBpcyBub3QgaXRlcmFibGUuXCIgOiBcIlN5bWJvbC5pdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3JlYWQobywgbikge1xyXG4gICAgdmFyIG0gPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb1tTeW1ib2wuaXRlcmF0b3JdO1xyXG4gICAgaWYgKCFtKSByZXR1cm4gbztcclxuICAgIHZhciBpID0gbS5jYWxsKG8pLCByLCBhciA9IFtdLCBlO1xyXG4gICAgdHJ5IHtcclxuICAgICAgICB3aGlsZSAoKG4gPT09IHZvaWQgMCB8fCBuLS0gPiAwKSAmJiAhKHIgPSBpLm5leHQoKSkuZG9uZSkgYXIucHVzaChyLnZhbHVlKTtcclxuICAgIH1cclxuICAgIGNhdGNoIChlcnJvcikgeyBlID0geyBlcnJvcjogZXJyb3IgfTsgfVxyXG4gICAgZmluYWxseSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKHIgJiYgIXIuZG9uZSAmJiAobSA9IGlbXCJyZXR1cm5cIl0pKSBtLmNhbGwoaSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZpbmFsbHkgeyBpZiAoZSkgdGhyb3cgZS5lcnJvcjsgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGFyO1xyXG59XHJcblxyXG4vKiogQGRlcHJlY2F0ZWQgKi9cclxuZXhwb3J0IGZ1bmN0aW9uIF9fc3ByZWFkKCkge1xyXG4gICAgZm9yICh2YXIgYXIgPSBbXSwgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspXHJcbiAgICAgICAgYXIgPSBhci5jb25jYXQoX19yZWFkKGFyZ3VtZW50c1tpXSkpO1xyXG4gICAgcmV0dXJuIGFyO1xyXG59XHJcblxyXG4vKiogQGRlcHJlY2F0ZWQgKi9cclxuZXhwb3J0IGZ1bmN0aW9uIF9fc3ByZWFkQXJyYXlzKCkge1xyXG4gICAgZm9yICh2YXIgcyA9IDAsIGkgPSAwLCBpbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBpbDsgaSsrKSBzICs9IGFyZ3VtZW50c1tpXS5sZW5ndGg7XHJcbiAgICBmb3IgKHZhciByID0gQXJyYXkocyksIGsgPSAwLCBpID0gMDsgaSA8IGlsOyBpKyspXHJcbiAgICAgICAgZm9yICh2YXIgYSA9IGFyZ3VtZW50c1tpXSwgaiA9IDAsIGpsID0gYS5sZW5ndGg7IGogPCBqbDsgaisrLCBrKyspXHJcbiAgICAgICAgICAgIHJba10gPSBhW2pdO1xyXG4gICAgcmV0dXJuIHI7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3NwcmVhZEFycmF5KHRvLCBmcm9tLCBwYWNrKSB7XHJcbiAgICBpZiAocGFjayB8fCBhcmd1bWVudHMubGVuZ3RoID09PSAyKSBmb3IgKHZhciBpID0gMCwgbCA9IGZyb20ubGVuZ3RoLCBhcjsgaSA8IGw7IGkrKykge1xyXG4gICAgICAgIGlmIChhciB8fCAhKGkgaW4gZnJvbSkpIHtcclxuICAgICAgICAgICAgaWYgKCFhcikgYXIgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChmcm9tLCAwLCBpKTtcclxuICAgICAgICAgICAgYXJbaV0gPSBmcm9tW2ldO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiB0by5jb25jYXQoYXIgfHwgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZnJvbSkpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hd2FpdCh2KSB7XHJcbiAgICByZXR1cm4gdGhpcyBpbnN0YW5jZW9mIF9fYXdhaXQgPyAodGhpcy52ID0gdiwgdGhpcykgOiBuZXcgX19hd2FpdCh2KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNHZW5lcmF0b3IodGhpc0FyZywgX2FyZ3VtZW50cywgZ2VuZXJhdG9yKSB7XHJcbiAgICBpZiAoIVN5bWJvbC5hc3luY0l0ZXJhdG9yKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3ltYm9sLmFzeW5jSXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xyXG4gICAgdmFyIGcgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSksIGksIHEgPSBbXTtcclxuICAgIHJldHVybiBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLmFzeW5jSXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaTtcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyBpZiAoZ1tuXSkgaVtuXSA9IGZ1bmN0aW9uICh2KSB7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAoYSwgYikgeyBxLnB1c2goW24sIHYsIGEsIGJdKSA+IDEgfHwgcmVzdW1lKG4sIHYpOyB9KTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gcmVzdW1lKG4sIHYpIHsgdHJ5IHsgc3RlcChnW25dKHYpKTsgfSBjYXRjaCAoZSkgeyBzZXR0bGUocVswXVszXSwgZSk7IH0gfVxyXG4gICAgZnVuY3Rpb24gc3RlcChyKSB7IHIudmFsdWUgaW5zdGFuY2VvZiBfX2F3YWl0ID8gUHJvbWlzZS5yZXNvbHZlKHIudmFsdWUudikudGhlbihmdWxmaWxsLCByZWplY3QpIDogc2V0dGxlKHFbMF1bMl0sIHIpOyB9XHJcbiAgICBmdW5jdGlvbiBmdWxmaWxsKHZhbHVlKSB7IHJlc3VtZShcIm5leHRcIiwgdmFsdWUpOyB9XHJcbiAgICBmdW5jdGlvbiByZWplY3QodmFsdWUpIHsgcmVzdW1lKFwidGhyb3dcIiwgdmFsdWUpOyB9XHJcbiAgICBmdW5jdGlvbiBzZXR0bGUoZiwgdikgeyBpZiAoZih2KSwgcS5zaGlmdCgpLCBxLmxlbmd0aCkgcmVzdW1lKHFbMF1bMF0sIHFbMF1bMV0pOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jRGVsZWdhdG9yKG8pIHtcclxuICAgIHZhciBpLCBwO1xyXG4gICAgcmV0dXJuIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiLCBmdW5jdGlvbiAoZSkgeyB0aHJvdyBlOyB9KSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaTtcclxuICAgIGZ1bmN0aW9uIHZlcmIobiwgZikgeyBpW25dID0gb1tuXSA/IGZ1bmN0aW9uICh2KSB7IHJldHVybiAocCA9ICFwKSA/IHsgdmFsdWU6IF9fYXdhaXQob1tuXSh2KSksIGRvbmU6IG4gPT09IFwicmV0dXJuXCIgfSA6IGYgPyBmKHYpIDogdjsgfSA6IGY7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNWYWx1ZXMobykge1xyXG4gICAgaWYgKCFTeW1ib2wuYXN5bmNJdGVyYXRvcikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN5bWJvbC5hc3luY0l0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcclxuICAgIHZhciBtID0gb1tTeW1ib2wuYXN5bmNJdGVyYXRvcl0sIGk7XHJcbiAgICByZXR1cm4gbSA/IG0uY2FsbChvKSA6IChvID0gdHlwZW9mIF9fdmFsdWVzID09PSBcImZ1bmN0aW9uXCIgPyBfX3ZhbHVlcyhvKSA6IG9bU3ltYm9sLml0ZXJhdG9yXSgpLCBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLmFzeW5jSXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaSk7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgaVtuXSA9IG9bbl0gJiYgZnVuY3Rpb24gKHYpIHsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsgdiA9IG9bbl0odiksIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHYuZG9uZSwgdi52YWx1ZSk7IH0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCBkLCB2KSB7IFByb21pc2UucmVzb2x2ZSh2KS50aGVuKGZ1bmN0aW9uKHYpIHsgcmVzb2x2ZSh7IHZhbHVlOiB2LCBkb25lOiBkIH0pOyB9LCByZWplY3QpOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX21ha2VUZW1wbGF0ZU9iamVjdChjb29rZWQsIHJhdykge1xyXG4gICAgaWYgKE9iamVjdC5kZWZpbmVQcm9wZXJ0eSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkoY29va2VkLCBcInJhd1wiLCB7IHZhbHVlOiByYXcgfSk7IH0gZWxzZSB7IGNvb2tlZC5yYXcgPSByYXc7IH1cclxuICAgIHJldHVybiBjb29rZWQ7XHJcbn07XHJcblxyXG52YXIgX19zZXRNb2R1bGVEZWZhdWx0ID0gT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCB2KSB7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgXCJkZWZhdWx0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHYgfSk7XHJcbn0pIDogZnVuY3Rpb24obywgdikge1xyXG4gICAgb1tcImRlZmF1bHRcIl0gPSB2O1xyXG59O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9faW1wb3J0U3Rhcihtb2QpIHtcclxuICAgIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XHJcbiAgICB2YXIgcmVzdWx0ID0ge307XHJcbiAgICBpZiAobW9kICE9IG51bGwpIGZvciAodmFyIGsgaW4gbW9kKSBpZiAoayAhPT0gXCJkZWZhdWx0XCIgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vZCwgaykpIF9fY3JlYXRlQmluZGluZyhyZXN1bHQsIG1vZCwgayk7XHJcbiAgICBfX3NldE1vZHVsZURlZmF1bHQocmVzdWx0LCBtb2QpO1xyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9faW1wb3J0RGVmYXVsdChtb2QpIHtcclxuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgZGVmYXVsdDogbW9kIH07XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHJlY2VpdmVyLCBzdGF0ZSwga2luZCwgZikge1xyXG4gICAgaWYgKGtpbmQgPT09IFwiYVwiICYmICFmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBhY2Nlc3NvciB3YXMgZGVmaW5lZCB3aXRob3V0IGEgZ2V0dGVyXCIpO1xyXG4gICAgaWYgKHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgIT09IHN0YXRlIHx8ICFmIDogIXN0YXRlLmhhcyhyZWNlaXZlcikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgcmVhZCBwcml2YXRlIG1lbWJlciBmcm9tIGFuIG9iamVjdCB3aG9zZSBjbGFzcyBkaWQgbm90IGRlY2xhcmUgaXRcIik7XHJcbiAgICByZXR1cm4ga2luZCA9PT0gXCJtXCIgPyBmIDoga2luZCA9PT0gXCJhXCIgPyBmLmNhbGwocmVjZWl2ZXIpIDogZiA/IGYudmFsdWUgOiBzdGF0ZS5nZXQocmVjZWl2ZXIpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19jbGFzc1ByaXZhdGVGaWVsZFNldChyZWNlaXZlciwgc3RhdGUsIHZhbHVlLCBraW5kLCBmKSB7XHJcbiAgICBpZiAoa2luZCA9PT0gXCJtXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIG1ldGhvZCBpcyBub3Qgd3JpdGFibGVcIik7XHJcbiAgICBpZiAoa2luZCA9PT0gXCJhXCIgJiYgIWYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIGFjY2Vzc29yIHdhcyBkZWZpbmVkIHdpdGhvdXQgYSBzZXR0ZXJcIik7XHJcbiAgICBpZiAodHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciAhPT0gc3RhdGUgfHwgIWYgOiAhc3RhdGUuaGFzKHJlY2VpdmVyKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCB3cml0ZSBwcml2YXRlIG1lbWJlciB0byBhbiBvYmplY3Qgd2hvc2UgY2xhc3MgZGlkIG5vdCBkZWNsYXJlIGl0XCIpO1xyXG4gICAgcmV0dXJuIChraW5kID09PSBcImFcIiA/IGYuY2FsbChyZWNlaXZlciwgdmFsdWUpIDogZiA/IGYudmFsdWUgPSB2YWx1ZSA6IHN0YXRlLnNldChyZWNlaXZlciwgdmFsdWUpKSwgdmFsdWU7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2NsYXNzUHJpdmF0ZUZpZWxkSW4oc3RhdGUsIHJlY2VpdmVyKSB7XHJcbiAgICBpZiAocmVjZWl2ZXIgPT09IG51bGwgfHwgKHR5cGVvZiByZWNlaXZlciAhPT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgcmVjZWl2ZXIgIT09IFwiZnVuY3Rpb25cIikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgdXNlICdpbicgb3BlcmF0b3Igb24gbm9uLW9iamVjdFwiKTtcclxuICAgIHJldHVybiB0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyID09PSBzdGF0ZSA6IHN0YXRlLmhhcyhyZWNlaXZlcik7XHJcbn1cclxuIiwiLyohIGh0dHBzOi8vbXRocy5iZS9wdW55Y29kZSB2MS4zLjIgYnkgQG1hdGhpYXMgKi9cbjsoZnVuY3Rpb24ocm9vdCkge1xuXG5cdC8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZXMgKi9cblx0dmFyIGZyZWVFeHBvcnRzID0gdHlwZW9mIGV4cG9ydHMgPT0gJ29iamVjdCcgJiYgZXhwb3J0cyAmJlxuXHRcdCFleHBvcnRzLm5vZGVUeXBlICYmIGV4cG9ydHM7XG5cdHZhciBmcmVlTW9kdWxlID0gdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUgJiZcblx0XHQhbW9kdWxlLm5vZGVUeXBlICYmIG1vZHVsZTtcblx0dmFyIGZyZWVHbG9iYWwgPSB0eXBlb2YgZ2xvYmFsID09ICdvYmplY3QnICYmIGdsb2JhbDtcblx0aWYgKFxuXHRcdGZyZWVHbG9iYWwuZ2xvYmFsID09PSBmcmVlR2xvYmFsIHx8XG5cdFx0ZnJlZUdsb2JhbC53aW5kb3cgPT09IGZyZWVHbG9iYWwgfHxcblx0XHRmcmVlR2xvYmFsLnNlbGYgPT09IGZyZWVHbG9iYWxcblx0KSB7XG5cdFx0cm9vdCA9IGZyZWVHbG9iYWw7XG5cdH1cblxuXHQvKipcblx0ICogVGhlIGBwdW55Y29kZWAgb2JqZWN0LlxuXHQgKiBAbmFtZSBwdW55Y29kZVxuXHQgKiBAdHlwZSBPYmplY3Rcblx0ICovXG5cdHZhciBwdW55Y29kZSxcblxuXHQvKiogSGlnaGVzdCBwb3NpdGl2ZSBzaWduZWQgMzItYml0IGZsb2F0IHZhbHVlICovXG5cdG1heEludCA9IDIxNDc0ODM2NDcsIC8vIGFrYS4gMHg3RkZGRkZGRiBvciAyXjMxLTFcblxuXHQvKiogQm9vdHN0cmluZyBwYXJhbWV0ZXJzICovXG5cdGJhc2UgPSAzNixcblx0dE1pbiA9IDEsXG5cdHRNYXggPSAyNixcblx0c2tldyA9IDM4LFxuXHRkYW1wID0gNzAwLFxuXHRpbml0aWFsQmlhcyA9IDcyLFxuXHRpbml0aWFsTiA9IDEyOCwgLy8gMHg4MFxuXHRkZWxpbWl0ZXIgPSAnLScsIC8vICdcXHgyRCdcblxuXHQvKiogUmVndWxhciBleHByZXNzaW9ucyAqL1xuXHRyZWdleFB1bnljb2RlID0gL154bi0tLyxcblx0cmVnZXhOb25BU0NJSSA9IC9bXlxceDIwLVxceDdFXS8sIC8vIHVucHJpbnRhYmxlIEFTQ0lJIGNoYXJzICsgbm9uLUFTQ0lJIGNoYXJzXG5cdHJlZ2V4U2VwYXJhdG9ycyA9IC9bXFx4MkVcXHUzMDAyXFx1RkYwRVxcdUZGNjFdL2csIC8vIFJGQyAzNDkwIHNlcGFyYXRvcnNcblxuXHQvKiogRXJyb3IgbWVzc2FnZXMgKi9cblx0ZXJyb3JzID0ge1xuXHRcdCdvdmVyZmxvdyc6ICdPdmVyZmxvdzogaW5wdXQgbmVlZHMgd2lkZXIgaW50ZWdlcnMgdG8gcHJvY2VzcycsXG5cdFx0J25vdC1iYXNpYyc6ICdJbGxlZ2FsIGlucHV0ID49IDB4ODAgKG5vdCBhIGJhc2ljIGNvZGUgcG9pbnQpJyxcblx0XHQnaW52YWxpZC1pbnB1dCc6ICdJbnZhbGlkIGlucHV0J1xuXHR9LFxuXG5cdC8qKiBDb252ZW5pZW5jZSBzaG9ydGN1dHMgKi9cblx0YmFzZU1pbnVzVE1pbiA9IGJhc2UgLSB0TWluLFxuXHRmbG9vciA9IE1hdGguZmxvb3IsXG5cdHN0cmluZ0Zyb21DaGFyQ29kZSA9IFN0cmluZy5mcm9tQ2hhckNvZGUsXG5cblx0LyoqIFRlbXBvcmFyeSB2YXJpYWJsZSAqL1xuXHRrZXk7XG5cblx0LyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cblx0LyoqXG5cdCAqIEEgZ2VuZXJpYyBlcnJvciB1dGlsaXR5IGZ1bmN0aW9uLlxuXHQgKiBAcHJpdmF0ZVxuXHQgKiBAcGFyYW0ge1N0cmluZ30gdHlwZSBUaGUgZXJyb3IgdHlwZS5cblx0ICogQHJldHVybnMge0Vycm9yfSBUaHJvd3MgYSBgUmFuZ2VFcnJvcmAgd2l0aCB0aGUgYXBwbGljYWJsZSBlcnJvciBtZXNzYWdlLlxuXHQgKi9cblx0ZnVuY3Rpb24gZXJyb3IodHlwZSkge1xuXHRcdHRocm93IFJhbmdlRXJyb3IoZXJyb3JzW3R5cGVdKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBBIGdlbmVyaWMgYEFycmF5I21hcGAgdXRpbGl0eSBmdW5jdGlvbi5cblx0ICogQHByaXZhdGVcblx0ICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cblx0ICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgVGhlIGZ1bmN0aW9uIHRoYXQgZ2V0cyBjYWxsZWQgZm9yIGV2ZXJ5IGFycmF5XG5cdCAqIGl0ZW0uXG5cdCAqIEByZXR1cm5zIHtBcnJheX0gQSBuZXcgYXJyYXkgb2YgdmFsdWVzIHJldHVybmVkIGJ5IHRoZSBjYWxsYmFjayBmdW5jdGlvbi5cblx0ICovXG5cdGZ1bmN0aW9uIG1hcChhcnJheSwgZm4pIHtcblx0XHR2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXHRcdHZhciByZXN1bHQgPSBbXTtcblx0XHR3aGlsZSAobGVuZ3RoLS0pIHtcblx0XHRcdHJlc3VsdFtsZW5ndGhdID0gZm4oYXJyYXlbbGVuZ3RoXSk7XG5cdFx0fVxuXHRcdHJldHVybiByZXN1bHQ7XG5cdH1cblxuXHQvKipcblx0ICogQSBzaW1wbGUgYEFycmF5I21hcGAtbGlrZSB3cmFwcGVyIHRvIHdvcmsgd2l0aCBkb21haW4gbmFtZSBzdHJpbmdzIG9yIGVtYWlsXG5cdCAqIGFkZHJlc3Nlcy5cblx0ICogQHByaXZhdGVcblx0ICogQHBhcmFtIHtTdHJpbmd9IGRvbWFpbiBUaGUgZG9tYWluIG5hbWUgb3IgZW1haWwgYWRkcmVzcy5cblx0ICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgVGhlIGZ1bmN0aW9uIHRoYXQgZ2V0cyBjYWxsZWQgZm9yIGV2ZXJ5XG5cdCAqIGNoYXJhY3Rlci5cblx0ICogQHJldHVybnMge0FycmF5fSBBIG5ldyBzdHJpbmcgb2YgY2hhcmFjdGVycyByZXR1cm5lZCBieSB0aGUgY2FsbGJhY2tcblx0ICogZnVuY3Rpb24uXG5cdCAqL1xuXHRmdW5jdGlvbiBtYXBEb21haW4oc3RyaW5nLCBmbikge1xuXHRcdHZhciBwYXJ0cyA9IHN0cmluZy5zcGxpdCgnQCcpO1xuXHRcdHZhciByZXN1bHQgPSAnJztcblx0XHRpZiAocGFydHMubGVuZ3RoID4gMSkge1xuXHRcdFx0Ly8gSW4gZW1haWwgYWRkcmVzc2VzLCBvbmx5IHRoZSBkb21haW4gbmFtZSBzaG91bGQgYmUgcHVueWNvZGVkLiBMZWF2ZVxuXHRcdFx0Ly8gdGhlIGxvY2FsIHBhcnQgKGkuZS4gZXZlcnl0aGluZyB1cCB0byBgQGApIGludGFjdC5cblx0XHRcdHJlc3VsdCA9IHBhcnRzWzBdICsgJ0AnO1xuXHRcdFx0c3RyaW5nID0gcGFydHNbMV07XG5cdFx0fVxuXHRcdC8vIEF2b2lkIGBzcGxpdChyZWdleClgIGZvciBJRTggY29tcGF0aWJpbGl0eS4gU2VlICMxNy5cblx0XHRzdHJpbmcgPSBzdHJpbmcucmVwbGFjZShyZWdleFNlcGFyYXRvcnMsICdcXHgyRScpO1xuXHRcdHZhciBsYWJlbHMgPSBzdHJpbmcuc3BsaXQoJy4nKTtcblx0XHR2YXIgZW5jb2RlZCA9IG1hcChsYWJlbHMsIGZuKS5qb2luKCcuJyk7XG5cdFx0cmV0dXJuIHJlc3VsdCArIGVuY29kZWQ7XG5cdH1cblxuXHQvKipcblx0ICogQ3JlYXRlcyBhbiBhcnJheSBjb250YWluaW5nIHRoZSBudW1lcmljIGNvZGUgcG9pbnRzIG9mIGVhY2ggVW5pY29kZVxuXHQgKiBjaGFyYWN0ZXIgaW4gdGhlIHN0cmluZy4gV2hpbGUgSmF2YVNjcmlwdCB1c2VzIFVDUy0yIGludGVybmFsbHksXG5cdCAqIHRoaXMgZnVuY3Rpb24gd2lsbCBjb252ZXJ0IGEgcGFpciBvZiBzdXJyb2dhdGUgaGFsdmVzIChlYWNoIG9mIHdoaWNoXG5cdCAqIFVDUy0yIGV4cG9zZXMgYXMgc2VwYXJhdGUgY2hhcmFjdGVycykgaW50byBhIHNpbmdsZSBjb2RlIHBvaW50LFxuXHQgKiBtYXRjaGluZyBVVEYtMTYuXG5cdCAqIEBzZWUgYHB1bnljb2RlLnVjczIuZW5jb2RlYFxuXHQgKiBAc2VlIDxodHRwczovL21hdGhpYXNieW5lbnMuYmUvbm90ZXMvamF2YXNjcmlwdC1lbmNvZGluZz5cblx0ICogQG1lbWJlck9mIHB1bnljb2RlLnVjczJcblx0ICogQG5hbWUgZGVjb2RlXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSBzdHJpbmcgVGhlIFVuaWNvZGUgaW5wdXQgc3RyaW5nIChVQ1MtMikuXG5cdCAqIEByZXR1cm5zIHtBcnJheX0gVGhlIG5ldyBhcnJheSBvZiBjb2RlIHBvaW50cy5cblx0ICovXG5cdGZ1bmN0aW9uIHVjczJkZWNvZGUoc3RyaW5nKSB7XG5cdFx0dmFyIG91dHB1dCA9IFtdLFxuXHRcdCAgICBjb3VudGVyID0gMCxcblx0XHQgICAgbGVuZ3RoID0gc3RyaW5nLmxlbmd0aCxcblx0XHQgICAgdmFsdWUsXG5cdFx0ICAgIGV4dHJhO1xuXHRcdHdoaWxlIChjb3VudGVyIDwgbGVuZ3RoKSB7XG5cdFx0XHR2YWx1ZSA9IHN0cmluZy5jaGFyQ29kZUF0KGNvdW50ZXIrKyk7XG5cdFx0XHRpZiAodmFsdWUgPj0gMHhEODAwICYmIHZhbHVlIDw9IDB4REJGRiAmJiBjb3VudGVyIDwgbGVuZ3RoKSB7XG5cdFx0XHRcdC8vIGhpZ2ggc3Vycm9nYXRlLCBhbmQgdGhlcmUgaXMgYSBuZXh0IGNoYXJhY3RlclxuXHRcdFx0XHRleHRyYSA9IHN0cmluZy5jaGFyQ29kZUF0KGNvdW50ZXIrKyk7XG5cdFx0XHRcdGlmICgoZXh0cmEgJiAweEZDMDApID09IDB4REMwMCkgeyAvLyBsb3cgc3Vycm9nYXRlXG5cdFx0XHRcdFx0b3V0cHV0LnB1c2goKCh2YWx1ZSAmIDB4M0ZGKSA8PCAxMCkgKyAoZXh0cmEgJiAweDNGRikgKyAweDEwMDAwKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHQvLyB1bm1hdGNoZWQgc3Vycm9nYXRlOyBvbmx5IGFwcGVuZCB0aGlzIGNvZGUgdW5pdCwgaW4gY2FzZSB0aGUgbmV4dFxuXHRcdFx0XHRcdC8vIGNvZGUgdW5pdCBpcyB0aGUgaGlnaCBzdXJyb2dhdGUgb2YgYSBzdXJyb2dhdGUgcGFpclxuXHRcdFx0XHRcdG91dHB1dC5wdXNoKHZhbHVlKTtcblx0XHRcdFx0XHRjb3VudGVyLS07XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG91dHB1dC5wdXNoKHZhbHVlKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIG91dHB1dDtcblx0fVxuXG5cdC8qKlxuXHQgKiBDcmVhdGVzIGEgc3RyaW5nIGJhc2VkIG9uIGFuIGFycmF5IG9mIG51bWVyaWMgY29kZSBwb2ludHMuXG5cdCAqIEBzZWUgYHB1bnljb2RlLnVjczIuZGVjb2RlYFxuXHQgKiBAbWVtYmVyT2YgcHVueWNvZGUudWNzMlxuXHQgKiBAbmFtZSBlbmNvZGVcblx0ICogQHBhcmFtIHtBcnJheX0gY29kZVBvaW50cyBUaGUgYXJyYXkgb2YgbnVtZXJpYyBjb2RlIHBvaW50cy5cblx0ICogQHJldHVybnMge1N0cmluZ30gVGhlIG5ldyBVbmljb2RlIHN0cmluZyAoVUNTLTIpLlxuXHQgKi9cblx0ZnVuY3Rpb24gdWNzMmVuY29kZShhcnJheSkge1xuXHRcdHJldHVybiBtYXAoYXJyYXksIGZ1bmN0aW9uKHZhbHVlKSB7XG5cdFx0XHR2YXIgb3V0cHV0ID0gJyc7XG5cdFx0XHRpZiAodmFsdWUgPiAweEZGRkYpIHtcblx0XHRcdFx0dmFsdWUgLT0gMHgxMDAwMDtcblx0XHRcdFx0b3V0cHV0ICs9IHN0cmluZ0Zyb21DaGFyQ29kZSh2YWx1ZSA+Pj4gMTAgJiAweDNGRiB8IDB4RDgwMCk7XG5cdFx0XHRcdHZhbHVlID0gMHhEQzAwIHwgdmFsdWUgJiAweDNGRjtcblx0XHRcdH1cblx0XHRcdG91dHB1dCArPSBzdHJpbmdGcm9tQ2hhckNvZGUodmFsdWUpO1xuXHRcdFx0cmV0dXJuIG91dHB1dDtcblx0XHR9KS5qb2luKCcnKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBDb252ZXJ0cyBhIGJhc2ljIGNvZGUgcG9pbnQgaW50byBhIGRpZ2l0L2ludGVnZXIuXG5cdCAqIEBzZWUgYGRpZ2l0VG9CYXNpYygpYFxuXHQgKiBAcHJpdmF0ZVxuXHQgKiBAcGFyYW0ge051bWJlcn0gY29kZVBvaW50IFRoZSBiYXNpYyBudW1lcmljIGNvZGUgcG9pbnQgdmFsdWUuXG5cdCAqIEByZXR1cm5zIHtOdW1iZXJ9IFRoZSBudW1lcmljIHZhbHVlIG9mIGEgYmFzaWMgY29kZSBwb2ludCAoZm9yIHVzZSBpblxuXHQgKiByZXByZXNlbnRpbmcgaW50ZWdlcnMpIGluIHRoZSByYW5nZSBgMGAgdG8gYGJhc2UgLSAxYCwgb3IgYGJhc2VgIGlmXG5cdCAqIHRoZSBjb2RlIHBvaW50IGRvZXMgbm90IHJlcHJlc2VudCBhIHZhbHVlLlxuXHQgKi9cblx0ZnVuY3Rpb24gYmFzaWNUb0RpZ2l0KGNvZGVQb2ludCkge1xuXHRcdGlmIChjb2RlUG9pbnQgLSA0OCA8IDEwKSB7XG5cdFx0XHRyZXR1cm4gY29kZVBvaW50IC0gMjI7XG5cdFx0fVxuXHRcdGlmIChjb2RlUG9pbnQgLSA2NSA8IDI2KSB7XG5cdFx0XHRyZXR1cm4gY29kZVBvaW50IC0gNjU7XG5cdFx0fVxuXHRcdGlmIChjb2RlUG9pbnQgLSA5NyA8IDI2KSB7XG5cdFx0XHRyZXR1cm4gY29kZVBvaW50IC0gOTc7XG5cdFx0fVxuXHRcdHJldHVybiBiYXNlO1xuXHR9XG5cblx0LyoqXG5cdCAqIENvbnZlcnRzIGEgZGlnaXQvaW50ZWdlciBpbnRvIGEgYmFzaWMgY29kZSBwb2ludC5cblx0ICogQHNlZSBgYmFzaWNUb0RpZ2l0KClgXG5cdCAqIEBwcml2YXRlXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBkaWdpdCBUaGUgbnVtZXJpYyB2YWx1ZSBvZiBhIGJhc2ljIGNvZGUgcG9pbnQuXG5cdCAqIEByZXR1cm5zIHtOdW1iZXJ9IFRoZSBiYXNpYyBjb2RlIHBvaW50IHdob3NlIHZhbHVlICh3aGVuIHVzZWQgZm9yXG5cdCAqIHJlcHJlc2VudGluZyBpbnRlZ2VycykgaXMgYGRpZ2l0YCwgd2hpY2ggbmVlZHMgdG8gYmUgaW4gdGhlIHJhbmdlXG5cdCAqIGAwYCB0byBgYmFzZSAtIDFgLiBJZiBgZmxhZ2AgaXMgbm9uLXplcm8sIHRoZSB1cHBlcmNhc2UgZm9ybSBpc1xuXHQgKiB1c2VkOyBlbHNlLCB0aGUgbG93ZXJjYXNlIGZvcm0gaXMgdXNlZC4gVGhlIGJlaGF2aW9yIGlzIHVuZGVmaW5lZFxuXHQgKiBpZiBgZmxhZ2AgaXMgbm9uLXplcm8gYW5kIGBkaWdpdGAgaGFzIG5vIHVwcGVyY2FzZSBmb3JtLlxuXHQgKi9cblx0ZnVuY3Rpb24gZGlnaXRUb0Jhc2ljKGRpZ2l0LCBmbGFnKSB7XG5cdFx0Ly8gIDAuLjI1IG1hcCB0byBBU0NJSSBhLi56IG9yIEEuLlpcblx0XHQvLyAyNi4uMzUgbWFwIHRvIEFTQ0lJIDAuLjlcblx0XHRyZXR1cm4gZGlnaXQgKyAyMiArIDc1ICogKGRpZ2l0IDwgMjYpIC0gKChmbGFnICE9IDApIDw8IDUpO1xuXHR9XG5cblx0LyoqXG5cdCAqIEJpYXMgYWRhcHRhdGlvbiBmdW5jdGlvbiBhcyBwZXIgc2VjdGlvbiAzLjQgb2YgUkZDIDM0OTIuXG5cdCAqIGh0dHA6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzM0OTIjc2VjdGlvbi0zLjRcblx0ICogQHByaXZhdGVcblx0ICovXG5cdGZ1bmN0aW9uIGFkYXB0KGRlbHRhLCBudW1Qb2ludHMsIGZpcnN0VGltZSkge1xuXHRcdHZhciBrID0gMDtcblx0XHRkZWx0YSA9IGZpcnN0VGltZSA/IGZsb29yKGRlbHRhIC8gZGFtcCkgOiBkZWx0YSA+PiAxO1xuXHRcdGRlbHRhICs9IGZsb29yKGRlbHRhIC8gbnVtUG9pbnRzKTtcblx0XHRmb3IgKC8qIG5vIGluaXRpYWxpemF0aW9uICovOyBkZWx0YSA+IGJhc2VNaW51c1RNaW4gKiB0TWF4ID4+IDE7IGsgKz0gYmFzZSkge1xuXHRcdFx0ZGVsdGEgPSBmbG9vcihkZWx0YSAvIGJhc2VNaW51c1RNaW4pO1xuXHRcdH1cblx0XHRyZXR1cm4gZmxvb3IoayArIChiYXNlTWludXNUTWluICsgMSkgKiBkZWx0YSAvIChkZWx0YSArIHNrZXcpKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBDb252ZXJ0cyBhIFB1bnljb2RlIHN0cmluZyBvZiBBU0NJSS1vbmx5IHN5bWJvbHMgdG8gYSBzdHJpbmcgb2YgVW5pY29kZVxuXHQgKiBzeW1ib2xzLlxuXHQgKiBAbWVtYmVyT2YgcHVueWNvZGVcblx0ICogQHBhcmFtIHtTdHJpbmd9IGlucHV0IFRoZSBQdW55Y29kZSBzdHJpbmcgb2YgQVNDSUktb25seSBzeW1ib2xzLlxuXHQgKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgcmVzdWx0aW5nIHN0cmluZyBvZiBVbmljb2RlIHN5bWJvbHMuXG5cdCAqL1xuXHRmdW5jdGlvbiBkZWNvZGUoaW5wdXQpIHtcblx0XHQvLyBEb24ndCB1c2UgVUNTLTJcblx0XHR2YXIgb3V0cHV0ID0gW10sXG5cdFx0ICAgIGlucHV0TGVuZ3RoID0gaW5wdXQubGVuZ3RoLFxuXHRcdCAgICBvdXQsXG5cdFx0ICAgIGkgPSAwLFxuXHRcdCAgICBuID0gaW5pdGlhbE4sXG5cdFx0ICAgIGJpYXMgPSBpbml0aWFsQmlhcyxcblx0XHQgICAgYmFzaWMsXG5cdFx0ICAgIGosXG5cdFx0ICAgIGluZGV4LFxuXHRcdCAgICBvbGRpLFxuXHRcdCAgICB3LFxuXHRcdCAgICBrLFxuXHRcdCAgICBkaWdpdCxcblx0XHQgICAgdCxcblx0XHQgICAgLyoqIENhY2hlZCBjYWxjdWxhdGlvbiByZXN1bHRzICovXG5cdFx0ICAgIGJhc2VNaW51c1Q7XG5cblx0XHQvLyBIYW5kbGUgdGhlIGJhc2ljIGNvZGUgcG9pbnRzOiBsZXQgYGJhc2ljYCBiZSB0aGUgbnVtYmVyIG9mIGlucHV0IGNvZGVcblx0XHQvLyBwb2ludHMgYmVmb3JlIHRoZSBsYXN0IGRlbGltaXRlciwgb3IgYDBgIGlmIHRoZXJlIGlzIG5vbmUsIHRoZW4gY29weVxuXHRcdC8vIHRoZSBmaXJzdCBiYXNpYyBjb2RlIHBvaW50cyB0byB0aGUgb3V0cHV0LlxuXG5cdFx0YmFzaWMgPSBpbnB1dC5sYXN0SW5kZXhPZihkZWxpbWl0ZXIpO1xuXHRcdGlmIChiYXNpYyA8IDApIHtcblx0XHRcdGJhc2ljID0gMDtcblx0XHR9XG5cblx0XHRmb3IgKGogPSAwOyBqIDwgYmFzaWM7ICsraikge1xuXHRcdFx0Ly8gaWYgaXQncyBub3QgYSBiYXNpYyBjb2RlIHBvaW50XG5cdFx0XHRpZiAoaW5wdXQuY2hhckNvZGVBdChqKSA+PSAweDgwKSB7XG5cdFx0XHRcdGVycm9yKCdub3QtYmFzaWMnKTtcblx0XHRcdH1cblx0XHRcdG91dHB1dC5wdXNoKGlucHV0LmNoYXJDb2RlQXQoaikpO1xuXHRcdH1cblxuXHRcdC8vIE1haW4gZGVjb2RpbmcgbG9vcDogc3RhcnQganVzdCBhZnRlciB0aGUgbGFzdCBkZWxpbWl0ZXIgaWYgYW55IGJhc2ljIGNvZGVcblx0XHQvLyBwb2ludHMgd2VyZSBjb3BpZWQ7IHN0YXJ0IGF0IHRoZSBiZWdpbm5pbmcgb3RoZXJ3aXNlLlxuXG5cdFx0Zm9yIChpbmRleCA9IGJhc2ljID4gMCA/IGJhc2ljICsgMSA6IDA7IGluZGV4IDwgaW5wdXRMZW5ndGg7IC8qIG5vIGZpbmFsIGV4cHJlc3Npb24gKi8pIHtcblxuXHRcdFx0Ly8gYGluZGV4YCBpcyB0aGUgaW5kZXggb2YgdGhlIG5leHQgY2hhcmFjdGVyIHRvIGJlIGNvbnN1bWVkLlxuXHRcdFx0Ly8gRGVjb2RlIGEgZ2VuZXJhbGl6ZWQgdmFyaWFibGUtbGVuZ3RoIGludGVnZXIgaW50byBgZGVsdGFgLFxuXHRcdFx0Ly8gd2hpY2ggZ2V0cyBhZGRlZCB0byBgaWAuIFRoZSBvdmVyZmxvdyBjaGVja2luZyBpcyBlYXNpZXJcblx0XHRcdC8vIGlmIHdlIGluY3JlYXNlIGBpYCBhcyB3ZSBnbywgdGhlbiBzdWJ0cmFjdCBvZmYgaXRzIHN0YXJ0aW5nXG5cdFx0XHQvLyB2YWx1ZSBhdCB0aGUgZW5kIHRvIG9idGFpbiBgZGVsdGFgLlxuXHRcdFx0Zm9yIChvbGRpID0gaSwgdyA9IDEsIGsgPSBiYXNlOyAvKiBubyBjb25kaXRpb24gKi87IGsgKz0gYmFzZSkge1xuXG5cdFx0XHRcdGlmIChpbmRleCA+PSBpbnB1dExlbmd0aCkge1xuXHRcdFx0XHRcdGVycm9yKCdpbnZhbGlkLWlucHV0Jyk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRkaWdpdCA9IGJhc2ljVG9EaWdpdChpbnB1dC5jaGFyQ29kZUF0KGluZGV4KyspKTtcblxuXHRcdFx0XHRpZiAoZGlnaXQgPj0gYmFzZSB8fCBkaWdpdCA+IGZsb29yKChtYXhJbnQgLSBpKSAvIHcpKSB7XG5cdFx0XHRcdFx0ZXJyb3IoJ292ZXJmbG93Jyk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpICs9IGRpZ2l0ICogdztcblx0XHRcdFx0dCA9IGsgPD0gYmlhcyA/IHRNaW4gOiAoayA+PSBiaWFzICsgdE1heCA/IHRNYXggOiBrIC0gYmlhcyk7XG5cblx0XHRcdFx0aWYgKGRpZ2l0IDwgdCkge1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0YmFzZU1pbnVzVCA9IGJhc2UgLSB0O1xuXHRcdFx0XHRpZiAodyA+IGZsb29yKG1heEludCAvIGJhc2VNaW51c1QpKSB7XG5cdFx0XHRcdFx0ZXJyb3IoJ292ZXJmbG93Jyk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHR3ICo9IGJhc2VNaW51c1Q7XG5cblx0XHRcdH1cblxuXHRcdFx0b3V0ID0gb3V0cHV0Lmxlbmd0aCArIDE7XG5cdFx0XHRiaWFzID0gYWRhcHQoaSAtIG9sZGksIG91dCwgb2xkaSA9PSAwKTtcblxuXHRcdFx0Ly8gYGlgIHdhcyBzdXBwb3NlZCB0byB3cmFwIGFyb3VuZCBmcm9tIGBvdXRgIHRvIGAwYCxcblx0XHRcdC8vIGluY3JlbWVudGluZyBgbmAgZWFjaCB0aW1lLCBzbyB3ZSdsbCBmaXggdGhhdCBub3c6XG5cdFx0XHRpZiAoZmxvb3IoaSAvIG91dCkgPiBtYXhJbnQgLSBuKSB7XG5cdFx0XHRcdGVycm9yKCdvdmVyZmxvdycpO1xuXHRcdFx0fVxuXG5cdFx0XHRuICs9IGZsb29yKGkgLyBvdXQpO1xuXHRcdFx0aSAlPSBvdXQ7XG5cblx0XHRcdC8vIEluc2VydCBgbmAgYXQgcG9zaXRpb24gYGlgIG9mIHRoZSBvdXRwdXRcblx0XHRcdG91dHB1dC5zcGxpY2UoaSsrLCAwLCBuKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB1Y3MyZW5jb2RlKG91dHB1dCk7XG5cdH1cblxuXHQvKipcblx0ICogQ29udmVydHMgYSBzdHJpbmcgb2YgVW5pY29kZSBzeW1ib2xzIChlLmcuIGEgZG9tYWluIG5hbWUgbGFiZWwpIHRvIGFcblx0ICogUHVueWNvZGUgc3RyaW5nIG9mIEFTQ0lJLW9ubHkgc3ltYm9scy5cblx0ICogQG1lbWJlck9mIHB1bnljb2RlXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSBpbnB1dCBUaGUgc3RyaW5nIG9mIFVuaWNvZGUgc3ltYm9scy5cblx0ICogQHJldHVybnMge1N0cmluZ30gVGhlIHJlc3VsdGluZyBQdW55Y29kZSBzdHJpbmcgb2YgQVNDSUktb25seSBzeW1ib2xzLlxuXHQgKi9cblx0ZnVuY3Rpb24gZW5jb2RlKGlucHV0KSB7XG5cdFx0dmFyIG4sXG5cdFx0ICAgIGRlbHRhLFxuXHRcdCAgICBoYW5kbGVkQ1BDb3VudCxcblx0XHQgICAgYmFzaWNMZW5ndGgsXG5cdFx0ICAgIGJpYXMsXG5cdFx0ICAgIGosXG5cdFx0ICAgIG0sXG5cdFx0ICAgIHEsXG5cdFx0ICAgIGssXG5cdFx0ICAgIHQsXG5cdFx0ICAgIGN1cnJlbnRWYWx1ZSxcblx0XHQgICAgb3V0cHV0ID0gW10sXG5cdFx0ICAgIC8qKiBgaW5wdXRMZW5ndGhgIHdpbGwgaG9sZCB0aGUgbnVtYmVyIG9mIGNvZGUgcG9pbnRzIGluIGBpbnB1dGAuICovXG5cdFx0ICAgIGlucHV0TGVuZ3RoLFxuXHRcdCAgICAvKiogQ2FjaGVkIGNhbGN1bGF0aW9uIHJlc3VsdHMgKi9cblx0XHQgICAgaGFuZGxlZENQQ291bnRQbHVzT25lLFxuXHRcdCAgICBiYXNlTWludXNULFxuXHRcdCAgICBxTWludXNUO1xuXG5cdFx0Ly8gQ29udmVydCB0aGUgaW5wdXQgaW4gVUNTLTIgdG8gVW5pY29kZVxuXHRcdGlucHV0ID0gdWNzMmRlY29kZShpbnB1dCk7XG5cblx0XHQvLyBDYWNoZSB0aGUgbGVuZ3RoXG5cdFx0aW5wdXRMZW5ndGggPSBpbnB1dC5sZW5ndGg7XG5cblx0XHQvLyBJbml0aWFsaXplIHRoZSBzdGF0ZVxuXHRcdG4gPSBpbml0aWFsTjtcblx0XHRkZWx0YSA9IDA7XG5cdFx0YmlhcyA9IGluaXRpYWxCaWFzO1xuXG5cdFx0Ly8gSGFuZGxlIHRoZSBiYXNpYyBjb2RlIHBvaW50c1xuXHRcdGZvciAoaiA9IDA7IGogPCBpbnB1dExlbmd0aDsgKytqKSB7XG5cdFx0XHRjdXJyZW50VmFsdWUgPSBpbnB1dFtqXTtcblx0XHRcdGlmIChjdXJyZW50VmFsdWUgPCAweDgwKSB7XG5cdFx0XHRcdG91dHB1dC5wdXNoKHN0cmluZ0Zyb21DaGFyQ29kZShjdXJyZW50VmFsdWUpKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRoYW5kbGVkQ1BDb3VudCA9IGJhc2ljTGVuZ3RoID0gb3V0cHV0Lmxlbmd0aDtcblxuXHRcdC8vIGBoYW5kbGVkQ1BDb3VudGAgaXMgdGhlIG51bWJlciBvZiBjb2RlIHBvaW50cyB0aGF0IGhhdmUgYmVlbiBoYW5kbGVkO1xuXHRcdC8vIGBiYXNpY0xlbmd0aGAgaXMgdGhlIG51bWJlciBvZiBiYXNpYyBjb2RlIHBvaW50cy5cblxuXHRcdC8vIEZpbmlzaCB0aGUgYmFzaWMgc3RyaW5nIC0gaWYgaXQgaXMgbm90IGVtcHR5IC0gd2l0aCBhIGRlbGltaXRlclxuXHRcdGlmIChiYXNpY0xlbmd0aCkge1xuXHRcdFx0b3V0cHV0LnB1c2goZGVsaW1pdGVyKTtcblx0XHR9XG5cblx0XHQvLyBNYWluIGVuY29kaW5nIGxvb3A6XG5cdFx0d2hpbGUgKGhhbmRsZWRDUENvdW50IDwgaW5wdXRMZW5ndGgpIHtcblxuXHRcdFx0Ly8gQWxsIG5vbi1iYXNpYyBjb2RlIHBvaW50cyA8IG4gaGF2ZSBiZWVuIGhhbmRsZWQgYWxyZWFkeS4gRmluZCB0aGUgbmV4dFxuXHRcdFx0Ly8gbGFyZ2VyIG9uZTpcblx0XHRcdGZvciAobSA9IG1heEludCwgaiA9IDA7IGogPCBpbnB1dExlbmd0aDsgKytqKSB7XG5cdFx0XHRcdGN1cnJlbnRWYWx1ZSA9IGlucHV0W2pdO1xuXHRcdFx0XHRpZiAoY3VycmVudFZhbHVlID49IG4gJiYgY3VycmVudFZhbHVlIDwgbSkge1xuXHRcdFx0XHRcdG0gPSBjdXJyZW50VmFsdWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gSW5jcmVhc2UgYGRlbHRhYCBlbm91Z2ggdG8gYWR2YW5jZSB0aGUgZGVjb2RlcidzIDxuLGk+IHN0YXRlIHRvIDxtLDA+LFxuXHRcdFx0Ly8gYnV0IGd1YXJkIGFnYWluc3Qgb3ZlcmZsb3dcblx0XHRcdGhhbmRsZWRDUENvdW50UGx1c09uZSA9IGhhbmRsZWRDUENvdW50ICsgMTtcblx0XHRcdGlmIChtIC0gbiA+IGZsb29yKChtYXhJbnQgLSBkZWx0YSkgLyBoYW5kbGVkQ1BDb3VudFBsdXNPbmUpKSB7XG5cdFx0XHRcdGVycm9yKCdvdmVyZmxvdycpO1xuXHRcdFx0fVxuXG5cdFx0XHRkZWx0YSArPSAobSAtIG4pICogaGFuZGxlZENQQ291bnRQbHVzT25lO1xuXHRcdFx0biA9IG07XG5cblx0XHRcdGZvciAoaiA9IDA7IGogPCBpbnB1dExlbmd0aDsgKytqKSB7XG5cdFx0XHRcdGN1cnJlbnRWYWx1ZSA9IGlucHV0W2pdO1xuXG5cdFx0XHRcdGlmIChjdXJyZW50VmFsdWUgPCBuICYmICsrZGVsdGEgPiBtYXhJbnQpIHtcblx0XHRcdFx0XHRlcnJvcignb3ZlcmZsb3cnKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChjdXJyZW50VmFsdWUgPT0gbikge1xuXHRcdFx0XHRcdC8vIFJlcHJlc2VudCBkZWx0YSBhcyBhIGdlbmVyYWxpemVkIHZhcmlhYmxlLWxlbmd0aCBpbnRlZ2VyXG5cdFx0XHRcdFx0Zm9yIChxID0gZGVsdGEsIGsgPSBiYXNlOyAvKiBubyBjb25kaXRpb24gKi87IGsgKz0gYmFzZSkge1xuXHRcdFx0XHRcdFx0dCA9IGsgPD0gYmlhcyA/IHRNaW4gOiAoayA+PSBiaWFzICsgdE1heCA/IHRNYXggOiBrIC0gYmlhcyk7XG5cdFx0XHRcdFx0XHRpZiAocSA8IHQpIHtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRxTWludXNUID0gcSAtIHQ7XG5cdFx0XHRcdFx0XHRiYXNlTWludXNUID0gYmFzZSAtIHQ7XG5cdFx0XHRcdFx0XHRvdXRwdXQucHVzaChcblx0XHRcdFx0XHRcdFx0c3RyaW5nRnJvbUNoYXJDb2RlKGRpZ2l0VG9CYXNpYyh0ICsgcU1pbnVzVCAlIGJhc2VNaW51c1QsIDApKVxuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdHEgPSBmbG9vcihxTWludXNUIC8gYmFzZU1pbnVzVCk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0b3V0cHV0LnB1c2goc3RyaW5nRnJvbUNoYXJDb2RlKGRpZ2l0VG9CYXNpYyhxLCAwKSkpO1xuXHRcdFx0XHRcdGJpYXMgPSBhZGFwdChkZWx0YSwgaGFuZGxlZENQQ291bnRQbHVzT25lLCBoYW5kbGVkQ1BDb3VudCA9PSBiYXNpY0xlbmd0aCk7XG5cdFx0XHRcdFx0ZGVsdGEgPSAwO1xuXHRcdFx0XHRcdCsraGFuZGxlZENQQ291bnQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0KytkZWx0YTtcblx0XHRcdCsrbjtcblxuXHRcdH1cblx0XHRyZXR1cm4gb3V0cHV0LmpvaW4oJycpO1xuXHR9XG5cblx0LyoqXG5cdCAqIENvbnZlcnRzIGEgUHVueWNvZGUgc3RyaW5nIHJlcHJlc2VudGluZyBhIGRvbWFpbiBuYW1lIG9yIGFuIGVtYWlsIGFkZHJlc3Ncblx0ICogdG8gVW5pY29kZS4gT25seSB0aGUgUHVueWNvZGVkIHBhcnRzIG9mIHRoZSBpbnB1dCB3aWxsIGJlIGNvbnZlcnRlZCwgaS5lLlxuXHQgKiBpdCBkb2Vzbid0IG1hdHRlciBpZiB5b3UgY2FsbCBpdCBvbiBhIHN0cmluZyB0aGF0IGhhcyBhbHJlYWR5IGJlZW5cblx0ICogY29udmVydGVkIHRvIFVuaWNvZGUuXG5cdCAqIEBtZW1iZXJPZiBwdW55Y29kZVxuXHQgKiBAcGFyYW0ge1N0cmluZ30gaW5wdXQgVGhlIFB1bnljb2RlZCBkb21haW4gbmFtZSBvciBlbWFpbCBhZGRyZXNzIHRvXG5cdCAqIGNvbnZlcnQgdG8gVW5pY29kZS5cblx0ICogQHJldHVybnMge1N0cmluZ30gVGhlIFVuaWNvZGUgcmVwcmVzZW50YXRpb24gb2YgdGhlIGdpdmVuIFB1bnljb2RlXG5cdCAqIHN0cmluZy5cblx0ICovXG5cdGZ1bmN0aW9uIHRvVW5pY29kZShpbnB1dCkge1xuXHRcdHJldHVybiBtYXBEb21haW4oaW5wdXQsIGZ1bmN0aW9uKHN0cmluZykge1xuXHRcdFx0cmV0dXJuIHJlZ2V4UHVueWNvZGUudGVzdChzdHJpbmcpXG5cdFx0XHRcdD8gZGVjb2RlKHN0cmluZy5zbGljZSg0KS50b0xvd2VyQ2FzZSgpKVxuXHRcdFx0XHQ6IHN0cmluZztcblx0XHR9KTtcblx0fVxuXG5cdC8qKlxuXHQgKiBDb252ZXJ0cyBhIFVuaWNvZGUgc3RyaW5nIHJlcHJlc2VudGluZyBhIGRvbWFpbiBuYW1lIG9yIGFuIGVtYWlsIGFkZHJlc3MgdG9cblx0ICogUHVueWNvZGUuIE9ubHkgdGhlIG5vbi1BU0NJSSBwYXJ0cyBvZiB0aGUgZG9tYWluIG5hbWUgd2lsbCBiZSBjb252ZXJ0ZWQsXG5cdCAqIGkuZS4gaXQgZG9lc24ndCBtYXR0ZXIgaWYgeW91IGNhbGwgaXQgd2l0aCBhIGRvbWFpbiB0aGF0J3MgYWxyZWFkeSBpblxuXHQgKiBBU0NJSS5cblx0ICogQG1lbWJlck9mIHB1bnljb2RlXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSBpbnB1dCBUaGUgZG9tYWluIG5hbWUgb3IgZW1haWwgYWRkcmVzcyB0byBjb252ZXJ0LCBhcyBhXG5cdCAqIFVuaWNvZGUgc3RyaW5nLlxuXHQgKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgUHVueWNvZGUgcmVwcmVzZW50YXRpb24gb2YgdGhlIGdpdmVuIGRvbWFpbiBuYW1lIG9yXG5cdCAqIGVtYWlsIGFkZHJlc3MuXG5cdCAqL1xuXHRmdW5jdGlvbiB0b0FTQ0lJKGlucHV0KSB7XG5cdFx0cmV0dXJuIG1hcERvbWFpbihpbnB1dCwgZnVuY3Rpb24oc3RyaW5nKSB7XG5cdFx0XHRyZXR1cm4gcmVnZXhOb25BU0NJSS50ZXN0KHN0cmluZylcblx0XHRcdFx0PyAneG4tLScgKyBlbmNvZGUoc3RyaW5nKVxuXHRcdFx0XHQ6IHN0cmluZztcblx0XHR9KTtcblx0fVxuXG5cdC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG5cdC8qKiBEZWZpbmUgdGhlIHB1YmxpYyBBUEkgKi9cblx0cHVueWNvZGUgPSB7XG5cdFx0LyoqXG5cdFx0ICogQSBzdHJpbmcgcmVwcmVzZW50aW5nIHRoZSBjdXJyZW50IFB1bnljb2RlLmpzIHZlcnNpb24gbnVtYmVyLlxuXHRcdCAqIEBtZW1iZXJPZiBwdW55Y29kZVxuXHRcdCAqIEB0eXBlIFN0cmluZ1xuXHRcdCAqL1xuXHRcdCd2ZXJzaW9uJzogJzEuMy4yJyxcblx0XHQvKipcblx0XHQgKiBBbiBvYmplY3Qgb2YgbWV0aG9kcyB0byBjb252ZXJ0IGZyb20gSmF2YVNjcmlwdCdzIGludGVybmFsIGNoYXJhY3RlclxuXHRcdCAqIHJlcHJlc2VudGF0aW9uIChVQ1MtMikgdG8gVW5pY29kZSBjb2RlIHBvaW50cywgYW5kIGJhY2suXG5cdFx0ICogQHNlZSA8aHR0cHM6Ly9tYXRoaWFzYnluZW5zLmJlL25vdGVzL2phdmFzY3JpcHQtZW5jb2Rpbmc+XG5cdFx0ICogQG1lbWJlck9mIHB1bnljb2RlXG5cdFx0ICogQHR5cGUgT2JqZWN0XG5cdFx0ICovXG5cdFx0J3VjczInOiB7XG5cdFx0XHQnZGVjb2RlJzogdWNzMmRlY29kZSxcblx0XHRcdCdlbmNvZGUnOiB1Y3MyZW5jb2RlXG5cdFx0fSxcblx0XHQnZGVjb2RlJzogZGVjb2RlLFxuXHRcdCdlbmNvZGUnOiBlbmNvZGUsXG5cdFx0J3RvQVNDSUknOiB0b0FTQ0lJLFxuXHRcdCd0b1VuaWNvZGUnOiB0b1VuaWNvZGVcblx0fTtcblxuXHQvKiogRXhwb3NlIGBwdW55Y29kZWAgKi9cblx0Ly8gU29tZSBBTUQgYnVpbGQgb3B0aW1pemVycywgbGlrZSByLmpzLCBjaGVjayBmb3Igc3BlY2lmaWMgY29uZGl0aW9uIHBhdHRlcm5zXG5cdC8vIGxpa2UgdGhlIGZvbGxvd2luZzpcblx0aWYgKFxuXHRcdHR5cGVvZiBkZWZpbmUgPT0gJ2Z1bmN0aW9uJyAmJlxuXHRcdHR5cGVvZiBkZWZpbmUuYW1kID09ICdvYmplY3QnICYmXG5cdFx0ZGVmaW5lLmFtZFxuXHQpIHtcblx0XHRkZWZpbmUoJ3B1bnljb2RlJywgZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gcHVueWNvZGU7XG5cdFx0fSk7XG5cdH0gZWxzZSBpZiAoZnJlZUV4cG9ydHMgJiYgZnJlZU1vZHVsZSkge1xuXHRcdGlmIChtb2R1bGUuZXhwb3J0cyA9PSBmcmVlRXhwb3J0cykgeyAvLyBpbiBOb2RlLmpzIG9yIFJpbmdvSlMgdjAuOC4wK1xuXHRcdFx0ZnJlZU1vZHVsZS5leHBvcnRzID0gcHVueWNvZGU7XG5cdFx0fSBlbHNlIHsgLy8gaW4gTmFyd2hhbCBvciBSaW5nb0pTIHYwLjcuMC1cblx0XHRcdGZvciAoa2V5IGluIHB1bnljb2RlKSB7XG5cdFx0XHRcdHB1bnljb2RlLmhhc093blByb3BlcnR5KGtleSkgJiYgKGZyZWVFeHBvcnRzW2tleV0gPSBwdW55Y29kZVtrZXldKTtcblx0XHRcdH1cblx0XHR9XG5cdH0gZWxzZSB7IC8vIGluIFJoaW5vIG9yIGEgd2ViIGJyb3dzZXJcblx0XHRyb290LnB1bnljb2RlID0gcHVueWNvZGU7XG5cdH1cblxufSh0aGlzKSk7XG4iLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgcHVueWNvZGUgPSByZXF1aXJlKCdwdW55Y29kZScpO1xudmFyIHV0aWwgPSByZXF1aXJlKCcuL3V0aWwnKTtcblxuZXhwb3J0cy5wYXJzZSA9IHVybFBhcnNlO1xuZXhwb3J0cy5yZXNvbHZlID0gdXJsUmVzb2x2ZTtcbmV4cG9ydHMucmVzb2x2ZU9iamVjdCA9IHVybFJlc29sdmVPYmplY3Q7XG5leHBvcnRzLmZvcm1hdCA9IHVybEZvcm1hdDtcblxuZXhwb3J0cy5VcmwgPSBVcmw7XG5cbmZ1bmN0aW9uIFVybCgpIHtcbiAgdGhpcy5wcm90b2NvbCA9IG51bGw7XG4gIHRoaXMuc2xhc2hlcyA9IG51bGw7XG4gIHRoaXMuYXV0aCA9IG51bGw7XG4gIHRoaXMuaG9zdCA9IG51bGw7XG4gIHRoaXMucG9ydCA9IG51bGw7XG4gIHRoaXMuaG9zdG5hbWUgPSBudWxsO1xuICB0aGlzLmhhc2ggPSBudWxsO1xuICB0aGlzLnNlYXJjaCA9IG51bGw7XG4gIHRoaXMucXVlcnkgPSBudWxsO1xuICB0aGlzLnBhdGhuYW1lID0gbnVsbDtcbiAgdGhpcy5wYXRoID0gbnVsbDtcbiAgdGhpcy5ocmVmID0gbnVsbDtcbn1cblxuLy8gUmVmZXJlbmNlOiBSRkMgMzk4NiwgUkZDIDE4MDgsIFJGQyAyMzk2XG5cbi8vIGRlZmluZSB0aGVzZSBoZXJlIHNvIGF0IGxlYXN0IHRoZXkgb25seSBoYXZlIHRvIGJlXG4vLyBjb21waWxlZCBvbmNlIG9uIHRoZSBmaXJzdCBtb2R1bGUgbG9hZC5cbnZhciBwcm90b2NvbFBhdHRlcm4gPSAvXihbYS16MC05ListXSs6KS9pLFxuICAgIHBvcnRQYXR0ZXJuID0gLzpbMC05XSokLyxcblxuICAgIC8vIFNwZWNpYWwgY2FzZSBmb3IgYSBzaW1wbGUgcGF0aCBVUkxcbiAgICBzaW1wbGVQYXRoUGF0dGVybiA9IC9eKFxcL1xcLz8oPyFcXC8pW15cXD9cXHNdKikoXFw/W15cXHNdKik/JC8sXG5cbiAgICAvLyBSRkMgMjM5NjogY2hhcmFjdGVycyByZXNlcnZlZCBmb3IgZGVsaW1pdGluZyBVUkxzLlxuICAgIC8vIFdlIGFjdHVhbGx5IGp1c3QgYXV0by1lc2NhcGUgdGhlc2UuXG4gICAgZGVsaW1zID0gWyc8JywgJz4nLCAnXCInLCAnYCcsICcgJywgJ1xccicsICdcXG4nLCAnXFx0J10sXG5cbiAgICAvLyBSRkMgMjM5NjogY2hhcmFjdGVycyBub3QgYWxsb3dlZCBmb3IgdmFyaW91cyByZWFzb25zLlxuICAgIHVud2lzZSA9IFsneycsICd9JywgJ3wnLCAnXFxcXCcsICdeJywgJ2AnXS5jb25jYXQoZGVsaW1zKSxcblxuICAgIC8vIEFsbG93ZWQgYnkgUkZDcywgYnV0IGNhdXNlIG9mIFhTUyBhdHRhY2tzLiAgQWx3YXlzIGVzY2FwZSB0aGVzZS5cbiAgICBhdXRvRXNjYXBlID0gWydcXCcnXS5jb25jYXQodW53aXNlKSxcbiAgICAvLyBDaGFyYWN0ZXJzIHRoYXQgYXJlIG5ldmVyIGV2ZXIgYWxsb3dlZCBpbiBhIGhvc3RuYW1lLlxuICAgIC8vIE5vdGUgdGhhdCBhbnkgaW52YWxpZCBjaGFycyBhcmUgYWxzbyBoYW5kbGVkLCBidXQgdGhlc2VcbiAgICAvLyBhcmUgdGhlIG9uZXMgdGhhdCBhcmUgKmV4cGVjdGVkKiB0byBiZSBzZWVuLCBzbyB3ZSBmYXN0LXBhdGhcbiAgICAvLyB0aGVtLlxuICAgIG5vbkhvc3RDaGFycyA9IFsnJScsICcvJywgJz8nLCAnOycsICcjJ10uY29uY2F0KGF1dG9Fc2NhcGUpLFxuICAgIGhvc3RFbmRpbmdDaGFycyA9IFsnLycsICc/JywgJyMnXSxcbiAgICBob3N0bmFtZU1heExlbiA9IDI1NSxcbiAgICBob3N0bmFtZVBhcnRQYXR0ZXJuID0gL15bK2EtejAtOUEtWl8tXXswLDYzfSQvLFxuICAgIGhvc3RuYW1lUGFydFN0YXJ0ID0gL14oWythLXowLTlBLVpfLV17MCw2M30pKC4qKSQvLFxuICAgIC8vIHByb3RvY29scyB0aGF0IGNhbiBhbGxvdyBcInVuc2FmZVwiIGFuZCBcInVud2lzZVwiIGNoYXJzLlxuICAgIHVuc2FmZVByb3RvY29sID0ge1xuICAgICAgJ2phdmFzY3JpcHQnOiB0cnVlLFxuICAgICAgJ2phdmFzY3JpcHQ6JzogdHJ1ZVxuICAgIH0sXG4gICAgLy8gcHJvdG9jb2xzIHRoYXQgbmV2ZXIgaGF2ZSBhIGhvc3RuYW1lLlxuICAgIGhvc3RsZXNzUHJvdG9jb2wgPSB7XG4gICAgICAnamF2YXNjcmlwdCc6IHRydWUsXG4gICAgICAnamF2YXNjcmlwdDonOiB0cnVlXG4gICAgfSxcbiAgICAvLyBwcm90b2NvbHMgdGhhdCBhbHdheXMgY29udGFpbiBhIC8vIGJpdC5cbiAgICBzbGFzaGVkUHJvdG9jb2wgPSB7XG4gICAgICAnaHR0cCc6IHRydWUsXG4gICAgICAnaHR0cHMnOiB0cnVlLFxuICAgICAgJ2Z0cCc6IHRydWUsXG4gICAgICAnZ29waGVyJzogdHJ1ZSxcbiAgICAgICdmaWxlJzogdHJ1ZSxcbiAgICAgICdodHRwOic6IHRydWUsXG4gICAgICAnaHR0cHM6JzogdHJ1ZSxcbiAgICAgICdmdHA6JzogdHJ1ZSxcbiAgICAgICdnb3BoZXI6JzogdHJ1ZSxcbiAgICAgICdmaWxlOic6IHRydWVcbiAgICB9LFxuICAgIHF1ZXJ5c3RyaW5nID0gcmVxdWlyZSgncXVlcnlzdHJpbmcnKTtcblxuZnVuY3Rpb24gdXJsUGFyc2UodXJsLCBwYXJzZVF1ZXJ5U3RyaW5nLCBzbGFzaGVzRGVub3RlSG9zdCkge1xuICBpZiAodXJsICYmIHV0aWwuaXNPYmplY3QodXJsKSAmJiB1cmwgaW5zdGFuY2VvZiBVcmwpIHJldHVybiB1cmw7XG5cbiAgdmFyIHUgPSBuZXcgVXJsO1xuICB1LnBhcnNlKHVybCwgcGFyc2VRdWVyeVN0cmluZywgc2xhc2hlc0Rlbm90ZUhvc3QpO1xuICByZXR1cm4gdTtcbn1cblxuVXJsLnByb3RvdHlwZS5wYXJzZSA9IGZ1bmN0aW9uKHVybCwgcGFyc2VRdWVyeVN0cmluZywgc2xhc2hlc0Rlbm90ZUhvc3QpIHtcbiAgaWYgKCF1dGlsLmlzU3RyaW5nKHVybCkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUGFyYW1ldGVyICd1cmwnIG11c3QgYmUgYSBzdHJpbmcsIG5vdCBcIiArIHR5cGVvZiB1cmwpO1xuICB9XG5cbiAgLy8gQ29weSBjaHJvbWUsIElFLCBvcGVyYSBiYWNrc2xhc2gtaGFuZGxpbmcgYmVoYXZpb3IuXG4gIC8vIEJhY2sgc2xhc2hlcyBiZWZvcmUgdGhlIHF1ZXJ5IHN0cmluZyBnZXQgY29udmVydGVkIHRvIGZvcndhcmQgc2xhc2hlc1xuICAvLyBTZWU6IGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD0yNTkxNlxuICB2YXIgcXVlcnlJbmRleCA9IHVybC5pbmRleE9mKCc/JyksXG4gICAgICBzcGxpdHRlciA9XG4gICAgICAgICAgKHF1ZXJ5SW5kZXggIT09IC0xICYmIHF1ZXJ5SW5kZXggPCB1cmwuaW5kZXhPZignIycpKSA/ICc/JyA6ICcjJyxcbiAgICAgIHVTcGxpdCA9IHVybC5zcGxpdChzcGxpdHRlciksXG4gICAgICBzbGFzaFJlZ2V4ID0gL1xcXFwvZztcbiAgdVNwbGl0WzBdID0gdVNwbGl0WzBdLnJlcGxhY2Uoc2xhc2hSZWdleCwgJy8nKTtcbiAgdXJsID0gdVNwbGl0LmpvaW4oc3BsaXR0ZXIpO1xuXG4gIHZhciByZXN0ID0gdXJsO1xuXG4gIC8vIHRyaW0gYmVmb3JlIHByb2NlZWRpbmcuXG4gIC8vIFRoaXMgaXMgdG8gc3VwcG9ydCBwYXJzZSBzdHVmZiBsaWtlIFwiICBodHRwOi8vZm9vLmNvbSAgXFxuXCJcbiAgcmVzdCA9IHJlc3QudHJpbSgpO1xuXG4gIGlmICghc2xhc2hlc0Rlbm90ZUhvc3QgJiYgdXJsLnNwbGl0KCcjJykubGVuZ3RoID09PSAxKSB7XG4gICAgLy8gVHJ5IGZhc3QgcGF0aCByZWdleHBcbiAgICB2YXIgc2ltcGxlUGF0aCA9IHNpbXBsZVBhdGhQYXR0ZXJuLmV4ZWMocmVzdCk7XG4gICAgaWYgKHNpbXBsZVBhdGgpIHtcbiAgICAgIHRoaXMucGF0aCA9IHJlc3Q7XG4gICAgICB0aGlzLmhyZWYgPSByZXN0O1xuICAgICAgdGhpcy5wYXRobmFtZSA9IHNpbXBsZVBhdGhbMV07XG4gICAgICBpZiAoc2ltcGxlUGF0aFsyXSkge1xuICAgICAgICB0aGlzLnNlYXJjaCA9IHNpbXBsZVBhdGhbMl07XG4gICAgICAgIGlmIChwYXJzZVF1ZXJ5U3RyaW5nKSB7XG4gICAgICAgICAgdGhpcy5xdWVyeSA9IHF1ZXJ5c3RyaW5nLnBhcnNlKHRoaXMuc2VhcmNoLnN1YnN0cigxKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5xdWVyeSA9IHRoaXMuc2VhcmNoLnN1YnN0cigxKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChwYXJzZVF1ZXJ5U3RyaW5nKSB7XG4gICAgICAgIHRoaXMuc2VhcmNoID0gJyc7XG4gICAgICAgIHRoaXMucXVlcnkgPSB7fTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgfVxuXG4gIHZhciBwcm90byA9IHByb3RvY29sUGF0dGVybi5leGVjKHJlc3QpO1xuICBpZiAocHJvdG8pIHtcbiAgICBwcm90byA9IHByb3RvWzBdO1xuICAgIHZhciBsb3dlclByb3RvID0gcHJvdG8udG9Mb3dlckNhc2UoKTtcbiAgICB0aGlzLnByb3RvY29sID0gbG93ZXJQcm90bztcbiAgICByZXN0ID0gcmVzdC5zdWJzdHIocHJvdG8ubGVuZ3RoKTtcbiAgfVxuXG4gIC8vIGZpZ3VyZSBvdXQgaWYgaXQncyBnb3QgYSBob3N0XG4gIC8vIHVzZXJAc2VydmVyIGlzICphbHdheXMqIGludGVycHJldGVkIGFzIGEgaG9zdG5hbWUsIGFuZCB1cmxcbiAgLy8gcmVzb2x1dGlvbiB3aWxsIHRyZWF0IC8vZm9vL2JhciBhcyBob3N0PWZvbyxwYXRoPWJhciBiZWNhdXNlIHRoYXQnc1xuICAvLyBob3cgdGhlIGJyb3dzZXIgcmVzb2x2ZXMgcmVsYXRpdmUgVVJMcy5cbiAgaWYgKHNsYXNoZXNEZW5vdGVIb3N0IHx8IHByb3RvIHx8IHJlc3QubWF0Y2goL15cXC9cXC9bXkBcXC9dK0BbXkBcXC9dKy8pKSB7XG4gICAgdmFyIHNsYXNoZXMgPSByZXN0LnN1YnN0cigwLCAyKSA9PT0gJy8vJztcbiAgICBpZiAoc2xhc2hlcyAmJiAhKHByb3RvICYmIGhvc3RsZXNzUHJvdG9jb2xbcHJvdG9dKSkge1xuICAgICAgcmVzdCA9IHJlc3Quc3Vic3RyKDIpO1xuICAgICAgdGhpcy5zbGFzaGVzID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICBpZiAoIWhvc3RsZXNzUHJvdG9jb2xbcHJvdG9dICYmXG4gICAgICAoc2xhc2hlcyB8fCAocHJvdG8gJiYgIXNsYXNoZWRQcm90b2NvbFtwcm90b10pKSkge1xuXG4gICAgLy8gdGhlcmUncyBhIGhvc3RuYW1lLlxuICAgIC8vIHRoZSBmaXJzdCBpbnN0YW5jZSBvZiAvLCA/LCA7LCBvciAjIGVuZHMgdGhlIGhvc3QuXG4gICAgLy9cbiAgICAvLyBJZiB0aGVyZSBpcyBhbiBAIGluIHRoZSBob3N0bmFtZSwgdGhlbiBub24taG9zdCBjaGFycyAqYXJlKiBhbGxvd2VkXG4gICAgLy8gdG8gdGhlIGxlZnQgb2YgdGhlIGxhc3QgQCBzaWduLCB1bmxlc3Mgc29tZSBob3N0LWVuZGluZyBjaGFyYWN0ZXJcbiAgICAvLyBjb21lcyAqYmVmb3JlKiB0aGUgQC1zaWduLlxuICAgIC8vIFVSTHMgYXJlIG9ibm94aW91cy5cbiAgICAvL1xuICAgIC8vIGV4OlxuICAgIC8vIGh0dHA6Ly9hQGJAYy8gPT4gdXNlcjphQGIgaG9zdDpjXG4gICAgLy8gaHR0cDovL2FAYj9AYyA9PiB1c2VyOmEgaG9zdDpjIHBhdGg6Lz9AY1xuXG4gICAgLy8gdjAuMTIgVE9ETyhpc2FhY3MpOiBUaGlzIGlzIG5vdCBxdWl0ZSBob3cgQ2hyb21lIGRvZXMgdGhpbmdzLlxuICAgIC8vIFJldmlldyBvdXIgdGVzdCBjYXNlIGFnYWluc3QgYnJvd3NlcnMgbW9yZSBjb21wcmVoZW5zaXZlbHkuXG5cbiAgICAvLyBmaW5kIHRoZSBmaXJzdCBpbnN0YW5jZSBvZiBhbnkgaG9zdEVuZGluZ0NoYXJzXG4gICAgdmFyIGhvc3RFbmQgPSAtMTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGhvc3RFbmRpbmdDaGFycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGhlYyA9IHJlc3QuaW5kZXhPZihob3N0RW5kaW5nQ2hhcnNbaV0pO1xuICAgICAgaWYgKGhlYyAhPT0gLTEgJiYgKGhvc3RFbmQgPT09IC0xIHx8IGhlYyA8IGhvc3RFbmQpKVxuICAgICAgICBob3N0RW5kID0gaGVjO1xuICAgIH1cblxuICAgIC8vIGF0IHRoaXMgcG9pbnQsIGVpdGhlciB3ZSBoYXZlIGFuIGV4cGxpY2l0IHBvaW50IHdoZXJlIHRoZVxuICAgIC8vIGF1dGggcG9ydGlvbiBjYW5ub3QgZ28gcGFzdCwgb3IgdGhlIGxhc3QgQCBjaGFyIGlzIHRoZSBkZWNpZGVyLlxuICAgIHZhciBhdXRoLCBhdFNpZ247XG4gICAgaWYgKGhvc3RFbmQgPT09IC0xKSB7XG4gICAgICAvLyBhdFNpZ24gY2FuIGJlIGFueXdoZXJlLlxuICAgICAgYXRTaWduID0gcmVzdC5sYXN0SW5kZXhPZignQCcpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBhdFNpZ24gbXVzdCBiZSBpbiBhdXRoIHBvcnRpb24uXG4gICAgICAvLyBodHRwOi8vYUBiL2NAZCA9PiBob3N0OmIgYXV0aDphIHBhdGg6L2NAZFxuICAgICAgYXRTaWduID0gcmVzdC5sYXN0SW5kZXhPZignQCcsIGhvc3RFbmQpO1xuICAgIH1cblxuICAgIC8vIE5vdyB3ZSBoYXZlIGEgcG9ydGlvbiB3aGljaCBpcyBkZWZpbml0ZWx5IHRoZSBhdXRoLlxuICAgIC8vIFB1bGwgdGhhdCBvZmYuXG4gICAgaWYgKGF0U2lnbiAhPT0gLTEpIHtcbiAgICAgIGF1dGggPSByZXN0LnNsaWNlKDAsIGF0U2lnbik7XG4gICAgICByZXN0ID0gcmVzdC5zbGljZShhdFNpZ24gKyAxKTtcbiAgICAgIHRoaXMuYXV0aCA9IGRlY29kZVVSSUNvbXBvbmVudChhdXRoKTtcbiAgICB9XG5cbiAgICAvLyB0aGUgaG9zdCBpcyB0aGUgcmVtYWluaW5nIHRvIHRoZSBsZWZ0IG9mIHRoZSBmaXJzdCBub24taG9zdCBjaGFyXG4gICAgaG9zdEVuZCA9IC0xO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbm9uSG9zdENoYXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaGVjID0gcmVzdC5pbmRleE9mKG5vbkhvc3RDaGFyc1tpXSk7XG4gICAgICBpZiAoaGVjICE9PSAtMSAmJiAoaG9zdEVuZCA9PT0gLTEgfHwgaGVjIDwgaG9zdEVuZCkpXG4gICAgICAgIGhvc3RFbmQgPSBoZWM7XG4gICAgfVxuICAgIC8vIGlmIHdlIHN0aWxsIGhhdmUgbm90IGhpdCBpdCwgdGhlbiB0aGUgZW50aXJlIHRoaW5nIGlzIGEgaG9zdC5cbiAgICBpZiAoaG9zdEVuZCA9PT0gLTEpXG4gICAgICBob3N0RW5kID0gcmVzdC5sZW5ndGg7XG5cbiAgICB0aGlzLmhvc3QgPSByZXN0LnNsaWNlKDAsIGhvc3RFbmQpO1xuICAgIHJlc3QgPSByZXN0LnNsaWNlKGhvc3RFbmQpO1xuXG4gICAgLy8gcHVsbCBvdXQgcG9ydC5cbiAgICB0aGlzLnBhcnNlSG9zdCgpO1xuXG4gICAgLy8gd2UndmUgaW5kaWNhdGVkIHRoYXQgdGhlcmUgaXMgYSBob3N0bmFtZSxcbiAgICAvLyBzbyBldmVuIGlmIGl0J3MgZW1wdHksIGl0IGhhcyB0byBiZSBwcmVzZW50LlxuICAgIHRoaXMuaG9zdG5hbWUgPSB0aGlzLmhvc3RuYW1lIHx8ICcnO1xuXG4gICAgLy8gaWYgaG9zdG5hbWUgYmVnaW5zIHdpdGggWyBhbmQgZW5kcyB3aXRoIF1cbiAgICAvLyBhc3N1bWUgdGhhdCBpdCdzIGFuIElQdjYgYWRkcmVzcy5cbiAgICB2YXIgaXB2Nkhvc3RuYW1lID0gdGhpcy5ob3N0bmFtZVswXSA9PT0gJ1snICYmXG4gICAgICAgIHRoaXMuaG9zdG5hbWVbdGhpcy5ob3N0bmFtZS5sZW5ndGggLSAxXSA9PT0gJ10nO1xuXG4gICAgLy8gdmFsaWRhdGUgYSBsaXR0bGUuXG4gICAgaWYgKCFpcHY2SG9zdG5hbWUpIHtcbiAgICAgIHZhciBob3N0cGFydHMgPSB0aGlzLmhvc3RuYW1lLnNwbGl0KC9cXC4vKTtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gaG9zdHBhcnRzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICB2YXIgcGFydCA9IGhvc3RwYXJ0c1tpXTtcbiAgICAgICAgaWYgKCFwYXJ0KSBjb250aW51ZTtcbiAgICAgICAgaWYgKCFwYXJ0Lm1hdGNoKGhvc3RuYW1lUGFydFBhdHRlcm4pKSB7XG4gICAgICAgICAgdmFyIG5ld3BhcnQgPSAnJztcbiAgICAgICAgICBmb3IgKHZhciBqID0gMCwgayA9IHBhcnQubGVuZ3RoOyBqIDwgazsgaisrKSB7XG4gICAgICAgICAgICBpZiAocGFydC5jaGFyQ29kZUF0KGopID4gMTI3KSB7XG4gICAgICAgICAgICAgIC8vIHdlIHJlcGxhY2Ugbm9uLUFTQ0lJIGNoYXIgd2l0aCBhIHRlbXBvcmFyeSBwbGFjZWhvbGRlclxuICAgICAgICAgICAgICAvLyB3ZSBuZWVkIHRoaXMgdG8gbWFrZSBzdXJlIHNpemUgb2YgaG9zdG5hbWUgaXMgbm90XG4gICAgICAgICAgICAgIC8vIGJyb2tlbiBieSByZXBsYWNpbmcgbm9uLUFTQ0lJIGJ5IG5vdGhpbmdcbiAgICAgICAgICAgICAgbmV3cGFydCArPSAneCc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBuZXdwYXJ0ICs9IHBhcnRbal07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIHdlIHRlc3QgYWdhaW4gd2l0aCBBU0NJSSBjaGFyIG9ubHlcbiAgICAgICAgICBpZiAoIW5ld3BhcnQubWF0Y2goaG9zdG5hbWVQYXJ0UGF0dGVybikpIHtcbiAgICAgICAgICAgIHZhciB2YWxpZFBhcnRzID0gaG9zdHBhcnRzLnNsaWNlKDAsIGkpO1xuICAgICAgICAgICAgdmFyIG5vdEhvc3QgPSBob3N0cGFydHMuc2xpY2UoaSArIDEpO1xuICAgICAgICAgICAgdmFyIGJpdCA9IHBhcnQubWF0Y2goaG9zdG5hbWVQYXJ0U3RhcnQpO1xuICAgICAgICAgICAgaWYgKGJpdCkge1xuICAgICAgICAgICAgICB2YWxpZFBhcnRzLnB1c2goYml0WzFdKTtcbiAgICAgICAgICAgICAgbm90SG9zdC51bnNoaWZ0KGJpdFsyXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobm90SG9zdC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgcmVzdCA9ICcvJyArIG5vdEhvc3Quam9pbignLicpICsgcmVzdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuaG9zdG5hbWUgPSB2YWxpZFBhcnRzLmpvaW4oJy4nKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0aGlzLmhvc3RuYW1lLmxlbmd0aCA+IGhvc3RuYW1lTWF4TGVuKSB7XG4gICAgICB0aGlzLmhvc3RuYW1lID0gJyc7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGhvc3RuYW1lcyBhcmUgYWx3YXlzIGxvd2VyIGNhc2UuXG4gICAgICB0aGlzLmhvc3RuYW1lID0gdGhpcy5ob3N0bmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgIH1cblxuICAgIGlmICghaXB2Nkhvc3RuYW1lKSB7XG4gICAgICAvLyBJRE5BIFN1cHBvcnQ6IFJldHVybnMgYSBwdW55Y29kZWQgcmVwcmVzZW50YXRpb24gb2YgXCJkb21haW5cIi5cbiAgICAgIC8vIEl0IG9ubHkgY29udmVydHMgcGFydHMgb2YgdGhlIGRvbWFpbiBuYW1lIHRoYXRcbiAgICAgIC8vIGhhdmUgbm9uLUFTQ0lJIGNoYXJhY3RlcnMsIGkuZS4gaXQgZG9lc24ndCBtYXR0ZXIgaWZcbiAgICAgIC8vIHlvdSBjYWxsIGl0IHdpdGggYSBkb21haW4gdGhhdCBhbHJlYWR5IGlzIEFTQ0lJLW9ubHkuXG4gICAgICB0aGlzLmhvc3RuYW1lID0gcHVueWNvZGUudG9BU0NJSSh0aGlzLmhvc3RuYW1lKTtcbiAgICB9XG5cbiAgICB2YXIgcCA9IHRoaXMucG9ydCA/ICc6JyArIHRoaXMucG9ydCA6ICcnO1xuICAgIHZhciBoID0gdGhpcy5ob3N0bmFtZSB8fCAnJztcbiAgICB0aGlzLmhvc3QgPSBoICsgcDtcbiAgICB0aGlzLmhyZWYgKz0gdGhpcy5ob3N0O1xuXG4gICAgLy8gc3RyaXAgWyBhbmQgXSBmcm9tIHRoZSBob3N0bmFtZVxuICAgIC8vIHRoZSBob3N0IGZpZWxkIHN0aWxsIHJldGFpbnMgdGhlbSwgdGhvdWdoXG4gICAgaWYgKGlwdjZIb3N0bmFtZSkge1xuICAgICAgdGhpcy5ob3N0bmFtZSA9IHRoaXMuaG9zdG5hbWUuc3Vic3RyKDEsIHRoaXMuaG9zdG5hbWUubGVuZ3RoIC0gMik7XG4gICAgICBpZiAocmVzdFswXSAhPT0gJy8nKSB7XG4gICAgICAgIHJlc3QgPSAnLycgKyByZXN0O1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIG5vdyByZXN0IGlzIHNldCB0byB0aGUgcG9zdC1ob3N0IHN0dWZmLlxuICAvLyBjaG9wIG9mZiBhbnkgZGVsaW0gY2hhcnMuXG4gIGlmICghdW5zYWZlUHJvdG9jb2xbbG93ZXJQcm90b10pIHtcblxuICAgIC8vIEZpcnN0LCBtYWtlIDEwMCUgc3VyZSB0aGF0IGFueSBcImF1dG9Fc2NhcGVcIiBjaGFycyBnZXRcbiAgICAvLyBlc2NhcGVkLCBldmVuIGlmIGVuY29kZVVSSUNvbXBvbmVudCBkb2Vzbid0IHRoaW5rIHRoZXlcbiAgICAvLyBuZWVkIHRvIGJlLlxuICAgIGZvciAodmFyIGkgPSAwLCBsID0gYXV0b0VzY2FwZS5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIHZhciBhZSA9IGF1dG9Fc2NhcGVbaV07XG4gICAgICBpZiAocmVzdC5pbmRleE9mKGFlKSA9PT0gLTEpXG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgdmFyIGVzYyA9IGVuY29kZVVSSUNvbXBvbmVudChhZSk7XG4gICAgICBpZiAoZXNjID09PSBhZSkge1xuICAgICAgICBlc2MgPSBlc2NhcGUoYWUpO1xuICAgICAgfVxuICAgICAgcmVzdCA9IHJlc3Quc3BsaXQoYWUpLmpvaW4oZXNjKTtcbiAgICB9XG4gIH1cblxuXG4gIC8vIGNob3Agb2ZmIGZyb20gdGhlIHRhaWwgZmlyc3QuXG4gIHZhciBoYXNoID0gcmVzdC5pbmRleE9mKCcjJyk7XG4gIGlmIChoYXNoICE9PSAtMSkge1xuICAgIC8vIGdvdCBhIGZyYWdtZW50IHN0cmluZy5cbiAgICB0aGlzLmhhc2ggPSByZXN0LnN1YnN0cihoYXNoKTtcbiAgICByZXN0ID0gcmVzdC5zbGljZSgwLCBoYXNoKTtcbiAgfVxuICB2YXIgcW0gPSByZXN0LmluZGV4T2YoJz8nKTtcbiAgaWYgKHFtICE9PSAtMSkge1xuICAgIHRoaXMuc2VhcmNoID0gcmVzdC5zdWJzdHIocW0pO1xuICAgIHRoaXMucXVlcnkgPSByZXN0LnN1YnN0cihxbSArIDEpO1xuICAgIGlmIChwYXJzZVF1ZXJ5U3RyaW5nKSB7XG4gICAgICB0aGlzLnF1ZXJ5ID0gcXVlcnlzdHJpbmcucGFyc2UodGhpcy5xdWVyeSk7XG4gICAgfVxuICAgIHJlc3QgPSByZXN0LnNsaWNlKDAsIHFtKTtcbiAgfSBlbHNlIGlmIChwYXJzZVF1ZXJ5U3RyaW5nKSB7XG4gICAgLy8gbm8gcXVlcnkgc3RyaW5nLCBidXQgcGFyc2VRdWVyeVN0cmluZyBzdGlsbCByZXF1ZXN0ZWRcbiAgICB0aGlzLnNlYXJjaCA9ICcnO1xuICAgIHRoaXMucXVlcnkgPSB7fTtcbiAgfVxuICBpZiAocmVzdCkgdGhpcy5wYXRobmFtZSA9IHJlc3Q7XG4gIGlmIChzbGFzaGVkUHJvdG9jb2xbbG93ZXJQcm90b10gJiZcbiAgICAgIHRoaXMuaG9zdG5hbWUgJiYgIXRoaXMucGF0aG5hbWUpIHtcbiAgICB0aGlzLnBhdGhuYW1lID0gJy8nO1xuICB9XG5cbiAgLy90byBzdXBwb3J0IGh0dHAucmVxdWVzdFxuICBpZiAodGhpcy5wYXRobmFtZSB8fCB0aGlzLnNlYXJjaCkge1xuICAgIHZhciBwID0gdGhpcy5wYXRobmFtZSB8fCAnJztcbiAgICB2YXIgcyA9IHRoaXMuc2VhcmNoIHx8ICcnO1xuICAgIHRoaXMucGF0aCA9IHAgKyBzO1xuICB9XG5cbiAgLy8gZmluYWxseSwgcmVjb25zdHJ1Y3QgdGhlIGhyZWYgYmFzZWQgb24gd2hhdCBoYXMgYmVlbiB2YWxpZGF0ZWQuXG4gIHRoaXMuaHJlZiA9IHRoaXMuZm9ybWF0KCk7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLy8gZm9ybWF0IGEgcGFyc2VkIG9iamVjdCBpbnRvIGEgdXJsIHN0cmluZ1xuZnVuY3Rpb24gdXJsRm9ybWF0KG9iaikge1xuICAvLyBlbnN1cmUgaXQncyBhbiBvYmplY3QsIGFuZCBub3QgYSBzdHJpbmcgdXJsLlxuICAvLyBJZiBpdCdzIGFuIG9iaiwgdGhpcyBpcyBhIG5vLW9wLlxuICAvLyB0aGlzIHdheSwgeW91IGNhbiBjYWxsIHVybF9mb3JtYXQoKSBvbiBzdHJpbmdzXG4gIC8vIHRvIGNsZWFuIHVwIHBvdGVudGlhbGx5IHdvbmt5IHVybHMuXG4gIGlmICh1dGlsLmlzU3RyaW5nKG9iaikpIG9iaiA9IHVybFBhcnNlKG9iaik7XG4gIGlmICghKG9iaiBpbnN0YW5jZW9mIFVybCkpIHJldHVybiBVcmwucHJvdG90eXBlLmZvcm1hdC5jYWxsKG9iaik7XG4gIHJldHVybiBvYmouZm9ybWF0KCk7XG59XG5cblVybC5wcm90b3R5cGUuZm9ybWF0ID0gZnVuY3Rpb24oKSB7XG4gIHZhciBhdXRoID0gdGhpcy5hdXRoIHx8ICcnO1xuICBpZiAoYXV0aCkge1xuICAgIGF1dGggPSBlbmNvZGVVUklDb21wb25lbnQoYXV0aCk7XG4gICAgYXV0aCA9IGF1dGgucmVwbGFjZSgvJTNBL2ksICc6Jyk7XG4gICAgYXV0aCArPSAnQCc7XG4gIH1cblxuICB2YXIgcHJvdG9jb2wgPSB0aGlzLnByb3RvY29sIHx8ICcnLFxuICAgICAgcGF0aG5hbWUgPSB0aGlzLnBhdGhuYW1lIHx8ICcnLFxuICAgICAgaGFzaCA9IHRoaXMuaGFzaCB8fCAnJyxcbiAgICAgIGhvc3QgPSBmYWxzZSxcbiAgICAgIHF1ZXJ5ID0gJyc7XG5cbiAgaWYgKHRoaXMuaG9zdCkge1xuICAgIGhvc3QgPSBhdXRoICsgdGhpcy5ob3N0O1xuICB9IGVsc2UgaWYgKHRoaXMuaG9zdG5hbWUpIHtcbiAgICBob3N0ID0gYXV0aCArICh0aGlzLmhvc3RuYW1lLmluZGV4T2YoJzonKSA9PT0gLTEgP1xuICAgICAgICB0aGlzLmhvc3RuYW1lIDpcbiAgICAgICAgJ1snICsgdGhpcy5ob3N0bmFtZSArICddJyk7XG4gICAgaWYgKHRoaXMucG9ydCkge1xuICAgICAgaG9zdCArPSAnOicgKyB0aGlzLnBvcnQ7XG4gICAgfVxuICB9XG5cbiAgaWYgKHRoaXMucXVlcnkgJiZcbiAgICAgIHV0aWwuaXNPYmplY3QodGhpcy5xdWVyeSkgJiZcbiAgICAgIE9iamVjdC5rZXlzKHRoaXMucXVlcnkpLmxlbmd0aCkge1xuICAgIHF1ZXJ5ID0gcXVlcnlzdHJpbmcuc3RyaW5naWZ5KHRoaXMucXVlcnkpO1xuICB9XG5cbiAgdmFyIHNlYXJjaCA9IHRoaXMuc2VhcmNoIHx8IChxdWVyeSAmJiAoJz8nICsgcXVlcnkpKSB8fCAnJztcblxuICBpZiAocHJvdG9jb2wgJiYgcHJvdG9jb2wuc3Vic3RyKC0xKSAhPT0gJzonKSBwcm90b2NvbCArPSAnOic7XG5cbiAgLy8gb25seSB0aGUgc2xhc2hlZFByb3RvY29scyBnZXQgdGhlIC8vLiAgTm90IG1haWx0bzosIHhtcHA6LCBldGMuXG4gIC8vIHVubGVzcyB0aGV5IGhhZCB0aGVtIHRvIGJlZ2luIHdpdGguXG4gIGlmICh0aGlzLnNsYXNoZXMgfHxcbiAgICAgICghcHJvdG9jb2wgfHwgc2xhc2hlZFByb3RvY29sW3Byb3RvY29sXSkgJiYgaG9zdCAhPT0gZmFsc2UpIHtcbiAgICBob3N0ID0gJy8vJyArIChob3N0IHx8ICcnKTtcbiAgICBpZiAocGF0aG5hbWUgJiYgcGF0aG5hbWUuY2hhckF0KDApICE9PSAnLycpIHBhdGhuYW1lID0gJy8nICsgcGF0aG5hbWU7XG4gIH0gZWxzZSBpZiAoIWhvc3QpIHtcbiAgICBob3N0ID0gJyc7XG4gIH1cblxuICBpZiAoaGFzaCAmJiBoYXNoLmNoYXJBdCgwKSAhPT0gJyMnKSBoYXNoID0gJyMnICsgaGFzaDtcbiAgaWYgKHNlYXJjaCAmJiBzZWFyY2guY2hhckF0KDApICE9PSAnPycpIHNlYXJjaCA9ICc/JyArIHNlYXJjaDtcblxuICBwYXRobmFtZSA9IHBhdGhuYW1lLnJlcGxhY2UoL1s/I10vZywgZnVuY3Rpb24obWF0Y2gpIHtcbiAgICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KG1hdGNoKTtcbiAgfSk7XG4gIHNlYXJjaCA9IHNlYXJjaC5yZXBsYWNlKCcjJywgJyUyMycpO1xuXG4gIHJldHVybiBwcm90b2NvbCArIGhvc3QgKyBwYXRobmFtZSArIHNlYXJjaCArIGhhc2g7XG59O1xuXG5mdW5jdGlvbiB1cmxSZXNvbHZlKHNvdXJjZSwgcmVsYXRpdmUpIHtcbiAgcmV0dXJuIHVybFBhcnNlKHNvdXJjZSwgZmFsc2UsIHRydWUpLnJlc29sdmUocmVsYXRpdmUpO1xufVxuXG5VcmwucHJvdG90eXBlLnJlc29sdmUgPSBmdW5jdGlvbihyZWxhdGl2ZSkge1xuICByZXR1cm4gdGhpcy5yZXNvbHZlT2JqZWN0KHVybFBhcnNlKHJlbGF0aXZlLCBmYWxzZSwgdHJ1ZSkpLmZvcm1hdCgpO1xufTtcblxuZnVuY3Rpb24gdXJsUmVzb2x2ZU9iamVjdChzb3VyY2UsIHJlbGF0aXZlKSB7XG4gIGlmICghc291cmNlKSByZXR1cm4gcmVsYXRpdmU7XG4gIHJldHVybiB1cmxQYXJzZShzb3VyY2UsIGZhbHNlLCB0cnVlKS5yZXNvbHZlT2JqZWN0KHJlbGF0aXZlKTtcbn1cblxuVXJsLnByb3RvdHlwZS5yZXNvbHZlT2JqZWN0ID0gZnVuY3Rpb24ocmVsYXRpdmUpIHtcbiAgaWYgKHV0aWwuaXNTdHJpbmcocmVsYXRpdmUpKSB7XG4gICAgdmFyIHJlbCA9IG5ldyBVcmwoKTtcbiAgICByZWwucGFyc2UocmVsYXRpdmUsIGZhbHNlLCB0cnVlKTtcbiAgICByZWxhdGl2ZSA9IHJlbDtcbiAgfVxuXG4gIHZhciByZXN1bHQgPSBuZXcgVXJsKCk7XG4gIHZhciB0a2V5cyA9IE9iamVjdC5rZXlzKHRoaXMpO1xuICBmb3IgKHZhciB0ayA9IDA7IHRrIDwgdGtleXMubGVuZ3RoOyB0aysrKSB7XG4gICAgdmFyIHRrZXkgPSB0a2V5c1t0a107XG4gICAgcmVzdWx0W3RrZXldID0gdGhpc1t0a2V5XTtcbiAgfVxuXG4gIC8vIGhhc2ggaXMgYWx3YXlzIG92ZXJyaWRkZW4sIG5vIG1hdHRlciB3aGF0LlxuICAvLyBldmVuIGhyZWY9XCJcIiB3aWxsIHJlbW92ZSBpdC5cbiAgcmVzdWx0Lmhhc2ggPSByZWxhdGl2ZS5oYXNoO1xuXG4gIC8vIGlmIHRoZSByZWxhdGl2ZSB1cmwgaXMgZW1wdHksIHRoZW4gdGhlcmUncyBub3RoaW5nIGxlZnQgdG8gZG8gaGVyZS5cbiAgaWYgKHJlbGF0aXZlLmhyZWYgPT09ICcnKSB7XG4gICAgcmVzdWx0LmhyZWYgPSByZXN1bHQuZm9ybWF0KCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8vIGhyZWZzIGxpa2UgLy9mb28vYmFyIGFsd2F5cyBjdXQgdG8gdGhlIHByb3RvY29sLlxuICBpZiAocmVsYXRpdmUuc2xhc2hlcyAmJiAhcmVsYXRpdmUucHJvdG9jb2wpIHtcbiAgICAvLyB0YWtlIGV2ZXJ5dGhpbmcgZXhjZXB0IHRoZSBwcm90b2NvbCBmcm9tIHJlbGF0aXZlXG4gICAgdmFyIHJrZXlzID0gT2JqZWN0LmtleXMocmVsYXRpdmUpO1xuICAgIGZvciAodmFyIHJrID0gMDsgcmsgPCBya2V5cy5sZW5ndGg7IHJrKyspIHtcbiAgICAgIHZhciBya2V5ID0gcmtleXNbcmtdO1xuICAgICAgaWYgKHJrZXkgIT09ICdwcm90b2NvbCcpXG4gICAgICAgIHJlc3VsdFtya2V5XSA9IHJlbGF0aXZlW3JrZXldO1xuICAgIH1cblxuICAgIC8vdXJsUGFyc2UgYXBwZW5kcyB0cmFpbGluZyAvIHRvIHVybHMgbGlrZSBodHRwOi8vd3d3LmV4YW1wbGUuY29tXG4gICAgaWYgKHNsYXNoZWRQcm90b2NvbFtyZXN1bHQucHJvdG9jb2xdICYmXG4gICAgICAgIHJlc3VsdC5ob3N0bmFtZSAmJiAhcmVzdWx0LnBhdGhuYW1lKSB7XG4gICAgICByZXN1bHQucGF0aCA9IHJlc3VsdC5wYXRobmFtZSA9ICcvJztcbiAgICB9XG5cbiAgICByZXN1bHQuaHJlZiA9IHJlc3VsdC5mb3JtYXQoKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgaWYgKHJlbGF0aXZlLnByb3RvY29sICYmIHJlbGF0aXZlLnByb3RvY29sICE9PSByZXN1bHQucHJvdG9jb2wpIHtcbiAgICAvLyBpZiBpdCdzIGEga25vd24gdXJsIHByb3RvY29sLCB0aGVuIGNoYW5naW5nXG4gICAgLy8gdGhlIHByb3RvY29sIGRvZXMgd2VpcmQgdGhpbmdzXG4gICAgLy8gZmlyc3QsIGlmIGl0J3Mgbm90IGZpbGU6LCB0aGVuIHdlIE1VU1QgaGF2ZSBhIGhvc3QsXG4gICAgLy8gYW5kIGlmIHRoZXJlIHdhcyBhIHBhdGhcbiAgICAvLyB0byBiZWdpbiB3aXRoLCB0aGVuIHdlIE1VU1QgaGF2ZSBhIHBhdGguXG4gICAgLy8gaWYgaXQgaXMgZmlsZTosIHRoZW4gdGhlIGhvc3QgaXMgZHJvcHBlZCxcbiAgICAvLyBiZWNhdXNlIHRoYXQncyBrbm93biB0byBiZSBob3N0bGVzcy5cbiAgICAvLyBhbnl0aGluZyBlbHNlIGlzIGFzc3VtZWQgdG8gYmUgYWJzb2x1dGUuXG4gICAgaWYgKCFzbGFzaGVkUHJvdG9jb2xbcmVsYXRpdmUucHJvdG9jb2xdKSB7XG4gICAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKHJlbGF0aXZlKTtcbiAgICAgIGZvciAodmFyIHYgPSAwOyB2IDwga2V5cy5sZW5ndGg7IHYrKykge1xuICAgICAgICB2YXIgayA9IGtleXNbdl07XG4gICAgICAgIHJlc3VsdFtrXSA9IHJlbGF0aXZlW2tdO1xuICAgICAgfVxuICAgICAgcmVzdWx0LmhyZWYgPSByZXN1bHQuZm9ybWF0KCk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIHJlc3VsdC5wcm90b2NvbCA9IHJlbGF0aXZlLnByb3RvY29sO1xuICAgIGlmICghcmVsYXRpdmUuaG9zdCAmJiAhaG9zdGxlc3NQcm90b2NvbFtyZWxhdGl2ZS5wcm90b2NvbF0pIHtcbiAgICAgIHZhciByZWxQYXRoID0gKHJlbGF0aXZlLnBhdGhuYW1lIHx8ICcnKS5zcGxpdCgnLycpO1xuICAgICAgd2hpbGUgKHJlbFBhdGgubGVuZ3RoICYmICEocmVsYXRpdmUuaG9zdCA9IHJlbFBhdGguc2hpZnQoKSkpO1xuICAgICAgaWYgKCFyZWxhdGl2ZS5ob3N0KSByZWxhdGl2ZS5ob3N0ID0gJyc7XG4gICAgICBpZiAoIXJlbGF0aXZlLmhvc3RuYW1lKSByZWxhdGl2ZS5ob3N0bmFtZSA9ICcnO1xuICAgICAgaWYgKHJlbFBhdGhbMF0gIT09ICcnKSByZWxQYXRoLnVuc2hpZnQoJycpO1xuICAgICAgaWYgKHJlbFBhdGgubGVuZ3RoIDwgMikgcmVsUGF0aC51bnNoaWZ0KCcnKTtcbiAgICAgIHJlc3VsdC5wYXRobmFtZSA9IHJlbFBhdGguam9pbignLycpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHQucGF0aG5hbWUgPSByZWxhdGl2ZS5wYXRobmFtZTtcbiAgICB9XG4gICAgcmVzdWx0LnNlYXJjaCA9IHJlbGF0aXZlLnNlYXJjaDtcbiAgICByZXN1bHQucXVlcnkgPSByZWxhdGl2ZS5xdWVyeTtcbiAgICByZXN1bHQuaG9zdCA9IHJlbGF0aXZlLmhvc3QgfHwgJyc7XG4gICAgcmVzdWx0LmF1dGggPSByZWxhdGl2ZS5hdXRoO1xuICAgIHJlc3VsdC5ob3N0bmFtZSA9IHJlbGF0aXZlLmhvc3RuYW1lIHx8IHJlbGF0aXZlLmhvc3Q7XG4gICAgcmVzdWx0LnBvcnQgPSByZWxhdGl2ZS5wb3J0O1xuICAgIC8vIHRvIHN1cHBvcnQgaHR0cC5yZXF1ZXN0XG4gICAgaWYgKHJlc3VsdC5wYXRobmFtZSB8fCByZXN1bHQuc2VhcmNoKSB7XG4gICAgICB2YXIgcCA9IHJlc3VsdC5wYXRobmFtZSB8fCAnJztcbiAgICAgIHZhciBzID0gcmVzdWx0LnNlYXJjaCB8fCAnJztcbiAgICAgIHJlc3VsdC5wYXRoID0gcCArIHM7XG4gICAgfVxuICAgIHJlc3VsdC5zbGFzaGVzID0gcmVzdWx0LnNsYXNoZXMgfHwgcmVsYXRpdmUuc2xhc2hlcztcbiAgICByZXN1bHQuaHJlZiA9IHJlc3VsdC5mb3JtYXQoKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgdmFyIGlzU291cmNlQWJzID0gKHJlc3VsdC5wYXRobmFtZSAmJiByZXN1bHQucGF0aG5hbWUuY2hhckF0KDApID09PSAnLycpLFxuICAgICAgaXNSZWxBYnMgPSAoXG4gICAgICAgICAgcmVsYXRpdmUuaG9zdCB8fFxuICAgICAgICAgIHJlbGF0aXZlLnBhdGhuYW1lICYmIHJlbGF0aXZlLnBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gJy8nXG4gICAgICApLFxuICAgICAgbXVzdEVuZEFicyA9IChpc1JlbEFicyB8fCBpc1NvdXJjZUFicyB8fFxuICAgICAgICAgICAgICAgICAgICAocmVzdWx0Lmhvc3QgJiYgcmVsYXRpdmUucGF0aG5hbWUpKSxcbiAgICAgIHJlbW92ZUFsbERvdHMgPSBtdXN0RW5kQWJzLFxuICAgICAgc3JjUGF0aCA9IHJlc3VsdC5wYXRobmFtZSAmJiByZXN1bHQucGF0aG5hbWUuc3BsaXQoJy8nKSB8fCBbXSxcbiAgICAgIHJlbFBhdGggPSByZWxhdGl2ZS5wYXRobmFtZSAmJiByZWxhdGl2ZS5wYXRobmFtZS5zcGxpdCgnLycpIHx8IFtdLFxuICAgICAgcHN5Y2hvdGljID0gcmVzdWx0LnByb3RvY29sICYmICFzbGFzaGVkUHJvdG9jb2xbcmVzdWx0LnByb3RvY29sXTtcblxuICAvLyBpZiB0aGUgdXJsIGlzIGEgbm9uLXNsYXNoZWQgdXJsLCB0aGVuIHJlbGF0aXZlXG4gIC8vIGxpbmtzIGxpa2UgLi4vLi4gc2hvdWxkIGJlIGFibGVcbiAgLy8gdG8gY3Jhd2wgdXAgdG8gdGhlIGhvc3RuYW1lLCBhcyB3ZWxsLiAgVGhpcyBpcyBzdHJhbmdlLlxuICAvLyByZXN1bHQucHJvdG9jb2wgaGFzIGFscmVhZHkgYmVlbiBzZXQgYnkgbm93LlxuICAvLyBMYXRlciBvbiwgcHV0IHRoZSBmaXJzdCBwYXRoIHBhcnQgaW50byB0aGUgaG9zdCBmaWVsZC5cbiAgaWYgKHBzeWNob3RpYykge1xuICAgIHJlc3VsdC5ob3N0bmFtZSA9ICcnO1xuICAgIHJlc3VsdC5wb3J0ID0gbnVsbDtcbiAgICBpZiAocmVzdWx0Lmhvc3QpIHtcbiAgICAgIGlmIChzcmNQYXRoWzBdID09PSAnJykgc3JjUGF0aFswXSA9IHJlc3VsdC5ob3N0O1xuICAgICAgZWxzZSBzcmNQYXRoLnVuc2hpZnQocmVzdWx0Lmhvc3QpO1xuICAgIH1cbiAgICByZXN1bHQuaG9zdCA9ICcnO1xuICAgIGlmIChyZWxhdGl2ZS5wcm90b2NvbCkge1xuICAgICAgcmVsYXRpdmUuaG9zdG5hbWUgPSBudWxsO1xuICAgICAgcmVsYXRpdmUucG9ydCA9IG51bGw7XG4gICAgICBpZiAocmVsYXRpdmUuaG9zdCkge1xuICAgICAgICBpZiAocmVsUGF0aFswXSA9PT0gJycpIHJlbFBhdGhbMF0gPSByZWxhdGl2ZS5ob3N0O1xuICAgICAgICBlbHNlIHJlbFBhdGgudW5zaGlmdChyZWxhdGl2ZS5ob3N0KTtcbiAgICAgIH1cbiAgICAgIHJlbGF0aXZlLmhvc3QgPSBudWxsO1xuICAgIH1cbiAgICBtdXN0RW5kQWJzID0gbXVzdEVuZEFicyAmJiAocmVsUGF0aFswXSA9PT0gJycgfHwgc3JjUGF0aFswXSA9PT0gJycpO1xuICB9XG5cbiAgaWYgKGlzUmVsQWJzKSB7XG4gICAgLy8gaXQncyBhYnNvbHV0ZS5cbiAgICByZXN1bHQuaG9zdCA9IChyZWxhdGl2ZS5ob3N0IHx8IHJlbGF0aXZlLmhvc3QgPT09ICcnKSA/XG4gICAgICAgICAgICAgICAgICByZWxhdGl2ZS5ob3N0IDogcmVzdWx0Lmhvc3Q7XG4gICAgcmVzdWx0Lmhvc3RuYW1lID0gKHJlbGF0aXZlLmhvc3RuYW1lIHx8IHJlbGF0aXZlLmhvc3RuYW1lID09PSAnJykgP1xuICAgICAgICAgICAgICAgICAgICAgIHJlbGF0aXZlLmhvc3RuYW1lIDogcmVzdWx0Lmhvc3RuYW1lO1xuICAgIHJlc3VsdC5zZWFyY2ggPSByZWxhdGl2ZS5zZWFyY2g7XG4gICAgcmVzdWx0LnF1ZXJ5ID0gcmVsYXRpdmUucXVlcnk7XG4gICAgc3JjUGF0aCA9IHJlbFBhdGg7XG4gICAgLy8gZmFsbCB0aHJvdWdoIHRvIHRoZSBkb3QtaGFuZGxpbmcgYmVsb3cuXG4gIH0gZWxzZSBpZiAocmVsUGF0aC5sZW5ndGgpIHtcbiAgICAvLyBpdCdzIHJlbGF0aXZlXG4gICAgLy8gdGhyb3cgYXdheSB0aGUgZXhpc3RpbmcgZmlsZSwgYW5kIHRha2UgdGhlIG5ldyBwYXRoIGluc3RlYWQuXG4gICAgaWYgKCFzcmNQYXRoKSBzcmNQYXRoID0gW107XG4gICAgc3JjUGF0aC5wb3AoKTtcbiAgICBzcmNQYXRoID0gc3JjUGF0aC5jb25jYXQocmVsUGF0aCk7XG4gICAgcmVzdWx0LnNlYXJjaCA9IHJlbGF0aXZlLnNlYXJjaDtcbiAgICByZXN1bHQucXVlcnkgPSByZWxhdGl2ZS5xdWVyeTtcbiAgfSBlbHNlIGlmICghdXRpbC5pc051bGxPclVuZGVmaW5lZChyZWxhdGl2ZS5zZWFyY2gpKSB7XG4gICAgLy8ganVzdCBwdWxsIG91dCB0aGUgc2VhcmNoLlxuICAgIC8vIGxpa2UgaHJlZj0nP2ZvbycuXG4gICAgLy8gUHV0IHRoaXMgYWZ0ZXIgdGhlIG90aGVyIHR3byBjYXNlcyBiZWNhdXNlIGl0IHNpbXBsaWZpZXMgdGhlIGJvb2xlYW5zXG4gICAgaWYgKHBzeWNob3RpYykge1xuICAgICAgcmVzdWx0Lmhvc3RuYW1lID0gcmVzdWx0Lmhvc3QgPSBzcmNQYXRoLnNoaWZ0KCk7XG4gICAgICAvL29jY2F0aW9uYWx5IHRoZSBhdXRoIGNhbiBnZXQgc3R1Y2sgb25seSBpbiBob3N0XG4gICAgICAvL3RoaXMgZXNwZWNpYWxseSBoYXBwZW5zIGluIGNhc2VzIGxpa2VcbiAgICAgIC8vdXJsLnJlc29sdmVPYmplY3QoJ21haWx0bzpsb2NhbDFAZG9tYWluMScsICdsb2NhbDJAZG9tYWluMicpXG4gICAgICB2YXIgYXV0aEluSG9zdCA9IHJlc3VsdC5ob3N0ICYmIHJlc3VsdC5ob3N0LmluZGV4T2YoJ0AnKSA+IDAgP1xuICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQuaG9zdC5zcGxpdCgnQCcpIDogZmFsc2U7XG4gICAgICBpZiAoYXV0aEluSG9zdCkge1xuICAgICAgICByZXN1bHQuYXV0aCA9IGF1dGhJbkhvc3Quc2hpZnQoKTtcbiAgICAgICAgcmVzdWx0Lmhvc3QgPSByZXN1bHQuaG9zdG5hbWUgPSBhdXRoSW5Ib3N0LnNoaWZ0KCk7XG4gICAgICB9XG4gICAgfVxuICAgIHJlc3VsdC5zZWFyY2ggPSByZWxhdGl2ZS5zZWFyY2g7XG4gICAgcmVzdWx0LnF1ZXJ5ID0gcmVsYXRpdmUucXVlcnk7XG4gICAgLy90byBzdXBwb3J0IGh0dHAucmVxdWVzdFxuICAgIGlmICghdXRpbC5pc051bGwocmVzdWx0LnBhdGhuYW1lKSB8fCAhdXRpbC5pc051bGwocmVzdWx0LnNlYXJjaCkpIHtcbiAgICAgIHJlc3VsdC5wYXRoID0gKHJlc3VsdC5wYXRobmFtZSA/IHJlc3VsdC5wYXRobmFtZSA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAgIChyZXN1bHQuc2VhcmNoID8gcmVzdWx0LnNlYXJjaCA6ICcnKTtcbiAgICB9XG4gICAgcmVzdWx0LmhyZWYgPSByZXN1bHQuZm9ybWF0KCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIGlmICghc3JjUGF0aC5sZW5ndGgpIHtcbiAgICAvLyBubyBwYXRoIGF0IGFsbC4gIGVhc3kuXG4gICAgLy8gd2UndmUgYWxyZWFkeSBoYW5kbGVkIHRoZSBvdGhlciBzdHVmZiBhYm92ZS5cbiAgICByZXN1bHQucGF0aG5hbWUgPSBudWxsO1xuICAgIC8vdG8gc3VwcG9ydCBodHRwLnJlcXVlc3RcbiAgICBpZiAocmVzdWx0LnNlYXJjaCkge1xuICAgICAgcmVzdWx0LnBhdGggPSAnLycgKyByZXN1bHQuc2VhcmNoO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHQucGF0aCA9IG51bGw7XG4gICAgfVxuICAgIHJlc3VsdC5ocmVmID0gcmVzdWx0LmZvcm1hdCgpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvLyBpZiBhIHVybCBFTkRzIGluIC4gb3IgLi4sIHRoZW4gaXQgbXVzdCBnZXQgYSB0cmFpbGluZyBzbGFzaC5cbiAgLy8gaG93ZXZlciwgaWYgaXQgZW5kcyBpbiBhbnl0aGluZyBlbHNlIG5vbi1zbGFzaHksXG4gIC8vIHRoZW4gaXQgbXVzdCBOT1QgZ2V0IGEgdHJhaWxpbmcgc2xhc2guXG4gIHZhciBsYXN0ID0gc3JjUGF0aC5zbGljZSgtMSlbMF07XG4gIHZhciBoYXNUcmFpbGluZ1NsYXNoID0gKFxuICAgICAgKHJlc3VsdC5ob3N0IHx8IHJlbGF0aXZlLmhvc3QgfHwgc3JjUGF0aC5sZW5ndGggPiAxKSAmJlxuICAgICAgKGxhc3QgPT09ICcuJyB8fCBsYXN0ID09PSAnLi4nKSB8fCBsYXN0ID09PSAnJyk7XG5cbiAgLy8gc3RyaXAgc2luZ2xlIGRvdHMsIHJlc29sdmUgZG91YmxlIGRvdHMgdG8gcGFyZW50IGRpclxuICAvLyBpZiB0aGUgcGF0aCB0cmllcyB0byBnbyBhYm92ZSB0aGUgcm9vdCwgYHVwYCBlbmRzIHVwID4gMFxuICB2YXIgdXAgPSAwO1xuICBmb3IgKHZhciBpID0gc3JjUGF0aC5sZW5ndGg7IGkgPj0gMDsgaS0tKSB7XG4gICAgbGFzdCA9IHNyY1BhdGhbaV07XG4gICAgaWYgKGxhc3QgPT09ICcuJykge1xuICAgICAgc3JjUGF0aC5zcGxpY2UoaSwgMSk7XG4gICAgfSBlbHNlIGlmIChsYXN0ID09PSAnLi4nKSB7XG4gICAgICBzcmNQYXRoLnNwbGljZShpLCAxKTtcbiAgICAgIHVwKys7XG4gICAgfSBlbHNlIGlmICh1cCkge1xuICAgICAgc3JjUGF0aC5zcGxpY2UoaSwgMSk7XG4gICAgICB1cC0tO1xuICAgIH1cbiAgfVxuXG4gIC8vIGlmIHRoZSBwYXRoIGlzIGFsbG93ZWQgdG8gZ28gYWJvdmUgdGhlIHJvb3QsIHJlc3RvcmUgbGVhZGluZyAuLnNcbiAgaWYgKCFtdXN0RW5kQWJzICYmICFyZW1vdmVBbGxEb3RzKSB7XG4gICAgZm9yICg7IHVwLS07IHVwKSB7XG4gICAgICBzcmNQYXRoLnVuc2hpZnQoJy4uJyk7XG4gICAgfVxuICB9XG5cbiAgaWYgKG11c3RFbmRBYnMgJiYgc3JjUGF0aFswXSAhPT0gJycgJiZcbiAgICAgICghc3JjUGF0aFswXSB8fCBzcmNQYXRoWzBdLmNoYXJBdCgwKSAhPT0gJy8nKSkge1xuICAgIHNyY1BhdGgudW5zaGlmdCgnJyk7XG4gIH1cblxuICBpZiAoaGFzVHJhaWxpbmdTbGFzaCAmJiAoc3JjUGF0aC5qb2luKCcvJykuc3Vic3RyKC0xKSAhPT0gJy8nKSkge1xuICAgIHNyY1BhdGgucHVzaCgnJyk7XG4gIH1cblxuICB2YXIgaXNBYnNvbHV0ZSA9IHNyY1BhdGhbMF0gPT09ICcnIHx8XG4gICAgICAoc3JjUGF0aFswXSAmJiBzcmNQYXRoWzBdLmNoYXJBdCgwKSA9PT0gJy8nKTtcblxuICAvLyBwdXQgdGhlIGhvc3QgYmFja1xuICBpZiAocHN5Y2hvdGljKSB7XG4gICAgcmVzdWx0Lmhvc3RuYW1lID0gcmVzdWx0Lmhvc3QgPSBpc0Fic29sdXRlID8gJycgOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjUGF0aC5sZW5ndGggPyBzcmNQYXRoLnNoaWZ0KCkgOiAnJztcbiAgICAvL29jY2F0aW9uYWx5IHRoZSBhdXRoIGNhbiBnZXQgc3R1Y2sgb25seSBpbiBob3N0XG4gICAgLy90aGlzIGVzcGVjaWFsbHkgaGFwcGVucyBpbiBjYXNlcyBsaWtlXG4gICAgLy91cmwucmVzb2x2ZU9iamVjdCgnbWFpbHRvOmxvY2FsMUBkb21haW4xJywgJ2xvY2FsMkBkb21haW4yJylcbiAgICB2YXIgYXV0aEluSG9zdCA9IHJlc3VsdC5ob3N0ICYmIHJlc3VsdC5ob3N0LmluZGV4T2YoJ0AnKSA+IDAgP1xuICAgICAgICAgICAgICAgICAgICAgcmVzdWx0Lmhvc3Quc3BsaXQoJ0AnKSA6IGZhbHNlO1xuICAgIGlmIChhdXRoSW5Ib3N0KSB7XG4gICAgICByZXN1bHQuYXV0aCA9IGF1dGhJbkhvc3Quc2hpZnQoKTtcbiAgICAgIHJlc3VsdC5ob3N0ID0gcmVzdWx0Lmhvc3RuYW1lID0gYXV0aEluSG9zdC5zaGlmdCgpO1xuICAgIH1cbiAgfVxuXG4gIG11c3RFbmRBYnMgPSBtdXN0RW5kQWJzIHx8IChyZXN1bHQuaG9zdCAmJiBzcmNQYXRoLmxlbmd0aCk7XG5cbiAgaWYgKG11c3RFbmRBYnMgJiYgIWlzQWJzb2x1dGUpIHtcbiAgICBzcmNQYXRoLnVuc2hpZnQoJycpO1xuICB9XG5cbiAgaWYgKCFzcmNQYXRoLmxlbmd0aCkge1xuICAgIHJlc3VsdC5wYXRobmFtZSA9IG51bGw7XG4gICAgcmVzdWx0LnBhdGggPSBudWxsO1xuICB9IGVsc2Uge1xuICAgIHJlc3VsdC5wYXRobmFtZSA9IHNyY1BhdGguam9pbignLycpO1xuICB9XG5cbiAgLy90byBzdXBwb3J0IHJlcXVlc3QuaHR0cFxuICBpZiAoIXV0aWwuaXNOdWxsKHJlc3VsdC5wYXRobmFtZSkgfHwgIXV0aWwuaXNOdWxsKHJlc3VsdC5zZWFyY2gpKSB7XG4gICAgcmVzdWx0LnBhdGggPSAocmVzdWx0LnBhdGhuYW1lID8gcmVzdWx0LnBhdGhuYW1lIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChyZXN1bHQuc2VhcmNoID8gcmVzdWx0LnNlYXJjaCA6ICcnKTtcbiAgfVxuICByZXN1bHQuYXV0aCA9IHJlbGF0aXZlLmF1dGggfHwgcmVzdWx0LmF1dGg7XG4gIHJlc3VsdC5zbGFzaGVzID0gcmVzdWx0LnNsYXNoZXMgfHwgcmVsYXRpdmUuc2xhc2hlcztcbiAgcmVzdWx0LmhyZWYgPSByZXN1bHQuZm9ybWF0KCk7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5VcmwucHJvdG90eXBlLnBhcnNlSG9zdCA9IGZ1bmN0aW9uKCkge1xuICB2YXIgaG9zdCA9IHRoaXMuaG9zdDtcbiAgdmFyIHBvcnQgPSBwb3J0UGF0dGVybi5leGVjKGhvc3QpO1xuICBpZiAocG9ydCkge1xuICAgIHBvcnQgPSBwb3J0WzBdO1xuICAgIGlmIChwb3J0ICE9PSAnOicpIHtcbiAgICAgIHRoaXMucG9ydCA9IHBvcnQuc3Vic3RyKDEpO1xuICAgIH1cbiAgICBob3N0ID0gaG9zdC5zdWJzdHIoMCwgaG9zdC5sZW5ndGggLSBwb3J0Lmxlbmd0aCk7XG4gIH1cbiAgaWYgKGhvc3QpIHRoaXMuaG9zdG5hbWUgPSBob3N0O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGlzU3RyaW5nOiBmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4gdHlwZW9mKGFyZykgPT09ICdzdHJpbmcnO1xuICB9LFxuICBpc09iamVjdDogZnVuY3Rpb24oYXJnKSB7XG4gICAgcmV0dXJuIHR5cGVvZihhcmcpID09PSAnb2JqZWN0JyAmJiBhcmcgIT09IG51bGw7XG4gIH0sXG4gIGlzTnVsbDogZnVuY3Rpb24oYXJnKSB7XG4gICAgcmV0dXJuIGFyZyA9PT0gbnVsbDtcbiAgfSxcbiAgaXNOdWxsT3JVbmRlZmluZWQ6IGZ1bmN0aW9uKGFyZykge1xuICAgIHJldHVybiBhcmcgPT0gbnVsbDtcbiAgfVxufTtcbiIsIiFmdW5jdGlvbihlLHQpe1wib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzJiZcInVuZGVmaW5lZFwiIT10eXBlb2YgbW9kdWxlP21vZHVsZS5leHBvcnRzPXQoKTpcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKHQpOihlfHxzZWxmKS52aXJ0dWFsU2Nyb2xsPXQoKX0odGhpcyxmdW5jdGlvbigpe3ZhciBlPTA7ZnVuY3Rpb24gdCh0KXtyZXR1cm5cIl9fcHJpdmF0ZV9cIitlKysrXCJfXCIrdH1mdW5jdGlvbiBpKGUsdCl7aWYoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLHQpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJhdHRlbXB0ZWQgdG8gdXNlIHByaXZhdGUgZmllbGQgb24gbm9uLWluc3RhbmNlXCIpO3JldHVybiBlfWZ1bmN0aW9uIG4oKXt9bi5wcm90b3R5cGU9e29uOmZ1bmN0aW9uKGUsdCxpKXt2YXIgbj10aGlzLmV8fCh0aGlzLmU9e30pO3JldHVybihuW2VdfHwobltlXT1bXSkpLnB1c2goe2ZuOnQsY3R4Oml9KSx0aGlzfSxvbmNlOmZ1bmN0aW9uKGUsdCxpKXt2YXIgbj10aGlzO2Z1bmN0aW9uIG8oKXtuLm9mZihlLG8pLHQuYXBwbHkoaSxhcmd1bWVudHMpfXJldHVybiBvLl89dCx0aGlzLm9uKGUsbyxpKX0sZW1pdDpmdW5jdGlvbihlKXtmb3IodmFyIHQ9W10uc2xpY2UuY2FsbChhcmd1bWVudHMsMSksaT0oKHRoaXMuZXx8KHRoaXMuZT17fSkpW2VdfHxbXSkuc2xpY2UoKSxuPTAsbz1pLmxlbmd0aDtuPG87bisrKWlbbl0uZm4uYXBwbHkoaVtuXS5jdHgsdCk7cmV0dXJuIHRoaXN9LG9mZjpmdW5jdGlvbihlLHQpe3ZhciBpPXRoaXMuZXx8KHRoaXMuZT17fSksbj1pW2VdLG89W107aWYobiYmdClmb3IodmFyIHM9MCxoPW4ubGVuZ3RoO3M8aDtzKyspbltzXS5mbiE9PXQmJm5bc10uZm4uXyE9PXQmJm8ucHVzaChuW3NdKTtyZXR1cm4gby5sZW5ndGg/aVtlXT1vOmRlbGV0ZSBpW2VdLHRoaXN9fTt2YXIgbz1uO28uVGlueUVtaXR0ZXI9bjt2YXIgcyxoPVwidmlydHVhbHNjcm9sbFwiLHI9dChcIm9wdGlvbnNcIiksYT10KFwiZWxcIiksbD10KFwiZW1pdHRlclwiKSx1PXQoXCJldmVudFwiKSxjPXQoXCJ0b3VjaFN0YXJ0XCIpLGQ9dChcImJvZHlUb3VjaEFjdGlvblwiKTtyZXR1cm4gZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUpe3ZhciB0PXRoaXM7T2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMscix7d3JpdGFibGU6ITAsdmFsdWU6dm9pZCAwfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsYSx7d3JpdGFibGU6ITAsdmFsdWU6dm9pZCAwfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsbCx7d3JpdGFibGU6ITAsdmFsdWU6dm9pZCAwfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsdSx7d3JpdGFibGU6ITAsdmFsdWU6dm9pZCAwfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsYyx7d3JpdGFibGU6ITAsdmFsdWU6dm9pZCAwfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsZCx7d3JpdGFibGU6ITAsdmFsdWU6dm9pZCAwfSksdGhpcy5fb25XaGVlbD1mdW5jdGlvbihlKXt2YXIgbj1pKHQscilbcl0sbz1pKHQsdSlbdV07by5kZWx0YVg9ZS53aGVlbERlbHRhWHx8LTEqZS5kZWx0YVgsby5kZWx0YVk9ZS53aGVlbERlbHRhWXx8LTEqZS5kZWx0YVkscy5pc0ZpcmVmb3gmJjE9PT1lLmRlbHRhTW9kZSYmKG8uZGVsdGFYKj1uLmZpcmVmb3hNdWx0aXBsaWVyLG8uZGVsdGFZKj1uLmZpcmVmb3hNdWx0aXBsaWVyKSxvLmRlbHRhWCo9bi5tb3VzZU11bHRpcGxpZXIsby5kZWx0YVkqPW4ubW91c2VNdWx0aXBsaWVyLHQuX25vdGlmeShlKX0sdGhpcy5fb25Nb3VzZVdoZWVsPWZ1bmN0aW9uKGUpe3ZhciBuPWkodCx1KVt1XTtuLmRlbHRhWD1lLndoZWVsRGVsdGFYP2Uud2hlZWxEZWx0YVg6MCxuLmRlbHRhWT1lLndoZWVsRGVsdGFZP2Uud2hlZWxEZWx0YVk6ZS53aGVlbERlbHRhLHQuX25vdGlmeShlKX0sdGhpcy5fb25Ub3VjaFN0YXJ0PWZ1bmN0aW9uKGUpe3ZhciBuPWUudGFyZ2V0VG91Y2hlcz9lLnRhcmdldFRvdWNoZXNbMF06ZTtpKHQsYylbY10ueD1uLnBhZ2VYLGkodCxjKVtjXS55PW4ucGFnZVl9LHRoaXMuX29uVG91Y2hNb3ZlPWZ1bmN0aW9uKGUpe3ZhciBuPWkodCxyKVtyXTtuLnByZXZlbnRUb3VjaCYmIWUudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucyhuLnVucHJldmVudFRvdWNoQ2xhc3MpJiZlLnByZXZlbnREZWZhdWx0KCk7dmFyIG89aSh0LHUpW3VdLHM9ZS50YXJnZXRUb3VjaGVzP2UudGFyZ2V0VG91Y2hlc1swXTplO28uZGVsdGFYPShzLnBhZ2VYLWkodCxjKVtjXS54KSpuLnRvdWNoTXVsdGlwbGllcixvLmRlbHRhWT0ocy5wYWdlWS1pKHQsYylbY10ueSkqbi50b3VjaE11bHRpcGxpZXIsaSh0LGMpW2NdLng9cy5wYWdlWCxpKHQsYylbY10ueT1zLnBhZ2VZLHQuX25vdGlmeShlKX0sdGhpcy5fb25LZXlEb3duPWZ1bmN0aW9uKGUpe3ZhciBuPWkodCx1KVt1XTtuLmRlbHRhWD1uLmRlbHRhWT0wO3ZhciBvPXdpbmRvdy5pbm5lckhlaWdodC00MDtzd2l0Y2goZS5rZXlDb2RlKXtjYXNlIDM3OmNhc2UgMzg6bi5kZWx0YVk9aSh0LHIpW3JdLmtleVN0ZXA7YnJlYWs7Y2FzZSAzOTpjYXNlIDQwOm4uZGVsdGFZPS1pKHQscilbcl0ua2V5U3RlcDticmVhaztjYXNlIDMyOm4uZGVsdGFZPW8qKGUuc2hpZnRLZXk/MTotMSk7YnJlYWs7ZGVmYXVsdDpyZXR1cm59dC5fbm90aWZ5KGUpfSxpKHRoaXMsYSlbYV09d2luZG93LGUmJmUuZWwmJihpKHRoaXMsYSlbYV09ZS5lbCxkZWxldGUgZS5lbCksc3x8KHM9e2hhc1doZWVsRXZlbnQ6XCJvbndoZWVsXCJpbiBkb2N1bWVudCxoYXNNb3VzZVdoZWVsRXZlbnQ6XCJvbm1vdXNld2hlZWxcImluIGRvY3VtZW50LGhhc1RvdWNoOlwib250b3VjaHN0YXJ0XCJpbiBkb2N1bWVudCxoYXNUb3VjaFdpbjpuYXZpZ2F0b3IubXNNYXhUb3VjaFBvaW50cyYmbmF2aWdhdG9yLm1zTWF4VG91Y2hQb2ludHM+MSxoYXNQb2ludGVyOiEhd2luZG93Lm5hdmlnYXRvci5tc1BvaW50ZXJFbmFibGVkLGhhc0tleURvd246XCJvbmtleWRvd25cImluIGRvY3VtZW50LGlzRmlyZWZveDpuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoXCJGaXJlZm94XCIpPi0xfSksaSh0aGlzLHIpW3JdPU9iamVjdC5hc3NpZ24oe21vdXNlTXVsdGlwbGllcjoxLHRvdWNoTXVsdGlwbGllcjoyLGZpcmVmb3hNdWx0aXBsaWVyOjE1LGtleVN0ZXA6MTIwLHByZXZlbnRUb3VjaDohMSx1bnByZXZlbnRUb3VjaENsYXNzOlwidnMtdG91Y2htb3ZlLWFsbG93ZWRcIix1c2VLZXlib2FyZDohMCx1c2VUb3VjaDohMH0sZSksaSh0aGlzLGwpW2xdPW5ldyBvLGkodGhpcyx1KVt1XT17eTowLHg6MCxkZWx0YVg6MCxkZWx0YVk6MH0saSh0aGlzLGMpW2NdPXt4Om51bGwseTpudWxsfSxpKHRoaXMsZClbZF09bnVsbCx2b2lkIDAhPT1pKHRoaXMscilbcl0ucGFzc2l2ZSYmKHRoaXMubGlzdGVuZXJPcHRpb25zPXtwYXNzaXZlOmkodGhpcyxyKVtyXS5wYXNzaXZlfSl9dmFyIHQ9ZS5wcm90b3R5cGU7cmV0dXJuIHQuX25vdGlmeT1mdW5jdGlvbihlKXt2YXIgdD1pKHRoaXMsdSlbdV07dC54Kz10LmRlbHRhWCx0LnkrPXQuZGVsdGFZLGkodGhpcyxsKVtsXS5lbWl0KGgse3g6dC54LHk6dC55LGRlbHRhWDp0LmRlbHRhWCxkZWx0YVk6dC5kZWx0YVksb3JpZ2luYWxFdmVudDplfSl9LHQuX2JpbmQ9ZnVuY3Rpb24oKXtzLmhhc1doZWVsRXZlbnQmJmkodGhpcyxhKVthXS5hZGRFdmVudExpc3RlbmVyKFwid2hlZWxcIix0aGlzLl9vbldoZWVsLHRoaXMubGlzdGVuZXJPcHRpb25zKSxzLmhhc01vdXNlV2hlZWxFdmVudCYmaSh0aGlzLGEpW2FdLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZXdoZWVsXCIsdGhpcy5fb25Nb3VzZVdoZWVsLHRoaXMubGlzdGVuZXJPcHRpb25zKSxzLmhhc1RvdWNoJiZpKHRoaXMscilbcl0udXNlVG91Y2gmJihpKHRoaXMsYSlbYV0uYWRkRXZlbnRMaXN0ZW5lcihcInRvdWNoc3RhcnRcIix0aGlzLl9vblRvdWNoU3RhcnQsdGhpcy5saXN0ZW5lck9wdGlvbnMpLGkodGhpcyxhKVthXS5hZGRFdmVudExpc3RlbmVyKFwidG91Y2htb3ZlXCIsdGhpcy5fb25Ub3VjaE1vdmUsdGhpcy5saXN0ZW5lck9wdGlvbnMpKSxzLmhhc1BvaW50ZXImJnMuaGFzVG91Y2hXaW4mJihpKHRoaXMsZClbZF09ZG9jdW1lbnQuYm9keS5zdHlsZS5tc1RvdWNoQWN0aW9uLGRvY3VtZW50LmJvZHkuc3R5bGUubXNUb3VjaEFjdGlvbj1cIm5vbmVcIixpKHRoaXMsYSlbYV0uYWRkRXZlbnRMaXN0ZW5lcihcIk1TUG9pbnRlckRvd25cIix0aGlzLl9vblRvdWNoU3RhcnQsITApLGkodGhpcyxhKVthXS5hZGRFdmVudExpc3RlbmVyKFwiTVNQb2ludGVyTW92ZVwiLHRoaXMuX29uVG91Y2hNb3ZlLCEwKSkscy5oYXNLZXlEb3duJiZpKHRoaXMscilbcl0udXNlS2V5Ym9hcmQmJmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsdGhpcy5fb25LZXlEb3duKX0sdC5fdW5iaW5kPWZ1bmN0aW9uKCl7cy5oYXNXaGVlbEV2ZW50JiZpKHRoaXMsYSlbYV0ucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIndoZWVsXCIsdGhpcy5fb25XaGVlbCkscy5oYXNNb3VzZVdoZWVsRXZlbnQmJmkodGhpcyxhKVthXS5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2V3aGVlbFwiLHRoaXMuX29uTW91c2VXaGVlbCkscy5oYXNUb3VjaCYmKGkodGhpcyxhKVthXS5yZW1vdmVFdmVudExpc3RlbmVyKFwidG91Y2hzdGFydFwiLHRoaXMuX29uVG91Y2hTdGFydCksaSh0aGlzLGEpW2FdLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ0b3VjaG1vdmVcIix0aGlzLl9vblRvdWNoTW92ZSkpLHMuaGFzUG9pbnRlciYmcy5oYXNUb3VjaFdpbiYmKGRvY3VtZW50LmJvZHkuc3R5bGUubXNUb3VjaEFjdGlvbj1pKHRoaXMsZClbZF0saSh0aGlzLGEpW2FdLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJNU1BvaW50ZXJEb3duXCIsdGhpcy5fb25Ub3VjaFN0YXJ0LCEwKSxpKHRoaXMsYSlbYV0ucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIk1TUG9pbnRlck1vdmVcIix0aGlzLl9vblRvdWNoTW92ZSwhMCkpLHMuaGFzS2V5RG93biYmaSh0aGlzLHIpW3JdLnVzZUtleWJvYXJkJiZkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLHRoaXMuX29uS2V5RG93bil9LHQub249ZnVuY3Rpb24oZSx0KXtpKHRoaXMsbClbbF0ub24oaCxlLHQpO3ZhciBuPWkodGhpcyxsKVtsXS5lO24mJm5baF0mJjE9PT1uW2hdLmxlbmd0aCYmdGhpcy5fYmluZCgpfSx0Lm9mZj1mdW5jdGlvbihlLHQpe2kodGhpcyxsKVtsXS5vZmYoaCxlLHQpO3ZhciBuPWkodGhpcyxsKVtsXS5lOyghbltoXXx8bltoXS5sZW5ndGg8PTApJiZ0aGlzLl91bmJpbmQoKX0sdC5kZXN0cm95PWZ1bmN0aW9uKCl7aSh0aGlzLGwpW2xdLm9mZigpLHRoaXMuX3VuYmluZCgpfSxlfSgpfSk7XG4iLCIndXNlIHN0cmljdCc7XG4vKiBlc2xpbnQtZGlzYWJsZVxuICBuby11bnVzZWQtdmFyc1xuKi9cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxuXG5tb2R1bGUuZXhwb3J0cyA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEJhc2VDbGllbnQoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEJhc2VDbGllbnQpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKEJhc2VDbGllbnQsIG51bGwsIFt7XG4gICAga2V5OiBcImdldENsaWVudFBhdGhcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0Q2xpZW50UGF0aChvcHRpb25zKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NsaWVudCBuZWVkcyBpbXBsZW1lbnRhdGlvbicpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBCYXNlQ2xpZW50O1xufSgpOyIsIid1c2Ugc3RyaWN0Jztcbi8qIGVzbGludC1kaXNhYmxlXG4gIG5vLXVudXNlZC12YXJzXG4qL1xuXG5mdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH1cblxuZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH1cblxuZnVuY3Rpb24gX2NyZWF0ZVN1cGVyKERlcml2ZWQpIHsgdmFyIGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QgPSBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCk7IHJldHVybiBmdW5jdGlvbiBfY3JlYXRlU3VwZXJJbnRlcm5hbCgpIHsgdmFyIFN1cGVyID0gX2dldFByb3RvdHlwZU9mKERlcml2ZWQpLCByZXN1bHQ7IGlmIChoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KSB7IHZhciBOZXdUYXJnZXQgPSBfZ2V0UHJvdG90eXBlT2YodGhpcykuY29uc3RydWN0b3I7IHJlc3VsdCA9IFJlZmxlY3QuY29uc3RydWN0KFN1cGVyLCBhcmd1bWVudHMsIE5ld1RhcmdldCk7IH0gZWxzZSB7IHJlc3VsdCA9IFN1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH0gcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIHJlc3VsdCk7IH07IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSkgeyByZXR1cm4gY2FsbDsgfSByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfVxuXG5mdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIHNlbGY7IH1cblxuZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcInVuZGVmaW5lZFwiIHx8ICFSZWZsZWN0LmNvbnN0cnVjdCkgcmV0dXJuIGZhbHNlOyBpZiAoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSkgcmV0dXJuIGZhbHNlOyBpZiAodHlwZW9mIFByb3h5ID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiB0cnVlOyB0cnkgeyBEYXRlLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKFJlZmxlY3QuY29uc3RydWN0KERhdGUsIFtdLCBmdW5jdGlvbiAoKSB7fSkpOyByZXR1cm4gdHJ1ZTsgfSBjYXRjaCAoZSkgeyByZXR1cm4gZmFsc2U7IH0gfVxuXG5mdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOyB9XG5cbnZhciBTb2NrSlMgPSByZXF1aXJlKCdzb2NranMtY2xpZW50L2Rpc3Qvc29ja2pzJyk7XG5cbnZhciBCYXNlQ2xpZW50ID0gcmVxdWlyZSgnLi9CYXNlQ2xpZW50Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQmFzZUNsaWVudCkge1xuICBfaW5oZXJpdHMoU29ja0pTQ2xpZW50LCBfQmFzZUNsaWVudCk7XG5cbiAgdmFyIF9zdXBlciA9IF9jcmVhdGVTdXBlcihTb2NrSlNDbGllbnQpO1xuXG4gIGZ1bmN0aW9uIFNvY2tKU0NsaWVudCh1cmwpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU29ja0pTQ2xpZW50KTtcblxuICAgIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcyk7XG4gICAgX3RoaXMuc29jayA9IG5ldyBTb2NrSlModXJsKTtcblxuICAgIF90aGlzLnNvY2sub25lcnJvciA9IGZ1bmN0aW9uIChlcnIpIHsvLyBUT0RPOiB1c2UgbG9nZ2VyIHRvIGxvZyB0aGUgZXJyb3IgZXZlbnQgb25jZSBjbGllbnQgYW5kIGNsaWVudC1zcmNcbiAgICAgIC8vIGFyZSByZW9yZ2FuaXplZCB0byBoYXZlIHRoZSBzYW1lIGRpcmVjdG9yeSBzdHJ1Y3R1cmVcbiAgICB9O1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFNvY2tKU0NsaWVudCwgW3tcbiAgICBrZXk6IFwib25PcGVuXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG9uT3BlbihmKSB7XG4gICAgICB0aGlzLnNvY2sub25vcGVuID0gZjtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwib25DbG9zZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBvbkNsb3NlKGYpIHtcbiAgICAgIHRoaXMuc29jay5vbmNsb3NlID0gZjtcbiAgICB9IC8vIGNhbGwgZiB3aXRoIHRoZSBtZXNzYWdlIHN0cmluZyBhcyB0aGUgZmlyc3QgYXJndW1lbnRcblxuICB9LCB7XG4gICAga2V5OiBcIm9uTWVzc2FnZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBvbk1lc3NhZ2UoZikge1xuICAgICAgdGhpcy5zb2NrLm9ubWVzc2FnZSA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGYoZS5kYXRhKTtcbiAgICAgIH07XG4gICAgfVxuICB9XSwgW3tcbiAgICBrZXk6IFwiZ2V0Q2xpZW50UGF0aFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRDbGllbnRQYXRoKG9wdGlvbnMpIHtcbiAgICAgIHJldHVybiByZXF1aXJlLnJlc29sdmUoJy4vU29ja0pTQ2xpZW50Jyk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFNvY2tKU0NsaWVudDtcbn0oQmFzZUNsaWVudCk7IiwiJ3VzZSBzdHJpY3QnOyAvLyBUaGUgZXJyb3Igb3ZlcmxheSBpcyBpbnNwaXJlZCAoYW5kIG1vc3RseSBjb3BpZWQpIGZyb20gQ3JlYXRlIFJlYWN0IEFwcCAoaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29raW5jdWJhdG9yL2NyZWF0ZS1yZWFjdC1hcHApXG4vLyBUaGV5LCBpbiB0dXJuLCBnb3QgaW5zcGlyZWQgYnkgd2VicGFjay1ob3QtbWlkZGxld2FyZSAoaHR0cHM6Ly9naXRodWIuY29tL2dsZW5qYW1pbi93ZWJwYWNrLWhvdC1taWRkbGV3YXJlKS5cblxudmFyIGFuc2lIVE1MID0gcmVxdWlyZSgnYW5zaS1odG1sLWNvbW11bml0eScpO1xuXG52YXIgX3JlcXVpcmUgPSByZXF1aXJlKCdodG1sLWVudGl0aWVzJyksXG4gICAgQWxsSHRtbEVudGl0aWVzID0gX3JlcXVpcmUuQWxsSHRtbEVudGl0aWVzO1xuXG52YXIgZW50aXRpZXMgPSBuZXcgQWxsSHRtbEVudGl0aWVzKCk7XG52YXIgY29sb3JzID0ge1xuICByZXNldDogWyd0cmFuc3BhcmVudCcsICd0cmFuc3BhcmVudCddLFxuICBibGFjazogJzE4MTgxOCcsXG4gIHJlZDogJ0UzNjA0OScsXG4gIGdyZWVuOiAnQjNDQjc0JyxcbiAgeWVsbG93OiAnRkZEMDgwJyxcbiAgYmx1ZTogJzdDQUZDMicsXG4gIG1hZ2VudGE6ICc3RkFDQ0EnLFxuICBjeWFuOiAnQzNDMkVGJyxcbiAgbGlnaHRncmV5OiAnRUJFN0UzJyxcbiAgZGFya2dyZXk6ICc2RDc4OTEnXG59O1xudmFyIG92ZXJsYXlJZnJhbWUgPSBudWxsO1xudmFyIG92ZXJsYXlEaXYgPSBudWxsO1xudmFyIGxhc3RPbk92ZXJsYXlEaXZSZWFkeSA9IG51bGw7XG5hbnNpSFRNTC5zZXRDb2xvcnMoY29sb3JzKTtcblxuZnVuY3Rpb24gY3JlYXRlT3ZlcmxheUlmcmFtZShvbklmcmFtZUxvYWQpIHtcbiAgdmFyIGlmcmFtZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lmcmFtZScpO1xuICBpZnJhbWUuaWQgPSAnd2VicGFjay1kZXYtc2VydmVyLWNsaWVudC1vdmVybGF5JztcbiAgaWZyYW1lLnNyYyA9ICdhYm91dDpibGFuayc7XG4gIGlmcmFtZS5zdHlsZS5wb3NpdGlvbiA9ICdmaXhlZCc7XG4gIGlmcmFtZS5zdHlsZS5sZWZ0ID0gMDtcbiAgaWZyYW1lLnN0eWxlLnRvcCA9IDA7XG4gIGlmcmFtZS5zdHlsZS5yaWdodCA9IDA7XG4gIGlmcmFtZS5zdHlsZS5ib3R0b20gPSAwO1xuICBpZnJhbWUuc3R5bGUud2lkdGggPSAnMTAwdncnO1xuICBpZnJhbWUuc3R5bGUuaGVpZ2h0ID0gJzEwMHZoJztcbiAgaWZyYW1lLnN0eWxlLmJvcmRlciA9ICdub25lJztcbiAgaWZyYW1lLnN0eWxlLnpJbmRleCA9IDk5OTk5OTk5OTk7XG4gIGlmcmFtZS5vbmxvYWQgPSBvbklmcmFtZUxvYWQ7XG4gIHJldHVybiBpZnJhbWU7XG59XG5cbmZ1bmN0aW9uIGFkZE92ZXJsYXlEaXZUbyhpZnJhbWUpIHtcbiAgdmFyIGRpdiA9IGlmcmFtZS5jb250ZW50RG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIGRpdi5pZCA9ICd3ZWJwYWNrLWRldi1zZXJ2ZXItY2xpZW50LW92ZXJsYXktZGl2JztcbiAgZGl2LnN0eWxlLnBvc2l0aW9uID0gJ2ZpeGVkJztcbiAgZGl2LnN0eWxlLmJveFNpemluZyA9ICdib3JkZXItYm94JztcbiAgZGl2LnN0eWxlLmxlZnQgPSAwO1xuICBkaXYuc3R5bGUudG9wID0gMDtcbiAgZGl2LnN0eWxlLnJpZ2h0ID0gMDtcbiAgZGl2LnN0eWxlLmJvdHRvbSA9IDA7XG4gIGRpdi5zdHlsZS53aWR0aCA9ICcxMDB2dyc7XG4gIGRpdi5zdHlsZS5oZWlnaHQgPSAnMTAwdmgnO1xuICBkaXYuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gJ3JnYmEoMCwgMCwgMCwgMC44NSknO1xuICBkaXYuc3R5bGUuY29sb3IgPSAnI0U4RThFOCc7XG4gIGRpdi5zdHlsZS5mb250RmFtaWx5ID0gJ01lbmxvLCBDb25zb2xhcywgbW9ub3NwYWNlJztcbiAgZGl2LnN0eWxlLmZvbnRTaXplID0gJ2xhcmdlJztcbiAgZGl2LnN0eWxlLnBhZGRpbmcgPSAnMnJlbSc7XG4gIGRpdi5zdHlsZS5saW5lSGVpZ2h0ID0gJzEuMic7XG4gIGRpdi5zdHlsZS53aGl0ZVNwYWNlID0gJ3ByZS13cmFwJztcbiAgZGl2LnN0eWxlLm92ZXJmbG93ID0gJ2F1dG8nO1xuICBpZnJhbWUuY29udGVudERvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZGl2KTtcbiAgcmV0dXJuIGRpdjtcbn1cblxuZnVuY3Rpb24gZW5zdXJlT3ZlcmxheURpdkV4aXN0cyhvbk92ZXJsYXlEaXZSZWFkeSkge1xuICBpZiAob3ZlcmxheURpdikge1xuICAgIC8vIEV2ZXJ5dGhpbmcgaXMgcmVhZHksIGNhbGwgdGhlIGNhbGxiYWNrIHJpZ2h0IGF3YXkuXG4gICAgb25PdmVybGF5RGl2UmVhZHkob3ZlcmxheURpdik7XG4gICAgcmV0dXJuO1xuICB9IC8vIENyZWF0aW5nIGFuIGlmcmFtZSBtYXkgYmUgYXN5bmNocm9ub3VzIHNvIHdlJ2xsIHNjaGVkdWxlIHRoZSBjYWxsYmFjay5cbiAgLy8gSW4gY2FzZSBvZiBtdWx0aXBsZSBjYWxscywgbGFzdCBjYWxsYmFjayB3aW5zLlxuXG5cbiAgbGFzdE9uT3ZlcmxheURpdlJlYWR5ID0gb25PdmVybGF5RGl2UmVhZHk7XG5cbiAgaWYgKG92ZXJsYXlJZnJhbWUpIHtcbiAgICAvLyBXZSd2ZSBhbHJlYWR5IGNyZWF0ZWQgaXQuXG4gICAgcmV0dXJuO1xuICB9IC8vIENyZWF0ZSBpZnJhbWUgYW5kLCB3aGVuIGl0IGlzIHJlYWR5LCBhIGRpdiBpbnNpZGUgaXQuXG5cblxuICBvdmVybGF5SWZyYW1lID0gY3JlYXRlT3ZlcmxheUlmcmFtZShmdW5jdGlvbiAoKSB7XG4gICAgb3ZlcmxheURpdiA9IGFkZE92ZXJsYXlEaXZUbyhvdmVybGF5SWZyYW1lKTsgLy8gTm93IHdlIGNhbiB0YWxrIVxuXG4gICAgbGFzdE9uT3ZlcmxheURpdlJlYWR5KG92ZXJsYXlEaXYpO1xuICB9KTsgLy8gWmFsZ28gYWxlcnQ6IG9uSWZyYW1lTG9hZCgpIHdpbGwgYmUgY2FsbGVkIGVpdGhlciBzeW5jaHJvbm91c2x5XG4gIC8vIG9yIGFzeW5jaHJvbm91c2x5IGRlcGVuZGluZyBvbiB0aGUgYnJvd3Nlci5cbiAgLy8gV2UgZGVsYXkgYWRkaW5nIGl0IHNvIGBvdmVybGF5SWZyYW1lYCBpcyBzZXQgd2hlbiBgb25JZnJhbWVMb2FkYCBmaXJlcy5cblxuICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKG92ZXJsYXlJZnJhbWUpO1xufSAvLyBTdWNjZXNzZnVsIGNvbXBpbGF0aW9uLlxuXG5cbmZ1bmN0aW9uIGNsZWFyKCkge1xuICBpZiAoIW92ZXJsYXlEaXYpIHtcbiAgICAvLyBJdCBpcyBub3QgdGhlcmUgaW4gdGhlIGZpcnN0IHBsYWNlLlxuICAgIHJldHVybjtcbiAgfSAvLyBDbGVhbiB1cCBhbmQgcmVzZXQgaW50ZXJuYWwgc3RhdGUuXG5cblxuICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKG92ZXJsYXlJZnJhbWUpO1xuICBvdmVybGF5RGl2ID0gbnVsbDtcbiAgb3ZlcmxheUlmcmFtZSA9IG51bGw7XG4gIGxhc3RPbk92ZXJsYXlEaXZSZWFkeSA9IG51bGw7XG59IC8vIENvbXBpbGF0aW9uIHdpdGggZXJyb3JzIChlLmcuIHN5bnRheCBlcnJvciBvciBtaXNzaW5nIG1vZHVsZXMpLlxuXG5cbmZ1bmN0aW9uIHNob3dNZXNzYWdlKG1lc3NhZ2VzKSB7XG4gIGVuc3VyZU92ZXJsYXlEaXZFeGlzdHMoZnVuY3Rpb24gKGRpdikge1xuICAgIC8vIE1ha2UgaXQgbG9vayBzaW1pbGFyIHRvIG91ciB0ZXJtaW5hbC5cbiAgICBkaXYuaW5uZXJIVE1MID0gXCI8c3BhbiBzdHlsZT1cXFwiY29sb3I6ICNcIi5jb25jYXQoY29sb3JzLnJlZCwgXCJcXFwiPkZhaWxlZCB0byBjb21waWxlLjwvc3Bhbj48YnI+PGJyPlwiKS5jb25jYXQoYW5zaUhUTUwoZW50aXRpZXMuZW5jb2RlKG1lc3NhZ2VzWzBdKSkpO1xuICB9KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGNsZWFyOiBjbGVhcixcbiAgc2hvd01lc3NhZ2U6IHNob3dNZXNzYWdlXG59OyIsIid1c2Ugc3RyaWN0Jztcbi8qIGdsb2JhbCBfX3dlYnBhY2tfZGV2X3NlcnZlcl9jbGllbnRfXyAqL1xuXG4vKiBlc2xpbnQtZGlzYWJsZVxuICBjYW1lbGNhc2VcbiovXG4vLyB0aGlzIFNvY2tKU0NsaWVudCBpcyBoZXJlIGFzIGEgZGVmYXVsdCBmYWxsYmFjaywgaW4gY2FzZSBpbmxpbmUgbW9kZVxuLy8gaXMgb2ZmIG9yIHRoZSBjbGllbnQgaXMgbm90IGluamVjdGVkLiBUaGlzIHdpbGwgYmUgc3dpdGNoZWQgdG9cbi8vIFdlYnNvY2tldENsaWVudCB3aGVuIGl0IGJlY29tZXMgdGhlIGRlZmF1bHRcbi8vIGltcG9ydGFudDogdGhlIHBhdGggdG8gU29ja0pTQ2xpZW50IGhlcmUgaXMgbWFkZSB0byB3b3JrIGluIHRoZSAnY2xpZW50J1xuLy8gZGlyZWN0b3J5LCBidXQgaXMgdXBkYXRlZCB2aWEgdGhlIHdlYnBhY2sgY29tcGlsYXRpb24gd2hlbiBjb21waWxlZCBmcm9tXG4vLyB0aGUgJ2NsaWVudC1zcmMnIGRpcmVjdG9yeVxuXG52YXIgQ2xpZW50ID0gdHlwZW9mIF9fd2VicGFja19kZXZfc2VydmVyX2NsaWVudF9fICE9PSAndW5kZWZpbmVkJyA/IF9fd2VicGFja19kZXZfc2VydmVyX2NsaWVudF9fIDogLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnJlc29sdmVkXG5yZXF1aXJlKCcuL2NsaWVudHMvU29ja0pTQ2xpZW50Jyk7XG52YXIgcmV0cmllcyA9IDA7XG52YXIgY2xpZW50ID0gbnVsbDtcblxudmFyIHNvY2tldCA9IGZ1bmN0aW9uIGluaXRTb2NrZXQodXJsLCBoYW5kbGVycykge1xuICBjbGllbnQgPSBuZXcgQ2xpZW50KHVybCk7XG4gIGNsaWVudC5vbk9wZW4oZnVuY3Rpb24gKCkge1xuICAgIHJldHJpZXMgPSAwO1xuICB9KTtcbiAgY2xpZW50Lm9uQ2xvc2UoZnVuY3Rpb24gKCkge1xuICAgIGlmIChyZXRyaWVzID09PSAwKSB7XG4gICAgICBoYW5kbGVycy5jbG9zZSgpO1xuICAgIH0gLy8gVHJ5IHRvIHJlY29ubmVjdC5cblxuXG4gICAgY2xpZW50ID0gbnVsbDsgLy8gQWZ0ZXIgMTAgcmV0cmllcyBzdG9wIHRyeWluZywgdG8gcHJldmVudCBsb2dzcGFtLlxuXG4gICAgaWYgKHJldHJpZXMgPD0gMTApIHtcbiAgICAgIC8vIEV4cG9uZW50aWFsbHkgaW5jcmVhc2UgdGltZW91dCB0byByZWNvbm5lY3QuXG4gICAgICAvLyBSZXNwZWN0ZnVsbHkgY29waWVkIGZyb20gdGhlIHBhY2thZ2UgYGdvdGAuXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbWl4ZWQtb3BlcmF0b3JzLCBuby1yZXN0cmljdGVkLXByb3BlcnRpZXNcbiAgICAgIHZhciByZXRyeUluTXMgPSAxMDAwICogTWF0aC5wb3coMiwgcmV0cmllcykgKyBNYXRoLnJhbmRvbSgpICogMTAwO1xuICAgICAgcmV0cmllcyArPSAxO1xuICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHNvY2tldCh1cmwsIGhhbmRsZXJzKTtcbiAgICAgIH0sIHJldHJ5SW5Ncyk7XG4gICAgfVxuICB9KTtcbiAgY2xpZW50Lm9uTWVzc2FnZShmdW5jdGlvbiAoZGF0YSkge1xuICAgIHZhciBtc2cgPSBKU09OLnBhcnNlKGRhdGEpO1xuXG4gICAgaWYgKGhhbmRsZXJzW21zZy50eXBlXSkge1xuICAgICAgaGFuZGxlcnNbbXNnLnR5cGVdKG1zZy5kYXRhKTtcbiAgICB9XG4gIH0pO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBzb2NrZXQ7IiwiJ3VzZSBzdHJpY3QnO1xuLyogZ2xvYmFsIHNlbGYgKi9cblxudmFyIHVybCA9IHJlcXVpcmUoJ3VybCcpO1xuXG52YXIgZ2V0Q3VycmVudFNjcmlwdFNvdXJjZSA9IHJlcXVpcmUoJy4vZ2V0Q3VycmVudFNjcmlwdFNvdXJjZScpO1xuXG5mdW5jdGlvbiBjcmVhdGVTb2NrZXRVcmwocmVzb3VyY2VRdWVyeSwgY3VycmVudExvY2F0aW9uKSB7XG4gIHZhciB1cmxQYXJ0cztcblxuICBpZiAodHlwZW9mIHJlc291cmNlUXVlcnkgPT09ICdzdHJpbmcnICYmIHJlc291cmNlUXVlcnkgIT09ICcnKSB7XG4gICAgLy8gSWYgdGhpcyBidW5kbGUgaXMgaW5saW5lZCwgdXNlIHRoZSByZXNvdXJjZSBxdWVyeSB0byBnZXQgdGhlIGNvcnJlY3QgdXJsLlxuICAgIC8vIGZvcm1hdCBpcyBsaWtlIGA/aHR0cDovLzAuMC4wLjA6ODA5NiZzb2NrUG9ydD04MDk3JnNvY2tIb3N0PWxvY2FsaG9zdGBcbiAgICB1cmxQYXJ0cyA9IHVybC5wYXJzZShyZXNvdXJjZVF1ZXJ5IC8vIHN0cmlwIGxlYWRpbmcgYD9gIGZyb20gcXVlcnkgc3RyaW5nIHRvIGdldCBhIHZhbGlkIFVSTFxuICAgIC5zdWJzdHIoMSkgLy8gcmVwbGFjZSBmaXJzdCBgJmAgd2l0aCBgP2AgdG8gaGF2ZSBhIHZhbGlkIHF1ZXJ5IHN0cmluZ1xuICAgIC5yZXBsYWNlKCcmJywgJz8nKSwgdHJ1ZSk7XG4gIH0gZWxzZSB7XG4gICAgLy8gRWxzZSwgZ2V0IHRoZSB1cmwgZnJvbSB0aGUgPHNjcmlwdD4gdGhpcyBmaWxlIHdhcyBjYWxsZWQgd2l0aC5cbiAgICB2YXIgc2NyaXB0SG9zdCA9IGdldEN1cnJlbnRTY3JpcHRTb3VyY2UoKTtcbiAgICB1cmxQYXJ0cyA9IHVybC5wYXJzZShzY3JpcHRIb3N0IHx8ICcvJywgdHJ1ZSwgdHJ1ZSk7XG4gIH0gLy8gVXNlIHBhcmFtZXRlciB0byBhbGxvdyBwYXNzaW5nIGxvY2F0aW9uIGluIHVuaXQgdGVzdHNcblxuXG4gIGlmICh0eXBlb2YgY3VycmVudExvY2F0aW9uID09PSAnc3RyaW5nJyAmJiBjdXJyZW50TG9jYXRpb24gIT09ICcnKSB7XG4gICAgY3VycmVudExvY2F0aW9uID0gdXJsLnBhcnNlKGN1cnJlbnRMb2NhdGlvbik7XG4gIH0gZWxzZSB7XG4gICAgY3VycmVudExvY2F0aW9uID0gc2VsZi5sb2NhdGlvbjtcbiAgfVxuXG4gIHJldHVybiBnZXRTb2NrZXRVcmwodXJsUGFydHMsIGN1cnJlbnRMb2NhdGlvbik7XG59XG4vKlxuICogR2V0cyBzb2NrZXQgVVJMIGJhc2VkIG9uIFNjcmlwdCBTb3VyY2UvTG9jYXRpb25cbiAqIChzY3JpcHRTcmM6IFVSTCwgbG9jYXRpb246IFVSTCkgLT4gVVJMXG4gKi9cblxuXG5mdW5jdGlvbiBnZXRTb2NrZXRVcmwodXJsUGFydHMsIGxvYykge1xuICB2YXIgYXV0aCA9IHVybFBhcnRzLmF1dGgsXG4gICAgICBxdWVyeSA9IHVybFBhcnRzLnF1ZXJ5O1xuICB2YXIgaG9zdG5hbWUgPSB1cmxQYXJ0cy5ob3N0bmFtZSxcbiAgICAgIHByb3RvY29sID0gdXJsUGFydHMucHJvdG9jb2wsXG4gICAgICBwb3J0ID0gdXJsUGFydHMucG9ydDtcblxuICBpZiAoIXBvcnQgfHwgcG9ydCA9PT0gJzAnKSB7XG4gICAgcG9ydCA9IGxvYy5wb3J0O1xuICB9IC8vIGNoZWNrIGlwdjQgYW5kIGlwdjYgYGFsbCBob3N0bmFtZWBcbiAgLy8gd2h5IGRvIHdlIG5lZWQgdGhpcyBjaGVjaz9cbiAgLy8gaG9zdG5hbWUgbi9hIGZvciBmaWxlIHByb3RvY29sIChleGFtcGxlLCB3aGVuIHVzaW5nIGVsZWN0cm9uLCBpb25pYylcbiAgLy8gc2VlOiBodHRwczovL2dpdGh1Yi5jb20vd2VicGFjay93ZWJwYWNrLWRldi1zZXJ2ZXIvcHVsbC8zODRcblxuXG4gIGlmICgoaG9zdG5hbWUgPT09ICcwLjAuMC4wJyB8fCBob3N0bmFtZSA9PT0gJzo6JykgJiYgbG9jLmhvc3RuYW1lICYmIGxvYy5wcm90b2NvbC5pbmRleE9mKCdodHRwJykgPT09IDApIHtcbiAgICBob3N0bmFtZSA9IGxvYy5ob3N0bmFtZTtcbiAgfSAvLyBgaG9zdG5hbWVgIGNhbiBiZSBlbXB0eSB3aGVuIHRoZSBzY3JpcHQgcGF0aCBpcyByZWxhdGl2ZS4gSW4gdGhhdCBjYXNlLCBzcGVjaWZ5aW5nXG4gIC8vIGEgcHJvdG9jb2wgd291bGQgcmVzdWx0IGluIGFuIGludmFsaWQgVVJMLlxuICAvLyBXaGVuIGh0dHBzIGlzIHVzZWQgaW4gdGhlIGFwcCwgc2VjdXJlIHdlYnNvY2tldHMgYXJlIGFsd2F5cyBuZWNlc3NhcnlcbiAgLy8gYmVjYXVzZSB0aGUgYnJvd3NlciBkb2Vzbid0IGFjY2VwdCBub24tc2VjdXJlIHdlYnNvY2tldHMuXG5cblxuICBpZiAoaG9zdG5hbWUgJiYgaG9zdG5hbWUgIT09ICcxMjcuMC4wLjEnICYmIChsb2MucHJvdG9jb2wgPT09ICdodHRwczonIHx8IHVybFBhcnRzLmhvc3RuYW1lID09PSAnMC4wLjAuMCcpKSB7XG4gICAgcHJvdG9jb2wgPSBsb2MucHJvdG9jb2w7XG4gIH0gLy8gYWxsIG9mIHRoZXNlIHNvY2sgdXJsIHBhcmFtcyBhcmUgb3B0aW9uYWxseSBwYXNzZWQgaW4gdGhyb3VnaFxuICAvLyByZXNvdXJjZVF1ZXJ5LCBzbyB3ZSBuZWVkIHRvIGZhbGwgYmFjayB0byB0aGUgZGVmYXVsdCBpZlxuICAvLyB0aGV5IGFyZSBub3QgcHJvdmlkZWRcblxuXG4gIHZhciBzb2NrSG9zdCA9IHF1ZXJ5LnNvY2tIb3N0IHx8IGhvc3RuYW1lO1xuICB2YXIgc29ja1BhdGggPSBxdWVyeS5zb2NrUGF0aCB8fCAnL3NvY2tqcy1ub2RlJztcbiAgdmFyIHNvY2tQb3J0ID0gcXVlcnkuc29ja1BvcnQgfHwgcG9ydDtcblxuICBpZiAoc29ja1BvcnQgPT09ICdsb2NhdGlvbicpIHtcbiAgICBzb2NrUG9ydCA9IGxvYy5wb3J0O1xuICB9XG5cbiAgcmV0dXJuIHVybC5mb3JtYXQoe1xuICAgIHByb3RvY29sOiBwcm90b2NvbCxcbiAgICBhdXRoOiBhdXRoLFxuICAgIGhvc3RuYW1lOiBzb2NrSG9zdCxcbiAgICBwb3J0OiBzb2NrUG9ydCxcbiAgICAvLyBJZiBzb2NrUGF0aCBpcyBwcm92aWRlZCBpdCdsbCBiZSBwYXNzZWQgaW4gdmlhIHRoZSByZXNvdXJjZVF1ZXJ5IGFzIGFcbiAgICAvLyBxdWVyeSBwYXJhbSBzbyBpdCBoYXMgdG8gYmUgcGFyc2VkIG91dCBvZiB0aGUgcXVlcnlzdHJpbmcgaW4gb3JkZXIgZm9yIHRoZVxuICAgIC8vIGNsaWVudCB0byBvcGVuIHRoZSBzb2NrZXQgdG8gdGhlIGNvcnJlY3QgbG9jYXRpb24uXG4gICAgcGF0aG5hbWU6IHNvY2tQYXRoXG4gIH0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNyZWF0ZVNvY2tldFVybDsiLCIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIGdldEN1cnJlbnRTY3JpcHRTb3VyY2UoKSB7XG4gIC8vIGBkb2N1bWVudC5jdXJyZW50U2NyaXB0YCBpcyB0aGUgbW9zdCBhY2N1cmF0ZSB3YXkgdG8gZmluZCB0aGUgY3VycmVudCBzY3JpcHQsXG4gIC8vIGJ1dCBpcyBub3Qgc3VwcG9ydGVkIGluIGFsbCBicm93c2Vycy5cbiAgaWYgKGRvY3VtZW50LmN1cnJlbnRTY3JpcHQpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuY3VycmVudFNjcmlwdC5nZXRBdHRyaWJ1dGUoJ3NyYycpO1xuICB9IC8vIEZhbGwgYmFjayB0byBnZXR0aW5nIGFsbCBzY3JpcHRzIGluIHRoZSBkb2N1bWVudC5cblxuXG4gIHZhciBzY3JpcHRFbGVtZW50cyA9IGRvY3VtZW50LnNjcmlwdHMgfHwgW107XG4gIHZhciBjdXJyZW50U2NyaXB0ID0gc2NyaXB0RWxlbWVudHNbc2NyaXB0RWxlbWVudHMubGVuZ3RoIC0gMV07XG5cbiAgaWYgKGN1cnJlbnRTY3JpcHQpIHtcbiAgICByZXR1cm4gY3VycmVudFNjcmlwdC5nZXRBdHRyaWJ1dGUoJ3NyYycpO1xuICB9IC8vIEZhaWwgYXMgdGhlcmUgd2FzIG5vIHNjcmlwdCB0byB1c2UuXG5cblxuICB0aHJvdyBuZXcgRXJyb3IoJ1tXRFNdIEZhaWxlZCB0byBnZXQgY3VycmVudCBzY3JpcHQgc291cmNlLicpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldEN1cnJlbnRTY3JpcHRTb3VyY2U7IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgbG9nID0gcmVxdWlyZSgnbG9nbGV2ZWwnKS5nZXRMb2dnZXIoJ3dlYnBhY2stZGV2LXNlcnZlcicpO1xuXG52YXIgSU5GTyA9ICdpbmZvJztcbnZhciBXQVJOID0gJ3dhcm4nO1xudmFyIEVSUk9SID0gJ2Vycm9yJztcbnZhciBERUJVRyA9ICdkZWJ1Zyc7XG52YXIgVFJBQ0UgPSAndHJhY2UnO1xudmFyIFNJTEVOVCA9ICdzaWxlbnQnOyAvLyBkZXByZWNhdGVkXG4vLyBUT0RPOiByZW1vdmUgdGhlc2UgYXQgbWFqb3IgcmVsZWFzZWRcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJwYWNrL3dlYnBhY2stZGV2LXNlcnZlci9wdWxsLzE4MjVcblxudmFyIFdBUk5JTkcgPSAnd2FybmluZyc7XG52YXIgTk9ORSA9ICdub25lJzsgLy8gU2V0IHRoZSBkZWZhdWx0IGxvZyBsZXZlbFxuXG5sb2cuc2V0RGVmYXVsdExldmVsKElORk8pO1xuXG5mdW5jdGlvbiBzZXRMb2dMZXZlbChsZXZlbCkge1xuICBzd2l0Y2ggKGxldmVsKSB7XG4gICAgY2FzZSBJTkZPOlxuICAgIGNhc2UgV0FSTjpcbiAgICBjYXNlIEVSUk9SOlxuICAgIGNhc2UgREVCVUc6XG4gICAgY2FzZSBUUkFDRTpcbiAgICAgIGxvZy5zZXRMZXZlbChsZXZlbCk7XG4gICAgICBicmVhaztcbiAgICAvLyBkZXByZWNhdGVkXG5cbiAgICBjYXNlIFdBUk5JTkc6XG4gICAgICAvLyBsb2dsZXZlbCdzIHdhcm5pbmcgbmFtZSBpcyBkaWZmZXJlbnQgZnJvbSB3ZWJwYWNrJ3NcbiAgICAgIGxvZy5zZXRMZXZlbCgnd2FybicpO1xuICAgICAgYnJlYWs7XG4gICAgLy8gZGVwcmVjYXRlZFxuXG4gICAgY2FzZSBOT05FOlxuICAgIGNhc2UgU0lMRU5UOlxuICAgICAgbG9nLmRpc2FibGVBbGwoKTtcbiAgICAgIGJyZWFrO1xuXG4gICAgZGVmYXVsdDpcbiAgICAgIGxvZy5lcnJvcihcIltXRFNdIFVua25vd24gY2xpZW50TG9nTGV2ZWwgJ1wiLmNvbmNhdChsZXZlbCwgXCInXCIpKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgbG9nOiBsb2csXG4gIHNldExvZ0xldmVsOiBzZXRMb2dMZXZlbFxufTsiLCIndXNlIHN0cmljdCc7XG4vKiBnbG9iYWwgV29ya2VyR2xvYmFsU2NvcGUgc2VsZiAqL1xuXG52YXIgX3JlcXVpcmUgPSByZXF1aXJlKCcuL2xvZycpLFxuICAgIGxvZyA9IF9yZXF1aXJlLmxvZztcblxuZnVuY3Rpb24gcmVsb2FkQXBwKF9yZWYsIF9yZWYyKSB7XG4gIHZhciBob3RSZWxvYWQgPSBfcmVmLmhvdFJlbG9hZCxcbiAgICAgIGhvdCA9IF9yZWYuaG90LFxuICAgICAgbGl2ZVJlbG9hZCA9IF9yZWYubGl2ZVJlbG9hZDtcbiAgdmFyIGlzVW5sb2FkaW5nID0gX3JlZjIuaXNVbmxvYWRpbmcsXG4gICAgICBjdXJyZW50SGFzaCA9IF9yZWYyLmN1cnJlbnRIYXNoO1xuXG4gIGlmIChpc1VubG9hZGluZyB8fCAhaG90UmVsb2FkKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKGhvdCkge1xuICAgIGxvZy5pbmZvKCdbV0RTXSBBcHAgaG90IHVwZGF0ZS4uLicpO1xuXG4gICAgdmFyIGhvdEVtaXR0ZXIgPSByZXF1aXJlKCd3ZWJwYWNrL2hvdC9lbWl0dGVyJyk7XG5cbiAgICBob3RFbWl0dGVyLmVtaXQoJ3dlYnBhY2tIb3RVcGRhdGUnLCBjdXJyZW50SGFzaCk7XG5cbiAgICBpZiAodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnICYmIHNlbGYud2luZG93KSB7XG4gICAgICAvLyBicm9hZGNhc3QgdXBkYXRlIHRvIHdpbmRvd1xuICAgICAgc2VsZi5wb3N0TWVzc2FnZShcIndlYnBhY2tIb3RVcGRhdGVcIi5jb25jYXQoY3VycmVudEhhc2gpLCAnKicpO1xuICAgIH1cbiAgfSAvLyBhbGxvdyByZWZyZXNoaW5nIHRoZSBwYWdlIG9ubHkgaWYgbGl2ZVJlbG9hZCBpc24ndCBkaXNhYmxlZFxuICBlbHNlIGlmIChsaXZlUmVsb2FkKSB7XG4gICAgICB2YXIgcm9vdFdpbmRvdyA9IHNlbGY7IC8vIHVzZSBwYXJlbnQgd2luZG93IGZvciByZWxvYWQgKGluIGNhc2Ugd2UncmUgaW4gYW4gaWZyYW1lIHdpdGggbm8gdmFsaWQgc3JjKVxuXG4gICAgICB2YXIgaW50ZXJ2YWxJZCA9IHNlbGYuc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAocm9vdFdpbmRvdy5sb2NhdGlvbi5wcm90b2NvbCAhPT0gJ2Fib3V0OicpIHtcbiAgICAgICAgICAvLyByZWxvYWQgaW1tZWRpYXRlbHkgaWYgcHJvdG9jb2wgaXMgdmFsaWRcbiAgICAgICAgICBhcHBseVJlbG9hZChyb290V2luZG93LCBpbnRlcnZhbElkKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByb290V2luZG93ID0gcm9vdFdpbmRvdy5wYXJlbnQ7XG5cbiAgICAgICAgICBpZiAocm9vdFdpbmRvdy5wYXJlbnQgPT09IHJvb3RXaW5kb3cpIHtcbiAgICAgICAgICAgIC8vIGlmIHBhcmVudCBlcXVhbHMgY3VycmVudCB3aW5kb3cgd2UndmUgcmVhY2hlZCB0aGUgcm9vdCB3aGljaCB3b3VsZCBjb250aW51ZSBmb3JldmVyLCBzbyB0cmlnZ2VyIGEgcmVsb2FkIGFueXdheXNcbiAgICAgICAgICAgIGFwcGx5UmVsb2FkKHJvb3RXaW5kb3csIGludGVydmFsSWQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gIGZ1bmN0aW9uIGFwcGx5UmVsb2FkKHJvb3RXaW5kb3csIGludGVydmFsSWQpIHtcbiAgICBjbGVhckludGVydmFsKGludGVydmFsSWQpO1xuICAgIGxvZy5pbmZvKCdbV0RTXSBBcHAgdXBkYXRlZC4gUmVsb2FkaW5nLi4uJyk7XG4gICAgcm9vdFdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHJlbG9hZEFwcDsiLCIndXNlIHN0cmljdCc7XG4vKiBnbG9iYWwgX19yZXNvdXJjZVF1ZXJ5IFdvcmtlckdsb2JhbFNjb3BlIHNlbGYgKi9cbi8vIFNlbmQgbWVzc2FnZXMgdG8gdGhlIG91dHNpZGUsIHNvIHBsdWdpbnMgY2FuIGNvbnN1bWUgaXQuXG5cbmZ1bmN0aW9uIHNlbmRNc2codHlwZSwgZGF0YSkge1xuICBpZiAodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnICYmICh0eXBlb2YgV29ya2VyR2xvYmFsU2NvcGUgPT09ICd1bmRlZmluZWQnIHx8ICEoc2VsZiBpbnN0YW5jZW9mIFdvcmtlckdsb2JhbFNjb3BlKSkpIHtcbiAgICBzZWxmLnBvc3RNZXNzYWdlKHtcbiAgICAgIHR5cGU6IFwid2VicGFja1wiLmNvbmNhdCh0eXBlKSxcbiAgICAgIGRhdGE6IGRhdGFcbiAgICB9LCAnKicpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2VuZE1zZzsiLCIndXNlIHN0cmljdCc7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcblx0cmV0dXJuIC9bXFx1MDAxYlxcdTAwOWJdW1soKSM7P10qKD86WzAtOV17MSw0fSg/OjtbMC05XXswLDR9KSopP1swLTlBLVBSWmNmLW5xcnk9PjxdL2c7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGFuc2lSZWdleCA9IHJlcXVpcmUoJ2Fuc2ktcmVnZXgnKSgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChzdHIpIHtcblx0cmV0dXJuIHR5cGVvZiBzdHIgPT09ICdzdHJpbmcnID8gc3RyLnJlcGxhY2UoYW5zaVJlZ2V4LCAnJykgOiBzdHI7XG59O1xuIiwidmFyIEV2ZW50RW1pdHRlciA9IHJlcXVpcmUoXCJldmVudHNcIik7XG5tb2R1bGUuZXhwb3J0cyA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiIsInZhciBsb2dMZXZlbCA9IFwiaW5mb1wiO1xuXG5mdW5jdGlvbiBkdW1teSgpIHt9XG5cbmZ1bmN0aW9uIHNob3VsZExvZyhsZXZlbCkge1xuXHR2YXIgc2hvdWxkTG9nID1cblx0XHQobG9nTGV2ZWwgPT09IFwiaW5mb1wiICYmIGxldmVsID09PSBcImluZm9cIikgfHxcblx0XHQoW1wiaW5mb1wiLCBcIndhcm5pbmdcIl0uaW5kZXhPZihsb2dMZXZlbCkgPj0gMCAmJiBsZXZlbCA9PT0gXCJ3YXJuaW5nXCIpIHx8XG5cdFx0KFtcImluZm9cIiwgXCJ3YXJuaW5nXCIsIFwiZXJyb3JcIl0uaW5kZXhPZihsb2dMZXZlbCkgPj0gMCAmJiBsZXZlbCA9PT0gXCJlcnJvclwiKTtcblx0cmV0dXJuIHNob3VsZExvZztcbn1cblxuZnVuY3Rpb24gbG9nR3JvdXAobG9nRm4pIHtcblx0cmV0dXJuIGZ1bmN0aW9uIChsZXZlbCwgbXNnKSB7XG5cdFx0aWYgKHNob3VsZExvZyhsZXZlbCkpIHtcblx0XHRcdGxvZ0ZuKG1zZyk7XG5cdFx0fVxuXHR9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChsZXZlbCwgbXNnKSB7XG5cdGlmIChzaG91bGRMb2cobGV2ZWwpKSB7XG5cdFx0aWYgKGxldmVsID09PSBcImluZm9cIikge1xuXHRcdFx0Y29uc29sZS5sb2cobXNnKTtcblx0XHR9IGVsc2UgaWYgKGxldmVsID09PSBcIndhcm5pbmdcIikge1xuXHRcdFx0Y29uc29sZS53YXJuKG1zZyk7XG5cdFx0fSBlbHNlIGlmIChsZXZlbCA9PT0gXCJlcnJvclwiKSB7XG5cdFx0XHRjb25zb2xlLmVycm9yKG1zZyk7XG5cdFx0fVxuXHR9XG59O1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBub2RlL25vLXVuc3VwcG9ydGVkLWZlYXR1cmVzL25vZGUtYnVpbHRpbnMgKi9cbnZhciBncm91cCA9IGNvbnNvbGUuZ3JvdXAgfHwgZHVtbXk7XG52YXIgZ3JvdXBDb2xsYXBzZWQgPSBjb25zb2xlLmdyb3VwQ29sbGFwc2VkIHx8IGR1bW15O1xudmFyIGdyb3VwRW5kID0gY29uc29sZS5ncm91cEVuZCB8fCBkdW1teTtcbi8qIGVzbGludC1lbmFibGUgbm9kZS9uby11bnN1cHBvcnRlZC1mZWF0dXJlcy9ub2RlLWJ1aWx0aW5zICovXG5cbm1vZHVsZS5leHBvcnRzLmdyb3VwID0gbG9nR3JvdXAoZ3JvdXApO1xuXG5tb2R1bGUuZXhwb3J0cy5ncm91cENvbGxhcHNlZCA9IGxvZ0dyb3VwKGdyb3VwQ29sbGFwc2VkKTtcblxubW9kdWxlLmV4cG9ydHMuZ3JvdXBFbmQgPSBsb2dHcm91cChncm91cEVuZCk7XG5cbm1vZHVsZS5leHBvcnRzLnNldExvZ0xldmVsID0gZnVuY3Rpb24gKGxldmVsKSB7XG5cdGxvZ0xldmVsID0gbGV2ZWw7XG59O1xuXG5tb2R1bGUuZXhwb3J0cy5mb3JtYXRFcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcblx0dmFyIG1lc3NhZ2UgPSBlcnIubWVzc2FnZTtcblx0dmFyIHN0YWNrID0gZXJyLnN0YWNrO1xuXHRpZiAoIXN0YWNrKSB7XG5cdFx0cmV0dXJuIG1lc3NhZ2U7XG5cdH0gZWxzZSBpZiAoc3RhY2suaW5kZXhPZihtZXNzYWdlKSA8IDApIHtcblx0XHRyZXR1cm4gbWVzc2FnZSArIFwiXFxuXCIgKyBzdGFjaztcblx0fSBlbHNlIHtcblx0XHRyZXR1cm4gc3RhY2s7XG5cdH1cbn07XG4iLCJ2YXIgbWFwID0ge1xuXHRcIi4vbG9nXCI6IFwiLi9ub2RlX21vZHVsZXMvd2VicGFjay9ob3QvbG9nLmpzXCJcbn07XG5cblxuZnVuY3Rpb24gd2VicGFja0NvbnRleHQocmVxKSB7XG5cdHZhciBpZCA9IHdlYnBhY2tDb250ZXh0UmVzb2x2ZShyZXEpO1xuXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhpZCk7XG59XG5mdW5jdGlvbiB3ZWJwYWNrQ29udGV4dFJlc29sdmUocmVxKSB7XG5cdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8obWFwLCByZXEpKSB7XG5cdFx0dmFyIGUgPSBuZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiICsgcmVxICsgXCInXCIpO1xuXHRcdGUuY29kZSA9ICdNT0RVTEVfTk9UX0ZPVU5EJztcblx0XHR0aHJvdyBlO1xuXHR9XG5cdHJldHVybiBtYXBbcmVxXTtcbn1cbndlYnBhY2tDb250ZXh0LmtleXMgPSBmdW5jdGlvbiB3ZWJwYWNrQ29udGV4dEtleXMoKSB7XG5cdHJldHVybiBPYmplY3Qua2V5cyhtYXApO1xufTtcbndlYnBhY2tDb250ZXh0LnJlc29sdmUgPSB3ZWJwYWNrQ29udGV4dFJlc29sdmU7XG5tb2R1bGUuZXhwb3J0cyA9IHdlYnBhY2tDb250ZXh0O1xud2VicGFja0NvbnRleHQuaWQgPSBcIi4vbm9kZV9tb2R1bGVzL3dlYnBhY2svaG90IHN5bmMgXlxcXFwuXFxcXC9sb2ckXCI7IiwiaW1wb3J0IHQgZnJvbVwidGlueS1lbWl0dGVyXCI7aW1wb3J0IGkgZnJvbVwidmlydHVhbC1zY3JvbGxcIjtmdW5jdGlvbiBlKCl7cmV0dXJuIGU9T2JqZWN0LmFzc2lnbj9PYmplY3QuYXNzaWduLmJpbmQoKTpmdW5jdGlvbih0KXtmb3IodmFyIGk9MTtpPGFyZ3VtZW50cy5sZW5ndGg7aSsrKXt2YXIgZT1hcmd1bWVudHNbaV07Zm9yKHZhciBzIGluIGUpT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUscykmJih0W3NdPWVbc10pfXJldHVybiB0fSxlLmFwcGx5KHRoaXMsYXJndW1lbnRzKX1jb25zdCBzPVtcImR1cmF0aW9uXCIsXCJlYXNpbmdcIl07Y2xhc3Mgb3t0byh0LGk9e30pe2xldHtkdXJhdGlvbjpvPTEsZWFzaW5nOnI9KHQ9PnQpfT1pLG49ZnVuY3Rpb24odCxpKXtpZihudWxsPT10KXJldHVybnt9O3ZhciBlLHMsbz17fSxyPU9iamVjdC5rZXlzKHQpO2ZvcihzPTA7czxyLmxlbmd0aDtzKyspaS5pbmRleE9mKGU9cltzXSk+PTB8fChvW2VdPXRbZV0pO3JldHVybiBvfShpLHMpO3RoaXMudGFyZ2V0PXQsdGhpcy5mcm9tS2V5cz1lKHt9LG4pLHRoaXMudG9LZXlzPWUoe30sbiksdGhpcy5rZXlzPU9iamVjdC5rZXlzKGUoe30sbikpLHRoaXMua2V5cy5mb3JFYWNoKGk9Pnt0aGlzLmZyb21LZXlzW2ldPXRbaV19KSx0aGlzLmR1cmF0aW9uPW8sdGhpcy5lYXNpbmc9cix0aGlzLmN1cnJlbnRUaW1lPTAsdGhpcy5pc1J1bm5pbmc9ITB9cmFmKHQpe2lmKCF0aGlzLmlzUnVubmluZylyZXR1cm47dGhpcy5jdXJyZW50VGltZT1NYXRoLm1pbih0aGlzLmN1cnJlbnRUaW1lKy4wMDEqdCx0aGlzLmR1cmF0aW9uKTtjb25zdCBpPXRoaXMuZWFzaW5nKHRoaXMucHJvZ3Jlc3MpO3RoaXMua2V5cy5mb3JFYWNoKHQ9Pntjb25zdCBlPXRoaXMuZnJvbUtleXNbdF07dGhpcy50YXJnZXRbdF09ZSsodGhpcy50b0tleXNbdF0tZSkqaX0pLDE9PT1pJiYodGhpcy5pc1J1bm5pbmc9ITEpfWdldCBwcm9ncmVzcygpe3JldHVybiB0aGlzLmN1cnJlbnRUaW1lL3RoaXMuZHVyYXRpb259fWNsYXNzIHIgZXh0ZW5kcyB0e2NvbnN0cnVjdG9yKHtkdXJhdGlvbjp0PTEuMixlYXNpbmc6ZT0odD0+MT09PXQ/MToxLU1hdGgucG93KDIsLTEwKnQpKSxzbW9vdGg6cz0hMCxzbW9vdGhUb3VjaDpyPSExLHRvdWNoTXVsdGlwbGllcjpuPTIsZGlyZWN0aW9uOmg9XCJ2ZXJ0aWNhbFwiLHdyYXBwZXI6bD13aW5kb3csY29udGVudDpjPWRvY3VtZW50LmJvZHl9PXt9KXt2YXIgYSxwLGQ7c3VwZXIoKSx0aGlzLm9uV2luZG93UmVzaXplPSgpPT57dGhpcy53cmFwcGVyV2lkdGg9d2luZG93LmlubmVyV2lkdGgsdGhpcy53cmFwcGVySGVpZ2h0PXdpbmRvdy5pbm5lckhlaWdodH0sdGhpcy5vbldyYXBwZXJSZXNpemU9KFt0XSk9PntpZih0KXtjb25zdCBpPXQuY29udGVudFJlY3Q7dGhpcy53cmFwcGVyV2lkdGg9aS53aWR0aCx0aGlzLndyYXBwZXJIZWlnaHQ9aS5oZWlnaHR9fSx0aGlzLm9uQ29udGVudFJlc2l6ZT0oW3RdKT0+e2lmKHQpe2NvbnN0IGk9dC5jb250ZW50UmVjdDt0aGlzLmNvbnRlbnRXaWR0aD1pLndpZHRoLHRoaXMuY29udGVudEhlaWdodD1pLmhlaWdodH19LHRoaXMub25WaXJ0dWFsU2Nyb2xsPSh7ZGVsdGFZOnQsb3JpZ2luYWxFdmVudDppfSk9PntpLmN0cmxLZXl8fCh0aGlzLnNtb290aD1pLmNoYW5nZWRUb3VjaGVzP3RoaXMuc21vb3RoVG91Y2g6dGhpcy5vcHRpb25zLnNtb290aCx0aGlzLnN0b3BwZWQ/aS5wcmV2ZW50RGVmYXVsdCgpOnRoaXMuc21vb3RoJiY0IT09aS5idXR0b25zJiYodGhpcy5zbW9vdGgmJmkucHJldmVudERlZmF1bHQoKSx0aGlzLnRhcmdldFNjcm9sbC09dCx0aGlzLnRhcmdldFNjcm9sbD1NYXRoLm1heCgwLE1hdGgubWluKHRoaXMudGFyZ2V0U2Nyb2xsLHRoaXMubGltaXQpKSx0aGlzLnNjcm9sbFRvKHRoaXMudGFyZ2V0U2Nyb2xsKSkpfSx0aGlzLm9uU2Nyb2xsPXQ9Pnt0aGlzLmlzU2Nyb2xsaW5nJiZ0aGlzLnNtb290aHx8KHRoaXMudGFyZ2V0U2Nyb2xsPXRoaXMuc2Nyb2xsPXRoaXMubGFzdFNjcm9sbD10aGlzLndyYXBwZXJOb2RlW3RoaXMuc2Nyb2xsUHJvcGVydHldLHRoaXMubm90aWZ5KCkpfSx2b2lkIDAhPT1hcmd1bWVudHNbMF0ubGVycCYmY29uc29sZS53YXJuKFwiTGVuaXM6IGxlcnAgb3B0aW9uIGlzIGRlcHJlY2F0ZWQsIHlvdSBtdXN0IHVzZSBkdXJhdGlvbiBhbmQgZWFzaW5nIG9wdGlvbnMgaW5zdGVhZC4gU2VlIGRvY3VtZW50YXRpb24gaHR0cHM6Ly9naXRodWIuY29tL3N0dWRpby1mcmVpZ2h0L2xlbmlzXCIpLHdpbmRvdy5sZW5pc1ZlcnNpb249XCIwLjIuNlwiLHRoaXMub3B0aW9ucz17ZHVyYXRpb246dCxlYXNpbmc6ZSxzbW9vdGg6cyxzbW9vdGhUb3VjaDpyLHRvdWNoTXVsdGlwbGllcjpuLGRpcmVjdGlvbjpoLHdyYXBwZXI6bCxjb250ZW50OmN9LHRoaXMud3JhcHBlck5vZGU9bCx0aGlzLmNvbnRlbnROb2RlPWMsdGhpcy5kdXJhdGlvbj10LHRoaXMuZWFzaW5nPWUsdGhpcy5zbW9vdGg9cyx0aGlzLnNtb290aFRvdWNoPXIsdGhpcy50b3VjaE11bHRpcGxpZXI9bix0aGlzLmRpcmVjdGlvbj1oLHRoaXMud3JhcHBlck5vZGUuYWRkRXZlbnRMaXN0ZW5lcihcInNjcm9sbFwiLHRoaXMub25TY3JvbGwpLHRoaXMud3JhcHBlck5vZGU9PT13aW5kb3c/KHRoaXMud3JhcHBlck5vZGUuYWRkRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLHRoaXMub25XaW5kb3dSZXNpemUpLHRoaXMub25XaW5kb3dSZXNpemUoKSk6KHRoaXMud3JhcHBlckhlaWdodD10aGlzLndyYXBwZXJOb2RlLm9mZnNldEhlaWdodCx0aGlzLndyYXBwZXJXaWR0aD10aGlzLndyYXBwZXJOb2RlLm9mZnNldFdpZHRoLHRoaXMud3JhcHBlck9ic2VydmVyPW5ldyBSZXNpemVPYnNlcnZlcih0aGlzLm9uV3JhcHBlclJlc2l6ZSksdGhpcy53cmFwcGVyT2JzZXJ2ZXIub2JzZXJ2ZSh0aGlzLndyYXBwZXJOb2RlKSksdGhpcy5jb250ZW50SGVpZ2h0PXRoaXMuY29udGVudE5vZGUub2Zmc2V0SGVpZ2h0LHRoaXMuY29udGVudFdpZHRoPXRoaXMuY29udGVudE5vZGUub2Zmc2V0V2lkdGgsdGhpcy5jb250ZW50T2JzZXJ2ZXI9bmV3IFJlc2l6ZU9ic2VydmVyKHRoaXMub25Db250ZW50UmVzaXplKSx0aGlzLmNvbnRlbnRPYnNlcnZlci5vYnNlcnZlKHRoaXMuY29udGVudE5vZGUpLHRoaXMudGFyZ2V0U2Nyb2xsPXRoaXMuc2Nyb2xsPXRoaXMubGFzdFNjcm9sbD10aGlzLndyYXBwZXJOb2RlW3RoaXMuc2Nyb2xsUHJvcGVydHldLHRoaXMuYW5pbWF0ZT1uZXcgbztjb25zdCB1PShudWxsPT0oYT1uYXZpZ2F0b3IpfHxudWxsPT0ocD1hLnVzZXJBZ2VudERhdGEpP3ZvaWQgMDpwLnBsYXRmb3JtKXx8KG51bGw9PShkPW5hdmlnYXRvcik/dm9pZCAwOmQucGxhdGZvcm0pfHxcInVua25vd25cIjt0aGlzLnZpcnR1YWxTY3JvbGw9bmV3IGkoe2VsOnRoaXMud3JhcHBlck5vZGUsZmlyZWZveE11bHRpcGxpZXI6NTAsbW91c2VNdWx0aXBsaWVyOnUuaW5jbHVkZXMoXCJXaW5cIik/MTouNCx1c2VLZXlib2FyZDohMSx0b3VjaE11bHRpcGxpZXI6dGhpcy50b3VjaE11bHRpcGxpZXIsdXNlVG91Y2g6ITAscGFzc2l2ZTohMX0pLHRoaXMudmlydHVhbFNjcm9sbC5vbih0aGlzLm9uVmlydHVhbFNjcm9sbCl9Z2V0IHNjcm9sbFByb3BlcnR5KCl7bGV0IHQ7cmV0dXJuIHQ9dGhpcy53cmFwcGVyTm9kZT09PXdpbmRvdz9cImhvcml6b250YWxcIj09PXRoaXMuZGlyZWN0aW9uP1wic2Nyb2xsWFwiOlwic2Nyb2xsWVwiOlwiaG9yaXpvbnRhbFwiPT09dGhpcy5kaXJlY3Rpb24/XCJzY3JvbGxMZWZ0XCI6XCJzY3JvbGxUb3BcIix0fXN0YXJ0KCl7dGhpcy5zdG9wcGVkPSExfXN0b3AoKXt0aGlzLnN0b3BwZWQ9ITB9ZGVzdHJveSgpe3ZhciB0O3RoaXMud3JhcHBlck5vZGU9PT13aW5kb3cmJnRoaXMud3JhcHBlck5vZGUucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLHRoaXMub25XaW5kb3dSZXNpemUpLHRoaXMud3JhcHBlck5vZGUucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInNjcm9sbFwiLHRoaXMub25TY3JvbGwpLHRoaXMudmlydHVhbFNjcm9sbC5kZXN0cm95KCksbnVsbD09KHQ9dGhpcy53cmFwcGVyT2JzZXJ2ZXIpfHx0LmRpc2Nvbm5lY3QoKSx0aGlzLmNvbnRlbnRPYnNlcnZlci5kaXNjb25uZWN0KCl9Z2V0IGxpbWl0KCl7cmV0dXJuXCJob3Jpem9udGFsXCI9PT10aGlzLmRpcmVjdGlvbj90aGlzLmNvbnRlbnRXaWR0aC10aGlzLndyYXBwZXJXaWR0aDp0aGlzLmNvbnRlbnRIZWlnaHQtdGhpcy53cmFwcGVySGVpZ2h0fXJhZih0KXtjb25zdCBpPXQtKHRoaXMubm93fHwwKTt0aGlzLm5vdz10LCF0aGlzLnN0b3BwZWQmJnRoaXMuc21vb3RoJiYodGhpcy5sYXN0U2Nyb2xsPXRoaXMuc2Nyb2xsLHRoaXMuYW5pbWF0ZS5yYWYoaSksTWF0aC5yb3VuZCh0aGlzLnNjcm9sbCk9PT1NYXRoLnJvdW5kKHRoaXMudGFyZ2V0U2Nyb2xsKSYmKHRoaXMubGFzdFNjcm9sbD10aGlzLnRhcmdldFNjcm9sbCksdGhpcy5pc1Njcm9sbGluZyYmKHRoaXMuc2V0U2Nyb2xsKHRoaXMuc2Nyb2xsKSx0aGlzLm5vdGlmeSgpKSx0aGlzLmlzU2Nyb2xsaW5nPXRoaXMuc2Nyb2xsIT09dGhpcy50YXJnZXRTY3JvbGwpfWdldCB2ZWxvY2l0eSgpe3JldHVybiB0aGlzLnNjcm9sbC10aGlzLmxhc3RTY3JvbGx9c2V0U2Nyb2xsKHQpe1wiaG9yaXpvbnRhbFwiPT09dGhpcy5kaXJlY3Rpb24/dGhpcy53cmFwcGVyTm9kZS5zY3JvbGxUbyh0LDApOnRoaXMud3JhcHBlck5vZGUuc2Nyb2xsVG8oMCx0KX1ub3RpZnkoKXt0aGlzLmVtaXQoXCJzY3JvbGxcIix7c2Nyb2xsOnRoaXMuc2Nyb2xsLGxpbWl0OnRoaXMubGltaXQsdmVsb2NpdHk6dGhpcy52ZWxvY2l0eSxkaXJlY3Rpb246dGhpcy5kaXJlY3Rpb24scHJvZ3Jlc3M6dGhpcy5zY3JvbGwvdGhpcy5saW1pdH0pfXNjcm9sbFRvKHQse29mZnNldDppPTAsaW1tZWRpYXRlOmU9ITEsZHVyYXRpb246cz10aGlzLmR1cmF0aW9uLGVhc2luZzpvPXRoaXMuZWFzaW5nfT17fSl7bGV0IHI7aWYoXCJudW1iZXJcIj09dHlwZW9mIHQpcj10O2Vsc2UgaWYoXCJ0b3BcIj09PXR8fFwiI3RvcFwiPT09dClyPTA7ZWxzZSBpZihcImJvdHRvbVwiPT09dClyPXRoaXMubGltaXQ7ZWxzZXtsZXQgaTtpZihcInN0cmluZ1wiPT10eXBlb2YgdClpPWRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodCk7ZWxzZXtpZihudWxsPT10fHwhdC5ub2RlVHlwZSlyZXR1cm47aT10fWlmKCF0KXJldHVybjtsZXQgZT0wO2lmKHRoaXMud3JhcHBlck5vZGUhPT13aW5kb3cpe2NvbnN0IHQ9dGhpcy53cmFwcGVyTm9kZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtlPVwiaG9yaXpvbnRhbFwiPT09dGhpcy5kaXJlY3Rpb24/dC5sZWZ0OnQudG9wfWNvbnN0IHM9aS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtyPShcImhvcml6b250YWxcIj09PXRoaXMuZGlyZWN0aW9uP3MubGVmdDpzLnRvcCkrdGhpcy5zY3JvbGwtZX1yKz1pLHRoaXMudGFyZ2V0U2Nyb2xsPXIsIXRoaXMuc21vb3RofHxlP3RoaXMuc2V0U2Nyb2xsKHRoaXMudGFyZ2V0U2Nyb2xsKTp0aGlzLmFuaW1hdGUudG8odGhpcyx7ZHVyYXRpb246cyxlYXNpbmc6byxzY3JvbGw6dGhpcy50YXJnZXRTY3JvbGx9KX19ZXhwb3J0e3IgYXMgZGVmYXVsdH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1sZW5pcy5tb2Rlcm4ubWpzLm1hcFxuIiwidmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2RlZk5vcm1hbFByb3AgPSAob2JqLCBrZXksIHZhbHVlKSA9PiBrZXkgaW4gb2JqID8gX19kZWZQcm9wKG9iaiwga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUsIHZhbHVlIH0pIDogb2JqW2tleV0gPSB2YWx1ZTtcbnZhciBfX3B1YmxpY0ZpZWxkID0gKG9iaiwga2V5LCB2YWx1ZSkgPT4ge1xuICBfX2RlZk5vcm1hbFByb3Aob2JqLCB0eXBlb2Yga2V5ICE9PSBcInN5bWJvbFwiID8ga2V5ICsgXCJcIiA6IGtleSwgdmFsdWUpO1xuICByZXR1cm4gdmFsdWU7XG59O1xuaW1wb3J0IHsgZ2V0Q29tcG9uZW50RWxlbWVudHMsIGdldEV2ZW50VGFyZ2V0IH0gZnJvbSBcIi4vdXRpbHMuanNcIjtcbmltcG9ydCBDaGlsZHJlbk1hbmFnZXIgZnJvbSBcIi4vbWFuYWdlcnMvQ2hpbGRyZW5NYW5hZ2VyLmpzXCI7XG5pbXBvcnQgUmVmc01hbmFnZXIgZnJvbSBcIi4vbWFuYWdlcnMvUmVmc01hbmFnZXIuanNcIjtcbmltcG9ydCBTZXJ2aWNlc01hbmFnZXIgZnJvbSBcIi4vbWFuYWdlcnMvU2VydmljZXNNYW5hZ2VyLmpzXCI7XG5pbXBvcnQgRXZlbnRzTWFuYWdlciBmcm9tIFwiLi9tYW5hZ2Vycy9FdmVudHNNYW5hZ2VyLmpzXCI7XG5pbXBvcnQgT3B0aW9uc01hbmFnZXIgZnJvbSBcIi4vbWFuYWdlcnMvT3B0aW9uc01hbmFnZXIuanNcIjtcbmltcG9ydCB7IG5vb3AsIGlzRGV2LCBpc0Z1bmN0aW9uLCBpc0FycmF5IH0gZnJvbSBcIi4uL3V0aWxzL2luZGV4LmpzXCI7XG5sZXQgaWQgPSAwO1xuZnVuY3Rpb24gY3JlYXRlQW5kVGVzdE1hbmFnZXJzKGluc3RhbmNlKSB7XG4gIFtcbiAgICB7XG4gICAgICBwcm9wOiBcIl9fb3B0aW9uc1wiLFxuICAgICAgY29uc3RydWN0b3JOYW1lOiBcIk9wdGlvbnNNYW5hZ2VyXCIsXG4gICAgICBjb25zdHJ1Y3RvcjogT3B0aW9uc01hbmFnZXJcbiAgICB9LFxuICAgIHtcbiAgICAgIHByb3A6IFwiX19zZXJ2aWNlc1wiLFxuICAgICAgY29uc3RydWN0b3JOYW1lOiBcIlNlcnZpY2VzTWFuYWdlclwiLFxuICAgICAgY29uc3RydWN0b3I6IFNlcnZpY2VzTWFuYWdlclxuICAgIH0sXG4gICAge1xuICAgICAgcHJvcDogXCJfX2V2ZW50c1wiLFxuICAgICAgY29uc3RydWN0b3JOYW1lOiBcIkV2ZW50c01hbmFnZXJcIixcbiAgICAgIGNvbnN0cnVjdG9yOiBFdmVudHNNYW5hZ2VyXG4gICAgfSxcbiAgICB7XG4gICAgICBwcm9wOiBcIl9fcmVmc1wiLFxuICAgICAgY29uc3RydWN0b3JOYW1lOiBcIlJlZnNNYW5hZ2VyXCIsXG4gICAgICBjb25zdHJ1Y3RvcjogUmVmc01hbmFnZXJcbiAgICB9LFxuICAgIHtcbiAgICAgIHByb3A6IFwiX19jaGlsZHJlblwiLFxuICAgICAgY29uc3RydWN0b3JOYW1lOiBcIkNoaWxkcmVuTWFuYWdlclwiLFxuICAgICAgY29uc3RydWN0b3I6IENoaWxkcmVuTWFuYWdlclxuICAgIH1cbiAgXS5mb3JFYWNoKCh7IHByb3AsIGNvbnN0cnVjdG9yTmFtZSwgY29uc3RydWN0b3IgfSkgPT4ge1xuICAgIGluc3RhbmNlW3Byb3BdID0gbmV3IGluc3RhbmNlLl9fbWFuYWdlcnNbY29uc3RydWN0b3JOYW1lXShpbnN0YW5jZSk7XG4gICAgaWYgKGlzRGV2ICYmICEoaW5zdGFuY2VbcHJvcF0gaW5zdGFuY2VvZiBjb25zdHJ1Y3RvcikpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgVGhlIFxcYCRtYW5hZ2Vycy4ke2NvbnN0cnVjdG9yTmFtZX1cXGAgbXVzdCBleHRlbmQgdGhlIFxcYCR7Y29uc3RydWN0b3JOYW1lfVxcYCBjbGFzcy5gKTtcbiAgICB9XG4gIH0pO1xufVxuY2xhc3MgQmFzZSBleHRlbmRzIEV2ZW50VGFyZ2V0IHtcbiAgY29uc3RydWN0b3IoZWxlbWVudCkge1xuICAgIHN1cGVyKCk7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcIiRwYXJlbnRcIiwgbnVsbCk7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcIiRpZFwiKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwiJGVsXCIpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCIkaXNNb3VudGVkXCIsIGZhbHNlKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwiX19ldmVudEhhbmRsZXJzXCIsIC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCkpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJfX3NlcnZpY2VzXCIpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJfX3JlZnNcIik7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcIl9fb3B0aW9uc1wiKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwiX19jaGlsZHJlblwiKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwiX19ldmVudHNcIik7XG4gICAgaWYgKCFlbGVtZW50KSB7XG4gICAgICBpZiAoaXNEZXYpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhlIHJvb3QgZWxlbWVudCBtdXN0IGJlIGRlZmluZWQuXCIpO1xuICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCB7IF9fY29uZmlnIH0gPSB0aGlzO1xuICAgIGlmIChfX2NvbmZpZy5uYW1lID09PSBcIkJhc2VcIikge1xuICAgICAgaWYgKGlzRGV2KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoZSBgY29uZmlnLm5hbWVgIHByb3BlcnR5IGlzIHJlcXVpcmVkLlwiKTtcbiAgICAgIH1cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy4kaWQgPSBgJHtfX2NvbmZpZy5uYW1lfS0ke2lkfWA7XG4gICAgaWQgKz0gMTtcbiAgICB0aGlzLiRlbCA9IGVsZW1lbnQ7XG4gICAgaWYgKCF0aGlzLiRlbC5fX2Jhc2VfXykge1xuICAgICAgdGhpcy4kZWwuX19iYXNlX18gPSAvKiBAX19QVVJFX18gKi8gbmV3IFdlYWtNYXAoKTtcbiAgICB9XG4gICAgdGhpcy4kZWwuX19iYXNlX18uc2V0KHRoaXMuX19jdG9yLCB0aGlzKTtcbiAgICBjcmVhdGVBbmRUZXN0TWFuYWdlcnModGhpcyk7XG4gICAgaWYgKGlzRGV2KSB7XG4gICAgICB0aGlzLl9fZGVidWcoXCJjb25zdHJ1Y3RvclwiLCB0aGlzKTtcbiAgICB9XG4gIH1cbiAgZ2V0ICRyb290KCkge1xuICAgIGlmICghdGhpcy4kcGFyZW50KSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgbGV0IHBhcmVudCA9IHRoaXMuJHBhcmVudDtcbiAgICBsZXQgcm9vdCA9IHRoaXMuJHBhcmVudDtcbiAgICB3aGlsZSAocGFyZW50KSB7XG4gICAgICBpZiAoIXBhcmVudC4kcGFyZW50KSB7XG4gICAgICAgIHJvb3QgPSBwYXJlbnQ7XG4gICAgICB9XG4gICAgICBwYXJlbnQgPSBwYXJlbnQuJHBhcmVudDtcbiAgICB9XG4gICAgcmV0dXJuIHJvb3Q7XG4gIH1cbiAgZ2V0IF9fY29uZmlnKCkge1xuICAgIHZhciBfYSwgX2IsIF9jO1xuICAgIGxldCBwcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZih0aGlzKTtcbiAgICBsZXQgeyBjb25maWcgfSA9IHByb3RvLmNvbnN0cnVjdG9yO1xuICAgIHdoaWxlIChwcm90by5jb25zdHJ1Y3Rvci5jb25maWcgJiYgcHJvdG8uY29uc3RydWN0b3IuJGlzQmFzZSkge1xuICAgICAgY29uZmlnID0geyAuLi5wcm90by5jb25zdHJ1Y3Rvci5jb25maWcsIC4uLmNvbmZpZyB9O1xuICAgICAgaWYgKHByb3RvLmNvbnN0cnVjdG9yLmNvbmZpZy5vcHRpb25zKSB7XG4gICAgICAgIGNvbmZpZy5vcHRpb25zID0geyAuLi5wcm90by5jb25zdHJ1Y3Rvci5jb25maWcub3B0aW9ucywgLi4uY29uZmlnLm9wdGlvbnMgfTtcbiAgICAgIH1cbiAgICAgIGlmIChwcm90by5jb25zdHJ1Y3Rvci5jb25maWcuZW1pdHMgJiYgY29uZmlnLmVtaXRzKSB7XG4gICAgICAgIGNvbmZpZy5lbWl0cyA9IFsuLi5wcm90by5jb25zdHJ1Y3Rvci5jb25maWcuZW1pdHMsIC4uLmNvbmZpZy5lbWl0c107XG4gICAgICB9XG4gICAgICBwcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihwcm90byk7XG4gICAgfVxuICAgIGNvbmZpZy5vcHRpb25zID0gKF9hID0gY29uZmlnLm9wdGlvbnMpICE9IG51bGwgPyBfYSA6IHt9O1xuICAgIGNvbmZpZy5yZWZzID0gKF9iID0gY29uZmlnLnJlZnMpICE9IG51bGwgPyBfYiA6IFtdO1xuICAgIGNvbmZpZy5jb21wb25lbnRzID0gKF9jID0gY29uZmlnLmNvbXBvbmVudHMpICE9IG51bGwgPyBfYyA6IHt9O1xuICAgIHJldHVybiBjb25maWc7XG4gIH1cbiAgZ2V0ICRzZXJ2aWNlcygpIHtcbiAgICByZXR1cm4gdGhpcy5fX3NlcnZpY2VzO1xuICB9XG4gIGdldCAkcmVmcygpIHtcbiAgICByZXR1cm4gdGhpcy5fX3JlZnM7XG4gIH1cbiAgZ2V0ICRvcHRpb25zKCkge1xuICAgIHJldHVybiB0aGlzLl9fb3B0aW9ucztcbiAgfVxuICBnZXQgJGNoaWxkcmVuKCkge1xuICAgIHJldHVybiB0aGlzLl9fY2hpbGRyZW47XG4gIH1cbiAgZ2V0ICRsb2coKSB7XG4gICAgcmV0dXJuIHRoaXMuX19vcHRpb25zLmxvZyA/IHdpbmRvdy5jb25zb2xlLmxvZy5iaW5kKHdpbmRvdywgYFske3RoaXMuX19jb25maWcubmFtZX1dYCkgOiBub29wO1xuICB9XG4gIGdldCBfX2RlYnVnKCkge1xuICAgIHJldHVybiBpc0RldiAmJiB0aGlzLl9fb3B0aW9ucy5kZWJ1ZyA/IHdpbmRvdy5jb25zb2xlLmxvZy5iaW5kKHdpbmRvdywgYFtkZWJ1Z10gWyR7dGhpcy4kaWR9XWApIDogbm9vcDtcbiAgfVxuICBnZXQgX19tYW5hZ2VycygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgQ2hpbGRyZW5NYW5hZ2VyLFxuICAgICAgRXZlbnRzTWFuYWdlcixcbiAgICAgIE9wdGlvbnNNYW5hZ2VyLFxuICAgICAgUmVmc01hbmFnZXIsXG4gICAgICBTZXJ2aWNlc01hbmFnZXJcbiAgICB9O1xuICB9XG4gIF9fY2FsbE1ldGhvZChtZXRob2QsIC4uLmFyZ3MpIHtcbiAgICBpZiAoaXNEZXYpIHtcbiAgICAgIHRoaXMuX19kZWJ1ZyhcImNhbGxNZXRob2RcIiwgbWV0aG9kLCAuLi5hcmdzKTtcbiAgICB9XG4gICAgdGhpcy4kZW1pdChtZXRob2QsIC4uLmFyZ3MpO1xuICAgIGlmICghaXNGdW5jdGlvbih0aGlzW21ldGhvZF0pKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgaWYgKGlzRGV2KSB7XG4gICAgICB0aGlzLl9fZGVidWcobWV0aG9kLCB0aGlzLCAuLi5hcmdzKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXNbbWV0aG9kXS5jYWxsKHRoaXMsIC4uLmFyZ3MpO1xuICB9XG4gIF9faGFzRXZlbnQoZXZlbnQpIHtcbiAgICBjb25zdCBldmVudEhhbmRsZXJzID0gdGhpcy5fX2V2ZW50SGFuZGxlcnMuZ2V0KGV2ZW50KTtcbiAgICByZXR1cm4gZXZlbnRIYW5kbGVycyAmJiBldmVudEhhbmRsZXJzLnNpemUgPiAwO1xuICB9XG4gICRtb3VudCgpIHtcbiAgICBpZiAodGhpcy4kaXNNb3VudGVkKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgdGhpcy4kZW1pdChcImJlZm9yZS1tb3VudGVkXCIpO1xuICAgIHRoaXMuJGlzTW91bnRlZCA9IHRydWU7XG4gICAgaWYgKGlzRGV2KSB7XG4gICAgICB0aGlzLl9fZGVidWcoXCIkbW91bnRcIik7XG4gICAgfVxuICAgIHRoaXMuJGNoaWxkcmVuLnJlZ2lzdGVyQWxsKCk7XG4gICAgdGhpcy4kcmVmcy5yZWdpc3RlckFsbCgpO1xuICAgIHRoaXMuX19ldmVudHMuYmluZFJvb3RFbGVtZW50KCk7XG4gICAgdGhpcy4kc2VydmljZXMuZW5hYmxlQWxsKCk7XG4gICAgdGhpcy4kY2hpbGRyZW4ubW91bnRBbGwoKTtcbiAgICB0aGlzLl9fY2FsbE1ldGhvZChcIm1vdW50ZWRcIik7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgJHVwZGF0ZSgpIHtcbiAgICBpZiAoaXNEZXYpIHtcbiAgICAgIHRoaXMuX19kZWJ1ZyhcIiR1cGRhdGVcIik7XG4gICAgfVxuICAgIHRoaXMuJHJlZnMudW5yZWdpc3RlckFsbCgpO1xuICAgIHRoaXMuJHNlcnZpY2VzLmRpc2FibGVBbGwoKTtcbiAgICB0aGlzLiRjaGlsZHJlbi5yZWdpc3RlckFsbCgpO1xuICAgIHRoaXMuJHJlZnMucmVnaXN0ZXJBbGwoKTtcbiAgICB0aGlzLiRzZXJ2aWNlcy5lbmFibGVBbGwoKTtcbiAgICB0aGlzLiRjaGlsZHJlbi51cGRhdGVBbGwoKTtcbiAgICB0aGlzLl9fY2FsbE1ldGhvZChcInVwZGF0ZWRcIik7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgJGRlc3Ryb3koKSB7XG4gICAgaWYgKCF0aGlzLiRpc01vdW50ZWQpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICB0aGlzLiRpc01vdW50ZWQgPSBmYWxzZTtcbiAgICBpZiAoaXNEZXYpIHtcbiAgICAgIHRoaXMuX19kZWJ1ZyhcIiRkZXN0cm95XCIpO1xuICAgIH1cbiAgICB0aGlzLl9fZXZlbnRzLnVuYmluZFJvb3RFbGVtZW50KCk7XG4gICAgdGhpcy4kcmVmcy51bnJlZ2lzdGVyQWxsKCk7XG4gICAgdGhpcy4kc2VydmljZXMuZGlzYWJsZUFsbCgpO1xuICAgIHRoaXMuJGNoaWxkcmVuLmRlc3Ryb3lBbGwoKTtcbiAgICB0aGlzLl9fY2FsbE1ldGhvZChcImRlc3Ryb3llZFwiKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICAkdGVybWluYXRlKCkge1xuICAgIGlmIChpc0Rldikge1xuICAgICAgdGhpcy5fX2RlYnVnKFwiJHRlcm1pbmF0ZVwiKTtcbiAgICB9XG4gICAgdGhpcy4kZGVzdHJveSgpO1xuICAgIHRoaXMuX19jYWxsTWV0aG9kKFwidGVybWluYXRlZFwiKTtcbiAgICB0aGlzLiRlbC5fX2Jhc2VfXy5zZXQodGhpcy5fX2N0b3IsIFwidGVybWluYXRlZFwiKTtcbiAgfVxuICBfX2FkZEVtaXRzKGV2ZW50KSB7XG4gICAgY29uc3QgY3RvciA9IHRoaXMuX19jdG9yO1xuICAgIGlmIChpc0FycmF5KGN0b3IuY29uZmlnLmVtaXRzKSkge1xuICAgICAgY3Rvci5jb25maWcuZW1pdHMucHVzaChldmVudCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGN0b3IuY29uZmlnLmVtaXRzID0gW2V2ZW50XTtcbiAgICB9XG4gIH1cbiAgX19yZW1vdmVFbWl0cyhldmVudCkge1xuICAgIGNvbnN0IGN0b3IgPSB0aGlzLl9fY3RvcjtcbiAgICBjb25zdCBpbmRleCA9IGN0b3IuY29uZmlnLmVtaXRzLmluZGV4T2YoZXZlbnQpO1xuICAgIGN0b3IuY29uZmlnLmVtaXRzLnNwbGljZShpbmRleCwgMSk7XG4gIH1cbiAgZ2V0IF9fY3RvcigpIHtcbiAgICByZXR1cm4gdGhpcy5jb25zdHJ1Y3RvcjtcbiAgfVxuICAkb24oZXZlbnQsIGxpc3RlbmVyLCBvcHRpb25zKSB7XG4gICAgaWYgKGlzRGV2KSB7XG4gICAgICB0aGlzLl9fZGVidWcoXCIkb25cIiwgZXZlbnQsIGxpc3RlbmVyLCBvcHRpb25zKTtcbiAgICB9XG4gICAgbGV0IHNldCA9IHRoaXMuX19ldmVudEhhbmRsZXJzLmdldChldmVudCk7XG4gICAgaWYgKCFzZXQpIHtcbiAgICAgIHNldCA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KCk7XG4gICAgICB0aGlzLl9fZXZlbnRIYW5kbGVycy5zZXQoZXZlbnQsIHNldCk7XG4gICAgfVxuICAgIHNldC5hZGQobGlzdGVuZXIpO1xuICAgIGNvbnN0IHRhcmdldCA9IGdldEV2ZW50VGFyZ2V0KHRoaXMsIGV2ZW50LCB0aGlzLl9fY29uZmlnKTtcbiAgICB0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgbGlzdGVuZXIsIG9wdGlvbnMpO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICB0aGlzLiRvZmYoZXZlbnQsIGxpc3RlbmVyLCBvcHRpb25zKTtcbiAgICB9O1xuICB9XG4gICRvZmYoZXZlbnQsIGxpc3RlbmVyLCBvcHRpb25zKSB7XG4gICAgaWYgKGlzRGV2KSB7XG4gICAgICB0aGlzLl9fZGVidWcoXCIkb2ZmXCIsIGV2ZW50LCBsaXN0ZW5lcik7XG4gICAgfVxuICAgIHRoaXMuX19ldmVudEhhbmRsZXJzLmdldChldmVudCkuZGVsZXRlKGxpc3RlbmVyKTtcbiAgICBjb25zdCB0YXJnZXQgPSBnZXRFdmVudFRhcmdldCh0aGlzLCBldmVudCwgdGhpcy5fX2NvbmZpZyk7XG4gICAgdGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQsIGxpc3RlbmVyLCBvcHRpb25zKTtcbiAgfVxuICAkZW1pdChldmVudCwgLi4uYXJncykge1xuICAgIGlmIChpc0Rldikge1xuICAgICAgdGhpcy5fX2RlYnVnKFwiJGVtaXRcIiwgZXZlbnQsIGFyZ3MpO1xuICAgIH1cbiAgICB0aGlzLmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KGV2ZW50LCB7IGRldGFpbDogYXJncyB9KSk7XG4gIH1cbiAgc3RhdGljICRmYWN0b3J5KG5hbWVPclNlbGVjdG9yKSB7XG4gICAgaWYgKGlzRGV2ICYmICFuYW1lT3JTZWxlY3Rvcikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhlICRmYWN0b3J5IG1ldGhvZCByZXF1aXJlcyBhIGNvbXBvbmVudFxcdTIwMTlzIG5hbWUgb3Igc2VsZWN0b3IgdG8gYmUgc3BlY2lmaWVkLlwiKTtcbiAgICB9XG4gICAgcmV0dXJuIGdldENvbXBvbmVudEVsZW1lbnRzKG5hbWVPclNlbGVjdG9yKS5tYXAoKGVsKSA9PiBuZXcgdGhpcyhlbCkuJG1vdW50KCkpO1xuICB9XG59XG5fX3B1YmxpY0ZpZWxkKEJhc2UsIFwiJGlzQmFzZVwiLCB0cnVlKTtcbl9fcHVibGljRmllbGQoQmFzZSwgXCJjb25maWdcIiwge1xuICBuYW1lOiBcIkJhc2VcIixcbiAgZW1pdHM6IFtcbiAgICBcImJlZm9yZS1tb3VudGVkXCIsXG4gICAgXCJtb3VudGVkXCIsXG4gICAgXCJ1cGRhdGVkXCIsXG4gICAgXCJkZXN0cm95ZWRcIixcbiAgICBcInRlcm1pbmF0ZWRcIixcbiAgICBcInRpY2tlZFwiLFxuICAgIFwic2Nyb2xsZWRcIixcbiAgICBcInJlc2l6ZWRcIixcbiAgICBcIm1vdmVkXCIsXG4gICAgXCJsb2FkZWRcIixcbiAgICBcImtleWVkXCJcbiAgXVxufSk7XG5leHBvcnQge1xuICBCYXNlIGFzIGRlZmF1bHRcbn07XG4iLCJ2YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZGVmTm9ybWFsUHJvcCA9IChvYmosIGtleSwgdmFsdWUpID0+IGtleSBpbiBvYmogPyBfX2RlZlByb3Aob2JqLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSwgdmFsdWUgfSkgOiBvYmpba2V5XSA9IHZhbHVlO1xudmFyIF9fcHVibGljRmllbGQgPSAob2JqLCBrZXksIHZhbHVlKSA9PiB7XG4gIF9fZGVmTm9ybWFsUHJvcChvYmosIHR5cGVvZiBrZXkgIT09IFwic3ltYm9sXCIgPyBrZXkgKyBcIlwiIDoga2V5LCB2YWx1ZSk7XG4gIHJldHVybiB2YWx1ZTtcbn07XG5jbGFzcyBBYnN0cmFjdE1hbmFnZXIge1xuICBjb25zdHJ1Y3RvcihiYXNlKSB7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcIl9fYmFzZVwiKTtcbiAgICB0aGlzLl9fYmFzZSA9IGJhc2U7XG4gICAgdGhpcy5fX2hpZGVQcm9wZXJ0aWVzKFtcIl9fYmFzZVwiXSk7XG4gIH1cbiAgZ2V0IF9fZWxlbWVudCgpIHtcbiAgICByZXR1cm4gdGhpcy5fX2Jhc2UuJGVsO1xuICB9XG4gIGdldCBfX2NvbmZpZygpIHtcbiAgICByZXR1cm4gdGhpcy5fX2Jhc2UuX19jb25maWc7XG4gIH1cbiAgZ2V0IF9fZXZlbnRzTWFuYWdlcigpIHtcbiAgICByZXR1cm4gdGhpcy5fX2Jhc2UuX19ldmVudHM7XG4gIH1cbiAgX19oaWRlUHJvcGVydGllcyhwcm9wZXJ0aWVzKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGhpcywgT2JqZWN0LmZyb21FbnRyaWVzKHByb3BlcnRpZXMubWFwKChwcm9wZXJ0eSkgPT4gW1xuICAgICAgcHJvcGVydHksXG4gICAgICB7XG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICB3cml0YWJsZTogZmFsc2UsXG4gICAgICAgIHZhbHVlOiB0aGlzW3Byb3BlcnR5XVxuICAgICAgfVxuICAgIF0pKSk7XG4gIH1cbn1cbmV4cG9ydCB7XG4gIEFic3RyYWN0TWFuYWdlciBhcyBkZWZhdWx0XG59O1xuIiwidmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2RlZk5vcm1hbFByb3AgPSAob2JqLCBrZXksIHZhbHVlKSA9PiBrZXkgaW4gb2JqID8gX19kZWZQcm9wKG9iaiwga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUsIHZhbHVlIH0pIDogb2JqW2tleV0gPSB2YWx1ZTtcbnZhciBfX3B1YmxpY0ZpZWxkID0gKG9iaiwga2V5LCB2YWx1ZSkgPT4ge1xuICBfX2RlZk5vcm1hbFByb3Aob2JqLCB0eXBlb2Yga2V5ICE9PSBcInN5bWJvbFwiID8ga2V5ICsgXCJcIiA6IGtleSwgdmFsdWUpO1xuICByZXR1cm4gdmFsdWU7XG59O1xuaW1wb3J0IEFic3RyYWN0TWFuYWdlciBmcm9tIFwiLi9BYnN0cmFjdE1hbmFnZXIuanNcIjtcbmltcG9ydCB7IGdldENvbXBvbmVudEVsZW1lbnRzIH0gZnJvbSBcIi4uL3V0aWxzLmpzXCI7XG5mdW5jdGlvbiBfX2dldENoaWxkKHRoYXQsIGVsLCBDb21wb25lbnRDbGFzcywgbmFtZSkge1xuICBjb25zdCBhc3luY0NvbXBvbmVudFByb21pc2UgPSB0aGF0Ll9fYXN5bmNDb21wb25lbnRQcm9taXNlcy5nZXQoQ29tcG9uZW50Q2xhc3MpO1xuICBpZiAoXCIkaXNCYXNlXCIgaW4gQ29tcG9uZW50Q2xhc3MgfHwgYXN5bmNDb21wb25lbnRQcm9taXNlICYmIGFzeW5jQ29tcG9uZW50UHJvbWlzZS5zdGF0dXMgPT09IFwicmVzb2x2ZWRcIikge1xuICAgIGxldCBjdG9yID0gQ29tcG9uZW50Q2xhc3M7XG4gICAgaWYgKGFzeW5jQ29tcG9uZW50UHJvbWlzZSkge1xuICAgICAgY3RvciA9IGFzeW5jQ29tcG9uZW50UHJvbWlzZS5jdG9yO1xuICAgIH1cbiAgICBpZiAoZWwuX19iYXNlX18gJiYgZWwuX19iYXNlX18uaGFzKGN0b3IpKSB7XG4gICAgICByZXR1cm4gZWwuX19iYXNlX18uZ2V0KGN0b3IpO1xuICAgIH1cbiAgICBjb25zdCBjaGlsZCA9IG5ldyBjdG9yKGVsKTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY2hpbGQsIFwiJHBhcmVudFwiLCB7IGdldDogKCkgPT4gdGhhdC5fX2Jhc2UgfSk7XG4gICAgcmV0dXJuIGNoaWxkO1xuICB9XG4gIGNvbnN0IHByb21pc2UgPSBhc3luY0NvbXBvbmVudFByb21pc2UgPyBhc3luY0NvbXBvbmVudFByb21pc2UucHJvbWlzZSA6IENvbXBvbmVudENsYXNzKHRoYXQuX19iYXNlKTtcbiAgaWYgKCFhc3luY0NvbXBvbmVudFByb21pc2UpIHtcbiAgICB0aGF0Ll9fYXN5bmNDb21wb25lbnRQcm9taXNlcy5zZXQoQ29tcG9uZW50Q2xhc3MsIHtcbiAgICAgIHByb21pc2UsXG4gICAgICBzdGF0dXM6IFwicGVuZGluZ1wiLFxuICAgICAgY3Rvcjogdm9pZCAwXG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIHByb21pc2UudGhlbigobW9kdWxlKSA9PiB7XG4gICAgdmFyIF9hO1xuICAgIGNvbnN0IGN0b3IgPSAoX2EgPSBtb2R1bGUuZGVmYXVsdCkgIT0gbnVsbCA/IF9hIDogbW9kdWxlO1xuICAgIHRoYXQuX19hc3luY0NvbXBvbmVudFByb21pc2VzLnNldChDb21wb25lbnRDbGFzcywge1xuICAgICAgcHJvbWlzZSxcbiAgICAgIHN0YXR1czogXCJyZXNvbHZlZFwiLFxuICAgICAgY3RvclxuICAgIH0pO1xuICAgIHJldHVybiBfX2dldENoaWxkKHRoYXQsIGVsLCBjdG9yLCBuYW1lKTtcbiAgfSk7XG59XG5mdW5jdGlvbiBfX3JlZ2lzdGVyKHRoYXQsIG5hbWUsIGNvbXBvbmVudCkge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhhdCwgbmFtZSwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGdldDogKCkgPT4ge1xuICAgICAgY29uc3QgZWxlbWVudHMgPSBnZXRDb21wb25lbnRFbGVtZW50cyhuYW1lLCB0aGF0Ll9fZWxlbWVudCk7XG4gICAgICBpZiAoZWxlbWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBlbGVtZW50cy5tYXAoKGVsZW1lbnQpID0+IF9fZ2V0Q2hpbGQodGhhdCwgZWxlbWVudCwgY29tcG9uZW50LCBuYW1lKSkuZmlsdGVyKChpbnN0YW5jZSkgPT4gaW5zdGFuY2UgIT09IFwidGVybWluYXRlZFwiKTtcbiAgICB9XG4gIH0pO1xufVxuZnVuY3Rpb24gX190cmlnZ2VySG9vayh0aGF0LCBob29rLCBpbnN0YW5jZSwgbmFtZSkge1xuICBpZiAoaG9vayA9PT0gXCIkdXBkYXRlXCIgJiYgIWluc3RhbmNlLiRpc01vdW50ZWQpIHtcbiAgICBob29rID0gXCIkbW91bnRcIjtcbiAgfVxuICBpZiAoaG9vayA9PT0gXCIkdXBkYXRlXCIgfHwgaG9vayA9PT0gXCIkZGVzdHJveVwiKSB7XG4gICAgdGhhdC5fX2V2ZW50c01hbmFnZXIudW5iaW5kQ2hpbGQobmFtZSwgaW5zdGFuY2UpO1xuICB9XG4gIGlmIChob29rID09PSBcIiR1cGRhdGVcIiB8fCBob29rID09PSBcIiRtb3VudFwiKSB7XG4gICAgdGhhdC5fX2V2ZW50c01hbmFnZXIuYmluZENoaWxkKG5hbWUsIGluc3RhbmNlKTtcbiAgfVxuICBpbnN0YW5jZVtob29rXSgpO1xufVxuZnVuY3Rpb24gX190cmlnZ2VySG9va0ZvckFsbCh0aGF0LCBob29rKSB7XG4gIHRoYXQucmVnaXN0ZXJlZE5hbWVzLmZvckVhY2goKG5hbWUpID0+IHtcbiAgICB0aGF0W25hbWVdLmZvckVhY2goKGluc3RhbmNlKSA9PiB7XG4gICAgICBpZiAoaW5zdGFuY2UgaW5zdGFuY2VvZiBQcm9taXNlKSB7XG4gICAgICAgIGluc3RhbmNlLnRoZW4oKHJlc29sdmVkSW5zdGFuY2UpID0+IF9fdHJpZ2dlckhvb2sodGhhdCwgaG9vaywgcmVzb2x2ZWRJbnN0YW5jZSwgbmFtZSkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX190cmlnZ2VySG9vayh0aGF0LCBob29rLCBpbnN0YW5jZSwgbmFtZSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xufVxuY2xhc3MgQ2hpbGRyZW5NYW5hZ2VyIGV4dGVuZHMgQWJzdHJhY3RNYW5hZ2VyIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwiX19hc3luY0NvbXBvbmVudFByb21pc2VzXCIsIC8qIEBfX1BVUkVfXyAqLyBuZXcgV2Vha01hcCgpKTtcbiAgfVxuICBnZXQgcmVnaXN0ZXJlZE5hbWVzKCkge1xuICAgIHJldHVybiBPYmplY3Qua2V5cyh0aGlzKS5maWx0ZXIoKGtleSkgPT4gIWtleS5zdGFydHNXaXRoKFwiX19cIikpO1xuICB9XG4gIHJlZ2lzdGVyQWxsKCkge1xuICAgIE9iamVjdC5lbnRyaWVzKHRoaXMuX19jb25maWcuY29tcG9uZW50cykuZm9yRWFjaCgoW25hbWUsIGNvbXBvbmVudF0pID0+IF9fcmVnaXN0ZXIodGhpcywgbmFtZSwgY29tcG9uZW50KSk7XG4gIH1cbiAgbW91bnRBbGwoKSB7XG4gICAgX190cmlnZ2VySG9va0ZvckFsbCh0aGlzLCBcIiRtb3VudFwiKTtcbiAgfVxuICB1cGRhdGVBbGwoKSB7XG4gICAgX190cmlnZ2VySG9va0ZvckFsbCh0aGlzLCBcIiR1cGRhdGVcIik7XG4gIH1cbiAgZGVzdHJveUFsbCgpIHtcbiAgICBfX3RyaWdnZXJIb29rRm9yQWxsKHRoaXMsIFwiJGRlc3Ryb3lcIik7XG4gIH1cbn1cbmV4cG9ydCB7XG4gIENoaWxkcmVuTWFuYWdlciBhcyBkZWZhdWx0XG59O1xuIiwidmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2RlZk5vcm1hbFByb3AgPSAob2JqLCBrZXksIHZhbHVlKSA9PiBrZXkgaW4gb2JqID8gX19kZWZQcm9wKG9iaiwga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUsIHZhbHVlIH0pIDogb2JqW2tleV0gPSB2YWx1ZTtcbnZhciBfX3B1YmxpY0ZpZWxkID0gKG9iaiwga2V5LCB2YWx1ZSkgPT4ge1xuICBfX2RlZk5vcm1hbFByb3Aob2JqLCB0eXBlb2Yga2V5ICE9PSBcInN5bWJvbFwiID8ga2V5ICsgXCJcIiA6IGtleSwgdmFsdWUpO1xuICByZXR1cm4gdmFsdWU7XG59O1xuaW1wb3J0IGdldEFsbFByb3BlcnRpZXMgZnJvbSBcIi4uLy4uL3V0aWxzL29iamVjdC9nZXRBbGxQcm9wZXJ0aWVzLmpzXCI7XG5pbXBvcnQgeyBpc0FycmF5IH0gZnJvbSBcIi4uLy4uL3V0aWxzL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBnZXRFdmVudFRhcmdldCwgZXZlbnRJc05hdGl2ZSwgZXZlbnRJc0RlZmluZWRJbkNvbmZpZyB9IGZyb20gXCIuLi91dGlscy5qc1wiO1xuaW1wb3J0IEFic3RyYWN0TWFuYWdlciBmcm9tIFwiLi9BYnN0cmFjdE1hbmFnZXIuanNcIjtcbmltcG9ydCB7IG5vcm1hbGl6ZVJlZk5hbWUgfSBmcm9tIFwiLi9SZWZzTWFuYWdlci5qc1wiO1xuY29uc3QgbmFtZXMgPSAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpO1xuZnVuY3Rpb24gbm9ybWFsaXplTmFtZShuYW1lKSB7XG4gIGlmICghbmFtZXMuaGFzKG5hbWUpKSB7XG4gICAgbmFtZXMuc2V0KG5hbWUsIG5hbWUucmVwbGFjZSgvW0EtWl0oW0EtWl0uKikvZywgKGMpID0+IGMudG9Mb3dlckNhc2UoKSkucmVwbGFjZSgvW15hLXpBLVpcXGRcXHM6XS9nLCBcIiBcIikucmVwbGFjZSgvKF5cXHd8XFxzK1xcdykvZywgKGMpID0+IGMudHJpbSgpLnRvVXBwZXJDYXNlKCkpLnRyaW0oKSk7XG4gIH1cbiAgcmV0dXJuIG5hbWVzLmdldChuYW1lKTtcbn1cbmNvbnN0IGV2ZW50TmFtZXMgPSAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpO1xuZnVuY3Rpb24gbm9ybWFsaXplRXZlbnROYW1lKG5hbWUpIHtcbiAgaWYgKCFldmVudE5hbWVzLmhhcyhuYW1lKSkge1xuICAgIGV2ZW50TmFtZXMuc2V0KG5hbWUsIG5hbWUucmVwbGFjZSgvW0EtWl0vZywgKGMpID0+IGAtJHtjLnRvTG93ZXJDYXNlKCl9YCkucmVwbGFjZSgvXi0vLCBcIlwiKSk7XG4gIH1cbiAgcmV0dXJuIGV2ZW50TmFtZXMuZ2V0KG5hbWUpO1xufVxuY29uc3QgcmVnZXhlcyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCk7XG5mdW5jdGlvbiBnZXRSZWdleChyZWdleCkge1xuICBpZiAoIXJlZ2V4ZXMuaGFzKHJlZ2V4KSkge1xuICAgIHJlZ2V4ZXMuc2V0KHJlZ2V4LCBuZXcgUmVnRXhwKHJlZ2V4KSk7XG4gIH1cbiAgcmV0dXJuIHJlZ2V4ZXMuZ2V0KHJlZ2V4KTtcbn1cbmZ1bmN0aW9uIGdldEV2ZW50TmFtZUJ5TWV0aG9kKG1ldGhvZCwgbmFtZSA9IFwiXCIpIHtcbiAgY29uc3QgcmVnZXggPSBnZXRSZWdleChgXm9uJHtub3JtYWxpemVOYW1lKG5hbWUpfShbQS1aXS4qKSRgKTtcbiAgY29uc3QgWywgZXZlbnRdID0gbWV0aG9kLm1hdGNoKHJlZ2V4KTtcbiAgcmV0dXJuIG5vcm1hbGl6ZUV2ZW50TmFtZShldmVudCk7XG59XG5mdW5jdGlvbiBnZXRFdmVudE1ldGhvZHNCeU5hbWUodGhhdCwgbmFtZSA9IFwiXCIpIHtcbiAgY29uc3QgcmVnZXggPSBnZXRSZWdleChgXm9uJHtub3JtYWxpemVOYW1lKG5hbWUpfVtBLVpdLiokYCk7XG4gIGNvbnN0IGtleSA9IHJlZ2V4LnRvU3RyaW5nKCk7XG4gIGxldCBtZXRob2RzID0gdGhhdC5fX21ldGhvZHNDYWNoZS5nZXQoa2V5KTtcbiAgaWYgKCFtZXRob2RzKSB7XG4gICAgbWV0aG9kcyA9IEFycmF5LmZyb20oZ2V0QWxsUHJvcGVydGllcyh0aGF0Ll9fYmFzZSwgW10sIChtZXRob2QpID0+IHJlZ2V4LnRlc3QobWV0aG9kKSkucmVkdWNlKChzZXQsIFttZXRob2RdKSA9PiBzZXQuYWRkKG1ldGhvZCksIC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KCkpKTtcbiAgICB0aGF0Ll9fbWV0aG9kc0NhY2hlLnNldChrZXksIG1ldGhvZHMpO1xuICB9XG4gIHJldHVybiBtZXRob2RzO1xufVxuZnVuY3Rpb24gbWFuYWdlUmVmKHRoYXQsIG5hbWUsIGVsZW1lbnRzLCBtb2RlID0gXCJhZGRcIikge1xuICBjb25zdCBhY3Rpb24gPSBgJHttb2RlfUV2ZW50TGlzdGVuZXJgO1xuICBjb25zdCBtZXRob2RzID0gZ2V0RXZlbnRNZXRob2RzQnlOYW1lKHRoYXQsIG5hbWUpO1xuICBtZXRob2RzLmZvckVhY2goKG1ldGhvZCkgPT4ge1xuICAgIGNvbnN0IGV2ZW50ID0gZ2V0RXZlbnROYW1lQnlNZXRob2QobWV0aG9kLCBuYW1lKTtcbiAgICBlbGVtZW50cy5mb3JFYWNoKChlbGVtZW50KSA9PiBlbGVtZW50W2FjdGlvbl0oZXZlbnQsIHRoYXQuX19yZWZzSGFuZGxlcikpO1xuICB9KTtcbn1cbmZ1bmN0aW9uIG1hbmFnZUNoaWxkKHRoYXQsIG5hbWUsIGluc3RhbmNlLCBtb2RlID0gXCJhZGRcIikge1xuICBjb25zdCBhY3Rpb24gPSBtb2RlID09PSBcImFkZFwiID8gXCIkb25cIiA6IFwiJG9mZlwiO1xuICBjb25zdCBtZXRob2RzID0gZ2V0RXZlbnRNZXRob2RzQnlOYW1lKHRoYXQsIG5hbWUpO1xuICBtZXRob2RzLmZvckVhY2goKG1ldGhvZCkgPT4ge1xuICAgIGNvbnN0IGV2ZW50ID0gZ2V0RXZlbnROYW1lQnlNZXRob2QobWV0aG9kLCBuYW1lKTtcbiAgICBpbnN0YW5jZVthY3Rpb25dKGV2ZW50LCB0aGF0Ll9fY2hpbGRyZW5IYW5kbGVyKTtcbiAgfSk7XG59XG5mdW5jdGlvbiBtYW5hZ2VSb290RWxlbWVudCh0aGF0LCBtb2RlID0gXCJhZGRcIikge1xuICBjb25zdCBtb2RlTWV0aG9kID0gYCR7bW9kZX1FdmVudExpc3RlbmVyYDtcbiAgY29uc3QgbWV0aG9kcyA9IGdldEV2ZW50TWV0aG9kc0J5TmFtZSh0aGF0KTtcbiAgY29uc3QgeyBfX2Jhc2U6IGJhc2UsIF9fY29uZmlnOiBjb25maWcgfSA9IHRoYXQ7XG4gIG1ldGhvZHMubWFwKChtZXRob2QpID0+IGdldEV2ZW50TmFtZUJ5TWV0aG9kKG1ldGhvZCkpLmZpbHRlcigoZXZlbnQpID0+IGV2ZW50SXNEZWZpbmVkSW5Db25maWcoZXZlbnQsIGNvbmZpZykgfHwgZXZlbnRJc05hdGl2ZShldmVudCwgYmFzZS4kZWwpKS5mb3JFYWNoKChldmVudCkgPT4ge1xuICAgIGNvbnN0IHRhcmdldCA9IGdldEV2ZW50VGFyZ2V0KGJhc2UsIGV2ZW50LCBjb25maWcpO1xuICAgIHRhcmdldFttb2RlTWV0aG9kXShldmVudCwgdGhhdC5fX3Jvb3RFbGVtZW50SGFuZGxlcik7XG4gIH0pO1xufVxuY2xhc3MgRXZlbnRzTWFuYWdlciBleHRlbmRzIEFic3RyYWN0TWFuYWdlciB7XG4gIGNvbnN0cnVjdG9yKGJhc2UpIHtcbiAgICBzdXBlcihiYXNlKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwiX19tZXRob2RzQ2FjaGVcIiwgLyogQF9fUFVSRV9fICovIG5ldyBNYXAoKSk7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcIl9fcm9vdEVsZW1lbnRIYW5kbGVyXCIsIHtcbiAgICAgIGhhbmRsZUV2ZW50OiAoZXZlbnQpID0+IHtcbiAgICAgICAgY29uc3Qgbm9ybWFsaXplZEV2ZW50TmFtZSA9IG5vcm1hbGl6ZU5hbWUoZXZlbnQudHlwZSk7XG4gICAgICAgIGNvbnN0IG1ldGhvZCA9IGBvbiR7bm9ybWFsaXplZEV2ZW50TmFtZX1gO1xuICAgICAgICBpZiAoZXZlbnQgaW5zdGFuY2VvZiBDdXN0b21FdmVudCAmJiBpc0FycmF5KGV2ZW50LmRldGFpbCkgJiYgZXZlbnQuZGV0YWlsLmxlbmd0aCkge1xuICAgICAgICAgIHRoaXMuX19iYXNlW21ldGhvZF0oLi4uZXZlbnQuZGV0YWlsLCBldmVudCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5fX2Jhc2VbbWV0aG9kXShldmVudCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwiX19yZWZzSGFuZGxlclwiLCB7XG4gICAgICBoYW5kbGVFdmVudDogKGV2ZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IHJlZiA9IGV2ZW50LmN1cnJlbnRUYXJnZXQ7XG4gICAgICAgIGNvbnN0IHJlZk5hbWUgPSBub3JtYWxpemVSZWZOYW1lKHJlZi5kYXRhc2V0LnJlZik7XG4gICAgICAgIGNvbnN0IG5vcm1hbGl6ZWRSZWZOYW1lID0gbm9ybWFsaXplTmFtZShyZWZOYW1lKTtcbiAgICAgICAgY29uc3Qgbm9ybWFsaXplZEV2ZW50TmFtZSA9IG5vcm1hbGl6ZU5hbWUoZXZlbnQudHlwZSk7XG4gICAgICAgIGNvbnN0IG1ldGhvZCA9IGBvbiR7bm9ybWFsaXplZFJlZk5hbWV9JHtub3JtYWxpemVkRXZlbnROYW1lfWA7XG4gICAgICAgIGxldCBpbmRleCA9IDA7XG4gICAgICAgIGlmIChpc0FycmF5KHRoaXMuX19iYXNlLiRyZWZzW3JlZk5hbWVdKSkge1xuICAgICAgICAgIGluZGV4ID0gdGhpcy5fX2Jhc2UuJHJlZnNbcmVmTmFtZV0uaW5kZXhPZihyZWYpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX19iYXNlW21ldGhvZF0oZXZlbnQsIGluZGV4KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwiX19jaGlsZHJlbkhhbmRsZXJcIiwge1xuICAgICAgaGFuZGxlRXZlbnQ6IChldmVudCkgPT4ge1xuICAgICAgICBjb25zdCBjaGlsZHJlbk1hbmFnZXIgPSB0aGlzLl9fYmFzZS4kY2hpbGRyZW47XG4gICAgICAgIGNvbnN0IHsgbmFtZSwgY2hpbGQ6IHJlc29sdmVkQ2hpbGQgfSA9IGNoaWxkcmVuTWFuYWdlci5yZWdpc3RlcmVkTmFtZXMubWFwKChjaGlsZE5hbWUpID0+ICh7XG4gICAgICAgICAgbmFtZTogY2hpbGROYW1lLFxuICAgICAgICAgIGNoaWxkOiBjaGlsZHJlbk1hbmFnZXJbY2hpbGROYW1lXS5maW5kKChpbnN0YW5jZSkgPT4gaW5zdGFuY2UgPT09IGV2ZW50LmN1cnJlbnRUYXJnZXQgfHwgaW5zdGFuY2UuJGVsID09PSBldmVudC5jdXJyZW50VGFyZ2V0KVxuICAgICAgICB9KSkuZmluZCgoeyBjaGlsZCB9KSA9PiBjaGlsZCk7XG4gICAgICAgIGNvbnN0IG5vcm1hbGl6ZWRDaGlsZE5hbWUgPSBub3JtYWxpemVOYW1lKG5hbWUpO1xuICAgICAgICBjb25zdCBub3JtYWxpemVkRXZlbnROYW1lID0gbm9ybWFsaXplTmFtZShldmVudC50eXBlKTtcbiAgICAgICAgY29uc3QgbWV0aG9kID0gYG9uJHtub3JtYWxpemVkQ2hpbGROYW1lfSR7bm9ybWFsaXplZEV2ZW50TmFtZX1gO1xuICAgICAgICBjb25zdCBpbmRleCA9IGNoaWxkcmVuTWFuYWdlcltuYW1lXS5pbmRleE9mKHJlc29sdmVkQ2hpbGQpO1xuICAgICAgICBjb25zdCBhcmdzID0gaXNBcnJheShldmVudC5kZXRhaWwpID8gZXZlbnQuZGV0YWlsIDogW107XG4gICAgICAgIHRoaXMuX19iYXNlW21ldGhvZF0oLi4uYXJncywgaW5kZXgsIGV2ZW50KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB0aGlzLl9faGlkZVByb3BlcnRpZXMoW1xuICAgICAgXCJfX21ldGhvZHNDYWNoZVwiLFxuICAgICAgXCJfX3Jvb3RFbGVtZW50SGFuZGxlclwiLFxuICAgICAgXCJfX3JlZnNIYW5kbGVyXCIsXG4gICAgICBcIl9fY2hpbGRyZW5IYW5kbGVyXCJcbiAgICBdKTtcbiAgfVxuICBiaW5kUmVmKG5hbWUsIGVsZW1lbnRzKSB7XG4gICAgbWFuYWdlUmVmKHRoaXMsIG5hbWUsIGVsZW1lbnRzKTtcbiAgfVxuICB1bmJpbmRSZWYobmFtZSwgZWxlbWVudHMpIHtcbiAgICBtYW5hZ2VSZWYodGhpcywgbmFtZSwgZWxlbWVudHMsIFwicmVtb3ZlXCIpO1xuICB9XG4gIGJpbmRDaGlsZChuYW1lLCBpbnN0YW5jZSkge1xuICAgIG1hbmFnZUNoaWxkKHRoaXMsIG5hbWUsIGluc3RhbmNlKTtcbiAgfVxuICB1bmJpbmRDaGlsZChuYW1lLCBpbnN0YW5jZSkge1xuICAgIG1hbmFnZUNoaWxkKHRoaXMsIG5hbWUsIGluc3RhbmNlLCBcInJlbW92ZVwiKTtcbiAgfVxuICBiaW5kUm9vdEVsZW1lbnQoKSB7XG4gICAgbWFuYWdlUm9vdEVsZW1lbnQodGhpcyk7XG4gIH1cbiAgdW5iaW5kUm9vdEVsZW1lbnQoKSB7XG4gICAgbWFuYWdlUm9vdEVsZW1lbnQodGhpcywgXCJyZW1vdmVcIik7XG4gIH1cbn1cbmV4cG9ydCB7XG4gIEV2ZW50c01hbmFnZXIgYXMgZGVmYXVsdCxcbiAgbm9ybWFsaXplRXZlbnROYW1lLFxuICBub3JtYWxpemVOYW1lXG59O1xuIiwidmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2RlZk5vcm1hbFByb3AgPSAob2JqLCBrZXksIHZhbHVlKSA9PiBrZXkgaW4gb2JqID8gX19kZWZQcm9wKG9iaiwga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUsIHZhbHVlIH0pIDogb2JqW2tleV0gPSB2YWx1ZTtcbnZhciBfX3B1YmxpY0ZpZWxkID0gKG9iaiwga2V5LCB2YWx1ZSkgPT4ge1xuICBfX2RlZk5vcm1hbFByb3Aob2JqLCB0eXBlb2Yga2V5ICE9PSBcInN5bWJvbFwiID8ga2V5ICsgXCJcIiA6IGtleSwgdmFsdWUpO1xuICByZXR1cm4gdmFsdWU7XG59O1xuaW1wb3J0IGRlZXBtZXJnZSBmcm9tIFwiZGVlcG1lcmdlXCI7XG5pbXBvcnQgQWJzdHJhY3RNYW5hZ2VyIGZyb20gXCIuL0Fic3RyYWN0TWFuYWdlci5qc1wiO1xuaW1wb3J0IHsgaXNEZXYsIGlzRnVuY3Rpb24sIGlzRGVmaW5lZCwgaXNCb29sZWFuLCBpc0FycmF5LCBpc09iamVjdCB9IGZyb20gXCIuLi8uLi91dGlscy9pbmRleC5qc1wiO1xuY29uc3QgdHlwZXMgPSAvKiBAX19QVVJFX18gKi8gbmV3IFNldChbU3RyaW5nLCBOdW1iZXIsIEJvb2xlYW4sIEFycmF5LCBPYmplY3RdKTtcbmNvbnN0IF9fZGVmYXVsdFZhbHVlcyA9IHtcbiAgU3RyaW5nOiBcIlwiLFxuICBOdW1iZXI6IDAsXG4gIEJvb2xlYW46IGZhbHNlLFxuICBBcnJheTogKCkgPT4gW10sXG4gIE9iamVjdDogKCkgPT4gKHt9KVxufTtcbmNvbnN0IF9fcHJvcGVydHlOYW1lQ2FjaGUgPSAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpO1xuZnVuY3Rpb24gX19nZXRQcm9wZXJ0eU5hbWUobmFtZSwgcHJlZml4ID0gXCJcIikge1xuICBjb25zdCBrZXkgPSBuYW1lICsgcHJlZml4O1xuICBpZiAoX19wcm9wZXJ0eU5hbWVDYWNoZS5oYXMoa2V5KSkge1xuICAgIHJldHVybiBfX3Byb3BlcnR5TmFtZUNhY2hlLmdldChrZXkpO1xuICB9XG4gIGNvbnN0IHByb3BlcnR5TmFtZSA9IGBvcHRpb24ke3ByZWZpeH0ke25hbWUucmVwbGFjZSgvXlxcdy8sIChjKSA9PiBjLnRvVXBwZXJDYXNlKCkpfWA7XG4gIF9fcHJvcGVydHlOYW1lQ2FjaGUuc2V0KGtleSwgcHJvcGVydHlOYW1lKTtcbiAgcmV0dXJuIHByb3BlcnR5TmFtZTtcbn1cbmZ1bmN0aW9uIF9fcmVnaXN0ZXIodGhhdCwgbmFtZSwgY29uZmlnKSB7XG4gIHZhciBfYTtcbiAgaWYgKCF0eXBlcy5oYXMoY29uZmlnLnR5cGUpKSB7XG4gICAgaWYgKGlzRGV2KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFRoZSBcIiR7bmFtZX1cIiBvcHRpb24gaGFzIGFuIGludmFsaWQgdHlwZS4gVGhlIGFsbG93ZWQgdHlwZXMgYXJlOiBTdHJpbmcsIE51bWJlciwgQm9vbGVhbiwgQXJyYXkgYW5kIE9iamVjdC5gKTtcbiAgICB9XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbmZpZy5kZWZhdWx0ID0gKF9hID0gY29uZmlnLmRlZmF1bHQpICE9IG51bGwgPyBfYSA6IF9fZGVmYXVsdFZhbHVlc1tjb25maWcudHlwZS5uYW1lXTtcbiAgaWYgKChjb25maWcudHlwZSA9PT0gQXJyYXkgfHwgY29uZmlnLnR5cGUgPT09IE9iamVjdCkgJiYgIWlzRnVuY3Rpb24oY29uZmlnLmRlZmF1bHQpKSB7XG4gICAgaWYgKGlzRGV2KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFRoZSBkZWZhdWx0IHZhbHVlIGZvciBvcHRpb25zIG9mIHR5cGUgXCIke2NvbmZpZy50eXBlLm5hbWV9XCIgbXVzdCBiZSByZXR1cm5lZCBieSBhIGZ1bmN0aW9uLmApO1xuICAgIH1cbiAgICByZXR1cm47XG4gIH1cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoYXQsIG5hbWUsIHtcbiAgICBnZXQ6ICgpID0+IHtcbiAgICAgIHJldHVybiB0aGF0LmdldChuYW1lLCBjb25maWcpO1xuICAgIH0sXG4gICAgc2V0OiAodmFsdWUpID0+IHtcbiAgICAgIHRoYXQuc2V0KG5hbWUsIHZhbHVlLCBjb25maWcpO1xuICAgIH0sXG4gICAgZW51bWVyYWJsZTogdHJ1ZVxuICB9KTtcbn1cbmNsYXNzIE9wdGlvbnNNYW5hZ2VyIGV4dGVuZHMgQWJzdHJhY3RNYW5hZ2VyIHtcbiAgY29uc3RydWN0b3IoYmFzZSkge1xuICAgIHZhciBfYSwgX2I7XG4gICAgc3VwZXIoYmFzZSk7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcIl9fdmFsdWVzXCIsIHt9KTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwibmFtZVwiLCBcIkJhc2VcIik7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcImRlYnVnXCIsIGZhbHNlKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwibG9nXCIsIGZhbHNlKTtcbiAgICB0aGlzLl9faGlkZVByb3BlcnRpZXMoW1wiX192YWx1ZXNcIiwgXCJfX2RlZmF1bHRWYWx1ZXNcIl0pO1xuICAgIGNvbnN0IHNjaGVtYSA9IHRoaXMuX19jb25maWcub3B0aW9ucyB8fCB7fTtcbiAgICB0aGlzLm5hbWUgPSB0aGlzLl9fY29uZmlnLm5hbWU7XG4gICAgc2NoZW1hLmRlYnVnID0ge1xuICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgIGRlZmF1bHQ6IChfYSA9IHRoaXMuX19jb25maWcuZGVidWcpICE9IG51bGwgPyBfYSA6IGZhbHNlXG4gICAgfTtcbiAgICBzY2hlbWEubG9nID0ge1xuICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgIGRlZmF1bHQ6IChfYiA9IHRoaXMuX19jb25maWcubG9nKSAhPSBudWxsID8gX2IgOiBmYWxzZVxuICAgIH07XG4gICAgT2JqZWN0LmVudHJpZXMoc2NoZW1hKS5mb3JFYWNoKChbbmFtZSwgY29uZmlnXSkgPT4ge1xuICAgICAgX19yZWdpc3Rlcih0aGlzLCBuYW1lLCB0eXBlcy5oYXMoY29uZmlnKSA/IHsgdHlwZTogY29uZmlnIH0gOiBjb25maWcpO1xuICAgIH0pO1xuICB9XG4gIGdldChuYW1lLCBjb25maWcpIHtcbiAgICBjb25zdCB7IHR5cGUsIGRlZmF1bHQ6IGRlZmF1bHRWYWx1ZSB9ID0gY29uZmlnO1xuICAgIGNvbnN0IHByb3BlcnR5TmFtZSA9IF9fZ2V0UHJvcGVydHlOYW1lKG5hbWUpO1xuICAgIGNvbnN0IGhhc1Byb3BlcnR5ID0gaXNEZWZpbmVkKHRoaXMuX19lbGVtZW50LmRhdGFzZXRbcHJvcGVydHlOYW1lXSk7XG4gICAgaWYgKHR5cGUgPT09IEJvb2xlYW4pIHtcbiAgICAgIGlmIChkZWZhdWx0VmFsdWUpIHtcbiAgICAgICAgY29uc3QgbmVnYXRlZFByb3BlcnR5TmFtZSA9IF9fZ2V0UHJvcGVydHlOYW1lKG5hbWUsIFwiTm9cIik7XG4gICAgICAgIGNvbnN0IGhhc05lZ2F0ZWRQcm9wZXJ0eSA9IGlzRGVmaW5lZCh0aGlzLl9fZWxlbWVudC5kYXRhc2V0W25lZ2F0ZWRQcm9wZXJ0eU5hbWVdKTtcbiAgICAgICAgcmV0dXJuICFoYXNOZWdhdGVkUHJvcGVydHk7XG4gICAgICB9XG4gICAgICByZXR1cm4gaGFzUHJvcGVydHkgfHwgZGVmYXVsdFZhbHVlO1xuICAgIH1cbiAgICBjb25zdCB2YWx1ZSA9IHRoaXMuX19lbGVtZW50LmRhdGFzZXRbcHJvcGVydHlOYW1lXTtcbiAgICBpZiAodHlwZSA9PT0gTnVtYmVyKSB7XG4gICAgICByZXR1cm4gaGFzUHJvcGVydHkgPyBOdW1iZXIodmFsdWUpIDogZGVmYXVsdFZhbHVlO1xuICAgIH1cbiAgICBpZiAodHlwZSA9PT0gQXJyYXkgfHwgdHlwZSA9PT0gT2JqZWN0KSB7XG4gICAgICBjb25maWcgPSB0eXBlID09PSBBcnJheSA/IGNvbmZpZyA6IGNvbmZpZztcbiAgICAgIGlmICghdGhpcy5fX3ZhbHVlc1tuYW1lXSkge1xuICAgICAgICBsZXQgdmFsID0gaGFzUHJvcGVydHkgPyBKU09OLnBhcnNlKHZhbHVlKSA6IGNvbmZpZy5kZWZhdWx0KCk7XG4gICAgICAgIGlmIChpc0RlZmluZWQoY29uZmlnLm1lcmdlKSkge1xuICAgICAgICAgIHZhbCA9IGlzQm9vbGVhbihjb25maWcubWVyZ2UpID8gZGVlcG1lcmdlKGNvbmZpZy5kZWZhdWx0KCksIHZhbCkgOiBkZWVwbWVyZ2UoY29uZmlnLmRlZmF1bHQoKSwgdmFsLCBjb25maWcubWVyZ2UpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX192YWx1ZXNbbmFtZV0gPSB2YWw7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5fX3ZhbHVlc1tuYW1lXTtcbiAgICB9XG4gICAgcmV0dXJuIGhhc1Byb3BlcnR5ID8gdmFsdWUgOiBkZWZhdWx0VmFsdWU7XG4gIH1cbiAgc2V0KG5hbWUsIHZhbHVlLCBjb25maWcpIHtcbiAgICBjb25zdCB7IHR5cGUsIGRlZmF1bHQ6IGRlZmF1bHRWYWx1ZSB9ID0gY29uZmlnO1xuICAgIGNvbnN0IHByb3BlcnR5TmFtZSA9IF9fZ2V0UHJvcGVydHlOYW1lKG5hbWUpO1xuICAgIGlmICh2YWx1ZS5jb25zdHJ1Y3Rvci5uYW1lICE9PSB0eXBlLm5hbWUpIHtcbiAgICAgIGlmIChpc0Rldikge1xuICAgICAgICBjb25zdCB2YWwgPSBpc0FycmF5KHZhbHVlKSB8fCBpc09iamVjdCh2YWx1ZSkgPyBKU09OLnN0cmluZ2lmeSh2YWx1ZSkgOiB2YWx1ZTtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgVGhlIFwiJHt2YWx9XCIgdmFsdWUgZm9yIHRoZSBcIiR7bmFtZX1cIiBvcHRpb24gbXVzdCBiZSBvZiB0eXBlIFwiJHt0eXBlLm5hbWV9XCJgKTtcbiAgICAgIH1cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICBjYXNlIEJvb2xlYW46XG4gICAgICAgIGlmIChkZWZhdWx0VmFsdWUpIHtcbiAgICAgICAgICBjb25zdCBuZWdhdGVkUHJvcGVydHlOYW1lID0gX19nZXRQcm9wZXJ0eU5hbWUobmFtZSwgXCJOb1wiKTtcbiAgICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl9fZWxlbWVudC5kYXRhc2V0W25lZ2F0ZWRQcm9wZXJ0eU5hbWVdO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9fZWxlbWVudC5kYXRhc2V0W25lZ2F0ZWRQcm9wZXJ0eU5hbWVdID0gXCJcIjtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAodmFsdWUpIHtcbiAgICAgICAgICB0aGlzLl9fZWxlbWVudC5kYXRhc2V0W3Byb3BlcnR5TmFtZV0gPSBcIlwiO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRlbGV0ZSB0aGlzLl9fZWxlbWVudC5kYXRhc2V0W3Byb3BlcnR5TmFtZV07XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIEFycmF5OlxuICAgICAgY2FzZSBPYmplY3Q6XG4gICAgICAgIHRoaXMuX192YWx1ZXNbbmFtZV0gPSB2YWx1ZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aGlzLl9fZWxlbWVudC5kYXRhc2V0W3Byb3BlcnR5TmFtZV0gPSB2YWx1ZTtcbiAgICB9XG4gIH1cbn1cbmV4cG9ydCB7XG4gIF9fZ2V0UHJvcGVydHlOYW1lLFxuICBPcHRpb25zTWFuYWdlciBhcyBkZWZhdWx0XG59O1xuIiwiaW1wb3J0IEFic3RyYWN0TWFuYWdlciBmcm9tIFwiLi9BYnN0cmFjdE1hbmFnZXIuanNcIjtcbmltcG9ydCB7IGlzRGV2LCBpc0FycmF5LCBpc0RlZmluZWQgfSBmcm9tIFwiLi4vLi4vdXRpbHMvaW5kZXguanNcIjtcbmZ1bmN0aW9uIG5vcm1hbGl6ZVJlZk5hbWUobmFtZSkge1xuICByZXR1cm4gbmFtZS5lbmRzV2l0aChcIltdXCIpID8gbmFtZS5yZXBsYWNlKC9cXFtcXF0kLywgXCJcIikgOiBuYW1lO1xufVxuZnVuY3Rpb24gX19maWx0ZXJSZWZzQmVsb25naW5nVG9JbnN0YW5jZSh0aGF0LCByZWYpIHtcbiAgbGV0IGFuY2VzdG9yID0gcmVmLnBhcmVudEVsZW1lbnQ7XG4gIHdoaWxlIChhbmNlc3RvciAmJiAhaXNEZWZpbmVkKGFuY2VzdG9yLmRhdGFzZXQuY29tcG9uZW50KSkge1xuICAgIGFuY2VzdG9yID0gYW5jZXN0b3IucGFyZW50RWxlbWVudDtcbiAgfVxuICByZXR1cm4gYW5jZXN0b3IgPT09IG51bGwgfHwgYW5jZXN0b3IgPT09IHRoYXQuX19lbGVtZW50O1xufVxuZnVuY3Rpb24gX19yZWdpc3Rlcih0aGF0LCByZWZOYW1lKSB7XG4gIGNvbnN0IGlzTXVsdGlwbGUgPSByZWZOYW1lLmVuZHNXaXRoKFwiW11cIik7XG4gIGNvbnN0IHByb3BOYW1lID0gbm9ybWFsaXplUmVmTmFtZShyZWZOYW1lKTtcbiAgY29uc3QgcmVmcyA9IEFycmF5LmZyb20odGhhdC5fX2VsZW1lbnQucXVlcnlTZWxlY3RvckFsbChgW2RhdGEtcmVmPVwiJHtyZWZOYW1lfVwiXWApKS5maWx0ZXIoKHJlZikgPT4gX19maWx0ZXJSZWZzQmVsb25naW5nVG9JbnN0YW5jZSh0aGF0LCByZWYpKTtcbiAgaWYgKGlzRGV2ICYmICFpc011bHRpcGxlICYmIHJlZnMubGVuZ3RoID4gMSkge1xuICAgIGNvbnNvbGUud2FybihgWyR7dGhhdC5fX2Jhc2UuJG9wdGlvbnMubmFtZX1dYCwgYFRoZSBcIiR7cmVmTmFtZX1cIiByZWYgaGFzIGJlZW4gZm91bmQgbXVsdGlwbGUgdGltZXMuYCwgXCJEaWQgeW91IGZvcmdvdCB0byBhZGQgdGhlIGBbXWAgc3VmZml4IHRvIGl0cyBuYW1lP1wiKTtcbiAgfVxuICBpZiAoIWlzTXVsdGlwbGUgJiYgcmVmcy5sZW5ndGggPD0gMSAmJiAhaXNEZWZpbmVkKHJlZnNbMF0pKSB7XG4gICAgaWYgKGlzRGV2KSB7XG4gICAgICBjb25zb2xlLndhcm4oYFske3RoYXQuX19iYXNlLiRvcHRpb25zLm5hbWV9XWAsIGBUaGUgXCIke3JlZk5hbWV9XCIgcmVmIGlzIG1pc3NpbmcuYCwgYElzIHRoZXJlIGFuIFxcYFtkYXRhLXJlZj1cIiR7cmVmTmFtZX1cIl1cXGAgZWxlbWVudCBpbiB0aGUgY29tcG9uZW50J3Mgc2NvcGU/YCk7XG4gICAgfVxuICAgIHJldHVybjtcbiAgfVxuICB0aGF0Ll9fZXZlbnRzTWFuYWdlci5iaW5kUmVmKHJlZk5hbWUsIHJlZnMpO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhhdCwgcHJvcE5hbWUsIHtcbiAgICB2YWx1ZTogaXNNdWx0aXBsZSB8fCByZWZzLmxlbmd0aCA+IDEgPyByZWZzIDogcmVmc1swXSxcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICB9KTtcbn1cbmZ1bmN0aW9uIF9fdW5yZWdpc3Rlcih0aGF0LCByZWZOYW1lKSB7XG4gIGNvbnN0IHByb3BOYW1lID0gbm9ybWFsaXplUmVmTmFtZShyZWZOYW1lKTtcbiAgY29uc3QgcmVmcyA9IGlzQXJyYXkodGhhdFtwcm9wTmFtZV0pID8gdGhhdFtwcm9wTmFtZV0gOiBbdGhhdFtwcm9wTmFtZV1dO1xuICB0aGF0Ll9fZXZlbnRzTWFuYWdlci51bmJpbmRSZWYocmVmTmFtZSwgcmVmcyk7XG59XG5jbGFzcyBSZWZzTWFuYWdlciBleHRlbmRzIEFic3RyYWN0TWFuYWdlciB7XG4gIGdldCBfX3JlZnMoKSB7XG4gICAgdmFyIF9hO1xuICAgIHJldHVybiAoX2EgPSB0aGlzLl9fY29uZmlnLnJlZnMpICE9IG51bGwgPyBfYSA6IFtdO1xuICB9XG4gIHJlZ2lzdGVyQWxsKCkge1xuICAgIHRoaXMuX19yZWZzLmZvckVhY2goKHJlZk5hbWUpID0+IF9fcmVnaXN0ZXIodGhpcywgcmVmTmFtZSkpO1xuICB9XG4gIHVucmVnaXN0ZXJBbGwoKSB7XG4gICAgdGhpcy5fX3JlZnMuZm9yRWFjaCgocmVmTmFtZSkgPT4gX191bnJlZ2lzdGVyKHRoaXMsIHJlZk5hbWUpKTtcbiAgfVxufVxuZXhwb3J0IHtcbiAgUmVmc01hbmFnZXIgYXMgZGVmYXVsdCxcbiAgbm9ybWFsaXplUmVmTmFtZVxufTtcbiIsInZhciBfX2RlZlByb3AgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgX19kZWZOb3JtYWxQcm9wID0gKG9iaiwga2V5LCB2YWx1ZSkgPT4ga2V5IGluIG9iaiA/IF9fZGVmUHJvcChvYmosIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlLCB2YWx1ZSB9KSA6IG9ialtrZXldID0gdmFsdWU7XG52YXIgX19wdWJsaWNGaWVsZCA9IChvYmosIGtleSwgdmFsdWUpID0+IHtcbiAgX19kZWZOb3JtYWxQcm9wKG9iaiwgdHlwZW9mIGtleSAhPT0gXCJzeW1ib2xcIiA/IGtleSArIFwiXCIgOiBrZXksIHZhbHVlKTtcbiAgcmV0dXJuIHZhbHVlO1xufTtcbmltcG9ydCB1c2VQb2ludGVyIGZyb20gXCIuLi8uLi9zZXJ2aWNlcy9wb2ludGVyLmpzXCI7XG5pbXBvcnQgdXNlUmFmIGZyb20gXCIuLi8uLi9zZXJ2aWNlcy9yYWYuanNcIjtcbmltcG9ydCB1c2VSZXNpemUgZnJvbSBcIi4uLy4uL3NlcnZpY2VzL3Jlc2l6ZS5qc1wiO1xuaW1wb3J0IHVzZVNjcm9sbCBmcm9tIFwiLi4vLi4vc2VydmljZXMvc2Nyb2xsLmpzXCI7XG5pbXBvcnQgdXNlS2V5IGZyb20gXCIuLi8uLi9zZXJ2aWNlcy9rZXkuanNcIjtcbmltcG9ydCB1c2VMb2FkIGZyb20gXCIuLi8uLi9zZXJ2aWNlcy9sb2FkLmpzXCI7XG5pbXBvcnQgQWJzdHJhY3RNYW5hZ2VyIGZyb20gXCIuL0Fic3RyYWN0TWFuYWdlci5qc1wiO1xuaW1wb3J0IHsgbm9vcCwgaXNGdW5jdGlvbiwgaXNEZWZpbmVkLCBpc0RldiB9IGZyb20gXCIuLi8uLi91dGlscy9pbmRleC5qc1wiO1xuY29uc3QgU0VSVklDRVNfTUFQID0ge1xuICBzY3JvbGxlZDogdXNlU2Nyb2xsLFxuICByZXNpemVkOiB1c2VSZXNpemUsXG4gIHRpY2tlZDogdXNlUmFmLFxuICBtb3ZlZDogdXNlUG9pbnRlcixcbiAga2V5ZWQ6IHVzZUtleSxcbiAgbG9hZGVkOiB1c2VMb2FkXG59O1xuY29uc3QgU0VSVklDRV9OQU1FUyA9IE9iamVjdC5rZXlzKFNFUlZJQ0VTX01BUCk7XG5jbGFzcyBTZXJ2aWNlc01hbmFnZXIgZXh0ZW5kcyBBYnN0cmFjdE1hbmFnZXIge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJfX2N1c3RvbVNlcnZpY2VzXCIsIHt9KTtcbiAgfVxuICBnZXQgX19zZXJ2aWNlcygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgLi4udGhpcy5fX2N1c3RvbVNlcnZpY2VzLFxuICAgICAgLi4uU0VSVklDRVNfTUFQXG4gICAgfTtcbiAgfVxuICBoYXMoc2VydmljZSkge1xuICAgIGlmICghKChpc0Z1bmN0aW9uKHRoaXMuX19iYXNlW3NlcnZpY2VdKSB8fCB0aGlzLl9fYmFzZS5fX2hhc0V2ZW50KHNlcnZpY2UpKSAmJiB0aGlzLl9fc2VydmljZXNbc2VydmljZV0pKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGNvbnN0IHsgaGFzIH0gPSB0aGlzLl9fc2VydmljZXNbc2VydmljZV0oKTtcbiAgICByZXR1cm4gaGFzKHRoaXMuX19iYXNlLiRpZCk7XG4gIH1cbiAgZ2V0KHNlcnZpY2UpIHtcbiAgICByZXR1cm4gdGhpcy5fX3NlcnZpY2VzW3NlcnZpY2VdKCkucHJvcHMoKTtcbiAgfVxuICBlbmFibGUoc2VydmljZSkge1xuICAgIGlmICh0aGlzLmhhcyhzZXJ2aWNlKSkge1xuICAgICAgcmV0dXJuIHRoaXMuZGlzYWJsZS5iaW5kKHRoaXMsIHNlcnZpY2UpO1xuICAgIH1cbiAgICBpZiAoIShpc0Z1bmN0aW9uKHRoaXMuX19iYXNlW3NlcnZpY2VdKSB8fCB0aGlzLl9fYmFzZS5fX2hhc0V2ZW50KHNlcnZpY2UpKSB8fCAhdGhpcy5fX3NlcnZpY2VzW3NlcnZpY2VdKSB7XG4gICAgICByZXR1cm4gbm9vcDtcbiAgICB9XG4gICAgY29uc3QgeyBhZGQgfSA9IHRoaXMuX19zZXJ2aWNlc1tzZXJ2aWNlXSgpO1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgIGZ1bmN0aW9uIHNlcnZpY2VIYW5kbGVyKC4uLmFyZ3MpIHtcbiAgICAgIHJldHVybiBzZWxmLl9fYmFzZS5fX2NhbGxNZXRob2Qoc2VydmljZSwgLi4uYXJncyk7XG4gICAgfVxuICAgIGFkZCh0aGlzLl9fYmFzZS4kaWQsIHNlcnZpY2VIYW5kbGVyKTtcbiAgICByZXR1cm4gdGhpcy5kaXNhYmxlLmJpbmQodGhpcywgc2VydmljZSk7XG4gIH1cbiAgZW5hYmxlQWxsKCkge1xuICAgIHJldHVybiBPYmplY3Qua2V5cyh0aGlzLl9fc2VydmljZXMpLm1hcCgoc2VydmljZU5hbWUpID0+IHRoaXMuZW5hYmxlKHNlcnZpY2VOYW1lKSk7XG4gIH1cbiAgZGlzYWJsZUFsbCgpIHtcbiAgICBPYmplY3Qua2V5cyh0aGlzLl9fc2VydmljZXMpLmZvckVhY2goKHNlcnZpY2VOYW1lKSA9PiB7XG4gICAgICB0aGlzLmRpc2FibGUoc2VydmljZU5hbWUpO1xuICAgIH0pO1xuICB9XG4gIGRpc2FibGUoc2VydmljZSkge1xuICAgIGlmICghdGhpcy5fX3NlcnZpY2VzW3NlcnZpY2VdKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHsgcmVtb3ZlIH0gPSB0aGlzLl9fc2VydmljZXNbc2VydmljZV0oKTtcbiAgICByZW1vdmUodGhpcy5fX2Jhc2UuJGlkKTtcbiAgfVxuICB0b2dnbGUoc2VydmljZSwgZm9yY2UpIHtcbiAgICBpZiAoaXNEZWZpbmVkKGZvcmNlKSkge1xuICAgICAgaWYgKGZvcmNlICYmICF0aGlzLmhhcyhzZXJ2aWNlKSkge1xuICAgICAgICB0aGlzLmVuYWJsZShzZXJ2aWNlKTtcbiAgICAgIH1cbiAgICAgIGlmICghZm9yY2UgJiYgdGhpcy5oYXMoc2VydmljZSkpIHtcbiAgICAgICAgdGhpcy5kaXNhYmxlKHNlcnZpY2UpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodGhpcy5oYXMoc2VydmljZSkpIHtcbiAgICAgIHRoaXMuZGlzYWJsZShzZXJ2aWNlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5lbmFibGUoc2VydmljZSk7XG4gICAgfVxuICB9XG4gIHJlZ2lzdGVyKG5hbWUsIHVzZUZ1bmN0aW9uKSB7XG4gICAgdGhpcy5fX2N1c3RvbVNlcnZpY2VzW25hbWVdID0gdXNlRnVuY3Rpb247XG4gICAgdGhpcy5fX2Jhc2UuX19hZGRFbWl0cyhuYW1lKTtcbiAgfVxuICB1bnJlZ2lzdGVyKG5hbWUpIHtcbiAgICBpZiAoU0VSVklDRV9OQU1FUy5pbmNsdWRlcyhuYW1lKSkge1xuICAgICAgaWYgKGlzRGV2KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgW1NlcnZpY2VzTWFuYWdlcl0gVGhlIFxcYCR7bmFtZX1cXGAgY29yZSBzZXJ2aWNlIGNhbiBub3QgYmUgdW5yZWdpc3RlcmVkLmApO1xuICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLl9fYmFzZS5fX3JlbW92ZUVtaXRzKG5hbWUpO1xuICAgIGRlbGV0ZSB0aGlzLl9fY3VzdG9tU2VydmljZXNbbmFtZV07XG4gIH1cbn1cbmV4cG9ydCB7XG4gIFNlcnZpY2VzTWFuYWdlciBhcyBkZWZhdWx0XG59O1xuIiwiaW1wb3J0IHsgaXNBcnJheSwgaXNEZWZpbmVkLCBpc0RldiB9IGZyb20gXCIuLi91dGlscy9pbmRleC5qc1wiO1xuZnVuY3Rpb24gZ2V0Q29tcG9uZW50RWxlbWVudHMobmFtZU9yU2VsZWN0b3IsIGVsZW1lbnQgPSBkb2N1bWVudCkge1xuICBjb25zdCBzZWxlY3RvciA9IGBbZGF0YS1jb21wb25lbnQ9XCIke25hbWVPclNlbGVjdG9yfVwiXWA7XG4gIGxldCBlbGVtZW50cyA9IFtdO1xuICB0cnkge1xuICAgIGVsZW1lbnRzID0gQXJyYXkuZnJvbShlbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpKTtcbiAgfSBjYXRjaCB7XG4gIH1cbiAgaWYgKGVsZW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgIGVsZW1lbnRzID0gQXJyYXkuZnJvbShlbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwobmFtZU9yU2VsZWN0b3IpKTtcbiAgfVxuICByZXR1cm4gZWxlbWVudHM7XG59XG5mdW5jdGlvbiBldmVudElzRGVmaW5lZEluQ29uZmlnKGV2ZW50LCBjb25maWcpIHtcbiAgcmV0dXJuIGlzQXJyYXkoY29uZmlnLmVtaXRzKSAmJiBjb25maWcuZW1pdHMuaW5jbHVkZXMoZXZlbnQpO1xufVxuZnVuY3Rpb24gZXZlbnRJc05hdGl2ZShldmVudCwgZWxlbWVudCkge1xuICByZXR1cm4gaXNEZWZpbmVkKGVsZW1lbnRbYG9uJHtldmVudH1gXSk7XG59XG5mdW5jdGlvbiBnZXRFdmVudFRhcmdldChpbnN0YW5jZSwgZXZlbnQsIGNvbmZpZykge1xuICBpZiAoZXZlbnRJc0RlZmluZWRJbkNvbmZpZyhldmVudCwgY29uZmlnKSkge1xuICAgIHJldHVybiBpbnN0YW5jZTtcbiAgfVxuICBpZiAoZXZlbnRJc05hdGl2ZShldmVudCwgaW5zdGFuY2UuJGVsKSkge1xuICAgIHJldHVybiBpbnN0YW5jZS4kZWw7XG4gIH1cbiAgaWYgKGlzRGV2KSB7XG4gICAgY29uc29sZS53YXJuKGBbJHtjb25maWcubmFtZX1dYCwgYFRoZSBcIiR7ZXZlbnR9XCIgZXZlbnQgaXMgbWlzc2luZyBmcm9tIHRoZSBjb25maWd1cmF0aW9uIGFuZCBpcyBub3QgYSBuYXRpdmVgLCBgZXZlbnQgZm9yIHRoZSByb290IGVsZW1lbnQgb2YgdHlwZSBcXGAke2luc3RhbmNlLiRlbC5jb25zdHJ1Y3Rvci5uYW1lfVxcYC5gKTtcbiAgfVxuICByZXR1cm4gaW5zdGFuY2U7XG59XG5leHBvcnQge1xuICBldmVudElzRGVmaW5lZEluQ29uZmlnLFxuICBldmVudElzTmF0aXZlLFxuICBnZXRDb21wb25lbnRFbGVtZW50cyxcbiAgZ2V0RXZlbnRUYXJnZXRcbn07XG4iLCJ2YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZGVmTm9ybWFsUHJvcCA9IChvYmosIGtleSwgdmFsdWUpID0+IGtleSBpbiBvYmogPyBfX2RlZlByb3Aob2JqLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSwgdmFsdWUgfSkgOiBvYmpba2V5XSA9IHZhbHVlO1xudmFyIF9fcHVibGljRmllbGQgPSAob2JqLCBrZXksIHZhbHVlKSA9PiB7XG4gIF9fZGVmTm9ybWFsUHJvcChvYmosIHR5cGVvZiBrZXkgIT09IFwic3ltYm9sXCIgPyBrZXkgKyBcIlwiIDoga2V5LCB2YWx1ZSk7XG4gIHJldHVybiB2YWx1ZTtcbn07XG5pbXBvcnQgdXNlUmVzaXplIGZyb20gXCIuLi9zZXJ2aWNlcy9yZXNpemUuanNcIjtcbmltcG9ydCB7IGlzRGV2IH0gZnJvbSBcIi4uL3V0aWxzL2luZGV4LmpzXCI7XG5mdW5jdGlvbiB0ZXN0QnJlYWtwb2ludHMoaW5zdGFuY2UsIGJyZWFrcG9pbnQgPSB1c2VSZXNpemUoKS5wcm9wcygpLmJyZWFrcG9pbnQpIHtcbiAgY29uc3QgeyBhY3RpdmVCcmVha3BvaW50cywgaW5hY3RpdmVCcmVha3BvaW50cyB9ID0gaW5zdGFuY2UuJG9wdGlvbnM7XG4gIGNvbnN0IGlzSW5BY3RpdmVCcmVha3BvaW50ID0gYWN0aXZlQnJlYWtwb2ludHMgJiYgYWN0aXZlQnJlYWtwb2ludHMuc3BsaXQoXCIgXCIpLmluY2x1ZGVzKGJyZWFrcG9pbnQpO1xuICBjb25zdCBpc0luSW5hY3RpdmVCcmVha3BvaW50ID0gaW5hY3RpdmVCcmVha3BvaW50cyAmJiBpbmFjdGl2ZUJyZWFrcG9pbnRzLnNwbGl0KFwiIFwiKS5pbmNsdWRlcyhicmVha3BvaW50KTtcbiAgaWYgKGFjdGl2ZUJyZWFrcG9pbnRzICYmIGlzSW5BY3RpdmVCcmVha3BvaW50IHx8IGluYWN0aXZlQnJlYWtwb2ludHMgJiYgIWlzSW5JbmFjdGl2ZUJyZWFrcG9pbnQpIHtcbiAgICByZXR1cm4gXCIkbW91bnRcIjtcbiAgfVxuICByZXR1cm4gXCIkZGVzdHJveVwiO1xufVxuZnVuY3Rpb24gaGFzQnJlYWtwb2ludENvbmZpZ3VyYXRpb24oaW5zdGFuY2UpIHtcbiAgY29uc3QgeyBhY3RpdmVCcmVha3BvaW50cywgaW5hY3RpdmVCcmVha3BvaW50cyB9ID0gaW5zdGFuY2UuJG9wdGlvbnM7XG4gIHJldHVybiBCb29sZWFuKGFjdGl2ZUJyZWFrcG9pbnRzIHx8IGluYWN0aXZlQnJlYWtwb2ludHMpO1xufVxuZnVuY3Rpb24gdGVzdENvbmZsaWN0aW5nQnJlYWtwb2ludENvbmZpZ3VyYXRpb24oaW5zdGFuY2UpIHtcbiAgY29uc3QgeyBhY3RpdmVCcmVha3BvaW50cywgaW5hY3RpdmVCcmVha3BvaW50cywgbmFtZSB9ID0gaW5zdGFuY2UuJG9wdGlvbnM7XG4gIGlmIChhY3RpdmVCcmVha3BvaW50cyAmJiBpbmFjdGl2ZUJyZWFrcG9pbnRzKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBbJHtuYW1lfV0gSW5jb3JyZWN0IGNvbmZpZ3VyYXRpb246IHRoZSBcXGBhY3RpdmVCcmVha3BvaW50c1xcYCBhbmQgXFxgaW5hY3RpdmVCcmVha3BvaW50c1xcYCBhcmUgbm90IGNvbXBhdGlibGUuYCk7XG4gIH1cbn1cbmZ1bmN0aW9uIGFkZFRvUmVzaXplKGtleSwgaW5zdGFuY2UpIHtcbiAgaWYgKGlzRGV2KSB7XG4gICAgdGVzdENvbmZsaWN0aW5nQnJlYWtwb2ludENvbmZpZ3VyYXRpb24oaW5zdGFuY2UpO1xuICB9XG4gIGNvbnN0IHsgYWRkLCBoYXMgfSA9IHVzZVJlc2l6ZSgpO1xuICBpZiAoIWhhcyhrZXkpKSB7XG4gICAgYWRkKGtleSwgZnVuY3Rpb24gb25SZXNpemUoeyBicmVha3BvaW50IH0pIHtcbiAgICAgIGNvbnN0IGFjdGlvbiA9IHRlc3RCcmVha3BvaW50cyhpbnN0YW5jZSwgYnJlYWtwb2ludCk7XG4gICAgICBpZiAoYWN0aW9uID09PSBcIiRkZXN0cm95XCIgJiYgaW5zdGFuY2UuJGlzTW91bnRlZCkge1xuICAgICAgICBpbnN0YW5jZVthY3Rpb25dKCk7XG4gICAgICB9IGVsc2UgaWYgKGFjdGlvbiA9PT0gXCIkbW91bnRcIiAmJiAhaW5zdGFuY2UuJGlzTW91bnRlZCkge1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IGluc3RhbmNlW2FjdGlvbl0oKSwgMCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn1cbmZ1bmN0aW9uIHdpdGhCcmVha3BvaW50T2JzZXJ2ZXIoQmFzZUNsYXNzKSB7XG4gIHZhciBfYSwgX2I7XG4gIHJldHVybiBfYiA9IGNsYXNzIGV4dGVuZHMgQmFzZUNsYXNzIHtcbiAgICBjb25zdHJ1Y3RvcihlbGVtZW50KSB7XG4gICAgICBzdXBlcihlbGVtZW50KTtcbiAgICAgIGNvbnN0IHsgcmVtb3ZlLCBwcm9wcyB9ID0gdXNlUmVzaXplKCk7XG4gICAgICBjb25zdCB7IG5hbWUgfSA9IHRoaXMuJG9wdGlvbnM7XG4gICAgICBpZiAoIXByb3BzKCkuYnJlYWtwb2ludCkge1xuICAgICAgICBpZiAoaXNEZXYpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFske25hbWV9XSBUaGUgXFxgQnJlYWtwb2ludE9ic2VydmVyXFxgIGNsYXNzIHJlcXVpcmVzIGJyZWFrcG9pbnRzIHRvIGJlIGRlZmluZWQuYCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgY29uc3Qga2V5ID0gYEJyZWFrcG9pbnRPYnNlcnZlci0ke3RoaXMuJGlkfWA7XG4gICAgICBjb25zdCBtdXRhdGlvbk9ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIoKFttdXRhdGlvbl0pID0+IHtcbiAgICAgICAgaWYgKG11dGF0aW9uLnR5cGUgPT09IFwiYXR0cmlidXRlc1wiICYmIChtdXRhdGlvbi5hdHRyaWJ1dGVOYW1lID09PSBcImRhdGEtb3B0aW9uc1wiIHx8IG11dGF0aW9uLmF0dHJpYnV0ZU5hbWUuc3RhcnRzV2l0aChcImRhdGEtb3B0aW9uLVwiKSkpIHtcbiAgICAgICAgICBpZiAoIWhhc0JyZWFrcG9pbnRDb25maWd1cmF0aW9uKHRoaXMpKSB7XG4gICAgICAgICAgICB0aGlzLiRtb3VudCgpO1xuICAgICAgICAgICAgcmVtb3ZlKGtleSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIGFkZFRvUmVzaXplKGtleSwgdGhpcyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgbXV0YXRpb25PYnNlcnZlci5vYnNlcnZlKHRoaXMuJGVsLCB7IGF0dHJpYnV0ZXM6IHRydWUgfSk7XG4gICAgICBpZiAoIWhhc0JyZWFrcG9pbnRDb25maWd1cmF0aW9uKHRoaXMpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGFkZFRvUmVzaXplKGtleSwgdGhpcyk7XG4gICAgfVxuICAgICRtb3VudCgpIHtcbiAgICAgIGlmICghaGFzQnJlYWtwb2ludENvbmZpZ3VyYXRpb24odGhpcykpIHtcbiAgICAgICAgcmV0dXJuIHN1cGVyLiRtb3VudCgpO1xuICAgICAgfVxuICAgICAgY29uc3QgYWN0aW9uID0gdGVzdEJyZWFrcG9pbnRzKHRoaXMpO1xuICAgICAgaWYgKGFjdGlvbiA9PT0gXCIkbW91bnRcIikge1xuICAgICAgICByZXR1cm4gc3VwZXIuJG1vdW50KCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gIH0sIF9fcHVibGljRmllbGQoX2IsIFwiY29uZmlnXCIsIHtcbiAgICAuLi5CYXNlQ2xhc3MuY29uZmlnLFxuICAgIG5hbWU6IGAke0Jhc2VDbGFzcy5jb25maWcubmFtZX1XaXRoQnJlYWtwb2ludE9ic2VydmVyYCxcbiAgICBvcHRpb25zOiB7XG4gICAgICAuLi4oKF9hID0gQmFzZUNsYXNzLmNvbmZpZykgPT0gbnVsbCA/IHZvaWQgMCA6IF9hLm9wdGlvbnMpIHx8IHt9LFxuICAgICAgYWN0aXZlQnJlYWtwb2ludHM6IFN0cmluZyxcbiAgICAgIGluYWN0aXZlQnJlYWtwb2ludHM6IFN0cmluZ1xuICAgIH1cbiAgfSksIF9iO1xufVxuZXhwb3J0IHtcbiAgd2l0aEJyZWFrcG9pbnRPYnNlcnZlciBhcyBkZWZhdWx0XG59O1xuIiwidmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2RlZk5vcm1hbFByb3AgPSAob2JqLCBrZXksIHZhbHVlKSA9PiBrZXkgaW4gb2JqID8gX19kZWZQcm9wKG9iaiwga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUsIHZhbHVlIH0pIDogb2JqW2tleV0gPSB2YWx1ZTtcbnZhciBfX3B1YmxpY0ZpZWxkID0gKG9iaiwga2V5LCB2YWx1ZSkgPT4ge1xuICBfX2RlZk5vcm1hbFByb3Aob2JqLCB0eXBlb2Yga2V5ICE9PSBcInN5bWJvbFwiID8ga2V5ICsgXCJcIiA6IGtleSwgdmFsdWUpO1xuICByZXR1cm4gdmFsdWU7XG59O1xuZnVuY3Rpb24gY3JlYXRlQXJyYXlPZk51bWJlcihsZW5ndGgpIHtcbiAgcmV0dXJuIFsuLi5uZXcgQXJyYXkobGVuZ3RoICsgMSldLm1hcCgodmFsLCBpbmRleCkgPT4gaW5kZXggLyBsZW5ndGgpO1xufVxuZnVuY3Rpb24gd2l0aEludGVyc2VjdGlvbk9ic2VydmVyKEJhc2VDbGFzcywgZGVmYXVsdE9wdGlvbnMgPSB7IHRocmVzaG9sZDogY3JlYXRlQXJyYXlPZk51bWJlcigxMDApIH0pIHtcbiAgdmFyIF9hLCBfYjtcbiAgcmV0dXJuIF9iID0gY2xhc3MgZXh0ZW5kcyBCYXNlQ2xhc3Mge1xuICAgIGNvbnN0cnVjdG9yKGVsZW1lbnQpIHtcbiAgICAgIHN1cGVyKGVsZW1lbnQpO1xuICAgICAgdGhpcy4kb2JzZXJ2ZXIgPSBuZXcgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIoKGVudHJpZXMpID0+IHtcbiAgICAgICAgdGhpcy5fX2NhbGxNZXRob2QoXCJpbnRlcnNlY3RlZFwiLCBlbnRyaWVzKTtcbiAgICAgIH0sIHtcbiAgICAgICAgLi4uZGVmYXVsdE9wdGlvbnMsXG4gICAgICAgIC4uLnRoaXMuJG9wdGlvbnMuaW50ZXJzZWN0aW9uT2JzZXJ2ZXJcbiAgICAgIH0pO1xuICAgICAgdGhpcy4kb24oXCJtb3VudGVkXCIsICgpID0+IHtcbiAgICAgICAgdGhpcy4kb2JzZXJ2ZXIub2JzZXJ2ZSh0aGlzLiRlbCk7XG4gICAgICB9KTtcbiAgICAgIHRoaXMuJG9uKFwiZGVzdHJveWVkXCIsICgpID0+IHtcbiAgICAgICAgdGhpcy4kb2JzZXJ2ZXIudW5vYnNlcnZlKHRoaXMuJGVsKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwgX19wdWJsaWNGaWVsZChfYiwgXCJjb25maWdcIiwge1xuICAgIC4uLkJhc2VDbGFzcy5jb25maWcsXG4gICAgbmFtZTogYCR7QmFzZUNsYXNzLmNvbmZpZy5uYW1lfVdpdGhJbnRlcnNlY3Rpb25PYnNlcnZlcmAsXG4gICAgb3B0aW9uczoge1xuICAgICAgLi4uKChfYSA9IEJhc2VDbGFzcy5jb25maWcpID09IG51bGwgPyB2b2lkIDAgOiBfYS5vcHRpb25zKSB8fCB7fSxcbiAgICAgIGludGVyc2VjdGlvbk9ic2VydmVyOiBPYmplY3RcbiAgICB9LFxuICAgIGVtaXRzOiBbXCJpbnRlcnNlY3RlZFwiXVxuICB9KSwgX2I7XG59XG5leHBvcnQge1xuICB3aXRoSW50ZXJzZWN0aW9uT2JzZXJ2ZXIgYXMgZGVmYXVsdFxufTtcbiIsInZhciBfX2RlZlByb3AgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgX19kZWZOb3JtYWxQcm9wID0gKG9iaiwga2V5LCB2YWx1ZSkgPT4ga2V5IGluIG9iaiA/IF9fZGVmUHJvcChvYmosIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlLCB2YWx1ZSB9KSA6IG9ialtrZXldID0gdmFsdWU7XG52YXIgX19wdWJsaWNGaWVsZCA9IChvYmosIGtleSwgdmFsdWUpID0+IHtcbiAgX19kZWZOb3JtYWxQcm9wKG9iaiwgdHlwZW9mIGtleSAhPT0gXCJzeW1ib2xcIiA/IGtleSArIFwiXCIgOiBrZXksIHZhbHVlKTtcbiAgcmV0dXJuIHZhbHVlO1xufTtcbmZ1bmN0aW9uIHdpdGhNb3VudFdoZW5JblZpZXcoQmFzZUNsYXNzLCBkZWZhdWx0T3B0aW9ucyA9IHsgdGhyZXNob2xkOiBbMCwgMV0gfSkge1xuICB2YXIgX2EsIF9iO1xuICByZXR1cm4gX2IgPSBjbGFzcyBleHRlbmRzIEJhc2VDbGFzcyB7XG4gICAgY29uc3RydWN0b3IoZWxlbWVudCkge1xuICAgICAgc3VwZXIoZWxlbWVudCk7XG4gICAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwiX19pc1Zpc2libGVcIiwgZmFsc2UpO1xuICAgICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcIl9fb2JzZXJ2ZXJcIik7XG4gICAgICB0aGlzLl9fb2JzZXJ2ZXIgPSBuZXcgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIoKGVudHJpZXMpID0+IHtcbiAgICAgICAgY29uc3QgaXNWaXNpYmxlID0gZW50cmllcy5yZWR1Y2UoKGFjYywgZW50cnkpID0+IGFjYyB8fCBlbnRyeS5pc0ludGVyc2VjdGluZywgZmFsc2UpO1xuICAgICAgICBpZiAodGhpcy5fX2lzVmlzaWJsZSAhPT0gaXNWaXNpYmxlKSB7XG4gICAgICAgICAgdGhpcy5fX2lzVmlzaWJsZSA9IGlzVmlzaWJsZTtcbiAgICAgICAgICBpZiAoaXNWaXNpYmxlKSB7XG4gICAgICAgICAgICB0aGlzLiRtb3VudCgpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHRoaXMuJGRlc3Ryb3koKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LCB7IC4uLmRlZmF1bHRPcHRpb25zLCAuLi50aGlzLiRvcHRpb25zLmludGVyc2VjdGlvbk9ic2VydmVyIH0pO1xuICAgICAgdGhpcy5fX29ic2VydmVyLm9ic2VydmUodGhpcy4kZWwpO1xuICAgICAgdGhpcy4kb24oXCJ0ZXJtaW5hdGVkXCIsICgpID0+IHtcbiAgICAgICAgdGhpcy5fX29ic2VydmVyLmRpc2Nvbm5lY3QoKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICAkbW91bnQoKSB7XG4gICAgICBpZiAodGhpcy5fX2lzVmlzaWJsZSkge1xuICAgICAgICBzdXBlci4kbW91bnQoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgfSwgX19wdWJsaWNGaWVsZChfYiwgXCJjb25maWdcIiwge1xuICAgIC4uLkJhc2VDbGFzcy5jb25maWcsXG4gICAgbmFtZTogYCR7QmFzZUNsYXNzLmNvbmZpZy5uYW1lfVdpdGhNb3VudFdoZW5JblZpZXdgLFxuICAgIG9wdGlvbnM6IHtcbiAgICAgIC4uLigoX2EgPSBCYXNlQ2xhc3MuY29uZmlnKSA9PSBudWxsID8gdm9pZCAwIDogX2Eub3B0aW9ucykgfHwge30sXG4gICAgICBpbnRlcnNlY3Rpb25PYnNlcnZlcjogT2JqZWN0XG4gICAgfVxuICB9KSwgX2I7XG59XG5leHBvcnQge1xuICB3aXRoTW91bnRXaGVuSW5WaWV3IGFzIGRlZmF1bHRcbn07XG4iLCJ2YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZGVmTm9ybWFsUHJvcCA9IChvYmosIGtleSwgdmFsdWUpID0+IGtleSBpbiBvYmogPyBfX2RlZlByb3Aob2JqLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSwgdmFsdWUgfSkgOiBvYmpba2V5XSA9IHZhbHVlO1xudmFyIF9fcHVibGljRmllbGQgPSAob2JqLCBrZXksIHZhbHVlKSA9PiB7XG4gIF9fZGVmTm9ybWFsUHJvcChvYmosIHR5cGVvZiBrZXkgIT09IFwic3ltYm9sXCIgPyBrZXkgKyBcIlwiIDoga2V5LCB2YWx1ZSk7XG4gIHJldHVybiB2YWx1ZTtcbn07XG5pbXBvcnQgd2l0aE1vdW50V2hlbkluVmlldyBmcm9tIFwiLi93aXRoTW91bnRXaGVuSW5WaWV3LmpzXCI7XG5pbXBvcnQgeyBkYW1wLCBjbGFtcCwgY2xhbXAwMSwgZ2V0T2Zmc2V0U2l6ZXMsIGlzRnVuY3Rpb24sIHVzZVNjaGVkdWxlciB9IGZyb20gXCIuLi91dGlscy9pbmRleC5qc1wiO1xuY29uc3Qgc2NoZWR1bGVyID0gdXNlU2NoZWR1bGVyKFtcInVwZGF0ZVwiLCBcInJlbmRlclwiXSk7XG5mdW5jdGlvbiB3aXRoU2Nyb2xsZWRJblZpZXcoQmFzZUNsYXNzLCBvcHRpb25zID0ge30pIHtcbiAgdmFyIF9hO1xuICByZXR1cm4gX2EgPSBjbGFzcyBleHRlbmRzIHdpdGhNb3VudFdoZW5JblZpZXcoQmFzZUNsYXNzLCBvcHRpb25zKSB7XG4gICAgY29uc3RydWN0b3IoZWxlbWVudCkge1xuICAgICAgc3VwZXIoZWxlbWVudCk7XG4gICAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwiX19wcm9wc1wiLCB7XG4gICAgICAgIHN0YXJ0OiB7XG4gICAgICAgICAgeDogMCxcbiAgICAgICAgICB5OiAwXG4gICAgICAgIH0sXG4gICAgICAgIGVuZDoge1xuICAgICAgICAgIHg6IDAsXG4gICAgICAgICAgeTogMFxuICAgICAgICB9LFxuICAgICAgICBjdXJyZW50OiB7XG4gICAgICAgICAgeDogMCxcbiAgICAgICAgICB5OiAwXG4gICAgICAgIH0sXG4gICAgICAgIHByb2dyZXNzOiB7XG4gICAgICAgICAgeDogMCxcbiAgICAgICAgICB5OiAwXG4gICAgICAgIH0sXG4gICAgICAgIGRhbXBlZFByb2dyZXNzOiB7XG4gICAgICAgICAgeDogMCxcbiAgICAgICAgICB5OiAwXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcImRhbXBGYWN0b3JcIiwgMC4xKTtcbiAgICAgIF9fcHVibGljRmllbGQodGhpcywgXCJkYW1wUHJlY2lzaW9uXCIsIDFlLTMpO1xuICAgICAgY29uc3QgZGVsZWdhdGUgPSB7XG4gICAgICAgIGhhbmRsZUV2ZW50KGV2ZW50KSB7XG4gICAgICAgICAgZGVsZWdhdGVbZXZlbnQudHlwZV0oZXZlbnQuZGV0YWlsWzBdKTtcbiAgICAgICAgfSxcbiAgICAgICAgcmVzaXplZDogKCkgPT4ge1xuICAgICAgICAgIHRoaXMuX19zZXRQcm9wcygpO1xuICAgICAgICB9LFxuICAgICAgICBzY3JvbGxlZDogKHByb3BzKSA9PiB7XG4gICAgICAgICAgaWYgKCF0aGlzLiRzZXJ2aWNlcy5oYXMoXCJ0aWNrZWRcIikgJiYgcHJvcHMuY2hhbmdlZC55IHx8IHByb3BzLmNoYW5nZWQueCkge1xuICAgICAgICAgICAgdGhpcy4kc2VydmljZXMuZW5hYmxlKFwidGlja2VkXCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgdGlja2VkOiAoKSA9PiB7XG4gICAgICAgICAgdGhpcy5fX3Byb3BzLmN1cnJlbnQueCA9IGNsYW1wKHdpbmRvdy5wYWdlWE9mZnNldCwgdGhpcy5fX3Byb3BzLnN0YXJ0LngsIHRoaXMuX19wcm9wcy5lbmQueCk7XG4gICAgICAgICAgdGhpcy5fX3Byb3BzLnByb2dyZXNzLnggPSBjbGFtcDAxKCh0aGlzLl9fcHJvcHMuY3VycmVudC54IC0gdGhpcy5fX3Byb3BzLnN0YXJ0LngpIC8gKHRoaXMuX19wcm9wcy5lbmQueCAtIHRoaXMuX19wcm9wcy5zdGFydC54KSk7XG4gICAgICAgICAgdGhpcy5fX3Byb3BzLmRhbXBlZFByb2dyZXNzLnggPSBkYW1wKHRoaXMuX19wcm9wcy5wcm9ncmVzcy54LCB0aGlzLl9fcHJvcHMuZGFtcGVkUHJvZ3Jlc3MueCwgdGhpcy5kYW1wRmFjdG9yLCB0aGlzLmRhbXBQcmVjaXNpb24pO1xuICAgICAgICAgIHRoaXMuX19wcm9wcy5jdXJyZW50LnkgPSBjbGFtcCh3aW5kb3cucGFnZVlPZmZzZXQsIHRoaXMuX19wcm9wcy5zdGFydC55LCB0aGlzLl9fcHJvcHMuZW5kLnkpO1xuICAgICAgICAgIHRoaXMuX19wcm9wcy5wcm9ncmVzcy55ID0gY2xhbXAwMSgodGhpcy5fX3Byb3BzLmN1cnJlbnQueSAtIHRoaXMuX19wcm9wcy5zdGFydC55KSAvICh0aGlzLl9fcHJvcHMuZW5kLnkgLSB0aGlzLl9fcHJvcHMuc3RhcnQueSkpO1xuICAgICAgICAgIHRoaXMuX19wcm9wcy5kYW1wZWRQcm9ncmVzcy55ID0gZGFtcCh0aGlzLl9fcHJvcHMucHJvZ3Jlc3MueSwgdGhpcy5fX3Byb3BzLmRhbXBlZFByb2dyZXNzLnksIHRoaXMuZGFtcEZhY3RvciwgdGhpcy5kYW1wUHJlY2lzaW9uKTtcbiAgICAgICAgICBpZiAodGhpcy5fX3Byb3BzLmRhbXBlZFByb2dyZXNzLnggPT09IHRoaXMuX19wcm9wcy5wcm9ncmVzcy54ICYmIHRoaXMuX19wcm9wcy5kYW1wZWRQcm9ncmVzcy55ID09PSB0aGlzLl9fcHJvcHMucHJvZ3Jlc3MueSkge1xuICAgICAgICAgICAgdGhpcy4kc2VydmljZXMuZGlzYWJsZShcInRpY2tlZFwiKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgc2NoZWR1bGVyLnVwZGF0ZSgoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCByZW5kZXJGbiA9IHRoaXMuX19jYWxsTWV0aG9kKFwic2Nyb2xsZWRJblZpZXdcIiwgdGhpcy5fX3Byb3BzKTtcbiAgICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKHJlbmRlckZuKSkge1xuICAgICAgICAgICAgICBzY2hlZHVsZXIucmVuZGVyKCgpID0+IHtcbiAgICAgICAgICAgICAgICByZW5kZXJGbih0aGlzLl9fcHJvcHMpO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIHRoaXMuJG9uKFwiYmVmb3JlLW1vdW50ZWRcIiwgKCkgPT4ge1xuICAgICAgICB0aGlzLiRvbihcInJlc2l6ZWRcIiwgZGVsZWdhdGUpO1xuICAgICAgICB0aGlzLiRvbihcInNjcm9sbGVkXCIsIGRlbGVnYXRlKTtcbiAgICAgICAgdGhpcy4kb24oXCJ0aWNrZWRcIiwgZGVsZWdhdGUpO1xuICAgICAgfSk7XG4gICAgICB0aGlzLiRvbihcIm1vdW50ZWRcIiwgKCkgPT4ge1xuICAgICAgICB0aGlzLl9fc2V0UHJvcHMoKTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy4kb24oXCJkZXN0cm95ZWRcIiwgKCkgPT4ge1xuICAgICAgICB0aGlzLiRvZmYoXCJyZXNpemVkXCIsIGRlbGVnYXRlKTtcbiAgICAgICAgdGhpcy4kb2ZmKFwic2Nyb2xsZWRcIiwgZGVsZWdhdGUpO1xuICAgICAgICB0aGlzLiRvZmYoXCJ0aWNrZWRcIiwgZGVsZWdhdGUpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIG1vdW50ZWQoKSB7XG4gICAgICBpZiAoaXNGdW5jdGlvbihzdXBlci5tb3VudGVkKSlcbiAgICAgICAgc3VwZXIubW91bnRlZCgpO1xuICAgIH1cbiAgICByZXNpemVkKHByb3BzKSB7XG4gICAgICBpZiAoaXNGdW5jdGlvbihzdXBlci5yZXNpemVkKSlcbiAgICAgICAgc3VwZXIucmVzaXplZChwcm9wcyk7XG4gICAgfVxuICAgIHNjcm9sbGVkKHByb3BzKSB7XG4gICAgICBpZiAoaXNGdW5jdGlvbihzdXBlci5zY3JvbGxlZCkpXG4gICAgICAgIHN1cGVyLnNjcm9sbGVkKHByb3BzKTtcbiAgICB9XG4gICAgdGlja2VkKHByb3BzKSB7XG4gICAgICBpZiAoaXNGdW5jdGlvbihzdXBlci50aWNrZWQpKVxuICAgICAgICBzdXBlci50aWNrZWQocHJvcHMpO1xuICAgIH1cbiAgICBkZXN0cm95ZWQoKSB7XG4gICAgICBpZiAoaXNGdW5jdGlvbihzdXBlci5kZXN0cm95ZWQpKVxuICAgICAgICBzdXBlci5kZXN0cm95ZWQoKTtcbiAgICB9XG4gICAgX19zZXRQcm9wcygpIHtcbiAgICAgIGNvbnN0IHNpemVzID0gb3B0aW9ucy51c2VPZmZzZXRTaXplcyA/IGdldE9mZnNldFNpemVzKHRoaXMuJGVsKSA6IHRoaXMuJGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgY29uc3QgeUVuZCA9IHNpemVzLnkgKyB3aW5kb3cucGFnZVlPZmZzZXQgKyBzaXplcy5oZWlnaHQ7XG4gICAgICBjb25zdCB5U3RhcnQgPSB5RW5kIC0gd2luZG93LmlubmVySGVpZ2h0IC0gc2l6ZXMuaGVpZ2h0O1xuICAgICAgY29uc3QgeUN1cnJlbnQgPSBjbGFtcCh3aW5kb3cucGFnZVlPZmZzZXQsIHlTdGFydCwgeUVuZCk7XG4gICAgICBjb25zdCB5UHJvZ3Jlc3MgPSBjbGFtcDAxKCh5Q3VycmVudCAtIHlTdGFydCkgLyAoeUVuZCAtIHlTdGFydCkpO1xuICAgICAgY29uc3QgeEVuZCA9IHNpemVzLnggKyB3aW5kb3cucGFnZVhPZmZzZXQgKyBzaXplcy53aWR0aDtcbiAgICAgIGNvbnN0IHhTdGFydCA9IHhFbmQgLSB3aW5kb3cuaW5uZXJXaWR0aCAtIHNpemVzLndpZHRoO1xuICAgICAgY29uc3QgeEN1cnJlbnQgPSBjbGFtcCh3aW5kb3cucGFnZVhPZmZzZXQsIHhTdGFydCwgeEVuZCk7XG4gICAgICBjb25zdCB4UHJvZ3Jlc3MgPSBjbGFtcDAxKCh4Q3VycmVudCAtIHhTdGFydCkgLyAoeEVuZCAtIHhTdGFydCkpO1xuICAgICAgdGhpcy5fX3Byb3BzLnN0YXJ0LnggPSB4U3RhcnQ7XG4gICAgICB0aGlzLl9fcHJvcHMuc3RhcnQueSA9IHlTdGFydDtcbiAgICAgIHRoaXMuX19wcm9wcy5lbmQueCA9IHhFbmQ7XG4gICAgICB0aGlzLl9fcHJvcHMuZW5kLnkgPSB5RW5kO1xuICAgICAgdGhpcy5fX3Byb3BzLmN1cnJlbnQueCA9IHhDdXJyZW50O1xuICAgICAgdGhpcy5fX3Byb3BzLmN1cnJlbnQueSA9IHlDdXJyZW50O1xuICAgICAgdGhpcy5fX3Byb3BzLnByb2dyZXNzLnggPSB4UHJvZ3Jlc3M7XG4gICAgICB0aGlzLl9fcHJvcHMucHJvZ3Jlc3MueSA9IHlQcm9ncmVzcztcbiAgICAgIHRoaXMuX19wcm9wcy5kYW1wZWRQcm9ncmVzcy54ID0gZGFtcCh4UHJvZ3Jlc3MsIHRoaXMuX19wcm9wcy5kYW1wZWRQcm9ncmVzcy54KTtcbiAgICAgIHRoaXMuX19wcm9wcy5kYW1wZWRQcm9ncmVzcy55ID0gZGFtcCh5UHJvZ3Jlc3MsIHRoaXMuX19wcm9wcy5kYW1wZWRQcm9ncmVzcy55KTtcbiAgICB9XG4gIH0sIF9fcHVibGljRmllbGQoX2EsIFwiY29uZmlnXCIsIHtcbiAgICBuYW1lOiBgJHtCYXNlQ2xhc3MuY29uZmlnLm5hbWV9V2l0aE1vdW50V2hlbkluVmlld2AsXG4gICAgZW1pdHM6IFtcInNjcm9sbGVkSW5WaWV3XCJdXG4gIH0pLCBfYTtcbn1cbmV4cG9ydCB7XG4gIHdpdGhTY3JvbGxlZEluVmlldyBhcyBkZWZhdWx0XG59O1xuIiwiZnVuY3Rpb24gZ2V0SW5zdGFuY2VGcm9tRWxlbWVudChlbGVtZW50LCBDb25zdHJ1Y3Rvcikge1xuICB2YXIgX2E7XG4gIGlmICghZWxlbWVudC5fX2Jhc2VfXykge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHJldHVybiAoX2EgPSBlbGVtZW50Ll9fYmFzZV9fLmdldChDb25zdHJ1Y3RvcikpICE9IG51bGwgPyBfYSA6IG51bGw7XG59XG5leHBvcnQge1xuICBnZXRJbnN0YW5jZUZyb21FbGVtZW50IGFzIGRlZmF1bHRcbn07XG4iLCJpbXBvcnQgeyB1c2VTZXJ2aWNlIH0gZnJvbSBcIi4vc2VydmljZS5qc1wiO1xuaW1wb3J0IGtleUNvZGVzIGZyb20gXCIuLi91dGlscy9rZXlDb2Rlcy5qc1wiO1xuZnVuY3Rpb24gZ2V0SW5pdGlhbEtleUNvZGVzKCkge1xuICByZXR1cm4gT2JqZWN0LmZyb21FbnRyaWVzKE9iamVjdC5rZXlzKGtleUNvZGVzKS5tYXAoKGtleTIpID0+IFtrZXkyLCBmYWxzZV0pKTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUtleVNlcnZpY2UoKSB7XG4gIGxldCBwcmV2aW91c0V2ZW50O1xuICBmdW5jdGlvbiB1cGRhdGVQcm9wcyhldmVudCkge1xuICAgIHByb3BzLmV2ZW50ID0gZXZlbnQ7XG4gICAgT2JqZWN0LmVudHJpZXMoa2V5Q29kZXMpLmZvckVhY2goKFtuYW1lLCBjb2RlXSkgPT4ge1xuICAgICAgcHJvcHNbbmFtZV0gPSBjb2RlID09PSBldmVudC5rZXlDb2RlO1xuICAgIH0pO1xuICAgIGlmICghcHJldmlvdXNFdmVudCkge1xuICAgICAgcHJvcHMudHJpZ2dlcmVkID0gMDtcbiAgICB9XG4gICAgaWYgKHByb3BzLmV2ZW50LnR5cGUgPT09IFwia2V5ZG93blwiICYmIChwcmV2aW91c0V2ZW50ID09IG51bGwgPyB2b2lkIDAgOiBwcmV2aW91c0V2ZW50LnR5cGUpID09PSBcImtleWRvd25cIikge1xuICAgICAgcHJvcHMudHJpZ2dlcmVkICs9IDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByb3BzLnRyaWdnZXJlZCA9IDE7XG4gICAgfVxuICAgIHByZXZpb3VzRXZlbnQgPSBwcm9wcy5ldmVudDtcbiAgICBwcm9wcy5kaXJlY3Rpb24gPSBwcm9wcy5ldmVudC50eXBlID09PSBcImtleWRvd25cIiA/IFwiZG93blwiIDogXCJ1cFwiO1xuICAgIHByb3BzLmlzVXAgPSBwcm9wcy5ldmVudC50eXBlID09PSBcImtleXVwXCI7XG4gICAgcHJvcHMuaXNEb3duID0gcHJvcHMuZXZlbnQudHlwZSA9PT0gXCJrZXlkb3duXCI7XG4gICAgcmV0dXJuIHByb3BzO1xuICB9XG4gIGZ1bmN0aW9uIG9uS2V5KGV2ZW50KSB7XG4gICAgdHJpZ2dlcih1cGRhdGVQcm9wcyhldmVudCkpO1xuICB9XG4gIGNvbnN0IHsgYWRkLCByZW1vdmUsIGhhcywgdHJpZ2dlciwgcHJvcHMgfSA9IHVzZVNlcnZpY2Uoe1xuICAgIHByb3BzOiB7XG4gICAgICBldmVudDogbnVsbCxcbiAgICAgIHRyaWdnZXJlZDogMCxcbiAgICAgIGlzVXA6IGZhbHNlLFxuICAgICAgaXNEb3duOiBmYWxzZSxcbiAgICAgIGRpcmVjdGlvbjogXCJub25lXCIsXG4gICAgICAuLi5nZXRJbml0aWFsS2V5Q29kZXMoKVxuICAgIH0sXG4gICAgaW5pdCgpIHtcbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIG9uS2V5KTtcbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXl1cFwiLCBvbktleSk7XG4gICAgfSxcbiAgICBraWxsKCkge1xuICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgb25LZXkpO1xuICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImtleXVwXCIsIG9uS2V5KTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4ge1xuICAgIGFkZCxcbiAgICByZW1vdmUsXG4gICAgaGFzLFxuICAgIHByb3BzOiAoKSA9PiBwcm9wc1xuICB9O1xufVxubGV0IGtleTtcbmZ1bmN0aW9uIHVzZUtleSgpIHtcbiAgaWYgKCFrZXkpIHtcbiAgICBrZXkgPSBjcmVhdGVLZXlTZXJ2aWNlKCk7XG4gIH1cbiAgcmV0dXJuIGtleTtcbn1cbmV4cG9ydCB7XG4gIHVzZUtleSBhcyBkZWZhdWx0XG59O1xuIiwiaW1wb3J0IHsgdXNlU2VydmljZSB9IGZyb20gXCIuL3NlcnZpY2UuanNcIjtcbmZ1bmN0aW9uIGNyZWF0ZUxvYWRTZXJ2aWNlKCkge1xuICBmdW5jdGlvbiBvbkxvYWQoKSB7XG4gICAgcHJvcHMudGltZSA9IHdpbmRvdy5wZXJmb3JtYW5jZS5ub3coKTtcbiAgICB0cmlnZ2VyKHByb3BzKTtcbiAgfVxuICBjb25zdCB7IGFkZCwgcmVtb3ZlLCBoYXMsIHByb3BzLCB0cmlnZ2VyIH0gPSB1c2VTZXJ2aWNlKHtcbiAgICBwcm9wczoge1xuICAgICAgdGltZTogcGVyZm9ybWFuY2Uubm93KClcbiAgICB9LFxuICAgIGluaXQoKSB7XG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRcIiwgb25Mb2FkKTtcbiAgICB9LFxuICAgIGtpbGwoKSB7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImxvYWRcIiwgb25Mb2FkKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4ge1xuICAgIGFkZCxcbiAgICByZW1vdmUsXG4gICAgaGFzLFxuICAgIHByb3BzOiAoKSA9PiBwcm9wc1xuICB9O1xufVxubGV0IGxvYWQ7XG5mdW5jdGlvbiB1c2VMb2FkKCkge1xuICBpZiAoIWxvYWQpIHtcbiAgICBsb2FkID0gY3JlYXRlTG9hZFNlcnZpY2UoKTtcbiAgfVxuICByZXR1cm4gbG9hZDtcbn1cbmV4cG9ydCB7XG4gIHVzZUxvYWQgYXMgZGVmYXVsdFxufTtcbiIsImltcG9ydCB7IHVzZVNlcnZpY2UgfSBmcm9tIFwiLi9zZXJ2aWNlLmpzXCI7XG5mdW5jdGlvbiBpc1RvdWNoRXZlbnQoZXZlbnQpIHtcbiAgcmV0dXJuIHR5cGVvZiBUb3VjaEV2ZW50ICE9PSBcInVuZGVmaW5lZFwiICYmIGV2ZW50IGluc3RhbmNlb2YgVG91Y2hFdmVudDtcbn1cbmNvbnN0IGV2ZW50cyA9IFtcIm1vdXNlbW92ZVwiLCBcInRvdWNobW92ZVwiLCBcIm1vdXNlZG93blwiLCBcInRvdWNoc3RhcnRcIiwgXCJtb3VzZXVwXCIsIFwidG91Y2hlbmRcIl07XG5mdW5jdGlvbiBjcmVhdGVQb2ludGVyU2VydmljZSgpIHtcbiAgZnVuY3Rpb24gdXBkYXRlUHJvcHMoZXZlbnQpIHtcbiAgICB2YXIgX2EsIF9iO1xuICAgIHByb3BzLmV2ZW50ID0gZXZlbnQ7XG4gICAgY29uc3QgeUxhc3QgPSBwcm9wcy55O1xuICAgIGNvbnN0IHhMYXN0ID0gcHJvcHMueDtcbiAgICBjb25zdCB5ID0gaXNUb3VjaEV2ZW50KGV2ZW50KSA/IChfYSA9IGV2ZW50LnRvdWNoZXNbMF0pID09IG51bGwgPyB2b2lkIDAgOiBfYS5jbGllbnRZIDogZXZlbnQuY2xpZW50WTtcbiAgICBpZiAoeSAhPT0gcHJvcHMueSkge1xuICAgICAgcHJvcHMueSA9IHk7XG4gICAgfVxuICAgIGNvbnN0IHggPSBpc1RvdWNoRXZlbnQoZXZlbnQpID8gKF9iID0gZXZlbnQudG91Y2hlc1swXSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9iLmNsaWVudFggOiBldmVudC5jbGllbnRYO1xuICAgIGlmICh4ICE9PSBwcm9wcy54KSB7XG4gICAgICBwcm9wcy54ID0geDtcbiAgICB9XG4gICAgcHJvcHMuY2hhbmdlZC54ID0gcHJvcHMueCAhPT0geExhc3Q7XG4gICAgcHJvcHMuY2hhbmdlZC55ID0gcHJvcHMueSAhPT0geUxhc3Q7XG4gICAgcHJvcHMubGFzdC54ID0geExhc3Q7XG4gICAgcHJvcHMubGFzdC55ID0geUxhc3Q7XG4gICAgcHJvcHMuZGVsdGEueCA9IHByb3BzLnggLSB4TGFzdDtcbiAgICBwcm9wcy5kZWx0YS55ID0gcHJvcHMueSAtIHlMYXN0O1xuICAgIHByb3BzLm1heC54ID0gd2luZG93LmlubmVyV2lkdGg7XG4gICAgcHJvcHMubWF4LnkgPSB3aW5kb3cuaW5uZXJIZWlnaHQ7XG4gICAgcHJvcHMucHJvZ3Jlc3MueCA9IHByb3BzLnggLyBwcm9wcy5tYXgueDtcbiAgICBwcm9wcy5wcm9ncmVzcy55ID0gcHJvcHMueSAvIHByb3BzLm1heC55O1xuICAgIHJldHVybiBwcm9wcztcbiAgfVxuICBmdW5jdGlvbiBoYW5kbGVFdmVudChldmVudCkge1xuICAgIHN3aXRjaCAoZXZlbnQudHlwZSkge1xuICAgICAgY2FzZSBcIm1vdXNlZW50ZXJcIjpcbiAgICAgIGNhc2UgXCJtb3VzZW1vdmVcIjpcbiAgICAgIGNhc2UgXCJ0b3VjaG1vdmVcIjpcbiAgICAgICAgdHJpZ2dlcih1cGRhdGVQcm9wcyhldmVudCkpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJtb3VzZWRvd25cIjpcbiAgICAgIGNhc2UgXCJ0b3VjaHN0YXJ0XCI6XG4gICAgICAgIHByb3BzLmlzRG93biA9IHRydWU7XG4gICAgICAgIHRyaWdnZXIocHJvcHMpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJtb3VzZXVwXCI6XG4gICAgICBjYXNlIFwidG91Y2hlbmRcIjpcbiAgICAgICAgcHJvcHMuaXNEb3duID0gZmFsc2U7XG4gICAgICAgIHRyaWdnZXIocHJvcHMpO1xuICAgICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgY29uc3QgeyBhZGQsIHJlbW92ZSwgaGFzLCB0cmlnZ2VyLCBwcm9wcyB9ID0gdXNlU2VydmljZSh7XG4gICAgcHJvcHM6IHtcbiAgICAgIGV2ZW50OiBudWxsLFxuICAgICAgaXNEb3duOiBmYWxzZSxcbiAgICAgIHg6IHdpbmRvdy5pbm5lcldpZHRoIC8gMixcbiAgICAgIHk6IHdpbmRvdy5pbm5lckhlaWdodCAvIDIsXG4gICAgICBjaGFuZ2VkOiB7XG4gICAgICAgIHg6IGZhbHNlLFxuICAgICAgICB5OiBmYWxzZVxuICAgICAgfSxcbiAgICAgIGxhc3Q6IHtcbiAgICAgICAgeDogd2luZG93LmlubmVyV2lkdGggLyAyLFxuICAgICAgICB5OiB3aW5kb3cuaW5uZXJIZWlnaHQgLyAyXG4gICAgICB9LFxuICAgICAgZGVsdGE6IHtcbiAgICAgICAgeDogMCxcbiAgICAgICAgeTogMFxuICAgICAgfSxcbiAgICAgIHByb2dyZXNzOiB7XG4gICAgICAgIHg6IDAuNSxcbiAgICAgICAgeTogMC41XG4gICAgICB9LFxuICAgICAgbWF4OiB7XG4gICAgICAgIHg6IHdpbmRvdy5pbm5lcldpZHRoLFxuICAgICAgICB5OiB3aW5kb3cuaW5uZXJIZWlnaHRcbiAgICAgIH1cbiAgICB9LFxuICAgIGluaXQoKSB7XG4gICAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlZW50ZXJcIiwgaGFuZGxlRXZlbnQsIHtcbiAgICAgICAgb25jZTogdHJ1ZSxcbiAgICAgICAgY2FwdHVyZTogdHJ1ZVxuICAgICAgfSk7XG4gICAgICBjb25zdCBvcHRpb25zID0geyBwYXNzaXZlOiB0cnVlLCBjYXB0dXJlOiB0cnVlIH07XG4gICAgICBldmVudHMuZm9yRWFjaCgoZXZlbnQpID0+IHtcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgaGFuZGxlRXZlbnQsIG9wdGlvbnMpO1xuICAgICAgfSk7XG4gICAgfSxcbiAgICBraWxsKCkge1xuICAgICAgZXZlbnRzLmZvckVhY2goKGV2ZW50KSA9PiB7XG4gICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQsIGhhbmRsZUV2ZW50KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiB7XG4gICAgYWRkLFxuICAgIHJlbW92ZSxcbiAgICBoYXMsXG4gICAgcHJvcHM6ICgpID0+IHByb3BzXG4gIH07XG59XG5sZXQgcG9pbnRlcjtcbmZ1bmN0aW9uIHVzZVBvaW50ZXIoKSB7XG4gIGlmICghcG9pbnRlcikge1xuICAgIHBvaW50ZXIgPSBjcmVhdGVQb2ludGVyU2VydmljZSgpO1xuICB9XG4gIHJldHVybiBwb2ludGVyO1xufVxuZXhwb3J0IHtcbiAgdXNlUG9pbnRlciBhcyBkZWZhdWx0XG59O1xuIiwiaW1wb3J0IHsgdXNlU2VydmljZSB9IGZyb20gXCIuL3NlcnZpY2UuanNcIjtcbmltcG9ydCB7IGdldFJhZiBhcyBnZXRSZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfSBmcm9tIFwiLi4vdXRpbHMvbmV4dEZyYW1lLmpzXCI7XG5pbXBvcnQgeyB1c2VTY2hlZHVsZXIgfSBmcm9tIFwiLi4vdXRpbHMvc2NoZWR1bGVyLmpzXCI7XG5pbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSBcIi4uL3V0aWxzL2lzLmpzXCI7XG5jb25zdCBzY2hlZHVsZXIgPSB1c2VTY2hlZHVsZXIoW1widXBkYXRlXCIsIFwicmVuZGVyXCJdKTtcbmZ1bmN0aW9uIGNyZWF0ZVJhZlNlcnZpY2UoKSB7XG4gIGxldCBpc1RpY2tpbmcgPSBmYWxzZTtcbiAgY29uc3QgUkFGID0gZ2V0UmVxdWVzdEFuaW1hdGlvbkZyYW1lKCk7XG4gIGZ1bmN0aW9uIHRyaWdnZXIocHJvcHMyKSB7XG4gICAgY2FsbGJhY2tzLmZvckVhY2goZnVuY3Rpb24gZm9yRWFjaENhbGxiYWNrKGNhbGxiYWNrKSB7XG4gICAgICBzY2hlZHVsZXIudXBkYXRlKGZ1bmN0aW9uIHJhZlVwZGF0ZSgpIHtcbiAgICAgICAgY29uc3QgcmVuZGVyID0gY2FsbGJhY2socHJvcHMyKTtcbiAgICAgICAgaWYgKGlzRnVuY3Rpb24ocmVuZGVyKSkge1xuICAgICAgICAgIHNjaGVkdWxlci5yZW5kZXIoZnVuY3Rpb24gcmFmUmVuZGVyKCkge1xuICAgICAgICAgICAgcmVuZGVyKHByb3BzMik7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG4gIGZ1bmN0aW9uIGxvb3AoKSB7XG4gICAgcHJvcHMudGltZSA9IHBlcmZvcm1hbmNlLm5vdygpO1xuICAgIHRyaWdnZXIocHJvcHMpO1xuICAgIGlmICghaXNUaWNraW5nKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIFJBRihsb29wKTtcbiAgfVxuICBjb25zdCB7IGFkZCwgcmVtb3ZlLCBoYXMsIHByb3BzLCBjYWxsYmFja3MgfSA9IHVzZVNlcnZpY2Uoe1xuICAgIHByb3BzOiB7XG4gICAgICB0aW1lOiBwZXJmb3JtYW5jZS5ub3coKVxuICAgIH0sXG4gICAgaW5pdCgpIHtcbiAgICAgIGlzVGlja2luZyA9IHRydWU7XG4gICAgICBSQUYobG9vcCk7XG4gICAgfSxcbiAgICBraWxsKCkge1xuICAgICAgaXNUaWNraW5nID0gZmFsc2U7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHtcbiAgICBhZGQsXG4gICAgcmVtb3ZlLFxuICAgIGhhcyxcbiAgICBwcm9wczogKCkgPT4gcHJvcHNcbiAgfTtcbn1cbmxldCByYWY7XG5mdW5jdGlvbiB1c2VSYWYoKSB7XG4gIGlmICghcmFmKSB7XG4gICAgcmFmID0gY3JlYXRlUmFmU2VydmljZSgpO1xuICB9XG4gIHJldHVybiByYWY7XG59XG5leHBvcnQge1xuICB1c2VSYWYgYXMgZGVmYXVsdFxufTtcbiIsImltcG9ydCB7IHVzZVNlcnZpY2UgfSBmcm9tIFwiLi9zZXJ2aWNlLmpzXCI7XG5pbXBvcnQgZGVib3VuY2UgZnJvbSBcIi4uL3V0aWxzL2RlYm91bmNlLmpzXCI7XG5sZXQgYnJlYWtwb2ludEVsZW1lbnQ7XG5sZXQgYnJlYWtwb2ludHMgPSBbXTtcbmZ1bmN0aW9uIGdldEJyZWFrcG9pbnRFbGVtZW50KCkge1xuICBpZiAoIWJyZWFrcG9pbnRFbGVtZW50KSB7XG4gICAgYnJlYWtwb2ludEVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiW2RhdGEtYnJlYWtwb2ludF1cIik7XG4gIH1cbiAgcmV0dXJuIGJyZWFrcG9pbnRFbGVtZW50O1xufVxuZnVuY3Rpb24gZ2V0QnJlYWtwb2ludCgpIHtcbiAgcmV0dXJuIGdldEJyZWFrcG9pbnRFbGVtZW50KCkgPyB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShnZXRCcmVha3BvaW50RWxlbWVudCgpLCBcIjo6YmVmb3JlXCIpLmdldFByb3BlcnR5VmFsdWUoXCJjb250ZW50XCIpLnJlcGxhY2VBbGwoJ1wiJywgXCJcIikgOiB2b2lkIDA7XG59XG5mdW5jdGlvbiBnZXRCcmVha3BvaW50cygpIHtcbiAgaWYgKCFnZXRCcmVha3BvaW50RWxlbWVudCgpIHx8IGJyZWFrcG9pbnRzLmxlbmd0aCkge1xuICAgIHJldHVybiBicmVha3BvaW50cztcbiAgfVxuICBicmVha3BvaW50cyA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGdldEJyZWFrcG9pbnRFbGVtZW50KCksIFwiOjphZnRlclwiKS5nZXRQcm9wZXJ0eVZhbHVlKFwiY29udGVudFwiKS5yZXBsYWNlQWxsKCdcIicsIFwiXCIpLnNwbGl0KFwiLFwiKTtcbiAgcmV0dXJuIGJyZWFrcG9pbnRzO1xufVxuZnVuY3Rpb24gY3JlYXRlUmVzaXplU2VydmljZSgpIHtcbiAgZnVuY3Rpb24gdXBkYXRlUHJvcHMoKSB7XG4gICAgcHJvcHMud2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aDtcbiAgICBwcm9wcy5oZWlnaHQgPSB3aW5kb3cuaW5uZXJIZWlnaHQ7XG4gICAgcHJvcHMucmF0aW8gPSB3aW5kb3cuaW5uZXJXaWR0aCAvIHdpbmRvdy5pbm5lckhlaWdodDtcbiAgICBwcm9wcy5vcmllbnRhdGlvbiA9IFwic3F1YXJlXCI7XG4gICAgaWYgKHByb3BzLnJhdGlvID4gMSkge1xuICAgICAgcHJvcHMub3JpZW50YXRpb24gPSBcImxhbmRzY2FwZVwiO1xuICAgIH1cbiAgICBpZiAocHJvcHMucmF0aW8gPCAxKSB7XG4gICAgICBwcm9wcy5vcmllbnRhdGlvbiA9IFwicG9ydHJhaXRcIjtcbiAgICB9XG4gICAgcmV0dXJuIHByb3BzO1xuICB9XG4gIGNvbnN0IG9uUmVzaXplID0gZGVib3VuY2UoKCkgPT4ge1xuICAgIHRyaWdnZXIodXBkYXRlUHJvcHMoKSk7XG4gIH0pO1xuICBjb25zdCB7IGFkZCwgcmVtb3ZlLCBoYXMsIHRyaWdnZXIsIHByb3BzIH0gPSB1c2VTZXJ2aWNlKHtcbiAgICBwcm9wczoge1xuICAgICAgd2lkdGg6IHdpbmRvdy5pbm5lcldpZHRoLFxuICAgICAgaGVpZ2h0OiB3aW5kb3cuaW5uZXJIZWlnaHQsXG4gICAgICByYXRpbzogd2luZG93LmlubmVyV2lkdGggLyB3aW5kb3cuaW5uZXJIZWlnaHQsXG4gICAgICBvcmllbnRhdGlvbjogXCJzcXVhcmVcIixcbiAgICAgIGdldCBicmVha3BvaW50KCkge1xuICAgICAgICByZXR1cm4gZ2V0QnJlYWtwb2ludCgpO1xuICAgICAgfSxcbiAgICAgIGdldCBicmVha3BvaW50cygpIHtcbiAgICAgICAgcmV0dXJuIGdldEJyZWFrcG9pbnRzKCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBpbml0KCkge1xuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgb25SZXNpemUpO1xuICAgIH0sXG4gICAga2lsbCgpIHtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwicmVzaXplXCIsIG9uUmVzaXplKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4ge1xuICAgIGFkZCxcbiAgICByZW1vdmUsXG4gICAgaGFzLFxuICAgIHByb3BzOiAoKSA9PiBwcm9wc1xuICB9O1xufVxubGV0IHJlc2l6ZTtcbmZ1bmN0aW9uIHVzZVJlc2l6ZSgpIHtcbiAgaWYgKCFyZXNpemUpIHtcbiAgICByZXNpemUgPSBjcmVhdGVSZXNpemVTZXJ2aWNlKCk7XG4gIH1cbiAgcmV0dXJuIHJlc2l6ZTtcbn1cbmV4cG9ydCB7XG4gIHVzZVJlc2l6ZSBhcyBkZWZhdWx0XG59O1xuIiwiaW1wb3J0IHsgdXNlU2VydmljZSB9IGZyb20gXCIuL3NlcnZpY2UuanNcIjtcbmltcG9ydCBkZWJvdW5jZSBmcm9tIFwiLi4vdXRpbHMvZGVib3VuY2UuanNcIjtcbmZ1bmN0aW9uIGNyZWF0ZVNjcm9sbFNlcnZpY2UoKSB7XG4gIGZ1bmN0aW9uIHVwZGF0ZVByb3BzKCkge1xuICAgIGNvbnN0IHlMYXN0ID0gcHJvcHMueTtcbiAgICBjb25zdCB4TGFzdCA9IHByb3BzLng7XG4gICAgaWYgKHdpbmRvdy5wYWdlWU9mZnNldCAhPT0gcHJvcHMueSkge1xuICAgICAgcHJvcHMueSA9IHdpbmRvdy5wYWdlWU9mZnNldDtcbiAgICB9XG4gICAgaWYgKHdpbmRvdy5wYWdlWE9mZnNldCAhPT0gcHJvcHMueCkge1xuICAgICAgcHJvcHMueCA9IHdpbmRvdy5wYWdlWE9mZnNldDtcbiAgICB9XG4gICAgcHJvcHMuY2hhbmdlZC54ID0gcHJvcHMueCAhPT0geExhc3Q7XG4gICAgcHJvcHMuY2hhbmdlZC55ID0gcHJvcHMueSAhPT0geUxhc3Q7XG4gICAgcHJvcHMubGFzdC54ID0geExhc3Q7XG4gICAgcHJvcHMubGFzdC55ID0geUxhc3Q7XG4gICAgcHJvcHMuZGVsdGEueCA9IHByb3BzLnggLSB4TGFzdDtcbiAgICBwcm9wcy5kZWx0YS55ID0gcHJvcHMueSAtIHlMYXN0O1xuICAgIHByb3BzLm1heC54ID0gKGRvY3VtZW50LnNjcm9sbGluZ0VsZW1lbnQgfHwgZG9jdW1lbnQuYm9keSkuc2Nyb2xsV2lkdGggLSB3aW5kb3cuaW5uZXJXaWR0aDtcbiAgICBwcm9wcy5tYXgueSA9IChkb2N1bWVudC5zY3JvbGxpbmdFbGVtZW50IHx8IGRvY3VtZW50LmJvZHkpLnNjcm9sbEhlaWdodCAtIHdpbmRvdy5pbm5lckhlaWdodDtcbiAgICBwcm9wcy5wcm9ncmVzcy54ID0gcHJvcHMubWF4LnggPT09IDAgPyAxIDogcHJvcHMueCAvIHByb3BzLm1heC54O1xuICAgIHByb3BzLnByb2dyZXNzLnkgPSBwcm9wcy5tYXgueSA9PT0gMCA/IDEgOiBwcm9wcy55IC8gcHJvcHMubWF4Lnk7XG4gICAgcHJvcHMuZGlyZWN0aW9uLnggPSBwcm9wcy54ID4geExhc3QgPyBcIlJJR0hUXCIgOiBwcm9wcy54IDwgeExhc3QgPyBcIkxFRlRcIiA6IFwiTk9ORVwiO1xuICAgIHByb3BzLmRpcmVjdGlvbi55ID0gcHJvcHMueSA+IHlMYXN0ID8gXCJET1dOXCIgOiBwcm9wcy55IDwgeUxhc3QgPyBcIlVQXCIgOiBcIk5PTkVcIjtcbiAgICByZXR1cm4gcHJvcHM7XG4gIH1cbiAgY29uc3Qgb25TY3JvbGxEZWJvdW5jZWQgPSBkZWJvdW5jZSgoKSA9PiB7XG4gICAgdHJpZ2dlcih1cGRhdGVQcm9wcygpKTtcbiAgfSwgMTAwKTtcbiAgZnVuY3Rpb24gb25TY3JvbGwoKSB7XG4gICAgdHJpZ2dlcih1cGRhdGVQcm9wcygpKTtcbiAgICBvblNjcm9sbERlYm91bmNlZCgpO1xuICB9XG4gIGNvbnN0IHsgYWRkLCByZW1vdmUsIGhhcywgcHJvcHMsIHRyaWdnZXIgfSA9IHVzZVNlcnZpY2Uoe1xuICAgIHByb3BzOiB7XG4gICAgICB4OiB3aW5kb3cucGFnZVhPZmZzZXQsXG4gICAgICB5OiB3aW5kb3cucGFnZVlPZmZzZXQsXG4gICAgICBjaGFuZ2VkOiB7XG4gICAgICAgIHg6IGZhbHNlLFxuICAgICAgICB5OiBmYWxzZVxuICAgICAgfSxcbiAgICAgIGxhc3Q6IHtcbiAgICAgICAgeDogd2luZG93LnBhZ2VYT2Zmc2V0LFxuICAgICAgICB5OiB3aW5kb3cucGFnZVlPZmZzZXRcbiAgICAgIH0sXG4gICAgICBkZWx0YToge1xuICAgICAgICB4OiAwLFxuICAgICAgICB5OiAwXG4gICAgICB9LFxuICAgICAgbWF4OiB7XG4gICAgICAgIHg6IChkb2N1bWVudC5zY3JvbGxpbmdFbGVtZW50IHx8IGRvY3VtZW50LmJvZHkpLnNjcm9sbFdpZHRoIC0gd2luZG93LmlubmVyV2lkdGgsXG4gICAgICAgIHk6IChkb2N1bWVudC5zY3JvbGxpbmdFbGVtZW50IHx8IGRvY3VtZW50LmJvZHkpLnNjcm9sbEhlaWdodCAtIHdpbmRvdy5pbm5lckhlaWdodFxuICAgICAgfSxcbiAgICAgIHByb2dyZXNzOiB7XG4gICAgICAgIHg6IDAsXG4gICAgICAgIHk6IDBcbiAgICAgIH0sXG4gICAgICBkaXJlY3Rpb246IHtcbiAgICAgICAgeDogXCJOT05FXCIsXG4gICAgICAgIHk6IFwiTk9ORVwiXG4gICAgICB9XG4gICAgfSxcbiAgICBpbml0KCkge1xuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInNjcm9sbFwiLCBvblNjcm9sbCwgeyBwYXNzaXZlOiB0cnVlLCBjYXB0dXJlOiB0cnVlIH0pO1xuICAgIH0sXG4gICAga2lsbCgpIHtcbiAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJzY3JvbGxcIiwgb25TY3JvbGwpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiB7XG4gICAgYWRkLFxuICAgIHJlbW92ZSxcbiAgICBoYXMsXG4gICAgcHJvcHM6ICgpID0+IHByb3BzXG4gIH07XG59XG5sZXQgc2Nyb2xsO1xuZnVuY3Rpb24gdXNlU2Nyb2xsKCkge1xuICBpZiAoIXNjcm9sbCkge1xuICAgIHNjcm9sbCA9IGNyZWF0ZVNjcm9sbFNlcnZpY2UoKTtcbiAgfVxuICByZXR1cm4gc2Nyb2xsO1xufVxuZXhwb3J0IHtcbiAgdXNlU2Nyb2xsIGFzIGRlZmF1bHRcbn07XG4iLCJmdW5jdGlvbiB1c2VTZXJ2aWNlKG9wdGlvbnMpIHtcbiAgY29uc3QgY2FsbGJhY2tzID0gLyogQF9fUFVSRV9fICovIG5ldyBNYXAoKTtcbiAgbGV0IGlzSW5pdCA9IGZhbHNlO1xuICBjb25zdCB7IGluaXQsIGtpbGwsIHByb3BzIH0gPSBvcHRpb25zO1xuICBmdW5jdGlvbiBoYXMoa2V5KSB7XG4gICAgcmV0dXJuIGNhbGxiYWNrcy5oYXMoa2V5KTtcbiAgfVxuICBmdW5jdGlvbiBnZXQoa2V5KSB7XG4gICAgcmV0dXJuIGNhbGxiYWNrcy5nZXQoa2V5KTtcbiAgfVxuICBmdW5jdGlvbiBhZGQoa2V5LCBjYWxsYmFjaykge1xuICAgIGlmIChoYXMoa2V5KSkge1xuICAgICAgY29uc29sZS53YXJuKGBUaGUga2V5IFxcYCR7a2V5fVxcYCBoYXMgYWxyZWFkeSBiZWVuIGFkZGVkLmApO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoY2FsbGJhY2tzLnNpemUgPT09IDAgJiYgIWlzSW5pdCkge1xuICAgICAgaW5pdCgpO1xuICAgICAgaXNJbml0ID0gdHJ1ZTtcbiAgICB9XG4gICAgY2FsbGJhY2tzLnNldChrZXksIGNhbGxiYWNrKTtcbiAgfVxuICBmdW5jdGlvbiByZW1vdmUoa2V5KSB7XG4gICAgY2FsbGJhY2tzLmRlbGV0ZShrZXkpO1xuICAgIGlmIChjYWxsYmFja3Muc2l6ZSA9PT0gMCAmJiBpc0luaXQpIHtcbiAgICAgIGtpbGwoKTtcbiAgICAgIGlzSW5pdCA9IGZhbHNlO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiB0cmlnZ2VyKHApIHtcbiAgICBjYWxsYmFja3MuZm9yRWFjaChmdW5jdGlvbiBmb3JFYWNoQ2FsbGJhY2soY2FsbGJhY2spIHtcbiAgICAgIGNhbGxiYWNrKHApO1xuICAgIH0pO1xuICB9XG4gIHJldHVybiB7XG4gICAgY2FsbGJhY2tzLFxuICAgIHByb3BzLFxuICAgIGFkZCxcbiAgICByZW1vdmUsXG4gICAgaGFzLFxuICAgIGdldCxcbiAgICB0cmlnZ2VyXG4gIH07XG59XG5leHBvcnQge1xuICB1c2VTZXJ2aWNlXG59O1xuIiwiaW1wb3J0IHsgaXNBcnJheSB9IGZyb20gXCIuLi9pcy5qc1wiO1xuZnVuY3Rpb24gc2V0Q2xhc3NlcyhlbGVtZW50LCBjbGFzc05hbWVzLCBtZXRob2QsIGZvcmNlVG9nZ2xlKSB7XG4gIGlmICghZWxlbWVudCB8fCAhY2xhc3NOYW1lcykge1xuICAgIHJldHVybjtcbiAgfVxuICBjb25zdCBub3JtYWxpemVkQ2xhc3NOYW1lcyA9IGlzQXJyYXkoY2xhc3NOYW1lcykgPyBjbGFzc05hbWVzIDogY2xhc3NOYW1lcy5zcGxpdChcIiBcIik7XG4gIGlmIChtZXRob2QgIT09IFwidG9nZ2xlXCIpIHtcbiAgICBlbGVtZW50LmNsYXNzTGlzdFttZXRob2RdKC4uLm5vcm1hbGl6ZWRDbGFzc05hbWVzKTtcbiAgfSBlbHNlIHtcbiAgICBub3JtYWxpemVkQ2xhc3NOYW1lcy5mb3JFYWNoKChjbGFzc05hbWUpID0+IGVsZW1lbnQuY2xhc3NMaXN0W21ldGhvZF0oY2xhc3NOYW1lLCBmb3JjZVRvZ2dsZSkpO1xuICB9XG59XG5mdW5jdGlvbiBhZGQoZWxlbWVudCwgY2xhc3NOYW1lcykge1xuICBzZXRDbGFzc2VzKGVsZW1lbnQsIGNsYXNzTmFtZXMsIFwiYWRkXCIpO1xufVxuZnVuY3Rpb24gcmVtb3ZlKGVsZW1lbnQsIGNsYXNzTmFtZXMpIHtcbiAgc2V0Q2xhc3NlcyhlbGVtZW50LCBjbGFzc05hbWVzLCBcInJlbW92ZVwiKTtcbn1cbmZ1bmN0aW9uIHRvZ2dsZShlbGVtZW50LCBjbGFzc05hbWVzLCBmb3JjZSkge1xuICBzZXRDbGFzc2VzKGVsZW1lbnQsIGNsYXNzTmFtZXMsIFwidG9nZ2xlXCIsIGZvcmNlKTtcbn1cbmV4cG9ydCB7XG4gIGFkZCxcbiAgcmVtb3ZlLFxuICB0b2dnbGVcbn07XG4iLCJmdW5jdGlvbiBnZXRPZmZzZXRTaXplcyhlbGVtZW50KSB7XG4gIGxldCBwYXJlbnQgPSBlbGVtZW50O1xuICBsZXQgeCA9IC13aW5kb3cucGFnZVhPZmZzZXQ7XG4gIGxldCB5ID0gLXdpbmRvdy5wYWdlWU9mZnNldDtcbiAgd2hpbGUgKHBhcmVudCkge1xuICAgIHggKz0gcGFyZW50Lm9mZnNldExlZnQ7XG4gICAgeSArPSBwYXJlbnQub2Zmc2V0VG9wO1xuICAgIHBhcmVudCA9IHBhcmVudC5vZmZzZXRQYXJlbnQ7XG4gIH1cbiAgY29uc3Qgd2lkdGggPSBlbGVtZW50Lm9mZnNldFdpZHRoO1xuICBjb25zdCBoZWlnaHQgPSBlbGVtZW50Lm9mZnNldFdpZHRoO1xuICByZXR1cm4ge1xuICAgIHgsXG4gICAgeSxcbiAgICB3aWR0aCxcbiAgICBoZWlnaHQsXG4gICAgdG9wOiB5LFxuICAgIHJpZ2h0OiB3aWR0aCArIHgsXG4gICAgYm90dG9tOiBoZWlnaHQgKyB5LFxuICAgIGxlZnQ6IHhcbiAgfTtcbn1cbmV4cG9ydCB7XG4gIGdldE9mZnNldFNpemVzIGFzIGRlZmF1bHRcbn07XG4iLCJmdW5jdGlvbiBkZWJvdW5jZShmbiwgZGVsYXkgPSAzMDApIHtcbiAgbGV0IHRpbWVvdXQ7XG4gIHJldHVybiBmdW5jdGlvbiBkZWJvdW5jZWQoLi4uYXJncykge1xuICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgICB0aW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBmbiguLi5hcmdzKTtcbiAgICB9LCBkZWxheSk7XG4gIH07XG59XG5leHBvcnQge1xuICBkZWJvdW5jZSBhcyBkZWZhdWx0XG59O1xuIiwiZnVuY3Rpb24gaGFzV2luZG93KCkge1xuICByZXR1cm4gdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIjtcbn1cbmV4cG9ydCB7XG4gIGhhc1dpbmRvd1xufTtcbiIsImNvbnN0IGlzRGV2ID0gdHlwZW9mIF9fREVWX18gIT09IFwidW5kZWZpbmVkXCIgJiYgX19ERVZfXztcbmNvbnN0IGlzRnVuY3Rpb24gPSAodmFsdWUpID0+IHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiO1xuY29uc3QgaXNEZWZpbmVkID0gKHZhbHVlKSA9PiB0eXBlb2YgdmFsdWUgIT09IFwidW5kZWZpbmVkXCI7XG5jb25zdCBpc1N0cmluZyA9ICh2YWx1ZSkgPT4gdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiO1xuY29uc3QgaXNPYmplY3QgPSAodmFsdWUpID0+IHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIiAmJiAhIXZhbHVlICYmIHZhbHVlLnRvU3RyaW5nKCkgPT09IFwiW29iamVjdCBPYmplY3RdXCI7XG5jb25zdCBpc051bWJlciA9ICh2YWx1ZSkgPT4gdHlwZW9mIHZhbHVlID09PSBcIm51bWJlclwiO1xuY29uc3QgaXNCb29sZWFuID0gKHZhbHVlKSA9PiB0eXBlb2YgdmFsdWUgPT09IFwiYm9vbGVhblwiO1xuY29uc3QgaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XG5leHBvcnQge1xuICBpc0FycmF5LFxuICBpc0Jvb2xlYW4sXG4gIGlzRGVmaW5lZCxcbiAgaXNEZXYsXG4gIGlzRnVuY3Rpb24sXG4gIGlzTnVtYmVyLFxuICBpc09iamVjdCxcbiAgaXNTdHJpbmdcbn07XG4iLCJ2YXIga2V5Q29kZXNfZGVmYXVsdCA9IHtcbiAgRU5URVI6IDEzLFxuICBTUEFDRTogMzIsXG4gIFRBQjogOSxcbiAgRVNDOiAyNyxcbiAgTEVGVDogMzcsXG4gIFVQOiAzOCxcbiAgUklHSFQ6IDM5LFxuICBET1dOOiA0MFxufTtcbmV4cG9ydCB7XG4gIGtleUNvZGVzX2RlZmF1bHQgYXMgZGVmYXVsdFxufTtcbiIsImZ1bmN0aW9uIGNsYW1wKHZhbHVlLCBtaW4sIG1heCkge1xuICByZXR1cm4gbWluIDwgbWF4ID8gdmFsdWUgPCBtaW4gPyBtaW4gOiB2YWx1ZSA+IG1heCA/IG1heCA6IHZhbHVlIDogdmFsdWUgPCBtYXggPyBtYXggOiB2YWx1ZSA+IG1pbiA/IG1pbiA6IHZhbHVlO1xufVxuZXhwb3J0IHtcbiAgY2xhbXAgYXMgZGVmYXVsdFxufTtcbiIsImltcG9ydCBjbGFtcCBmcm9tIFwiLi9jbGFtcC5qc1wiO1xuZnVuY3Rpb24gY2xhbXAwMSh2YWx1ZSkge1xuICByZXR1cm4gY2xhbXAodmFsdWUsIDAsIDEpO1xufVxuZXhwb3J0IHtcbiAgY2xhbXAwMSBhcyBkZWZhdWx0XG59O1xuIiwiZnVuY3Rpb24gY3JlYXRlRWFzZU91dChlYXNlSW4pIHtcbiAgcmV0dXJuIChwcm9ncmVzcykgPT4gMSAtIGVhc2VJbigxIC0gcHJvZ3Jlc3MpO1xufVxuZnVuY3Rpb24gY3JlYXRlRWFzZUluT3V0KGVhc2VJbikge1xuICByZXR1cm4gKHByb2dyZXNzKSA9PiBwcm9ncmVzcyA9PT0gMCA/IDAgOiBwcm9ncmVzcyA9PT0gMSA/IDEgOiBwcm9ncmVzcyA8IDAuNSA/IGVhc2VJbihwcm9ncmVzcyAqIDIpIC8gMiA6IDEgLSBlYXNlSW4oKDEgLSBwcm9ncmVzcykgKiAyKSAvIDI7XG59XG5leHBvcnQge1xuICBjcmVhdGVFYXNlSW5PdXQsXG4gIGNyZWF0ZUVhc2VPdXRcbn07XG4iLCJmdW5jdGlvbiBkYW1wKHRhcmdldFZhbHVlLCBjdXJyZW50VmFsdWUsIGZhY3RvciA9IDAuNSwgcHJlY2lzaW9uID0gMC4wMSkge1xuICByZXR1cm4gTWF0aC5hYnModGFyZ2V0VmFsdWUgLSBjdXJyZW50VmFsdWUpIDwgcHJlY2lzaW9uID8gdGFyZ2V0VmFsdWUgOiBjdXJyZW50VmFsdWUgKyAodGFyZ2V0VmFsdWUgLSBjdXJyZW50VmFsdWUpICogZmFjdG9yO1xufVxuZXhwb3J0IHtcbiAgZGFtcCBhcyBkZWZhdWx0XG59O1xuIiwiaW1wb3J0IHsgY3JlYXRlRWFzZU91dCwgY3JlYXRlRWFzZUluT3V0IH0gZnJvbSBcIi4vY3JlYXRlRWFzZXMuanNcIjtcbmZ1bmN0aW9uIGVhc2VJblF1YWQocHJvZ3Jlc3MpIHtcbiAgcmV0dXJuIHByb2dyZXNzICoqIDI7XG59XG5jb25zdCBlYXNlT3V0UXVhZCA9IGNyZWF0ZUVhc2VPdXQoZWFzZUluUXVhZCk7XG5jb25zdCBlYXNlSW5PdXRRdWFkID0gY3JlYXRlRWFzZUluT3V0KGVhc2VJblF1YWQpO1xuZnVuY3Rpb24gZWFzZUluQ3ViaWMocHJvZ3Jlc3MpIHtcbiAgcmV0dXJuIHByb2dyZXNzICoqIDM7XG59XG5jb25zdCBlYXNlT3V0Q3ViaWMgPSBjcmVhdGVFYXNlT3V0KGVhc2VJbkN1YmljKTtcbmNvbnN0IGVhc2VJbk91dEN1YmljID0gY3JlYXRlRWFzZUluT3V0KGVhc2VJbkN1YmljKTtcbmZ1bmN0aW9uIGVhc2VJblF1YXJ0KHByb2dyZXNzKSB7XG4gIHJldHVybiBwcm9ncmVzcyAqKiA0O1xufVxuY29uc3QgZWFzZU91dFF1YXJ0ID0gY3JlYXRlRWFzZU91dChlYXNlSW5RdWFydCk7XG5jb25zdCBlYXNlSW5PdXRRdWFydCA9IGNyZWF0ZUVhc2VJbk91dChlYXNlSW5RdWFydCk7XG5mdW5jdGlvbiBlYXNlSW5RdWludChwcm9ncmVzcykge1xuICByZXR1cm4gcHJvZ3Jlc3MgKiogNTtcbn1cbmNvbnN0IGVhc2VPdXRRdWludCA9IGNyZWF0ZUVhc2VPdXQoZWFzZUluUXVpbnQpO1xuY29uc3QgZWFzZUluT3V0UXVpbnQgPSBjcmVhdGVFYXNlSW5PdXQoZWFzZUluUXVpbnQpO1xuZnVuY3Rpb24gZWFzZUluU2luZShwcm9ncmVzcykge1xuICByZXR1cm4gcHJvZ3Jlc3MgPT09IDEgPyAxIDogLU1hdGguY29zKHByb2dyZXNzICogTWF0aC5QSSAvIDIpICsgMTtcbn1cbmNvbnN0IGVhc2VPdXRTaW5lID0gY3JlYXRlRWFzZU91dChlYXNlSW5TaW5lKTtcbmNvbnN0IGVhc2VJbk91dFNpbmUgPSBjcmVhdGVFYXNlSW5PdXQoZWFzZUluU2luZSk7XG5mdW5jdGlvbiBlYXNlSW5DaXJjKHByb2dyZXNzKSB7XG4gIHJldHVybiAtKE1hdGguc3FydCgxIC0gcHJvZ3Jlc3MgKiBwcm9ncmVzcykgLSAxKTtcbn1cbmNvbnN0IGVhc2VPdXRDaXJjID0gY3JlYXRlRWFzZU91dChlYXNlSW5DaXJjKTtcbmNvbnN0IGVhc2VJbk91dENpcmMgPSBjcmVhdGVFYXNlSW5PdXQoZWFzZUluQ2lyYyk7XG5mdW5jdGlvbiBlYXNlSW5FeHBvKHByb2dyZXNzKSB7XG4gIHJldHVybiAyICoqICgxMCAqIChwcm9ncmVzcyAtIDEpKTtcbn1cbmNvbnN0IGVhc2VPdXRFeHBvID0gY3JlYXRlRWFzZU91dChlYXNlSW5FeHBvKTtcbmNvbnN0IGVhc2VJbk91dEV4cG8gPSBjcmVhdGVFYXNlSW5PdXQoZWFzZUluRXhwbyk7XG5leHBvcnQge1xuICBlYXNlSW5DaXJjLFxuICBlYXNlSW5DdWJpYyxcbiAgZWFzZUluRXhwbyxcbiAgZWFzZUluT3V0Q2lyYyxcbiAgZWFzZUluT3V0Q3ViaWMsXG4gIGVhc2VJbk91dEV4cG8sXG4gIGVhc2VJbk91dFF1YWQsXG4gIGVhc2VJbk91dFF1YXJ0LFxuICBlYXNlSW5PdXRRdWludCxcbiAgZWFzZUluT3V0U2luZSxcbiAgZWFzZUluUXVhZCxcbiAgZWFzZUluUXVhcnQsXG4gIGVhc2VJblF1aW50LFxuICBlYXNlSW5TaW5lLFxuICBlYXNlT3V0Q2lyYyxcbiAgZWFzZU91dEN1YmljLFxuICBlYXNlT3V0RXhwbyxcbiAgZWFzZU91dFF1YWQsXG4gIGVhc2VPdXRRdWFydCxcbiAgZWFzZU91dFF1aW50LFxuICBlYXNlT3V0U2luZVxufTtcbiIsImZ1bmN0aW9uIGxlcnAobWluLCBtYXgsIHJhdGlvKSB7XG4gIHJldHVybiAoMSAtIHJhdGlvKSAqIG1pbiArIHJhdGlvICogbWF4O1xufVxuZXhwb3J0IHtcbiAgbGVycCBhcyBkZWZhdWx0XG59O1xuIiwiZnVuY3Rpb24gbWFwKHZhbHVlLCBpbnB1dE1pbiwgaW5wdXRNYXgsIG91dHB1dE1pbiwgb3V0cHV0TWF4KSB7XG4gIHJldHVybiAodmFsdWUgLSBpbnB1dE1pbikgKiAob3V0cHV0TWF4IC0gb3V0cHV0TWluKSAvIChpbnB1dE1heCAtIGlucHV0TWluKSArIG91dHB1dE1pbjtcbn1cbmV4cG9ydCB7XG4gIG1hcCBhcyBkZWZhdWx0XG59O1xuIiwiaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gXCIuL2lzLmpzXCI7XG5pbXBvcnQgeyBoYXNXaW5kb3cgfSBmcm9tIFwiLi9oYXMuanNcIjtcbmZ1bmN0aW9uIGdldFJhZigpIHtcbiAgcmV0dXJuIGhhc1dpbmRvdygpICYmIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPyB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lLmJpbmQod2luZG93KSA6IHNldFRpbWVvdXQ7XG59XG5mdW5jdGlvbiBnZXRDYW5jZWxSYWYoKSB7XG4gIHJldHVybiBoYXNXaW5kb3coKSAmJiB3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUgPyB3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUuYmluZCh3aW5kb3cpIDogY2xlYXJUaW1lb3V0O1xufVxuZnVuY3Rpb24gbmV4dEZyYW1lKGZuKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgIGdldFJhZigpKCgpID0+IHJlc29sdmUoaXNGdW5jdGlvbihmbikgJiYgZm4oKSkpO1xuICB9KTtcbn1cbmV4cG9ydCB7XG4gIGdldENhbmNlbFJhZixcbiAgZ2V0UmFmLFxuICBuZXh0RnJhbWVcbn07XG4iLCJmdW5jdGlvbiBub29wKCkge1xufVxuZnVuY3Rpb24gbm9vcFZhbHVlKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZTtcbn1cbmV4cG9ydCB7XG4gIG5vb3AsXG4gIG5vb3BWYWx1ZVxufTtcbiIsImltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tIFwiLi4vaXMuanNcIjtcbmZ1bmN0aW9uIGdldEFsbFByb3BlcnRpZXMob2JqZWN0LCBwcm9wcyA9IFtdLCB0ZXN0Rm4gPSBudWxsKSB7XG4gIGNvbnN0IHByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iamVjdCk7XG4gIGlmIChwcm90byA9PT0gT2JqZWN0LnByb3RvdHlwZSB8fCBwcm90byA9PT0gbnVsbCkge1xuICAgIHJldHVybiBwcm9wcztcbiAgfVxuICBsZXQgZm91bmRQcm9wcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHByb3RvKTtcbiAgaWYgKGlzRnVuY3Rpb24odGVzdEZuKSkge1xuICAgIGZvdW5kUHJvcHMgPSBmb3VuZFByb3BzLmZpbHRlcigobmFtZSkgPT4gdGVzdEZuKG5hbWUsIHByb3RvKSk7XG4gIH1cbiAgZm91bmRQcm9wcyA9IGZvdW5kUHJvcHMubWFwKChuYW1lKSA9PiBbbmFtZSwgcHJvdG9dKS5yZWR1Y2UoKGFjYywgdmFsKSA9PiBbLi4uYWNjLCB2YWxdLCBwcm9wcyk7XG4gIHJldHVybiBnZXRBbGxQcm9wZXJ0aWVzKHByb3RvLCBmb3VuZFByb3BzLCB0ZXN0Rm4pO1xufVxuZXhwb3J0IHtcbiAgZ2V0QWxsUHJvcGVydGllcyBhcyBkZWZhdWx0XG59O1xuIiwiZnVuY3Rpb24gZ2V0U2NoZWR1bGVyKHN0ZXBzKSB7XG4gIGNvbnN0IHN0ZXBzRm5zID0ge307XG4gIGNvbnN0IGFwaSA9IHt9O1xuICBsZXQgaXNTY2hlZHVsZWQgPSBmYWxzZTtcbiAgY29uc3QgcmVzb2x2ZWRQcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKCk7XG4gIGZ1bmN0aW9uIHJ1bih0YXNrcykge1xuICAgIGxldCB0YXNrO1xuICAgIHdoaWxlICh0YXNrID0gdGFza3Muc2hpZnQoKSkge1xuICAgICAgdGFzaygpO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBmbHVzaCgpIHtcbiAgICBzdGVwcy5mb3JFYWNoKGZ1bmN0aW9uIHJ1blN0ZXAoc3RlcCkge1xuICAgICAgcnVuKHN0ZXBzRm5zW3N0ZXBdKTtcbiAgICB9KTtcbiAgICBpc1NjaGVkdWxlZCA9IGZhbHNlO1xuICAgIGlmIChzdGVwcy5yZWR1Y2UoKGxlbmd0aCwgc3RlcCkgPT4gbGVuZ3RoICsgc3RlcHNGbnNbc3RlcF0ubGVuZ3RoLCAwKSA+IDApIHtcbiAgICAgIHNjaGVkdWxlRmx1c2goKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gc2NoZWR1bGVGbHVzaCgpIHtcbiAgICBpZiAoaXNTY2hlZHVsZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaXNTY2hlZHVsZWQgPSB0cnVlO1xuICAgIHJlc29sdmVkUHJvbWlzZS50aGVuKGZsdXNoKTtcbiAgfVxuICBzdGVwcy5mb3JFYWNoKChzdGVwKSA9PiB7XG4gICAgc3RlcHNGbnNbc3RlcF0gPSBbXTtcbiAgICBhcGlbc3RlcF0gPSBmdW5jdGlvbiBhZGQoZm4pIHtcbiAgICAgIHN0ZXBzRm5zW3N0ZXBdLnB1c2goZm4pO1xuICAgICAgc2NoZWR1bGVGbHVzaCgpO1xuICAgIH07XG4gIH0pO1xuICByZXR1cm4gYXBpO1xufVxuY29uc3QgaW5zdGFuY2VzID0gLyogQF9fUFVSRV9fICovIG5ldyBNYXAoKTtcbmNvbnN0IGRvbVNjaGVkdWxlclN0ZXBzID0gW1wicmVhZFwiLCBcIndyaXRlXCIsIFwiYWZ0ZXJXcml0ZVwiXTtcbmZ1bmN0aW9uIHVzZVNjaGVkdWxlcihzdGVwcyA9IGRvbVNjaGVkdWxlclN0ZXBzKSB7XG4gIGNvbnN0IGtleSA9IHN0ZXBzLmpvaW4oXCItXCIpO1xuICBpZiAoaW5zdGFuY2VzLmhhcyhrZXkpKSB7XG4gICAgcmV0dXJuIGluc3RhbmNlcy5nZXQoa2V5KTtcbiAgfVxuICBjb25zdCBzY2hlZHVsZXIgPSBnZXRTY2hlZHVsZXIoc3RlcHMpO1xuICBpbnN0YW5jZXMuc2V0KGtleSwgc2NoZWR1bGVyKTtcbiAgcmV0dXJuIHNjaGVkdWxlcjtcbn1cbmNvbnN0IGRvbVNjaGVkdWxlciA9IHVzZVNjaGVkdWxlcihkb21TY2hlZHVsZXJTdGVwcyk7XG5leHBvcnQge1xuICBkb21TY2hlZHVsZXIsXG4gIHVzZVNjaGVkdWxlclxufTtcbiIsImltcG9ydCB7IGN1YmljQmV6aWVyIH0gZnJvbSBcIkBtb3Rpb25vbmUvZWFzaW5nXCI7XG5pbXBvcnQgeyBsZXJwLCBtYXAsIGNsYW1wMDEgfSBmcm9tIFwiLi9tYXRoL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBpc0RlZmluZWQsIGlzQXJyYXkgfSBmcm9tIFwiLi9pcy5qc1wiO1xuaW1wb3J0IHsgbm9vcCwgbm9vcFZhbHVlIGFzIGxpbmVhciB9IGZyb20gXCIuL25vb3AuanNcIjtcbmltcG9ydCB1c2VSYWYgZnJvbSBcIi4uL3NlcnZpY2VzL3JhZi5qc1wiO1xubGV0IGlkID0gMDtcbmNvbnN0IFBST0dSRVNTX1BSRUNJU0lPTiA9IDFlLTQ7XG5mdW5jdGlvbiBub3JtYWxpemVFYXNlKGVhc2UpIHtcbiAgaWYgKCFpc0RlZmluZWQoZWFzZSkpIHtcbiAgICByZXR1cm4gbGluZWFyO1xuICB9XG4gIGlmIChpc0FycmF5KGVhc2UpKSB7XG4gICAgcmV0dXJuIGN1YmljQmV6aWVyKC4uLmVhc2UpO1xuICB9XG4gIHJldHVybiBlYXNlO1xufVxuZnVuY3Rpb24gdHdlZW4oY2FsbGJhY2ssIG9wdGlvbnMgPSB7fSkge1xuICB2YXIgX2E7XG4gIGNvbnN0IHJhZiA9IHVzZVJhZigpO1xuICBsZXQgcHJvZ3Jlc3NWYWx1ZSA9IDA7XG4gIGxldCBlYXNlZFByb2dyZXNzID0gMDtcbiAgY29uc3QgZWFzZSA9IG5vcm1hbGl6ZUVhc2Uob3B0aW9ucy5lYXNpbmcpO1xuICBsZXQgZHVyYXRpb24gPSAoX2EgPSBvcHRpb25zLmR1cmF0aW9uKSAhPSBudWxsID8gX2EgOiAxO1xuICBkdXJhdGlvbiAqPSAxZTM7XG4gIGxldCBzdGFydFRpbWUgPSBwZXJmb3JtYW5jZS5ub3coKTtcbiAgbGV0IGVuZFRpbWUgPSBzdGFydFRpbWUgKyBkdXJhdGlvbjtcbiAgY29uc3Qga2V5ID0gYHR3LSR7aWR9YDtcbiAgaWQgKz0gMTtcbiAgY29uc3QgeyBvblN0YXJ0ID0gbm9vcCwgb25Qcm9ncmVzcyA9IG5vb3AsIG9uRmluaXNoID0gbm9vcCB9ID0gb3B0aW9ucztcbiAgbGV0IGlzUnVubmluZyA9IGZhbHNlO1xuICBmdW5jdGlvbiBwYXVzZSgpIHtcbiAgICBpc1J1bm5pbmcgPSBmYWxzZTtcbiAgICByYWYucmVtb3ZlKGtleSk7XG4gIH1cbiAgZnVuY3Rpb24gcHJvZ3Jlc3MobmV3UHJvZ3Jlc3MpIHtcbiAgICBpZiAodHlwZW9mIG5ld1Byb2dyZXNzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICByZXR1cm4gZWFzZWRQcm9ncmVzcztcbiAgICB9XG4gICAgcHJvZ3Jlc3NWYWx1ZSA9IG5ld1Byb2dyZXNzO1xuICAgIGVhc2VkUHJvZ3Jlc3MgPSBlYXNlKHByb2dyZXNzVmFsdWUpO1xuICAgIGlmIChNYXRoLmFicygxIC0gZWFzZWRQcm9ncmVzcykgPCBQUk9HUkVTU19QUkVDSVNJT04pIHtcbiAgICAgIHByb2dyZXNzVmFsdWUgPSAxO1xuICAgICAgZWFzZWRQcm9ncmVzcyA9IDE7XG4gICAgfVxuICAgIGNhbGxiYWNrKGVhc2VkUHJvZ3Jlc3MpO1xuICAgIG9uUHJvZ3Jlc3MocHJvZ3Jlc3NWYWx1ZSwgZWFzZWRQcm9ncmVzcyk7XG4gICAgaWYgKGVhc2VkUHJvZ3Jlc3MgPT09IDEpIHtcbiAgICAgIHBhdXNlKCk7XG4gICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4gb25GaW5pc2gocHJvZ3Jlc3NWYWx1ZSwgZWFzZWRQcm9ncmVzcykpO1xuICAgIH1cbiAgICByZXR1cm4gcHJvZ3Jlc3NWYWx1ZTtcbiAgfVxuICBmdW5jdGlvbiB0aWNrKHByb3BzKSB7XG4gICAgaWYgKCFpc1J1bm5pbmcpIHtcbiAgICAgIHJhZi5yZW1vdmUoa2V5KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgcHJvZ3Jlc3MoY2xhbXAwMShtYXAocHJvcHMudGltZSwgc3RhcnRUaW1lLCBlbmRUaW1lLCAwLCAxKSkpO1xuICB9XG4gIGZ1bmN0aW9uIHN0YXJ0KCkge1xuICAgIG9uU3RhcnQoKTtcbiAgICBzdGFydFRpbWUgPSBwZXJmb3JtYW5jZS5ub3coKTtcbiAgICBlbmRUaW1lID0gc3RhcnRUaW1lICsgZHVyYXRpb247XG4gICAgcHJvZ3Jlc3NWYWx1ZSA9IDA7XG4gICAgZWFzZWRQcm9ncmVzcyA9IDA7XG4gICAgaXNSdW5uaW5nID0gdHJ1ZTtcbiAgICByYWYuYWRkKGtleSwgdGljayk7XG4gIH1cbiAgZnVuY3Rpb24gcGxheSgpIHtcbiAgICBpZiAoaXNSdW5uaW5nKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHN0YXJ0VGltZSA9IHBlcmZvcm1hbmNlLm5vdygpIC0gbGVycCgwLCBkdXJhdGlvbiwgcHJvZ3Jlc3NWYWx1ZSk7XG4gICAgZW5kVGltZSA9IHN0YXJ0VGltZSArIGR1cmF0aW9uO1xuICAgIGlzUnVubmluZyA9IHRydWU7XG4gICAgcmFmLmFkZChrZXksIHRpY2spO1xuICB9XG4gIHJldHVybiB7XG4gICAgc3RhcnQsXG4gICAgZmluaXNoOiAoKSA9PiBwcm9ncmVzcygxKSxcbiAgICBwYXVzZSxcbiAgICBwbGF5LFxuICAgIHByb2dyZXNzXG4gIH07XG59XG5leHBvcnQge1xuICBub3JtYWxpemVFYXNlLFxuICB0d2VlblxufTtcbiIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0aWQ6IG1vZHVsZUlkLFxuXHRcdGxvYWRlZDogZmFsc2UsXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuXHRtb2R1bGUubG9hZGVkID0gdHJ1ZTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18uZyA9IChmdW5jdGlvbigpIHtcblx0aWYgKHR5cGVvZiBnbG9iYWxUaGlzID09PSAnb2JqZWN0JykgcmV0dXJuIGdsb2JhbFRoaXM7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIHRoaXMgfHwgbmV3IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcpIHJldHVybiB3aW5kb3c7XG5cdH1cbn0pKCk7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIi8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uciA9IChleHBvcnRzKSA9PiB7XG5cdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXHR9XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubm1kID0gKG1vZHVsZSkgPT4ge1xuXHRtb2R1bGUucGF0aHMgPSBbXTtcblx0aWYgKCFtb2R1bGUuY2hpbGRyZW4pIG1vZHVsZS5jaGlsZHJlbiA9IFtdO1xuXHRyZXR1cm4gbW9kdWxlO1xufTsiLCJpbXBvcnQgQXBwRXZlbnRzIGZyb20gJy4vY29udGFpbmVycy9BcHBFdmVudHMnO1xuaW1wb3J0IHsgZ2V0SW5zdGFuY2VGcm9tRWxlbWVudCB9IGZyb20gJ0BzdHVkaW9tZXRhL2pzLXRvb2xraXQnO1xuaW1wb3J0IEN1cnNvciBmcm9tICcuL2NvbXBvbmVudHMvQ3Vyc29yJztcbmltcG9ydCBIb21lIGZyb20gJy4vcGFnZXMvSG9tZSc7XG5pbXBvcnQgQWJvdXQgZnJvbSAnLi9wYWdlcy9BYm91dCc7XG5pbXBvcnQgUHJvamVjdHMgZnJvbSAnLi9wYWdlcy9Qcm9qZWN0cyc7XG5pbXBvcnQgVWkgZnJvbSAnLi9wYWdlcy9VaSc7XG5pbXBvcnQgU2NyaWJibGVMaW5rIGZyb20gJy4vY29tcG9uZW50cy9TY3JpYmJsZUxpbmsnO1xuaW1wb3J0IHsgZ2V0SW50ZXJuYWxMaW5rcywgcHJlbG9hZEltYWdlcyB9IGZyb20gJy4vdXRpbHMvZG9tJztcbmltcG9ydCBQcmVsb2FkZXIgZnJvbSAnLi9jb21wb25lbnRzL1ByZWxvYWRlcic7XG5pbXBvcnQgUGFyYWxsYXggZnJvbSAnLi9jb21wb25lbnRzL1BhcmFsbGF4JztcbmltcG9ydCBMZW5pcyBmcm9tICdAc3R1ZGlvLWZyZWlnaHQvbGVuaXMnXG5pbXBvcnQgVGl0bGUgZnJvbSAnLi9jb21wb25lbnRzL1RpdGxlJztcblxuY2xhc3MgQXBwIGV4dGVuZHMgQXBwRXZlbnRzIHtcbiAgICBzdGF0aWMgY29uZmlnID0ge1xuICAgICAgICBuYW1lOiAnQXBwJyxcbiAgICAgICAgY29tcG9uZW50czoge1xuICAgICAgICAgICAgQ3Vyc29yLFxuICAgICAgICAgICAgU2NyaWJibGVMaW5rLFxuICAgICAgICAgICAgUGFyYWxsYXgsXG4gICAgICAgICAgICBIb21lLFxuICAgICAgICAgICAgQWJvdXQsXG4gICAgICAgICAgICBQcm9qZWN0cyxcbiAgICAgICAgICAgIFVpLFxuICAgICAgICAgICAgVGl0bGUsXG4gICAgICAgIH0sXG4gICAgICAgIHJlZnM6IFsuLi5BcHBFdmVudHMuY29uZmlnLnJlZnMsICdwYWdlQ29udGFpbmVyJ10sXG4gICAgfTtcblxuICAgIGN1cnJlbnRQYWdlSW5zdGFuY2UgPSBudWxsO1xuICAgIERPTVBhcnNlciA9IG5ldyBET01QYXJzZXIoKTtcbiAgICBpbnRlcm5hbExpbmtzID0gW107XG5cbiAgICBtb3VudGVkICgpIHtcbiAgICAgICAgc3VwZXIubW91bnRlZCgpO1xuXG4gICAgICAgIHRoaXMucmVtb3ZlQXBwT3ZlcmxheSgpO1xuXG4gICAgICAgIHRoaXMudXBkYXRlQ3VycmVudFBhZ2VJbnN0YW5jZSgpO1xuXG4gICAgICAgIHRoaXMuc2V0dXBMaXN0ZW5lcnMoKTtcbiAgICAgICAgdGhpcy5zZXR1cEludGVybmFsTGlua3MoKTtcblxuICAgICAgICB0aGlzLmNyZWF0ZUxlbmlzKCkuc3RvcCgpO1xuICAgIH1cblxuICAgIHJlbW92ZUFwcE92ZXJsYXkoKSB7XG4gICAgICAgIGNvbnN0IGFwcE92ZXJsYXkgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYXBwT3ZlcmxheScpO1xuICAgICAgICBpZiAoYXBwT3ZlcmxheSkgYXBwT3ZlcmxheS5yZW1vdmUoKTtcbiAgICB9XG5cbiAgICB0aWNrZWQoeyB0aW1lIH0pIHtcbiAgICAgICAgd2luZG93LmxlbmlzLnJhZih0aW1lKTtcbiAgICB9XG5cbiAgICBzaG93Q3VycmVudFBhZ2UoKSB7XG4gICAgICAgIHdpbmRvdy5sZW5pcy5zdGFydCgpO1xuICAgICAgICB0aGlzLmN1cnJlbnRQYWdlSW5zdGFuY2UuYW5pbWF0ZUluKCk7XG4gICAgfVxuXG4gICAgc2V0dXBMaXN0ZW5lcnMgKCkge1xuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncG9wc3RhdGUnLCAoKSA9PiB0aGlzLm9uVXJsQ2hhbmdlKHtcbiAgICAgICAgICAgIHVybDogd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lLFxuICAgICAgICAgICAgcHVzaDogZmFsc2UsXG4gICAgICAgIH0pKTtcbiAgICB9XG5cbiAgICBzZXR1cEludGVybmFsTGlua3MoKSB7XG4gICAgICAgIHRoaXMuaW50ZXJuYWxMaW5rcyA9IGdldEludGVybmFsTGlua3MoKTtcbiAgICAgICAgdGhpcy5hZGRJbnRlcm5hbExpbmtMaXN0ZW5lcnMoKTtcbiAgICB9XG5cbiAgICBhc3luYyBvblVybENoYW5nZSh7IHVybCwgcHVzaCA9IHRydWUgfSkge1xuICAgICAgICBjb25zdCBwcmVsb2FkZXJBbmltYXRlSW4gPSBwcmVsb2FkZXIuYW5pbWF0ZVBhZ2VUcmFuc2l0aW9uSW4oKS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgIHdpbmRvdy5sZW5pcy5kZXN0cm95KCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmICh0aGlzLmN1cnNvcikgdGhpcy5jdXJzb3IuZGlzYWJsZSgpO1xuXG4gICAgICAgIGNvbnN0IHJlcXVlc3QgPSBhd2FpdCB3aW5kb3cuZmV0Y2godXJsKTtcblxuICAgICAgICBpZiAocmVxdWVzdC5zdGF0dXMgIT09IDIwMCkge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcignSGFuZGxlIHJlcXVlc3QgZXJyb3IuJylcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwdXNoKSB3aW5kb3cuaGlzdG9yeS5wdXNoU3RhdGUoe30sICcnLCB1cmwpO1xuXG4gICAgICAgIGxldCBwYWdlRG9jdW1lbnQgPSBhd2FpdCByZXF1ZXN0LnRleHQoKTtcbiAgICAgICAgcGFnZURvY3VtZW50ID0gdGhpcy5ET01QYXJzZXIucGFyc2VGcm9tU3RyaW5nKHBhZ2VEb2N1bWVudCwgJ3RleHQvaHRtbCcpO1xuXG4gICAgICAgIGNvbnN0IHByZWxvYWRlZEltYWdlcyA9IHByZWxvYWRJbWFnZXMocGFnZURvY3VtZW50KTtcblxuICAgICAgICBhd2FpdCBQcm9taXNlLmFsbChbXG4gICAgICAgICAgICBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KHJlc29sdmUsIDcwMCk7XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIC4uLnByZWxvYWRlZEltYWdlcyxcbiAgICAgICAgXSk7XG5cbiAgICAgICAgdGhpcy5jdXJyZW50UGFnZUluc3RhbmNlLiRkZXN0cm95KCk7XG5cbiAgICAgICAgd2luZG93LnNjcm9sbFRvKDAsIDApO1xuXG4gICAgICAgIHRoaXMucmVwbGFjZVBhZ2UocGFnZURvY3VtZW50KTtcbiAgICAgICAgdGhpcy4kdXBkYXRlKCk7XG4gICAgICAgIHRoaXMudXBkYXRlQ3VycmVudFBhZ2VJbnN0YW5jZSgpO1xuXG4gICAgICAgIHRoaXMudXBkYXRlTmF2aWdhdGlvbkNvbG9yKCk7XG4gICAgICAgIHRoaXMuc2V0dXBJbnRlcm5hbExpbmtzKCk7XG5cbiAgICAgICAgdGhpcy5jcmVhdGVMZW5pcygpO1xuXG4gICAgICAgIHRoaXMuc2hvd0N1cnJlbnRQYWdlKCk7XG4gICAgICAgIHByZWxvYWRlci5hbmltYXRlUGFnZVRyYW5zaXRpb25PdXQoKTtcbiAgICB9XG5cbiAgICByZXBsYWNlUGFnZShwYWdlRG9jdW1lbnQpIHtcbiAgICAgICAgY29uc3QgcGFnZUVsZW1lbnQgPSBwYWdlRG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3BhZ2UnKTtcbiAgICAgICAgdGhpcy4kcmVmcy5wYWdlQ29udGFpbmVyLnJlcGxhY2VDaGlsZHJlbihwYWdlRWxlbWVudCk7XG4gICAgfVxuXG4gICAgYWRkSW50ZXJuYWxMaW5rTGlzdGVuZXJzICgpIHtcbiAgICAgICAgZm9yIChjb25zdCBpbnRlcm5hbExpbmsgb2YgdGhpcy5pbnRlcm5hbExpbmtzKSB7XG4gICAgICAgICAgICBpbnRlcm5hbExpbmsub25jbGljayA9IGUgPT4ge1xuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICBpZiAoaW50ZXJuYWxMaW5rLmhyZWYgPT09IHdpbmRvdy5sb2NhdGlvbi5ocmVmKSByZXR1cm47XG4gICAgICAgICAgICAgICAgdGhpcy5vblVybENoYW5nZSh7XG4gICAgICAgICAgICAgICAgICAgIHVybDogaW50ZXJuYWxMaW5rLmhyZWYsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjcmVhdGVMZW5pcygpIHtcbiAgICAgICAgaWYgKHdpbmRvdy5sZW5pcykgd2luZG93LmxlbmlzLmRlc3Ryb3koKTtcbiAgICAgICAgcmV0dXJuIHdpbmRvdy5sZW5pcyA9IG5ldyBMZW5pcyh7XG4gICAgICAgICAgICBkdXJhdGlvbjogMS4yLFxuICAgICAgICAgICAgZWFzaW5nOiAodCkgPT4gKHQgPT09IDEgPyAxIDogMSAtIE1hdGgucG93KDIsIC0xMCAqIHQpKSxcbiAgICAgICAgICAgIGRpcmVjdGlvbjogJ3ZlcnRpY2FsJyxcbiAgICAgICAgICAgIHNtb290aDogdHJ1ZSxcbiAgICAgICAgICAgIHNtb290aFRvdWNoOiBmYWxzZSxcbiAgICAgICAgICAgIHRvdWNoTXVsdGlwbGllcjogMixcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgdXBkYXRlQ3VycmVudFBhZ2VJbnN0YW5jZSAoKSB7XG4gICAgICAgIGNvbnN0IHBhZ2VFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3BhZ2UnKTtcbiAgICAgICAgY29uc3QgcGFnZUNsYXNzID0gcGFnZUVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLWNvbXBvbmVudCcpO1xuICAgICAgICB0aGlzLmN1cnJlbnRQYWdlSW5zdGFuY2UgPSBnZXRJbnN0YW5jZUZyb21FbGVtZW50KHBhZ2VFbGVtZW50LCBBcHAuY29uZmlnLmNvbXBvbmVudHNbcGFnZUNsYXNzXSk7XG4gICAgfVxuXG4gICAgdXBkYXRlTmF2aWdhdGlvbkNvbG9yICgpIHtcbiAgICAgICAgY29uc3QgaXNEYXJrUGFnZSA9IHRoaXMuY3VycmVudFBhZ2VJbnN0YW5jZS4kZWwuY2xhc3NMaXN0LmNvbnRhaW5zKCdpcy1kYXJrJyk7XG4gICAgICAgIGNvbnN0IG5hdmlnYXRpb24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuY29tcG9uZW50LW5hdmlnYXRpb24nKTtcbiAgICAgICAgbmF2aWdhdGlvbi5jbGFzc0xpc3QudG9nZ2xlKCdvZi1kYXJrLXBhZ2UnLCBpc0RhcmtQYWdlKTtcbiAgICB9XG59XG5cbmNvbnN0IFtwcmVsb2FkZXJdID0gUHJlbG9hZGVyLiRmYWN0b3J5KCdQcmVsb2FkZXInKTtcbmNvbnN0IFthcHBdID0gQXBwLiRmYWN0b3J5KCdBcHAnKTtcblxuY29uc3QgYm9vdEFwcCA9IGFzeW5jICgpID0+IHtcbiAgICBhd2FpdCBwcmVsb2FkZXIuYW5pbWF0ZU91dCgpO1xuICAgIGFwcC5zaG93Q3VycmVudFBhZ2UoKTtcbn07XG5cbmNvbnN0IGFwcExvYWRlZCA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCByZXNvbHZlKTtcbn0pO1xuXG5Qcm9taXNlLmFsbChbYXBwTG9hZGVkLCBwcmVsb2FkZXIuYW5pbWF0ZUluKCldKS50aGVuKGJvb3RBcHApO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLyogZ2xvYmFsIF9fcmVzb3VyY2VRdWVyeSBXb3JrZXJHbG9iYWxTY29wZSBzZWxmICovXG5cbi8qIGVzbGludCBwcmVmZXItZGVzdHJ1Y3R1cmluZzogb2ZmICovXG5cbnZhciBzdHJpcEFuc2kgPSByZXF1aXJlKCdzdHJpcC1hbnNpJyk7XG5cbnZhciBzb2NrZXQgPSByZXF1aXJlKCcuL3NvY2tldCcpO1xuXG52YXIgb3ZlcmxheSA9IHJlcXVpcmUoJy4vb3ZlcmxheScpO1xuXG52YXIgX3JlcXVpcmUgPSByZXF1aXJlKCcuL3V0aWxzL2xvZycpLFxuICAgIGxvZyA9IF9yZXF1aXJlLmxvZyxcbiAgICBzZXRMb2dMZXZlbCA9IF9yZXF1aXJlLnNldExvZ0xldmVsO1xuXG52YXIgc2VuZE1lc3NhZ2UgPSByZXF1aXJlKCcuL3V0aWxzL3NlbmRNZXNzYWdlJyk7XG5cbnZhciByZWxvYWRBcHAgPSByZXF1aXJlKCcuL3V0aWxzL3JlbG9hZEFwcCcpO1xuXG52YXIgY3JlYXRlU29ja2V0VXJsID0gcmVxdWlyZSgnLi91dGlscy9jcmVhdGVTb2NrZXRVcmwnKTtcblxudmFyIHN0YXR1cyA9IHtcbiAgaXNVbmxvYWRpbmc6IGZhbHNlLFxuICBjdXJyZW50SGFzaDogJydcbn07XG52YXIgb3B0aW9ucyA9IHtcbiAgaG90OiBmYWxzZSxcbiAgaG90UmVsb2FkOiB0cnVlLFxuICBsaXZlUmVsb2FkOiBmYWxzZSxcbiAgaW5pdGlhbDogdHJ1ZSxcbiAgdXNlV2FybmluZ092ZXJsYXk6IGZhbHNlLFxuICB1c2VFcnJvck92ZXJsYXk6IGZhbHNlLFxuICB1c2VQcm9ncmVzczogZmFsc2Vcbn07XG52YXIgc29ja2V0VXJsID0gY3JlYXRlU29ja2V0VXJsKF9fcmVzb3VyY2VRdWVyeSk7XG5zZWxmLmFkZEV2ZW50TGlzdGVuZXIoJ2JlZm9yZXVubG9hZCcsIGZ1bmN0aW9uICgpIHtcbiAgc3RhdHVzLmlzVW5sb2FkaW5nID0gdHJ1ZTtcbn0pO1xuXG5pZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgdmFyIHFzID0gd2luZG93LmxvY2F0aW9uLnNlYXJjaC50b0xvd2VyQ2FzZSgpO1xuICBvcHRpb25zLmhvdFJlbG9hZCA9IHFzLmluZGV4T2YoJ2hvdHJlbG9hZD1mYWxzZScpID09PSAtMTtcbn1cblxudmFyIG9uU29ja2V0TWVzc2FnZSA9IHtcbiAgaG90OiBmdW5jdGlvbiBob3QoKSB7XG4gICAgb3B0aW9ucy5ob3QgPSB0cnVlO1xuICAgIGxvZy5pbmZvKCdbV0RTXSBIb3QgTW9kdWxlIFJlcGxhY2VtZW50IGVuYWJsZWQuJyk7XG4gIH0sXG4gIGxpdmVSZWxvYWQ6IGZ1bmN0aW9uIGxpdmVSZWxvYWQoKSB7XG4gICAgb3B0aW9ucy5saXZlUmVsb2FkID0gdHJ1ZTtcbiAgICBsb2cuaW5mbygnW1dEU10gTGl2ZSBSZWxvYWRpbmcgZW5hYmxlZC4nKTtcbiAgfSxcbiAgaW52YWxpZDogZnVuY3Rpb24gaW52YWxpZCgpIHtcbiAgICBsb2cuaW5mbygnW1dEU10gQXBwIHVwZGF0ZWQuIFJlY29tcGlsaW5nLi4uJyk7IC8vIGZpeGVzICMxMDQyLiBvdmVybGF5IGRvZXNuJ3QgY2xlYXIgaWYgZXJyb3JzIGFyZSBmaXhlZCBidXQgd2FybmluZ3MgcmVtYWluLlxuXG4gICAgaWYgKG9wdGlvbnMudXNlV2FybmluZ092ZXJsYXkgfHwgb3B0aW9ucy51c2VFcnJvck92ZXJsYXkpIHtcbiAgICAgIG92ZXJsYXkuY2xlYXIoKTtcbiAgICB9XG5cbiAgICBzZW5kTWVzc2FnZSgnSW52YWxpZCcpO1xuICB9LFxuICBoYXNoOiBmdW5jdGlvbiBoYXNoKF9oYXNoKSB7XG4gICAgc3RhdHVzLmN1cnJlbnRIYXNoID0gX2hhc2g7XG4gIH0sXG4gICdzdGlsbC1vayc6IGZ1bmN0aW9uIHN0aWxsT2soKSB7XG4gICAgbG9nLmluZm8oJ1tXRFNdIE5vdGhpbmcgY2hhbmdlZC4nKTtcblxuICAgIGlmIChvcHRpb25zLnVzZVdhcm5pbmdPdmVybGF5IHx8IG9wdGlvbnMudXNlRXJyb3JPdmVybGF5KSB7XG4gICAgICBvdmVybGF5LmNsZWFyKCk7XG4gICAgfVxuXG4gICAgc2VuZE1lc3NhZ2UoJ1N0aWxsT2snKTtcbiAgfSxcbiAgJ2xvZy1sZXZlbCc6IGZ1bmN0aW9uIGxvZ0xldmVsKGxldmVsKSB7XG4gICAgdmFyIGhvdEN0eCA9IHJlcXVpcmUuY29udGV4dCgnd2VicGFjay9ob3QnLCBmYWxzZSwgL15cXC5cXC9sb2ckLyk7XG5cbiAgICBpZiAoaG90Q3R4LmtleXMoKS5pbmRleE9mKCcuL2xvZycpICE9PSAtMSkge1xuICAgICAgaG90Q3R4KCcuL2xvZycpLnNldExvZ0xldmVsKGxldmVsKTtcbiAgICB9XG5cbiAgICBzZXRMb2dMZXZlbChsZXZlbCk7XG4gIH0sXG4gIG92ZXJsYXk6IGZ1bmN0aW9uIG92ZXJsYXkodmFsdWUpIHtcbiAgICBpZiAodHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgIG9wdGlvbnMudXNlV2FybmluZ092ZXJsYXkgPSBmYWxzZTtcbiAgICAgICAgb3B0aW9ucy51c2VFcnJvck92ZXJsYXkgPSB2YWx1ZTtcbiAgICAgIH0gZWxzZSBpZiAodmFsdWUpIHtcbiAgICAgICAgb3B0aW9ucy51c2VXYXJuaW5nT3ZlcmxheSA9IHZhbHVlLndhcm5pbmdzO1xuICAgICAgICBvcHRpb25zLnVzZUVycm9yT3ZlcmxheSA9IHZhbHVlLmVycm9ycztcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIHByb2dyZXNzOiBmdW5jdGlvbiBwcm9ncmVzcyhfcHJvZ3Jlc3MpIHtcbiAgICBpZiAodHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgb3B0aW9ucy51c2VQcm9ncmVzcyA9IF9wcm9ncmVzcztcbiAgICB9XG4gIH0sXG4gICdwcm9ncmVzcy11cGRhdGUnOiBmdW5jdGlvbiBwcm9ncmVzc1VwZGF0ZShkYXRhKSB7XG4gICAgaWYgKG9wdGlvbnMudXNlUHJvZ3Jlc3MpIHtcbiAgICAgIGxvZy5pbmZvKFwiW1dEU10gXCIuY29uY2F0KGRhdGEucGVyY2VudCwgXCIlIC0gXCIpLmNvbmNhdChkYXRhLm1zZywgXCIuXCIpKTtcbiAgICB9XG5cbiAgICBzZW5kTWVzc2FnZSgnUHJvZ3Jlc3MnLCBkYXRhKTtcbiAgfSxcbiAgb2s6IGZ1bmN0aW9uIG9rKCkge1xuICAgIHNlbmRNZXNzYWdlKCdPaycpO1xuXG4gICAgaWYgKG9wdGlvbnMudXNlV2FybmluZ092ZXJsYXkgfHwgb3B0aW9ucy51c2VFcnJvck92ZXJsYXkpIHtcbiAgICAgIG92ZXJsYXkuY2xlYXIoKTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5pbml0aWFsKSB7XG4gICAgICByZXR1cm4gb3B0aW9ucy5pbml0aWFsID0gZmFsc2U7XG4gICAgfSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXJldHVybi1hc3NpZ25cblxuXG4gICAgcmVsb2FkQXBwKG9wdGlvbnMsIHN0YXR1cyk7XG4gIH0sXG4gICdjb250ZW50LWNoYW5nZWQnOiBmdW5jdGlvbiBjb250ZW50Q2hhbmdlZCgpIHtcbiAgICBsb2cuaW5mbygnW1dEU10gQ29udGVudCBiYXNlIGNoYW5nZWQuIFJlbG9hZGluZy4uLicpO1xuICAgIHNlbGYubG9jYXRpb24ucmVsb2FkKCk7XG4gIH0sXG4gIHdhcm5pbmdzOiBmdW5jdGlvbiB3YXJuaW5ncyhfd2FybmluZ3MpIHtcbiAgICBsb2cud2FybignW1dEU10gV2FybmluZ3Mgd2hpbGUgY29tcGlsaW5nLicpO1xuXG4gICAgdmFyIHN0cmlwcGVkV2FybmluZ3MgPSBfd2FybmluZ3MubWFwKGZ1bmN0aW9uICh3YXJuaW5nKSB7XG4gICAgICByZXR1cm4gc3RyaXBBbnNpKHdhcm5pbmcpO1xuICAgIH0pO1xuXG4gICAgc2VuZE1lc3NhZ2UoJ1dhcm5pbmdzJywgc3RyaXBwZWRXYXJuaW5ncyk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0cmlwcGVkV2FybmluZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgIGxvZy53YXJuKHN0cmlwcGVkV2FybmluZ3NbaV0pO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLnVzZVdhcm5pbmdPdmVybGF5KSB7XG4gICAgICBvdmVybGF5LnNob3dNZXNzYWdlKF93YXJuaW5ncyk7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMuaW5pdGlhbCkge1xuICAgICAgcmV0dXJuIG9wdGlvbnMuaW5pdGlhbCA9IGZhbHNlO1xuICAgIH0gLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1yZXR1cm4tYXNzaWduXG5cblxuICAgIHJlbG9hZEFwcChvcHRpb25zLCBzdGF0dXMpO1xuICB9LFxuICBlcnJvcnM6IGZ1bmN0aW9uIGVycm9ycyhfZXJyb3JzKSB7XG4gICAgbG9nLmVycm9yKCdbV0RTXSBFcnJvcnMgd2hpbGUgY29tcGlsaW5nLiBSZWxvYWQgcHJldmVudGVkLicpO1xuXG4gICAgdmFyIHN0cmlwcGVkRXJyb3JzID0gX2Vycm9ycy5tYXAoZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICByZXR1cm4gc3RyaXBBbnNpKGVycm9yKTtcbiAgICB9KTtcblxuICAgIHNlbmRNZXNzYWdlKCdFcnJvcnMnLCBzdHJpcHBlZEVycm9ycyk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0cmlwcGVkRXJyb3JzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBsb2cuZXJyb3Ioc3RyaXBwZWRFcnJvcnNbaV0pO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLnVzZUVycm9yT3ZlcmxheSkge1xuICAgICAgb3ZlcmxheS5zaG93TWVzc2FnZShfZXJyb3JzKTtcbiAgICB9XG5cbiAgICBvcHRpb25zLmluaXRpYWwgPSBmYWxzZTtcbiAgfSxcbiAgZXJyb3I6IGZ1bmN0aW9uIGVycm9yKF9lcnJvcikge1xuICAgIGxvZy5lcnJvcihfZXJyb3IpO1xuICB9LFxuICBjbG9zZTogZnVuY3Rpb24gY2xvc2UoKSB7XG4gICAgbG9nLmVycm9yKCdbV0RTXSBEaXNjb25uZWN0ZWQhJyk7XG4gICAgc2VuZE1lc3NhZ2UoJ0Nsb3NlJyk7XG4gIH1cbn07XG5zb2NrZXQoc29ja2V0VXJsLCBvblNvY2tldE1lc3NhZ2UpOyJdLCJuYW1lcyI6WyJDdXJzb3IiLCJ3aXRoQnJlYWtwb2ludE9ic2VydmVyIiwiQmFzZSIsIm5hbWUiLCJyZWZzIiwibG9nIiwiaXNPbkxpbmsiLCJpc09uU2xpZGVyIiwiaXNMaXN0ZW5pbmciLCJwb3NpdGlvbiIsIngiLCJ5Iiwic2Nyb2xsIiwiaXNBY3RpdmUiLCJkZWx0YVkiLCJjb2xvciIsInN0aWNreSIsInNpZGUiLCJjdXJyZW50VGFyZ2V0IiwiZWxlbWVudCIsImJveCIsIm1vdmVkIiwibGFzdCIsImlzRG93biIsInRvZ2dsZUNsYXNzIiwidGhpcyIsIiRlbCIsInNldFZhcmlhYmxlcyIsInRyYW5zbGF0ZVgiLCJ0cmFuc2xhdGVZIiwic2tld1giLCJjbGFtcCIsInNrZXdZIiwic2Nyb2xsZWQiLCJkZWx0YSIsInRvcCIsImJvdHRvbSIsIm9uTGVhdmVMaW5rIiwib25MZWF2ZVNsaWRlciIsInNldFN0aWNreSIsInNldENvbG9yIiwibmV3Q3Vyc29yQ29sb3IiLCJyZW1vdmVDbGFzcyIsImFkZENsYXNzIiwidGFyZ2V0IiwiaXNTdGlja3kiLCJjdXJzb3JTdGlja3lTaWRlIiwidW5kZWZpbmVkIiwidGFyZ2V0Qm94IiwicXVlcnlTZWxlY3RvciIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImN1cnNvckJveCIsImdldE9mZnNldFNpemVzIiwiJHJlZnMiLCJpbm5lciIsIm9mZnNldFgiLCJ3aWR0aCIsImhlaWdodCIsIm9uRW50ZXJMaW5rIiwiY3Vyc29yQ29sb3IiLCJjdXJzb3JTdGlja3kiLCJkYXRhc2V0Iiwib25FbnRlclNsaWRlciIsInN0eWxlIiwic2V0UHJvcGVydHkiLCJkaXNhYmxlIiwiZW5hYmxlIiwidmFsdWUiLCJGb290ZXIiLCJ3aXRoU2Nyb2xsZWRJblZpZXciLCJBcHBFdmVudHMiLCJzY3JvbGxlZEluVmlldyIsImN1cnJlbnQiLCJzdGFydCIsIm1heCIsIm9mZnNldEhlaWdodCIsInJldmVyc2VQcm9ncmVzcyIsIm92ZXJsYXkiLCJncmFkaWVudCIsIm9wYWNpdHkiLCJ3cmFwcGVyIiwidHJhbnNmb3JtIiwiUGFyYWdyYXBoIiwib3B0aW9ucyIsImRlbGF5IiwiTnVtYmVyIiwiYW5pbWF0ZUluIiwiZ3NhcCIsImR1cmF0aW9uIiwiJG9wdGlvbnMiLCJlYXNlIiwiY2xlYXJQcm9wcyIsImFuaW1hdGVPdXQiLCJQYXJhbGxheCIsInBlcmNlbnQiLCJ0eXBlIiwiZGVmYXVsdCIsInJldmVyc2UiLCJCb29sZWFuIiwibW91bnRlZCIsImltYWdlIiwid2lsbENoYW5nZSIsImRhbXBlZFByb2dyZXNzIiwiUHJlbG9hZGVyIiwiU3RyaW5nIiwibG9nb0ZyYW1lc0FuaW1hdGlvbiIsImNvbnRleHQiLCJnZXRDb250ZXh0Iiwid2luZG93IiwiaW5uZXJXaWR0aCIsImRldmljZVBpeGVsUmF0aW8iLCJpbm5lckhlaWdodCIsIlByb21pc2UiLCJyZXNvbHZlIiwib25TdGFydCIsImxvZ29GcmFtZXMiLCJhdXRvQWxwaGEiLCJuYW1lUGF0aExlbmd0aCIsIm5hbWVQYXRoIiwiZ2V0VG90YWxMZW5ndGgiLCJzdHJva2VEYXNoYXJyYXkiLCJvbkNvbXBsZXRlIiwidG8iLCJrZXlmcmFtZXMiLCJzdGFnZ2VyIiwiYWRkIiwiYW5pbWF0ZUxvZ29GcmFtZXMiLCJzZXQiLCJjYWxsIiwiYW5pbWF0ZU5hbWUiLCJiaW5kIiwibGV0dGVyc0ludGVydmFsIiwiZnJvbVRvIiwic3Ryb2tlRGFzaG9mZnNldCIsIm9uVXBkYXRlIiwiYW5pbWF0ZU92ZXJsYXkiLCJvblVwZGF0ZVBhcmFtcyIsInJlcGVhdCIsInBhdXNlIiwia2lsbCIsImludGVydmFsUHJvbWlzZSIsImNhbGxzQW1vdW50IiwibmFtZVdvcmQiLCJpbm5lclRleHQiLCJzbGljZSIsImxlbmd0aCIsImJhc2VZIiwiZmlsbENvbG9yIiwiY2xlYXJSZWN0Iiwic2F2ZSIsImJlZ2luUGF0aCIsIm1vdmVUbyIsImxpbmVUbyIsIndpZHRoU2VnbWVudHMiLCJNYXRoIiwiY2VpbCIsInQiLCJyYXRpbyIsImFtcGxpdHVkZSIsInNpbiIsIlBJIiwiaW5kZXgiLCJuIiwiciIsImZpbGxTdHlsZSIsImZpbGwiLCJyZXN0b3JlIiwiU1ZHUmV2ZWFsIiwic2hhcGVzIiwiZHJhd24iLCJTVkciLCJzdmciLCJtYXAiLCJzaGFwZSIsImVsIiwiaGlkZVNoYXBlcyIsImkiLCJkcmF3U3Ryb2tlcyIsIlNjcmliYmxlTGluayIsInR3ZWVuSW4iLCJ0d2Vlbk91dCIsInNjcmliYmxlIiwic2V0dXBUd2VlbnMiLCJvbk1vdXNlZW50ZXIiLCJmaW5pc2giLCJwcm9ncmVzcyIsInBsYXkiLCJvbk1vdXNlbGVhdmUiLCJ0d2VlbiIsInNldFN0cm9rZURhc2hPZmZzZXRTaGFwZXMiLCJlYXNpbmciLCJlYXNlT3V0UXVhZCIsIm9uRmluaXNoIiwib2Zmc2V0Iiwic2V0QXR0cmlidXRlIiwiVGl0bGUiLCJzcGxpdFRleHQiLCJzcGxpdCIsImZvbnRLZXJuaW5nIiwiU3BsaXRUeXBlIiwidHlwZXMiLCJ0YWdOYW1lIiwicmV2ZXJ0IiwiY2hhcnMiLCJ5UGVyY2VudCIsIldvcmsiLCJ3aXRoSW50ZXJzZWN0aW9uT2JzZXJ2ZXIiLCJyb290TWFyZ2luIiwiY29tcG9uZW50cyIsImlzVmlzaWJsZSIsImludGVyc2VjdGVkIiwiaXNJbnRlcnNlY3RpbmciLCIkY2hpbGRyZW4iLCJjb3ZlciIsIldvcmtDYXJkIiwidGhyZXNob2xkIiwidHJhbnNpdGlvbkRlbGF5IiwibmFtZUlubmVycyIsImZvckVhY2giLCJuYW1lSW5uZXIiLCJhbmltYXRlIiwiZW50cmllcyIsImludGVyc2VjdGlvblJhdGlvIiwicmVtb3ZlSGlkZGVuQ2xhc3NUaW1lb3V0Iiwic2V0VGltZW91dCIsImNsZWFyVGltZW91dCIsImN1cnNvciIsIiRsb2ciLCJjdXJzb3JFbGVtZW50IiwiZG9jdW1lbnQiLCJnZXRJbnN0YW5jZUZyb21FbGVtZW50IiwiZGVzdHJveWVkIiwib25DdXJzb3JMaW5rTW91c2VlbnRlciIsImUiLCIkaXNNb3VudGVkIiwib25DdXJzb3JMaW5rTW91c2VsZWF2ZSIsIm9uQ3Vyc29yU2xpZGVyTW91c2VlbnRlciIsIm9uQ3Vyc29yU2xpZGVyTW91c2VsZWF2ZSIsIlBhZ2UiLCJzdXBlciIsInRpbWVsaW5lIiwiZmluaXNoZWQiLCJwb2ludGVyRXZlbnRzIiwiQWJvdXQiLCJQcm9qZWN0cyIsIlVpIiwidHJhY2tTaGFwZXMiLCJjaGlsZHJlbiIsInN1YkNoaWxkRWxlbWVudCIsImhhc0F0dHJpYnV0ZSIsInNoYXBlTGVuZ3RoIiwiZ2V0U2hhcGVMZW5ndGgiLCJwdXNoIiwiU1ZHR2VvbWV0cnlFbGVtZW50IiwiU1ZHUG9seWdvbkVsZW1lbnQiLCJTVkdQb2x5bGluZUVsZW1lbnQiLCJTVkdDaXJjbGVFbGVtZW50Iiwicm91bmQiLCJwYXJzZUludCIsImdldEF0dHJpYnV0ZSIsIlNWR1JlY3RFbGVtZW50IiwiU1ZHRWxsaXBzZUVsZW1lbnQiLCJyeCIsInJ5IiwiaCIsInNxcnQiLCJTVkdMaW5lRWxlbWVudCIsIngxIiwieDIiLCJ5MSIsInkyIiwiU1ZHUGF0aEVsZW1lbnQiLCJmcm9tRnVsbERyYXduIiwiZmFjdG9yIiwiZ2V0SW50ZXJuYWxMaW5rcyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJmaWx0ZXIiLCJsaW5rRWxlbWVudCIsImlzTG9jYWwiLCJocmVmIiwiaW5kZXhPZiIsImxvY2F0aW9uIiwib3JpZ2luIiwiaXNOb3RFbWFpbCIsImlzTm90UGhvbmUiLCJoUmVmIiwiaXNBbmNob3IiLCJzdGFydHNXaXRoIiwicHJlbG9hZEltYWdlcyIsInRhcmdldEVsZW1lbnQiLCJzZWxlY3RvciIsImltYWdlRWxlbWVudCIsInJlcyIsIkltYWdlIiwib25sb2FkIiwib25lcnJvciIsInNyYyIsImNhbGxiYWNrIiwibWF4Q2FsbHNBbW91bnQiLCJtaWxsaXNlY29uZHMiLCJpbnRlcnZhbCIsInNldEludGVydmFsIiwiY2xlYXJJbnRlcnZhbCIsIkFuaW1hdGlvbiIsImNvbnN0cnVjdG9yIiwib3V0cHV0IiwiaW5pdGlhbER1cmF0aW9uIiwiZGVmYXVsdHMiLCJlbmREZWxheSIsImRpcmVjdGlvbiIsInN0YXJ0VGltZSIsInJhdGUiLCJjYW5jZWxUaW1lc3RhbXAiLCJub29wUmV0dXJuIiwidG90YWxEdXJhdGlvbiIsInBsYXlTdGF0ZSIsInJlamVjdCIsImlzRWFzaW5nR2VuZXJhdG9yIiwiY3VzdG9tIiwiY3JlYXRlQW5pbWF0aW9uIiwiaXNFYXNpbmdMaXN0IiwiZ2V0RWFzaW5nRnVuY3Rpb24iLCJ1cGRhdGVEdXJhdGlvbiIsImludGVycG9sYXRlJDEiLCJpbnRlcnBvbGF0ZSIsInRpY2siLCJ0aW1lc3RhbXAiLCJfYSIsInBhdXNlVGltZSIsImN1cnJlbnRJdGVyYXRpb24iLCJmbG9vciIsIml0ZXJhdGlvblByb2dyZXNzIiwiaXRlcmF0aW9uSXNPZGQiLCJwIiwibWluIiwibGF0ZXN0IiwiZnJhbWVSZXF1ZXN0SWQiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJub3ciLCJwZXJmb3JtYW5jZSIsInN0b3AiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsImNhbmNlbCIsImNvbW1pdFN0eWxlcyIsImN1cnJlbnRUaW1lIiwicGxheWJhY2tSYXRlIiwibmFtZWRFYXNpbmdzIiwiY3ViaWNCZXppZXIiLCJmdW5jdGlvbkFyZ3NSZWdleCIsImRlZmluaXRpb24iLCJpc0Z1bmN0aW9uIiwiQXJyYXkiLCJpc0FycmF5IiwiYXJncyIsImV4ZWMiLCJhcmdzQXJyYXkiLCJzdGVwcyIsInBhcnNlRmxvYXQiLCJ0cmltIiwiYW5pbWF0ZVN0eWxlIiwia2V5Iiwia2V5ZnJhbWVzRGVmaW5pdGlvbiIsInJlY29yZCIsIl9fTU9USU9OX0RFVl9UT09MU19SRUNPUkQiLCJpc1JlY29yZGluZyIsImFuaW1hdGlvbiIsImFsbG93V2Via2l0QWNjZWxlcmF0aW9uIiwiZGF0YSIsImdldEFuaW1hdGlvbkRhdGEiLCJ2YWx1ZUlzVHJhbnNmb3JtIiwiaXNUcmFuc2Zvcm0iLCJjYW5BbmltYXRlTmF0aXZlbHkiLCJzdXBwb3J0cyIsImFkZFRyYW5zZm9ybVRvRWxlbWVudCIsImdldFN0eWxlTmFtZSIsIm1vdGlvblZhbHVlIiwiZ2V0TW90aW9uVmFsdWUiLCJ2YWx1ZXMiLCJ0cmFuc2Zvcm1EZWZpbml0aW9ucyIsInN0b3BBbmltYXRpb24iLCJnZW5lcmF0b3IiLCJyZWFkSW5pdGlhbFZhbHVlIiwiX2IiLCJpbml0aWFsVmFsdWUiLCJoeWRyYXRlS2V5ZnJhbWVzIiwia2V5ZnJhbWVzTGlzdCIsImlzQ3NzVmFyIiwicmVnaXN0ZXJDc3NWYXJpYWJsZSIsInNvbWUiLCJpc051bWJlciIsInRvRGVmYXVsdFVuaXQiLCJ1bnNoaWZ0IiwiYW5pbWF0aW9uT3B0aW9ucyIsInRpbWUiLCJjb252ZXJ0RWFzaW5nIiwiaXRlcmF0aW9ucyIsInRoaXNFYXNpbmciLCJvbmZpbmlzaCIsIm9uY2FuY2VsIiwidGhlbiIsImNhdGNoIiwibm9vcCIsInJlbmRlciIsIk9iamVjdCIsImFzc2lnbiIsInNldEFuaW1hdGlvbiIsIldlYWtNYXAiLCJoYXMiLCJ0cmFuc2Zvcm1zIiwiTWFwIiwiZ2V0IiwibW90aW9uVmFsdWVzIiwiTW90aW9uVmFsdWUiLCJlbGVtZW50cyIsIm51bUVsZW1lbnRzIiwicmVzb2x2ZUVsZW1lbnRzIiwiYW5pbWF0aW9uRmFjdG9yaWVzIiwidmFsdWVPcHRpb25zIiwiZ2V0T3B0aW9ucyIsInJlc29sdmVPcHRpb24iLCJ3aXRoQ29udHJvbHMiLCJnZXRQcm9wZXJ0eVZhbHVlIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsImZhY3RvcnkiLCJhbmltYXRpb25GYWN0b3J5IiwiUHJveHkiLCJhbmltYXRpb25zIiwiY29udHJvbHMiLCJhY3RpdmVBbmltYXRpb24iLCJhbGwiLCJzZWxlY3RGaW5pc2hlZCIsInJlZ2lzdGVyZWRQcm9wZXJ0aWVzIiwiU2V0Iiwic3ludGF4IiwiQ1NTIiwicmVnaXN0ZXJQcm9wZXJ0eSIsImluaGVyaXRzIiwiZ2VuZXJhdGVMaW5lYXJFYXNpbmdQb2ludHMiLCJwb2ludHMiLCJudW1Qb2ludHMiLCJzdWJzdHJpbmciLCJpc0N1YmljQmV6aWVyIiwiY3ViaWNCZXppZXJBc1N0cmluZyIsImEiLCJiIiwiYyIsImQiLCJ0ZXN0QW5pbWF0aW9uIiwiY3JlYXRlRWxlbWVudCIsImZlYXR1cmVUZXN0cyIsImNzc1JlZ2lzdGVyUHJvcGVydHkiLCJoYXNPd25Qcm9wZXJ0eSIsIndhYXBpIiwiRWxlbWVudCIsInByb3RvdHlwZSIsInBhcnRpYWxLZXlmcmFtZXMiLCJsaW5lYXJFYXNpbmciLCJyZXN1bHRzIiwidHJhbnNmb3JtQWxpYXMiLCJhc1RyYW5zZm9ybUNzc1ZhciIsIm5lZWRzQ29tbWl0IiwiYXhlcyIsInoiLCJyb3RhdGlvbiIsInYiLCJiYXNlVHJhbnNmb3JtUHJvcGVydGllcyIsInRyYW5zbGF0ZSIsInJvdGF0ZSIsInNjYWxlIiwic2tldyIsImF4aXMiLCJjb21wYXJlVHJhbnNmb3JtT3JkZXIiLCJ0cmFuc2Zvcm1Mb29rdXAiLCJhZGRVbmlxdWVJdGVtIiwiYnVpbGRUcmFuc2Zvcm1UZW1wbGF0ZSIsInNvcnQiLCJyZWR1Y2UiLCJ0cmFuc2Zvcm1MaXN0VG9TdHJpbmciLCJ0ZW1wbGF0ZSIsImFuaW1hdGlvbkRlZmluaXRpb25zIiwiY3JlYXRlQW5pbWF0aW9uc0Zyb21UaW1lbGluZSIsImRlZmF1bHRPcHRpb25zIiwidGltZWxpbmVPcHRpb25zIiwiX19yZXN0IiwiZWxlbWVudFNlcXVlbmNlcyIsImVsZW1lbnRDYWNoZSIsInRpbWVMYWJlbHMiLCJwcmV2VGltZSIsInNlZ21lbnQiLCJpc1N0cmluZyIsImNhbGNOZXh0VGltZSIsImF0IiwiZWxlbWVudERlZmluaXRpb24iLCJtYXhEdXJhdGlvbiIsImVsZW1lbnRJbmRleCIsImVsZW1lbnRTZXF1ZW5jZSIsImdldEVsZW1lbnRTZXF1ZW5jZSIsInZhbHVlU2VxdWVuY2UiLCJnZXRWYWx1ZVNlcXVlbmNlIiwidmFsdWVLZXlmcmFtZXMiLCJpbnZhcmlhbnQiLCJ0YXJnZXRUaW1lIiwiZGVmYXVsdE9mZnNldCIsInJlbWFpbmRlciIsImZpbGxPZmZzZXQiLCJhZGRLZXlmcmFtZXMiLCJ2YWx1ZVNlcXVlbmNlcyIsImNvbXBhcmVCeVRpbWUiLCJ2YWx1ZU9mZnNldCIsInZhbHVlRWFzaW5nIiwic2VxdWVuY2VzIiwibmV4dCIsInByZXYiLCJsYWJlbHMiLCJlcmFzZUtleWZyYW1lcyIsInNlcXVlbmNlIiwiZW5kVGltZSIsImtleWZyYW1lIiwicmVtb3ZlSXRlbSIsIm1peCIsImdldEVhc2luZ0ZvclNlZ21lbnQiLCJzZWxlY3RvckNhY2hlIiwiZnJvbSIsInRvdGFsIiwiZnJvbUluZGV4IiwiZ2V0RnJvbUluZGV4IiwiZGlzdGFuY2UiLCJhYnMiLCJtYXhEZWxheSIsImVhc2luZ0Z1bmN0aW9uIiwibGFzdEluZGV4Iiwib3B0aW9uIiwiY2FsY0JlemllciIsImExIiwiYTIiLCJtWDEiLCJtWTEiLCJtWDIiLCJtWTIiLCJnZXRURm9yWCIsImFYIiwibG93ZXJCb3VuZCIsInVwcGVyQm91bmQiLCJjdXJyZW50WCIsImN1cnJlbnRUIiwiYmluYXJ5U3ViZGl2aWRlIiwiZXhwYW5kZWQiLCJyb3VuZGVkIiwiY2xlYXJBbmltYXRpb24iLCJhcnJheSIsIml0ZW0iLCJhcnIiLCJzcGxpY2UiLCJ3cmFwIiwiaW5wdXQiLCJwcm9ncmVzc0luUmFuZ2UiLCJzZWdtZW50RWFzaW5nIiwicmVtYWluaW5nIiwib2Zmc2V0UHJvZ3Jlc3MiLCJtcyIsInNlY29uZHMiLCJzIiwicmFuZ2VTaXplIiwibW9kdWxlIiwiZXhwb3J0cyIsImFuc2lIVE1MIiwiX3JlZ0FOU0kiLCJfZGVmQ29sb3JzIiwicmVzZXQiLCJibGFjayIsInJlZCIsImdyZWVuIiwieWVsbG93IiwiYmx1ZSIsIm1hZ2VudGEiLCJjeWFuIiwibGlnaHRncmV5IiwiZGFya2dyZXkiLCJfc3R5bGVzIiwiX29wZW5UYWdzIiwiX2Nsb3NlVGFncyIsInRleHQiLCJ0ZXN0IiwiYW5zaUNvZGVzIiwicmV0IiwicmVwbGFjZSIsIm1hdGNoIiwic2VxIiwib3QiLCJwb3AiLCJjdCIsImwiLCJqb2luIiwiX3NldFRhZ3MiLCJjb2xvcnMiLCJjb2RlIiwib3JpQ29sb3IiLCJ0b1N0cmluZyIsInNldENvbG9ycyIsIkVycm9yIiwiX2ZpbmFsQ29sb3JzIiwiaGV4IiwiZGVmSGV4Q29sb3IiLCJ0YWdzIiwiZGVmaW5lUHJvcGVydHkiLCJvcGVuIiwiY2xvc2UiLCJpc01lcmdlYWJsZU9iamVjdCIsImlzTm9uTnVsbE9iamVjdCIsInN0cmluZ1ZhbHVlIiwiJCR0eXBlb2YiLCJSRUFDVF9FTEVNRU5UX1RZUEUiLCJpc1JlYWN0RWxlbWVudCIsImlzU3BlY2lhbCIsIlN5bWJvbCIsImZvciIsImNsb25lVW5sZXNzT3RoZXJ3aXNlU3BlY2lmaWVkIiwiY2xvbmUiLCJkZWVwbWVyZ2UiLCJ2YWwiLCJkZWZhdWx0QXJyYXlNZXJnZSIsInNvdXJjZSIsImNvbmNhdCIsImdldEtleXMiLCJrZXlzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwic3ltYm9sIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJnZXRFbnVtZXJhYmxlT3duUHJvcGVydHlTeW1ib2xzIiwicHJvcGVydHlJc09uT2JqZWN0Iiwib2JqZWN0IiwicHJvcGVydHkiLCJfIiwibWVyZ2VPYmplY3QiLCJkZXN0aW5hdGlvbiIsInByb3BlcnR5SXNVbnNhZmUiLCJjdXN0b21NZXJnZSIsImdldE1lcmdlRnVuY3Rpb24iLCJhcnJheU1lcmdlIiwic291cmNlSXNBcnJheSIsImRlZXBtZXJnZV8xIiwiUmVmbGVjdE93bktleXMiLCJSIiwiUmVmbGVjdCIsIlJlZmxlY3RBcHBseSIsImFwcGx5IiwicmVjZWl2ZXIiLCJGdW5jdGlvbiIsIm93bktleXMiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiTnVtYmVySXNOYU4iLCJpc05hTiIsIkV2ZW50RW1pdHRlciIsImluaXQiLCJvbmNlIiwiZW1pdHRlciIsImVycm9yTGlzdGVuZXIiLCJlcnIiLCJyZW1vdmVMaXN0ZW5lciIsInJlc29sdmVyIiwiYXJndW1lbnRzIiwiZXZlbnRUYXJnZXRBZ25vc3RpY0FkZExpc3RlbmVyIiwiaGFuZGxlciIsImZsYWdzIiwib24iLCJhZGRFcnJvckhhbmRsZXJJZkV2ZW50RW1pdHRlciIsIl9ldmVudHMiLCJfZXZlbnRzQ291bnQiLCJfbWF4TGlzdGVuZXJzIiwiZGVmYXVsdE1heExpc3RlbmVycyIsImNoZWNrTGlzdGVuZXIiLCJsaXN0ZW5lciIsIlR5cGVFcnJvciIsIl9nZXRNYXhMaXN0ZW5lcnMiLCJ0aGF0IiwiX2FkZExpc3RlbmVyIiwicHJlcGVuZCIsIm0iLCJldmVudHMiLCJleGlzdGluZyIsIndhcm5pbmciLCJjcmVhdGUiLCJuZXdMaXN0ZW5lciIsImVtaXQiLCJ3YXJuZWQiLCJ3IiwiY291bnQiLCJjb25zb2xlIiwid2FybiIsIm9uY2VXcmFwcGVyIiwiZmlyZWQiLCJ3cmFwRm4iLCJfb25jZVdyYXAiLCJzdGF0ZSIsIndyYXBwZWQiLCJfbGlzdGVuZXJzIiwidW53cmFwIiwiZXZsaXN0ZW5lciIsInVud3JhcExpc3RlbmVycyIsImFycmF5Q2xvbmUiLCJsaXN0ZW5lckNvdW50IiwiY29weSIsImFkZEV2ZW50TGlzdGVuZXIiLCJ3cmFwTGlzdGVuZXIiLCJhcmciLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiZW51bWVyYWJsZSIsIlJhbmdlRXJyb3IiLCJnZXRQcm90b3R5cGVPZiIsInNldE1heExpc3RlbmVycyIsImdldE1heExpc3RlbmVycyIsImRvRXJyb3IiLCJlcnJvciIsImVyIiwibWVzc2FnZSIsImxlbiIsImxpc3RlbmVycyIsImFkZExpc3RlbmVyIiwicHJlcGVuZExpc3RlbmVyIiwicHJlcGVuZE9uY2VMaXN0ZW5lciIsImxpc3QiLCJvcmlnaW5hbExpc3RlbmVyIiwic2hpZnQiLCJzcGxpY2VPbmUiLCJvZmYiLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJyYXdMaXN0ZW5lcnMiLCJldmVudE5hbWVzIiwiX3dpbiIsIl9kb2MiLCJfZG9jRWxlbWVudCIsIl9wbHVnaW5Jbml0dGVkIiwiX3RlbXBEaXYiLCJfcmVjZW50U2V0dGVyUGx1Z2luIiwiX3JldmVydGluZyIsIl9zdXBwb3J0czNEIiwiX3RyYW5zZm9ybVByb3BzIiwiX1JBRDJERUciLCJfREVHMlJBRCIsIl9hdGFuMiIsImF0YW4yIiwiX2NhcHNFeHAiLCJfaG9yaXpvbnRhbEV4cCIsIl9jb21wbGV4RXhwIiwiX3Byb3BlcnR5QWxpYXNlcyIsImFscGhhIiwiX3JlbmRlckNTU1Byb3AiLCJ1IiwiX3JlbmRlclByb3BXaXRoRW5kIiwiX3JlbmRlckNTU1Byb3BXaXRoQmVnaW5uaW5nIiwiX3JlbmRlclJvdW5kZWRDU1NQcm9wIiwiX3JlbmRlck5vblR3ZWVuaW5nVmFsdWUiLCJfcmVuZGVyTm9uVHdlZW5pbmdWYWx1ZU9ubHlBdEVuZCIsIl9zZXR0ZXJDU1NTdHlsZSIsIl9zZXR0ZXJDU1NQcm9wIiwiX3NldHRlclRyYW5zZm9ybSIsIl9nc2FwIiwiX3NldHRlclNjYWxlIiwic2NhbGVYIiwic2NhbGVZIiwiX3NldHRlclNjYWxlV2l0aFJlbmRlciIsImNhY2hlIiwicmVuZGVyVHJhbnNmb3JtIiwiX3NldHRlclRyYW5zZm9ybVdpdGhSZW5kZXIiLCJfdHJhbnNmb3JtUHJvcCIsIl90cmFuc2Zvcm1PcmlnaW5Qcm9wIiwiX3NhdmVTdHlsZSIsIl90aGlzIiwidGZtIiwiX2dldCIsInByb3BzIiwiX3JlbW92ZUluZGVwZW5kZW50VHJhbnNmb3JtcyIsInJlbW92ZVByb3BlcnR5IiwiX3JldmVydFN0eWxlIiwidG9Mb3dlckNhc2UiLCJpc1N0YXJ0IiwidW5jYWNoZSIsIl9nZXRTdHlsZVNhdmVyIiwicHJvcGVydGllcyIsInNhdmVyIiwiX2NyZWF0ZUVsZW1lbnQiLCJucyIsImNyZWF0ZUVsZW1lbnROUyIsIl9nZXRDb21wdXRlZFByb3BlcnR5Iiwic2tpcFByZWZpeEZhbGxiYWNrIiwiY3MiLCJfY2hlY2tQcm9wUHJlZml4IiwiX3ByZWZpeGVzIiwicHJlZmVyUHJlZml4IiwiY2hhckF0IiwidG9VcHBlckNhc2UiLCJzdWJzdHIiLCJfaW5pdENvcmUiLCJkb2N1bWVudEVsZW1lbnQiLCJjc3NUZXh0IiwiX2dldEJCb3hIYWNrIiwic3dhcElmUG9zc2libGUiLCJiYm94Iiwib3duZXJTVkdFbGVtZW50Iiwib2xkUGFyZW50IiwicGFyZW50Tm9kZSIsIm9sZFNpYmxpbmciLCJuZXh0U2libGluZyIsIm9sZENTUyIsImFwcGVuZENoaWxkIiwiZGlzcGxheSIsImdldEJCb3giLCJfZ3NhcEJCb3giLCJpbnNlcnRCZWZvcmUiLCJyZW1vdmVDaGlsZCIsIl9nZXRBdHRyaWJ1dGVGYWxsYmFja3MiLCJhdHRyaWJ1dGVzQXJyYXkiLCJfZ2V0QkJveCIsImJvdW5kcyIsIl9pc1NWRyIsImdldENUTSIsIl9yZW1vdmVQcm9wZXJ0eSIsInJlbW92ZUF0dHJpYnV0ZSIsIl9hZGROb25Ud2VlbmluZ1BUIiwicGx1Z2luIiwiYmVnaW5uaW5nIiwiZW5kIiwib25seVNldEF0RW5kIiwicHQiLCJQcm9wVHdlZW4iLCJfcHQiLCJfcHJvcHMiLCJfbm9uQ29udmVydGlibGVVbml0cyIsImRlZyIsInJhZCIsInR1cm4iLCJfbm9uU3RhbmRhcmRMYXlvdXRzIiwiZ3JpZCIsImZsZXgiLCJfY29udmVydFRvVW5pdCIsInVuaXQiLCJweCIsInBhcmVudCIsImlzU1ZHIiwiY3VyVmFsdWUiLCJjdXJVbml0IiwiaG9yaXpvbnRhbCIsImlzUm9vdFNWRyIsIm1lYXN1cmVQcm9wZXJ0eSIsImFtb3VudCIsInRvUGl4ZWxzIiwidG9QZXJjZW50IiwiYm9keSIsIl90aWNrZXIiLCJfcm91bmQiLCJfZ2V0Q2FjaGUiLCJfcGFyc2VUcmFuc2Zvcm0iLCJfZmlyc3RUd29Pbmx5Iiwiek9yaWdpbiIsIl9zcGVjaWFsUHJvcHMiLCJfZ2V0UHJvcGVydHkiLCJfdHdlZW5Db21wbGV4Q1NTU3RyaW5nIiwicHJvcCIsInJlc3VsdCIsInN0YXJ0VmFsdWVzIiwic3RhcnROdW0iLCJzdGFydFZhbHVlIiwiZW5kVmFsdWUiLCJlbmROdW0iLCJjaHVuayIsImVuZFVuaXQiLCJzdGFydFVuaXQiLCJfcmVuZGVyQ29tcGxleFN0cmluZyIsIm1hdGNoSW5kZXgiLCJfY29sb3JTdHJpbmdGaWx0ZXIiLCJfbnVtV2l0aFVuaXRFeHAiLCJfcGFyc2VSZWxhdGl2ZSIsIl9jb25maWciLCJfbmV4dCIsIl9yZWxFeHAiLCJfa2V5d29yZFRvUGVyY2VudCIsImxlZnQiLCJyaWdodCIsImNlbnRlciIsIl9yZW5kZXJDbGVhclByb3BzIiwiX3RpbWUiLCJfZHVyIiwiY2xlYXJUcmFuc2Zvcm1zIiwicHIiLCJfaWRlbnRpdHkyRE1hdHJpeCIsIl9yb3RhdGlvbmFsUHJvcGVydGllcyIsIl9pc051bGxUcmFuc2Zvcm0iLCJfZ2V0Q29tcHV0ZWRUcmFuc2Zvcm1NYXRyaXhBc0FycmF5IiwibWF0cml4U3RyaW5nIiwiX251bUV4cCIsIl9nZXRNYXRyaXgiLCJmb3JjZTJEIiwidGVtcCIsImFkZGVkVG9ET00iLCJtYXRyaXgiLCJiYXNlVmFsIiwiY29uc29saWRhdGUiLCJmIiwib2Zmc2V0UGFyZW50IiwibmV4dEVsZW1lbnRTaWJsaW5nIiwiX2FwcGx5U1ZHT3JpZ2luIiwib3JpZ2luSXNBYnNvbHV0ZSIsInNtb290aCIsIm1hdHJpeEFycmF5IiwicGx1Z2luVG9BZGRQcm9wVHdlZW5zVG8iLCJkZXRlcm1pbmFudCIsInhPcmlnaW5PbGQiLCJ4T3JpZ2luIiwieU9yaWdpbk9sZCIsInlPcmlnaW4iLCJ4T2Zmc2V0T2xkIiwieE9mZnNldCIsInlPZmZzZXRPbGQiLCJ5T2Zmc2V0IiwidHgiLCJ0eSIsIm9yaWdpblNwbGl0IiwiR1NDYWNoZSIsInJvdGF0aW9uWCIsInJvdGF0aW9uWSIsInBlcnNwZWN0aXZlIiwiYW5nbGUiLCJjb3MiLCJhMTIiLCJhMjIiLCJ0MSIsInQyIiwidDMiLCJhMTMiLCJhMjMiLCJhMzMiLCJhNDIiLCJhNDMiLCJhMzIiLCJpbnZlcnRlZFNjYWxlWCIsImZvcmNlQ1NTIiwieFBlcmNlbnQiLCJvZmZzZXRXaWR0aCIsInRyYW5zZm9ybVBlcnNwZWN0aXZlIiwiZm9yY2UzRCIsIl9yZW5kZXJTVkdUcmFuc2Zvcm1zIiwiX3JlbmRlckNTU1RyYW5zZm9ybXMiLCJfcmVuZGVyTm9uM0RUcmFuc2Zvcm1zIiwiX2FkZFB4VHJhbnNsYXRlIiwiZ2V0VW5pdCIsIl96ZXJvRGVnIiwiX3plcm9QeCIsIl9lbmRQYXJlbnRoZXNpcyIsIl9yZWYiLCJ1c2UzRCIsImExMSIsImEyMSIsIl9yZWYyIiwidGFuIiwiX2FkZFJvdGF0aW9uYWxQcm9wVHdlZW4iLCJjYXAiLCJfaXNTdHJpbmciLCJjaGFuZ2UiLCJmaW5hbFZhbHVlIiwiX2Fzc2lnbiIsIl9hZGRSYXdUcmFuc2Zvcm1QVHMiLCJlbmRDYWNoZSIsInN0YXJ0Q2FjaGUiLCJfZm9yRWFjaE5hbWUiLCJ2YXJzIiwicG9zaXRpb25BbmRTY2FsZSIsIkNTU1BsdWdpbiIsInJlZ2lzdGVyIiwidGFyZ2V0VGVzdCIsIm5vZGVUeXBlIiwidGFyZ2V0cyIsInNwZWNpYWxQcm9wIiwicmVsYXRpdmUiLCJpc1RyYW5zZm9ybVJlbGF0ZWQiLCJ0cmFuc2Zvcm1Qcm9wVHdlZW4iLCJoYXNQcmlvcml0eSIsImlubGluZVByb3BzIiwic3RhcnRBdCIsInN0eWxlcyIsIl9wbHVnaW5zIiwiX2NoZWNrUGx1Z2luIiwiX3JlcGxhY2VSYW5kb20iLCJfY29sb3JFeHAiLCJ2aXNpYmlsaXR5IiwicGFyc2VUcmFuc2Zvcm0iLCJzbW9vdGhPcmlnaW4iLCJkZXAiLCJhdXRvUm91bmQiLCJfbWlzc2luZ1BsdWdpbiIsIl9zb3J0UHJvcFR3ZWVuc0J5UHJpb3JpdHkiLCJhbGlhc2VzIiwiZ2V0U2V0dGVyIiwiX2lzVW5kZWZpbmVkIiwiX2dldFNldHRlciIsImNvcmUiLCJfYXNzZXJ0VGhpc0luaXRpYWxpemVkIiwic2VsZiIsIlJlZmVyZW5jZUVycm9yIiwiX2luaGVyaXRzTG9vc2UiLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJfX3Byb3RvX18iLCJfc3VwcHJlc3NPdmVyd3JpdGVzIiwiX2NvbnRleHQiLCJfZ2xvYmFsVGltZWxpbmUiLCJfY29yZUluaXR0ZWQiLCJfY29yZVJlYWR5IiwiX2xhc3RSZW5kZXJlZEZyYW1lIiwiX3F1aWNrVHdlZW4iLCJfdGlja2VyQWN0aXZlIiwibjEiLCJlYXNlT3V0IiwiYXV0b1NsZWVwIiwibnVsbFRhcmdldFdhcm4iLCJ1bml0cyIsImxpbmVIZWlnaHQiLCJfZGVmYXVsdHMiLCJvdmVyd3JpdGUiLCJfYmlnTnVtIiwiX3RpbnlOdW0iLCJfMlBJIiwiX0hBTEZfUEkiLCJfZ3NJRCIsIl9zcXJ0IiwiX2NvcyIsIl9zaW4iLCJfaXNGdW5jdGlvbiIsIl9pc051bWJlciIsIl9pc09iamVjdCIsIl9pc05vdEZhbHNlIiwiX3dpbmRvd0V4aXN0cyIsIl9pc0Z1bmNPclN0cmluZyIsIl9pc1R5cGVkQXJyYXkiLCJBcnJheUJ1ZmZlciIsImlzVmlldyIsIl9pc0FycmF5IiwiX3N0cmljdE51bUV4cCIsIl9jb21wbGV4U3RyaW5nTnVtRXhwIiwiX2RlbGltaXRlZFZhbHVlRXhwIiwiX3VuaXRFeHAiLCJfZ2xvYmFscyIsIl9pbnN0YWxsU2NvcGUiLCJfaW5zdGFsbCIsInNjb3BlIiwiX21lcmdlIiwiX3dhcm4iLCJzdXBwcmVzcyIsIl9hZGRHbG9iYWwiLCJvYmoiLCJfZW1wdHlGdW5jIiwiX3N0YXJ0QXRSZXZlcnRDb25maWciLCJzdXBwcmVzc0V2ZW50cyIsIl9yZXZlcnRDb25maWciLCJfcmVzZXJ2ZWRQcm9wcyIsIl9sYXp5VHdlZW5zIiwiX2xhenlMb29rdXAiLCJfZWZmZWN0cyIsIl9uZXh0R0NGcmFtZSIsIl9oYXJuZXNzUGx1Z2lucyIsIl9jYWxsYmFja05hbWVzIiwiX2hhcm5lc3MiLCJoYXJuZXNzUGx1Z2luIiwiaGFybmVzcyIsInRvQXJyYXkiLCJuYW1lcyIsImZ1bmMiLCJfcm91bmRQcmVjaXNlIiwib3BlcmF0b3IiLCJfYXJyYXlDb250YWluc0FueSIsInRvU2VhcmNoIiwidG9GaW5kIiwiX2xhenlSZW5kZXIiLCJfbGF6eSIsIl9sYXp5U2FmZVJlbmRlciIsImZvcmNlIiwiX251bWVyaWNJZlBvc3NpYmxlIiwiX3Bhc3NUaHJvdWdoIiwiX3NldERlZmF1bHRzIiwiYmFzZSIsInRvTWVyZ2UiLCJfbWVyZ2VEZWVwIiwiX2NvcHlFeGNsdWRpbmciLCJleGNsdWRpbmciLCJfaW5oZXJpdERlZmF1bHRzIiwiZXhjbHVkZUR1cmF0aW9uIiwiaW5oZXJpdCIsIl9kcCIsIl9hZGRMaW5rZWRMaXN0SXRlbSIsImNoaWxkIiwiZmlyc3RQcm9wIiwibGFzdFByb3AiLCJzb3J0QnkiLCJfcHJldiIsIl9yZW1vdmVMaW5rZWRMaXN0SXRlbSIsIl9yZW1vdmVGcm9tUGFyZW50Iiwib25seUlmUGFyZW50SGFzQXV0b1JlbW92ZSIsImF1dG9SZW1vdmVDaGlsZHJlbiIsInJlbW92ZSIsIl9hY3QiLCJfdW5jYWNoZSIsIl9lbmQiLCJfc3RhcnQiLCJfZGlydHkiLCJfcmVjYWNoZUFuY2VzdG9ycyIsIl9yZXdpbmRTdGFydEF0IiwidG90YWxUaW1lIiwiX3N0YXJ0QXQiLCJpbW1lZGlhdGVSZW5kZXIiLCJhdXRvUmV2ZXJ0IiwiX2hhc05vUGF1c2VkQW5jZXN0b3JzIiwiX3RzIiwiX2VsYXBzZWRDeWNsZUR1cmF0aW9uIiwiX3JlcGVhdCIsIl9hbmltYXRpb25DeWNsZSIsIl90VGltZSIsIl9yRGVsYXkiLCJ0VGltZSIsImN5Y2xlRHVyYXRpb24iLCJ3aG9sZSIsIl9wYXJlbnRUb0NoaWxkVG90YWxUaW1lIiwicGFyZW50VGltZSIsIl90RHVyIiwiX3NldEVuZCIsIl9ydHMiLCJfYWxpZ25QbGF5aGVhZCIsInNtb290aENoaWxkVGltaW5nIiwiX3Bvc3RBZGRDaGVja3MiLCJfaW5pdHRlZCIsInJhd1RpbWUiLCJfY2xhbXAiLCJfelRpbWUiLCJfYWRkVG9UaW1lbGluZSIsInNraXBDaGVja3MiLCJfcGFyc2VQb3NpdGlvbiIsIl9kZWxheSIsInRpbWVTY2FsZSIsIl9zb3J0IiwiX2lzRnJvbU9yRnJvbVN0YXJ0IiwiX3JlY2VudCIsIl9zY3JvbGxUcmlnZ2VyIiwidHJpZ2dlciIsIlNjcm9sbFRyaWdnZXIiLCJfYXR0ZW1wdEluaXRUd2VlbiIsIl9pbml0VHdlZW4iLCJsYXp5IiwiZnJhbWUiLCJfcGFyZW50UGxheWhlYWRJc0JlZm9yZVN0YXJ0IiwiX2xvY2siLCJfc2V0RHVyYXRpb24iLCJza2lwVW5jYWNoZSIsImxlYXZlUGxheWhlYWQiLCJkdXIiLCJ0b3RhbFByb2dyZXNzIiwiX29uVXBkYXRlVG90YWxEdXJhdGlvbiIsIlRpbWVsaW5lIiwiX3plcm9Qb3NpdGlvbiIsInBlcmNlbnRBbmltYXRpb24iLCJpc1BlcmNlbnQiLCJyZWNlbnQiLCJjbGlwcGVkRHVyYXRpb24iLCJfY3JlYXRlVHdlZW5UeXBlIiwicGFyYW1zIiwiaXJWYXJzIiwiaXNMZWdhY3kiLCJ2YXJzSW5kZXgiLCJydW5CYWNrd2FyZHMiLCJUd2VlbiIsIl9jb25kaXRpb25hbFJldHVybiIsIl9zbGljZSIsIl9pc0FycmF5TGlrZSIsIm5vbkVtcHR5IiwiX2ZsYXR0ZW4iLCJhciIsImxlYXZlU3RyaW5ncyIsImFjY3VtdWxhdG9yIiwiX2FjY3VtdWxhdG9yIiwiX3dha2UiLCJuYXRpdmVFbGVtZW50Iiwic2h1ZmZsZSIsInJhbmRvbSIsImRpc3RyaWJ1dGUiLCJlYWNoIiwiX3BhcnNlRWFzZSIsImlzRGVjaW1hbCIsInJhdGlvcyIsInJhdGlvWCIsInJhdGlvWSIsImVkZ2VzIiwib3JpZ2luWCIsIm9yaWdpblkiLCJqIiwid3JhcEF0IiwiZGlzdGFuY2VzIiwiX2ludmVydEVhc2UiLCJfcm91bmRNb2RpZmllciIsInBvdyIsInJhdyIsInNuYXAiLCJzbmFwVG8iLCJyYWRpdXMiLCJpczJEIiwiaW5jcmVtZW50IiwiZHgiLCJkeSIsImNsb3Nlc3QiLCJyb3VuZGluZ0luY3JlbWVudCIsInJldHVybkZ1bmN0aW9uIiwicGlwZSIsIl9sZW4iLCJmdW5jdGlvbnMiLCJfa2V5IiwidW5pdGl6ZSIsIm5vcm1hbGl6ZSIsIm1hcFJhbmdlIiwiX3dyYXBBcnJheSIsInJhbmdlIiwid3JhcFlveW8iLCJudW1zIiwiaW5NaW4iLCJpbk1heCIsIm91dE1pbiIsIm91dE1heCIsImluUmFuZ2UiLCJvdXRSYW5nZSIsIm11dGF0ZSIsImludGVycG9sYXRvcnMiLCJpbCIsIm1hc3RlciIsIl9hZGRQcm9wVHdlZW4iLCJfcmVuZGVyUHJvcFR3ZWVucyIsIl9nZXRMYWJlbEluRGlyZWN0aW9uIiwiZnJvbVRpbWUiLCJiYWNrd2FyZCIsImxhYmVsIiwiX2NhbGxiYWNrIiwiZXhlY3V0ZUxhenlGaXJzdCIsInByZXZDb250ZXh0IiwiX2N0eCIsImNhbGxiYWNrU2NvcGUiLCJfaW50ZXJydXB0Iiwic2Nyb2xsVHJpZ2dlciIsIl9jcmVhdGVQbHVnaW4iLCJjb25maWciLCJpc0Z1bmMiLCJQbHVnaW4iLCJpbnN0YW5jZURlZmF1bHRzIiwiX2tpbGxQcm9wVHdlZW5zT2YiLCJtb2RpZmllciIsIl9hZGRQbHVnaW5Nb2RpZmllciIsInJhd1ZhcnMiLCJzdGF0aWNzIiwiXzI1NSIsIl9jb2xvckxvb2t1cCIsImFxdWEiLCJsaW1lIiwic2lsdmVyIiwibWFyb29uIiwidGVhbCIsIm5hdnkiLCJ3aGl0ZSIsIm9saXZlIiwib3JhbmdlIiwiZ3JheSIsInB1cnBsZSIsInBpbmsiLCJ0cmFuc3BhcmVudCIsIl9odWUiLCJtMSIsIm0yIiwic3BsaXRDb2xvciIsInRvSFNMIiwiZm9yY2VBbHBoYSIsImciLCJ3YXNIU0wiLCJfY29sb3JPcmRlckRhdGEiLCJfZm9ybWF0Q29sb3JzIiwib3JkZXJNYXRjaERhdGEiLCJzaGVsbCIsIlJlZ0V4cCIsIl9oc2xFeHAiLCJjb21iaW5lZCIsIl9pZCIsIl9yZXEiLCJfcmFmIiwiX3NlbGYiLCJfZGVsdGEiLCJfaSIsIl9nZXRUaW1lIiwiRGF0ZSIsIl9sYWdUaHJlc2hvbGQiLCJfYWRqdXN0ZWRMYWciLCJfc3RhcnRUaW1lIiwiX2xhc3RVcGRhdGUiLCJfZ2FwIiwiX25leHRUaW1lIiwiX3RpY2siLCJvdmVybGFwIiwiZGlzcGF0Y2giLCJlbGFwc2VkIiwibWFudWFsIiwiZGVsdGFSYXRpbyIsImZwcyIsIndha2UiLCJnc2FwVmVyc2lvbnMiLCJ2ZXJzaW9uIiwiR3JlZW5Tb2NrR2xvYmFscyIsInNsZWVwIiwibGFnU21vb3RoaW5nIiwiYWRqdXN0ZWRMYWciLCJfZnBzIiwicHJpb3JpdGl6ZSIsIl9lYXNlTWFwIiwiX2N1c3RvbUVhc2VFeHAiLCJfcXVvdGVzRXhwIiwiX3BhcnNlT2JqZWN0SW5TdHJpbmciLCJwYXJzZWRWYWwiLCJsYXN0SW5kZXhPZiIsIl9wcm9wYWdhdGVZb3lvRWFzZSIsImlzWW95byIsIl9maXJzdCIsInlveW9FYXNlIiwiX3lveW8iLCJfZWFzZSIsIl95RWFzZSIsImRlZmF1bHRFYXNlIiwibmVzdGVkIiwiX0NFIiwiX2NvbmZpZ0Vhc2VGcm9tU3RyaW5nIiwiX2luc2VydEVhc2UiLCJlYXNlSW4iLCJlYXNlSW5PdXQiLCJsb3dlcmNhc2VOYW1lIiwiX2Vhc2VJbk91dEZyb21PdXQiLCJfY29uZmlnRWxhc3RpYyIsInBlcmlvZCIsInAxIiwicDIiLCJwMyIsImFzaW4iLCJfY29uZmlnQmFjayIsIm92ZXJzaG9vdCIsInBvd2VyIiwiTGluZWFyIiwiZWFzZU5vbmUiLCJub25lIiwiU3RlcHBlZEVhc2UiLCJpbW1lZGlhdGVTdGFydCIsImlkIiwiSW5maW5pdHkiLCJyZXBlYXREZWxheSIsInlveW8iLCJfcHJvdG8iLCJfdG90YWxUaW1lIiwiX3B0TG9va3VwIiwiX3BUaW1lIiwiaXRlcmF0aW9uIiwiX3BzIiwicGF1c2VkIiwiaW5jbHVkZVJlcGVhdHMiLCJ3cmFwUmVwZWF0cyIsInByZXZJc1JldmVydGluZyIsImdsb2JhbFRpbWUiLCJzZWVrIiwicmVzdGFydCIsImluY2x1ZGVEZWxheSIsInJldmVyc2VkIiwiYXRUaW1lIiwicmVzdW1lIiwiaW52YWxpZGF0ZSIsImV2ZW50Q2FsbGJhY2siLCJfb25VcGRhdGUiLCJvbkZ1bGZpbGxlZCIsIl9yZXNvbHZlIiwiX3RoZW4iLCJfcHJvbSIsIl9BbmltYXRpb24iLCJzb3J0Q2hpbGRyZW4iLCJfcHJvdG8yIiwiZnJvbVZhcnMiLCJ0b1ZhcnMiLCJkZWxheWVkQ2FsbCIsInN0YWdnZXJUbyIsIm9uQ29tcGxldGVBbGwiLCJvbkNvbXBsZXRlQWxsUGFyYW1zIiwib25Db21wbGV0ZVBhcmFtcyIsInN0YWdnZXJGcm9tIiwic3RhZ2dlckZyb21UbyIsInByZXZQYXVzZWQiLCJwYXVzZVR3ZWVuIiwicHJldlN0YXJ0IiwicHJldkl0ZXJhdGlvbiIsInREdXIiLCJjcm9zc2luZ1N0YXJ0IiwicmV3aW5kaW5nIiwiZG9lc1dyYXAiLCJyZXBlYXRSZWZyZXNoIiwib25SZXBlYXQiLCJfaGFzUGF1c2UiLCJfZm9yY2luZyIsIl9sYXN0IiwiX2ZpbmROZXh0UGF1c2VUd2VlbiIsImFkanVzdGVkVGltZSIsIl90aGlzMiIsImFkZExhYmVsIiwiZ2V0Q2hpbGRyZW4iLCJ0d2VlbnMiLCJ0aW1lbGluZXMiLCJpZ25vcmVCZWZvcmVUaW1lIiwiZ2V0QnlJZCIsInJlbW92ZUxhYmVsIiwia2lsbFR3ZWVuc09mIiwiX3RvdGFsVGltZTIiLCJhZGRQYXVzZSIsInJlbW92ZVBhdXNlIiwib25seUFjdGl2ZSIsImdldFR3ZWVuc09mIiwiX292ZXJ3cml0aW5nVHdlZW4iLCJwYXJzZWRUYXJnZXRzIiwiaXNHbG9iYWxUaW1lIiwiX3RhcmdldHMiLCJ0d2VlblRvIiwiaW5pdHRlZCIsInRsIiwiX3ZhcnMiLCJfb25TdGFydCIsIm9uU3RhcnRQYXJhbXMiLCJ0d2VlbkZyb21UbyIsImZyb21Qb3NpdGlvbiIsInRvUG9zaXRpb24iLCJuZXh0TGFiZWwiLCJhZnRlclRpbWUiLCJwcmV2aW91c0xhYmVsIiwiYmVmb3JlVGltZSIsImN1cnJlbnRMYWJlbCIsInNoaWZ0Q2hpbGRyZW4iLCJhZGp1c3RMYWJlbHMiLCJjbGVhciIsImluY2x1ZGVMYWJlbHMiLCJ1cGRhdGVSb290IiwiX2ZvcmNlQWxsUHJvcFR3ZWVucyIsIl9hZGRDb21wbGV4U3RyaW5nUHJvcFR3ZWVuIiwic2V0dGVyIiwic3RyaW5nRmlsdGVyIiwiZnVuY1BhcmFtIiwic3RhcnROdW1zIiwiaGFzUmFuZG9tIiwiZnAiLCJvcHRpb25hbCIsImN1cnJlbnRWYWx1ZSIsInBhcnNlZFN0YXJ0IiwiX3NldHRlckZ1bmNXaXRoUGFyYW0iLCJfc2V0dGVyRnVuYyIsIl9zZXR0ZXJQbGFpbiIsIl9yZW5kZXJCb29sZWFuIiwiX3JlbmRlclBsYWluIiwicHRMb29rdXAiLCJfcGFyc2VGdW5jT3JTdHJpbmciLCJfcHJvY2Vzc1ZhcnMiLCJwcmlvcml0eSIsImNsZWFuVmFycyIsImdzRGF0YSIsImhhcm5lc3NWYXJzIiwib3ZlcndyaXR0ZW4iLCJwcmV2U3RhcnRBdCIsImZ1bGxUYXJnZXRzIiwiYXV0b092ZXJ3cml0ZSIsIl9vdmVyd3JpdGUiLCJfZnJvbSIsIl9wdENhY2hlIiwiX29wIiwiX29uSW5pdCIsIl9wYXJzZUtleWZyYW1lIiwiYWxsUHJvcHMiLCJlYXNlRWFjaCIsIl9zdGFnZ2VyVHdlZW5Qcm9wcyIsIl9zdGFnZ2VyUHJvcHNUb1NraXAiLCJfQW5pbWF0aW9uMiIsInNraXBJbmhlcml0IiwiX3RoaXMzIiwiY3VyVGFyZ2V0Iiwic3RhZ2dlckZ1bmMiLCJzdGFnZ2VyVmFyc1RvTWVyZ2UiLCJfdGhpczMkdmFycyIsImtmIiwiX3Byb3RvMyIsImlzTmVnYXRpdmUiLCJwcmV2UmF0aW8iLCJfcmVuZGVyWmVyb0R1cmF0aW9uVHdlZW4iLCJyZXNldFRvIiwic3RhcnRJc1JlbGF0aXZlIiwicm9vdFBUIiwibG9va3VwIiwicHRDYWNoZSIsIl91cGRhdGVQcm9wVHdlZW5zIiwib3ZlcndyaXR0ZW5Qcm9wcyIsImN1ckxvb2t1cCIsImN1ck92ZXJ3cml0ZVByb3BzIiwia2lsbGluZ1RhcmdldHMiLCJwcm9wVHdlZW5Mb29rdXAiLCJmaXJzdFBUIiwiX2FycmF5c01hdGNoIiwicHJvcGVydHlBbGlhc2VzIiwiX2FkZEFsaWFzZXNUb1ZhcnMiLCJvblJldmVyc2VDb21wbGV0ZSIsIm9uUmV2ZXJzZUNvbXBsZXRlUGFyYW1zIiwiX3NldHRlckF0dHJpYnV0ZSIsImhhc05vbkRlcGVuZGVudFJlbWFpbmluZyIsIm9wIiwiX3NldHRlcldpdGhNb2RpZmllciIsIm1TZXQiLCJtdCIsInB0MiIsImZpcnN0IiwicmVuZGVyZXIiLCJUd2Vlbk1heCIsIlR3ZWVuTGl0ZSIsIlRpbWVsaW5lTGl0ZSIsIlRpbWVsaW5lTWF4IiwiX21lZGlhIiwiX2VtcHR5QXJyYXkiLCJfbGFzdE1lZGlhVGltZSIsIl9kaXNwYXRjaCIsIl9vbk1lZGlhQ2hhbmdlIiwibWF0Y2hlcyIsImFueU1hdGNoIiwidG9nZ2xlZCIsInF1ZXJpZXMiLCJjb25kaXRpb25zIiwibWF0Y2hNZWRpYSIsIm9uTWF0Y2giLCJDb250ZXh0IiwiX3IiLCJpc1JldmVydGVkIiwiX3Byb3RvNSIsInByZXZTZWxlY3RvciIsImlnbm9yZSIsImdldFR3ZWVucyIsIl90aGlzNCIsIm8iLCJNYXRjaE1lZGlhIiwiY29udGV4dHMiLCJfcHJvdG82IiwibXEiLCJhY3RpdmUiLCJjb25kIiwicmVnaXN0ZXJQbHVnaW4iLCJfbGVuMiIsIl9rZXkyIiwiZ2V0UHJvcGVydHkiLCJnZXR0ZXIiLCJmb3JtYXQiLCJxdWlja1NldHRlciIsInNldHRlcnMiLCJxdWlja1RvIiwiX21lcmdlMiIsImlzVHdlZW5pbmciLCJyZWdpc3RlckVmZmVjdCIsIl9yZWYzIiwiZWZmZWN0IiwicGx1Z2lucyIsImV4dGVuZFRpbWVsaW5lIiwicGx1Z2luTmFtZSIsInJlZ2lzdGVyRWFzZSIsInBhcnNlRWFzZSIsImV4cG9ydFJvb3QiLCJpbmNsdWRlRGVsYXllZENhbGxzIiwibWF0Y2hNZWRpYVJlZnJlc2giLCJmb3VuZCIsInV0aWxzIiwiaW5zdGFsbCIsImVmZmVjdHMiLCJ0aWNrZXIiLCJnbG9iYWxUaW1lbGluZSIsImdsb2JhbHMiLCJnZXRDYWNoZSIsInJldmVydGluZyIsInRvQWRkIiwic3VwcHJlc3NPdmVyd3JpdGVzIiwiX2dldFBsdWdpblByb3BUd2VlbiIsIl9idWlsZE1vZGlmaWVyUGx1Z2luIiwibW9kaWZpZXJzIiwiX2FkZE1vZGlmaWVycyIsIlBvd2VyMCIsIlBvd2VyMSIsIlBvd2VyMiIsIlBvd2VyMyIsIlBvd2VyNCIsIlF1YWQiLCJDdWJpYyIsIlF1YXJ0IiwiUXVpbnQiLCJTdHJvbmciLCJFbGFzdGljIiwiQmFjayIsIkJvdW5jZSIsIlNpbmUiLCJFeHBvIiwiQ2lyYyIsImdzYXBXaXRoQ1NTIiwiVHdlZW5NYXhXaXRoQ1NTIiwiY2hlY2siLCJzdXJyb2dhdGVfcGFpcnNfMSIsInJlcXVpcmUiLCJIVE1MX0FMUEhBIiwiSFRNTF9DT0RFUyIsImFscGhhSW5kZXgiLCJudW1JbmRleCIsImZyb21DaGFyQ29kZSIsIkh0bWw0RW50aXRpZXMiLCJkZWNvZGUiLCJzdHIiLCJlbnRpdHkiLCJjaHIiLCJmcm9tQ29kZVBvaW50IiwiZW5jb2RlIiwic3RyTGVuZ3RoIiwiY2hhckNvZGVBdCIsImVuY29kZU5vblVURiIsImNjIiwiaGlnaFN1cnJvZ2F0ZUZyb20iLCJoaWdoU3Vycm9nYXRlVG8iLCJnZXRDb2RlUG9pbnQiLCJlbmNvZGVOb25BU0NJSSIsIkVOVElUSUVTIiwiREVDT0RFX09OTFlfRU5USVRJRVMiLCJjaGFySW5kZXgiLCJjaHIyIiwiYWRkQ2hhciIsImNoYXJJbmZvIiwiX2MiLCJfZCIsImNyZWF0ZUluZGV4ZXMiLCJIdG1sNUVudGl0aWVzIiwieG1sX2VudGl0aWVzXzEiLCJYbWxFbnRpdGllcyIsImh0bWw0X2VudGl0aWVzXzEiLCJodG1sNV9lbnRpdGllc18xIiwiQWxsSHRtbEVudGl0aWVzIiwiYXN0cmFsQ29kZVBvaW50IiwiY29kZVBvaW50QXQiLCJBTFBIQV9JTkRFWCIsIkNIQVJfSU5ERVgiLCJDSEFSX1NfSU5ERVgiLCJyb290IiwiZGVmaW5lIiwidW5kZWZpbmVkVHlwZSIsImlzSUUiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJsb2dNZXRob2RzIiwiYmluZE1ldGhvZCIsIm1ldGhvZE5hbWUiLCJtZXRob2QiLCJ0cmFjZUZvcklFIiwidHJhY2UiLCJyZWFsTWV0aG9kIiwicmVwbGFjZUxvZ2dpbmdNZXRob2RzIiwibGV2ZWwiLCJsb2dnZXJOYW1lIiwibWV0aG9kRmFjdG9yeSIsImRlYnVnIiwiZW5hYmxlTG9nZ2luZ1doZW5Db25zb2xlQXJyaXZlcyIsImRlZmF1bHRNZXRob2RGYWN0b3J5IiwiTG9nZ2VyIiwiZGVmYXVsdExldmVsIiwiY3VycmVudExldmVsIiwic3RvcmFnZUtleSIsInBlcnNpc3RMZXZlbElmUG9zc2libGUiLCJsZXZlbE51bSIsImxldmVsTmFtZSIsImxvY2FsU3RvcmFnZSIsImNvb2tpZSIsImVuY29kZVVSSUNvbXBvbmVudCIsImdldFBlcnNpc3RlZExldmVsIiwic3RvcmVkTGV2ZWwiLCJsZXZlbHMiLCJjbGVhclBlcnNpc3RlZExldmVsIiwiZ2V0TGV2ZWwiLCJzZXRMZXZlbCIsInBlcnNpc3QiLCJTSUxFTlQiLCJzZXREZWZhdWx0TGV2ZWwiLCJyZXNldExldmVsIiwiZW5hYmxlQWxsIiwiVFJBQ0UiLCJkaXNhYmxlQWxsIiwiaW5pdGlhbExldmVsIiwiZGVmYXVsdExvZ2dlciIsIl9sb2dnZXJzQnlOYW1lIiwiZ2V0TG9nZ2VyIiwibG9nZ2VyIiwiX2xvZyIsIm5vQ29uZmxpY3QiLCJnZXRMb2dnZXJzIiwiYW5pbWF0ZVByb2dyZXNzIiwia2V5ZnJhbWVzT3JPcHRpb25zIiwiYW5pbWF0ZSQxIiwicXMiLCJzZXAiLCJlcSIsInJlZ2V4cCIsIm1heEtleXMiLCJrc3RyIiwidnN0ciIsImsiLCJpZHgiLCJkZWNvZGVVUklDb21wb25lbnQiLCJzdHJpbmdpZnlQcmltaXRpdmUiLCJpc0Zpbml0ZSIsImtzIiwicGFyc2UiLCJzdHJpbmdpZnkiLCJ0cmFuc3BvcnRMaXN0IiwiZ2xvYmFsIiwiRXZlbnQiLCJDbG9zZUV2ZW50IiwiRXZlbnRUYXJnZXQiLCJldmVudFR5cGUiLCJpbml0RXZlbnQiLCJzdG9wUHJvcGFnYXRpb24iLCJwcmV2ZW50RGVmYXVsdCIsIkNBUFRVUklOR19QSEFTRSIsIkFUX1RBUkdFVCIsIkJVQkJMSU5HX1BIQVNFIiwiZGlzcGF0Y2hFdmVudCIsIlRyYW5zcG9ydE1lc3NhZ2VFdmVudCIsImlmcmFtZVV0aWxzIiwiRmFjYWRlSlMiLCJ0cmFuc3BvcnQiLCJfdHJhbnNwb3J0Q2xvc2UiLCJfdHJhbnNwb3J0TWVzc2FnZSIsIl9zZW5kIiwiX2Nsb3NlIiwidXJsVXRpbHMiLCJldmVudFV0aWxzIiwiSW5mb0lmcmFtZVJlY2VpdmVyIiwibG9jIiwicHJvY2VzcyIsImVudiIsIk5PREVfRU5WIiwiYXZhaWxhYmxlVHJhbnNwb3J0cyIsInRyYW5zcG9ydE1hcCIsIlNvY2tKUyIsInBhcmVudE9yaWdpbiIsImlmcmFtZU1lc3NhZ2UiLCJ0cmFuc1VybCIsImJhc2VVcmwiLCJmYWNhZGUiLCJvYmplY3RVdGlscyIsIkluZm9BamF4IiwidXJsIiwiQWpheE9iamVjdCIsInJ0dCIsImluZm8iLCJYSFJMb2NhbE9iamVjdCIsIkluZm9SZWNlaXZlcklmcmFtZSIsInRyYW5zcG9ydE5hbWUiLCJJZnJhbWVUcmFuc3BvcnQiLCJJbmZvSWZyYW1lIiwiaWZyIiwiZ28iLCJlbmFibGVkIiwiWERSIiwiWEhSQ29ycyIsIlhIUkxvY2FsIiwiWEhSRmFrZSIsIkluZm9SZWNlaXZlciIsInVybEluZm8iLCJfZ2V0UmVjZWl2ZXIiLCJkb1hociIsIl9jbGVhbnVwIiwidGltZW91dCIsInByb3RvY29sIiwiaG9zdCIsInBvcnQiLCJoYXNoIiwidHJhbnNwb3J0cyIsIlVSTCIsImVzY2FwZSIsImJyb3dzZXIiLCJwcm90b2NvbHMiLCJzb3J0ZWRQcm90b2NvbHMiLCJwYXJzZWRVcmwiLCJudWxsT3JpZ2luIiwic2FtZU9yaWdpbiIsInNhbWVTY2hlbWUiLCJ1c2VyU2V0Q29kZSIsInNlbmQiLCJDT05ORUNUSU5HIiwiT1BFTiIsIkNMT1NJTkciLCJDTE9TRUQiLCJfcmVjZWl2ZUluZm8iLCJfY29ubmVjdCIsInRyYW5zcG9ydE9iaiIsIl90cmFuc3BvcnRUaW1lb3V0IiwicGF5bG9hZCIsImNvbnRlbnQiLCJfb3BlbiIsImZvcmNlRmFpbCIsImNvdW50UlRPIiwiQXJyYXlQcm90b3R5cGUiLCJPYmplY3RQcm90b3R5cGUiLCJGdW5jdGlvblByb3RvdHlwZSIsIlN0cmluZ1Byb3RvdHlwZSIsImFycmF5X3NsaWNlIiwiX3RvU3RyaW5nIiwic3VwcG9ydHNEZXNjcmlwdG9ycyIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiZGVmaW5lUHJvcGVydGllcyIsImZvcmNlQXNzaWduIiwidG9PYmplY3QiLCJ0b0ludGVnZXIiLCJudW0iLCJUb1VpbnQzMiIsIkVtcHR5IiwiYm91bmRBcmdzIiwiYm91bmQiLCJib3hlZFN0cmluZyIsInNwbGl0U3RyaW5nIiwidGhpc3AiLCJmdW4iLCJwcm9wZXJseUJveGVzTm9uU3RyaWN0IiwicHJvcGVybHlCb3hlc1N0cmljdCIsImhhc0ZpcmVmb3gySW5kZXhPZkJ1ZyIsInN0cmluZ19zcGxpdCIsInNlcGFyYXRvcjIiLCJsYXN0TGVuZ3RoIiwic2VwYXJhdG9yIiwibGFzdExhc3RJbmRleCIsInN0cmluZyIsImxpbWl0Iiwic3RyaW5nX3N1YnN0ciIsImhhc05lZ2F0aXZlU3Vic3RyQnVnIiwiWEhSIiwiQWJzdHJhY3RYSFJPYmplY3QiLCJvcHRzIiwic3RhdHVzIiwiYXhvIiwiY29ycyIsInN1cHBvcnRzQ09SUyIsIkV2ZW50U291cmNlIiwiRHJpdmVyIiwiV2ViU29ja2V0IiwiTW96V2ViU29ja2V0IiwiQWpheEJhc2VkVHJhbnNwb3J0IiwiRXZlbnRTb3VyY2VSZWNlaXZlciIsIlhIUkNvcnNPYmplY3QiLCJFdmVudFNvdXJjZURyaXZlciIsIkV2ZW50U291cmNlVHJhbnNwb3J0Iiwicm91bmRUcmlwcyIsIkh0bWxmaWxlUmVjZWl2ZXIiLCJIdG1sRmlsZVRyYW5zcG9ydCIsIl9tZXNzYWdlIiwiY2RhdGEiLCJwb3N0TWVzc2FnZSIsIndpbmRvd0lkIiwiU2VuZGVyUmVjZWl2ZXIiLCJKc29ucFJlY2VpdmVyIiwianNvbnBTZW5kZXIiLCJKc29uUFRyYW5zcG9ydCIsIm5lZWRCb2R5IiwiY3JlYXRlQWpheFNlbmRlciIsIm9wdCIsInhvIiwidXJsU3VmZml4IiwiUmVjZWl2ZXIiLCJCdWZmZXJlZFNlbmRlciIsInNlbmRlciIsInNlbmRTY2hlZHVsZVdhaXQiLCJ0cmVmIiwic2VuZFNjaGVkdWxlIiwiSWZyYW1lV3JhcFRyYW5zcG9ydCIsImlmcmFtZUluZm8iLCJQb2xsaW5nIiwicmVjZWl2ZVVybCIsIl9zY2hlZHVsZVJlY2VpdmVyIiwicG9sbCIsImFib3J0Iiwic2VuZGVyRnVuYyIsImVzIiwiaHRtbGZpbGVFbmFibGVkIiwiaWZyYW1lRW5hYmxlZCIsInNjcmlwdEVycm9yVGltZW91dCIsIl9hYm9ydCIsInNjcmlwdCIsIl9zY3JpcHRFcnJvciIsIl9jcmVhdGVTY3JpcHQiLCJzY3JpcHQyIiwiaGVhZCIsIlhoclJlY2VpdmVyIiwiX2NodW5rSGFuZGxlciIsImZvcm0iLCJhcmVhIiwiY3JlYXRlSWZyYW1lIiwiaWZyYW1lIiwiY3JlYXRlRm9ybSIsImNvbXBsZXRlZCIsIlhEUk9iamVjdCIsInhkciIsIl9lcnJvciIsIlhEb21haW5SZXF1ZXN0IiwiaGFzRG9tYWluIiwiWGhyRHJpdmVyIiwibm9DcmVkZW50aWFscyIsIldlYnNvY2tldERyaXZlciIsIldlYlNvY2tldFRyYW5zcG9ydCIsIndzIiwiWGRyU3RyZWFtaW5nVHJhbnNwb3J0IiwiWGRyUG9sbGluZ1RyYW5zcG9ydCIsIlhoclBvbGxpbmdUcmFuc3BvcnQiLCJYaHJTdHJlYW1pbmdUcmFuc3BvcnQiLCJjcnlwdG8iLCJnZXRSYW5kb21WYWx1ZXMiLCJieXRlcyIsImlzT3BlcmEiLCJpc0tvbnF1ZXJvciIsImV4dHJhTG9va3VwIiwiZXh0cmFFc2NhcGFibGUiLCJ1bnJvbGxMb29rdXAiLCJlc2NhcGFibGUiLCJ1bnJvbGxlZCIsInF1b3RlIiwib25VbmxvYWQiLCJhZnRlclVubG9hZCIsImlzQ2hyb21lUGFja2FnZWRBcHAiLCJhdHRhY2hFdmVudCIsImRldGFjaEV2ZW50IiwidW5sb2FkQWRkIiwidW5sb2FkRGVsIiwidHJpZ2dlclVubG9hZENhbGxiYWNrcyIsInVubG9hZFRyaWdnZXJlZCIsIldQcmVmaXgiLCJjdXJyZW50V2luZG93SWQiLCJwb2xsdXRlR2xvYmFsTmFtZXNwYWNlIiwidW5hdHRhY2giLCJjbGVhbnVwIiwiZXJyb3JDYWxsYmFjayIsInVubG9hZFJlZiIsInBvc3QiLCJsb2FkZWQiLCJjcmVhdGVIdG1sZmlsZSIsIkNvbGxlY3RHYXJiYWdlIiwiZG9jIiwibG9nT2JqZWN0IiwibGV2ZWxFeGlzdHMiLCJpc09iamVjdCIsImV4dGVuZCIsIl9yYW5kb21TdHJpbmdDaGFycyIsIm51bWJlciIsIm51bWJlclN0cmluZyIsImZpbHRlclRvRW5hYmxlZCIsIm1haW4iLCJ0cmFuc3BvcnRzV2hpdGVsaXN0IiwiZ2V0T3JpZ2luIiwiaXNPcmlnaW5FcXVhbCIsImlzU2NoZW1lRXF1YWwiLCJhZGRQYXRoIiwiYWRkUXVlcnkiLCJpc0xvb3BiYWNrQWRkciIsImZtdFNob3J0IiwiZm10TG9uZyIsInBsdXJhbCIsIm1zQWJzIiwiSlNPTiIsInVzZUNvbG9ycyIsImZvcm1hdEFyZ3MiLCJsYXN0QyIsIm5hbWVzcGFjZXMiLCJsb2FkIiwibG9jYWxzdG9yYWdlIiwic3RvcmFnZSIsImRlc3Ryb3kiLCJmb3JtYXR0ZXJzIiwic2V0dXAiLCJjcmVhdGVEZWJ1ZyIsImxvZ0ZuIiwibmFtZXNwYWNlc0NhY2hlIiwiZW5hYmxlZENhY2hlIiwiZW5hYmxlT3ZlcnJpZGUiLCJuZXdEZWJ1ZyIsImN0b3IiLCJUZW1wQ3RvciIsInVuZGVmIiwicXVlcnlzdHJpbmciLCJxdWVyeSIsInBhcnQiLCJxdWVyeXN0cmluZ2lmeSIsInByZWZpeCIsInBhaXJzIiwicmVxdWlyZWQiLCJjb250cm9sT3JXaGl0ZXNwYWNlIiwiQ1JIVExGIiwic2xhc2hlcyIsInByb3RvY29scmUiLCJ3aW5kb3dzRHJpdmVMZXR0ZXIiLCJ0cmltTGVmdCIsInJ1bGVzIiwibG9sY2F0aW9uIiwiZ2xvYmFsVmFyIiwiZmluYWxkZXN0aW5hdGlvbiIsInNjaGVtZSIsImV4dHJhY3RQcm90b2NvbCIsImFkZHJlc3MiLCJyZXN0Iiwic2xhc2hlc0NvdW50IiwidXAiLCJwYXRoIiwiVXJsIiwicGFyc2VyIiwiaW5zdHJ1Y3Rpb25zIiwiZXh0cmFjdGVkIiwiaW5zdHJ1Y3Rpb24iLCJmbiIsImV4dGVuZGVkIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwibmV3VmFsdWUiLCJwYXJzZVNldHRpbmdzIiwic2V0dGluZ3MiLCJhYnNvbHV0ZSIsInBhcnNlVHlwZXMiLCJsaW5lcyIsIndvcmRzIiwiaXNOb2RlIiwiaXNMZW5ndGgiLCJpc0FycmF5TGlrZSIsImdldFRhcmdldEVsZW1lbnRzIiwiZ2V0RWxlbWVudEJ5SWQiLCJhcHBlbmQiLCJub2RlcyIsIm5vZGUiLCJjcmVhdGVUZXh0Tm9kZSIsInJlcGxhY2VDaGlsZHJlbiIsImxhc3RDaGlsZCIsInJlcGxhY2VXaXRoIiwib3duZXJEb2N1bWVudCIsInByZXZpb3VzU2libGluZyIsInJlcGxhY2VDaGlsZCIsIkRvY3VtZW50RnJhZ21lbnQiLCJleHBhbmRvIiwidWlkIiwib3duZXIiLCJyc0FzdHJhbFJhbmdlIiwicnNDb21ib01hcmtzUmFuZ2UiLCJyc0NvbWJvU3ltYm9sc1JhbmdlIiwicnNWYXJSYW5nZSIsInJzQXN0cmFsIiwicnNDb21ibyIsInJzRml0eiIsInJzTm9uQXN0cmFsIiwicnNSZWdpb25hbCIsInJzU3VyclBhaXIiLCJyc1pXSiIsInJlT3B0TW9kIiwicnNPcHRWYXIiLCJyc1NlcSIsInJzU3ltYm9sIiwicmVVbmljb2RlIiwicmVIYXNVbmljb2RlIiwiaGFzVW5pY29kZSIsInN0cmluZ1RvQXJyYXkiLCJ1bmljb2RlVG9BcnJheSIsImFzY2lpVG9BcnJheSIsInRvQ2hhcnMiLCJhdHRyaWJ1dGVzIiwiYXR0cmlidXRlIiwicmF3VmFsdWUiLCJzcGxpdENsYXNzIiwibGluZUNsYXNzIiwid29yZENsYXNzIiwiY2hhckNsYXNzIiwic3BsaXRXb3Jkc0FuZENoYXJzIiwidGV4dE5vZGUiLCJUQUdfTkFNRSIsIlZBTFVFIiwibm9kZVZhbHVlIiwiY3JlYXRlRG9jdW1lbnRGcmFnbWVudCIsInRvV29yZHMiLCJXT1JEIiwid29yZEVsZW1lbnQiLCJjaGFyYWN0ZXJFbGVtZW50c0ZvckN1cnJlbnRXb3JkIiwiQ0hBUiIsImNoYXJhY3RlckVsZW1lbnQiLCJjbGFzcyIsImlzV29yZCIsImlzV29yZFN0YXJ0IiwiaXNXb3JkRW5kIiwid29yZHNBbmRDaGFycyIsImNoaWxkTm9kZXMiLCJpc1Jvb3QiLCJwcmV2U2libGluZyIsInRleHRDb250ZW50IiwidGV4dEFmdGVyIiwidGV4dEJlZm9yZSIsInVuU3BsaXRXb3JkcyIsInJlcG9zaXRpb25BZnRlclNwbGl0Iiwic2Nyb2xsUG9zIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJ3b3Jkc0luRWFjaExpbmUiLCJlbGVtZW50SGVpZ2h0IiwiZWxlbWVudFdpZHRoIiwiY29udGVudEJveCIsIndvcmRzSW5DdXJyZW50TGluZSIsImxpbmVPZmZzZXRZIiwicGFyZW50RWxlbWVudCIsImFsaWduIiwidGV4dEFsaWduIiwibGluZVRocmVzaG9sZCIsImZvbnRTaXplIiwib2Zmc2V0TGVmdCIsIm9mZnNldFRvcCIsImNzc1dpZHRoIiwiY3NzSGVpZ2h0IiwiaXNXb3JkTGlrZSIsInNjcm9sbFgiLCJzY3JvbGxZIiwicGFyZW50WCIsInBhcmVudFkiLCJwYXJlbnRSZWN0IiwiZ2V0UG9zaXRpb24iLCJub2RlTmFtZSIsIndvcmRzSW5UaGlzTGluZSIsImxpbmVFbGVtZW50IiwibGluZURpbWVuc2lvbnMiLCJ3b3JkT3JFbGVtZW50IiwiaXNMaW5lIiwicGFyZW50RGF0YSIsImlzQ2hpbGRPZkxpbmVOb2RlIiwiaXNTcGxpdCIsImh0bWwiLCJpbm5lckhUTUwiLCJwYWdlWE9mZnNldCIsInBhZ2VZT2Zmc2V0Iiwic2Nyb2xsVG8iLCJFIiwiY3R4IiwiZXZ0QXJyIiwiZXZ0cyIsImxpdmVFdmVudHMiLCJUaW55RW1pdHRlciIsImV4dGVuZFN0YXRpY3MiLCJzZXRQcm90b3R5cGVPZiIsIl9fZXh0ZW5kcyIsIl9fIiwiX19hc3NpZ24iLCJfX2RlY29yYXRlIiwiZGVjb3JhdG9ycyIsImRlc2MiLCJkZWNvcmF0ZSIsIl9fcGFyYW0iLCJwYXJhbUluZGV4IiwiZGVjb3JhdG9yIiwiX19tZXRhZGF0YSIsIm1ldGFkYXRhS2V5IiwibWV0YWRhdGFWYWx1ZSIsIm1ldGFkYXRhIiwiX19hd2FpdGVyIiwidGhpc0FyZyIsIl9hcmd1bWVudHMiLCJQIiwiZnVsZmlsbGVkIiwic3RlcCIsInJlamVjdGVkIiwiZG9uZSIsIl9fZ2VuZXJhdG9yIiwic2VudCIsInRyeXMiLCJvcHMiLCJ2ZXJiIiwiaXRlcmF0b3IiLCJfX2NyZWF0ZUJpbmRpbmciLCJrMiIsIl9fZXNNb2R1bGUiLCJfX2V4cG9ydFN0YXIiLCJfX3ZhbHVlcyIsIl9fcmVhZCIsIl9fc3ByZWFkIiwiX19zcHJlYWRBcnJheXMiLCJqbCIsIl9fc3ByZWFkQXJyYXkiLCJwYWNrIiwiX19hd2FpdCIsIl9fYXN5bmNHZW5lcmF0b3IiLCJhc3luY0l0ZXJhdG9yIiwicSIsImZ1bGZpbGwiLCJzZXR0bGUiLCJfX2FzeW5jRGVsZWdhdG9yIiwiX19hc3luY1ZhbHVlcyIsIl9fbWFrZVRlbXBsYXRlT2JqZWN0IiwiY29va2VkIiwiX19zZXRNb2R1bGVEZWZhdWx0IiwiX19pbXBvcnRTdGFyIiwibW9kIiwiX19pbXBvcnREZWZhdWx0IiwiX19jbGFzc1ByaXZhdGVGaWVsZEdldCIsImtpbmQiLCJfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0IiwiX19jbGFzc1ByaXZhdGVGaWVsZEluIiwiZnJlZUdsb2JhbCIsInB1bnljb2RlIiwibWF4SW50IiwicmVnZXhQdW55Y29kZSIsInJlZ2V4Tm9uQVNDSUkiLCJyZWdleFNlcGFyYXRvcnMiLCJlcnJvcnMiLCJzdHJpbmdGcm9tQ2hhckNvZGUiLCJtYXBEb21haW4iLCJwYXJ0cyIsInVjczJkZWNvZGUiLCJleHRyYSIsImNvdW50ZXIiLCJ1Y3MyZW5jb2RlIiwiZGlnaXRUb0Jhc2ljIiwiZGlnaXQiLCJmbGFnIiwiYWRhcHQiLCJmaXJzdFRpbWUiLCJiYXNlTWludXNUTWluIiwib3V0IiwiYmFzaWMiLCJvbGRpIiwiYmFzZU1pbnVzVCIsImNvZGVQb2ludCIsImlucHV0TGVuZ3RoIiwiYmlhcyIsImhhbmRsZWRDUENvdW50IiwiYmFzaWNMZW5ndGgiLCJoYW5kbGVkQ1BDb3VudFBsdXNPbmUiLCJxTWludXNUIiwidXRpbCIsImF1dGgiLCJob3N0bmFtZSIsInNlYXJjaCIsInBhdGhuYW1lIiwidXJsUGFyc2UiLCJyZXNvbHZlT2JqZWN0IiwicHJvdG9jb2xQYXR0ZXJuIiwicG9ydFBhdHRlcm4iLCJzaW1wbGVQYXRoUGF0dGVybiIsInVud2lzZSIsImF1dG9Fc2NhcGUiLCJub25Ib3N0Q2hhcnMiLCJob3N0RW5kaW5nQ2hhcnMiLCJob3N0bmFtZVBhcnRQYXR0ZXJuIiwiaG9zdG5hbWVQYXJ0U3RhcnQiLCJ1bnNhZmVQcm90b2NvbCIsImhvc3RsZXNzUHJvdG9jb2wiLCJzbGFzaGVkUHJvdG9jb2wiLCJwYXJzZVF1ZXJ5U3RyaW5nIiwic2xhc2hlc0Rlbm90ZUhvc3QiLCJxdWVyeUluZGV4Iiwic3BsaXR0ZXIiLCJ1U3BsaXQiLCJzaW1wbGVQYXRoIiwicHJvdG8iLCJsb3dlclByb3RvIiwiYXRTaWduIiwiaG9zdEVuZCIsImhlYyIsInBhcnNlSG9zdCIsImlwdjZIb3N0bmFtZSIsImhvc3RwYXJ0cyIsIm5ld3BhcnQiLCJ2YWxpZFBhcnRzIiwibm90SG9zdCIsImJpdCIsInRvQVNDSUkiLCJhZSIsImVzYyIsInFtIiwicmVsIiwidGtleXMiLCJ0ayIsInRrZXkiLCJya2V5cyIsInJrIiwicmtleSIsInJlbFBhdGgiLCJpc1NvdXJjZUFicyIsImlzUmVsQWJzIiwibXVzdEVuZEFicyIsInJlbW92ZUFsbERvdHMiLCJzcmNQYXRoIiwicHN5Y2hvdGljIiwiaXNOdWxsT3JVbmRlZmluZWQiLCJhdXRoSW5Ib3N0IiwiaXNOdWxsIiwiaGFzVHJhaWxpbmdTbGFzaCIsImlzQWJzb2x1dGUiLCJfb25XaGVlbCIsImRlbHRhWCIsIndoZWVsRGVsdGFYIiwid2hlZWxEZWx0YVkiLCJpc0ZpcmVmb3giLCJkZWx0YU1vZGUiLCJmaXJlZm94TXVsdGlwbGllciIsIm1vdXNlTXVsdGlwbGllciIsIl9ub3RpZnkiLCJfb25Nb3VzZVdoZWVsIiwid2hlZWxEZWx0YSIsIl9vblRvdWNoU3RhcnQiLCJ0YXJnZXRUb3VjaGVzIiwicGFnZVgiLCJwYWdlWSIsIl9vblRvdWNoTW92ZSIsInByZXZlbnRUb3VjaCIsImNsYXNzTGlzdCIsImNvbnRhaW5zIiwidW5wcmV2ZW50VG91Y2hDbGFzcyIsInRvdWNoTXVsdGlwbGllciIsIl9vbktleURvd24iLCJrZXlDb2RlIiwia2V5U3RlcCIsInNoaWZ0S2V5IiwiaGFzV2hlZWxFdmVudCIsImhhc01vdXNlV2hlZWxFdmVudCIsImhhc1RvdWNoIiwiaGFzVG91Y2hXaW4iLCJtc01heFRvdWNoUG9pbnRzIiwiaGFzUG9pbnRlciIsIm1zUG9pbnRlckVuYWJsZWQiLCJoYXNLZXlEb3duIiwidXNlS2V5Ym9hcmQiLCJ1c2VUb3VjaCIsInBhc3NpdmUiLCJsaXN0ZW5lck9wdGlvbnMiLCJvcmlnaW5hbEV2ZW50IiwiX2JpbmQiLCJtc1RvdWNoQWN0aW9uIiwiX3VuYmluZCIsIl9kZWZpbmVQcm9wZXJ0aWVzIiwiZGVzY3JpcHRvciIsIkJhc2VDbGllbnQiLCJpbnN0YW5jZSIsIkNvbnN0cnVjdG9yIiwiX2NsYXNzQ2FsbENoZWNrIiwicHJvdG9Qcm9wcyIsInN0YXRpY1Byb3BzIiwiX3R5cGVvZiIsIl9zZXRQcm90b3R5cGVPZiIsIl9jcmVhdGVTdXBlciIsIkRlcml2ZWQiLCJoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0IiwiY29uc3RydWN0Iiwic2hhbSIsIl9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QiLCJTdXBlciIsIl9nZXRQcm90b3R5cGVPZiIsIk5ld1RhcmdldCIsIl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiX0Jhc2VDbGllbnQiLCJfaW5oZXJpdHMiLCJTb2NrSlNDbGllbnQiLCJfc3VwZXIiLCJzb2NrIiwib25vcGVuIiwib25jbG9zZSIsIm9ubWVzc2FnZSIsImVudGl0aWVzIiwib3ZlcmxheUlmcmFtZSIsIm92ZXJsYXlEaXYiLCJsYXN0T25PdmVybGF5RGl2UmVhZHkiLCJlbnN1cmVPdmVybGF5RGl2RXhpc3RzIiwib25PdmVybGF5RGl2UmVhZHkiLCJvbklmcmFtZUxvYWQiLCJkaXYiLCJjb250ZW50RG9jdW1lbnQiLCJib3hTaXppbmciLCJiYWNrZ3JvdW5kQ29sb3IiLCJmb250RmFtaWx5IiwicGFkZGluZyIsIndoaXRlU3BhY2UiLCJvdmVyZmxvdyIsImJvcmRlciIsInpJbmRleCIsInNob3dNZXNzYWdlIiwibWVzc2FnZXMiLCJDbGllbnQiLCJfX3dlYnBhY2tfZGV2X3NlcnZlcl9jbGllbnRfXyIsInJldHJpZXMiLCJjbGllbnQiLCJzb2NrZXQiLCJoYW5kbGVycyIsIm9uT3BlbiIsIm9uQ2xvc2UiLCJyZXRyeUluTXMiLCJvbk1lc3NhZ2UiLCJtc2ciLCJnZXRDdXJyZW50U2NyaXB0U291cmNlIiwicmVzb3VyY2VRdWVyeSIsImN1cnJlbnRMb2NhdGlvbiIsInVybFBhcnRzIiwic2NyaXB0SG9zdCIsInNvY2tIb3N0Iiwic29ja1BhdGgiLCJzb2NrUG9ydCIsImdldFNvY2tldFVybCIsImN1cnJlbnRTY3JpcHQiLCJzY3JpcHRFbGVtZW50cyIsInNjcmlwdHMiLCJJTkZPIiwic2V0TG9nTGV2ZWwiLCJob3RSZWxvYWQiLCJob3QiLCJsaXZlUmVsb2FkIiwiaXNVbmxvYWRpbmciLCJjdXJyZW50SGFzaCIsInJvb3RXaW5kb3ciLCJpbnRlcnZhbElkIiwiYXBwbHlSZWxvYWQiLCJyZWxvYWQiLCJXb3JrZXJHbG9iYWxTY29wZSIsImFuc2lSZWdleCIsImxvZ0xldmVsIiwiZHVtbXkiLCJzaG91bGRMb2ciLCJsb2dHcm91cCIsImdyb3VwIiwiZ3JvdXBDb2xsYXBzZWQiLCJncm91cEVuZCIsImZvcm1hdEVycm9yIiwic3RhY2siLCJ3ZWJwYWNrQ29udGV4dCIsInJlcSIsIndlYnBhY2tDb250ZXh0UmVzb2x2ZSIsIl9fd2VicGFja19yZXF1aXJlX18iLCJmcm9tS2V5cyIsInRvS2V5cyIsImlzUnVubmluZyIsInJhZiIsInNtb290aFRvdWNoIiwib25XaW5kb3dSZXNpemUiLCJ3cmFwcGVyV2lkdGgiLCJ3cmFwcGVySGVpZ2h0Iiwib25XcmFwcGVyUmVzaXplIiwiY29udGVudFJlY3QiLCJvbkNvbnRlbnRSZXNpemUiLCJjb250ZW50V2lkdGgiLCJjb250ZW50SGVpZ2h0Iiwib25WaXJ0dWFsU2Nyb2xsIiwiY3RybEtleSIsImNoYW5nZWRUb3VjaGVzIiwic3RvcHBlZCIsImJ1dHRvbnMiLCJ0YXJnZXRTY3JvbGwiLCJvblNjcm9sbCIsImlzU2Nyb2xsaW5nIiwibGFzdFNjcm9sbCIsIndyYXBwZXJOb2RlIiwic2Nyb2xsUHJvcGVydHkiLCJub3RpZnkiLCJsZXJwIiwibGVuaXNWZXJzaW9uIiwiY29udGVudE5vZGUiLCJ3cmFwcGVyT2JzZXJ2ZXIiLCJSZXNpemVPYnNlcnZlciIsIm9ic2VydmUiLCJjb250ZW50T2JzZXJ2ZXIiLCJ1c2VyQWdlbnREYXRhIiwicGxhdGZvcm0iLCJ2aXJ0dWFsU2Nyb2xsIiwiaW5jbHVkZXMiLCJkaXNjb25uZWN0Iiwic2V0U2Nyb2xsIiwidmVsb2NpdHkiLCJpbW1lZGlhdGUiLCJfX2RlZlByb3AiLCJfX3B1YmxpY0ZpZWxkIiwiX19kZWZOb3JtYWxQcm9wIiwiaXNEZXYiLCJfX2NvbmZpZyIsIiRpZCIsIl9fYmFzZV9fIiwiX19jdG9yIiwiY29uc3RydWN0b3JOYW1lIiwiT3B0aW9uc01hbmFnZXIiLCJTZXJ2aWNlc01hbmFnZXIiLCJFdmVudHNNYW5hZ2VyIiwiUmVmc01hbmFnZXIiLCJDaGlsZHJlbk1hbmFnZXIiLCJfX21hbmFnZXJzIiwiX19kZWJ1ZyIsIiRyb290IiwiJHBhcmVudCIsIiRpc0Jhc2UiLCJlbWl0cyIsIiRzZXJ2aWNlcyIsIl9fc2VydmljZXMiLCJfX3JlZnMiLCJfX29wdGlvbnMiLCJfX2NoaWxkcmVuIiwiX19jYWxsTWV0aG9kIiwiJGVtaXQiLCJfX2hhc0V2ZW50IiwiZXZlbnQiLCJldmVudEhhbmRsZXJzIiwiX19ldmVudEhhbmRsZXJzIiwic2l6ZSIsIiRtb3VudCIsInJlZ2lzdGVyQWxsIiwiX19ldmVudHMiLCJiaW5kUm9vdEVsZW1lbnQiLCJtb3VudEFsbCIsIiR1cGRhdGUiLCJ1bnJlZ2lzdGVyQWxsIiwidXBkYXRlQWxsIiwiJGRlc3Ryb3kiLCJ1bmJpbmRSb290RWxlbWVudCIsImRlc3Ryb3lBbGwiLCIkdGVybWluYXRlIiwiX19hZGRFbWl0cyIsIl9fcmVtb3ZlRW1pdHMiLCIkb24iLCJnZXRFdmVudFRhcmdldCIsIiRvZmYiLCJkZWxldGUiLCJDdXN0b21FdmVudCIsImRldGFpbCIsIm5hbWVPclNlbGVjdG9yIiwiZ2V0Q29tcG9uZW50RWxlbWVudHMiLCJBYnN0cmFjdE1hbmFnZXIiLCJfX2Jhc2UiLCJfX2hpZGVQcm9wZXJ0aWVzIiwiX19lbGVtZW50IiwiX19ldmVudHNNYW5hZ2VyIiwiZnJvbUVudHJpZXMiLCJfX2dldENoaWxkIiwiQ29tcG9uZW50Q2xhc3MiLCJhc3luY0NvbXBvbmVudFByb21pc2UiLCJfX2FzeW5jQ29tcG9uZW50UHJvbWlzZXMiLCJwcm9taXNlIiwiX19yZWdpc3RlciIsImNvbXBvbmVudCIsIl9fdHJpZ2dlckhvb2siLCJob29rIiwidW5iaW5kQ2hpbGQiLCJiaW5kQ2hpbGQiLCJfX3RyaWdnZXJIb29rRm9yQWxsIiwicmVnaXN0ZXJlZE5hbWVzIiwicmVzb2x2ZWRJbnN0YW5jZSIsIm5vcm1hbGl6ZU5hbWUiLCJub3JtYWxpemVFdmVudE5hbWUiLCJyZWdleGVzIiwiZ2V0UmVnZXgiLCJyZWdleCIsImdldEV2ZW50TmFtZUJ5TWV0aG9kIiwiZ2V0RXZlbnRNZXRob2RzQnlOYW1lIiwibWV0aG9kcyIsIl9fbWV0aG9kc0NhY2hlIiwiZ2V0QWxsUHJvcGVydGllcyIsIm1hbmFnZVJlZiIsIm1vZGUiLCJhY3Rpb24iLCJfX3JlZnNIYW5kbGVyIiwibWFuYWdlQ2hpbGQiLCJfX2NoaWxkcmVuSGFuZGxlciIsIm1hbmFnZVJvb3RFbGVtZW50IiwibW9kZU1ldGhvZCIsImV2ZW50SXNEZWZpbmVkSW5Db25maWciLCJldmVudElzTmF0aXZlIiwiX19yb290RWxlbWVudEhhbmRsZXIiLCJoYW5kbGVFdmVudCIsInJlZiIsInJlZk5hbWUiLCJub3JtYWxpemVSZWZOYW1lIiwiY2hpbGRyZW5NYW5hZ2VyIiwicmVzb2x2ZWRDaGlsZCIsImNoaWxkTmFtZSIsImZpbmQiLCJiaW5kUmVmIiwidW5iaW5kUmVmIiwiX19kZWZhdWx0VmFsdWVzIiwiX19wcm9wZXJ0eU5hbWVDYWNoZSIsIl9fZ2V0UHJvcGVydHlOYW1lIiwicHJvcGVydHlOYW1lIiwic2NoZW1hIiwiZGVmYXVsdFZhbHVlIiwiaGFzUHJvcGVydHkiLCJpc0RlZmluZWQiLCJuZWdhdGVkUHJvcGVydHlOYW1lIiwibWVyZ2UiLCJpc0Jvb2xlYW4iLCJlbmRzV2l0aCIsImlzTXVsdGlwbGUiLCJwcm9wTmFtZSIsImFuY2VzdG9yIiwiX19maWx0ZXJSZWZzQmVsb25naW5nVG9JbnN0YW5jZSIsIl9fdW5yZWdpc3RlciIsIlNFUlZJQ0VTX01BUCIsInVzZVNjcm9sbCIsInJlc2l6ZWQiLCJ1c2VSZXNpemUiLCJ0aWNrZWQiLCJ1c2VSYWYiLCJ1c2VQb2ludGVyIiwia2V5ZWQiLCJ1c2VLZXkiLCJ1c2VMb2FkIiwiU0VSVklDRV9OQU1FUyIsIl9fY3VzdG9tU2VydmljZXMiLCJzZXJ2aWNlIiwic2VydmljZU5hbWUiLCJ0b2dnbGUiLCJ1c2VGdW5jdGlvbiIsInVucmVnaXN0ZXIiLCJ0ZXN0QnJlYWtwb2ludHMiLCJicmVha3BvaW50IiwiYWN0aXZlQnJlYWtwb2ludHMiLCJpbmFjdGl2ZUJyZWFrcG9pbnRzIiwiaXNJbkFjdGl2ZUJyZWFrcG9pbnQiLCJpc0luSW5hY3RpdmVCcmVha3BvaW50IiwiaGFzQnJlYWtwb2ludENvbmZpZ3VyYXRpb24iLCJhZGRUb1Jlc2l6ZSIsInRlc3RDb25mbGljdGluZ0JyZWFrcG9pbnRDb25maWd1cmF0aW9uIiwiQmFzZUNsYXNzIiwiTXV0YXRpb25PYnNlcnZlciIsIm11dGF0aW9uIiwiYXR0cmlidXRlTmFtZSIsImNyZWF0ZUFycmF5T2ZOdW1iZXIiLCIkb2JzZXJ2ZXIiLCJJbnRlcnNlY3Rpb25PYnNlcnZlciIsImludGVyc2VjdGlvbk9ic2VydmVyIiwidW5vYnNlcnZlIiwid2l0aE1vdW50V2hlbkluVmlldyIsIl9fb2JzZXJ2ZXIiLCJhY2MiLCJlbnRyeSIsIl9faXNWaXNpYmxlIiwic2NoZWR1bGVyIiwidXNlU2NoZWR1bGVyIiwiZGVsZWdhdGUiLCJfX3NldFByb3BzIiwiY2hhbmdlZCIsIl9fcHJvcHMiLCJjbGFtcDAxIiwiZGFtcCIsImRhbXBGYWN0b3IiLCJkYW1wUHJlY2lzaW9uIiwidXBkYXRlIiwicmVuZGVyRm4iLCJzaXplcyIsInVzZU9mZnNldFNpemVzIiwieUVuZCIsInlTdGFydCIsInlDdXJyZW50IiwieVByb2dyZXNzIiwieEVuZCIsInhTdGFydCIsInhDdXJyZW50IiwieFByb2dyZXNzIiwiY3JlYXRlS2V5U2VydmljZSIsInByZXZpb3VzRXZlbnQiLCJvbktleSIsImtleUNvZGVzIiwidHJpZ2dlcmVkIiwiaXNVcCIsInVwZGF0ZVByb3BzIiwidXNlU2VydmljZSIsImtleTIiLCJvbkxvYWQiLCJjcmVhdGVMb2FkU2VydmljZSIsImlzVG91Y2hFdmVudCIsIlRvdWNoRXZlbnQiLCJjcmVhdGVQb2ludGVyU2VydmljZSIsInlMYXN0IiwieExhc3QiLCJ0b3VjaGVzIiwiY2xpZW50WSIsImNsaWVudFgiLCJjYXB0dXJlIiwicG9pbnRlciIsImNyZWF0ZVJhZlNlcnZpY2UiLCJpc1RpY2tpbmciLCJSQUYiLCJnZXRSZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJsb29wIiwicHJvcHMyIiwiY2FsbGJhY2tzIiwiYnJlYWtwb2ludEVsZW1lbnQiLCJyZXNpemUiLCJicmVha3BvaW50cyIsImdldEJyZWFrcG9pbnRFbGVtZW50IiwiY3JlYXRlUmVzaXplU2VydmljZSIsIm9uUmVzaXplIiwiZGVib3VuY2UiLCJvcmllbnRhdGlvbiIsInJlcGxhY2VBbGwiLCJzY3JvbGxpbmdFbGVtZW50Iiwic2Nyb2xsV2lkdGgiLCJzY3JvbGxIZWlnaHQiLCJvblNjcm9sbERlYm91bmNlZCIsImNyZWF0ZVNjcm9sbFNlcnZpY2UiLCJpc0luaXQiLCJzZXRDbGFzc2VzIiwiY2xhc3NOYW1lcyIsImZvcmNlVG9nZ2xlIiwibm9ybWFsaXplZENsYXNzTmFtZXMiLCJjbGFzc05hbWUiLCJoYXNXaW5kb3ciLCJfX0RFVl9fIiwia2V5Q29kZXNfZGVmYXVsdCIsIkVOVEVSIiwiU1BBQ0UiLCJUQUIiLCJFU0MiLCJMRUZUIiwiVVAiLCJSSUdIVCIsIkRPV04iLCJjcmVhdGVFYXNlT3V0IiwiY3JlYXRlRWFzZUluT3V0IiwidGFyZ2V0VmFsdWUiLCJwcmVjaXNpb24iLCJlYXNlSW5RdWFkIiwiZWFzZUluT3V0UXVhZCIsImVhc2VJbkN1YmljIiwiZWFzZU91dEN1YmljIiwiZWFzZUluT3V0Q3ViaWMiLCJlYXNlSW5RdWFydCIsImVhc2VPdXRRdWFydCIsImVhc2VJbk91dFF1YXJ0IiwiZWFzZUluUXVpbnQiLCJlYXNlT3V0UXVpbnQiLCJlYXNlSW5PdXRRdWludCIsImVhc2VJblNpbmUiLCJlYXNlT3V0U2luZSIsImVhc2VJbk91dFNpbmUiLCJlYXNlSW5DaXJjIiwiZWFzZU91dENpcmMiLCJlYXNlSW5PdXRDaXJjIiwiZWFzZUluRXhwbyIsImVhc2VPdXRFeHBvIiwiZWFzZUluT3V0RXhwbyIsImlucHV0TWluIiwiaW5wdXRNYXgiLCJvdXRwdXRNaW4iLCJvdXRwdXRNYXgiLCJnZXRSYWYiLCJnZXRDYW5jZWxSYWYiLCJuZXh0RnJhbWUiLCJub29wVmFsdWUiLCJ0ZXN0Rm4iLCJmb3VuZFByb3BzIiwiaW5zdGFuY2VzIiwiZG9tU2NoZWR1bGVyU3RlcHMiLCJzdGVwc0ZucyIsImFwaSIsImlzU2NoZWR1bGVkIiwicmVzb2x2ZWRQcm9taXNlIiwiZmx1c2giLCJ0YXNrcyIsInRhc2siLCJydW4iLCJzY2hlZHVsZUZsdXNoIiwiZ2V0U2NoZWR1bGVyIiwiZG9tU2NoZWR1bGVyIiwibm9ybWFsaXplRWFzZSIsImxpbmVhciIsInByb2dyZXNzVmFsdWUiLCJlYXNlZFByb2dyZXNzIiwib25Qcm9ncmVzcyIsIm5ld1Byb2dyZXNzIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiZ2xvYmFsVGhpcyIsInRvU3RyaW5nVGFnIiwibm1kIiwicGF0aHMiLCJBcHAiLCJIb21lIiwiY3VycmVudFBhZ2VJbnN0YW5jZSIsIkRPTVBhcnNlciIsImludGVybmFsTGlua3MiLCJyZW1vdmVBcHBPdmVybGF5IiwidXBkYXRlQ3VycmVudFBhZ2VJbnN0YW5jZSIsInNldHVwTGlzdGVuZXJzIiwic2V0dXBJbnRlcm5hbExpbmtzIiwiY3JlYXRlTGVuaXMiLCJhcHBPdmVybGF5IiwibGVuaXMiLCJzaG93Q3VycmVudFBhZ2UiLCJvblVybENoYW5nZSIsImFkZEludGVybmFsTGlua0xpc3RlbmVycyIsInByZWxvYWRlciIsImFuaW1hdGVQYWdlVHJhbnNpdGlvbkluIiwicmVxdWVzdCIsImZldGNoIiwiaGlzdG9yeSIsInB1c2hTdGF0ZSIsInBhZ2VEb2N1bWVudCIsInBhcnNlRnJvbVN0cmluZyIsInByZWxvYWRlZEltYWdlcyIsInJlcGxhY2VQYWdlIiwidXBkYXRlTmF2aWdhdGlvbkNvbG9yIiwiYW5pbWF0ZVBhZ2VUcmFuc2l0aW9uT3V0IiwicGFnZUVsZW1lbnQiLCJwYWdlQ29udGFpbmVyIiwiaW50ZXJuYWxMaW5rIiwib25jbGljayIsIkxlbmlzIiwicGFnZUNsYXNzIiwiaXNEYXJrUGFnZSIsImFwcCIsIiRmYWN0b3J5IiwiYXBwTG9hZGVkIiwiYXN5bmMiLCJzdHJpcEFuc2kiLCJfcmVxdWlyZSIsInNlbmRNZXNzYWdlIiwicmVsb2FkQXBwIiwiY3JlYXRlU29ja2V0VXJsIiwiaW5pdGlhbCIsInVzZVdhcm5pbmdPdmVybGF5IiwidXNlRXJyb3JPdmVybGF5IiwidXNlUHJvZ3Jlc3MiLCJzb2NrZXRVcmwiLCJpbnZhbGlkIiwiX2hhc2giLCJob3RDdHgiLCJ3YXJuaW5ncyIsIl9wcm9ncmVzcyIsIm9rIiwiX3dhcm5pbmdzIiwic3RyaXBwZWRXYXJuaW5ncyIsIl9lcnJvcnMiLCJzdHJpcHBlZEVycm9ycyJdLCJzb3VyY2VSb290IjoiIn0=